<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Javascript Namespace pattern </title>
      <author>George Hadjisavva</author>
      <pubDate>Mon, 29 Nov 2021 15:57:12 +0000</pubDate>
      <link>https://dev.to/scuz12/javascript-namespace-pattern-b9p</link>
      <guid>https://dev.to/scuz12/javascript-namespace-pattern-b9p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#namespace-pattern"&gt;
  &lt;/a&gt;
  Namespace Pattern
&lt;/h2&gt;

&lt;p&gt;Namespace can dramatically reduce the number of globals required and at the same time prevents the collisions or excessive name prefixing .&lt;br&gt;
Its important to know that javascript doesn't have namespaces built into the language syntax , but you can achieve this feature quite easy .Instead of adding functions,objects and variables into global scope you can create one global object and add all the functionality &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#refactor-antipattern-to-namespace-example"&gt;
  &lt;/a&gt;
  Refactor anti-pattern to Namespace example
&lt;/h3&gt;

&lt;p&gt;Consider this example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//anti-pattern example
function Read() {}
function Speak() {}
var topic_to_learn = "Javascript";
//objects
var book1 = {}
book1.data = {title:"Learn javascript",author:"John doe"}
var book2 = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in this example all the functions,variables and objects are declared and polluting the global scope of your application .  You can refactor this type of code by creating a single global object for your application , called for example &lt;em&gt;Student&lt;/em&gt; and change all functions and variables to become properties of your global object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Declare the global object
var STUDENT = {}
//constructors
STUDENT.Read = function(){};
STUDENT.SPEAK = function(){};

//a varibale
STUDENT.topic_to_learn = "javascript"

//object container 
STUDENT.books = {}

//nested objects 
STUDENT.books.book1 = {};
STUDENT.books.book1.data = {title:"Learn javascript",author:"John doe"}
//add second book
STUDENT.books.book2 = {};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pattern is good way to namespace your code and avoid naming collisions not only in your own code but collisions between your code and third-party code on the same page .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks-of-namespace"&gt;
  &lt;/a&gt;
  Drawbacks of Namespace
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More to type , prefixing every variable and function adds up in the total amount of code that needs to be downloaded&lt;/li&gt;
&lt;li&gt;Only one global instance as a result any part of the code can modify the global instance and the rest of the functionality gets the updated state&lt;/li&gt;
&lt;li&gt;Long nested names = slower property resolution lookups&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to load responsive images in AVIF and WebP using the HTML picture element</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Mon, 29 Nov 2021 15:44:16 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/load-avif-webp-using-html-picture-tag-4576</link>
      <guid>https://dev.to/whitep4nth3r/load-avif-webp-using-html-picture-tag-4576</guid>
      <description>&lt;p&gt;&lt;a href="https://www.contentful.com/developers/changelog/#images-api-now-supports-avif-format-conversion"&gt;We released support for the new AVIF image format&lt;/a&gt; on the Contentful Images API at our Fast Forward 2021 conference. This means you can return your images stored in Contentful in the new AVIF format via the REST API with a query parameter, or via the GraphQL API with a transform function in your query.&lt;/p&gt;

&lt;p&gt;But what is AVIF — and should you be using it right now? &lt;/p&gt;

&lt;p&gt;Now this stuff is tricky, so strap in and get ready for a wild ride! In this post, we’ll cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Image formats, compression and browser support&lt;/li&gt;
&lt;li&gt;Why image compression is important&lt;/li&gt;
&lt;li&gt;The HTML &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element&lt;/li&gt;
&lt;li&gt;Lazy loading and browser support&lt;/li&gt;
&lt;li&gt;Performance improvements gained with AVIF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are you ready? Let’s go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-avif"&gt;
  &lt;/a&gt;
  What is AVIF?
&lt;/h2&gt;

&lt;p&gt;In short, AVIF is the new kid on the block when it comes to image compression. Released in 2019 by the &lt;a href="https://aomedia.org/"&gt;Alliance for Open Media&lt;/a&gt;, AVIF claims to offer &lt;a href="https://aomedia.org/av1-features/"&gt;30% better compression than current alternatives&lt;/a&gt; such as WebP. It’s optimized for the web, designed with a low computation footprint, and what’s more — it’s open source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-image-compression-important"&gt;
  &lt;/a&gt;
  Why is image compression important?
&lt;/h2&gt;

&lt;p&gt;Websites in 2021 are an incredibly visual experience, full of images, animations and full-page photography. If you’re not careful, you can end up forcing visitors to your website to download hundreds of megabytes of images on a visit to your page. This risks making your website slow, inevitably causing your visitors to bounce. And we don’t want that!&lt;/p&gt;

&lt;p&gt;A fast experience on the web is crucial to providing a great user experience for visitors to your website, and as of June 2021, Google uses &lt;a href="https://web.dev/vitals/"&gt;Core Web Vitals&lt;/a&gt; scores to rank websites in search results. Core Web Vitals are currently scored on three aspects of user experience — loading, interactivity and visual stability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading"&gt;
  &lt;/a&gt;
  Loading
&lt;/h3&gt;

&lt;p&gt;Loading performance is measured by the &lt;strong&gt;Largest Contentful Paint (LCP)&lt;/strong&gt;. (This has nothing to do with the Contentful CMS in this context! 🙈 ). If you’re forcing users to download megabytes of images when the page first starts to load — for example, large hero images at the top of the page — your LCP time will increase. To provide a good user experience, the LCP should happen within 2.5 seconds of when the page first starts loading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interactivity"&gt;
  &lt;/a&gt;
  Interactivity
&lt;/h3&gt;

&lt;p&gt;Interactivity is measured by the &lt;strong&gt;First Input Delay (FID)&lt;/strong&gt; — and measures how soon your web application responds to user input such as clicking and typing into form fields. To provide a good user experience, pages should have an FID of 100 milliseconds or less.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-stability"&gt;
  &lt;/a&gt;
  Visual stability
&lt;/h3&gt;

&lt;p&gt;Visual stability is measured by &lt;strong&gt;Cumulative Layout Shift (CLS)&lt;/strong&gt;. Have you ever clicked on a part of a web page, only to find that you unexpectedly clicked on something else after a rogue element or image was finally loaded? CLS is where content pops into view once it has loaded, often pushing content down or sideways on the web page — and can be extremely frustrating! CLS makes your web page unstable — and usually, large images that take time to load are to blame. A good user experience maintains a CLS score of 0.1 or less.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-image-compression-important%C2%A0"&gt;
  &lt;/a&gt;
  Why is image compression important? 
&lt;/h3&gt;

&lt;p&gt;Did you know that the &lt;a href="https://worldpopulationreview.com/country-rankings/internet-speeds-by-country"&gt;average internet speed across the world in 2021&lt;/a&gt; is only 55.13Mbs? That’s only marginally faster than the speed of a slow 3G connection as simulated in Chromium Dev Tools. If you’re the nerdy type and want to look at the source code for the throttling simulations — &lt;a href="https://github.com/ChromeDevTools/devtools-frontend/blob/80c102878fd97a7a696572054007d40560dcdd21/front_end/sdk/NetworkManager.js#L261"&gt;check out this link on GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E7EhBFgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/538bdz0cr2y9guzqj75y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7EhBFgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/538bdz0cr2y9guzqj75y.png" alt="A graph showing the average internet speed in the world in 2021 a surveyed by world population review dot com as 55.15Mbs." width="880" height="1044"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In "&lt;a href="https://www.smashingmagazine.com/2021/09/modern-image-formats-avif-webp/"&gt;Using Modern Image Formats: AVIF And WebP&lt;/a&gt;, Addy Osmani, engineering manager at Google Chrome, gives us this fascinating piece of data: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you’re optimizing for the Web Vitals, you might be interested to hear that images account for ~42% of the Largest Contentful Paint element for websites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If almost 50% of your LCP is down to images — you need to deliver them to your website visitors in as few bytes as possible. The smaller the image file sizes are on your web pages, the less time it takes for visitors to your websites to download them — and this is especially important on slow internet connections and older, slower devices. &lt;/p&gt;

&lt;p&gt;Minimizing the size of your images ensures your Core Web Vitals scores are as good as possible across the board, which means you provide a better experience for your users, and ultimately means your pages rank better in Google search results. And to minimise the size of your images — you need to use the image format that yields the lightest results.&lt;/p&gt;

&lt;p&gt;So — if AVIF images currently offer the smallest image file sizes, we should all get on the AVIF train ASAP, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-convert-all-your-images-to-avif-right-now"&gt;
  &lt;/a&gt;
  Should you convert all your images to AVIF right now?
&lt;/h2&gt;

&lt;p&gt;WebP, there are some downsides to adopting this new format in 2021.&lt;/p&gt;

&lt;p&gt;AVIF may not be able to compress non-photographic images as well as PNG or lossless WebP. I found this to be the case in my initial experiments with the hero image on the homepage of &lt;a href="https://whitep4nth3r.com/?utm_source=dev-to"&gt;my personal website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VidqBdkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k86h3c1ckecxqe9dtjso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VidqBdkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k86h3c1ckecxqe9dtjso.png" alt="A screenshot from my Twitch stream, where I am looking to the left and smiling, with VSCode open in the background." width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whilst this image does contain photographic imagery of my face, most of the image is text and illustrations. As a WebP image, this image came in at 118kb, whilst as an AVIF image, the image size increased to 125kb. &lt;/p&gt;

&lt;p&gt;Secondly, at the time of writing this article, &lt;a href="https://caniuse.com/?search=avif"&gt;not all browsers currently support the AVIF image format&lt;/a&gt;. Edge, Safari and some mobile browsers are not quite there yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--epkvKWjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0dwh41ux1f9xryytpjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epkvKWjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0dwh41ux1f9xryytpjv.png" alt="A screenshot of can I use dot com showing that the support for AVIF is currently only available in Firefox, Chrome, Opera, Android and Samsung Internet browser." width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-all-is-not-lost%C2%A0"&gt;
  &lt;/a&gt;
  But all is not lost! 
&lt;/h3&gt;

&lt;p&gt;There is a beautiful way we can harness the power of native HTML to serve different supported image formats to browsers using the HTML &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; tag. And what’s more, when other browsers do catch up with the AVIF train — you won’t need to change any code! &lt;/p&gt;

&lt;p&gt;Before we look at the HTML, let’s take a look at how you can convert your images stored in Contentful to the new AVIF format using the REST and GraphQL APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-convert-your-images-to-avif-using-the-contentful-images-api"&gt;
  &lt;/a&gt;
  How to convert your images to AVIF using the Contentful Images API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.contentful.com/developers/docs/references/images-api/#/reference/retrieval"&gt;The Contentful Images API&lt;/a&gt; offers a variety of image transformations and manipulations as query parameters on the URL pointing to an image asset. You can change the quality of an image, resize it, add a background color, crop it, add rounded corners and more, as well as change the format of an image. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-query-parameters-on-an-image-url"&gt;
  &lt;/a&gt;
  Using query parameters on an image URL
&lt;/h3&gt;

&lt;p&gt;To convert your images stored in Contentful to AVIF, add fm=avif as a query parameter to your image URL. We’ll be using this technique later in the HTML example code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://images.ctfassets.net/{space_id}/{asset_id}/{unique_id}/{file_name}?fm=avif
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s an example URL for you to play with in your browser. Experiment with changing the format parameter to jpg, png, webp, gif or avif and compare the size of the image returned in the network tab! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://images.ctfassets.net/zz0ob82dbd6h/5YwujztZwQrte5WfgZf3eV/9eba3414d91e8e1e376fc96c0c8e6d63/cat-heavy-breathing-intensifies.gif?fm=avif"&gt;https://images.ctfassets.net/zz0ob82dbd6h/5YwujztZwQrte5WfgZf3eV/9eba3414d91e8e1e376fc96c0c8e6d63/cat-heavy-breathing-intensifies.gif?fm=avif&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the impatient among you, here’s how the image formats compare in terms of size:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jpg: &lt;strong&gt;76.8kb&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;png: &lt;strong&gt;125kb&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;webp: &lt;strong&gt;167kb&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;gif: &lt;strong&gt;1.2MB&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;avif: &lt;strong&gt;25.3kb&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QV5EM5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94qjjr9j14whwjtq0j9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QV5EM5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94qjjr9j14whwjtq0j9f.png" alt="A stacked collage image showing the same heavy breathing cat gif in five image formats, showing that the avif image is the fewest bytes." width="830" height="1804"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AVIF is the clear winner in terms of reduction in size for this image. However, one interesting thing to note is that whereas the original animated GIF comes in at a whopping 1.2MB, converting the image to WebP reduces the image size by a massive 87% &lt;strong&gt;and preserves the animation frames&lt;/strong&gt;! I think that’s a fascinating achievement and a wonderful nugget of information! I was so excited at this discovery that I shared it on Twitter!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yOebT15Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1460244031586410500/pu/img/MNnDU9pAq4HU3BP2.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqF2sPDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1461360329619763206/FbjYze58_normal.jpg" alt="⚡️ Salma | whitep4nth3r profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        ⚡️ Salma | whitep4nth3r
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I just discovered that WebP preserves animated frames in GIF images!&lt;br&gt;&lt;br&gt;This GIF converted to WebP reduces the file size by 87% from 1.2Mb to just 167kb. (Look at the file types in the network tab!)&lt;br&gt;&lt;br&gt;Does this mean an end to hugely lossy GIF compression or am I missing something? 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:54 PM - 15 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1460244790059188226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1460244790059188226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1460244790059188226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#using-graphql"&gt;
  &lt;/a&gt;
  Using GraphQL
&lt;/h3&gt;

&lt;p&gt;If you’re using GraphQL, you can convert your images to AVIF via a transform function on the image URL in the GraphQL query, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;blogPostCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AVIF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here’s the response returned. You’ll notice that this is the same image URL we used in the example above, demonstrating that the GraphQL API communicates directly with Contentful’s Images API to return what you need in your GraphQL response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"blogPostCollection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://images.ctfassets.net/zz0ob82dbd6h/5YwujztZwQrte5WfgZf3eV/9eba3414d91e8e1e376fc96c0c8e6d63/cat-heavy-breathing-intensifies.gif?fm=avif"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However — while you can retrieve images in AVIF format in GraphQL — &lt;strong&gt;remember that not all browsers support this image format yet&lt;/strong&gt; — so you don’t want to lock yourself down to the AVIF image format. &lt;/p&gt;

&lt;p&gt;Now let’s look at how we can take a base image URL and serve it in different ways to browsers that support different image formats using Contentful’s Images API and the native HTML &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; tag. &lt;/p&gt;

&lt;p&gt;And here is what you’ve all been waiting for!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-serve-responsive-images-with-avif-in-supported-browsers-using-the-html-tag"&gt;
  &lt;/a&gt;
  How to serve responsive images with AVIF in supported browsers using the HTML  tag
&lt;/h2&gt;

&lt;p&gt;I’ve attempted to understand &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images"&gt;the low-down on responsive images from MDN&lt;/a&gt; for many years and I must admit it was hard to grasp! &lt;a href="https://www.stefanjudis.com/snippets/a-picture-element-to-load-correctly-resized-webp-images-in-html/"&gt;This post from Stefan Judis&lt;/a&gt; provided a great help in getting to grips with this, in conjunction with MDN.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GfFDQ-R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2f5fzjgj4btaq7k0aoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GfFDQ-R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2f5fzjgj4btaq7k0aoq.png" alt='The "one does not simply" meme that reads: "One does not simply use width:100% to create responsive images".' width="651" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we get into the code, we need to understand what we mean by responsive images. Responsive images are not simply about giving all images &lt;code&gt;width: 100%&lt;/code&gt; to fill the size of a container! The real power in responsive images is serving different image files of different sizes to different viewport sizes — and what’s more — screens with different &lt;strong&gt;pixel densities or display resolutions&lt;/strong&gt;. This is called &lt;strong&gt;Resolution Switching&lt;/strong&gt;, and by providing browsers with an array of image URL options by configuring a &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element’s &lt;code&gt;srcset&lt;/code&gt;, &lt;code&gt;media&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; attributes, the most compatible image — according to the current layout and display capabilities — will be displayed. &lt;/p&gt;

&lt;p&gt;Let’s get straight into the HTML code example, and unpack what it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=500&amp;amp;fm=avif 500w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=900&amp;amp;fm=avif 900w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1300&amp;amp;fm=avif 1300w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1700&amp;amp;fm=avif 1700w,
    "&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 735px) 100vw, 736px"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=500&amp;amp;fm=webp 500w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=900&amp;amp;fm=webp 900w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1300&amp;amp;fm=webp 1300w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1700&amp;amp;fm=webp 1700w
    "&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 735px) 100vw, 736px"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=500 500w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=900 900w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1300 1300w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1700 1700w
    "&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 735px) 100vw, 736px"&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.ctfassets.net/.../img.png"&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Some great alternative text"&lt;/span&gt;
    &lt;span class="na"&gt;loading=&lt;/span&gt;&lt;span class="s"&gt;"lazy"&lt;/span&gt;
    &lt;span class="na"&gt;decoding=&lt;/span&gt;&lt;span class="s"&gt;"async"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"2032"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1076"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html-element"&gt;
  &lt;/a&gt;
  HTML  element
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; HTML element wraps &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; elements and one &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element to offer alternative versions of an image for different displays, devices or browsers (depending on the image formats supported).&lt;/p&gt;

&lt;p&gt;The magic in the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element is that the browser chooses the most appropriate &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element to display. If no matches are found — or the browser doesn't support the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element — the browser falls back to the URL in the &lt;code&gt;src&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element. The selected image is then presented in the space occupied by the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element. To prevent Cumulative Layout Shift as the image is loading, it’s important to add the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; attributes to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element for this fallback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.ctfassets.net/.../img.png"&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Some great alternative text"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"2032"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1076"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html-element"&gt;
  &lt;/a&gt;
  HTML  element

&lt;/h2&gt;

&lt;p&gt;The HTML &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element provides multiple media types for the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element to select the best-fit for the browser or device. You can also use the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element inside HTML &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements in the same way.&lt;/p&gt;

&lt;p&gt;In this example, the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; elements are offering image formats in &lt;code&gt;type="image/avif"&lt;/code&gt; and &lt;code&gt;type="image/webp"&lt;/code&gt;, which browsers will choose to display in that order depending on support.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-srcset-and-sizes-attributes"&gt;
  &lt;/a&gt;
  HTML srcset and sizes attributes
&lt;/h3&gt;

&lt;p&gt;The HTML &lt;code&gt;srcset&lt;/code&gt; attribute is a comma-separated list of strings of image URLs and either a width descriptor — such as &lt;code&gt;300w&lt;/code&gt;, or a pixel density descriptor — such as &lt;code&gt;1.5x&lt;/code&gt;.&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;srcset="
      https://images.ctfassets.net/.../img.png?q=75&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;w=500&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;fm=avif 500w,
      https://images.ctfassets.net/.../img.png?q=75&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;w=900&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;fm=avif 900w,
      https://images.ctfassets.net/.../img.png?q=75&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;w=1300&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;fm=avif 1300w,
      https://images.ctfassets.net/.../img.png?q=75&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;w=1700&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;fm=avif 1700w
    "
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The HTML &lt;code&gt;sizes&lt;/code&gt; attribute is a comma-separated list of media conditions paired with sizes to describe the final rendered image width — &lt;strong&gt;in CSS pixels, not physical pixels&lt;/strong&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio"&gt;read more about different types of pixels on MDN&lt;/a&gt;). The browser wants to know the best-fit resources to request as the page is loading. The &lt;code&gt;sizes&lt;/code&gt; attribute helps the browser to calculate the layout of the page and request the most suitable images for the layout — even before the CSS has loaded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;sizes="(max-width: 735px) 100vw, 736px"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; attributes work together in the browser to determine which image defined in the &lt;code&gt;srcset&lt;/code&gt; to request as the page is being rendered or the viewport resized.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this code example, four image URLs are provided in the &lt;code&gt;srcset&lt;/code&gt; for four different image widths: 500w, 900w, 1300w, 1700w. Notice that the &lt;code&gt;w={width}&lt;/code&gt; parameter on the image URLs is resizing the base image to match with size of the width descriptor &lt;a href="https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&amp;amp;-cropping/change-the-resizing-behavior"&gt;using the capabilities of the Contentful Images API&lt;/a&gt;. When not using the Contentful Images API, you may wish to choose completely different image URLs at different viewport widths to serve different image sizes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-note-on-the-magic-736-number"&gt;
  &lt;/a&gt;
  A note on the magic 736 number
&lt;/h3&gt;

&lt;p&gt;For blog posts on my personal website, the maximum width of the image container will only ever be 736px — in CSS pixels.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sizes&lt;/code&gt; attribute states that under a viewport width of 736px, choose the most appropriate image from the &lt;code&gt;srcset&lt;/code&gt;, considering that the image will be laid out across the entire viewport width (100vw). Depending on the device, full viewport width (100vw) could translate to 300 device pixels at 1 DPR, 600 device pixels at 2 DPR and 900 device pixels at 3DPR.&lt;/p&gt;

&lt;p&gt;At a viewport width of 736px and above (remember, it’s 736 CSS pixels), the browser knows that the image widths will not exceed 736 CSS pixels as the CSS is controlling the container width. Depending on the device, 736 CSS pixels will be 1472px at 2DPR and 2208px at 3DPR. At all viewport widths, the browser will choose the closest match from the &lt;code&gt;srcset&lt;/code&gt; list. Like magic!&lt;/p&gt;

&lt;p&gt;This is an entirely personal example, and you should configure your image widths according to the layout of your web pages. You can also make further optimizations using CSS &lt;code&gt;calc()&lt;/code&gt; to account for the padding values inside the container to load even smaller images at different viewport widths.&lt;/p&gt;

&lt;p&gt;It’s also important to note that the &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; attributes only come into effect when the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element is a direct child of a &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=500&amp;amp;fm=avif 500w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=900&amp;amp;fm=avif 900w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1300&amp;amp;fm=avif 1300w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1700&amp;amp;fm=avif 1700w
    "&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 735px) 100vw, 736px"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html-loadinglazy-and-decodingasync"&gt;
  &lt;/a&gt;
  HTML loading=”lazy” and decoding=”async”
&lt;/h2&gt;

&lt;p&gt;Lazy loading is a strategy to identify resources such as images, video and other media as non-blocking, or non-critical — and to load these only when needed, such as when a user scrolls that resource into view.&lt;/p&gt;

&lt;p&gt;To prevent visitors to web pages downloading a full page of images that aren’t visible in the viewport yet, we can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading"&gt;native HTML lazy loading&lt;/a&gt; with the &lt;code&gt;loading="lazy"&lt;/code&gt; attribute to defer image loading until a user scrolls near it — no JavaScript required! As stated before, to prevent Cumulative Layout Shift, be sure to add the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; of the base image as attributes to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element, which will instruct the browser to leave the correct space on the page in which to finally load your image when it scrolls into view.&lt;/p&gt;

&lt;p&gt;And in addition, the &lt;code&gt;decoding="async"&lt;/code&gt; attribute tells the browser that the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding"&gt;image loading can be performed asynchronously&lt;/a&gt;, so that content below the resource — such as paragraphs of text — are not blocked by the image taking a moment to load.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;loading=&lt;/span&gt;&lt;span class="s"&gt;"lazy"&lt;/span&gt;
  &lt;span class="na"&gt;decoding=&lt;/span&gt;&lt;span class="s"&gt;"async"&lt;/span&gt;
  &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"2032"&lt;/span&gt;
  &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1076"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s worth a mention that &lt;code&gt;loading="lazy"&lt;/code&gt; isn’t entirely supported across all browsers yet, but at the time of writing this article, &lt;a href="https://webkit.org/blog/12040/release-notes-for-safari-technology-preview-135/"&gt;Safari just shipped it in the newest Tech Preview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5u_bYt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4dyedlufunr1su80xex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5u_bYt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4dyedlufunr1su80xex.png" alt="A screenshot from can I use dot com showing that lazy loading is supported only in Safari's newest tech preview. Firefox, chrome, Opera, Android, Edge, and Samsung Internet are shown to support it." width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code-in-action"&gt;
  &lt;/a&gt;
  The code in action
&lt;/h2&gt;

&lt;p&gt;Here’s a video of the code example in action at 1 DPR. Notice the lazy-loading in action as the page is scrolled, and how the browser loads different image URLs from the &lt;code&gt;srcset&lt;/code&gt; when the browser is resized! And let me reiterate — &lt;strong&gt;no JavaScript required&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHRc2yfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01ela0jzr7vvlsgzm2j2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHRc2yfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01ela0jzr7vvlsgzm2j2.gif" alt="An animated image showing the network tab in Chromium dev tools is loading differently sizes images when the browser window is resized." width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-serving-avif-improve-my-website"&gt;
  &lt;/a&gt;
  How did serving AVIF improve my website?
&lt;/h2&gt;

&lt;p&gt;The code example above is &lt;em&gt;a lot&lt;/em&gt; of HTML to write! But I like it for how self-documenting it is. And what’s more, I’ve bagged some significant performance improvements for my personal website while learning all about AVIF.&lt;/p&gt;

&lt;p&gt;For image-heavy blog posts, and in particular &lt;a href="https://whitep4nth3r.com/blog/personalized-image-social-sharing-with-cloudinary-nextjs"&gt;this blog post&lt;/a&gt;, converting all images from WebP to AVIF reduced the cumulative size of images on a desktop screen at 2 DPR from just over 1Mb to just 404kb. And on mobile devices at 1 DPR, it reduced the cumulative sizes of images from 430kb to 124kb. &lt;strong&gt;That’s a 60-70% reduction across device sizes!&lt;/strong&gt; Those are some huge savings! And plus, all images are lazy-loaded, which means the browser doesn’t request them until the image is near to the visible viewport.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bottom-line"&gt;
  &lt;/a&gt;
  The bottom line
&lt;/h2&gt;

&lt;p&gt;Responsive images on the web are a tricky business to get right! But if you get them right, you provide a better user experience for your website visitors across browsers, devices and screen sizes, and you get bonus points from Google in your Core Web Vitals scores.&lt;/p&gt;

&lt;p&gt;If you’d like to see the final code example as a React component in the code for my personal blog site, &lt;a href="https://github.com/whitep4nth3r/p4nth3rblog/blob/main/components/ResponsiveImage/index.js"&gt;check it out on GitHub&lt;/a&gt;, and if you have any questions about responsive images and how you can make the best of the Contentful Images API, &lt;a href="https://twitter.com/whitep4nth3r"&gt;find me on Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>html</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to upload videos / docs along your code using SpeaCode?👨‍💻📷🚀</title>
      <author>liadshviro</author>
      <pubDate>Mon, 29 Nov 2021 15:37:12 +0000</pubDate>
      <link>https://dev.to/liadshviro/how-to-upload-videos-docs-along-your-code-using-speacode-gcj</link>
      <guid>https://dev.to/liadshviro/how-to-upload-videos-docs-along-your-code-using-speacode-gcj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-speacode"&gt;
  &lt;/a&gt;
  What is Speacode?
&lt;/h2&gt;

&lt;p&gt;Speacode is a knowledge sharing platform that improves collaboration among developers that are working on the same repository. Speacode stores videos and docs and makes them easily accessible to other developers in the exact lines of codes they belong to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-install-speacode-plugin"&gt;
  &lt;/a&gt;
  STEP 1 – install Speacode plugin🚀
&lt;/h2&gt;

&lt;p&gt;Open your IDE and then navigate into the plugins marketplace&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search “SpeaCode”&lt;/li&gt;
&lt;li&gt;Intall the plugin “&lt;a href="https://plugins.jetbrains.com/plugin/15672-speacode-video-screen-recorder-for-code--python-java-js-php-etc"&gt;Speacode Video Screen Recorder for Code | Python Java JS PHP etc&lt;/a&gt;"&lt;/li&gt;
&lt;li&gt;After the installation, click on Restart IDE for the changes to take effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-a-videodoc-comment-above-your-changes"&gt;
  &lt;/a&gt;
  STEP 2 – Add a video/doc comment above your changes
&lt;/h2&gt;

&lt;p&gt;In order to add a video simply add a comment with the word video.&lt;br&gt;
*The syntax of comments in various programming languages varies.&lt;br&gt;
//video&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iXKdB6n9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbn3q3nbgve5ff32tzsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iXKdB6n9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbn3q3nbgve5ff32tzsl.png" alt="Image description" width="746" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to add a document simply add a comment with the word &lt;br&gt;
//doc&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ovvhu1l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a2q2t2qb7q79yaa2tjr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ovvhu1l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a2q2t2qb7q79yaa2tjr.png" alt="Image description" width="768" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-click-on-the-play-icon-and-start-recording-your-screen"&gt;
  &lt;/a&gt;
  STEP 3 – Click on the play icon and start recording your screen
&lt;/h2&gt;

&lt;p&gt;When you click on the play button you will see 4 actions,in order  to start recording your screen click on “Record a video”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6NmibIWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ofuvmtuwzyqign2oji.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6NmibIWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ofuvmtuwzyqign2oji.jpeg" alt="Image description" width="768" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-choose-your-microphone-and-camera-not-a-must"&gt;
  &lt;/a&gt;
  STEP 4 – Choose your microphone and camera (Not a must)
&lt;/h2&gt;

&lt;p&gt;SpeaCode screen recorder will be opened and you will be able to choose the microphone, and a camera if you would like to turn it on.&lt;br&gt;
Then, you can go ahead and click on the “Start Recording” button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRKYY57z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3up63j9347rjjravodvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRKYY57z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3up63j9347rjjravodvn.png" alt="Image description" width="768" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-after-you-finish-recording-click-on-the-stop-button"&gt;
  &lt;/a&gt;
  STEP 5 – After you finish recording click on the Stop button
&lt;/h2&gt;

&lt;p&gt;After you have finished recording your screen click on the stop button on the left side of the recorded screen.&lt;br&gt;
Preview window will pop up and you will be able to save the video by clicking on the “Save” button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3XiYsNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvl6io5qhe3nlbny882x.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3XiYsNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvl6io5qhe3nlbny882x.jpeg" alt="Image description" width="768" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-upload-the-video-from-the-ide"&gt;
  &lt;/a&gt;
  STEP 6 – Upload the video from the IDE
&lt;/h2&gt;

&lt;p&gt;Click on the Play button again and then click on “Upload Video”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i6nGklOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64iwaxo6pt31qnp5cmyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i6nGklOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64iwaxo6pt31qnp5cmyo.png" alt="Image description" width="768" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-fill-out-the-upload-form"&gt;
  &lt;/a&gt;
  STEP 7 – Fill out the upload form
&lt;/h2&gt;

&lt;p&gt;Choose the title for the video and choose the video you have created in step 4 by clicking on the “Browse” button.&lt;br&gt;
In the tag field, you can write the task id or any other information you want divided by “,” (comma)&lt;br&gt;
After you have completed the form you can click on “Upload”.&lt;br&gt;
A notification will be sent after the video has been uploaded successfully.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dClRmM-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38mvs900cte51dd1cqz9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dClRmM-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38mvs900cte51dd1cqz9.jpeg" alt="Image description" width="768" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The comment has been updated with the new information.😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congratulations-your-video-is-ready"&gt;
  &lt;/a&gt;
  Congratulations - your video is Ready!
&lt;/h2&gt;

&lt;p&gt;Click on the play icon -&amp;gt; "Play Video"&lt;br&gt;
The video will be played on your local machine 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nq4cKcmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo1vk2uig20vuz5ae9iq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nq4cKcmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo1vk2uig20vuz5ae9iq.png" alt="Image description" width="580" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>python</category>
      <category>video</category>
      <category>java</category>
    </item>
    <item>
      <title>Release 0.4 Planning</title>
      <author>Kevan Y</author>
      <pubDate>Mon, 29 Nov 2021 15:21:51 +0000</pubDate>
      <link>https://dev.to/pandanoxes/release-04-planning-21lk</link>
      <guid>https://dev.to/pandanoxes/release-04-planning-21lk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;For the last release, I have to work on something larger and more impactful than anything I have done in the previous three releases. This blog will be separated into 3 other blogs, Release 0.4 - Planning, Release 0.4 - Progress, and Release 0.4 - Release.&lt;br&gt;
In this part, I will talk about finding a project, finding an issue, and planning how to work on an issue.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#looking-for-a-project"&gt;
  &lt;/a&gt;
  Looking for a project
&lt;/h2&gt;

&lt;p&gt;I wanted to continue my work on heptagram repository, but the owner switched to a new project and plan to archive the project. So I look to telescope and IPC144.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#looking-for-an-issue"&gt;
  &lt;/a&gt;
  Looking for an issue
&lt;/h2&gt;

&lt;p&gt;I'm looking for a fullstack issue. It would help me to develop more skills. I found 3 issues:&lt;br&gt;
&lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2418"&gt;https://github.com/Seneca-CDOT/telescope/issues/2418&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2506"&gt;https://github.com/Seneca-CDOT/telescope/issues/2506&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/113"&gt;https://github.com/Seneca-ICTOER/IPC144/issues/113&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#planning"&gt;
  &lt;/a&gt;
  Planning
&lt;/h2&gt;

&lt;p&gt;For issues &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2418"&gt;#2418&lt;/a&gt;, I first check where the code is located. I found that the API is located here &lt;a href="https://github.com/Seneca-CDOT/telescope/blob/master/src/api/status/src/services.js"&gt;https://github.com/Seneca-CDOT/telescope/blob/master/src/api/status/src/services.js&lt;/a&gt;, and the dashboard is located here &lt;a href="https://github.com/Seneca-CDOT/telescope/blob/master/src/api/status/public/index.html"&gt;https://github.com/Seneca-CDOT/telescope/blob/master/src/api/status/public/index.html&lt;/a&gt;.&lt;br&gt;
I will think about a design to make it prettier and fix to the rest of the dashboard. To display the status I will fetch from the API and base on the response I will show in green for OK and red for not OK&lt;/p&gt;

&lt;p&gt;For issues &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/2506"&gt;#2506&lt;/a&gt;, I first check where the code is located. I found the HTML for the dashboard is located here &lt;a href="https://github.com/Seneca-CDOT/telescope/blob/master/src/api/status/public/index.html"&gt;https://github.com/Seneca-CDOT/telescope/blob/master/src/api/status/public/index.html&lt;/a&gt; and to fetch the data the code is located here &lt;a href="https://github.com/Seneca-CDOT/telescope/blob/master/src/api/status/public/js/github-stats.js"&gt;https://github.com/Seneca-CDOT/telescope/blob/master/src/api/status/public/js/github-stats.js&lt;/a&gt;. The format for displaying the commit will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(avatar) Full Name 2dc6a97
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where commit sha will be in red and mono font. To display the data I will retrieve commit URL and sha from the fetch data and put it into the HTML.&lt;/p&gt;

&lt;p&gt;For issues &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/113"&gt;#113&lt;/a&gt; is to bring all images from ict.senecacollege.ca into the repo. First of all, I will download all the images then compress them to reduce more the size of the image. After that, I will replace all the links for all markdowns. Then double-check with the original website that everything is correct.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Getting Started with JSON</title>
      <author>SandraRodgers</author>
      <pubDate>Mon, 29 Nov 2021 15:06:12 +0000</pubDate>
      <link>https://dev.to/deepgram/getting-started-with-json-5ejf</link>
      <guid>https://dev.to/deepgram/getting-started-with-json-5ejf</guid>
      <description>&lt;p&gt;JSON is a lightweight text-based notation used to represent structured data. While JSON was inspired by Javascript object notation, it is generally agnostic in how it works (more on that later) and can be used by many languages either natively or with the help of libraries.&lt;/p&gt;

&lt;p&gt;In this post, we'll go over the basics you need to know to get you started working in JSON, and we'll dig a little deeper by examining how to take JSON from a Deepgram response object and find exactly the data we want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meet-json"&gt;
  &lt;/a&gt;
  Meet JSON
&lt;/h2&gt;

&lt;p&gt;Introductions usually start with names, so let's start there. JSON stands for Javascript Object Notation. JSON was originally pronounced like the name 'Jason', but over time, people started to pronounce it more like 'Jay-sawn'. The fact is, JSON is not opinionated, and neither is JSON's creator, Douglas Crockford, at least when it comes to pronunciation (comments in code... well, that's another story). In 2011 Crockford was quoted as saying: "There's a lot of argument about how you pronounce [JSON], but I strictly don't care." So don't feel self-conscious about your pronunciation of JSON anymore (although you might want to rethink how you are saying "Babel").&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#json-syntax"&gt;
  &lt;/a&gt;
  JSON Syntax
&lt;/h3&gt;

&lt;p&gt;At the root level, JSON must be an array or an object (although &lt;a href="https://stackoverflow.com/a/10428530/11073321"&gt;some discussion&lt;/a&gt; refers to changes that allow other data types at the root) . It is very common to see an object at the root like the following example, so we'll look closely at JSON that has an object at its root. Because it is an object, it will consist of data in the format of a &lt;strong&gt;key&lt;/strong&gt; (the name of the thing we are setting) and a &lt;strong&gt;value&lt;/strong&gt; (the actual data being set to that name).&lt;/p&gt;

&lt;p&gt;Here is a JSON object representing Luke Skywalker (adapted from &lt;a href="https://swapi.dev/"&gt;The Star Wars API&lt;/a&gt;). The basic structure is key-value pairs inside curly braces. &lt;strong&gt;Notice that each key is wrapped in double quotes, which is an important feature of JSON.&lt;/strong&gt; Also, trailing commas are not allowed (which differs from Javascript).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Luke Skywalker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;height&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mass&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hair_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blond&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;birth_year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;19BBY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gender&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;homeworld&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tatooine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;films&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A New Hope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Return of the Jedi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Empire Strikes Back&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Revenge of the Sith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jedi_knight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another important thing to know is that &lt;strong&gt;JSON ignores whitespace between elements&lt;/strong&gt;. So we could use a property name of “hair color” as our key, but it’s not recommended since that can cause problems if we convert the data into a different language. It’s recommended to use an underscore between the elements, as in “hair_color”. (However, the whitespace flexibility makes it very easy to beautify JSON to make it more human-readable.)&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;JSON does not allow comments&lt;/strong&gt;, which is one downside (in my opinion) because comments can be especially helpful in config files, where JSON is often used. The inventor of JSON made a purposeful choice not to allow for comments, and he has &lt;a href="https://archive.ph/20150704102718/https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr#selection-691.0-695.203"&gt;defended his decision&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#json-data-types"&gt;
  &lt;/a&gt;
  JSON Data Types
&lt;/h3&gt;

&lt;p&gt;In the key-value pairs, the &lt;strong&gt;value&lt;/strong&gt; can be of the following types: &lt;strong&gt;string, number, object, array, Boolean, or null&lt;/strong&gt;. It can also be more complex if we nest data inside the objects or the arrays. For example, if I wanted to provide more information about each film Luke Skywalker appears in, I could change the value of &lt;code&gt;"films"&lt;/code&gt; to be an array of objects, with each object containing key-value pairs with more data about each film (and I could continue on like this, having objects and arrays nested within objects and arrays).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;films&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A New Hope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1977&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Return of the Jedi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1983&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Empire Strikes Back&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1980&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Revenge of the Sith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2005&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you’re wondering about dates, &lt;strong&gt;JSON does not have a specified date type&lt;/strong&gt;. However, Javascript uses ISO 8601 string format to encode dates as a string, and it is recommended that other languages convert the date to ISO format before converting the date to JSON.&lt;/p&gt;

&lt;p&gt;So in Python, for example, we would use the &lt;code&gt;datetime&lt;/code&gt; module to get the current date, and then use its method &lt;code&gt;isoformat()&lt;/code&gt; to convert it to ISO format. Then use &lt;code&gt;json.dumps()&lt;/code&gt; to convert the date to JSON.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;formatted_datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;json_datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatted_datetime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, JSON is agnostic when it comes to numbers. While many languages have different number types and strict rules about numbers, JSON makes it easy. According to &lt;a href="https://www.ecma-international.org/wp-content/uploads/ECMA-404_1st_edition_october_2013.pdf"&gt;Ecma International&lt;/a&gt;, JSON "offers only the representation of numbers that humans use: a sequence of digits. All programming languages know how to make sense of digit sequences even if they disagree on internal representations." That's another reason JSON plays so well with other languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#convert-json-to-other-languages"&gt;
  &lt;/a&gt;
  Convert JSON to Other Languages
&lt;/h3&gt;

&lt;p&gt;Since JSON is used for data representation and not for executing logic, we have to be able to convert it to the language of our choice if we want to do something more with it. Let's look at how two common languages - Node and Python - are converted to JSON and are able to parse JSON.&lt;/p&gt;

&lt;p&gt;An important detail to understand is that while JSON uses object syntax to represent data structures, &lt;strong&gt;JSON actually exists as a string&lt;/strong&gt;. So in the JavaScript example below, notice that when we convert Javascript to JSON, we &lt;strong&gt;stringify&lt;/strong&gt; it, and when we convert it back to Javascript, we &lt;strong&gt;parse&lt;/strong&gt; it ('parsing' means analyzing a string).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Also good to know - a JSON string can be stored as a standalone file using the &lt;code&gt;.json&lt;/code&gt; extension, and the official MIME type for JSON is "application/json", which is what we would use as the content-type in the headers object of a fetch request.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h4&gt;

&lt;p&gt;In Javascript, use the method &lt;code&gt;JSON.stringify()&lt;/code&gt; to convert Javascript to JSON, and use &lt;code&gt;JSON.parse()&lt;/code&gt; to convert JSON to JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jedi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luke Skywalker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;mass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;homeWorld&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tatooine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jediString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jedi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jediString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//JSON string "{"name":"Luke Skywalker","mass":77,"homeWorld":"Tatooine"}"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jediString&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// Javascript object {name:"Luke Skywalker",mass:77,homeWorld:"Tatooine"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h4&gt;

&lt;p&gt;In Python, to convert a Python &lt;code&gt;dict&lt;/code&gt; to JSON, you can import the built-in module json, and then use the method &lt;code&gt;json.dumps()&lt;/code&gt; on the &lt;code&gt;dict&lt;/code&gt;. And to convert JSON to a Python &lt;code&gt;dict&lt;/code&gt;, use the method &lt;code&gt;json.loads()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="c1"&gt;# a Python object (dict):
&lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Luke Skywalker"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"mass"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"home_world"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Tatooine"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;jedi_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jedi_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# JSON string {"name": "Luke Skywalker", "mass": 77, "home_world": "Tatooine"}
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jedi_string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Python dict {'name': 'Luke Skywalker', 'mass': 77, 'home_world': 'Tatooine'}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#find-specific-data-in-a-real-json-object"&gt;
  &lt;/a&gt;
  Find Specific Data in a Real JSON Object
&lt;/h2&gt;

&lt;p&gt;A common, real-world scenario for encountering JSON would be if you were making a request to a third-party API. (Check out &lt;a href="https://developers.deepgram.com/blog/2021/11/getting-started-with-apis/"&gt;this blog post&lt;/a&gt; to learn more about working with APIs).&lt;/p&gt;

&lt;p&gt;For example, if you were to use the Deepgram API to transcribe audio, you would make a POST request that sends the audio file to Deepgram, and in response you would get your transcription of that audio file as text in the form of a JSON object.&lt;/p&gt;

&lt;p&gt;It can be tricky to know what you are looking at when you get a response object from an API. It helps to read the documentation to find out what the structure is of the data being sent back to you. Deepgram's documentation tells us that the response schema will include a root object with two objects inside it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a JSON-formatted '&lt;strong&gt;metadata&lt;/strong&gt;' object&lt;/li&gt;
&lt;li&gt;a JSON formatted '&lt;strong&gt;results&lt;/strong&gt;' object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the general structure would look something like this (the ellipsis [...] is included to show that some nested data has been hidden in the example):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"metadata"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"transaction_key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"lrCXFhkJPoTZ6Ezh9G24WabGcR5vMI/ksuSVtt1abe6abrr2+mGZb4CDTFGLedIxYUsI5MYvAEmDagh6AMEBFEyvC0qIF3YR5A31UMZkE4USmjWQSYyIukZxMtH9918TBLtUOvyeuTVeOcwdLUODqRA3uP67tF19eEKSza6Yj+IiQtib7yeHJWn5YzXPwX/5FOOQupKJoHz6dUH5lwjdhi9ykG6Nn87GDuZBzsejpEGsKJbzIgOQPJUrJTec09MDO95Bw9lj2cMPw1R/ZqBYbMtGvTamhopVl8XxV9Sg5blZkf8bs2KcRilYypQOvXggDGHLPxGNChBDFrvcR9Qi+eLLnEzPrHTsc6FjsFl/YgQ+Cw30RmpFiJceUXM2ed3/ojE5GLzsfSBeost4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"request_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eeaa1992-5729-4f2c-a73f-6224d78a47b8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sha256"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"8d2b4b8cc76cd35a5f9bde55ce92de211216849cca1407b1ad0d5d4d6ed610a2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"created"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-11-16T19:55:40.059Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"duration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;24.696&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"channels"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"models"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"41757536-6114-494d-83fd-c2694524d80b"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"results"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"channels"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"alternatives"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
           &lt;/span&gt;&lt;span class="nl"&gt;"transcript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is the weapon of a jedi night, not as clumsy or random as a blast an elegant weapon. For all civilized day. Over a thousand generations, the Jedi knights the guardians of peace of justice in the old republic before the dark times before they can pass."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"confidence"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.90745026&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"words"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"word"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"this"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.65999997&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"confidence"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.9960715&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"speaker"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"punctuated_word"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"utterances"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.65999997&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"confidence"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.8840211&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"channel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"transcript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is the weapon of a jedi night,"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"words"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"word"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"this"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.65999997&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.78&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"confidence"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.9960715&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"speaker"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"punctuated_word"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"speaker"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"791ad5c3-b097-4ab3-b26f-5c0c8595c0e5"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#show-only-the-necessary-data-from-the-response"&gt;
  &lt;/a&gt;
  Show Only the Necessary Data from the Response
&lt;/h3&gt;

&lt;p&gt;All we want is to get the &lt;strong&gt;transcript&lt;/strong&gt; of the audio. (I recommend taking a look again at the above object to notice where that &lt;code&gt;transcript&lt;/code&gt; data is.) But this response is giving me metadata and a whole bunch of other data, including individual words and data about those words! Really nice, but a little more than we need at the moment.&lt;/p&gt;

&lt;p&gt;So we will drill down into that &lt;strong&gt;results&lt;/strong&gt; object by chaining together the &lt;strong&gt;keys (object level)&lt;/strong&gt; and the &lt;strong&gt;indices (array level)&lt;/strong&gt;, following the chain down to the first &lt;code&gt;transcript&lt;/code&gt; string. The way to do this is to assign the response from Deepgram to a variable called &lt;strong&gt;response&lt;/strong&gt; (or whatever you want to call it), and then connect the keys and/or indices following this path:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The root-level &lt;strong&gt;response&lt;/strong&gt; object&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;results&lt;/strong&gt; object&lt;/li&gt;
&lt;li&gt;The first item in the &lt;strong&gt;channels&lt;/strong&gt; array (index 0)&lt;/li&gt;
&lt;li&gt;The first item in the &lt;strong&gt;alternatives&lt;/strong&gt; array (index 0)&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;transcript&lt;/strong&gt; property&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So it would use a chain similar to this general format:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  key -&amp;gt; key -&amp;gt; index0 -&amp;gt; index0 -&amp;gt; key
  [obj]  [obj]   [arr]     [arr]   [obj]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To see where this path takes us, we can print/log this chain of nested values. We should see just the value at the end of the chain, which is the transcript string. This would look similar in many languages, but let's take a look at it in Node and Python.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before continuing on, I challenge you to think to yourself how you would write out that chain of key names and indices so that you print only a response that is the transcript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;MAKE YOUR GUESS NOW...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#answer-node"&gt;
  &lt;/a&gt;
  Answer: Node
&lt;/h4&gt;

&lt;p&gt;To get just the transcript in Node, I could log the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;alternatives&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;transcript&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#answer-python"&gt;
  &lt;/a&gt;
  Answer: Python
&lt;/h4&gt;

&lt;p&gt;To get the transcript in Python, I could write the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'results'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'channels'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'alternatives'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'transcript'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the response I would see is just the transcript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;This is the weapon of a jedi night, not as clumsy or random as a blaster, an elegant weapon. For more civilized day. Over a thousand generations, the Jedi knights the guardians of peace of justice in the old republic before the dark times.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When comparing both languages, you can see that the way to get the data that you want is to understand how to access data from an object (use the &lt;strong&gt;object property key&lt;/strong&gt;) and how to pull data from an array (use the &lt;strong&gt;index of the position of the item in the array, starting with [0]&lt;/strong&gt;). We chain these keys and indices together to get down to the data we need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you learned a few interesting facts about JSON. Feel free to &lt;a href="https://twitter.com/sandra_rodgers_"&gt;reach out&lt;/a&gt; with comments, questions, or any other tidbits worth knowing about JSON.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Compilation of great reads 11/2021</title>
      <author>Rudolf Jurišić</author>
      <pubDate>Mon, 29 Nov 2021 14:54:50 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/compilation-of-great-reads-112021-1gin</link>
      <guid>https://dev.to/bornfightcompany/compilation-of-great-reads-112021-1gin</guid>
      <description>&lt;p&gt;This is an overview of posts and articles that recently made a buzz on our Slack channels. Together with our dev.to posts, they took shape of a newsletter we call &lt;a href="https://mailchi.mp/bornfight.com/devtodev-curated-cuts-of-development-know-how?e=e1cdf3e531"&gt;Dev-to-dev&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bits-from-the-www"&gt;
  &lt;/a&gt;
  BITS FROM THE WWW
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://medium.com/@blakenorrish/testers-just-validate-acceptance-criteria-4c25566b591e"&gt;Testers just validate Acceptance Criteria&lt;/a&gt;&lt;br&gt;
Here’s a list of things you can say to push your QA colleague’s buttons. Use them wisely. Just kidding. Don’t use them. Ever.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://drop.com/buy/stack-overflow-the-key-macropad"&gt;The ultimate copy-pasting tool&lt;/a&gt;&lt;br&gt;
Remember the 2021 April’s fool joke Stack Overflow did? Well, it is no joke anymore. You can buy your copy-paste macro keyboard and show off your copy-pasting ninja skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.infoq.com/articles/reduce-technical-debt/"&gt;Technical Debt Isn't Technical&lt;/a&gt;&lt;br&gt;
How technical debt correlates with cooking, why you should praise fire-preventing instead of fire-fighting and what could you do today to deal with technical debt (besides adding more to it).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.danslimmon.com/2019/07/15/do-nothing-scripting-the-key-to-gradual-automation/"&gt;Do-nothing scripting: the key to gradual automation&lt;/a&gt;&lt;br&gt;
If your procedures are only partially suitable for automation, this concept brings you one step closer to automation and reduces the chance of your … I mean … human error. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://mvsp.dev/"&gt;Minimum Viable Secure Product&lt;/a&gt;&lt;br&gt;
If you don’t have any kind of security compliance for your product, this minimalistic security checklist is what you need in order to sleep tight. Or it can be something you implement during those sleepless nights. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/ps-on-the-web/"&gt;Photoshop's journey to the web&lt;/a&gt;&lt;br&gt;
Photopea was the de-facto “photoshop online” tool since 2017. We loved the story behind it. Adobe finally made the official version (still in beta). Not sure how long would it take without the Photopea, though.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bornfight-engineering-monday"&gt;
  &lt;/a&gt;
  BORNFIGHT ENGINEERING MONDAY
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://dev.to/bornfightcompany/land-a-react-job-the-lazy-way-2d1o"&gt;Land a React Job: The lazy way&lt;/a&gt;&lt;br&gt;
So you've run out of Netflix TV shows to watch, YouTube algorithm is showing videos like “Man eats 87 SpongeBob stickers in an alley” and you learned a JavaScript library while in lockdown? It’s time to react!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bornfightcompany/how-to-work-as-a-solo-frontend-developer-dhp"&gt;How to work as a solo (frontend) developer&lt;/a&gt;&lt;br&gt;
Working in a team is great. You can progress fast and learn a lot from your colleagues. But sometimes, life happens, and you have to work alone. There, there... don’t be sad. Read this and make the most of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bornfightcompany/implement-traditional-auth-system-in-symfony-with-less-code-than-ever-5h25"&gt;Implement traditional auth system in Symfony with less code than ever&lt;/a&gt;&lt;br&gt;
Optimise Symfony auth implementation with PHP8 attributes and the constructor properties promotion. Warning: If your manager is counting your lines of code as a success metric, you should skip reading this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bornfightcompany/5-reasons-why-frontend-developers-love-graphql-16h8"&gt;5 reasons why Frontend Developers love GraphQL&lt;/a&gt;&lt;br&gt;
If you’ve never worked with GraphQL and haven’t been convinced in the benefits, this post about Luka falling in love with GraphQL might just change your mind. If not, you’ll read yet another great love story.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bornfightcompany/create-and-publish-your-own-react-library-3cc8"&gt;Create and publish your own React library&lt;/a&gt;&lt;br&gt;
This guide will help you understand how to create and publish your library. Reading it is a requirement for becoming a rich and famous React library publisher, so don’t skip this chance to become one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/bornfightcompany/page-object-pattern-reusable-functions-in-cypress-35jj"&gt;Page Object Pattern + Reusable Functions in Cypress&lt;/a&gt;&lt;br&gt;
Make your work and life easier by isolating page specifics in your automated tests. In a perfect world, selectors would not be changed. But you and I know developers do it just because they can. -.-&lt;/p&gt;

&lt;p&gt;If you like the content, make sure to &lt;a href="https://bornfight.us19.list-manage.com/subscribe?u=67e7b1cbb978b5e176035a450&amp;amp;id=51a7668afb"&gt;subscribe&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>bornfight</category>
    </item>
    <item>
      <title>Weird Things About For-Loops In JavaScript</title>
      <author>MkDay</author>
      <pubDate>Mon, 29 Nov 2021 14:51:25 +0000</pubDate>
      <link>https://dev.to/mkday/weird-things-about-for-loops-in-javascript-29mb</link>
      <guid>https://dev.to/mkday/weird-things-about-for-loops-in-javascript-29mb</guid>
      <description>&lt;p&gt;I bet you all use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"&gt;&lt;em&gt;for-loop&lt;/em&gt;&lt;/a&gt; like the below one, at least once in your lifetime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* output

1
2
3
4
5

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anyway, instead of this deadly usual, let's talk about some of the rare things that come with &lt;em&gt;for-loop&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But first,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forloop-in-brief"&gt;
  &lt;/a&gt;
  &lt;em&gt;for-loop&lt;/em&gt; in brief
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop comes in handy when we want to,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;execute some statements multiple times,&lt;/li&gt;
&lt;li&gt;by updating the value of a variable, &lt;/li&gt;
&lt;li&gt;while evaluating a condition.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the syntax for the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;for ([initialization]; [condition]; [final-expression]) {&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;// statements&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;}&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Normally what does this do is, &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;initialization:&lt;/strong&gt; Initialize a variable and evaluate only once before the loop start.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;condition:&lt;/strong&gt; Check the condition.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if it is true, execute the &lt;em&gt;statements&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;if it is false, terminate the loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;final-expression:&lt;/strong&gt; If the condition is true, evaluate the &lt;em&gt;final-expression&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;repeat the 2nd and 3rd steps until the condition becomes false.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's play with the rare things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-three-expressions"&gt;
  &lt;/a&gt;
  Optional three expressions
&lt;/h3&gt;

&lt;p&gt;By looking at the syntax of the &lt;code&gt;for&lt;/code&gt; loop, we can see that it has three expressions inside the parentheses. But they all are optional, which means we can leave them as blank as well. &lt;/p&gt;

&lt;p&gt;So, let's try to leave all or some of these expressions and see the effect.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-the-forloop-without-initialization-expression"&gt;
  &lt;/a&gt;
  1. The &lt;em&gt;for-loop&lt;/em&gt; without &lt;em&gt;initialization&lt;/em&gt; expression
&lt;/h4&gt;

&lt;p&gt;Here we keep the &lt;em&gt;initialization&lt;/em&gt; expression as empty.&lt;/p&gt;

&lt;p&gt;Alternatively, we can initialize the variable outside of the loop before the loop begin. But remember to put a &lt;em&gt;semi-colon&lt;/em&gt; to represent the empty initialization block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* output

1
2
3
4
5

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-the-forloop-without-condition-expression"&gt;
  &lt;/a&gt;
  2. The &lt;em&gt;for-loop&lt;/em&gt; without &lt;em&gt;condition&lt;/em&gt; expression
&lt;/h4&gt;

&lt;p&gt;Also, we can omit the &lt;em&gt;condition&lt;/em&gt; part as well. &lt;/p&gt;

&lt;p&gt;By doing this, you have to break the loop at some point. Otherwise, it will run infinitely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* output

1
2
3
4
5

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-the-forloop-without-finalexpression"&gt;
  &lt;/a&gt;
  3. The &lt;em&gt;for-loop&lt;/em&gt; without &lt;em&gt;final-expression&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;This loop omits the &lt;em&gt;final expression&lt;/em&gt;. So we have to modify the variable inside the loop body to keep the loop running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* output

1
2
3
4
5

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-the-forloop-without-any-expressions"&gt;
  &lt;/a&gt;
  4. The &lt;em&gt;for-loop&lt;/em&gt; without any expressions
&lt;/h4&gt;

&lt;p&gt;Even we omit all the expressions still have to put two &lt;em&gt;semi-colons&lt;/em&gt; inside the parentheses to represent all the three expression blocks. Otherwise, it gives us an error. &lt;/p&gt;

&lt;p&gt;Also, do not forget to use the &lt;em&gt;break-statement&lt;/em&gt;, to terminate the loop at some point and modify the variable to keep the loop running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* output

1
2
3
4
5

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-the-forloop-with-multiple-variables"&gt;
  &lt;/a&gt;
  5. The &lt;em&gt;for-loop&lt;/em&gt; with multiple variables
&lt;/h4&gt;

&lt;p&gt;Of cause! Multiple variables are allowed to use inside the parentheses. Using &lt;em&gt;commas&lt;/em&gt;, we can separate them from each other in each expression block.&lt;/p&gt;

&lt;p&gt;In the example below, we use two separate variables called &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;i&lt;/em&gt; represents &lt;em&gt;odd&lt;/em&gt; numbers between 1 to 5 inclusively.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;j&lt;/em&gt; represents &lt;em&gt;even&lt;/em&gt; numbers between 2 to 5 inclusively.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; - odd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; - even&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* output

"1 - odd"
"2 - even"
"3 - odd"
"4 - even"

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cool thing is you can see that we did not get &lt;code&gt;5 - odd&lt;/code&gt; in the output! &lt;/p&gt;

&lt;p&gt;The reason is that the &lt;em&gt;for-loop&lt;/em&gt; checks both the conditions in each iteration and only executes the statements if both of them are true. &lt;/p&gt;

&lt;p&gt;After the fourth iteration, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;i = 5, so i &amp;lt;= 5 is true&lt;/li&gt;
&lt;li&gt;j = 6, so j &amp;lt;= 5 is false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the loop stop at this point.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-the-forloop-without-the-loop-body"&gt;
  &lt;/a&gt;
  6. The &lt;em&gt;for-loop&lt;/em&gt; without the loop body
&lt;/h4&gt;

&lt;p&gt;Interestingly enough, we can omit the &lt;em&gt;loop body&lt;/em&gt; as well. Here we put &lt;em&gt;semi-colon&lt;/em&gt; immediately after the parentheses instead of the loop body.&lt;/p&gt;

&lt;p&gt;In this example, &lt;code&gt;i&lt;/code&gt; increments until &lt;em&gt;10&lt;/em&gt; and in each iteration adds its value to the &lt;code&gt;sum&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 65&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-forloop-with-the-keywords-var-and-let"&gt;
  &lt;/a&gt;
  The &lt;em&gt;for-loop&lt;/em&gt; with the keywords &lt;em&gt;var&lt;/em&gt; and &lt;em&gt;let&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;A variable initialized with the &lt;code&gt;var&lt;/code&gt; keyword inside the loop, can also access outside the loop.&lt;/p&gt;

&lt;p&gt;The reason is that the variable initialized with the &lt;code&gt;var&lt;/code&gt; and the &lt;em&gt;for-loop&lt;/em&gt; both belong to the same scope.&lt;/p&gt;

&lt;p&gt;If we initialize the variable with the &lt;code&gt;let&lt;/code&gt; keyword, we cannot access it outside the loop.&lt;/p&gt;

&lt;p&gt;Because the scope of the variable initialized with &lt;code&gt;let&lt;/code&gt; is local to the loop.&lt;/p&gt;

&lt;p&gt;Try this example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;with &lt;em&gt;var&lt;/em&gt; keyword:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// with var keyword&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`inside counter = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`outside counter = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// doesn't throw errors&lt;/span&gt;

&lt;span class="cm"&gt;/* output

"inside counter = 1"
"inside counter = 2"
"inside counter = 3"
"inside counter = 4"
"inside counter = 5"
"outside counter = 6"

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;with &lt;em&gt;let&lt;/em&gt; keyword:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// with let keyword&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`inside counter = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`outside counter = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// throws an error&lt;/span&gt;

&lt;span class="cm"&gt;/* output

"inside counter = 1"
"inside counter = 2"
"inside counter = 3"
"inside counter = 4"
"inside counter = 5"
"Uncaught ReferenceError: i is not defined 

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#labeled-forloop"&gt;
  &lt;/a&gt;
  Labeled &lt;em&gt;for-loop&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label#description"&gt;label&lt;/a&gt;, we can &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break#description"&gt;break&lt;/a&gt; the &lt;em&gt;outer loop&lt;/em&gt; within the &lt;em&gt;inner loop&lt;/em&gt;, since the &lt;code&gt;for-loop&lt;/code&gt; can be labeled.&lt;/p&gt;

&lt;p&gt;Here is the syntax of the &lt;code&gt;break&lt;/code&gt; statement:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;break [label];&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;outer_loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;inner_loop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;do not allow to run more than one round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="nx"&gt;outer_loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* output

"round: 1"
1
2
3
4
5
"round: 2"
"do not allow to run more than one round"

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-forloop-iterates-through-the-html-element"&gt;
  &lt;/a&gt;
  The &lt;em&gt;for-loop&lt;/em&gt; iterates through the HTML element
&lt;/h3&gt;

&lt;p&gt;Here is another rare way to use &lt;em&gt;for-loop&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;This loop iterates through the parent node by checking whether it has any child element using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType"&gt;&lt;em&gt;nodeType&lt;/em&gt;&lt;/a&gt; of the child node. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;child.nodeType == 1&lt;/code&gt; means it checks only for the &lt;em&gt;ELEMENT_NODE&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If it found a child element then, it gets &lt;code&gt;textContent&lt;/code&gt; of the child.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;child para 1&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;child para 2&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;child para 3&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;child para 4&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;child para 5&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get Text&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;JavaScript:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#parent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getText&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextSibling&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodeType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* output

"child para 1"
"child para 2"
"child para 3"
"child para 4"
"child para 5"

*/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are only a few of the rare cases that come with &lt;em&gt;for-loop&lt;/em&gt;. If you know more, we would like to hear from you. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Happy Coding!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Image Credit: Alistair MacRobert on Unsplash&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting started - Yue Discord Bot</title>
      <author>t1xm</author>
      <pubDate>Mon, 29 Nov 2021 14:50:04 +0000</pubDate>
      <link>https://dev.to/t11xxm/getting-started-yue-discord-bot-2fa8</link>
      <guid>https://dev.to/t11xxm/getting-started-yue-discord-bot-2fa8</guid>
      <description>&lt;p&gt;A long time ago I started programming with discord.js, unfortunately I never had time to finish a bot! Now I have the time and desire to finally build a bot! I'm trying as best I can to share my journey to the finished bot with you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-list"&gt;
  &lt;/a&gt;
  ToDo list:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ModLog system with Database&lt;/li&gt;
&lt;li&gt;Birthday system&lt;/li&gt;
&lt;li&gt;Purge &lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Redux VS React Context</title>
      <author>Android Club - VITC</author>
      <pubDate>Mon, 29 Nov 2021 14:47:49 +0000</pubDate>
      <link>https://dev.to/androidvitc/redux-vs-react-context-1187</link>
      <guid>https://dev.to/androidvitc/redux-vs-react-context-1187</guid>
      <description>&lt;p&gt;So, we all have worked on React or React Native for developing web and mobile applications. There are times we are stuck on which state management library to use. &lt;br&gt;
The most famous approaches are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;li&gt;Context API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hop on to this blog and know all there about the pros and cons of both!!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/riteshshukla04" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNfTBi4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZUVZ5TBu--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/731975/e4b640a3-be59-43d0-82e7-0fe2995d158e.png" alt="riteshshukla04"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/riteshshukla04/redux-vs-react-context-5h22" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Redux VS React Context&lt;/h2&gt;
      &lt;h3&gt;Ritesh Shukla ・ Nov 25 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#redux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>androidclub</category>
      <category>react</category>
      <category>redux</category>
    </item>
    <item>
      <title>Building an Address Search Function Using Amplify Geo and MapLibre GL Geocoder</title>
      <author>Yasunori Kirimoto</author>
      <pubDate>Mon, 29 Nov 2021 14:41:30 +0000</pubDate>
      <link>https://dev.to/aws-builders/building-an-address-search-function-using-amplify-geo-and-maplibre-gl-geocoder-4lk2</link>
      <guid>https://dev.to/aws-builders/building-an-address-search-function-using-amplify-geo-and-maplibre-gl-geocoder-4lk2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6hL38hxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-070_01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6hL38hxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-070_01.png" alt="img" width="880" height="180"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#i-built-an-address-search-function-using-amplify-geo-and-maplibre-gl-geocoder-tada"&gt;
  &lt;/a&gt;
  I built an address search function using Amplify Geo and MapLibre GL Geocoder 🎉
&lt;/h3&gt;

&lt;p&gt;Amplify Geo was officially released the other day. Amplify Geo is one of the features of AWS Amplify that makes it easier to build Amazon Location Service. &lt;br&gt;
In this article, I tried to build a map application by adding an address search function with MapLibre GL Geocoder.&lt;/p&gt;



&lt;p&gt;Advance Preparation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amplify Geo settings up to the map display function &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://dev.to/aws-builders/building-a-map-application-with-amplify-geo-and-vuejs-2226"&gt;Building a Map Application with Amplify Geo and Vue.js&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#setting-up-amplify-geo"&gt;
  &lt;/a&gt;
  Setting up Amplify Geo
&lt;/h2&gt;

&lt;p&gt;First, we will configure Amplify Geo.&lt;br&gt;
&lt;a href="https://day-journal.com/memo/aws-amplify-005"&gt;Add location feature (geocoding)&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;If you only need a location function (geocoding), you can implement it with these two commands and the map function!&lt;br&gt;
Amazon Location Service requires AWS console configuration and role configuration, but Amplify Geo does all of that for you!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add geo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This completes the configuration of Amplify Geo.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h2&gt;

&lt;p&gt;Next, let's build the actual map application.&lt;/p&gt;

&lt;p&gt;Once you have configured the map display function of Amplify Geo, you only need to change "MapPane.vue" and "main.js".&lt;/p&gt;



&lt;p&gt;execution environment&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;node v16.10.0
&lt;/li&gt;
&lt;li&gt;npm v7.24.0 &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Install MapLibre GL Geocoder in advance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @maplibre/maplibre-gl-geocoder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Overall composition&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zlpvu-KI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-070_02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zlpvu-KI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://day-journal.com/memo/images/try-070_02.png" alt="img" width="232" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  package.json
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"amplify-geo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vue-cli-service serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vue-cli-service build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vue-cli-service lint"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@aws-amplify/ui-components"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.9.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@maplibre/maplibre-gl-geocoder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"aws-amplify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"core-js"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.6.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"maplibre-gl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.15.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"maplibre-gl-js-amplify"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.1.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vue-router"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.0.0-0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vuex"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.0.0-0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@vue/cli-plugin-babel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~4.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@vue/cli-plugin-eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~4.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@vue/cli-plugin-router"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~4.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@vue/cli-plugin-vuex"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~4.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@vue/cli-service"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~4.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@vue/compiler-sfc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"babel-eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^10.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^6.7.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-plugin-vue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.0.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"eslintConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"root"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"plugin:vue/vue3-essential"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"eslint:recommended"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"parserOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel-eslint"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"browserslist"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt; 1%"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"last 2 versions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"not dead"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;/src&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mainjs"&gt;
  &lt;/a&gt;
  main.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl/dist/maplibre-gl.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@maplibre/maplibre-gl-geocoder/dist/maplibre-gl-geocoder.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl-js-amplify/dist/public/amplify-geocoder.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;applyPolyfills&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;defineCustomElements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-amplify/ui-components/loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;awsconfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./aws-exports&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;awsconfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;applyPolyfills&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;defineCustomElements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCustomElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amplify-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Load MapLibre GL Geocoder and wrappers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@maplibre/maplibre-gl-geocoder/dist/maplibre-gl-geocoder.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl-js-amplify/dist/public/amplify-geocoder.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;/src/components&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mappanevue"&gt;
  &lt;/a&gt;
  MapPane.vue
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;'mapPane'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'map'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createAmplifyGeocoder&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl-js-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MapPane&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mapCreate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;mapCreate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;139.7648&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;35.6794&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;bearing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;64.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;pitch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createAmplifyGeocoder&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt; &lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Load MapLibre GL Geocoder wrapper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createAmplifyGeocoder&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maplibre-gl-js-amplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Load MapLibre GL Geocoder wrapper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createAmplifyGeocoder&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Let's check with a simple local server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Start up a local server and try logging in 💡 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_P76io0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://day-journal.com/memo/images/try-070_00.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_P76io0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://day-journal.com/memo/images/try-070_00.gif" alt="img" width="880" height="696"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#i-was-able-to-build-an-address-search-function-using-amplify-geo-and-maplibre-gl-geocoder-thumbsup"&gt;
  &lt;/a&gt;
  I was able to build an address search function using Amplify Geo and MapLibre GL Geocoder 👍
&lt;/h4&gt;

&lt;p&gt;We have confirmed that the combination of Amplify Geo and MapLibre GL Geocoder makes it easier to build an address search function than using Amplify Geo as it is. I will continue to explore other features as well 👍 &lt;/p&gt;

</description>
      <category>amazonlocationservice</category>
      <category>vue</category>
      <category>awsamplify</category>
      <category>maplibre</category>
    </item>
    <item>
      <title>Day 2 - Basic CSS | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Mon, 29 Nov 2021 14:38:37 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-2-basic-css-100daysofcode-17d9</link>
      <guid>https://dev.to/jannatinnaim/day-2-basic-css-100daysofcode-17d9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciy2e2m_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8l3i5wvc03kxdl4knwq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciy2e2m_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8l3i5wvc03kxdl4knwq.jpg" alt="Coding Motivation Banner" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;Completed the &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design#basic-css"&gt;Basic CSS&lt;/a&gt; from &lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CSS gives websites their looks. It's kinda like makeup but on steroids. I've only scratched the surface of it and I know there's so much to learn about CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;I didn't face any problems today either. I'm somewhat familiar with CSS which helped me get through the basics of it. Although, this might change very soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;Tomorrow I take on the &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design#applied-visual-design"&gt;Applied Design&lt;/a&gt; course. This one seems kinda challenging and probably is. Excited for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-was-the-experience-so-far"&gt;
  &lt;/a&gt;
  How was the experience so far?
&lt;/h3&gt;

&lt;p&gt;So far so good. I got the basics of HTML and CSS and now comes their practical uses. So, hoping for the best.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freecodecamp.org/"&gt;Free Code Camp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Array cheatsheet Javascript</title>
      <author>Mansour Mahamat</author>
      <pubDate>Mon, 29 Nov 2021 14:34:10 +0000</pubDate>
      <link>https://dev.to/mahamatmans/array-cheatsheet-javascript-3mci</link>
      <guid>https://dev.to/mahamatmans/array-cheatsheet-javascript-3mci</guid>
      <description>&lt;p&gt;Variables in Javascript allow only one data to be stored at a time. However, given that it is often useful to manipulate many data, the concept of variable is sometimes insufficient, because it becomes difficult to manage a great number of distinct variables.&lt;/p&gt;

&lt;p&gt;To remedy this, Javascript proposes a data structure allowing to store all these data in a "common variable": the array.&lt;/p&gt;

&lt;p&gt;An array, in Javascript, is thus a variable which can contain several independent data, indexed by a number, called index. The index of an array is thus the element allowing to access the data stored in it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY LENGTH()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The length () method returns the length of the array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJFpIGny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ptnrd3x8k75sd35magg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJFpIGny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ptnrd3x8k75sd35magg.png" alt="Length" width="880" height="555"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY PUSH()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The push () method adds one or more elements to the end of an array and returns the new size of the array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvcA1zNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgyczaadhzx9a1lme5ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvcA1zNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgyczaadhzx9a1lme5ba.png" alt="Push" width="880" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY POP()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The pop () method removes the last element from an array and returns that element. This method changes the length of the array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mjrLBYPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qux3shwj01gzj7uuskq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mjrLBYPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qux3shwj01gzj7uuskq6.png" alt="Pop" width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY UNSHIFT()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The unshift () method adds one or more elements to the start of an array and returns the new length of the array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUYoHhNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9urjlkwic54jggpz4eu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUYoHhNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q9urjlkwic54jggpz4eu.png" alt="Unshift" width="880" height="313"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY SHIFT()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The shift () method removes the first element from an array and returns that element. This method changes the length of the array.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UlR4Y952--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6so7hlkk5kjvpc2huyfr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UlR4Y952--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6so7hlkk5kjvpc2huyfr.png" alt="Shift" width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY FOREACH()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The forEach () method iterates through the array elements one by one to perform a function.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ThAa2rCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yaqoxm7034cmi6snanyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ThAa2rCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yaqoxm7034cmi6snanyq.png" alt="ForEach" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY FILTER()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The filter () method creates and returns an array containing the elements that check the filter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fLRToAtu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acgl675539c4ik9h8v6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fLRToAtu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acgl675539c4ik9h8v6v.png" alt="Filter" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY MAP()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The map () method returns a new array containing all the elements of the initial array on which the function is called.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ipcOYsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9wqr8e563t1jghrpjei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ipcOYsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9wqr8e563t1jghrpjei.png" alt="Map" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY REDUCE()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The reduce () method applies a function which is an "accumulator" and which processes each value in the array (from left to right) to reduce it to a single value.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lhs0hG8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7egdwmkm2h1aig3v3c8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lhs0hG8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7egdwmkm2h1aig3v3c8o.png" alt="Reduce" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY SLICE()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The slice () method returns an array, containing a copy of part of the original array, the portion is defined by a start index and an end index (excluded). The original array will not be modified.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jrSiF-DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4dxe3daf4lnxeau3j5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jrSiF-DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4dxe3daf4lnxeau3j5t.png" alt="Slice" width="880" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY CONCAT()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The concat () method is used to merge one or more arrays by concatenating them. This method does not modify existing arrays, it returns a new array which is the result of the operation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TAkwQRoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou1f14ps9pk2gq4551fj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAkwQRoi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou1f14ps9pk2gq4551fj.png" alt="Concat" width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY JOIN()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The join () method creates and returns a new character string by concatenating all the elements of an array. The concatenation uses the comma or another string, supplied as an argument, as the separator.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vy8LfrfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bedzq2y3n13h3o3ao3to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vy8LfrfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bedzq2y3n13h3o3ao3to.png" alt="Join" width="824" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ARRAY REVERSE()&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The reverse() method reverses an array. The first array element becomes the last, and the last array element becomes the first.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xlh2VpWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t52uklor18kxdwyfndub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xlh2VpWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t52uklor18kxdwyfndub.png" alt="Reverse" width="856" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
