<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>MongoDB $weeklyUpdate (September 13, 2021): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Mon, 13 Sep 2021 14:23:51 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-september-13-2021-latest-mongodb-tutorials-events-podcasts-streams-4h03</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-september-13-2021-latest-mongodb-tutorials-events-podcasts-streams-4h03</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  üëã Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome to MongoDB $weeklyUpdate!&lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  üéì Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migrating-your-ios-apps-realm-schema-in-production"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/realm-schema-migration/"&gt;Migrating Your iOS App's Realm Schema in Production&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/andrewmorgan"&gt;Andrew Morgan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tutorial will step you through updating an existing mobile app to add some new features that require changes to the schema.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#triggers-treats-and-tricks-cascade-document-delete-using-triggers-preimage"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/triggers-tricks-preimage-cass/"&gt;Triggers Treats and Tricks: Cascade Document Delete Using Triggers Preimage&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/pavel-duchovny/"&gt;Pavel Duchovny&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will show you how to use a preimage feature to perform cascading relationship deletes via a trigger - based on the deleted parent document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#currency-analysis-with-time-series-collections-2-simple-moving-average-and-exponential-moving-average-calculation"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/time-series-candlestick-sma-ema/"&gt;Currency Analysis with Time Series Collections #2 ‚Äî Simple Moving Average and Exponential Moving Average Calculation&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/fuat-sungur/"&gt;Fuat Sungur&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll learn how the moving average can be calculated on time-series data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#currency-analysis-with-time-series-collections-1-generating-candlestick-charts-data"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/time-series-candlestick/"&gt;Currency Analysis with Time Series Collections #1 ‚Äî Generating Candlestick Charts Data&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/fuat-sungur/"&gt;Fuat Sungur&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time series collections part 1: generating data for a candlestick chart from time-series data.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#official-mongodb-events"&gt;
  &lt;/a&gt;
  üìÖ Official MongoDB &lt;a href="https://live.mongodb.com/events/#/calendar"&gt;Events&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Attend an official MongoDB event near you (virtual for now)! Chat with MongoDB experts, learn something new, meet other developers, and win some swag!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sep 15 (4:00 PM GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-mongodb-global-virtual-community-presents-learning-with-luce-structure-your-data-with-schema-validation-in-mongodb/"&gt;Learning with Luce - Structure your data with Schema Validation in MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sep 17 (12:00 PM GMT | Nairobi, Kenya) - &lt;a href="https://live.mongodb.com/events/details/mongodb-nairobi-kenya-presents-mongodb-community-mini-workshop-in-kisumu/"&gt;MongoDB Community Mini Workshop in Kisumu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sep 23 (4:00 PM GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-mongodb-global-virtual-community-presents-6-things-lauren-learned-while-modeling-data-in-mongodb/"&gt;6 Things Lauren Learned While Modeling Data in MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sep 29 (3:00 PM GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-dach-virtual-community-presents-mongodb-atlas-mit-ansible-automatisieren/"&gt;MongoDB Atlas mit Ansible automatisieren&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch-amp-youtube"&gt;
  &lt;/a&gt;
  üì∫ MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community via &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jnxnhbTO2RA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;üçø &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch so you never miss a stream!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  üéô Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/38kyw8xdKmm9n7ewHjYLBg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;Ep. 75 - &lt;a href="https://open.spotify.com/episode/4IZ115BTG83rW3ErdGxgOp?si=FrGk5msnRjm319lyk50_qw&amp;amp;dl_branch=1"&gt;Speaking at Your Next Tech Conference with Sven Peters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 74 - &lt;a href="https://open.spotify.com/episode/2tSRNf6OxZVlElawGyxPVk?si=VpN-ZIpPRdCwXs-qTtGdHg&amp;amp;dl_branch=1"&gt;Thinking Diagnostically with Danny Hatcher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 73 - &lt;a href="https://open.spotify.com/episode/6Dx7j4H7QV77wi3o7tKazu?si=6obEtGrcSDuQgtI5GpCBcw&amp;amp;dl_branch=1"&gt;Saving Lives and Improving Fire Rescue with Tablet Command and MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; üòä)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongodb-devrel-around-the-interwebz"&gt;
  &lt;/a&gt;
  üåç MongoDB DevRel around the Interwebz
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Watch our team do their thang at various conferences, meetups, and podcasts around the world (virtually, for now). Also, find external articles and guest posts from our DevRel team here!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#upcoming-conferences"&gt;
  &lt;/a&gt;
  üìÖ Upcoming Conferences
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sep 28 - &lt;a href="https://paris.serverlessdays.io/en/"&gt;ServerlessDays Paris&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6JMGxm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9uZaONUUAMkOOv%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6JMGxm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9uZaONUUAMkOOv%3Fformat%3Djpg%26name%3Dmedium" alt="Speaker announcement card for Adrienne Tacke at ServerlessDays Paris. Happening on September 28, 2021. Talk title: Serverless Socializing: How I Built a Quick Multi-Player Serverless Game"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sep 29 - &lt;a href="https://www.devopsworld.com/home"&gt;DevOps World (Online)&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Adrienne will be joining remotely to give her popular "Multi-Cloud Magic" talk!&lt;/p&gt;




&lt;p&gt;üí° These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; &lt;em&gt;first&lt;/em&gt;! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>news</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Edit any GitHub repository on the web without installing anythingüò±</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Mon, 13 Sep 2021 14:10:38 +0000</pubDate>
      <link>https://dev.to/byteslash/edit-any-github-repository-on-the-web-without-installing-anything-l9c</link>
      <guid>https://dev.to/byteslash/edit-any-github-repository-on-the-web-without-installing-anything-l9c</guid>
      <description>&lt;p&gt;Hey there üôãüèª‚Äç‚ôÇÔ∏èüëãüèª,&lt;/p&gt;

&lt;p&gt;Github released a new feature recently. If you go to any GitHub repository and click on the &lt;code&gt;.&lt;/code&gt; on your keyboard, you will be able to see a web version of Visual Studio Code with the files of that repository. Now you can even edit the repository without installing anything!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1oyM9DuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/JSjjhv0tuiTGW6peHb/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oyM9DuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/JSjjhv0tuiTGW6peHb/giphy.gif" alt="How cool is that"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also install extensions and themes in the web version but make sure that you are signed in to your GitHub account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seeing-it-in-action"&gt;
  &lt;/a&gt;
  Seeing it in action
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/eaa4090560684d97a423f5ef1a1e962a"&gt;https://www.loom.com/share/eaa4090560684d97a423f5ef1a1e962a&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/features/codespaces"&gt;GitHub dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/ywUZOOzLX3c"&gt;Visual Studio Code's video on &lt;code&gt;the dot&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app"&gt;Connect with me&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>vscode</category>
      <category>git</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Are you an optimistic or pessimistic developer?</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 13 Sep 2021 13:58:18 +0000</pubDate>
      <link>https://dev.to/codesphere/are-you-an-optimistic-or-pessimistic-developer-2npn</link>
      <guid>https://dev.to/codesphere/are-you-an-optimistic-or-pessimistic-developer-2npn</guid>
      <description>&lt;p&gt;We all have a different outlook on life‚Ää-‚Ääsome of us take a glass half full approach and some of us are 'who's drank half my drink' kinda people‚Ää-‚Ääbut when it comes to software development, which is the more productive mindset? &lt;em&gt;Is&lt;/em&gt; one better than the other?&lt;/p&gt;

&lt;p&gt;Let's talk about the pros and cons of optimism and pessimism in developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T21wHWXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k85lpqvvbucpyb49b9ea.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T21wHWXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k85lpqvvbucpyb49b9ea.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Experience plays a role in the level of pessimism you might find in a developer. A long history of unexpected problems and catastrophic deployment issues has a tendency to jade a fresh-faced junior. That's not to say it's only inexperience that breeds a positive outlook, but any developer worth their salt will know that &lt;em&gt;'no plan survives contact with the enemy'&lt;/em&gt;, and no ticket is as easy to finish as your first estimation.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#overpromise-under-deliver-or-under-promise-over%C2%A0deliver"&gt;
  &lt;/a&gt;
  Overpromise, under deliver or under promise, over¬†deliver
&lt;/h3&gt;

&lt;p&gt;You can never predict if all cogs in the machine will turn in your favor and the estimation of tasks is usually a good indication of a given developer's disposition. Planning for the inevitable thing to go wrong is standard practice, mostly because assuming you're going to get everything right on the first try can lead to some awkward conversation when it's time to deliver.&lt;/p&gt;

&lt;p&gt;Not to mention the client will very well change the request by the time it's done. So mark this as a pro for the pessimist column‚Ää-‚Ää&lt;strong&gt;Realistic time management&lt;/strong&gt;‚Ää-‚Ääassuming something will go wrong, even if you don't know exactly what yet, is a win-win for a developer.¬†&lt;/p&gt;

&lt;p&gt;That being said, ignorance is bliss, and an enthusiastic start to a project can be the Mario Kart'esk starting line boost a team needs. The expression &lt;em&gt;'Aim for the moon, shoot for the stars'&lt;/em&gt; comes to mind when I think of young developers and there can be benefits to a mildly over ambitious can-do-attitude when you start a new venture.&lt;/p&gt;

&lt;p&gt;Getting really excited about creating the next unicorn and throwing in all the features you can think of at the planning meeting might not always pan out exactly, but you never know what great ideas might come of it. Maybe the term &lt;em&gt;'throw enough mud at the wall, some of it will stick'&lt;/em&gt; fits better here, but this one is still a pro for the optimists in my eyes, a little &lt;strong&gt;Passion&lt;/strong&gt; never hurt anyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ewi8aLjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qqp3ppgm3p6wzsnmeh4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ewi8aLjw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qqp3ppgm3p6wzsnmeh4.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It comes down to the &lt;strong&gt;management of expectations&lt;/strong&gt;. While our fresh new junior dev might underestimate the time and effort needed to add a new feature, our old dog might overestimate the resources needed and spend more time worrying about the potential for mistakes rather than the feature itself.&lt;/p&gt;

&lt;p&gt;A good developer and a great team know how to balance both. A healthy mix of enthusiasm and wisdom is the key to success.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#weeks-of-coding-can-save-you-hours-of%C2%A0planning"&gt;
  &lt;/a&gt;
  Weeks of coding can save you hours of¬†planning
&lt;/h3&gt;

&lt;p&gt;Discipline is required to properly plan a new project, we all want to start writing code as soon as possible but this unfortunately is almost never the smart first move. A trait of optimistic devs will be to immediately dive into writing lines of code without really knowing where they are going or assuming it will all fall into place by the end.&lt;/p&gt;

&lt;p&gt;This can also be infectious but mistaking over-confidence with work ethic can make it seem like everyone is hard at work when, in reality, the train is just heading for the cliff.¬†&lt;/p&gt;

&lt;p&gt;A big con for the optimistic dev is &lt;strong&gt;overlooking the project's needs&lt;/strong&gt; and then costing the team time and energy to correct the areas that could easily have been avoided with a detailed planning session.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Over preparation&lt;/strong&gt; is the flip side of this coin. Spending days and days preparing for every possible outcome of an issue the project might face, only for most of the work not to be needed can be just as costly as fixing mistakes.¬†&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#optimism-pessimismwere-gonna-make-it%C2%A0happen"&gt;
  &lt;/a&gt;
  Optimism, pessimism..we're gonna make it¬†happen!
&lt;/h3&gt;

&lt;p&gt;It's important to see the difference between pessimism and negativity. While it might be easy to label the naysayer to every plan as negative energy, this can be a trap. Slow and steady planning and attention to detail will often benefit the team in the long run, so don't be scared to point out a potential problem even if it's against the momentum. Keeping quiet while everyone was blissfully walking into a disaster just because you didn't want to ruin the mood will only end in tears.&lt;/p&gt;

&lt;p&gt;Just because a senior member says no to 9 out of your 10 new ideas, doesn't mean they are unimaginative, it may mean they made that mistake once before and know how to play it smart now. It's a fine line we all must learn to walk for ourselves. Experience is our only real friend here.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#perfectly-balanced-as-all-things-should%C2%A0be"&gt;
  &lt;/a&gt;
  Perfectly balanced, as all things should¬†be
&lt;/h3&gt;

&lt;p&gt;Any team needs a balance of optimists and pessimists to work effectively, much as any individual needs a balance of both within themselves. We need to be optimistic enough to assume our next venture is going to be the one that takes off, but pessimistic enough to know it probably won't work out exactly as we expect. If you can find this balance, you are well on your way to a winning mindset.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oSP4QcjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yga6b88f9p7t544e5kfx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oSP4QcjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yga6b88f9p7t544e5kfx.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For every action, there is an equal and opposite reaction, and for every argument, for either mindset, there is an argument for the other. Try to be positive in either case, bring good energy and constructive feedback to your projects and you can't go wrong.&lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;br&gt;
Whether you are an optimist or a pessimist, you shouldn't waste time configuring your infrastructure. Instead, try &lt;a href="https://link.codesphere.com/DK"&gt;Codesphere&lt;/a&gt;, the best zero-config cloud provider.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>What is NEXT.JS? </title>
      <author>Kshitij Bansod (Danny)</author>
      <pubDate>Mon, 13 Sep 2021 13:21:13 +0000</pubDate>
      <link>https://dev.to/kshitij9896/what-is-next-js-29ff</link>
      <guid>https://dev.to/kshitij9896/what-is-next-js-29ff</guid>
      <description>&lt;p&gt;üëâ What is NEXT.JS?üë®‚Äçüíª&lt;/p&gt;

&lt;p&gt;‚úÖ NEXT.JS is a React Framework that enables you to build&lt;br&gt;
super fast &amp;amp; extremely user-friendly static websites.üì≤&lt;/p&gt;

&lt;p&gt;‚úÖ NEXT.JS is an open-source development framework built on top of Node.js enabling React based web applications functionalities such as server-side rendering and generating static websitesüì≤&lt;/p&gt;

&lt;p&gt;üëâ Why Should I Use NEXT.JS??üë®‚Äçüíª&lt;/p&gt;

&lt;p&gt;‚úÖ Next. js is an open-source development framework built on top of Node. js enabling React based web applications functionalities such as server-side rendering and generating static websites.üì≤&lt;/p&gt;

&lt;p&gt;üëâ Is NEXT.JS Have Any New Features Other Than ReactJS?üë®‚Äçüíª&lt;/p&gt;

&lt;p&gt;‚úÖ Yes NextJS Has So Many New Features üåê&lt;/p&gt;

&lt;p&gt;‚úÖ It Has Automatic Static Optimization üåê&lt;/p&gt;

&lt;p&gt;‚úÖ Now your "Static" &amp;amp; "dynamic " content are one now üåê&lt;/p&gt;

&lt;p&gt;‚úÖ The Features Allows Nextjs to build hybrid applications that contains both server-rendered &amp;amp; statically &amp;amp; statically generated pages üåê&lt;/p&gt;

&lt;p&gt;‚úÖ It uses Server Side Rendering (SSR) &amp;amp; at the same time it can be also a great Static Site Generator (SSG) üåê&lt;/p&gt;

&lt;p&gt;üëâ Why Should I Go With NEXT.JS??üë®‚Äçüíª&lt;/p&gt;

&lt;p&gt;‚úÖ The Big reason to choose NEXT.JS is its SEO efficiency üåê&lt;/p&gt;

&lt;p&gt;üëâ Is next JS full stack?üë®‚Äçüíª&lt;/p&gt;

&lt;p&gt;‚úÖNEXT.JS is a complete full-stack framework built on top of React. js.üåê&lt;/p&gt;

&lt;p&gt;For More #techblogs&lt;br&gt;
‚úÖ Follow &lt;a class="mentioned-user" href="https://dev.to/kshitij"&gt;@kshitij&lt;/a&gt;
 Bansod üë®‚Äçüíª&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nextjs-reactjsdevelopment-kshitijblogs-kshitijspeaks"&gt;
  &lt;/a&gt;
  nextjs #reactjsdevelopment #kshitijblogs #kshitijspeaks
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#learningeveryday-developerstudentclubs-developercommunity-javascript-content-amazing-developers-developerslife-javascriptdevelopers-learningeveryday-highlevel"&gt;
  &lt;/a&gt;
  learningeveryday #developerstudentclubs #developercommunity #javascript #content #amazing #developers #developerslife #javascriptdevelopers #learningeveryday #highlevel
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>TypeScript Tips: Getting Component Props Types in React</title>
      <author>Shidhin</author>
      <pubDate>Mon, 13 Sep 2021 13:20:10 +0000</pubDate>
      <link>https://dev.to/shidhincr/typescript-tips-getting-component-props-types-in-react-3kp</link>
      <guid>https://dev.to/shidhincr/typescript-tips-getting-component-props-types-in-react-3kp</guid>
      <description>&lt;p&gt;These days, React and Typescript are the perfect combo for building front-end applications. If you're from the front-end world, you may already know that. This post is about a Typescript tip that will be useful in React applications.&lt;/p&gt;

&lt;p&gt;If you use React, you would've already created a higher order component (HoC). Sometimes, you need to create an HoC that returns another UI component, with some of the props pre-populated. Example, an IconButton component that returns a UI Button with an Icon.&lt;/p&gt;

&lt;p&gt;Let's talk about the props types. When you define your HoC component, its props should have the exact &lt;strong&gt;type&lt;/strong&gt; of the returning component. Otherwise, Typescript cannot do its intellisense magic on it. &lt;/p&gt;

&lt;p&gt;Now, to fix this, one could export the UI component props types and use it from the HoC component. And, that works well -- except, if you deal with a 3rd party UI component which doesn't export its props types.&lt;/p&gt;

&lt;p&gt;Well .. That's exactly we are going to solve today. Let's start with some example codes:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ui-button-component"&gt;
  &lt;/a&gt;
  UI Button Component
&lt;/h2&gt;

&lt;p&gt;Mostly every project contains one UI Button component. Usually, we build it from scratch or get from any 3rd party libraries. Here, for the sake of this example, let's build one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cx&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;classnames&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./buttonStyles.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cta&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cta&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Button styles&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.cta&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;indigo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a nutshell, our Button component accepts 3 props: &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;onClick&lt;/code&gt; are required and &lt;code&gt;cta&lt;/code&gt; is optional. The button style changes based on the &lt;code&gt;cta&lt;/code&gt; prop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-icon-button-component"&gt;
  &lt;/a&gt;
  An Icon Button Component
&lt;/h2&gt;

&lt;p&gt;At some point, your project requires a new Component. Let's say, a Button component with an Icon -- we can call it as an IconButton component. An IconButton component is same as the Button, yet it can accept one more extra prop called &lt;code&gt;icon&lt;/code&gt;. Based on this &lt;code&gt;icon&lt;/code&gt;, an appropriate icon will be displayed next to the Button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IconButton&lt;/span&gt;
  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"arrow-down"&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"click me"&lt;/span&gt;
  &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how the implementation looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@fortawesome/react-fontawesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IconButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IconButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IconButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our IconButton looks good now. However, the TypeScript compiler started complaining. Because, we only defined the &lt;code&gt;icon&lt;/code&gt; props in the &lt;code&gt;IconButtonProps&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtuLT-Dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzwmvw9fiqezlguvrxdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtuLT-Dg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzwmvw9fiqezlguvrxdi.png" alt="Typescript Button Error"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Cu_J4ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bota7tql7ekm8oooo7bf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Cu_J4ym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bota7tql7ekm8oooo7bf.png" alt="Typescript Button Error"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;I think you all familiar with the DRY (Don't Repeat Yourself) principle. Keeping that in mind, we can re-use the &lt;code&gt;ButtonProps&lt;/code&gt; from the UI button. To do that, first  we need to export the ButtonProps type from the UI Button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cta&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in the IconButton.tsx:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@fortawesome/react-fontawesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IconButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IconButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IconButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should fix the Typescript error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem-2-button-component-from-3rd-party-library"&gt;
  &lt;/a&gt;
  Problem 2: Button component from 3rd party library
&lt;/h2&gt;

&lt;p&gt;The previous solution works for us because we have the full control of the UI Button component. It's our codebase, so we can export the Props types from the Button component. However, what if you are using a 3rd party UI library and its Button component doesn't export the Button Props?&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some-ui-library&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// error ButtonProps doesn't exist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;Luckily, React comes with some utility types for these situations. The generic type &lt;code&gt;ComponentProps&lt;/code&gt; can be used for accessing any React component's props (works for both function component and class component).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extractedPropsTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how to use it solve the issue. We can re-write the &lt;strong&gt;IconButton&lt;/strong&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@fortawesome/react-fontawesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IconButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IconButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IconButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;buttonProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FontAwesomeIcon&lt;/span&gt; &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! No more TS errors :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-real-world-example"&gt;
  &lt;/a&gt;
  A real world example
&lt;/h2&gt;

&lt;p&gt;I had an issue like this when working with the &lt;code&gt;react-select&lt;/code&gt; library. React select is an amazing library and comes with lot of customizations. In my project, I wanted to create a custom Select component with pre-defined styles (matching with our project theme). So, I created something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BaseSelect&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// custom styles for the BaseSelect component&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SelectProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// ??&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SelectProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BaseSelect&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;customStyles&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;react-select&lt;/code&gt; was not exporting the props types for the BaseSelect, I wanted to access it from the BaseSelect component itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BaseSelect&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;customStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// custom styles for the BaseSelect component&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SelectProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;BaseSelect&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SelectProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BaseSelect&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;customStyles&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;As I told in the beginning of this article, React and Typescript are a popular choice for modern front-end applications.  I guess this small Typescript tip would be helpful to you when working on a React Typescript project -- especially, dealing with component props. If you are curious, there are more utility types like this you can  read here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/react.html"&gt;https://www.typescriptlang.org/docs/handbook/react.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-typescript-cheatsheet.netlify.app/"&gt;https://react-typescript-cheatsheet.netlify.app/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! Comments and feedbacks are welcome.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>propstypes</category>
    </item>
    <item>
      <title>Important thing to remember about recovering panic'ed code in Go</title>
      <author>Scott</author>
      <pubDate>Mon, 13 Sep 2021 13:12:29 +0000</pubDate>
      <link>https://dev.to/rusty_sys_dev/important-thing-to-remember-about-recovering-panic-ed-code-in-go-2pe0</link>
      <guid>https://dev.to/rusty_sys_dev/important-thing-to-remember-about-recovering-panic-ed-code-in-go-2pe0</guid>
      <description>&lt;p&gt;When recovering from panic in golang, I have often found myself troubled by potentially not knowing where the error originated...&lt;/p&gt;

&lt;p&gt;This was because the stack doesn't get passed along with the message when you recover... or so I thought.&lt;/p&gt;

&lt;p&gt;Go's runtime actually handles recovery from panic in an interesting way.  Stack trace wise, it allows deferred functions the ability to call &lt;code&gt;debug.Stack()&lt;/code&gt; as if from the location of the panic.&lt;/p&gt;

&lt;p&gt;for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"runtime/debug"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;recover&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;f3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;f3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some error"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the stack trace output from the above code produces the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021/09/13 22:00:07 some error: goroutine 1 [running]:
runtime/debug.Stack(0xc00009bdb8, 0x4acd60, 0x4e5168)
        /home/rustysysdev/go/src/runtime/debug/stack.go:24 +0x9f
main.main.func1()
        /home/rustysysdev/Documents/panic-test/cmd/panic/main.go:11 +0x5b
panic(0x4acd60, 0x4e5168)
        /home/rustysysdev/go/src/runtime/panic.go:965 +0x1b9
main.f3(...)
        /home/rustysysdev/Documents/panic-test/cmd/panic/main.go:27
main.f2(...)
        /home/rustysysdev/Documents/panic-test/cmd/panic/main.go:23
main.f1(...)
        /home/rustysysdev/Documents/panic-test/cmd/panic/main.go:19
main.main()
        /home/rustysysdev/Documents/panic-test/cmd/panic/main.go:15 +0x5e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is very useful for troubleshooting and I feel stupid only figuring this out now. XD&lt;/p&gt;

&lt;p&gt;source: &lt;a href="https://groups.google.com/g/golang-nuts/c/MB8GyW5j2UY"&gt;https://groups.google.com/g/golang-nuts/c/MB8GyW5j2UY&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>I built the entire universe in JavaScript</title>
      <author>Mehdi Zed</author>
      <pubDate>Mon, 13 Sep 2021 12:31:20 +0000</pubDate>
      <link>https://dev.to/jesuisundev/i-built-the-entire-universe-in-javascript-4i10</link>
      <guid>https://dev.to/jesuisundev/i-built-the-entire-universe-in-javascript-4i10</guid>
      <description>&lt;p&gt;It‚Äôs not a clickbait title. I really did it. And it‚Äôs not just a web experience. No. It‚Äôs a real game, freely explorable, in 3D, right in your browser ! Don‚Äôt you believe me ?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Ho, i know your time is precious. Here‚Äôs the condensed version.&lt;/p&gt;

&lt;p&gt;I built a free 3D browser game, freely explorable, across infinite universes procedurally generated in JavaScript. The goal? &lt;strong&gt;Go from universe to universe and discover the origin of everything.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs a four chapter story with an epic reveal at the end.&lt;/p&gt;

&lt;p&gt;Before going further in reading this article, stop everything, put yourself in full screen, take some popcorn and play &lt;a href="https://across-multiverse.com/"&gt;ACROSS THE MULTIVERSE&lt;/a&gt; !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hf1BxSLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://across-multiverse.com/preview.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hf1BxSLK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://across-multiverse.com/preview.jpg" alt="https://across-multiverse.com/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No time to play?&lt;/p&gt;

&lt;p&gt;You prefer to enjoy it on a PC and not on a mobile phone ?&lt;/p&gt;

&lt;p&gt;Or do you just want to see more before playing it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I got you.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I made a launch trailer on YouTube! It‚Äôs only 3 minutes long. It shows a lot of things.&lt;/p&gt;

&lt;p&gt;But beware, it‚Äôs extremely spectacular!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1ogk43jp8Qg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I put a lot of my time, my soul and my skills in the creation of this free game for the internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you have five seconds to share it, that would be wonderful.&lt;/strong&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8sxAVvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1203463243429302273/iBWJdFfK_normal.jpg" alt="Mehdi Zed profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Mehdi Zed
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/jesuisundev"&gt;@jesuisundev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      LAUNCH TRAILER&lt;br&gt;&lt;br&gt;Across The Multiverse&lt;br&gt;A free in-browser game across infinite universes procedurally generated.&lt;br&gt;Go from universe to universe and discover the origin of everything.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/wUpOAcUMfk"&gt;buff.ly/3z2qd5I&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/threejs"&gt;#threejs&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webgl"&gt;#webgl&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/gamedev"&gt;#gamedev&lt;/a&gt;&lt;br&gt;üîäüîäüîä &lt;a href="https://t.co/WAc4zlGzp3"&gt;buff.ly/3nsPUKg&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:35 AM - 13 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1437333985223450635" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1437333985223450635" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1437333985223450635" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Meanwhile, it‚Äôs time to talk about the flashing elephant in the middle of the room.&lt;/p&gt;

&lt;p&gt;How the fuck i did that?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talk-is-cheap-show-me-the-code"&gt;
  &lt;/a&gt;
  Talk is cheap. Show me the code
&lt;/h2&gt;

&lt;p&gt;I know that many of you prefer to dive right into the code. Even before reading my beautiful explanations. And I totally understand this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the most impatient, here is the full source code of the game.&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jesuisundev"&gt;
        jesuisundev
      &lt;/a&gt; / &lt;a href="https://github.com/jesuisundev/acrossthemultiverse"&gt;
        acrossthemultiverse
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An in-browser, freely explorable, 3D game across infinite universes procedurally generated. Go from universe to universe and discover the origin of everything. A four chapter story with an epic revelation at the end.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/5be4aa117bca252944635c6fe4cc4b79f194961bdf7b0962be45c96b8e0b1b3f/68747470733a2f2f6163726f73732d6d756c746976657273652e636f6d2f707265766965772e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/5be4aa117bca252944635c6fe4cc4b79f194961bdf7b0962be45c96b8e0b1b3f/68747470733a2f2f6163726f73732d6d756c746976657273652e636f6d2f707265766965772e6a7067" alt="Across The Multiverse"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Across The Multiverse&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://standardjs.com/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5903f590e5e92b5fb972d9ead1dbf26e33367b8f88dc390f0e0d9ae3a06cb471/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d7374616e646172642d627269676874677265656e2e7376673f7374796c653d666c6174" alt="js-standard-style"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An in-browser, freely explorable, 3D game across infinite universes procedurally generated
Go from universe to universe and discover the origin of everything
A four chapter story with an epic revelation at the end.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://across-multiverse.com/" rel="nofollow"&gt;https://across-multiverse.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A blog post explaining how everything works is available &lt;a href="https://www.jesuisundev.com/en/i-built-the-entire-universe-in-javascript/" rel="nofollow"&gt;here&lt;/a&gt; !&lt;/p&gt;
&lt;h1&gt;
License&lt;/h1&gt;
&lt;h2&gt;
Source Code&lt;/h2&gt;
&lt;p&gt;Under &lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;MIT license&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Music&lt;/h2&gt;
&lt;p&gt;All musics are owned by artists (see list below) and are used here under
&lt;a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" rel="nofollow"&gt;Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)&lt;/a&gt; license&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can't use the musics for commercial use and/or without mentioning the following artists&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transcendent - Joel Nielsen&lt;/li&gt;
&lt;li&gt;I Walk With Ghosts - Scott Buckley&lt;/li&gt;
&lt;li&gt;Discovery - Scott Buckley&lt;/li&gt;
&lt;li&gt;Celestial - Scott Buckley&lt;/li&gt;
&lt;li&gt;Omega - Scott Buckley&lt;/li&gt;
&lt;li&gt;Into the Night - Melodysheep&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Footage&lt;/h2&gt;
&lt;p&gt;Under &lt;a href="https://creativecommons.org/licenses/by/4.0/" rel="nofollow"&gt;Attribution 4.0 International (CC BY 4.0)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can use footage of the game for any use but you must mention this project with the following link : &lt;a href="https://across-multiverse.com/" rel="nofollow"&gt;https://across-multiverse.com/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
Install&lt;/h1&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jesuisundev/acrossthemultiverse"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It is of course open source under MIT license (for the code).&lt;/p&gt;

&lt;p&gt;I still recommend following the story of the project‚Äôs gradual creation via this article. It will give more context. And most importantly make a lot more sense.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-the-universe"&gt;
  &lt;/a&gt;
  How to build the universe?
&lt;/h2&gt;

&lt;p&gt;Before I even start, you should know that I use the Three.js JavaScript library. This library allows you to use the WebGL api via JavaScript to do 3D rendering in the browser.&lt;/p&gt;

&lt;p&gt;It It is possible that you don‚Äôt understand the sentence before and/or that you don‚Äôt know Three.js.&lt;br&gt;
Fortunately I thought of everyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jesuisundev.com/en/understand-threejs/"&gt;I made an article dedicated to Three.js and 3D rendering in JavaScript.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article will allow you to immediately understand the basis of the project in only 5 minutes.&lt;/p&gt;

&lt;p&gt;Anyway, back to the point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to build the universe?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Clearly the problem is too big.&lt;/p&gt;

&lt;p&gt;I couldn‚Äôt tackle this problem head on. And that‚Äôs not how you do it when you‚Äôre a developer. There is only one reflex to have when faced with a huge and complex problem.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reducing-complexity"&gt;
  &lt;/a&gt;
  Reducing complexity
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Building the universe?&lt;/strong&gt; Too complicated. I don‚Äôt even know where to start. Okay, then let‚Äôs narrow it down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building the Milky Way?&lt;/strong&gt; Still too complicated, let‚Äôs reduce it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building our solar system?&lt;/strong&gt; No. It‚Äôs too complicated. Let‚Äôs reduce it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building an empty space filled with stars?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ha! That sounds doable! A simple starfield in the darkness of space.&lt;/p&gt;

&lt;p&gt;Thinking about it a little bit, I think this problem is really simple. That means I‚Äôve reduced the complexity enough.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It‚Äôs time to get started.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-build-a-simple-starfield"&gt;
  &lt;/a&gt;
  How to build a simple starfield?
&lt;/h2&gt;

&lt;p&gt;From then on, I always used a reference image. A photo or a real representation of what I wanted to recreate. An image to look at to get as close as possible to a realistic rendering.&lt;/p&gt;

&lt;p&gt;For the starfield, I had decided to take a picture from the Hubble satellite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEJ7R-1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8DOvWXWYAIcFAd%3Fformat%3Djpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEJ7R-1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E8DOvWXWYAIcFAd%3Fformat%3Djpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I figure I just need to display random white dots in a black space.&lt;/p&gt;

&lt;p&gt;It is very easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let‚Äôs start by creating an empty, black space and put a camera in it.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WebGLRenderer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;powerPreference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;high-performance&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;antialias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;stencil&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;starfield&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PerspectiveCamera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lookAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNe6H24r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/aagQ5sL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNe6H24r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/aagQ5sL.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OKAY. Great stuff. All this to display a black screen?!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yes. Let‚Äôs be patient. We have to start somewhere.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, harder.&lt;/p&gt;

&lt;p&gt;Let‚Äôs display white dots randomly in this black space. Can you do it? I didn‚Äôt know how. So I look at to &lt;a href="https://threejs.org/docs/"&gt;the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And i fount it !&lt;/p&gt;

&lt;p&gt;There is a class dedicated to this : &lt;a href="https://threejs.org/docs/#api/en/objects/Points"&gt;Points&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perfect, let‚Äôs follow the doc and write this down.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStarsGeometry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BufferGeometry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;geometry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;position&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Float32BufferAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getStarsRandomVertices&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;geometry&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStarsRandomVertices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;verticesNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;verticesNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;vertices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;vertices&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStarsMaterial&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;starSprite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TextureLoader&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../images/star.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;starMaterial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PointsMaterial&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;sizeAttenuation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;starSprite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;alphaTest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;starMaterial&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Points&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getStarsGeometry&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;getStarsMaterial&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stars&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getStars&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoJpEGHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qJ01nuW.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoJpEGHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qJ01nuW.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this piece of code, what will really do the magic is the &lt;strong&gt;getStarsRandomVertices&lt;/strong&gt; function.&lt;/p&gt;

&lt;p&gt;Our starfield (here represented by &lt;strong&gt;new THREE.Points&lt;/strong&gt;) needs two things.&lt;/p&gt;

&lt;p&gt;1 : The coordinates of each point to be displayed&lt;br&gt;
2 : The material of each of the points. That is to say what we will display (to simplify) for each of the points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The coordinates are managed by getStarsRandomVertices.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our camera is placed at coordinates 0,0,0. We want stars all around us. So our points should be placed between the coordinates -1000 and 1000. All around us.&lt;/p&gt;

&lt;p&gt;To do this, we will do a simple calculation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2000 * Math.random() ‚Äì 1000&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This very simple piece of math gives us a random value (math.random is not really random but let‚Äôs admit it) between -1000 and 1000. We put this calculation in each axis (x, y, z) and that‚Äôs it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The material is managed by getStarsMaterial&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not much to say here. We‚Äôll just use an image of a white circle as a texture and apply it. For the moment we don‚Äôt need much.&lt;/p&gt;

&lt;p&gt;We put the two together in the &lt;strong&gt;getStars&lt;/strong&gt; function and we have solved our problem.&lt;/p&gt;

&lt;p&gt;Well, for the moment it just gives an image with static white dots in 2D.&lt;/p&gt;

&lt;p&gt;It‚Äôs kind of lame. We can do better.&lt;/p&gt;

&lt;p&gt;It‚Äôs time to iterate on this result.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#improvement-via-iteration"&gt;
  &lt;/a&gt;
  Improvement via iteration
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs just start by bringing things to life.&lt;/p&gt;

&lt;p&gt;The idea right now is to just move the camera in relation to the movement of the mouse. When I did that, I just wanted to make sure I was aware that I was doing 3D now.&lt;/p&gt;

&lt;p&gt;Let‚Äôs write this down.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointermove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onPointerMove&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onPointerMove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPrimary&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nx"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;windowHalfX&lt;/span&gt;
    &lt;span class="nx"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;windowHalfY&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mouseX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;
    &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mouseY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;
    &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;OK it‚Äôs cool, it moves, it‚Äôs 3D, we are happy.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs make it even more interactive. What I‚Äôd like to do is walk around in there. Freely. Like in an FPS game, with the mouse and the keyboard.&lt;/p&gt;

&lt;p&gt;At that point, I had two choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Either I rewrote a whole FPS navigation system myself.&lt;/li&gt;
&lt;li&gt;Either I took a FPS control class already made by Three.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I obviously chose to use the code already done.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is tested and used by many people. I advise you to do the same thing when this situation happens to you. Unless you are in a learning process, there is no point in reinventing the wheel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;However, the features offered by the module were not enough for me.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wanted more.&lt;/p&gt;

&lt;p&gt;I wanted a velocity system. Give the players that feeling of acceleration and deceleration. So I had to use the existing module and extend those possibilities in my own class.&lt;/p&gt;

&lt;p&gt;OK, let‚Äôs write this down.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PointerLockControls&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PointerLockControls.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Controls&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerLockControls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PointerLockControls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveForward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveBackward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;onKeyDown&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerLockControls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLocked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowUp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyW&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyZ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveForward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowLeft&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyQ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowDown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveBackward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowRight&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;onKeyUp&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerLockControls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLocked&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowUp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyW&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyZ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveForward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowLeft&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyQ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowDown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveBackward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowRight&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;KeyD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="nx"&gt;handleMovements&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timePerf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevTimePerf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timePerf&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;prevTimePerf&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveForward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveBackward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveForward&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveBackward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;delta&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveLeft&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;delta&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerLockControls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerLockControls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveForward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;And just like that, we built a starfield that can be explored like in a FPS. &lt;/p&gt;

&lt;p&gt;Here you go, I‚Äôll put a codesandbox, you can play live in it.&lt;/p&gt;

&lt;p&gt;You just have to click in the stars to switch to FPS mode.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/prototype-base-atu2-ve36z"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Not bad, right?&lt;/p&gt;

&lt;p&gt;It‚Äôs not bad.&lt;/p&gt;

&lt;p&gt;But it‚Äôs time to get down to business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-simulate-infinity"&gt;
  &lt;/a&gt;
  How to simulate infinity?
&lt;/h2&gt;

&lt;p&gt;So far we have just placed dots around the player. But all he has to do is move a little bit and he sees the trickery. It‚Äôs a bit lame again.&lt;/p&gt;

&lt;p&gt;So how do we get this scaled?&lt;/p&gt;

&lt;p&gt;How do you do it in a way that makes sense?&lt;/p&gt;

&lt;p&gt;And above all, how do you do it without blowing up the memory and/or without going below 60FPS.&lt;/p&gt;

&lt;p&gt;Now the real project begins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-grid"&gt;
  &lt;/a&gt;
  The grid
&lt;/h2&gt;

&lt;p&gt;** At that point, I stopped touching my keyboard.**&lt;/p&gt;

&lt;p&gt;To code a solution for this kind of problem, you can‚Äôt ‚Äúfeel your way to it‚Äù. No. You have to solve the problem conceptually -on paper- before doing anything.&lt;/p&gt;

&lt;p&gt;Otherwise you are wasting your time.&lt;/p&gt;

&lt;p&gt;And I hate wasting my time.&lt;/p&gt;

&lt;p&gt;It‚Äôs time to make drawings.&lt;/p&gt;

&lt;p&gt;One of the first ideas that came to mind was the concept of a grid to represent space.&lt;/p&gt;

&lt;p&gt;Concretely, the space would be an infinite grid. The player would go from square to square to see what it contains. And in each square you put what you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stars, nebulae, galaxies, suns, black holes, whatever you want!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To better understand what I‚Äôm talking about, I‚Äôll draw you a little picture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solve-the-problem"&gt;
  &lt;/a&gt;
  Solve the problem
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs start by representing our existing code. Right now, we have our player in the original 0,0,0 square, surrounded by stars. If he moves away a little he is in complete darkness.&lt;/p&gt;

&lt;p&gt;Conceptually, it looks like this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;little dude&lt;/strong&gt; represents our &lt;strong&gt;player&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;blue stars&lt;/strong&gt; represent &lt;strong&gt;the points already randomly placed&lt;/strong&gt; around him.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;numbers in red&lt;/strong&gt; are &lt;strong&gt;the coordinates of each square&lt;/strong&gt; in space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0dx1PAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/i6gKGDG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0dx1PAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/i6gKGDG.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far, nothing complex.&lt;/p&gt;

&lt;p&gt;And that‚Äôs the goal! I want to keep it simple at all costs. &lt;strong&gt;It‚Äôs complex to keep it simple.&lt;/strong&gt; Let‚Äôs try to keep it simple in the algorithm for updating the grid.&lt;/p&gt;

&lt;p&gt;We need two main functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The initialization function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This function will create the material in the original square and in all the squares around the player.&lt;/p&gt;

&lt;p&gt;The advantage of the initialization phase is that you can afford expensive actions. As long as the player is not in a gameplay phase, you are quite free.&lt;/p&gt;

&lt;p&gt;Conceptually, it looks like this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;green stars&lt;/strong&gt; represent &lt;strong&gt;the points dynamically created&lt;/strong&gt; by the initialization function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iwz_SU-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uN1p8gM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iwz_SU-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uN1p8gM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The update function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This function will update the grid only when the player crosses the border between two squares.&lt;/p&gt;

&lt;p&gt;With this function we want two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete the content of the squares which are too far from the player&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create the content of the squares where the player is most likely to go&lt;br&gt;
Conceptually, it would look like this.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;blue stars&lt;/strong&gt; represent &lt;strong&gt;the points already placed&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;green stars&lt;/strong&gt; represent &lt;strong&gt;the points we create dynamically&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;red stars&lt;/strong&gt; represent &lt;strong&gt;the points that are deleted&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f92fB4uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bNye5QS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f92fB4uy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bNye5QS.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And just like that, we managed the infinity simulation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The player can go anywhere he wants. In the direction and the way he wants. He will not see the trickery. Wherever he goes, there will be wonderful things to look at.&lt;/p&gt;

&lt;p&gt;I like this solution because it has several advantages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It is relatively efficient&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fact that the contents of the squares are created on the fly and, above all, that they are deleted at the same time, relieves the memory a lot. In addition, only the minimum number of squares necessary is created each time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;We don‚Äôt have to manage the player‚Äôs direction&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No matter which direction the player is going, the algorithm will be the same. Indeed, we don‚Äôt need to know what are the squares in front of the player. &lt;strong&gt;We just want to know which squares around the player are empty !&lt;/strong&gt; So he can go in the direction he wants, our algorithm will do exactly the same thing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It‚Äôs easy to manage&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No need for a data structure straight from hell like a graph or a tree like an octree. No, no. Fuck that, leave me alone. One array, two hashmaps and that‚Äôs enough. No headaches. Keep it simple.&lt;/p&gt;

&lt;p&gt;Well, let‚Äôs write this down.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-the-solution"&gt;
  &lt;/a&gt;
  Coding the solution
&lt;/h2&gt;

&lt;p&gt;We are going to create this famous class which will manage the grid. For the sake of length and simplification, I don‚Äôt explain everything. And above all, I don‚Äôt show everything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jesuisundev/acrossthemultiverse/"&gt;You have the full source code if you want to see everything.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôre just looking at the important parts today.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MultiverseFactory&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../procedural/MultiverseFactory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;library&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;library&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;library&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeClusters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueClusters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;multiverseFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MultiverseFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;library&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getCurrentClusterPosition&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentCameraPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCurrentCameraPosition&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xCoordinate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCameraPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clusterSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yCoordinate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCameraPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clusterSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;zCoordinate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCameraPosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clusterSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentClusterPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;xCoordinate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;yCoordinate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;zCoordinate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentClusterPosition&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getCurrentCameraPosition&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateMatrixWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getClustersStatus&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCluster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clustersNeighbour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNeighbourClusters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCluster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clustersToPopulate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_getEmptyClustersToPopulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clustersNeighbour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clustersToDispose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_getPopulatedClustersToDispose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clustersNeighbour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentCluster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;clustersNeighbour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;clustersToPopulate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;clustersToDispose&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getNeighbourClusters&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCluster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentCluster&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentClusterArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentCluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentClusterArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentClusterArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentClusterArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;// forward&lt;/span&gt;
    &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// backward&lt;/span&gt;
    &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// right&lt;/span&gt;
    &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// left&lt;/span&gt;
    &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// forward right&lt;/span&gt;
    &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// forward left&lt;/span&gt;
    &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// backward right&lt;/span&gt;
    &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// backward left&lt;/span&gt;
    &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;disposeClusters&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clustersToDispose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clusterToDispose&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;clustersToDispose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clusterToDispose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;matter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;

      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clusterToDispose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addMattersToClustersQueue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;starfield&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clusterToPopulate&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matters&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clusterToPopulate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;subtype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;matters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;clusterToPopulate&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;populateNewUniverse&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clusterStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getClustersStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0,0,0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buildMatters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clusterStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clustersToPopulate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="nx"&gt;renderMatters&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;multiverseFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createMatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cluster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;_getEmptyClustersToPopulate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emptyClustersToPopulate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;neighbourCluster&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;neighbourCluster&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;emptyClustersToPopulate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;neighbourCluster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;emptyClustersToPopulate&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;_getPopulatedClustersToDispose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentCluster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;populatedClustersToDispose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeClusterKey&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCluster&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;activeClusterKey&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;neighbourClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;activeClusterKey&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;populatedClustersToDispose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;activeClusterKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;populatedClustersToDispose&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;And it works!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The contents of the boxes are added on the fly as the player approaches. The illusion is almost perfect. I say almost because unfortunately we have a big problem.&lt;/p&gt;

&lt;p&gt;I know it doesn‚Äôt show much in the video.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The performances when updating the grid are disastrous.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It freezes the image, it‚Äôs just disgusting and unplayable as is.&lt;/p&gt;

&lt;p&gt;It is therefore time to diagnose and optimize.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diagnose-amp-optimize"&gt;
  &lt;/a&gt;
  Diagnose &amp;amp; Optimize
&lt;/h2&gt;

&lt;p&gt;When a performance problem occurs in an application, the first reflex is to diagnose before doing anything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#diagnose"&gt;
  &lt;/a&gt;
  Diagnose
&lt;/h3&gt;

&lt;p&gt;In the case of a web application like ours, we will do this with the chrome dev tools. &lt;strong&gt;F12&lt;/strong&gt;, tab ‚Äú&lt;strong&gt;Performance&lt;/strong&gt;‚Äù then &lt;strong&gt;CTRL+E&lt;/strong&gt; to record what happens. Then we use the application normally before stopping the recording and analyzing the results.&lt;/p&gt;

&lt;p&gt;By doing this, I quickly understood what was going on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRCpE1Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JaYA1S0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRCpE1Pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JaYA1S0.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have big FPS drops because we try to do too many things at the same time.&lt;/p&gt;

&lt;p&gt;We do too many things for JavaScript. JavaScript being single-threaded, it is not forgiving. Too much is required, in too little time, for a single thread.&lt;/p&gt;

&lt;p&gt;Remember the simple calculation I told you about at the beginning?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2000 * Math.random() ‚Äì 1000&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We do this 300,000 times for each stars. In one frame.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multiply by 3&lt;/strong&gt; for each axis (x, y x) of the coordinates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Again multiplied by 3&lt;/strong&gt; for the three new squares that are created each time the player moves from square to square.&lt;/p&gt;

&lt;p&gt;And right now, we‚Äôre just doing simple math for starfield. When we‚Äôll create nebulae or galaxies later, the math will be much more intensive.&lt;/p&gt;

&lt;p&gt;It‚Äôs expensive. Very expensive. So expensive that we exceed the limit of 16ms allowed per frame for a fluid image. We go up to 33ms. It blocks the event loop, it freezes the image and it becomes unplayable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we leave it like that, our player will also leave the game in 33ms.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimize"&gt;
  &lt;/a&gt;
  Optimize
&lt;/h2&gt;

&lt;p&gt;To avoid this, I have two solutions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;First, we will free ourselves from the single thread limit of JavaScript.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will do it using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;Web Workers&lt;/a&gt; of the browser. I‚Äôm not going to do a lecture on this, it‚Äôs very well known, and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;the MDN page&lt;/a&gt; is extremely well done to understand them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Concretely, we will send to Web Workers all the heavy calculations of the game.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These calculations will then be done in the background, by the browser. The goal is not to disturb our main thread. It must be in charge of only one thing: displaying things in a fluid way to the players.&lt;/p&gt;

&lt;p&gt;Once the heavy calculations are done, the Web Workers return the results in events. Our main thread just has to display them !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in worker.js&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;messageEvent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heavyMath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_getHeavyMath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heavyMath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_getHeavyMath&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;positions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="c1"&gt;// heavy math to process positions and colors of particles&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Float32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Float32Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// in main.js&lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;messageEvent&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just like that, we divide the load by ten!&lt;/p&gt;

&lt;p&gt;But that‚Äôs not enough. In order to have excellent performances, we will relieve the event loop a little more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Secondly, we are going to spread out the display phases of the squares in time.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it is, the heavy calculations are well done in the web workers. But it is very possible that the display of the three squares are requested at exactly the same time. We want to avoid this to have a perfectly smooth image.&lt;/p&gt;

&lt;p&gt;To do this, we will use a little trick.&lt;/p&gt;

&lt;p&gt;We will allow only one display of star fields at the same time via a boolean. Then we will spread out in time the display phases of each square via a setTimeout. This means that the display of each square will not be instantaneous. It will be spaced out by 50ms. One by one.&lt;/p&gt;

&lt;p&gt;50ms is huge in terms of relief for the event loop.&lt;/p&gt;

&lt;p&gt;And it is imperceptible to the player.&lt;/p&gt;

&lt;p&gt;Exactly what we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;isRenderingClusterInProgress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clusterTorender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderMatters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clusterTorender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueClusters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clusterTorender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="nx"&gt;isRenderingClusterInProgress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clusterRenderTimeOut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Et voil√† !&lt;/p&gt;

&lt;p&gt;Infinite starfields in your browser.&lt;/p&gt;

&lt;p&gt;Isn‚Äôt life beautiful?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-the-rest"&gt;
  &lt;/a&gt;
  And the rest?
&lt;/h2&gt;

&lt;p&gt;If you have played the game and/or seen the trailer, you can see that 90% of the content is missing in this article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nebulae, suns, black holes, red giants, fucking wormholes between universes, four different universes and the incredible finale!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, it is. But this project is huge. Too huge to be written about in one article.&lt;/p&gt;

&lt;p&gt;A lot of articles (at least four) on the subject is coming. We‚Äôll take a look at each of the topics to talk about them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to build Nebulae in JavaScript ?&lt;/li&gt;
&lt;li&gt;How to build Red Giant in JavaScript ?&lt;/li&gt;
&lt;li&gt;How to build Black Hole in JavaScript ?&lt;/li&gt;
&lt;li&gt;How to build Worm Hole in Javascript ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So stay tuned folks !&lt;/p&gt;

&lt;p&gt;I‚Äôm just getting started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#epilogue"&gt;
  &lt;/a&gt;
  Epilogue
&lt;/h2&gt;

&lt;p&gt;It was the biggest personal project I‚Äôve ever done. It was incredible to do. There were ups, downs, distress and wonder. I‚Äôll let you &lt;a href="https://across-multiverse.com/"&gt;enjoy the game&lt;/a&gt;. I‚Äôm not sure I‚Äôll be doing a project this big again anytime soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please share it with others. It would mean a lot to me.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôm going to get some sleep now.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Creating a Serverless application with Firebase</title>
      <author>Mike Talbot</author>
      <pubDate>Mon, 13 Sep 2021 12:26:53 +0000</pubDate>
      <link>https://dev.to/miketalbot/creating-a-serverless-application-with-firebase-5d31</link>
      <guid>https://dev.to/miketalbot/creating-a-serverless-application-with-firebase-5d31</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;If you've been reading along you'll know I'm building a widget to provide some fun interactions in blogging posts to support the &lt;a href="https://4c.rocks"&gt;4C&lt;/a&gt; community.&lt;/p&gt;

&lt;p&gt;In this article I cover building out the data model in Firebase using FireStore.  I'll touch on the security rules, and the use of Cloud Functions to create an API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I'm describing the process of building the &lt;strong&gt;interactive&lt;/strong&gt; widget below, &lt;strong&gt;vote and see how other people are thinking about serverless&lt;/strong&gt;:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vote-below"&gt;
  &lt;/a&gt;
  Vote Below!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/QRQHn1mqSrs-nWQbZeJEP/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lss5t_HA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqfnzqifey4jmbra829w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lss5t_HA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqfnzqifey4jmbra829w.jpg" alt="4C Widget Poster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;Our widget requires the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user can create an account as a content creator&lt;/li&gt;
&lt;li&gt;With an account a user can provide a display name, an avatar, an HTML personal biography and a URL for their profile site&lt;/li&gt;
&lt;li&gt;With an account a user can create an "article" or a "comment"&lt;/li&gt;
&lt;li&gt;An article allows the user to specify the URL of one of their posts and have that tracked and enhanced by the widget.  Articles will be recommended on other instances of the widget&lt;/li&gt;
&lt;li&gt;A comment allows the user to create a unique configuration of the widget that they can embed in comments or other parts of a post&lt;/li&gt;
&lt;li&gt;Comments and articles allow the content creator to configure the widgets to be shown&lt;/li&gt;
&lt;li&gt;When a widget is shown the system will track the number of views and unique visiting users for that configuration&lt;/li&gt;
&lt;li&gt;Widgets are able to provide the reader with achievements and points for interacting with the content&lt;/li&gt;
&lt;li&gt;Widgets may provide additional responsive and interactive capabilities that are used by plugin developers to create great experiences.  For instance performing polls or providing quizzes.  A robust and secure method of handling these responses will be provided by the widget framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;I decided to build the widget backend framework using only Firebase.  I chose to use Firebase authentication, Firestore as a database, Firebase storage and Firebase Functions to provide an API.&lt;/p&gt;

&lt;p&gt;I host the widget using Firebase Hosting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firebase-authentication"&gt;
  &lt;/a&gt;
  Firebase Authentication
&lt;/h3&gt;

&lt;p&gt;All users of the widget are signed in, but unless you are a content creator then this is an anonymous login and its used to track your points and the answers you provide in responses to the plugins creating the widget experience.&lt;/p&gt;

&lt;p&gt;Content creators sign in using Email, Github or Google to create an account that is allowed to access the admin area of the website.  These users can create configurations of the widget to fit with the content they are creating.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firestore"&gt;
  &lt;/a&gt;
  Firestore
&lt;/h3&gt;

&lt;p&gt;All of the data is stored in Firestore, a description of the choices of structure, security and tables follows below.  Firestore is easy to use but can become rapidly costly as you pay for each read of data.  This has continually exceeded the free 50k limit on most days I've published content using the widget.  I'll go into further detail about how I've addressed this as best I could work out.&lt;/p&gt;

&lt;p&gt;It's important to note that Firestore does not have any in built aggregation queries which is pretty limiting for a widget that desires to perform reporting.  Aggregations mostly have to be created by updating counters as the data is written, reading volumes of data for reporting would become very expensive, very quickly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firebase-functions"&gt;
  &lt;/a&gt;
  Firebase Functions
&lt;/h3&gt;

&lt;p&gt;The Functions feature of Firebase allows you to create an API and also to create "triggers" that perform operations as data is updated.  I've used both of these techniques to create the widget.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firebase-storage"&gt;
  &lt;/a&gt;
  Firebase Storage
&lt;/h3&gt;

&lt;p&gt;I don't need to store much, but I do allow users to upload an avatar and I store this in Firebase Storage (in a file keyed by their user id).  That's all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firebase-hosting"&gt;
  &lt;/a&gt;
  Firebase Hosting
&lt;/h3&gt;

&lt;p&gt;The widget framework is built as a React app, it's deployed to Firebase Hosting which serves it for both the admin and the runtime interfaces.  There's not much to say here except that I've used the rules to ensure that it works well as a SPA, by writing every sub path to read index.html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// firebase.json&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hosting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ignore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;**/.*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;**/node_modules/**&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="p"&gt;],&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rewrites&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;source&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;**&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;destination&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#data-model"&gt;
  &lt;/a&gt;
  Data Model
&lt;/h2&gt;

&lt;p&gt;To support the requirements I came up with this data model:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P74TvkFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty2jwg18novsf6syz4yb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P74TvkFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ty2jwg18novsf6syz4yb.jpg" alt="Data Model Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-writable-collections"&gt;
  &lt;/a&gt;
  User Writable Collections
&lt;/h3&gt;

&lt;p&gt;At the core of this model are the collections that a content creator can write to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Bo-lKyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqyplgmalf63p1j2iem6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Bo-lKyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqyplgmalf63p1j2iem6.jpg" alt="User Writable Collections"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of the other collections require a logged in user (anonymous is fine) and are read only.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ids"&gt;
  &lt;/a&gt;
  IDs
&lt;/h4&gt;

&lt;p&gt;There are only 3 ID types used in the collections.  The articleId is generated by &lt;a href="https://www.npmjs.com/package/nanoid"&gt;nanoid&lt;/a&gt; whenever a new article is added, the &lt;code&gt;user&lt;/code&gt;.&lt;code&gt;uid&lt;/code&gt; comes from Firebase Auth and the &lt;code&gt;tag&lt;/code&gt; is a text string, there are some special ones that start &lt;code&gt;__&lt;/code&gt; but otherwise they come from the user specification.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#users"&gt;
  &lt;/a&gt;
  Users
&lt;/h4&gt;

&lt;p&gt;The user record generated by Firebase is also used to populate a record of my own in the &lt;code&gt;userprofiles&lt;/code&gt; collection.  The data for &lt;code&gt;displayName&lt;/code&gt;, &lt;code&gt;photoURL&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; are copied across every time that they change.&lt;/p&gt;

&lt;p&gt;In addition entries in this collection include a &lt;code&gt;description&lt;/code&gt; for the biography and a &lt;code&gt;profileURL&lt;/code&gt; to optionally contain somewhere to link to, if the user's avatar is clicked when it is shown in the widget.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#articles"&gt;
  &lt;/a&gt;
  Articles
&lt;/h4&gt;

&lt;p&gt;A user can create articles.  Comments are articles with a &lt;code&gt;comment&lt;/code&gt; field set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The user can only create, update and delete articles inside their own &lt;code&gt;userarticles&lt;/code&gt; sub collection of &lt;code&gt;articles&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;When a userarticles/article is saved a Firebase Function Trigger copies the record to the main &lt;code&gt;articles&lt;/code&gt; table.  For security purposes it is possible for a system admin to ban an article in the main &lt;code&gt;articles&lt;/code&gt; collection and the function ensures that this cannot be overwritten by the user.  In addition when a user deletes an article it is not deleted in the main collection, but the &lt;code&gt;enabled&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An article comprises some meta information about the original post (if it isn't a comment) so that this may be used to recommend the article when other users display the widget.&lt;/p&gt;

&lt;p&gt;We'll look in detail at the trigger in a moment as it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sanitizes all HTML content&lt;/li&gt;
&lt;li&gt;creates other entries in the "counts" and "responses" collections and keeps core field in these up to date.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#article-response-information"&gt;
  &lt;/a&gt;
  Article Response information
&lt;/h3&gt;

&lt;p&gt;When I first put together the data model I had the "count" information and the "responses" in a single collection, however, this proved costly as it caused all currently running instances of the widget to redraw whenever anyone viewed an article.&lt;/p&gt;

&lt;p&gt;What I want to happen is, when you are viewing the result of a poll, if another user votes your screen immediately updates.  There is no point doing this update though if another user only saw the poll and didn't interact yet.  By separating out the "counts" and the "responses" I was able to significantly reduce the amount of reads and reduce the cost of the system.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Firebase has the excellent &lt;code&gt;onSnapshot&lt;/code&gt; function to notify you of table writes in real time, this provides for an exciting score update animation as you interact and the pleasure of watching the results of a poll change as others vote.  &lt;code&gt;onSnapshot&lt;/code&gt; works with individual records and collections.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below you can see the various tables that track interactions with an article. The clouds show the Functions API calls that are writing to these tables:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RueMviCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkpuxo2tyxwc0m26wykg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RueMviCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkpuxo2tyxwc0m26wykg.jpg" alt="Response Tables"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#counts"&gt;
  &lt;/a&gt;
  Counts
&lt;/h4&gt;

&lt;p&gt;Counts contains a list of all of the unique visitor ids and uses this to track a unique visitor count in addition to a total number of views.&lt;/p&gt;

&lt;p&gt;Counts does also contain a copy of the &lt;code&gt;responseCount&lt;/code&gt; so that it can be reported to the content creator by reading a single record.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The trick to saving reads in Firebase is to synchronise data so that you can read it all back in one go.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#responses"&gt;
  &lt;/a&gt;
  Responses
&lt;/h4&gt;

&lt;p&gt;The contents of the responses in the responses collection is down to the author of the plugin.  Only interactive plugins like polls and quizzes need to use these features.  The responses collection has a number of API calls that ensure the responses of individual users are kept separate providing a very robust way to interact.&lt;/p&gt;

&lt;p&gt;Plugin authors use this data to render their user interfaces and update it using the &lt;code&gt;respond&lt;/code&gt; and &lt;code&gt;respondUnique&lt;/code&gt; methods.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  tags
&lt;/h4&gt;

&lt;p&gt;The tags table is a collection of counters, they are used to track the popularity of tags associated with articles and comments and to track other things like the total number of views for all 4C content managed by the widget.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Firebase has some pretty heavy limits on concurrency and write speed (1 record update per second), for this reason fast moving counters end up being 'sharded' across a number of entries.  In the case of the widget, we shard total views into 20 separate keys and then add up the values in all 20 to get the total answer.  A shard in this case is just a tag name with a random number between 0 and 19 added to the end of it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#user-scores"&gt;
  &lt;/a&gt;
  User Scores
&lt;/h3&gt;

&lt;p&gt;The only other collection contains a score for the user.  It also contains a list of the achievements they have earned.&lt;/p&gt;

&lt;p&gt;Scores are automatically awarded for viewing and interacting with content.  A plugin author may also add additional items based on their design - for instance quizzes award points for correct answers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ORT8bhqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jenwf5wvkdtp6w98nbn3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ORT8bhqv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jenwf5wvkdtp6w98nbn3.jpg" alt="Scores Table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0enforcing-security"&gt;
  &lt;/a&gt;
  ¬†Enforcing Security
&lt;/h2&gt;

&lt;p&gt;A number of methods are used for enforcing security in the app.  An integration of App Check and Recaptcha v3.0 attempts to stop illegal calls to the API functions and a definition of the rules for Firestore access provides the way to stop a malicious user writing things that they shouldn't.&lt;/p&gt;

&lt;p&gt;Firestore rules are applied in sequence, the final rule bans all reads and writes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;rules_version = '2';&lt;/span&gt;
&lt;span class="s"&gt;service cloud.firestore {&lt;/span&gt;
  &lt;span class="s"&gt;match /databases/{database}/documents {&lt;/span&gt;
    &lt;span class="s"&gt;match /responses/{document=**} {&lt;/span&gt;
      &lt;span class="s"&gt;allow read&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
      &lt;span class="s"&gt;allow write&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
    &lt;span class="s"&gt;match /counts/{document=**} {&lt;/span&gt;
      &lt;span class="s"&gt;allow read&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
      &lt;span class="s"&gt;allow write&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
    &lt;span class="s"&gt;match /tags/{document=**} {&lt;/span&gt;
      &lt;span class="s"&gt;allow read&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
      &lt;span class="s"&gt;allow write&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
    &lt;span class="s"&gt;match /articles/{document=**} {&lt;/span&gt;
        &lt;span class="s"&gt;allow read&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
      &lt;span class="s"&gt;allow write&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
    &lt;span class="s"&gt;match /userarticles/{userId}/{document=**} {&lt;/span&gt;
        &lt;span class="s"&gt;allow read&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
      &lt;span class="s"&gt;allow update, delete&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt; &amp;amp;&amp;amp; request.auth.uid == userId;&lt;/span&gt;
      &lt;span class="s"&gt;allow create&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt;  &amp;amp;&amp;amp; request.auth.uid == userId;&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
    &lt;span class="s"&gt;match /scores/{userId} {&lt;/span&gt;
      &lt;span class="s"&gt;allow read&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
      &lt;span class="s"&gt;allow write&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
    &lt;span class="s"&gt;match /userprofiles/{userId} {&lt;/span&gt;
        &lt;span class="s"&gt;allow read&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
      &lt;span class="s"&gt;allow update, delete&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt; &amp;amp;&amp;amp; request.auth.uid == userId;&lt;/span&gt;
      &lt;span class="s"&gt;allow create&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if request.auth != &lt;/span&gt;&lt;span class="no"&gt;null&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
    &lt;span class="s"&gt;match /{document=**} {&lt;/span&gt;
      &lt;span class="s"&gt;allow read, write&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;if &lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
  &lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cloud Functions do not have these rules applied and hence they can be used to write to the read only tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#triggers"&gt;
  &lt;/a&gt;
  Triggers
&lt;/h2&gt;

&lt;p&gt;The source code (which is available on GitHub) applies a number of trigger functions, but the most interesting one is the creation or update of an article.  The Firestore Function onWrite is a catch all for create, update and delete:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createArticle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userarticles/{userId}/articles/{articleId}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we say we want to run this function every time a user writes an article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;
                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;responses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the after does not exist the record has been deleted, we tell both the responses and the collection this information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;sanitizeAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
            &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;banned&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are sanitizing the HTML and setting the comment flag (null is not good enough for Firestore queries as a false, it must be explicit).  We also don't allow the incoming record to change the &lt;code&gt;banned&lt;/code&gt; property of the master article.&lt;/p&gt;

&lt;p&gt;The last line above writes the data back into the users copy of the record.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is now writing the master article record. &lt;/p&gt;

&lt;p&gt;Next we setup the response and count, or update them if they already exist:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;responses&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseSnap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;responseRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseSnap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;responseRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;processedTags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processedTags&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
                        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;responseRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
                    &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
                    &lt;span class="na"&gt;processedTags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processedTags&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countSnap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countSnap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="na"&gt;processedTags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processedTags&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
                        &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="na"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;created&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;visits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;uniqueVisits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;lastUniqueVisit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;lastUniqueDay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;recommends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;clicks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;processedTags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processedTags&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Firebase turned out to be flexible enough to build the widget, but it is very limited on reporting and has to be carefully watched to avoid costs associated with reading lots of data.  The article "recommendation" will feature next time, but this was a serious cause of read usage.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to get an attribute value in Angular's components and directives</title>
      <author>Dharmen Shah</author>
      <pubDate>Mon, 13 Sep 2021 12:21:06 +0000</pubDate>
      <link>https://dev.to/shhdharmen/how-to-get-an-attribute-value-in-angular-s-components-and-directives-4b0c</link>
      <guid>https://dev.to/shhdharmen/how-to-get-an-attribute-value-in-angular-s-components-and-directives-4b0c</guid>
      <description>&lt;p&gt;In this tutorial, we will explore all the ways to read HTML attribute values passed in the component or directive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-html-attributes"&gt;
  &lt;/a&gt;
  Reading HTML Attributes
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Elements in HTML have &lt;strong&gt;attributes&lt;/strong&gt;; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want. - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes"&gt;MDN Docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;colspan&lt;/code&gt; are some examples of HTML attributes.&lt;/p&gt;

&lt;p&gt;In some cases, you need to handle the behaviour of a component or directive based on a value set for the HTML attribute.&lt;/p&gt;

&lt;p&gt;For example, there is a component called &lt;code&gt;smart-input&lt;/code&gt;. You want to render different layouts for different &lt;code&gt;type&lt;/code&gt;s passed as values to the HTML attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- should render UI for text --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;smart-input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/smart-input&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- should render UI for number --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;smart-input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/smart-input&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-elementref-endraw-class"&gt;
  &lt;/a&gt;
  &lt;code&gt;ElementRef&lt;/code&gt; Class
&lt;/h2&gt;

&lt;p&gt;One way to read such attribute values, is through &lt;a href="https://angular.io/api/core/ElementRef"&gt;&lt;code&gt;ElementRef&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;smart-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;div [ngSwitch]="type"&amp;gt;
      &amp;lt;input type="text" *ngSwitchCase="'text'" /&amp;gt;
      &amp;lt;input type="number" *ngSwitchCase="'number'" /&amp;gt;
      &amp;lt;p *ngSwitchDefault&amp;gt;Unsupported type: {{ type }}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  `&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SmartInputComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;elementRef&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elementRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above is fine and works as expected. But, there is a shorter way available for the above in Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-attribute-endraw-parameter-decorator"&gt;
  &lt;/a&gt;
  The &lt;code&gt;@Attribute()&lt;/code&gt; Parameter Decorator
&lt;/h2&gt;

&lt;p&gt;You can use the &lt;a href="https://angular.io/api/core/Attribute"&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; parameter decorator to pass the value of the HTML attribute to the component or directive constructor through dependency injection.&lt;/p&gt;

&lt;p&gt;So for an earlier example, to read the &lt;code&gt;type&lt;/code&gt; attribute, we will do something like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;smart-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`...`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SmartInputComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the above code, &lt;code&gt;smart-input&lt;/code&gt; will render&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;input type="text"&amp;gt;&lt;/code&gt; for &lt;code&gt;&amp;lt;smart-input type="text"&amp;gt;&amp;lt;/smart-input&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;input type="number"&amp;gt;&lt;/code&gt; for &lt;code&gt;&amp;lt;smart-input type="number"&amp;gt;&amp;lt;/smart-input&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#usage-with-providers"&gt;
  &lt;/a&gt;
  Usage with providers
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;@Attribute()&lt;/code&gt; decorator can also be used in &lt;a href="https://angular.io/api/core/FactorySansProvider#deps"&gt;&lt;code&gt;deps&lt;/code&gt;&lt;/a&gt; when making a &lt;a href="https://angular.io/api/core/FactoryProvider"&gt;&lt;code&gt;FactoryProvider&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for &lt;code&gt;smart-input&lt;/code&gt;, we can also write our code like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Attribute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TypeAttribute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;smart-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`...`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)]],&lt;/span&gt;
      &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SmartInputComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TOKEN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage-in-other-builtin-directives"&gt;
  &lt;/a&gt;
  Usage in other built-in directives
&lt;/h3&gt;

&lt;p&gt;This decorator is also used by few built-in directives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://angular.io/api/router/RouterLink"&gt;&lt;code&gt;RouterLink&lt;/code&gt;&lt;/a&gt; reads &lt;code&gt;tabindex&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://angular.io/api/router/RouterOutlet"&gt;&lt;code&gt;RouterOutlet&lt;/code&gt;&lt;/a&gt; reads &lt;a href="https://angular.io/api/router/RouterOutlet#description"&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://angular.io/api/common/NgPluralCase"&gt;&lt;code&gt;ngPluralCase&lt;/code&gt;&lt;/a&gt; reads self-value&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h3&gt;

&lt;p&gt;Below are two limitations of using &lt;code&gt;@Attribute()&lt;/code&gt; decorator:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It only works with static HTML attribute values. It doesn‚Äôt work with &lt;a href="https://angular.io/guide/attribute-binding#binding-to-an-attribute"&gt;attribute binding&lt;/a&gt; and &lt;a href="https://angular.io/guide/property-binding"&gt;property binding&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;As it only works with static values, only &lt;code&gt;string&lt;/code&gt; type is supported.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To overcome the above limitations, we can use &lt;code&gt;@Input()&lt;/code&gt; decorator.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-input-endraw-property-decorator"&gt;
  &lt;/a&gt;
  The &lt;code&gt;@Input()&lt;/code&gt; Property Decorator
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://angular.io/api/core/Input"&gt;&lt;code&gt;@Input()&lt;/code&gt;&lt;/a&gt; is a property decorator, used in the child component or directive, which signifies that property can receive its value from the parent component.&lt;/p&gt;

&lt;p&gt;So, for the above example, we can rewrite it as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;smart-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`...`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SmartInputComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above works fine. And unlike &lt;code&gt;@Attribute()&lt;/code&gt;, this supports all data-types and if you use &lt;a href="https://angular.io/guide/property-binding"&gt;property binding&lt;/a&gt; or &lt;a href="https://angular.io/guide/interpolation#text-interpolation"&gt;text interpolation&lt;/a&gt;, it also tracks changes to the values.&lt;/p&gt;

&lt;p&gt;Also note that, &lt;code&gt;@Input()&lt;/code&gt; works with static and dynamic, both bindings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage-in-other-builtin-directives"&gt;
  &lt;/a&gt;
  Usage in other built-in directives
&lt;/h3&gt;

&lt;p&gt;This decorator is also used by many built-in directives. Below are a couple of examples:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://angular.io/api/common/NgClass"&gt;&lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt; to read self-value&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://angular.io/api/common/NgStyle"&gt;&lt;code&gt;ngStyle&lt;/code&gt;&lt;/a&gt; to read self-value&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#limitation"&gt;
  &lt;/a&gt;
  Limitation
&lt;/h3&gt;

&lt;p&gt;The only limitation of using &lt;code&gt;@Input()&lt;/code&gt; decorator is that it‚Äôs value is available only after component or directive is initialized, i.e. in &lt;a href="https://angular.io/guide/lifecycle-hooks#oninit"&gt;&lt;code&gt;ngOnInit&lt;/code&gt;&lt;/a&gt; life-cycle hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-elementref-endraw-raw-attribute-endraw-vs-raw-input-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;ElementRef&lt;/code&gt; / &lt;code&gt;@Attribute()&lt;/code&gt; vs &lt;code&gt;@Input()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;We learned three ways to read &lt;code&gt;type&lt;/code&gt;‚Äôs value for our&lt;code&gt;smart-input&lt;/code&gt; component, how they‚Äôre used in some built-in directives and limitations. Let‚Äôs look at the major differences again:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#availability"&gt;
  &lt;/a&gt;
  Availability
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;ElementRef&lt;/code&gt; and &lt;code&gt;@Attribute()&lt;/code&gt; makes attribute‚Äôs value available in &lt;code&gt;constructor&lt;/code&gt; through dependency injection&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@Input()&lt;/code&gt; makes the value available after component/directive initialization, i.e. in the &lt;code&gt;ngOnInit&lt;/code&gt; life-cycle hook.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#type-support"&gt;
  &lt;/a&gt;
  Type support
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;ElementRef&lt;/code&gt; and &lt;code&gt;@Attribute()&lt;/code&gt; supports only &lt;code&gt;string&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@Input()&lt;/code&gt; supports all types&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#value-updates"&gt;
  &lt;/a&gt;
  Value updates
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;ElementRef&lt;/code&gt; and &lt;code&gt;@Attribute()&lt;/code&gt; don‚Äôt track value update&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@Input()&lt;/code&gt; tracks value updates if property binding or text interpolation is used&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#general-usage"&gt;
  &lt;/a&gt;
  General usage
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;As &lt;code&gt;ElementRef&lt;/code&gt; and &lt;code&gt;@Attribute()&lt;/code&gt; supports only &lt;code&gt;string&lt;/code&gt; type, they are generally used to read static HTML attribute‚Äôs value&lt;/li&gt;
&lt;li&gt;As &lt;code&gt;@Input()&lt;/code&gt; supports all types and it also tracks updates, it is generally used to read DOM property or custom data passed to the component/directive&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned how to read the HTML attribute value in a component or directive using the  &lt;code&gt;ElementRef&lt;/code&gt; class, &lt;code&gt;@Attribute()&lt;/code&gt; and &lt;code&gt;@Input()&lt;/code&gt; decorators. We also learned their usages, how they‚Äôre used in some built-in directives and limitations.&lt;/p&gt;

&lt;p&gt;I have created a &lt;a href="https://stackblitz.com/edit/angular-ivy-8cyazj?file=src/app/app.component.ts"&gt;stackblitz&lt;/a&gt; for all of the code above.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
    </item>
    <item>
      <title>7 Microservices Best Practices for Developers</title>
      <author>Michael Bogan</author>
      <pubDate>Mon, 13 Sep 2021 12:21:05 +0000</pubDate>
      <link>https://dev.to/mbogan/7-microservices-best-practices-for-developers-ec5</link>
      <guid>https://dev.to/mbogan/7-microservices-best-practices-for-developers-ec5</guid>
      <description>&lt;p&gt;Unless you‚Äôve been developing software in a cave, you‚Äôve probably heard people sing the praises of microservices. They‚Äôre agile, simple, and an overall improvement on the &lt;a href="https://konghq.com/learning-center/microservices/monolith-vs-microservices/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;monolith&lt;/a&gt; and service-oriented architecture days. But of course, with all the benefits of microservices comes a new set of challenges.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll look at some microservices best practices. Plus, we‚Äôll suggest a few proven ways to help you design, orchestrate, and secure your microservices architecture. By understanding these practices, you‚Äôll have a head start on a successful project.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-and-challenges-of-microservices"&gt;
  &lt;/a&gt;
  Benefits and Challenges of Microservices
&lt;/h2&gt;

&lt;p&gt;Before we dive into microservices best practices, however, we should first talk about some of the &lt;a href="https://konghq.com/learning-center/microservices/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;benefits&lt;/a&gt; and challenges of microservices and why you would want to use them in the first place. &lt;/p&gt;

&lt;p&gt;Briefly, microservices are an improved software architecture that allow you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Deploy and scale faster&lt;/strong&gt;. Smaller application domain responsibility allows for automation, leading to faster deployments and faster scaling.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reduce downtime&lt;/strong&gt;. Limit the impact that one unavailable service has on your primary business function, improving your overall business uptime.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ensure availability&lt;/strong&gt;. Keep functionality between microservices discrete, limiting the impact when an instance goes down.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, with these benefits, we have a new set of challenges, including inter-service communication, &lt;a href="https://konghq.com/learning-center/api-gateway/building-a-secure-api-gateway/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;security&lt;/a&gt;, and scalability.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inter-service communication&lt;/strong&gt;. With a monolithic application, all of the modules can inherently talk to one another. You have one certificate to manage, and once a request is authenticated and authorized, it can traverse the code paths without issue. When you extract a function out of the monolith architecture to a microservices application, what was once an internal function call becomes an external API call requiring &lt;a href="https://konghq.com/learning-center/microservices/microservices-security-and-session-management/"&gt;authentication&lt;/a&gt; and authorization for that outside microservice.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security layer&lt;/strong&gt;. Authentication and authorization, in the monolith application, can be handled one time at the point of entry. With the transition to microservices, every microservice needs to perform some authentication and authorization to enforce access controls. It's not realistic to ask users to log in every time they use a different microservice, so a comprehensive auth strategy needs to be established.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalability&lt;/strong&gt;. Although microservices allow you to scale independent functionality quickly, doing so effectively requires good app management and even better tooling. The effectiveness of your scalability hinges on your microservice &lt;a href="https://konghq.com/learning-center/microservices/microservices-orchestration/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;orchestration platform&lt;/a&gt;, which we‚Äôll talk about in more detail below.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#microservices-best-practices"&gt;
  &lt;/a&gt;
  Microservices Best Practices
&lt;/h1&gt;

&lt;p&gt;With that quick overview of the benefits and challenges of microservices, let‚Äôs now dive into some best practices. These best practices will help you create a robust, easy-to-manage, scalable, and secure system of intercommunicating microservices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-small-application-domain"&gt;
  &lt;/a&gt;
  1. Small Application Domain
&lt;/h2&gt;

&lt;p&gt;Adopting a microservices strategy requires embracing the &lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;single responsibility principle&lt;/a&gt;. By limiting the scope of responsibility for any single service, we limit the negative impact of that service failing. If a single microservice is responsible for too much, its failure or unavailability will have a domino effect on the rest of the system. &lt;/p&gt;

&lt;p&gt;A _micro_service should be just that: micro. Keep the app domain of your microservices small, dedicated to one logical functionality. This will reduce the impact that a given microservice has if any issues arise. In addition, smaller services are simpler to maintain. The result is easier updating and faster development.&lt;/p&gt;

&lt;p&gt;What does this look like in practice? For example, let's assume that our microservice is an API server that accepts requests to fetch data, and an authorization token must accompany those requests. When you're just starting, this is the only microservice that requires an authorization token. Why not just make authentication and token generation part of the microservice? At first glance, the advantage is fewer moving parts, less to manage.&lt;/p&gt;

&lt;p&gt;Of course, there will come a day when you'll have other services that require an authorization token. You'll soon find your original microservice functioning as an API server &lt;em&gt;and&lt;/em&gt; an authentication server. If your API server goes down, then your authentication server goes down with it. With that, so does every other service that requires an authorization token.&lt;/p&gt;

&lt;p&gt;Be considerate of your future self: keep your microservices small.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-separation-of-data-storage"&gt;
  &lt;/a&gt;
  2. Separation of Data Storage
&lt;/h2&gt;

&lt;p&gt;Multiple microservices connecting to the same database are still, in essence, a monolithic architecture. The monolith is just at the database layer instead of the application layer, making it just as fragile. Each microservice should have, as much as possible, its own data persistence layer. This not only ensures isolation from other microservices but also minimizes the blast radius if that particular data set were to become unavailable.&lt;/p&gt;

&lt;p&gt;At times, it might seem to make sense for different microservices to access data in the same database. However, a deeper examination might reveal that one microservice only works with a subset of database tables, while the other microservice only works with a completely different subset of tables. If the two subsets of data are completely orthogonal, this would be a good case for separating the database into separate services. This way, a single service depends on its dedicated data store, and that data store's failure will not impact any service besides that one.&lt;/p&gt;

&lt;p&gt;We could make an analogous case for file stores. When adopting a microservices &lt;a href="https://konghq.com/learning-center/microservices/microservices-architectures/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;architecture&lt;/a&gt;, there's no requirement for separate microservices to use the same file storage service. Unless there's an actual overlap of files, separate microservices ought to have separate file stores.&lt;/p&gt;

&lt;p&gt;With this separation of data comes an increase in flexibility. For example, let's assume we had two microservices, both sharing the same file storage service with a cloud provider. One microservice regularly touches numerous assets but is small in file size. The other microservice has only a few files that it touches periodically, but those files are hundreds of gigabytes in size.&lt;/p&gt;

&lt;p&gt;Using a common file store service for both microservices makes you less flexible to optimize costs since you have a mix of large and small files and a mix of regular and periodic access. If each microservice had its own data persistence layer‚Äîand that could be a separate microservice, of course‚Äîthen you‚Äôd have more flexibility to find the provider or service that best fits the needs of that individual microservice.&lt;/p&gt;

&lt;p&gt;Cost optimization, the flexibility of options, and less dependence on a single solution that could fail‚Äîthese are all reasons to separate the data of different microservices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-communication-channels"&gt;
  &lt;/a&gt;
  3. Communication Channels
&lt;/h2&gt;

&lt;p&gt;How microservices communicate with one another‚Äîin particular, regarding events of interest‚Äîrequires thoughtful consideration. Otherwise, a single unavailable service can lead to a communication breakdown that collapses an entire application.&lt;/p&gt;

&lt;p&gt;Imagine a system of microservices for an online store. One microservice takes orders placed by a website. Another microservice sends a text notification to the customer that it received their order. Another microservice notifies the warehouse to send out the product. Finally, another microservice updates inventory counts.&lt;/p&gt;

&lt;p&gt;There are two types of communication between microservices: synchronous and asynchronous. If we approach the above example using synchronous communication, a web server might process a new order by first sending a request to the customer notification service. After the customer notification service responds, the web server sends a request to the warehouse notification service, and again it waits for a response. Last, the web server sends a request to the inventory updater. Our synchronous approach would look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4wu6jteg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eeji10e3o0i1ty4jurav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4wu6jteg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eeji10e3o0i1ty4jurav.png" alt="Picture1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Synchronous communication between microservices&lt;/p&gt;

&lt;p&gt;Of course, suppose the customer notification service happened to be down. In that case, the request to notify the customer might timeout or return an error or perhaps leave the web server waiting for a response indefinitely. The warehouse notification service might never get the request to fulfill the shipment. Synchronous communication between microservices can create a dependency chain that breaks if any link in the chain breaks.&lt;/p&gt;

&lt;p&gt;In asynchronous communication, a service sends a request and continues its life without waiting for a response. In one possible asynchronous approach, the web server might send the "notify customer" request and then complete its task. The customer notification service is responsible for notifying the customer and sending an asynchronous request to the warehouse notification service, which is responsible for sending a request to the inventory updater service. It might look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i8FIegZL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm65gxrzmebhiqtuc84l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i8FIegZL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm65gxrzmebhiqtuc84l.png" alt="Picture2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chained asynchronous communication between microservices&lt;/p&gt;

&lt;p&gt;In this model, of course, we see that asynchronous communication can still result in a chain dependency, and the failure of a single service would still disrupt the application.&lt;/p&gt;

&lt;p&gt;A simple but effective approach to asynchronous communication is to adopt the publish/subscribe pattern. When an event of interest occurs, the producer‚Äîin this case, the microservice‚Äîpublishes a record of that event to a message queue service. Any other microservices interested in that type of event subscribe to the message queue service as consumers of that event. Microservices only talk to and listen to the message queue service, not each other.&lt;/p&gt;

&lt;p&gt;For our example, it might look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VPS2ZxnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d87zza7w9a986l6zeff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VPS2ZxnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d87zza7w9a986l6zeff.png" alt="Picture3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Asynchronous communication facilitated by a message queue service&lt;/p&gt;

&lt;p&gt;The message queue is a separate service of its own, decoupled from all of the microservices. It is in charge of receiving published events and notifying subscribers of those events. This ensures that the failure of one microservice, which might mean delayed delivery of a message, has minimal impact on other related but unconcerned services.&lt;/p&gt;

&lt;p&gt;There are many tools to accomplish this kind of asynchronous communication (for example, Kafka or RabbitMQ). Look for ways to integrate tools like these as asynchronous communication backbones for your microservices.&lt;/p&gt;

&lt;p&gt;There are cases when synchronous communication between microservices is necessary. Most request-response interactions are, out of necessity, synchronous. For example, an API server querying a database must wait for the query response; a web server fetching cached data must wait for the key-value store to respond. &lt;/p&gt;

&lt;p&gt;When synchronous communication is needed, you‚Äôll want to use the open source &lt;a href="https://konghq.com/kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Gateway&lt;/a&gt; to ensure that your communication is routed quickly and reliably to the right microservices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-compatibility"&gt;
  &lt;/a&gt;
  4. Compatibility
&lt;/h2&gt;

&lt;p&gt;As much as possible, maintain backward compatibility, so your consumers don‚Äôt encounter broken APIs. The popular way to do this is by following path level compatibility guarantees like &lt;code&gt;/api/v1&lt;/code&gt; or &lt;code&gt;/api/v2&lt;/code&gt;. Any backward-incompatible changes go to a new path like &lt;code&gt;/api/v3&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;However, despite our best efforts as software engineers, sometimes we need to deprecate APIs, so we‚Äôre not stuck running them forever. With the &lt;a href="https://konghq.com/blog/api-gateway-request-transformation/"&gt;API gateway request transformation&lt;/a&gt; plugin, your microservices can alert your API consumers by easily injecting deprecation notices alongside the original API response or attaching a ‚Äúdeprecation header‚Äù similar to &lt;a href="https://kubernetes.io/docs/reference/using-api/deprecation-policy/#rest-resources-aka-api-objects"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-orchestrating-microservices"&gt;
  &lt;/a&gt;
  5. Orchestrating Microservices
&lt;/h2&gt;

&lt;p&gt;Orchestration of your microservices is a key factor of success in both process and tooling. Technically, you could use something like &lt;code&gt;systemd&lt;/code&gt; and Docker or &lt;code&gt;podman&lt;/code&gt; to run containers on a virtual machine, but that doesn‚Äôt provide the same level of resiliency as a container orchestration platform. This negatively affects the uptime and availability benefits that come with adopting a microservices architecture. For effective microservice orchestration, you‚Äôll want to rely on a battle-tested container orchestration platform; and the clear leader in that field is &lt;a href="https://konghq.com/learning-center/kubernetes/what-is-kubernetes/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kubernetes manages all of your containers‚Äô provisioning and deployment while handling load balancing, scaling, replica sets for high availability, and network communication concerns.&lt;/p&gt;

&lt;p&gt;You might deploy bare Kubernetes on-premises, or you might go with a cloud distribution like Azure Kubernetes Service, Red Hat OpenShift, or Amazon Elastic Kubernetes Service. The built-in scheduling, replication, and networking capabilities of Kubernetes make microservice orchestration much easier than on a traditional operating system. &lt;/p&gt;

&lt;p&gt;Couple Kubernetes with &lt;a href="https://kuma.io/"&gt;Kuma&lt;/a&gt; service mesh and &lt;a href="https://konghq.com/solutions/kubernetes-ingress/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Ingress Controller&lt;/a&gt;, and you have microservices that are discoverable, monitored, and resilient‚Äîlike magic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-microservices-security"&gt;
  &lt;/a&gt;
  6. Microservices Security
&lt;/h2&gt;

&lt;p&gt;As your application comprises more and more microservices, ensuring proper security can become a complicated beast. A centralized system for enforcing security policies is vital to protecting your overall application from malicious users, invasive bots, and faulty code. &lt;a href="https://konghq.com/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong&lt;/a&gt; ought to be the start of your security story with microservices, whether you‚Äôre running on VMs or in Kubernetes. The abundance of Kong-maintained &lt;a href="https://docs.konghq.com/hub/#security"&gt;security plugins&lt;/a&gt; makes it easy to address some of the most common needs for microservices, including &lt;a href="https://konghq.com/blog/kong-gateway-key-authentication/"&gt;authentication&lt;/a&gt;, authorization, traffic control, and &lt;a href="https://konghq.com/blog/kong-gateway-rate-limiting/"&gt;rate limiting&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-rate-limiting-with-kong-ingress-controller"&gt;
  &lt;/a&gt;
  Example: Rate Limiting with Kong Ingress Controller
&lt;/h3&gt;

&lt;p&gt;To demonstrate an example of a security plugin at work, we'll deploy Kong's &lt;a href="https://docs.konghq.com/hub/kong-inc/rate-limiting/"&gt;Rate Limiting plugin&lt;/a&gt; to show how Kong can prevent excessive inbound requests to your applications. We'll create a local Kubernetes cluster with &lt;code&gt;&lt;a href="https://kind.sigs.k8s.io/"&gt;kind&lt;/a&gt;&lt;/code&gt; and then deploy the Kong Ingress Controller by following these &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/1.3.x/deployment/k4k8s/"&gt;instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After creating a cluster and deploying the Kong Ingress Controller, our first step is to set up the Rate Limiting plugin. There are different scopes for which you can set up the plugin. We‚Äôll use the default project on our Kubernetes cluster for our use case and scope the plugin to that default namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo 'apiVersion: configuration.konghq.com/v1
kind: KongPlugin
metadata:
  name: rate-limiting-example
  namespace: default
config:
  second: 5
  hour: 10000
  policy: local
plugin: rate-limiting' | kubectl apply -f -
kongplugin.configuration.konghq.com/rate-limiting-example created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we‚Äôll create an ‚Äúecho service‚Äù and an ingress for the service. In this case, we‚Äôre borrowing the example from Kong‚Äôs &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/1.3.x/guides/getting-started/#set-up-an-echo-server"&gt;Getting Started with Kubernetes Ingress Controller&lt;/a&gt; documentation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl apply -f https://bit.ly/echo-service
service/echo created
deployment.apps/echo created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo "
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: demo
  annotations:
    kubernetes.io/ingress.class: kong
    konghq.com/plugins: rate-limiting-example
spec:
  rules:
  - http:
      paths:
      - path: /foo
        backend:
          serviceName: echo
          servicePort: 80
" | kubectl apply -f -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last thing we need to do is test! We‚Äôll borrow the &lt;code&gt;shell-demo&lt;/code&gt; from the Kubernetes&lt;a href="https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/"&gt; documentation for in-cluster testing&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl apply -f https://k8s.io/examples/application/shell-demo.yaml -n default
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before getting into our shell pod, we‚Äôll need the cluster IP of &lt;code&gt;kong-proxy&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get svc/kong-proxy -n kong -o jsonpath='{.spec.clusterIP}'
10.96.74.69
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can get shell access to our pod and test the rate limiting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl exec --stdin --tty shell-demo -- /bin/bash
# curl -I 10.96.74.69/foo
HTTP/1.1 200 OK
Content-Type: text/plain; charset=UTF-8
Connection: keep-alive
X-RateLimit-Limit-Second: 5
X-RateLimit-Remaining-Hour: 9998
X-RateLimit-Limit-Hour: 10000
RateLimit-Reset: 1
RateLimit-Remaining: 4
RateLimit-Limit: 5
X-RateLimit-Remaining-Second: 4
Date: Sat, 24 Jul 2021 20:01:35 GMT
Server: echoserver
X-Kong-Upstream-Latency: 0
X-Kong-Proxy-Latency: 0
Via: kong/2.4.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The additional step of using an intermediary pod to test the rate limiting won‚Äôt be necessary for most cloud providers, which gives you a load balancer out of the box. In this case, since we‚Äôre using &lt;code&gt;kind&lt;/code&gt;, there‚Äôs no load balancer provisioned, so our test comes from within the cluster. This same test would work externally if a load balancer were available.&lt;/p&gt;

&lt;p&gt;Rate limiting is just one example of where Kong fits into the security concerns of your overall microservices strategy and best practices but can easily provide a fully comprehensive solution. Kong maintains several plugins and products to keep your communication channels bulletproof, API change impact minimal, and your application domains manageable. Plus, it's compatible with most programming languages and vendor options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-metrics-and-monitoring"&gt;
  &lt;/a&gt;
  7. Metrics and Monitoring
&lt;/h2&gt;

&lt;p&gt;An architecture built on microservices can lead to massive scaling of hundreds or thousands of small, modular services. While that yields huge potential for increased speed, availability, and reach, a sprawling system of microservices requires a strategic and systematic approach to monitoring. By keeping an eye on all of your microservices, you'll ensure that they are functioning as they ought to, are available to your users, and are using resources appropriately. When any of these expectations are not met, you can respond by taking proper action.&lt;/p&gt;

&lt;p&gt;Fortunately, you don't need to reinvent the wheel when it comes to monitoring. There are several widely adopted monitoring solutions that can integrate seamlessly within your infrastructure. Some solutions use metrics exporter SDKs which can be integrated by adding one or two lines of code in your microservice. Others can be integrated with your API gateway or service mesh as a plugin, for monitoring networking concerns and resource usage.&lt;/p&gt;

&lt;p&gt;As your monitoring tools gather metrics, those metrics can be consumed by visualization tools‚Äîbeautiful dashboards that help you see the numbers behind your microservices. How many users were online last Thursday at 8:00 PM? How much has CPU load increased since we released that new feature? What's the latency between our product shipping API and the invoicing API?&lt;/p&gt;

&lt;p&gt;By monitoring your microservices and having your hard numbers presented clearly, you're equipped to make informed decisions about how to keep your microservices healthy and available. As you do that, you'll keep your users happy.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-forget-your-lap-bar"&gt;
  &lt;/a&gt;
  Don‚Äôt Forget Your Lap Bar...
&lt;/h1&gt;

&lt;p&gt;Microservices are a wild ride! You start with the incredible benefits of speedier deployment and scalability, reduced downtime, and overall improvement of your business availability. Then, you throw in your orchestration platform, along with some best practices powered by Kong and its plugins, and boom! You have a symphony of packets flowing to and fro between your microservices that are secure, reliable, and bulletproof. We‚Äôve only covered a small subset of what Kong can do, so I‚Äôd highly recommend checking out &lt;a href="https://docs.konghq.com/hub/"&gt;Kong Hub&lt;/a&gt; to see all the functionality available to ease your journey to microservice nirvana!&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Project Tours: Bread Ratio Calculator</title>
      <author>Adam Davis</author>
      <pubDate>Mon, 13 Sep 2021 12:10:16 +0000</pubDate>
      <link>https://dev.to/brewinstallbuzzwords/project-tours-bread-ratio-calculator-52kc</link>
      <guid>https://dev.to/brewinstallbuzzwords/project-tours-bread-ratio-calculator-52kc</guid>
      <description>&lt;p&gt;For as long as I can remember, bread has been my favorite food. It's a food like no other. There's an incredible amount of variety, and everything from the amount of water you use to your folding technique to the proofing temperature can make significant differences in the final product.&lt;/p&gt;

&lt;p&gt;I started baking regularly a few years ago and have been &lt;a href="https://www.instagram.com/adambakesbread/"&gt;casually documenting my journey on instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So when covid struck and I was stuck at home with nothing to do, I combined my love for bread with my passion for programming to make &lt;a href="http://breadratiocalculator.com"&gt;breadratiocalculator.com&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Want to follow along with the code? See the GitHub repo &lt;a href="https://github.com/brew-install-buzzwords/baking-percentage-calculator"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-would-you-need-a-calculator-for-bread"&gt;
  &lt;/a&gt;
  Why would you need a calculator for bread?
&lt;/h2&gt;

&lt;p&gt;One of the main use cases for this tool is to calculate the hydration percentage. Rather than a typical percentage where the denominator would be the total weight, bakers percentages use the weight of the flour as the denominator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aLyFVHJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xunjdtx3gah7x0n0k8ef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aLyFVHJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xunjdtx3gah7x0n0k8ef.png" alt="Screenshot of breadratiocalculator.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The purpose of this method is to make it easier to figure out how much water you need. If you have 1000 grams of flour and you want a 60% hydration dough, you would multiply 1000 by .6 to get 600 grams (or milliliters) of water.&lt;/p&gt;

&lt;p&gt;With this web app, once you have your ingredients set up it becomes easy to scale the recipe relative to the amount of flour you're using. If you have multiple types of flour, it knows to use the total weight of all of them. When you change the weight of flour being input, the values of the other fields automatically update based on their given percentage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HqbA3JCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw880ptc79gg265z56tb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HqbA3JCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw880ptc79gg265z56tb.gif" alt="Gif of fields automatically updating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#food-is-meant-to-be-shared"&gt;
  &lt;/a&gt;
  Food is meant to be shared
&lt;/h2&gt;

&lt;p&gt;One of my goals for this app was to make it as easy as possible to share the ingredients lists and bakers percentages once they've been entered or calculated. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cm9wrm08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nza6pa8rklahr2tg5lb1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cm9wrm08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nza6pa8rklahr2tg5lb1.gif" alt="Gif of ingredient card automatically updating in response to form values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ingredient card above is generated with the push of a button and uses a square aspect ratio to be shared as a slide in a post on Instagram, Reddit, or any other social media site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WHPNbf8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq46dxwj2cha0ufzr6l1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WHPNbf8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq46dxwj2cha0ufzr6l1.gif" alt="Gif of ingredient card used as a slide in an Instagram post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-sausage-bread-web-app-gets-made"&gt;
  &lt;/a&gt;
  How the sausage (bread? web app?) gets made
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://breadratiocalculator.com"&gt;breadratiocalculator.com&lt;/a&gt; is a static web app built with angular and hosted with AWS S3 and Cloudfront. The project also utilizes angular material for UI components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ingredients-card"&gt;
  &lt;/a&gt;
  Ingredients card
&lt;/h3&gt;

&lt;p&gt;The ingredients card is generated using an SVG image that is bound to angular variables. When those variables change, the ingredients card automatically updates with the new names, weights, and percentages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm in the middle of writing a post on how you can create your own dynamic SVG components with angular, so if you'd like to learn how to do this make sure to follow me on DEV or subscribe to my monthly newsletter so you don't miss out.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To download the image as a PNG, things get a little more complicated. For this, the SVG is converted into a blob and drawn onto a canvas. Then an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element is created with an &lt;code&gt;href&lt;/code&gt; property that points to the canvas's data url. After that, the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element's download function is invoked.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#from-screen-to-page"&gt;
  &lt;/a&gt;
  From screen to page
&lt;/h3&gt;

&lt;p&gt;It can be annoying to read recipes from your phone while cooking or baking, so many people (myself included) like to print out recipes onto paper.&lt;/p&gt;

&lt;p&gt;However, directly printing a web app can lead to a few problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the components were only designed for the web, and may not be styled consistently when printed&lt;/li&gt;
&lt;li&gt;Colorful designs may look great on a screen, but could be costly to print&lt;/li&gt;
&lt;li&gt;Web interfaces may not use space efficiently when moved to a piece of paper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I encountered all three of these problems when trying to print from this app, so I imported &lt;a href="https://www.npmjs.com/package/ngx-print"&gt;ngx-print&lt;/a&gt; for some help.&lt;/p&gt;

&lt;p&gt;Now, on the click of a button, I can render a printable page that's bound to angular variables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-think"&gt;
  &lt;/a&gt;
  What do you think?
&lt;/h2&gt;

&lt;p&gt;Am I missing some key features? Did you find a bug? What's your favorite kind of bread? Let me know in the comments!&lt;/p&gt;

&lt;p&gt;To make sure you don't miss out, &lt;a href="https://dev.to/brewinstallbuzzwords"&gt;follow me on DEV&lt;/a&gt; or &lt;a href="https://mailchi.mp/89dc077154c7/brewinstallbuzzwords"&gt;subscribe to my monthly newsletter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-content"&gt;
  &lt;/a&gt;
  More content
&lt;/h2&gt;

&lt;p&gt;If you liked this, you might also like some of my other posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.brewinstallbuzzwords.com/posts/learn-elixir-with-me/"&gt;Learn Elixir with me!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.brewinstallbuzzwords.com/posts/emoji-skin-tone/"&gt;Changing Emoji Skin Tones Programmatically&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/brewinstallbuzzwords/i-made-my-first-svg-animation-29j3"&gt;I made my first svg animation!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.brewinstallbuzzwords.com/posts/tips-for-first-npm-package/"&gt;5 tips for publishing your first npm package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.brewinstallbuzzwords.com/posts/hugo-beginner-mistakes/"&gt;4 Hugo Beginner Mistakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.brewinstallbuzzwords.com/posts/meme-type/"&gt;Introducing meme-type: A translator for internet speak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Toolsüõ† For Web Developer üë®‚Äçüíª to keep in check in 2021 ü§Ø </title>
      <author>Chaitanya Prabuddha</author>
      <pubDate>Mon, 13 Sep 2021 11:56:08 +0000</pubDate>
      <link>https://dev.to/chtn/tools-for-web-developer-to-keep-in-check-in-2021-1117</link>
      <guid>https://dev.to/chtn/tools-for-web-developer-to-keep-in-check-in-2021-1117</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tools-for-web-developers-to-keep-in-check-in-2021"&gt;
  &lt;/a&gt;
  Tools For Web Developers to keep in check In 2021
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#998-dont-know-all-of-them"&gt;
  &lt;/a&gt;
  &lt;em&gt;99.8% don't know all of them.&lt;/em&gt;
&lt;/h6&gt;

&lt;p&gt;"Get detailed explanation, with links in this post." &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To Get More Detailed &amp;amp; Exclusive Content, Follow Me On &lt;a href="https://twitter.com/heychtn"&gt;Twitter&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚û° ‚û° &lt;a href="https://twitter.com/heychtn"&gt;@heychtn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now without further wasting any time, Let's dive into it:&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Bootstrap cheatsheet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• The bootstrap cheat sheet is an interactive list of Bootstrap 5 classes, variables, and mixins. &lt;/p&gt;

&lt;p&gt;Key Features are: &lt;br&gt;
 ‚û° Live preview of HTML &amp;amp; code snippet.&lt;br&gt;
 ‚û° Update code snippet on the go.&lt;br&gt;
 ‚û° Easily copy the code snippet and use it.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://t.co/6R64sRr1Lj?amp=1"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Devhints. io&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• Here you will find sets of ready-made snippets with popular code snippets, configurations, and commands.&lt;/p&gt;

&lt;p&gt;üî• Devhints can come in handy if you need to refresh your knowledge quickly&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="//devhints.io"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Carbon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• If you need to create a piece of code in the form of an image, Carbon is the perfect tool for this purpose. &lt;/p&gt;

&lt;p&gt;üî• It has support for many languages ‚Äã‚Äãand a ready set of different themes.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://carbon.now.sh"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Meta Tags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• Meta Tags is a simple online tool that you can use to quickly make the meta tags for your website.&lt;/p&gt;

&lt;p&gt;üî• You just have to put the code, they provide, in your codebase. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="//metatags.io"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.&lt;strong&gt;Frontend checklist. io&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• Frontend Checklist includes 88 points to keep in mind when creating a website ‚Äî quite a lot, right? In addition, each point has a priority marked. &lt;/p&gt;

&lt;p&gt;üî• An additional advantage is the ability to create your own checklists.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="//frontendchecklist.io"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;strong&gt;Google Lighthouse&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî•  It is an open-source, automated tool for measuring the quality of web pages.&lt;/p&gt;

&lt;p&gt;What Reports You Will Get:&lt;br&gt;
 ‚û° performance&lt;br&gt;
 ‚û° accessibility&lt;br&gt;
 ‚û° search engine optimization&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://t.co/FO1gmsWOX0?amp=1"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To Get More Detailed &amp;amp; Exclusive Content, Follow Me On &lt;a href="https://twitter.com/heychtn"&gt;Twitter&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;7.&lt;strong&gt;Ngrok&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• If you create a website on a local server and show off your work results to someone, you can use Ngrok.&lt;/p&gt;

&lt;p&gt;üî• This tool allows you to ‚Äúbring to the world‚Äù your local application. &lt;/p&gt;

&lt;p&gt;-&amp;gt; Free &amp;amp; Paid Options Available.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://ngrok.com"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8.&lt;strong&gt;Nibbler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• Nibbler is a free online tool that you can use to scan your website.&lt;/p&gt;

&lt;p&gt;üî• It will give you a report scoring the website for key areas, including accessibility, SEO, social media, and technology.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="//nibbler.silktide.com"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.&lt;strong&gt;Tiny. png&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• TinyPNG uses smart lossy compression techniques to reduce the file size of your PNG files. &lt;/p&gt;

&lt;p&gt;üî• By selectively decreasing the number of colors in the image, fewer bytes are required to store the data&lt;/p&gt;

&lt;p&gt;-&amp;gt; They Maintain The Quality.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="//tinypng.com"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.&lt;strong&gt;Website Vulnerability Scanner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• Website Vulnerability Scanner is a free online tool developed by Pentest-Tools.&lt;/p&gt;

&lt;p&gt;üî• You just have to plug in your URL and it will generate a detailed Security report.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://t.co/xSx8sNK6Ht?amp=1"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;11.&lt;strong&gt;Gitignore. io&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• I know that you don‚Äôt need higher math to create a .gitignore file, but a ready-made tool was created for that. &lt;/p&gt;

&lt;p&gt;üî• The only thing you provide is information such as the operating system or development environment.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="//Gitignore.io"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;12.&lt;strong&gt;Regex101&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• Regex101 offers both instruction for creating regular expressions and a ready environment for writing and testing expressions.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="//regex101.com"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;13.&lt;strong&gt;CSS reference. io&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;üî• Accessible, short, and neat documentation for CSS. Personally, I prefer to use MDN, but someone will surely like it!&lt;/p&gt;

&lt;p&gt;üî• For each CSS property, you get an image or an animation with an example.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="//cssreference.io"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This Blog Post is inspired from one of my &lt;a href="https://twitter.com/heychtn/status/1437116784071434242"&gt;twitter thread&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Make Sure To Follow Me On Dev (here) Too... &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>python</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
