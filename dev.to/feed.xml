<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Combining Machine Learning and Human Intelligence at Unbabel</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 22 Dec 2021 23:36:09 +0000</pubDate>
      <link>https://dev.to/linearb/combining-machine-learning-and-human-intelligence-at-unbabel-31e4</link>
      <guid>https://dev.to/linearb/combining-machine-learning-and-human-intelligence-at-unbabel-31e4</guid>
      <description>&lt;p&gt;Companies that do business in the native language of their customer build better customer relationships. Although this may seem fairly obvious, it's easier said than done.&lt;/p&gt;

&lt;p&gt;After all, when your customer base is spread around the world, how do you scale your customer service?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unbabel.com/"&gt;Unbabel&lt;/a&gt; has built their business around the idea that customer service can be delivered in any language quickly and efficiently with the right blend of AI and human intelligence, creating a platform they call "Language Operations" or &lt;a href="https://unbabel.com/language-operations/"&gt;LangOps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Jonathan Sowler, VP of Engineering at Unbabel, joins Dev Interrupted to talk about machine learning, what it takes to build a product that seamlessly integrates AI and human-powered translations, and why the future of language involves emojis.&lt;/p&gt;

&lt;p&gt;Dan and Jonathan also rundown &lt;a href="https://linearb.io/"&gt;LinearB&lt;/a&gt; metrics and why Jonathan believes implementing LinearB has improved the health of Unbabel's engineering team.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4A3V8yolvRCV44XDTNiy0y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is LangOps?&lt;/li&gt;
&lt;li&gt;How ML can be applied to different brands&lt;/li&gt;
&lt;li&gt;Unbabel's use of &lt;a href="https://linearb.io/blog/workerb-developer-automation/"&gt;WorkerB&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Why Unbabel chose to implement &lt;a href="https://linearb.io/dev-team-metrics/"&gt;LinearB metrics&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Building a platform that integrates AI &amp;amp; human intelligence&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 2000 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sc89qDpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy4korckp9bfh5dknmf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sc89qDpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy4korckp9bfh5dknmf3.png" alt="https://discord.com/invite/devinterrupted" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>techtalks</category>
      <category>podcast</category>
      <category>ai</category>
    </item>
    <item>
      <title>Aspirations for 2022</title>
      <author>Susumu Yamazaki</author>
      <pubDate>Wed, 22 Dec 2021 23:20:57 +0000</pubDate>
      <link>https://dev.to/zacky1972/aspirations-for-2022-521m</link>
      <guid>https://dev.to/zacky1972/aspirations-for-2022-521m</guid>
      <description>&lt;p&gt;Merry Christmas and a happy new year!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a Pelemay Backend, which applies the Pelemay technology to Nx &lt;a href="https://github.com/elixir-nx/nx"&gt;https://github.com/elixir-nx/nx&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;Apply the Pelemay technology to evision &lt;a href="https://github.com/cocoa-xu/evision"&gt;https://github.com/cocoa-xu/evision&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;Implement a satellite image processing system with Elixir.&lt;/li&gt;
&lt;li&gt;Create Astesting &lt;a href="https://github.com/zeam-vm/astesting"&gt;https://github.com/zeam-vm/astesting&lt;/a&gt; , which automates testing in multiple environments.&lt;/li&gt;
&lt;li&gt;Pursue performance per power consumption using ARM and RISC-V.&lt;/li&gt;
&lt;li&gt;Accumulate English technical information at &lt;a href="https://dev.to/zacky1972"&gt;https://dev.to/zacky1972&lt;/a&gt; .&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will find the time and write each plan of the above in detail below...&lt;/p&gt;

</description>
      <category>elixir</category>
    </item>
    <item>
      <title>React.memo() is your friend</title>
      <author>NRF</author>
      <pubDate>Wed, 22 Dec 2021 21:44:32 +0000</pubDate>
      <link>https://dev.to/nrf/reactmemo-is-your-friend-e6p</link>
      <guid>https://dev.to/nrf/reactmemo-is-your-friend-e6p</guid>
      <description>&lt;p&gt;&lt;code&gt;React.memo()&lt;/code&gt; is one of those things that should be a part of every React developer's arsenal. It gives us the ability to memoize a React component. As with any tool, before we delve into how to use &lt;code&gt;React.memo()&lt;/code&gt;, let's understand the problem first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-memoize"&gt;
  &lt;/a&gt;
  Why memoize?
&lt;/h2&gt;

&lt;p&gt;Memoization is a general concept which basically means caching the results of some kind of computation for later use. It is an optimization technique which is used quite extensively in the programming world.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An important point to remember is that whenever memoization is used, there must be a criteria which would dicate when the cached results are no longer valid and the computation must be done again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To understand the problem this solves, consider the following React component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleDecrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleDecrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A simple component that keeps a count which can be increased or decreased.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DPu7ZE_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p13jvfr45rrj3013kx14.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DPu7ZE_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p13jvfr45rrj3013kx14.gif" alt="1" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add another component to &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;. To keep it simple, we'll create a &lt;code&gt;&amp;lt;Message /&amp;gt;&lt;/code&gt; component that returns some kind of message depending on the &lt;code&gt;msgId&lt;/code&gt; that is passed to it as a prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello, world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hola!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've kept it simple here but imagine this &lt;code&gt;&amp;lt;Message /&amp;gt;&lt;/code&gt; component does some heavy computation or perhaps sends a request to an external API in order to get the final message. We'll simulate this situation by adding everyone's favorite &lt;code&gt;console.log()&lt;/code&gt; in the mix.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello, world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Just performed some seriously heavy computation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hola!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's update the &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; component to use &lt;code&gt;&amp;lt;Message /&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello, world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Just performed some seriously heavy computation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hola!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleDecrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Message&lt;/span&gt; &lt;span class="nx"&gt;msgId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleDecrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the video below, take special note of the fact that every time &lt;code&gt;count&lt;/code&gt; is changed, the heavy computation is done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oq6Ah7iR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu8sf75tjyoc725qxm03.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oq6Ah7iR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu8sf75tjyoc725qxm03.gif" alt="2" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To understand why the heavy computation is done every time &lt;code&gt;count&lt;/code&gt; changes, check out this post: &lt;a href="https://blog.bracketsinstitute.com/re-rendering-in-react"&gt;Re-rendering in React&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, take a step back and think about how inefficient our UI is at this moment. &lt;code&gt;count&lt;/code&gt; does not affect &lt;code&gt;&amp;lt;Message /&amp;gt;&lt;/code&gt; in any way but still every time &lt;code&gt;count&lt;/code&gt; is updated, the &lt;strong&gt;seriously heavy computation&lt;/strong&gt; is performed. We only want the computation to occur if the &lt;code&gt;msgId&lt;/code&gt; changes because a change in &lt;code&gt;msgId&lt;/code&gt; should result in a different message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactmemo-to-the-rescue"&gt;
  &lt;/a&gt;
  React.memo() to the rescue
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;React.memo()&lt;/code&gt; is a higher-order component. It accepts a component as its argument and memoizes the result. The memoized result is updated only if the props of the original component are changed.&lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;React.memo()&lt;/code&gt;, simply pass your component as an argument and save the result. Our &lt;code&gt;&amp;lt;Message /&amp;gt;&lt;/code&gt; component will become:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello, world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Just performed some seriously heavy computation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hola!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: I've only imported &lt;code&gt;memo()&lt;/code&gt; here. If you have &lt;code&gt;React&lt;/code&gt; imported, you can use &lt;code&gt;React.memo()&lt;/code&gt; instead of just &lt;code&gt;memo()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now our code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello, world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Just performed some seriously heavy computation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey there!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hola!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleDecrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;oldCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Message&lt;/span&gt; &lt;span class="nx"&gt;msgId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleDecrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleIncrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Fragment&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time, notice that the computation is done when the application is refreshed but the change in &lt;code&gt;count&lt;/code&gt; no longer has that result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tmlkirGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tlaf8nqzanxlktx46dx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tmlkirGv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tlaf8nqzanxlktx46dx.gif" alt="3" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;👉🏻 Subscribe to my newsletter: &lt;a href="https://www.bracketsinstitute.com/newsletter-subscription"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👉🏻 Follow me on twitter: &lt;a href="https://twitter.com/bi_nrf"&gt;click here&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Why Learning To Code Should Be Your 2022 Resolution</title>
      <author>Amy Oulton</author>
      <pubDate>Wed, 22 Dec 2021 21:42:06 +0000</pubDate>
      <link>https://dev.to/amyoulton/why-learning-to-code-should-be-your-2022-resolution-35k8</link>
      <guid>https://dev.to/amyoulton/why-learning-to-code-should-be-your-2022-resolution-35k8</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This blog was originally published on &lt;a href="//codecast.io"&gt;CodeCast&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To a lot of people, a new year means new potential. It feels like a fresh start and the drive to make changes and do well is at an all-time high. A lot of that is because after the madness of the holidays and reflecting on the year behind us, we’re able to take a slight break before going back into our routine - and often, we’d like that routine to change.&lt;/p&gt;

&lt;p&gt;Resolutions are nothing new. They have been around for a very long time and even though a lot of people make resolutions they end up breaking, the idea behind the resolution is what we find important.&lt;/p&gt;

&lt;p&gt;Striving to grow and change and be a better version of ourselves is something we should all be doing throughout our entire lives. It keeps everyone constantly moving forward and adapting, and I think that’s important. It also gives us a chance to reflect on our lives and see what we’re happy with, and what we want to change.&lt;/p&gt;

&lt;p&gt;Last January, I found myself doing exactly that - wanting a change. I had been in the pet &amp;amp; retail industry for 11 years and was itching to do something else. I had previously earned a degree in Creative Writing but hadn’t found a job that I felt matched who I was. I wanted a job that challenged me and also allowed me to not dread coming into work every day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8wqR1Ppq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onndm2xtelfib0608ety.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8wqR1Ppq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onndm2xtelfib0608ety.jpg" alt="computer build" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’d always loved working with computers, and after rebuilding my husband’s gaming computer for Christmas last year, I started thinking more and more about finding a profession within the tech industry. I just didn’t yet know exactly what I wanted to do, so I started weighing my options and talking to people who were also in the industry. This led me to have a conversation with a friend who has previously gone through a local coding bootcamp. She felt it was the best choice she had ever made for herself. I begin wondering if it was perhaps also the right choice for me.&lt;/p&gt;

&lt;p&gt;Fast forward to March and I was attending a coding bootcamp. The bootcamp ended up becoming entirely remote due to the pandemic, where we relied on &lt;a href="//codecast.io"&gt;CodeCast&lt;/a&gt; within our school to learn, something I felt helped out the remote learning process immensely. I graduated from the bootcamp and several months later, applied for an internship working for CodeCast. Now, over a year later, I still work here full-time as a developer and content creator, and for the past year, haven’t spent my time dreading going into work. Now you might be thinking “that’s cool and all, but how does this apply to me learning to code?”. &lt;/p&gt;

&lt;p&gt;What we need to figure out is what path is right for you. While there’s a ton of value in learning even a little bit of programming knowledge, that doesn’t mean it’s necessarily the right career choice for you. Being a developer isn’t for everyone (though I suspect if you clicked on this article, you have your suspicions it could be right for you). However, even if you don't think it's your path, learning basic coding skills is becoming increasingly important for roles outside of pure development. It also gives you the opportunity to start your career as a developer, and transition into different roles based on what feels right for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mAHDG4uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xyhufub3clp3ixtnou7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mAHDG4uw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xyhufub3clp3ixtnou7.jpg" alt='"turn ideas into reality"' width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve previously written about why &lt;a href="https://info.codecast.io/blog/why-coding-is-crucial-to-the-future-of-business"&gt;coding is crucial to the future of business&lt;/a&gt;, and a lot of the points I could make in this article would overlap those, so I would encourage you to read that article as well! However, there are a few key points I do want to touch on about the value of learning to code in the coming year.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-invaluable-skill-for-free"&gt;
  &lt;/a&gt;
  An Invaluable Skill - For Free?
&lt;/h3&gt;

&lt;p&gt;While many people choose to go my route and take a coding bootcamp, or more intensively earn a computer science degree, a lot of people are now getting employed in developer roles after teaching themselves to learn using free online resources. Now, before everyone starts debating the value of the different paths in the comments, I want to point out that each path is different and serves a vitally different purpose. The path of a person with a CS degree versus a self-taught dev might look similar on the surface but are often entirely different in application. How you choose to learn and gain skills is entirely based on your desired profession, role, and proficiency in specific areas. &lt;/p&gt;

&lt;p&gt;However, for those who are interested in learning at their own pace online, it’s important to note that there is a lot of success in the industry from this. As devs, our roles are more unique as the majority of us are always learning on the go. We have the foundation to find the solution, but a significant part of our job is to problem solve and learn. This means that starting a career using free online resources is entirely possible. Sites like &lt;a href="https://www.freecodecamp.org/"&gt;freecodecamp&lt;/a&gt;, &lt;a href="https://www.codecademy.com/learn"&gt;Codecademy&lt;/a&gt;, &lt;a href="https://www.codecademy.com/learn"&gt;Scrimba&lt;/a&gt;, and &lt;a href="https://www.codecast.io/?_ga=2.156324856.211368887.1640021470-1858564538.1631636385"&gt;CodeCast&lt;/a&gt; are fantastic resources to get started!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZ9w-E8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39erhgn00xdbd8vl61cj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZ9w-E8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39erhgn00xdbd8vl61cj.png" alt="CodeCast profile" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Places like CodeCast are two-fold because you can learn and create, so you can brand yourself and create content while your learning to begin building out your portfolio and increase your chances of landing your desired role!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-learn"&gt;
  &lt;/a&gt;
  What do I learn?
&lt;/h3&gt;

&lt;p&gt;That entirely depends on what career path you choose! If you want to do web development you might want to focus on things like JavaScript and a backend language like Python whereas if you want to do things like app development, you might want to learn JavaScript than focus on things like React Native!&lt;/p&gt;

&lt;p&gt;There are a ton of fields within the tech industry that require entirely different stacks, languages, and specific sets of knowledge, so do some research to figure out what you might be the most interested in. The good news is that a lot of the time, these languages overlap between fields, so you can alter your course or change your mind without having to start entirely from scratch!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-industry-itself"&gt;
  &lt;/a&gt;
  The Industry Itself
&lt;/h3&gt;

&lt;p&gt;I want to touch a little bit on the industry and the leading desire that causes a lot of people to pursue a job within it. There's a lot of conversation surrounding compensation and freedom in the tech industry. Being a developer is often seen as a very lucrative career choice, and often that is very true. The potential to earn money absolutely is there. It also is often a very flexible career choice in that companies tend to be more lenient with schedules, vacation, and where you work as opposed to other industries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-2-1y7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hnnkmg3l76enhelyvw8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-2-1y7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hnnkmg3l76enhelyvw8.jpg" alt="tech" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All that being said, I’ve known people who have entered this industry for that reason alone, and I would discourage you from only changing career paths for the dollars signs. Money is a great motivating factor and it is important, but the industry itself is competitive, a lot of work, and requires a certain type of person to be successful as you have to get really comfortable with being uncomfortable. &lt;/p&gt;

&lt;p&gt;Learning to code was extremely frustrating at times. JavaScript in particular had a way of really messing with my self-confidence and making me question everything. However, despite the downs, there were (and are) a lot of things I absolutely love about this industry. Firstly, it’s a lot more creative of a role than one would expect, even if you’re hiding away in the backend. You can give 10 devs the same problem and they would likely all solve it differently. Languages have syntactical rules, but the implementation requires creativity, problem-solving, and ingenuity, and that’s half the fun!&lt;/p&gt;

&lt;p&gt;All in all, there are a lot of pros and cons, as there are with any industry, but if you’re interested in learning to code, just start! You’ll decide how you feel along the way, it’s a valuable skill regardless of which path you take, and you get to be a part of a fantastic online community!&lt;/p&gt;

&lt;p&gt;For more of my content, follow me on like &lt;a href="https://twitter.com/amyeoulton"&gt;Twitter&lt;/a&gt; &amp;amp; &lt;a href="https://www.codecast.io/users/amy"&gt;CodeCast&lt;/a&gt;! You can also read my last blog on branding yourself as a developer &lt;a href="https://dev.to/amyoulton/how-to-brand-yourself-as-a-developer-397b"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Downloading Youtube Videos with Pytube and Shellmarks
</title>
      <author>Steve Hannah</author>
      <pubDate>Wed, 22 Dec 2021 20:33:24 +0000</pubDate>
      <link>https://dev.to/shannah/downloading-youtube-videos-with-pytube-and-shellmarks-4igm</link>
      <guid>https://dev.to/shannah/downloading-youtube-videos-with-pytube-and-shellmarks-4igm</guid>
      <description>&lt;p&gt;Pytube is a great little Python utility for downloading videos from youtube as .mp4 files. It has a command-line interface that makes downloading videos as simple as entering the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pytube https://www.youtube.com/watch?v&lt;span class="o"&gt;=&lt;/span&gt;....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the URL with the Youtube URL of the video you want to download.&lt;/p&gt;

&lt;p&gt;To make things even easier, I wrote a shellmarks wrapper script for this that provides an intuitive GUI form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69M2QjvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aewx5njkcatm9r6k8p8p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69M2QjvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aewx5njkcatm9r6k8p8p.png" alt="Shellmarks dialog for pytube" width="404" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simply paste in the URL and press “Download”, and it will download the video to your “Downloads” directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Pytube installation instructions can be found &lt;a href="https://pytube.io/en/latest/user/install.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The TLDR of the install instructions, if you have Python 3 already installed, is to open Terminal and enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pytube
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If pip happens to be the python2 version, you can try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install &lt;/span&gt;pytube
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;instead.&lt;/p&gt;

&lt;p&gt;The Shellmarks installation instructions can be found here&lt;/p&gt;

&lt;p&gt;The TLDR of the install instructions, if you have npm installed, is to open Terminal and enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; shellmarks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have uploaded the shellmarks wrapper script here&lt;/p&gt;

&lt;p&gt;To install it in shellmarks, begin by opening shellmarks by opening Terminal and running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;shellmarks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After shellmarks opens, open the menu in the upper right corner and select “Import Script from URL”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ROyWmlnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vomkwshepz6qbz33p6el.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROyWmlnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vomkwshepz6qbz33p6el.png" alt="Shellmarks menu" width="194" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will the be prompted to enter the URL to the script:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FJ7tMJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ga97ryg7rgvdh4kqxc34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FJ7tMJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ga97ryg7rgvdh4kqxc34.png" alt="Shellmarks import script dialog" width="473" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The URL to the raw script is &lt;/p&gt;

&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/shannah/shellmarks/master/sample-scripts/pytube.sh"&gt;https://raw.githubusercontent.com/shannah/shellmarks/master/sample-scripts/pytube.sh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste that URL into the field and press “OK”.&lt;/p&gt;

&lt;p&gt;This will install the script and refresh the shellmarks catalog. You should now see an entry as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFMrvAG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93c7dntqnx6ahfi6vfz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFMrvAG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93c7dntqnx6ahfi6vfz1.png" alt="Shellmarks catalog entry for pytube" width="768" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press “Run” to run the script. You’ll see the dialog prompting you for the video URL you want to download.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhSRFaNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmm5wzbjxlb42f0mo2op.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhSRFaNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmm5wzbjxlb42f0mo2op.png" alt="Shellmarks dialog for running pytube" width="404" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste any youtube URL in here and press “Download”. You’ll be able to see the progress of the download in the terminal you used to open shellmarks. When the download is complete, it will open the video in your preferred movie player.&lt;/p&gt;

&lt;p&gt;NOTE: This script was developed for MacOS, and would need to be modified slightly to work on Linux or Windows.&lt;/p&gt;

&lt;p&gt;You can now access this script directly from within Shellmarks anytime. If you want to run it directly from the command-line you could also simply run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;shellmarks pytube
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pytube.io/en/latest/"&gt;Pytube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shannah/shellmarks"&gt;Shellmarks Github Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shannah.github.io/shellmarks/manual/"&gt;Shellmarks Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@alexbemore?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Alexander Shatov&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/videos?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>bash</category>
      <category>devops</category>
    </item>
    <item>
      <title>Remix.run - Back to basics</title>
      <author>Mathias Nilsson</author>
      <pubDate>Wed, 22 Dec 2021 20:31:52 +0000</pubDate>
      <link>https://dev.to/edgesoft/remixrun-back-to-basics-2p55</link>
      <guid>https://dev.to/edgesoft/remixrun-back-to-basics-2p55</guid>
      <description>&lt;p&gt;This is my first blogpost ever, and I never actually thought I would write one. Remix.run is the root cause, because it got me so  excited that I could not resist. Let me explain!&lt;/p&gt;

&lt;p&gt;I started programming for the web in the days of ASP (Active server pages). It was done using Visual Basic syntax so it was very basic. The form post to server and response was simple even though we didn't do the fancy Javascript stuff we are doing today. &lt;/p&gt;

&lt;p&gt;Netscape navigator was the ruler among browsers then.&lt;br&gt;
I moved from Perl cgi to ASP to JSP and Java Servlets and then to PHP. The simple api remained, even though JQuery started to be more and more popular. I used handcrafted XMLHttpRequest then. Even before Jesse James Garrett coined the term AJAX. &lt;/p&gt;

&lt;p&gt;Lately I've been doing fontend with GWT and now React for the last couple of years. I love React but doing form, collecting server state and keeping state in sync on the client has been very challenging. I've used Redux, Jotai, Cerebral JS, Overmind JS (favorite) to name a few state libraries.&lt;/p&gt;

&lt;p&gt;When I first heard of Remix.run I though "this sound interesting". I follow &lt;a class="mentioned-user" href="https://dev.to/ryanflorence"&gt;@ryanflorence&lt;/a&gt; &lt;a class="mentioned-user" href="https://dev.to/mjackson"&gt;@mjackson&lt;/a&gt; and &lt;a class="mentioned-user" href="https://dev.to/kentcdodds"&gt;@kentcdodds&lt;/a&gt; so the tweets kept rolling in. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3C-R4GV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1340526634634338305/pu/img/L8N2fa8kTQd00SIu.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WraPgiGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1344410501309030403/L2rNpO6h_normal.jpg" alt="Ryan Florence profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ryan Florence
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/ryanflorence"&gt;@ryanflorence&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The foundation of &lt;a href="https://twitter.com/remix_run"&gt;@remix_run&lt;/a&gt; is starting to feel solid, we've changed and added a couple core assumptions about how we want a Remix app to work. Now we can start building out the developer experience.&lt;br&gt;&lt;br&gt;I can smell the stable release in early 2021 👃 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:20 AM - 20 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1340527598334398464" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1340527598334398464" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1340527598334398464" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--F10qIddC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1095819845382299649/zG-2_UHS_normal.jpg" alt="MICHAEL JACKSON 🎄 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        MICHAEL JACKSON 🎄
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/mjackson"&gt;@mjackson&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      This is an excellent intro to some of the core concepts in Remix:&lt;br&gt;- server rendering, always&lt;br&gt;- entry points&lt;br&gt;- data loading&lt;br&gt;- route-based styling&lt;br&gt;- http caching&lt;br&gt;There is SO MUCH more to cover, but these are the fundamentals. Enjoy! 😅 &lt;a href="https://t.co/xqSBNXMiU5"&gt;twitter.com/remix_run/stat…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:40 PM - 22 Oct 2020
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Remix 💿
          &lt;/span&gt;
          @remix_run
        &lt;/div&gt;
        📣 Remix Run Beta starts next Wed., October 28th 😀

Join the newsletter so you don't miss it https://t.co/ujxcEirFXA, beta licenses will me limited.

Here's an overview of some of the basic features, check it out 👇

https://t.co/mvLmcKAHZI
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1319302624450019328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1319302624450019328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1319302624450019328" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I bought a license when Remix.run was still a paid product and to be honest, I didn't do anything with it. It was great but I'm sorry to say I've bought to many courses/products that just collected virtual dust. &lt;/p&gt;

&lt;p&gt;My daughter started a hobby making clay earrings and one night I said "I can build a website for you if you like". I didn't think she would be excited but a promise is a promise. That's when I really took Remix.run for a spin.&lt;br&gt;
I fell in love with Remix right away. To have the loader and action in the same file as my Component felt like doing what I did from the start but even simpler. The productivity using Remix.run is just insane.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;I have never moved this fast to prod. Mongodb, Vercel &amp;amp; Stripe in 1.5 weeks. Remix is soo productive&lt;/p&gt;— Mathias Nilsson (@edgesofts) &lt;a href="https://twitter.com/edgesofts/status/1463288740353388544?ref_src=twsrc%5Etfw"&gt;November 23, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;Here are the main concepts of Remix that I just love.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work with, not against, the foundations of the web: Browsers, HTTP, and HTML.&lt;/li&gt;
&lt;li&gt;Everything you need in a single file with easy to read code. If a loader get's complex just put it in your own file.&lt;/li&gt;
&lt;li&gt;No need to overthink over/underfetching of data. Just filter what you want to reach the client.&lt;/li&gt;
&lt;li&gt;SSR out of the box&lt;/li&gt;
&lt;li&gt;Deploy to whatever cloud service you like using built in adapters from Remix or roll your own.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Head over to Remix.run and get started. The docs are superclear and easy to follow. &lt;a href="https://remix.run/docs/en/v1"&gt;https://remix.run/docs/en/v1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Head over to Discord and get help  immediately from the very friendly community. &lt;a href="https://discord.gg/AwHQjyVK"&gt;https://discord.gg/AwHQjyVK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking forward to 2020 of awesome Remix apps.&lt;/p&gt;

&lt;p&gt;Next blog post will be about how I ported a fairly large C# angularjs app to Remix!&lt;/p&gt;

</description>
      <category>react</category>
      <category>programming</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Data Types, Variables and Constants in C++</title>
      <author>Fatih Küçükkarakurt</author>
      <pubDate>Wed, 22 Dec 2021 20:11:48 +0000</pubDate>
      <link>https://dev.to/fkkarakurt/data-types-variables-and-constants-in-c-10a3</link>
      <guid>https://dev.to/fkkarakurt/data-types-variables-and-constants-in-c-10a3</guid>
      <description>&lt;p&gt;We continue our C++ tutorial series. If you haven't read the introduction, click the link below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/fkkarakurt/c-for-beginners-2a0p"&gt;C++ For Beginners&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;All variables to be used in C++ must be declared and introduced to the program before they are used. During this declaration, the data type of the variable must also be determined. &lt;/p&gt;

&lt;p&gt;The basic usage is shown as: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;datatype&amp;gt; &amp;lt;name of variable&amp;gt;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The basic data types commonly used in C++ are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;They are used to define Integers&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt;    |&lt;code&gt;&amp;lt;long&amp;gt;&lt;/code&gt;|&lt;code&gt;&amp;lt;short&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;long&amp;gt;&lt;/code&gt; data types occupy 4 bytes of memory, and the &lt;code&gt;&amp;lt;short&amp;gt;&lt;/code&gt; data types occupy 2 bytes.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;They are used to define decimal numbers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;double&amp;gt;&lt;/code&gt;|&lt;code&gt;&amp;lt;long double&amp;gt;&lt;/code&gt;|&lt;code&gt;&amp;lt;float&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;double&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;long double&amp;gt;&lt;/code&gt; data types occupy 8 bytes of memory, while the &lt;code&gt;&amp;lt;float&amp;gt;&lt;/code&gt; data types occupy 4 bytes.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;They are used to identify an alphabetic character or strings of characters&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each character occupies 1 byte of memory.&lt;/p&gt;



&lt;p&gt;You can review the table below for the data types used in C++.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S4PqNxK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/khj93r3qm84lb8808zdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S4PqNxK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/khj93r3qm84lb8808zdl.png" alt="img1" width="855" height="665"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#declaration-of-variable-data-type"&gt;
  &lt;/a&gt;
  Declaration of Variable Data Type
&lt;/h2&gt;

&lt;p&gt;To declare the data type of the variable to be used in C++, a definition is made as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;datatype&amp;gt; &amp;lt;name of variable&amp;gt;;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is possible to change the content of a variable by assigning a specific value anywhere in the program. Often, however, the data type of the variable is determined from the outset, while it is desirable to have a value as well.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;datatype&amp;gt; &amp;lt;name of variable&amp;gt; = &amp;lt;value&amp;gt;;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;32.95&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we are going to use more than one variable in our program, we can define these variables by writing them side by side, provided that they are of the same type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lines where the variable data type is declared, of course, again "&lt;code&gt;;&lt;/code&gt;" must end with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

   &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"Smallest Number: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
   &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"Largest Number: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;Smallest&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;Largest&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variable-naming-conventions"&gt;
  &lt;/a&gt;
  Variable Naming Conventions
&lt;/h2&gt;

&lt;p&gt;There are some important rules to consider when defining a variable name in C++. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++ is case sensitive. e.g;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;Letter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;LETTER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All three of the above statements describe different variables. Therefore, we must be very careful when using lowercase and uppercase letters in variable names.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No symbols should be used in variable names, except for the numbers, lowercase alphabetic characters, and uppercase alphabetic characters in the table above. However, the underscore (&lt;code&gt;_&lt;/code&gt;) character is excluded from this scope and can be used in variable names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable names must begin with a letter or an underscore (&lt;code&gt;_&lt;/code&gt;) character, never with a number, symbol, or symbol.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;_num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The name of a variable can be up to 255 characters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Space characters should not be used in variable names. However, the underscore (&lt;code&gt;_&lt;/code&gt;) character can be used instead of a space.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;int summer_of_sixtynine;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++-specific keywords cannot be used in variable names. These words are given in the table below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQyEyJLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/fv5gd6mg9ef0sbgt1qg6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQyEyJLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://community.codenewbie.org/remoteimages/uploads/articles/fv5gd6mg9ef0sbgt1qg6.png" alt="img2" width="743" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Variable definitions can be made for different purposes in C++. Although various types of variables are used in C++ programs, for now we will consider 2 types of variables that are frequently used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#local-variables"&gt;
  &lt;/a&gt;
  Local Variables:
&lt;/h3&gt;

&lt;p&gt;If there is more than one function in the program, it is the type of variable that can only be valid in the function it is defined in. Such variables must be enclosed in &lt;code&gt;{ }&lt;/code&gt; signs that indicate function boundaries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-variables"&gt;
  &lt;/a&gt;
  Global Variables:
&lt;/h3&gt;

&lt;p&gt;It is the variable type that can be valid in all functions in the program. Such variables must be placed outside of the &lt;code&gt;{ }&lt;/code&gt; signs that specify function boundaries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-variables"&gt;
  &lt;/a&gt;
  Static Variables:
&lt;/h3&gt;

&lt;p&gt;When a locally defined variable in a function is required to remain constant and not change if the function is called repeatedly as long as the program is running, that variable should be defined as a static variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constants"&gt;
  &lt;/a&gt;
  Constants
&lt;/h2&gt;

&lt;p&gt;Constants are program components whose value does not change from the beginning to the end of the program. Constants with the following data types can be used in C++:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integer Constants&lt;/li&gt;
&lt;li&gt;Decimal Constants&lt;/li&gt;
&lt;li&gt;Character Constants&lt;/li&gt;
&lt;li&gt;String Constants&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#integer-constants"&gt;
  &lt;/a&gt;
  Integer Constants
&lt;/h3&gt;

&lt;p&gt;There are three types: '&lt;code&gt;int&lt;/code&gt;' (integer), '&lt;code&gt;short&lt;/code&gt;' (short integer) and '&lt;code&gt;long&lt;/code&gt;' (long integer). Let's take 1995 as an example and explain the job of defining the type of an integer in this example.&lt;/p&gt;

&lt;p&gt;To indicate which type a constant belongs to, a character is added to the end of that constant to indicate its type. If a numeric expression does not have any characters at the end, the type of that expression is '&lt;code&gt;int&lt;/code&gt;'. In this case, the expression 1995 in our example is an integer of type '&lt;code&gt;int&lt;/code&gt;'. To designate this expression as type '&lt;code&gt;long&lt;/code&gt;' we need to append '&lt;code&gt;l&lt;/code&gt;' or '&lt;code&gt;L&lt;/code&gt;' character: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;1995l&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;1995L&lt;/code&gt;&lt;/strong&gt;. That way the expression now belongs to type '&lt;code&gt;long&lt;/code&gt;' and not type '&lt;code&gt;int&lt;/code&gt;' an example and explain the job of defining the type of an integer in this example.&lt;/p&gt;

&lt;p&gt;Also, integers that cross the '&lt;code&gt;int&lt;/code&gt;' type limits in the flow of the program are automatically converted to '&lt;code&gt;long&lt;/code&gt;', even if they do not have a trailing '&lt;code&gt;l&lt;/code&gt;' or '&lt;code&gt;L&lt;/code&gt;' suffix.&lt;/p&gt;

&lt;p&gt;There is a special case for the '&lt;code&gt;short&lt;/code&gt;' type. When calculating the value of an expression, it is treated like '&lt;code&gt;int&lt;/code&gt;' even though it belongs to type '&lt;code&gt;short&lt;/code&gt;'. In this case, we can say that there is no constant of type '&lt;code&gt;short&lt;/code&gt;'. Because constants within the bounds of '&lt;code&gt;short&lt;/code&gt;' are considered as type '&lt;code&gt;int&lt;/code&gt;' by C++.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decimal-constants"&gt;
  &lt;/a&gt;
  Decimal Constants
&lt;/h3&gt;

&lt;p&gt;There are three types: '&lt;code&gt;float&lt;/code&gt;' (floating decimal), '&lt;code&gt;double&lt;/code&gt;' (double decimal) and '&lt;code&gt;long double&lt;/code&gt;' (long decimal). Let's take the expression 1881.1938 as an example and explain the job of defining the type of an integer in this example.&lt;/p&gt;

&lt;p&gt;If a decimal constant does not have any characters at the end, the type of that expression is considered '&lt;code&gt;double&lt;/code&gt;'. In this case, 1881.1938 in our example is a decimal constant of type '&lt;code&gt;double&lt;/code&gt;'. To designate this expression as a type 'float' we need to append the '&lt;code&gt;f&lt;/code&gt;' or '&lt;code&gt;F&lt;/code&gt;' character: &lt;strong&gt;&lt;code&gt;1881.1938f&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;1881.1938F&lt;/code&gt;&lt;/strong&gt;. This way the expression no longer belongs to the '&lt;code&gt;double&lt;/code&gt;' type but of the '&lt;code&gt;float&lt;/code&gt;' type.&lt;/p&gt;

&lt;p&gt;Although not often used, to specify a decimal constant of type 'long double', we must append the character '&lt;code&gt;l&lt;/code&gt;' or '&lt;code&gt;L&lt;/code&gt;': &lt;strong&gt;&lt;code&gt;1881.1938l&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;1881.1938L&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#character-constants"&gt;
  &lt;/a&gt;
  Character Constants
&lt;/h3&gt;

&lt;p&gt;We know that type '&lt;code&gt;char&lt;/code&gt;' takes a value between &lt;strong&gt;-128&lt;/strong&gt; and &lt;strong&gt;+127&lt;/strong&gt; or &lt;strong&gt;0&lt;/strong&gt; and &lt;strong&gt;+255&lt;/strong&gt;. Well, since these constants are named 'characters' and have an alphabetic nature, why are we still talking about numerical expressions?&lt;/p&gt;

&lt;p&gt;Because every character used in C++ has a numeric equivalent in the **ASCII (American Standard Code for Information Interchange) **table, and these numbers, in which the character constants are kept within the specified ranges, are the ASCII equivalents of the characters used. In other words; When we talk about 97 as the character constant, we are actually talking about the character '&lt;code&gt;a&lt;/code&gt;', which is the ASCII table equivalent of 97. &lt;/p&gt;

&lt;p&gt;When using character constants, we can use the numeric equivalents of the characters. Of course, the commonly preferred usage in C++ is to use the characters themselves. However, when we are going to use the characters themselves, we must enclose these characters in single quotes (&lt;code&gt;'&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In the following lines, two variables of type char are defined and the constants &lt;strong&gt;103&lt;/strong&gt; and '&lt;code&gt;g&lt;/code&gt;' are assigned to these variables, respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;character1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;103&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;character2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;'g'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the numeric equivalent of the '&lt;code&gt;g&lt;/code&gt;' character in the &lt;strong&gt;ASCII table is 103&lt;/strong&gt;, these two lines actually mean the same thing. However, pay special attention to the fact that the '&lt;code&gt;g&lt;/code&gt;' character is written in single quotation marks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#string-constants"&gt;
  &lt;/a&gt;
  String Constants
&lt;/h3&gt;

&lt;p&gt;'&lt;code&gt;string&lt;/code&gt;' (character) literals consist of sequentially ordered strings of character literals. In C++, every expression enclosed in double quotes (&lt;code&gt;"&lt;/code&gt;) is a constant of type '&lt;code&gt;string&lt;/code&gt;'. Consider the following examples:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;“Fatih"&lt;/th&gt;
&lt;th&gt;"1995"&lt;/th&gt;
&lt;th&gt;"1920.1923"&lt;/th&gt;
&lt;th&gt;"Harvard University"&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As you can see, numeric expressions enclosed in double quotes are now a '&lt;strong&gt;&lt;code&gt;string&lt;/code&gt;&lt;/strong&gt;' constant. We can no longer do numerical operations such as addition and subtraction with them.&lt;/p&gt;

&lt;p&gt;Actually there is no type named '&lt;code&gt;string&lt;/code&gt;' in C++. The '&lt;code&gt;string&lt;/code&gt;' type occurs when the compiler treats multiple character constants as a string of characters. Accordingly, the expression "&lt;strong&gt;&lt;code&gt;Fatih&lt;/code&gt;&lt;/strong&gt;" would actually work like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;'F' 'a' 't' 'i' 'h'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The compiler treats all these characters as a string and puts them together by adding the '&lt;strong&gt;&lt;code&gt;/0&lt;/code&gt;&lt;/strong&gt;' character to the end.&lt;/p&gt;

&lt;p&gt;Constants are defined with the word &lt;code&gt;const&lt;/code&gt; in the C++ program, and the following definitions are made to declare the data type of the invariant to be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Age: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" Gender: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="nl"&gt;Age:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="n"&gt;Gender&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#type-conversion"&gt;
  &lt;/a&gt;
  Type Conversion
&lt;/h2&gt;

&lt;p&gt;Variables or constants in our programs can be of different types. If this is the case, it is important what type of calculation result will be in our mathematical operations. Therefore, type conversion must be done to avoid an error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"a value= "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"b value= "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"c value= "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.25&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above application:&lt;/p&gt;

&lt;p&gt;In the first operation, we divide the variable named &lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt; by an integer value; The decimal point is ignored and the result is assigned to variable &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; as an integer.&lt;/p&gt;

&lt;p&gt;In the second operation, we divide the variable named &lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt;, which is an integer, by a decimal value; The part after the comma is taken into account and the result is assigned to the variable &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; as a decimal value.&lt;/p&gt;

&lt;p&gt;In the third operation, we first convert the variable named &lt;code&gt;&amp;lt;num&amp;gt;&lt;/code&gt;, which is an integer, into a variable of type &lt;code&gt;&amp;lt;float&amp;gt;&lt;/code&gt;. Next, we divide the variable that is now &lt;code&gt;&amp;lt;float&amp;gt;&lt;/code&gt; by an integer value; the result is assigned as a decimal value to the variable &lt;code&gt;&amp;lt;c&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;If you've come this far, congratulations. You are now familiar with the data types, constants, and variables of the C++ programming language. C++ is a language with so many features to explore. So never forget to learn, wonder and research.&lt;/p&gt;

&lt;p&gt;It is a difficult language as well as a fun one. But if you enjoy it, C++ will give you more.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>cpp</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Important Math methods</title>
      <author>Pritom Deb</author>
      <pubDate>Wed, 22 Dec 2021 20:11:27 +0000</pubDate>
      <link>https://dev.to/pritomdbhaskar/important-math-methods-1od0</link>
      <guid>https://dev.to/pritomdbhaskar/important-math-methods-1od0</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. &lt;u&gt;Math.min&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.min( ) method is used to find the lowest value in a list of arguments. Have a look at the example below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xI5EbmQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbdvrilrlw7owqi2p8st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xI5EbmQW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbdvrilrlw7owqi2p8st.png" alt="Image description" width="615" height="39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;u&gt;Math.max&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.max( ) method is used to find the highest value in a list of arguments. Have a look at the example below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--th2pXqOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v1nlwau4j0cn50ujoe7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--th2pXqOL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v1nlwau4j0cn50ujoe7.png" alt="Image description" width="621" height="40"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;u&gt;Math.round&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.round(x) method returns the value of a number x rounded to its nearest integer:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1_2MlNNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2x718g9bqbl6n6oy0rx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1_2MlNNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2x718g9bqbl6n6oy0rx.png" alt="Image description" width="601" height="61"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;u&gt;Math.sqrt&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.sqrt(x) is used to return the square root of a number x. Have a look at the example below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyRcRgUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijzbth4q64955h4haewq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyRcRgUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijzbth4q64955h4haewq.png" alt="Image description" width="581" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;u&gt;Math.pow&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.pow(x, y) returns the value of x to the power of y. Let’s have a look at the below example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vtiUpbxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7w3js2izpj6m6x4lfrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtiUpbxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7w3js2izpj6m6x4lfrt.png" alt="Image description" width="604" height="39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;u&gt;Math.floor&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.floor(x) returns the value of x rounded down to its nearest integer:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5e9rObt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqdkhnn8torn7u3nbgvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5e9rObt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqdkhnn8torn7u3nbgvb.png" alt="Image description" width="596" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. &lt;u&gt;Math.random&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.random() returns a random number between 0 and 1. It’s often used to extract random elements from an array.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCwno26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ycekkbkp6jxeym4fanz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCwno26P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ycekkbkp6jxeym4fanz.png" alt="Image description" width="594" height="66"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. &lt;u&gt;Math.ceil&lt;/u&gt;( )&lt;/strong&gt;&lt;br&gt;
The Math.ceil(x) returns the value of x rounded up to its nearest integer:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QkktwZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc0yr642l08vgo5nhcx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QkktwZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vc0yr642l08vgo5nhcx7.png" alt="Image description" width="625" height="39"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Data Visualization Libraries for Python</title>
      <author>images.cv</author>
      <pubDate>Wed, 22 Dec 2021 20:01:53 +0000</pubDate>
      <link>https://dev.to/imagescv/data-visualization-libraries-for-python-5f09</link>
      <guid>https://dev.to/imagescv/data-visualization-libraries-for-python-5f09</guid>
      <description>&lt;p&gt;Data visualization is an important part of data analysis because it helps us to understand the data better. &lt;/p&gt;

&lt;p&gt;There are many different types of visualizations, but one popular type is a chart or graph that displays information in the form of symbols, shapes, colors etc. &lt;/p&gt;

&lt;p&gt;Data visualization libraries can make this process easier for you by providing tools and functions for creating charts and graphs from your dataset. &lt;/p&gt;

&lt;p&gt;In this blog post, we will discuss five interesting Python data visualization libraries which should provide you with some inspiration when it comes to building your next project!&lt;/p&gt;




&lt;p&gt;The first library on our list is &lt;a href="https://matplotlib.org/"&gt;matplotlib&lt;/a&gt;. &lt;strong&gt;Matplotlib&lt;/strong&gt; is a very popular library and it provides functions for creating basic charts and graphs. It also has support for advanced features like adding legends, annotations, and customizing the look and feel of your visualization. If you are just getting started with data visualization or want to create simple charts and graphs, then matplotlib is a good choice.&lt;/p&gt;




&lt;p&gt;Next up is &lt;a href="https://seaborn.pydata.org/"&gt;seaborn&lt;/a&gt;. &lt;strong&gt;Seaborn&lt;/strong&gt; is built on top of matplotlib and provides additional functionality for creating more sophisticated visualizations. For example, seaborn has built-in support for statistical plots which can be useful for understanding complex datasets. Additionally, seaborn offers a number of options for customizing your visualization, including features for formatting your text and applying a color gradient to your chart.&lt;/p&gt;




&lt;p&gt;The third library on our list is &lt;a href="https://ggplot2.tidyverse.org/reference/ggplot.html"&gt;ggplot&lt;/a&gt;. &lt;strong&gt;Ggplot&lt;/strong&gt; provides a different way of creating visualizations by using the concept of “grammar of graphics” from the R programming language (popular statistical software). This allows you to create more custom visualizations with less effort than other libraries like matplotlib or seaborn. There are some downsides associated with this approach though: data scientists new to Python might find it difficult to learn, and there aren’t as many built-in options for styling your charts/graphs compared to Seaborn and Matplotlib. However, if you want full control over every aspect of your visualization, then ggplot is a good choice.&lt;/p&gt;




&lt;p&gt;Next, we have &lt;a href="https://plotly.com/python/"&gt;plotly&lt;/a&gt;. &lt;strong&gt;Plotly&lt;/strong&gt; is a powerful library that provides extensive support for creating interactive visualizations. This means that you can not only create static charts and graphs, but also add features like tooltips, zooming, and scrolling to help users explore your data in more detail. Additionally, plotly allows you to share your visualizations online which can be helpful for displaying your work to others or embedding them into a website or blog post.&lt;/p&gt;




&lt;p&gt;Finally, we have &lt;a href="http://docs.bokeh.org/en/latest/"&gt;bokeh&lt;/a&gt;. &lt;strong&gt;Bokeh&lt;/strong&gt; is another library focused on creating interactive visualizations. However, it differs from plotly in that it specializes in creating beautiful graphics with minimal code requirements. If you are looking for an easy-to-use library that will help you create stunning visualizations without spending too much time on the details, then bokeh is a good choice.&lt;/p&gt;




&lt;p&gt;So, which library is right for you? It depends on what type of data you are working with and what kind of visualization you want to create. If you are just getting started or need a basic chart or graph, then matplotlib is probably the best option. However, if you want more control over your visuals or need support for specific types of graphs, then seaborn, ggplot, plotly, or bokeh might be a better choice. Experiment with different libraries until you find one that fits your needs and makes data visualization easy and fun!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>imageprocessing</category>
      <category>computervision</category>
    </item>
    <item>
      <title>Dec 22: Dev Holidays Guide ⛄️</title>
      <author>Helen Griffin</author>
      <pubDate>Wed, 22 Dec 2021 19:56:05 +0000</pubDate>
      <link>https://dev.to/helengriffinjr/dec-22-dev-holidays-guide-338j</link>
      <guid>https://dev.to/helengriffinjr/dec-22-dev-holidays-guide-338j</guid>
      <description>&lt;p&gt;Bah Humbug Tips are my own way of coping &amp;amp; recovering from burnout &amp;amp; holiday stress.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todays-bah-humbug-tip-of-the-day"&gt;
  &lt;/a&gt;
  🎄  Today's Bah Humbug Tip of the Day.
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O7kx1VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455987093776240641/4OWjPQ-Z_normal.jpg" alt="State Of Devs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        State Of Devs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stateofdevs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ⛄️  &lt;a href="https://twitter.com/hashtag/BahHumbugTip"&gt;#BahHumbugTip&lt;/a&gt;: Remind yourself what’s important. (1/2) 👇🏾
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:02 PM - 22 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1473670186670563333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1473670186670563333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1473670186670563333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h6&gt;
  &lt;a href="#todays-options"&gt;
  &lt;/a&gt;
  🎁 Today's Options
&lt;/h6&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkcaprSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHOGShvVQAM6cXA.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--_O7kx1VL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455987093776240641/4OWjPQ-Z_normal.jpg" alt="State Of Devs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        State Of Devs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @stateofdevs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🤔  What are my options?&lt;br&gt;&lt;br&gt;❏ You decide what matters.&lt;br&gt;&lt;br&gt;❏ Cherish moments that made you resilient, smile, &amp;amp; laugh.&lt;br&gt;&lt;br&gt;❏ It’s okay to create new traditions or give this season new meaning.&lt;br&gt;&lt;br&gt;🎄  &lt;a href="https://twitter.com/hashtag/BahHumbugTip"&gt;#BahHumbugTip&lt;/a&gt; 🎁 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:02 PM - 22 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1473670188184702982" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1473670188184702982" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1473670188184702982" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;You can find more tips here &amp;amp; on &lt;a href="https://twitter.com/stateofdevs"&gt;Twitter&lt;/a&gt;. Let me know in the comments if any of these tips helps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're struggling w/ burnout &amp;amp; open to sharing your story, please &lt;a href="https://stateofdevs.com/helps/dev"&gt;take the State Of Devs survey&lt;/a&gt;. 🗳 Thanks!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>stateofdevs</category>
      <category>bahhumbugtip</category>
      <category>mentalhealth</category>
      <category>tips</category>
    </item>
    <item>
      <title>After 1 year working on my app, I'm giving away a free month of personal coaching for creators and founders 🎉</title>
      <author>Joel Patrizio</author>
      <pubDate>Wed, 22 Dec 2021 19:53:53 +0000</pubDate>
      <link>https://dev.to/joelpatrizio/finally-releasing-my-app-and-giving-away-a-free-month-of-coaching-for-creators-and-founders-1ljn</link>
      <guid>https://dev.to/joelpatrizio/finally-releasing-my-app-and-giving-away-a-free-month-of-coaching-for-creators-and-founders-1ljn</guid>
      <description>&lt;p&gt;TL;DR: check it out &lt;a href="https://www.goalswon.com/deals/new-year-gift"&gt;here&lt;/a&gt;, use the coupon code NEWYEAR22&lt;/p&gt;

&lt;p&gt;Hi everyone! I'm Joel, the founder of &lt;a href="https://www.goalswon.com/"&gt;GoalsWon&lt;/a&gt;, masters in Computer Science and also studied psychology.&lt;/p&gt;

&lt;p&gt;After a year of iterating the app with real clients, we are now celebrating our full release! 🎉&lt;/p&gt;

&lt;p&gt;To mark this milestone and as it’s the new year, we’re offering &lt;strong&gt;a free month of personal coaching&lt;/strong&gt; to start 2022 on a high note!&lt;/p&gt;

&lt;p&gt;To take advantage of this offer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the our &lt;a href="https://www.goalswon.com/deals/new-year-gift"&gt;landing page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click Redeem Your Free 30 Day Pass&lt;/li&gt;
&lt;li&gt;Enter the promo code NEWYEAR22&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0IOQ0rPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doi5m5o5tg8s1nuwjhwy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0IOQ0rPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doi5m5o5tg8s1nuwjhwy.png" alt="GoalsWon logo" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.goalswon.com/"&gt;GoalsWon&lt;/a&gt; connects you with an experienced human coach giving you personalized accountability for your projects, your health, your life.&lt;/p&gt;

&lt;p&gt;Set your goals and habits that drive you to your long term targets. Your coach will review results and keep you accountable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f94vUu1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45hbw2f3ia5v2k6kb8ms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f94vUu1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45hbw2f3ia5v2k6kb8ms.png" alt="How it works 1" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SMbYkAgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e5tzf8wuxcm8ytf91as.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMbYkAgc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e5tzf8wuxcm8ytf91as.png" alt="How it works 2" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pzlL7smT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk4jowjinka9bzew6shs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzlL7smT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk4jowjinka9bzew6shs.png" alt="How it works 3" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How it works: you’ll be assigned an accountability coach from our team who you’ll connect with in the app.&lt;/p&gt;

&lt;p&gt;Your coach, an experienced accountability professional, will get to know you, your background and the areas you'd like to work on, agreeing short and longer term targets. Then your day-to-day support begins:    &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each day you'll be prompted to enter your top daily goals. &lt;/li&gt;
&lt;li&gt;At the end of the day, you mark which goals and habits you accomplished with any notes, pictures or videos. &lt;/li&gt;
&lt;li&gt;Your coach will check in to see how you did, give you feedback and help plan the next steps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;They'll also help you implement science based behaviour techniques to drive lasting change.&lt;br&gt;
You can use it to keep track of your daily goals and exchange feedback, advice or support with your assigned coach.&lt;/p&gt;

&lt;p&gt;I’d love to hear your thoughts!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.goalswon.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--687SSBnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj7mhecuy44x0stlcxh3.png" alt="New Year offer" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>startup</category>
      <category>career</category>
      <category>management</category>
    </item>
    <item>
      <title>Techniques for Writing Cleaner JavaScript with ES6+ (How many do you know? 💪)</title>
      <author>Emmanuil B.</author>
      <pubDate>Wed, 22 Dec 2021 19:45:34 +0000</pubDate>
      <link>https://dev.to/emmanuilsb/techniques-for-writing-cleaner-javascript-with-es6-how-many-do-you-know--59i1</link>
      <guid>https://dev.to/emmanuilsb/techniques-for-writing-cleaner-javascript-with-es6-how-many-do-you-know--59i1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#nullish-coalescing-operator-"&gt;
  &lt;/a&gt;
  Nullish Coalescing Operator (??)
&lt;/h2&gt;

&lt;p&gt;The nullish coalescing operator is amazing when working with possibly undefined data.&lt;br&gt;
This operator tells JavaScript to return the data on its right side when its left side is null or undefined (nullish).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// returns 'default value'&lt;/span&gt;
&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This operator can be used to define a default value for possibly nullish data, avoiding verbose code checking if some data is not defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// if 'name' is not defined,&lt;/span&gt;
&lt;span class="c1"&gt;// we pass a default string into our function.&lt;/span&gt;
&lt;span class="nx"&gt;customFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#note-vs-or-operator"&gt;
  &lt;/a&gt;
  Note vs OR operator
&lt;/h3&gt;

&lt;p&gt;A lot of people think this is what the OR (||) operator does.&lt;br&gt;
However, the OR operator returns its right side when the left side is &lt;strong&gt;falsy&lt;/strong&gt;, not just nullish. This includes data such as 0 and ''.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#optional-chaining-"&gt;
  &lt;/a&gt;
  Optional Chaining (?.)
&lt;/h2&gt;

&lt;p&gt;Using optional chaining, when accessing properties, if any property reference is nullish, the expression returns undefined instead of causing an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;property1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;P1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// returns undefined and doesn't cause an error&lt;/span&gt;
&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property2&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also works when calling functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// will call 'customFunc' if it exists on 'object',&lt;/span&gt;
&lt;span class="c1"&gt;// or returns undefined if not.&lt;/span&gt;
&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;customFunc&lt;/span&gt;&lt;span class="p"&gt;?.()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Optional chaining can be used to avoid having a conditional statement every time there is some data that can be possibly undefined, making your code significantly cleaner.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bulb-tip-the-nullish-coalescing-and-optional-chaining-operators-are-best-used-with-typescript-since-youll-know-exactly-when-to-use-them"&gt;
  &lt;/a&gt;
  💡 Tip: The nullish coalescing and optional chaining operators are best used with TypeScript, since you'll know exactly when to use them.
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#logical-and-shortcircuit-evaluation"&gt;
  &lt;/a&gt;
  Logical AND Short-circuit Evaluation
&lt;/h2&gt;

&lt;p&gt;When using the AND (&amp;amp;&amp;amp;) operator, the right side expression is only evaluated if the first value is truthy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// returns 'this'&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Short-circuiting with the &amp;amp;&amp;amp; operator allows you to evaluate a condition before you call a function.&lt;br&gt;
This way, you can avoid the need to write a verbose if statement before calling something.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// calls func() if 'variable' is true&lt;/span&gt;
&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#includes"&gt;
  &lt;/a&gt;
  Includes()
&lt;/h2&gt;

&lt;p&gt;Array.includes() is a way of checking if an array contains something.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be used to as a way of avoiding multiple conditional checks, shortening your code, as well as making it more readable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// instead of this&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;

&lt;span class="c1"&gt;// do this&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#for-of-amp-foreach"&gt;
  &lt;/a&gt;
  For Of &amp;amp; forEach()
&lt;/h2&gt;

&lt;p&gt;Looping can be done much cleaner using 'for of' and '.forEach()', rather than a traditional for loop.&lt;br&gt;
A big point for using forEach() is that it can be chained, making your code much more concise and readable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// a tiny amount of code for looping over wanted items in an array.&lt;/span&gt;
&lt;span class="c1"&gt;// can be chained further for more complicated cases.&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the downside, there are a lot of edge cases when using forEach(), such as not including empty elements and not working quite right with async/await code.&lt;br&gt;
For such cases, it's best to use 'for of', which is also pretty concise while not having as many edge cases as forEach() or 'for in'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// for performing the same function as above.&lt;/span&gt;
&lt;span class="c1"&gt;// not as concise for more complicated cases but more robust.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// or&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#spread-syntax-"&gt;
  &lt;/a&gt;
  Spread Syntax (...)
&lt;/h2&gt;

&lt;p&gt;The spread syntax has multiple uses, useful when trying to keep code concise.&lt;br&gt;
When used with arrays, it can be used to combine two arrays, or insert something in to an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// combine two arrays, inserting '3' between the two.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// newArr = [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, with objects, we can use the spread syntax to clone another object, while also being able to add new properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create a new object with the same properties as obj1 and obj2,&lt;/span&gt;
&lt;span class="c1"&gt;// while also adding another property 'newProperty'.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;property1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;property2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;newProperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// newObj = {property1: 'p1', property2: 'p2', newProperty: 'newP'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destructuring-and-the-rest-operator-"&gt;
  &lt;/a&gt;
  Destructuring and the Rest Operator (...)
&lt;/h2&gt;

&lt;p&gt;Destructuring can be used in many contexts to get distinct variables from array values or object properties.&lt;br&gt;
This is a great way of cleanly getting deeply nested object properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// getting the 'id' property from obj.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
&lt;span class="c1"&gt;// id = 1&lt;/span&gt;

&lt;span class="c1"&gt;// or we can have a custom variable name.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;idLabel&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
&lt;span class="c1"&gt;// idLabel = 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, the rest operator can be used to separate out properties from an object.&lt;br&gt;
This is useful for quickly copying an object while removing some properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// copying obj1, removing the 'unwanted' property.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;unwanted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;unwanted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
&lt;span class="c1"&gt;// newObj = {id: 1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moneybag-bonus-remove-duplicates-from-an-array"&gt;
  &lt;/a&gt;
  💰 Bonus: Remove Duplicates from an Array
&lt;/h2&gt;

&lt;p&gt;Want a quick way of removing duplicate primitive elements from an array? It's very easy with a tiny bit of code using 'new Set()'.&lt;br&gt;
Combining this with other clean code techniques can lead to some very powerful actions with minimal, yet readable, code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using set with the spread syntax to combine two arrays, removing duplicates (a union).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt; 
&lt;span class="c1"&gt;// arr3 = [1, 2, 3, 4, 5] as an array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Thanks for reading ❤️. If you enjoyed this article, please consider sharing it.&lt;br&gt;
Checkout my &lt;a href="https://github.com/EB1811"&gt;github&lt;/a&gt;, &lt;a href="https://eb1811.github.io"&gt;website&lt;/a&gt;, and other &lt;a href="https://dev.to/emmanuilsb"&gt;articles&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
