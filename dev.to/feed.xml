<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Complete Introduction to CSS Grid 📊</title>
      <author>CSS MASTER</author>
      <pubDate>Tue, 03 Aug 2021 05:21:40 +0000</pubDate>
      <link>https://dev.to/learn_css/complete-introduction-to-css-grid-joa</link>
      <guid>https://dev.to/learn_css/complete-introduction-to-css-grid-joa</guid>
      <description>&lt;p&gt; The CSS grid is a newer standard that makes it easy to build complex responsive layouts. It works by turning an HTML element into a grid, and lets you place child elements anywhere within.&lt;/p&gt;

&lt;p&gt;Life was tough before Flexbox and Grid came, centering a div was so troublesome that it became a meme.&lt;/p&gt;

&lt;p&gt;But fear no more, Flexbox and Grid have solved all our problems and things are so much easier now.&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/an-introduction-to-css-grid-layout/"&gt;Complete Introduction to CSS Grid&lt;/a&gt;&lt;/span&gt;&lt;/b&gt; 📊&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>👻 Jotai - State Simply Managed</title>
      <author>paolotiu</author>
      <pubDate>Tue, 03 Aug 2021 04:38:58 +0000</pubDate>
      <link>https://dev.to/tiu/jotai-state-simply-managed-3p2h</link>
      <guid>https://dev.to/tiu/jotai-state-simply-managed-3p2h</guid>
      <description>&lt;p&gt;As I refine my stack more and more, one of the values I look for is &lt;strong&gt;simplicity&lt;/strong&gt;.&lt;br&gt;
Simplicity allows me to move quick and iterate much faster. Jotai provides that for me.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-jotai"&gt;
  &lt;/a&gt;
  Why Jotai?
&lt;/h2&gt;

&lt;p&gt;With so many state management libraries out there, why should Jotai even be considered?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;p&gt;Jotai structures state in a &lt;strong&gt;bottom-up&lt;/strong&gt; approach which consists of atoms.&lt;br&gt;
This is contrary to the way redux/zustand structures their state (a &lt;strong&gt;top-down&lt;/strong&gt; approach).&lt;br&gt;
Your preference may vary, but the way Jotai does it is more straightforward to me.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEkTH7OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m25r6p0vrvqelns1jsc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEkTH7OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m25r6p0vrvqelns1jsc0.png" alt="Top down versus bottom up"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;Using Jotai for the first time is quick --- &lt;strong&gt;&lt;em&gt;very quick&lt;/em&gt;&lt;/strong&gt;. Actually, let me show you.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#first-create-a-primitive-atom"&gt;
  &lt;/a&gt;
  First create a primitive atom
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { atom } from 'jotai';

const countAtom = atom(0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#then-use-that-atom-anywhere-in-your-component"&gt;
  &lt;/a&gt;
  Then use that atom anywhere in your component
&lt;/h4&gt;

&lt;p&gt;It works as you would expect &lt;code&gt;useState&lt;/code&gt; to work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { countAtom } from '../jotai.ts'

function Counter() {
  const [count, setCount] = useAtom(countAtom)
  return (
    &amp;lt;h1&amp;gt;
      {count}
      &amp;lt;button onClick={() =&amp;gt; setCount(c =&amp;gt; c + 1)}&amp;gt;one up&amp;lt;/button&amp;gt;
      // ...rest of code here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Jotai was born to solve the extra re-render issue in React.&lt;br&gt;
Though most of the time this won't be an issue when using any popular state management libraries, it's still good.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#benchmarks"&gt;
  &lt;/a&gt;
  Benchmarks
&lt;/h4&gt;

&lt;p&gt;This benchmark ran my machine with Ryzen 5 2600, Windows 11 Insiders Preview inside WSL2.&lt;br&gt;
The write scores are low compared to the original benchmarks.&lt;br&gt;
Most likely it's either because I'm running it inside WSL2, or its a machine difference.&lt;br&gt;
To see the benchmarks ran on another machine go to this &lt;a href="https://github.com/pmndrs/jotai/pull/486#issuecomment-845611351"&gt;pull request&lt;/a&gt;.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;atoms&lt;/th&gt;
&lt;th&gt;ops/s&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;6 519 582&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;6 524 333&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;read&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;6 594 886&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;394 417&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;400 393&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;write&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;414 026&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#extra"&gt;
  &lt;/a&gt;
  Extra
&lt;/h3&gt;

&lt;p&gt;There are a few more things as to why you should consider Jotai.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typescript oriented&lt;/li&gt;
&lt;li&gt;No string keys needed&lt;/li&gt;
&lt;li&gt;Lightweight (2.4kB minfied + gzipped)&lt;/li&gt;
&lt;li&gt;The mascot (it's cute c'mon)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#atoms"&gt;
  &lt;/a&gt;
  Atoms
&lt;/h3&gt;

&lt;p&gt;Atoms are at the core of Jotai, the building blocks to create your state.&lt;br&gt;
I think the &lt;a href="https://docs.pmnd.rs/jotai/basics/primitives"&gt;docs&lt;/a&gt; says it best.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;State in Jotai is a set of atoms. An atom is a piece of state. Unlike useState in React, atoms are not tied to specific components.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#primitive-atoms"&gt;
  &lt;/a&gt;
  Primitive atoms
&lt;/h3&gt;

&lt;p&gt;These atoms are as simple as it gets. Just pass an initial value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jotai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countAtom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#derived-atoms"&gt;
  &lt;/a&gt;
  Derived atoms
&lt;/h3&gt;

&lt;p&gt;Derived atoms are atoms that depend on other atoms.&lt;br&gt;
Whenever the atoms they depend on changes the value of these atoms also update.&lt;/p&gt;

&lt;p&gt;There are three types of derived atoms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read-only atom&lt;/li&gt;
&lt;li&gt;Write-only atom&lt;/li&gt;
&lt;li&gt;Read-Write atom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a derived atom we must pass a read function and an optional write function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readOnlyAtom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countAtom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writeOnlyAtom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// it's a convention to pass `null` for the first argument&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `update` is any single value we receive for updating this atom&lt;/span&gt;
    &lt;span class="c1"&gt;// It can be an object, string, int, etc.&lt;/span&gt;
    &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countAtom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countAtom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readWriteAtom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countAtom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countAtom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// you can set as many atoms as you want at the same time&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;get&lt;/code&gt; is used to read other atom values. It reacts to changes of its dependencies.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;set&lt;/code&gt; is used to write to write an atom value.&lt;br&gt;
It will invoke the write function of the target atom.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;The value returned by the &lt;code&gt;atom&lt;/code&gt; function doesn't hold any state.&lt;br&gt;
It creates an atom config. We call these atoms, but it's important to know that these &lt;strong&gt;do not&lt;/strong&gt; hold any state.&lt;br&gt;
We'll see why in our next point.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#provider"&gt;
  &lt;/a&gt;
  Provider
&lt;/h3&gt;

&lt;p&gt;Provider is used to provide state for a component subtree.&lt;br&gt;
This means that we can use atoms in different locations, and they can have different values.&lt;br&gt;
Providers can be used for multiple subtrees, even nested. It works just like the React Context would.&lt;/p&gt;

&lt;p&gt;A Provider is not needed though, without it the atom will use default state it was defined with.&lt;/p&gt;

&lt;p&gt;Here's an example for different Provider situations:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/multiple-providers-xp5j7?fontsize=14&amp;amp;hidenavigation=1&amp;amp;theme=dark"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzpI10jk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit Multiple Providers"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#other-goodies"&gt;
  &lt;/a&gt;
  Other Goodies
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#atomwithstorage"&gt;
  &lt;/a&gt;
  atomWithStorage
&lt;/h3&gt;

&lt;p&gt;Jotai's minimalistic core API allows various utils to be built based on it.&lt;br&gt;
My favorite is &lt;a href="https://docs.pmnd.rs/jotai/api/utils#atom-with-storage"&gt;atomWithStorage&lt;/a&gt;.&lt;br&gt;
It allows you to persist values in &lt;code&gt;localStorage&lt;/code&gt;, &lt;code&gt;sessionStorage&lt;/code&gt;, or for React Native &lt;code&gt;AsyncStorage&lt;/code&gt;.&lt;br&gt;
I find it to be perfect for theming.&lt;/p&gt;

&lt;p&gt;The first parameter is the key within your chosen storage.&lt;/p&gt;

&lt;p&gt;The second parameter is the initial value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAtom&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jotai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;atomWithStorage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jotai/utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themeAtom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atomWithStorage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAtom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;themeAtom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;setDarkMode&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#integrations"&gt;
  &lt;/a&gt;
  Integrations
&lt;/h3&gt;

&lt;p&gt;Jotai can integrate with other popular libraries.&lt;br&gt;
Here are some notable ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pmnd.rs/jotai/integrations/query"&gt;React Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pmnd.rs/jotai/integrations/urql"&gt;URQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pmnd.rs/jotai/integrations/zustand"&gt;Zustand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pmnd.rs/jotai/integrations/redux"&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pmnd.rs/jotai/integrations/xstate"&gt;XState&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-async"&gt;
  &lt;/a&gt;
  Getting Async
&lt;/h3&gt;

&lt;p&gt;Jotai has first-class support for async. It fully leverages React Suspense.&lt;br&gt;
They have &lt;a href="https://docs.pmnd.rs/jotai/basics/async"&gt;fantastic docs&lt;/a&gt;. Check it out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Jotai is my choice for global state management. Pair it with react-query, and boom!&lt;br&gt;
You have straightforward state management all throughout. Don't be fooled though, simple does not mean powerful.&lt;/p&gt;

&lt;p&gt;How about you? What's your state management solution?&lt;br&gt;
You can &lt;a href="//mailto:me@paolotiu.com"&gt;contact me&lt;/a&gt; any time if you have questions or just wanna chat!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.pmnd.rs/jotai/introduction"&gt;Jotai Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/dai_shi"&gt;Daishi Kato - Author of Jotai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Make Laravel Facades (Tutorial)</title>
      <author>Clean Code Studio</author>
      <pubDate>Tue, 03 Aug 2021 04:10:56 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/how-to-make-laravel-facades-tutorial-10jn</link>
      <guid>https://dev.to/cleancodestudio/how-to-make-laravel-facades-tutorial-10jn</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Today we are going to learn about Laravel Facades. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Laravel has these things called facades - which we can understand as static wrappers around instances (objects) or the non-static interface traditionally used to cull on a given classes behavior."&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Out of the gate Laravel comes with several pre-defined Facades - App, Artisan, Blade, Broadcast, View, etc...&lt;/p&gt;

&lt;p&gt;Most of these Facades come hooked up with a related global helper function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples of facades that have global helpers:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The App Facade has a related &lt;code&gt;app()&lt;/code&gt; global helper function. &lt;/li&gt;
&lt;li&gt;The View Facade has a related &lt;code&gt;view()&lt;/code&gt; global helper function.&lt;/li&gt;
&lt;li&gt;The Config Facade has a related &lt;code&gt;config()&lt;/code&gt; global helper function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Go0JBT98uOw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;







&lt;h3&gt;
  &lt;a href="#how-do-we-call-a-facade"&gt;
  &lt;/a&gt;
  How do we call a Facade?
&lt;/h3&gt;




&lt;ul&gt;
&lt;li&gt;1. Open ther terminal&lt;/li&gt;
&lt;li&gt;2. Run &lt;code&gt;php artisan tinker&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;3. Add a Backslash &lt;code&gt;\&lt;/code&gt; then the given class with a facade.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;tinker&amp;gt; \DB::get('users')-&amp;gt;all();&lt;/code&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-do-we-create-our-own-custom-facades-in-laravel"&gt;
  &lt;/a&gt;
  How do we create our own custom Facades in Laravel?
&lt;/h3&gt;




&lt;ul&gt;
&lt;li&gt;1. Create a traditional &lt;strong&gt;service&lt;/strong&gt; class (A class that provides a service to our application)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Services\Information&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Info&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Example Information"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Currently to access our &lt;code&gt;Info&lt;/code&gt; class's example() method we would need to do the following.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\Services\Information&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$instance&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// outputs "Example Information"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What we want to be able to do is to access the same class with same function statically and without needing to import the entire class path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example: We want to simply be able to do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// outputs "Example Information" as well&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;1. We've created our service class&lt;/li&gt;
&lt;li&gt;2. We need to create our Facade class

&lt;ul&gt;
&lt;li&gt;That extends &lt;code&gt;Illuminate\Support\Facades\Facade&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Implements a &lt;code&gt;protected static&lt;/code&gt; function called &lt;code&gt;getFacadeAccessor()&lt;/code&gt; that returns the key in our service container that we're going to use to bind our &lt;code&gt;Info&lt;/code&gt; Service class to the Service Container.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Services\Information&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Facade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InfoFacade&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Facade&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getFacadeAccessor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Info'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;3. Now, we need to bind our &lt;code&gt;Info&lt;/code&gt; Service class to the Service Container with a key of &lt;code&gt;Info&lt;/code&gt; since &lt;code&gt;Info&lt;/code&gt; is what is returned by the &lt;code&gt;getFacadeAccessor&lt;/code&gt; method in the &lt;code&gt;InfoFacade&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Providers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Services\Information\Info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\ServiceProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppServiceProvider&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;ServiceProvider&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Register any application services.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Info'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we can resolve an instance of our &lt;code&gt;Info&lt;/code&gt; class by referencing our service container. When we retrieve something from our service container using the 'Info' key, we'll return a new &lt;code&gt;Info Class&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;InfoFacade&lt;/code&gt; references the key that is used to bind the &lt;code&gt;Info Class&lt;/code&gt; to our service container - thus it knows how to resolve the instance from our container.&lt;/p&gt;

&lt;p&gt;Now, we have the functionality set up for our Facade. With the Service class binded to the container, and the Facade class referencing the binding that returns an instance of that service class from our container, we can actually use our Facade by referencing the entire class path to our given facade.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;App\Services\Information\InfoFacade&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;example&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// outputs "Example Information"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We're close, so how do we go from needing to reference the entire class path to our facade like so &lt;code&gt;\App\Services\Information\InfoFacade::example()&lt;/code&gt; down to simply needing to call &lt;code&gt;\Info::example()&lt;/code&gt;?&lt;/p&gt;



&lt;p&gt;This step is actually extremely straight forward - we add an alias. We're simply going to create an alias to our Facade class path &lt;code&gt;\App\Services\Information\InfoFacade::class&lt;/code&gt; and that alias is going to be &lt;code&gt;\Info::class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How do we add aliases in Laravel? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. We open &lt;code&gt;config/app.php&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;2. We scroll down to our &lt;code&gt;aliases&lt;/code&gt; array. &lt;/li&gt;
&lt;li&gt;3. We add our alias.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// config/app.php&lt;/span&gt;

  &lt;span class="c1"&gt;// config settings we scroll past&lt;/span&gt;
  &lt;span class="c1"&gt;// add our 'Info' alias&lt;/span&gt;
  &lt;span class="s1"&gt;'aliases'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s1"&gt;'Info'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;App\Services\Information\InfoFacade&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="s1"&gt;'App'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\App&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s1"&gt;'Arr'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Arr&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we can open up our terminal, run &lt;code&gt;composer dumpautoload&lt;/code&gt; then run &lt;code&gt;php artisan tinker&lt;/code&gt; and execute:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tinker&amp;gt; \Info::example();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And just like that, it works. That's a Laravel Facade folks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Laravel Facades Review&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Create a service class (Ex: &lt;code&gt;Info&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;2. Create a facade class (Ex: &lt;code&gt;InfoFacade&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;3. Bind our service class to the service container with any key (Ex: bind our Info class with a key of &lt;code&gt;Info&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;4. Back in our &lt;code&gt;InfoFacade&lt;/code&gt; class extend &lt;code&gt;Illuminate\Support\Facades\Facade&lt;/code&gt; create a &lt;code&gt;protected static&lt;/code&gt; function called &lt;code&gt;getFacadeAccessor&lt;/code&gt; and return the key we bound our Service class to the service container with as a string from that function (Ex: return &lt;code&gt;Info&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;5. Open &lt;code&gt;config/app.php&lt;/code&gt; and add an alias so we can access our Facade with prettier syntax (Ex: &lt;code&gt;config/app.php&lt;/code&gt;'s &lt;code&gt;aliases&lt;/code&gt; array needs to have &lt;code&gt;'Info' =&amp;gt; App\Services\Information\InfoFacade::class&lt;/code&gt; added)&lt;/li&gt;
&lt;li&gt;6. Run &lt;code&gt;composer dumpautoload&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;7. Use &lt;code&gt;\Info::example();&lt;/code&gt; as your custom Facade.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ugpzV9XC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bamvxhq9imqbjbarrag1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ugpzV9XC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bamvxhq9imqbjbarrag1.png" alt="Laravel Facades Summarized"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#laravel-make-facades-package"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.cleancode.studio/topics/packages/laravel-make-facades"&gt;Laravel Make Facades Package&lt;/a&gt;
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;Alternatively, click that link above that says "Laravel Make Facades Package" - follow the instructions to install a package via composer and simply use the newly installed &lt;code&gt;php artisan make:facade&lt;/code&gt; artisan command. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, that - software engineers of the world - is how Laravel Facades work within Laravel as well as how to create your own. Feel free to watch the entire screencasts for a deeper dive into the details as well as walk through of the package that installs the &lt;code&gt;php artisan make:facade&lt;/code&gt; command to scaffold or generate custom facades without all of the extra leg work.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://cleancode.studio/design-patterns"&gt;Structural Design Patterns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/design-patterns"&gt;The Facade Design Pattern&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>programming</category>
      <category>php</category>
      <category>software</category>
    </item>
    <item>
      <title>SvelteKit &amp; Prisma - A match made in digital heaven</title>
      <author>Mike Nikles</author>
      <pubDate>Tue, 03 Aug 2021 04:05:42 +0000</pubDate>
      <link>https://dev.to/mikenikles/sveltekit-prisma-a-match-made-in-digital-heaven-2g0f</link>
      <guid>https://dev.to/mikenikles/sveltekit-prisma-a-match-made-in-digital-heaven-2g0f</guid>
      <description>&lt;p&gt;&lt;strong&gt;Key Takeaways&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most production applications need to persist &amp;amp; retrieve data. Prisma is a pretty genius way to achieve that.&lt;/li&gt;
&lt;li&gt;With SvelteKit, you get client &amp;amp; server-side data fetching - the best of both worlds.&lt;/li&gt;
&lt;li&gt;This all even works if JavaScript is disabled in the browser.&lt;/li&gt;
&lt;li&gt;Template GitHub repo: &lt;a href="https://github.com/mikenikles/sveltekit-prisma"&gt;https://github.com/mikenikles/sveltekit-prisma&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-you-going-to-learn"&gt;
  &lt;/a&gt;
  What are you going to learn?
&lt;/h2&gt;

&lt;p&gt;We are going to start with a default SvelteKit application. Once initialized, we will learn how to install and configure Prisma before we will use the PrismaClient to perform create, read, update &amp;amp; delete (CRUD) actions against a local SQLite database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-you-need-to-know"&gt;
  &lt;/a&gt;
  Things you need to know
&lt;/h2&gt;

&lt;p&gt;In order to get the most out of this post, I expect you are aware of the following technologies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kit.svelte.dev/"&gt;SvelteKit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-foundation"&gt;
  &lt;/a&gt;
  The foundation
&lt;/h2&gt;

&lt;p&gt;Let's start with the basics: A &lt;a href="https://kit.svelte.dev/"&gt;SvelteKit&lt;/a&gt; demo app.&lt;/p&gt;

&lt;p&gt;I recommend you first create a GitHub, GitLab or Bitbucket project and start a development environment with &lt;a href="https://www.gitpod.io/"&gt;Gitpod&lt;/a&gt;. Alternatively, you can follow along on your local computer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init svelte@next svelte-with-prisma
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When prompted, select the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Which Svelte app template?" &lt;code&gt;SvelteKit demo app&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;"Use TypeScript?" &lt;code&gt;Yes&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;"Add ESLint for code linting?" &lt;code&gt;No&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;"Add Prettier for code formatting?" &lt;code&gt;Yes&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When complete, please follow the "Next steps" listed in the terminal to install dependencies and start the SvelteKit demo app.&lt;/p&gt;

&lt;p&gt;If you've followed along so far, you can copy &amp;amp; paste the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;svelte-with-prisma
npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run dev &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's how quickly you get started with SvelteKit. In your browser, you notice the "TODOS" navigation item. If you play with this list, items are persisted on svelte.dev and deleted after a while.&lt;/p&gt;

&lt;p&gt;Next, we are going to add Prisma to persist todo items in a local SQLite database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-prisma"&gt;
  &lt;/a&gt;
  Add Prisma
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.prisma.io/"&gt;Prisma.io&lt;/a&gt; states "Prisma helps app developers build faster and make fewer errors with an open source ORM for PostgreSQL, MySQL and SQLite."&lt;/p&gt;

&lt;p&gt;From my personal experience, this statement is certainly true. Let's go and experience it for yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-amp-initialize-prisma"&gt;
  &lt;/a&gt;
  Install &amp;amp; initialize Prisma
&lt;/h3&gt;

&lt;p&gt;First things first: &lt;code&gt;npm i -D prisma&lt;/code&gt; because, well... without dependencies we won't get very far 😉.&lt;/p&gt;

&lt;p&gt;Next, we are going to initialize Prisma. For that, we use &lt;a href="https://www.npmjs.com/package/npx"&gt;&lt;code&gt;npx&lt;/code&gt;&lt;/a&gt; to execute commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;⚠️ This currently overwrites an existing &lt;code&gt;.gitignore&lt;/code&gt; file. Keep an eye on &lt;a href="https://github.com/prisma/prisma/issues/8496"&gt;8496&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This creates a &lt;code&gt;prisma&lt;/code&gt; directory at the root of the project. In it, you find the &lt;code&gt;schema.prisma&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;At this point, I recommend you install the &lt;code&gt;prisma.prisma&lt;/code&gt; VS Code extension. It adds syntax highlighting, formatting, auto-completion, jump-to-definition and linting for &lt;code&gt;.prisma&lt;/code&gt; files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-the-raw-todo-endraw-model"&gt;
  &lt;/a&gt;
  Define the &lt;code&gt;Todo&lt;/code&gt; model
&lt;/h3&gt;

&lt;p&gt;Open the &lt;code&gt;prisma/schema.prisma&lt;/code&gt; file and add the following model definition to the end of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="err"&gt;model&lt;/span&gt; &lt;span class="err"&gt;Todo&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;uid&lt;/span&gt;        &lt;span class="err"&gt;String&lt;/span&gt;  &lt;span class="err"&gt;@id&lt;/span&gt; &lt;span class="err"&gt;@default(cuid())&lt;/span&gt;
  &lt;span class="err"&gt;created_at&lt;/span&gt; &lt;span class="err"&gt;DateTime&lt;/span&gt;
  &lt;span class="err"&gt;text&lt;/span&gt;       &lt;span class="err"&gt;String&lt;/span&gt;
  &lt;span class="err"&gt;done&lt;/span&gt;       &lt;span class="err"&gt;Boolean&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Psst... How do we know what fields to define? Well, we take a peek at the &lt;code&gt;Todo&lt;/code&gt; type definition in &lt;code&gt;src/routes/todos/index.svelte&lt;/code&gt; 😉.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-a-sqlite-database"&gt;
  &lt;/a&gt;
  Configure a SQLite database
&lt;/h3&gt;

&lt;p&gt;Open the &lt;code&gt;.env&lt;/code&gt; file (that file was created by the &lt;code&gt;npx prisma init&lt;/code&gt; command earlier). In it, set the &lt;code&gt;DATABASE_URL&lt;/code&gt; to &lt;code&gt;"file:./dev.db"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We also have to open the &lt;code&gt;prisma/schema.prisma&lt;/code&gt; file to update the &lt;code&gt;datasource.db.provider&lt;/code&gt; to &lt;code&gt;sqlite&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#datasourc"&gt;the reference docs&lt;/a&gt; for more details on the above two values and what other databases are supported.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#create-the-database-and-tables"&gt;
  &lt;/a&gt;
  Create the database and tables
&lt;/h3&gt;

&lt;p&gt;We're making great progress! Let's now use the Prisma CLI to create our SQLite database and create a schema based on the &lt;code&gt;Todo&lt;/code&gt; model we defined earlier.&lt;/p&gt;

&lt;p&gt;It's easy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma db push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give that five seconds ⏳.&lt;/p&gt;

&lt;p&gt;I recommend you read through the console output, I find it highly interesting. For one, it gives us a good deal of detail about what's going on. However, it also contains the following output which is one of the reasons I'm mind-blown by Prisma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;✔ Generated Prisma Client (2.28.0) to ./node_modules/@prisma/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So much goodness! Basically, they use the &lt;code&gt;Todo&lt;/code&gt; model to auto-generate a bunch of TypeScript definitions and Javascript code which we are going to import in just a second. In other words, the "Prisma helps app developers build faster and make fewer errors" sentence on the Prisma website is not just some marketing speech, it is truly genius!&lt;/p&gt;

&lt;p&gt;Ok, I'm done being a fanboy about it, let's move on and thanks for your patience there with me 😅.&lt;/p&gt;

&lt;p&gt;One last thing, please add &lt;code&gt;prisma/dev.db&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; file since we don't want to commit the dev database to version control.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-the-raw-prismaclient-endraw-to-interact-with-the-database"&gt;
  &lt;/a&gt;
  Use the &lt;code&gt;PrismaClient&lt;/code&gt; to interact with the database
&lt;/h3&gt;

&lt;p&gt;The SvelteKit demo app nicely encapsulates all API features in the &lt;code&gt;src/routes/todos/_api.ts&lt;/code&gt; file. To be more precise, the actual CRUD logic happens at &lt;a href="https://api.svelte.dev/todos"&gt;https://api.svelte.dev/todos&lt;/a&gt;. We are going to modify the &lt;code&gt;_api.ts&lt;/code&gt; file slightly to deal with CRUD right there and use the &lt;code&gt;PrismaClient&lt;/code&gt; instead of delegating to a backend API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Move the &lt;code&gt;Todo&lt;/code&gt; type so we can reuse it&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First and foremost, let's move the &lt;code&gt;Todo&lt;/code&gt; Typescript type. By default, it's defined and used in the &lt;code&gt;src/routes/todos/index.svelte&lt;/code&gt; file. However, with the changes we're going to make to the API, we are also going to need that type in the &lt;code&gt;src/routes/todos/_api.ts&lt;/code&gt; file.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cut the &lt;code&gt;Todo&lt;/code&gt; type from &lt;code&gt;src/routes/todos/index.svelte&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Paste it below the &lt;code&gt;import&lt;/code&gt; statements in &lt;code&gt;src/routes/todos/_api.ts&lt;/code&gt;, and prefix it with &lt;code&gt;export&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Use the following import in the &lt;code&gt;src/routes/todos/index.svelte&lt;/code&gt; file: &lt;code&gt;import type { Todo } from "./_api";&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Update the API to use Prisma&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;src/routes/todos/_api.ts&lt;/code&gt; file and add the following import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember? That's the generated code I was so excited about earlier 😀.&lt;/p&gt;

&lt;p&gt;Next, we need a new instance of the &lt;code&gt;PrismaClient&lt;/code&gt; (add this below the &lt;code&gt;import&lt;/code&gt; statements):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moving right along, it's time to update the &lt;code&gt;api&lt;/code&gt; method signature to tell Typescript that the &lt;code&gt;data&lt;/code&gt; parameter is of type &lt;code&gt;Todo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Locals&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;needs to be replaced with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PATCH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're getting there 💪. In the &lt;code&gt;if&lt;/code&gt; statement right below the code we've just added, remove the &lt;code&gt;res.ok &amp;amp;&amp;amp;&lt;/code&gt; since we no longer have a &lt;code&gt;res&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Lastly, change the &lt;code&gt;return&lt;/code&gt; statement to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-test"&gt;
  &lt;/a&gt;
  Let's test
&lt;/h2&gt;

&lt;p&gt;Start your SvelteKit demo app with &lt;code&gt;npm run dev&lt;/code&gt; and navigate to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in your browser. If you use Gitpod, hold CTRL / CMD pressed and click on the &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; URL in the terminal, it'll open a new browser window with the SvelteKit demo app.&lt;/p&gt;

&lt;p&gt;Click on the "TODOS" navigation link and add a few todos, rename some, mark others as done.&lt;/p&gt;

&lt;p&gt;In a new terminal, open the Prisma Studio with &lt;code&gt;npx prisma studio&lt;/code&gt;. The studio opens in a new browser tab. Click on the &lt;code&gt;Todo&lt;/code&gt; model and validate that the data matches what you see in the SvelteKit demo app.&lt;/p&gt;

&lt;p&gt;Congratulations 🎉!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus - definitely read this&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Disable JavaScript in your browser and test the todo list again. This is how the web is supposed to work - without JavaScript!&lt;/p&gt;

&lt;p&gt;We used to develop websites like that, then we spent a decade thinking it's a great idea to move everything into JavaScript and thanks to Svelte &amp;amp; SvelteKit, we now once again develop web applications that work the way the web was intended to work.&lt;/p&gt;

&lt;p&gt;JavaScript's purpose is to enhance the web experience, not break everything if JavaScript is disabled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With a few modifications to a default SvelteKit demo app, we managed to configure Prisma to persist todo items. There is of course a lot more you can do with Prisma, and with SvelteKit for that matter. The source code at &lt;a href="https://github.com/mikenikles/sveltekit-prisma"&gt;https://github.com/mikenikles/sveltekit-prisma&lt;/a&gt; should get you a long way towards your own web app.&lt;/p&gt;

&lt;p&gt;If you found this interesting, you may also like (wow... is this an e-commerce website 😂?!) my current project called &lt;a href="https://github.com/webstonehq/webstone"&gt;Webstone&lt;/a&gt;. Webstone is a full-stack web application boilerplate with a CLI to automate tedious tasks like adding new pages, updating the database (of course it uses Prisma 😉). It's in early development, but do hit that star button on GitHub which helps me get motivated to spend more time on the project 🙏.&lt;/p&gt;

&lt;p&gt;👋&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>prisma</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>A Youtube channel for preparation and guide</title>
      <author>Kunal Garg</author>
      <pubDate>Tue, 03 Aug 2021 03:40:15 +0000</pubDate>
      <link>https://dev.to/gargkunal/a-youtube-channel-for-preparation-and-guide-m1g</link>
      <guid>https://dev.to/gargkunal/a-youtube-channel-for-preparation-and-guide-m1g</guid>
      <description>&lt;p&gt;I have a yt channel on which I done talks about the preparation guide of companies and roadmaps to new tech-stacks along with guide of tech-stacks and real life programming tutorials and master class.&lt;/p&gt;

&lt;p&gt;Many of us want to learn new tech-stack so I come with this solution&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCEnZkcgXkfTjNWF-tY1ldag"&gt;https://www.youtube.com/channel/UCEnZkcgXkfTjNWF-tY1ldag&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a look and enjoy  &lt;/p&gt;

</description>
      <category>programming</category>
      <category>computerscience</category>
      <category>career</category>
      <category>react</category>
    </item>
    <item>
      <title>Katalon TestOps — Test Orchestration and Quality Analytics Platform</title>
      <author>TestingNews</author>
      <pubDate>Tue, 03 Aug 2021 02:53:21 +0000</pubDate>
      <link>https://dev.to/katalon/katalon-testops-test-orchestration-and-quality-analytics-platform-4n8a</link>
      <guid>https://dev.to/katalon/katalon-testops-test-orchestration-and-quality-analytics-platform-4n8a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgR1Xb1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/Katalon-TestOps-%25E2%2580%2594-Test-Orchestration-and-Quality-Analytics-platform.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgR1Xb1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/Katalon-TestOps-%25E2%2580%2594-Test-Orchestration-and-Quality-Analytics-platform.png" alt="Katalon TestOps — Test Orchestration and Quality Analytics platform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;“Quality at Speed”&lt;/em&gt; movement – or delivering high-quality products in a short period – has expanded beyond the software industry: it appears in the standard playbook of companies in health care, finance, etc. This new movement pushes QA teams to continuously reinvent their software development cycle with advancing technological practices. Among those new game-changing strategies, many have chosen to focus on test orchestration and quality analytics, which are the focal point of the Katalon TestOps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-orchestration-and-the-future-of-testing"&gt;
  &lt;/a&gt;
  Test Orchestration and The Future of Testing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-1vf7zT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/1.-Test-Orchestration-and-The-Future-of-Testing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-1vf7zT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/1.-Test-Orchestration-and-The-Future-of-Testing.png" alt="Test Orchestration and The Future of Testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-rising-ground-of-shiftleft-and-shiftright"&gt;
  &lt;/a&gt;
  The Rising Ground of Shift-left and Shift-right
&lt;/h3&gt;

&lt;p&gt;As QA teams race to keep pace with the frequent changes in the industries, traditional project management models, i.e., the Waterfall approach, prove inflexible and time-consuming. It requires sacrificing either customer relevance or testing quality as the works are in sequential order and depend heavily on each other. Therefore, &lt;a href="https://www.katalon.com/resources-center/automation-testing-agile-team/"&gt;teams started to adopt efficient Agile-based approaches&lt;/a&gt;, making way for the rise of &lt;strong&gt;&lt;a href="https://www.katalon.com/resources-center/blog/shift-left-testing-approach/"&gt;“shift left”&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;“shift right” testing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These practices mean both Developers and QAs jointly test the product at every stage of the software development process (CI/CD). Instead of waiting to the end of the development cycle, shift-left testing means teams test application earlier, in much smaller units, and more frequently. On the other hand, shift-right employs testing after product release to see the operation under real-world conditions. Combining these methods has had proven success in detecting bugs earlier at a lower cost, increasing test reliability, and enhancing product quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-orchestration-magic-solution-or-problem-pitfall"&gt;
  &lt;/a&gt;
  Test Orchestration, Magic Solution or Problem Pitfall?
&lt;/h3&gt;

&lt;p&gt;While shift-left and shift-right have risen in popularity, staying effective is a challenge for some product development teams. Without a sound plan, this transformation may cost more time and money than it saves. Among the solutions to the tricky dilemma is test orchestration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.katalon.com/resources-center/blog/test-orchestration-quality-analytics/"&gt;Test orchestration&lt;/a&gt; helps schedule and manage a series of automated test components (databases, environments, etc.) during the entire workflow: from test planning, management, execution to configuration, and analytics. As it provides a holistic picture of the whole testing stage, there’s no doubt that test orchestration is among future practices to streamline and simplify the QA process. Developers and testers will have continuous, comprehensive visibility into application quality, increasing confidence to make a go/no-go release decision.&lt;/p&gt;

&lt;p&gt;However, many teams are struggling to implement orchestration effectively. As a result, the lack of the right solution hinders comprehensive test coverage and efficiency, making it harder to deliver quality software. Transitioning to test orchestration seems scary. But if taken step by step with the right fit tool, every team can use its full potential.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#katalon-testops-orchestrate-tests-amp-devops-with-full-visibility-speed-and-efficiency"&gt;
  &lt;/a&gt;
  Katalon TestOps – Orchestrate Tests &amp;amp; DevOps with Full Visibility, Speed, and Efficiency
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VG_Y_j1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/2.-Katalon-TestOps-Features.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VG_Y_j1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/2.-Katalon-TestOps-Features.png" alt="Katalon TestOps Features"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-early-test-often-test-everywhere-with-katalon-testops"&gt;
  &lt;/a&gt;
  Test Early, Test Often, Test Everywhere with Katalon TestOps
&lt;/h3&gt;

&lt;p&gt;Frequent changes in product development cycles are associated with higher risks and complexity in the software testing process. In such scenarios, using only test automation is not enough to completely address the problem. Ultimately, every QA team demands the automated configuration, coordination, and management of the system and software to achieve quality objectives with minimal issues and time.&lt;/p&gt;

&lt;p&gt;Understanding these struggles, Katalon introduces TestOps – the first, most comprehensive orchestration platform to connect the test management, planning, execution, and quality analytics of test automation and DevOps teams.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#capabilities-made-for-test-management"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Capabilities made for Test Management&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;To simplify the first pillar of the testing pipeline (centralizing data and communication), Katalon TestOps acts as a command center, connecting all data and members into one shared, tight feedback loop.&lt;/p&gt;

&lt;p&gt;Teams can perform projects with real-time dashboards for transparency, combine test cases across different frameworks and environments, among so many more. TestOps also offers various monitor and alerts functions for teams to quickly manage the coverage of requirements, test cases, and defects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#capabilities-made-for-test-planning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Capabilities made for Test Planning&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Katalon TestOps focuses on maximizing ROI and resource utilization early on in the pipeline. New features like smart test scheduler and test planning mechanism grant teams the power to optimize test runs even in the planning stage. The new function of release readiness evaluation will help companies make the release decision with full confidence.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#capabilities-made-for-test-execution"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Capabilities made for Test Execution&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;At this stage, Katalon TestOps aims to minimize the manual steps in deployment, tool integration, and maintenance needed to run test cases. Among the benefits that TestOps offers are a unique serverless solution, automatic load balancing, parallel execution, and many more. The outcome of these innovations is a more efficient delivery cycle with less redundant procedures and extra rooms for innovation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#capabilities-made-for-test-analytics"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Capabilities made for Test Analytics&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Leveraging the valuable user input from the beta stage, TestOps renovates the analytics system to bring quality insight into the &lt;a href="https://dev.to/katalon/ci-cd-101-all-you-need-to-know-4j04"&gt;CI/CD pipeline&lt;/a&gt;. Among the new features are new failure analysis, AI-backed out-of-the-box reports, and on-demand notifications. Teams can manage systems without continuous follow-ups. Combined with the instant feedback loops, any authorized member can make changes to codes and test scripts, increasing test coverage, application quality, and ultimately, project ROI.&lt;/p&gt;

&lt;p&gt;For the full picture of functionality and benefits, check out &lt;strong&gt;&lt;a href="https://www.katalon.com/testops"&gt;Katalon TestOps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#katalon-testops-and-katalon-studio-use-case"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Katalon TestOps and Katalon Studio Use Case&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3DNnocl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/3.TestOps-KS-use-case.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3DNnocl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/3.TestOps-KS-use-case.png" alt="TestOps + Katalon Studio use case"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Promising a swift testing experience, &lt;a href="https://www.katalon.com/resources-center/blog/test-orchestration-quality-analytics/"&gt;Katalon TestOps&lt;/a&gt; offers a comprehensive platform with test execution, team collaboration, and project management capabilities. Integratable with multiple testing tools and environments like &lt;a href="https://www.katalon.com/"&gt;Katalon Studio&lt;/a&gt;, Jenkins, CircleCI, etc., testers now have a centric testing ecosystem, with the orchestration ability for extensive control across DevOps teams and environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-management-and-collaboration"&gt;
  &lt;/a&gt;
  Test Management and Collaboration
&lt;/h3&gt;

&lt;p&gt;To help teams with better communication and collaboration, TestOps provides a centralized dashboard with all transparency. At first glance, you can see all data updated minute-by-minute: requirement integration, person-in-charge, etc. Such features give the team full visibility with centralized workspaces for comments, dashboards, KPI tracking, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZODYkqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/4.-Centralized-test-dashboard-with-managers-and-related-documents.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZODYkqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/4.-Centralized-test-dashboard-with-managers-and-related-documents.png" alt="Centralized test dashboard with managers and related documents"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Centralized test dashboard with managers and related documents&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-planning"&gt;
  &lt;/a&gt;
  Test Planning
&lt;/h3&gt;

&lt;p&gt;As this stage determines the ROI of server usage, it’s vital that teams run the right test on the right environment at the right time. Using test run schedule and release status, Katalon TestOps increase the efficiency by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Smart-select to help prioritize the most important tests to run next.&lt;/li&gt;
&lt;li&gt;Remotely trigger test cases via multiple methods such as schedulers, API, CI Plugins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8NxIbzFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/5.How-to-create-Test-Trigger-with-Test-Repeat-Interval-Unit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8NxIbzFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/5.How-to-create-Test-Trigger-with-Test-Repeat-Interval-Unit.png" alt="How to create Test Trigger with Test Repeat Interval Unit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to create Test Trigger with Test Repeat Interval Unit&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-execution"&gt;
  &lt;/a&gt;
  Test Execution
&lt;/h3&gt;

&lt;p&gt;Among the integrations available, teams can integrate with popular tools in CI/CD (i.e. Jenkins), test environments (i.e. Kobiton), test automation (i.e. Katalon Studio), and beyond. It’s also possible to create customized integration using SDK and REST APIs.&lt;/p&gt;

&lt;p&gt;TestOps also automatically balances your Test Runs across available Test Environments in your CI provider. Combined with parallel execution, teams can efficiently execute their plan reliably and with clear visibility, hence drastically reducing your run times and delivery cycle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-analytics"&gt;
  &lt;/a&gt;
  Test Analytics
&lt;/h3&gt;

&lt;p&gt;TestOps helps your team get the full picture of quality, coverage analysis, and dashboards showing some critical metrics for your businesses. Among the most highlighted features are Heat Map shows the requirement test coverage, customized alerts, live monitoring, and so on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2UbcSCAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/6.TestOps-Advanced-Report-Coverage-Heat-Map.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2UbcSCAO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/6.TestOps-Advanced-Report-Coverage-Heat-Map.png" alt="TestOps Advanced Report Coverage Heat Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TestOps Advanced Report Coverage Heat Map&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VtH3UqQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/7.Real-Time-Test-Run-Report.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtH3UqQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/01/7.Real-Time-Test-Run-Report.png" alt="Real-Time Test Run Report"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Real-Time Test Run Report&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With the rise of Agile methodology, teams are constantly innovating their testing process. Among the best practice, test orchestration is a practical method providing cost reduction, better connections, and workflow optimization for all teams. As organizations now show the necessity of a centralized test platform, Katalon TestOps offers a collaboration hub of the QA teams for the whole testing phase. It’s the hope that with our solution, businesses now can achieve the goal of test early, test often, and test everywhere.&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://www.katalon.com/resources-center/blog/test-orchestration-quality-analytics/"&gt;Katalon TestOps — Test Orchestration and Quality Analytics Platform&lt;/a&gt; appeared first on &lt;a href="https://www.katalon.com"&gt;Katalon Solution&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>testops</category>
      <category>sdlc</category>
      <category>softwaretesting</category>
    </item>
    <item>
      <title>Appium Tutorial | Introduction to Android and IOS Mobile Apps Testing</title>
      <author>TestingNews</author>
      <pubDate>Tue, 03 Aug 2021 02:24:22 +0000</pubDate>
      <link>https://dev.to/katalon/appium-tutorial-introduction-to-android-and-ios-mobile-apps-testing-41nb</link>
      <guid>https://dev.to/katalon/appium-tutorial-introduction-to-android-and-ios-mobile-apps-testing-41nb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTM_Vl54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/Appium-Tutorial-for-Testing-Android-and-IOS-Mobile-Apps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTM_Vl54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/Appium-Tutorial-for-Testing-Android-and-IOS-Mobile-Apps.png" alt="Appium Tutorial for Testing Android and IOS Mobile Apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-mobile-testing-and-appium"&gt;
  &lt;/a&gt;
  Introduction to Mobile Testing and Appium
&lt;/h2&gt;

&lt;p&gt;Mobile testing is a series of tests done to determine the reliability, functionality, and usability of a software application. Mobile testing can be classified into mobile device testing and mobile application testing. Mobile device testing authenticates a device’s quality through verifying and validating its hardware parts and software functions. It tests features such as screen, applications, camera, etc. On the other hand, mobile application testing focuses only on testing the software application’s consistency and functionality. It ensures that the selected application is well suited for the device in terms of hardware, software, connectivity, etc.&lt;/p&gt;

&lt;p&gt;There are three types of mobile applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Native mobile applications&lt;/strong&gt;
This kind of application is built with a specific platform in mind; it can be for Android, IOS, or Windows SDK. They are refined to work on a specific device or platform (i.e., IOS works on Apple devices alone). Examples of such applications are Snapchat, Google maps, Skype, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mobile web applications&lt;/strong&gt;
Mobile web application, as the name implies, works solely on mobile browsers. They are developed in web-based languages such as JavaScript, CSS, and HTML. Also, it does not require installation or update by the users, and it is budget-friendly. Examples of such applications are AliExpress, OLX, Flipkart, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hybrid mobile applications&lt;/strong&gt;
This application combines both qualities of native and web applications. They can be installed on native apps devices but still run through browsers. Examples of such applications are Instagram, Uber, Gmail, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#appium"&gt;
  &lt;/a&gt;
  Appium
&lt;/h3&gt;

&lt;p&gt;Appium is an open-source, cross-platform test automation tool. It focuses mainly on testing mobile applications (Android or IOS) and automates test cases for native, web, and hybrid applications.&lt;/p&gt;

&lt;p&gt;Appium supports multiple programming languages, e.g., Java, Python, PHP, Ruby, etc. This allows testers to use any programming language of choice while writing test scripts. It can also run on different OS such as Linux, Windows, Mac, etc. However, Appium cannot be used for testing Android versions lower than 4.2. It also does not perform well on hybrid application testing due to applications’ switching action from the web to native applications.&lt;/p&gt;

&lt;p&gt;Read more about Appium in &lt;a href="https://www.katalon.com/resources-center/blog/appium-vs-selenium/"&gt;&lt;strong&gt;Appium vs. Selenium—Architecture, Functionality, Applications, and everything in between&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-for-setting-up-appium"&gt;
  &lt;/a&gt;
  Prerequisites for Setting up Appium
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HhMabXtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/Prerequisite-for-Setting-up-Appium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HhMabXtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/Prerequisite-for-Setting-up-Appium.png" alt="Prerequisite for Setting up Appium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the list of major software and hardware needed for automating mobile applications testing using Appium:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and Install Appium Desktop/Server&lt;/li&gt;
&lt;li&gt;Install JDK (Java development kit)&lt;/li&gt;
&lt;li&gt;Download and Install Install Java and set up the environment variable&lt;/li&gt;
&lt;li&gt;Download and setup Android SDK (Software development kit)&lt;/li&gt;
&lt;li&gt;Install Eclipse&lt;/li&gt;
&lt;li&gt;Install Node JS&lt;/li&gt;
&lt;li&gt;Java-client jars and Selenium jars&lt;/li&gt;
&lt;li&gt;APK – Mobile applications for automation&lt;/li&gt;
&lt;li&gt;Mobile devices&lt;/li&gt;
&lt;li&gt;USB driver for mobile devices&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-appium-works-in-android"&gt;
  &lt;/a&gt;
  How Appium works in Android
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evamRZsa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/How-Appium-works-in-Android.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evamRZsa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/How-Appium-works-in-Android.png" alt="How Appium works in Android"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to meet up with users’ requirements for an application, Appium testing can be used to verify the functionality and reliability of the application. Appium testing on Android devices allows testers to affirm that the applications are functioning as expected in real user conditions. It also helps to ensure optimal consistency in deliveries.&lt;/p&gt;

&lt;p&gt;Appium uses the UIAutomator test case to test the Android user interface to automate Android devices. The UI Automator is a native UI automation framework for Android.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices-for-running-appium-test-on-android-devices"&gt;
  &lt;/a&gt;
  Best Practices for running Appium test on Android devices
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download the necessary components to run the tests, such as Appium Server, Appium Jar files, and Java.&lt;/li&gt;
&lt;li&gt;Install the Java on your system and set the environment variables.&lt;/li&gt;
&lt;li&gt;Specify the desired capabilities (set of keys and values sent by the client to the server). It can either be set in the test code or in the appium.txt files.&lt;/li&gt;
&lt;li&gt;The test code aids the writing of the Appium test scripts needed to run Appium tests on the Android devices.&lt;/li&gt;
&lt;li&gt;Write your Appium test scripts for your Android devices with the developer mode option enabled.&lt;/li&gt;
&lt;li&gt;Run tests on real Android devices to ensure optimum user-friendliness.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-appium-works-in-ios"&gt;
  &lt;/a&gt;
  How Appium works in IOS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NocXPaH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/How-Appium-works-in-IOS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NocXPaH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/12/How-Appium-works-in-IOS.png" alt="How Appium works in IOS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like Android devices, Appium uses Apple UIAutomation API to test the user interface element for automating apps on IOS devices. That is, it utilizes the principle of RESTful services by sending JSON files. These files then work with an iOS application using UI elements such as buttons and text labels through Apple’s UIAutomation API for the application testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices-for-running-appium-test-on-ios-devices"&gt;
  &lt;/a&gt;
  Best Practices for running Appium test on IOS devices
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install and launch the Appium server on your device before starting the testing procedures.&lt;/li&gt;
&lt;li&gt;Get the necessary information of the IOS device used for testing to set the desired capabilities. Details such as the IOS version, bundled, and device name.&lt;/li&gt;
&lt;li&gt;Create a new project in Eclipse to write the Appium test scripts for your IOS devices.&lt;/li&gt;
&lt;li&gt;Inspect the UI for IOS using Appium Desktop Inspector. It can also be used to record functions for accurate debugging.&lt;/li&gt;
&lt;li&gt;Run tests on real devices instead of virtual devices to get the expected results.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Due to Appium cross-platform ability and ease of use, it has become widely used in testing mobile applications for IOS and Android. However, there is a need to set up major software and hardware components before testing an application with Appium. These components include an Appium server, JDK, Java, SDK, and more. Once all these are in place, you can efficiently test your Android and iOS apps.&lt;/p&gt;

&lt;p&gt;Read more: &lt;a href="https://dev.to/katalon/appium-vs-selenium-architecture-functionality-applications-and-everything-in-between-2ab3"&gt;Appium vs Selenium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://www.katalon.com/resources-center/blog/appium-tutorial-mobile-testing/"&gt;Appium Tutorial | Introduction to Android and IOS Mobile Apps Testing&lt;/a&gt; appeared first on &lt;a href="https://www.katalon.com"&gt;Katalon Solution&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>appium</category>
      <category>tutorials</category>
      <category>mobiletesting</category>
      <category>softwaretesting</category>
    </item>
    <item>
      <title>Appium vs Selenium — Architecture, Functionality, Applications, and Everything in Between</title>
      <author>TestingNews</author>
      <pubDate>Tue, 03 Aug 2021 02:12:53 +0000</pubDate>
      <link>https://dev.to/katalon/appium-vs-selenium-architecture-functionality-applications-and-everything-in-between-2ab3</link>
      <guid>https://dev.to/katalon/appium-vs-selenium-architecture-functionality-applications-and-everything-in-between-2ab3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ehMByZCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/Differences-between-Selenium-and-Appium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ehMByZCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/Differences-between-Selenium-and-Appium.png" alt="Differences between Selenium and Appium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s perhaps difficult to remember life before smartphones. Today, mobile phones have transformed dramatically to become the information and communication hub fundamental to modern life: from paying for your next meal to tracking your sleep habits. This explosion of the mobile industry puts testing professionals under pressure to keep up with speed without sacrificing their mobile apps’ quality.&lt;/p&gt;

&lt;p&gt;When opting for the best-fit mobile testing solution, Selenium and Appium are the two most frequent recommendations. This article contains the comparison of both tools, along with their key features, to make the selection process easier for you and your team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-selenium"&gt;
  &lt;/a&gt;
  What is Selenium?
&lt;/h2&gt;

&lt;p&gt;Selenium is an open-source framework used for web application validation. Established and run by the public community since 2004, Selenium has been recognized as the standard framework for all later automation testing platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B31DySoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/What-is-Selenium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B31DySoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/What-is-Selenium.png" alt="What is Selenium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selenium is a suite of tools, including three components: Selenium WebDriver, Selenium IDE, and Selenium Grid. The suite once had another component, which is Selenium Remote Control (Selenium RC). However, due to some significant limitations that were all resolved by the WebDriver, Selenium RC was officially removed from the Selenium 3.0. Providing a single interface, &lt;a href="https://www.katalon.com/resources-center/blog/selenium-alternative-solution-2020/"&gt;Selenium&lt;/a&gt; allows users to write test scripts in a wide range of programming languages: Ruby, Java, NodeJS, Perl, Python, C# and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selenium WebDriver&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developed as a collection of open-source APIs, Selenium WebDriver supports various browsers like Firefox, Safari, Chrome, and Internet Explorer. Unlike Selenium RC, its sibling in the Selenium family, WebDriver directly communicates with the browsers without relying on JavaScript.&lt;/p&gt;

&lt;p&gt;There’s no need to wait for page elements to load since WebDriver can support the headless HtmlUnit browser without GUI, accelerating the test execution cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selenium IDE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Selenium IDE is a recording tool used to develop and edit Selenium test cases for web applications. Suitable for even novice programmers, it requires no particular setup step to get started with Selenium IDE, except for adding the extension of the tester’s specific browser.&lt;/p&gt;

&lt;p&gt;The development environment offers the capability of converting test cases to different programming languages, giving testers greater flexibility in test execution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selenium Grid&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Selenium Grid is designed to run multiple tests across different operating systems, browsers, and machines in parallel. It’s a significant relief for heavy test loads: enabling QA to manage large test suites faster and reduce the total time to complete a parallel-testing complete pass.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-appium"&gt;
  &lt;/a&gt;
  What is Appium?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FoP4Nki8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/What-is-Appium.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FoP4Nki8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/What-is-Appium.png" alt="What is Appium"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Appium, on the other hand, is an open-source tool with features to simplify mobile app automation testing. With powerful and cross-platform capabilities, the tool is widely used for all mobile apps: native, hybrid and web applications. Before being funded and maintained by Sauce Labs in 2013, its original release was in 2011 by developer Dan Cuellar, written in C# programming language.&lt;/p&gt;

&lt;p&gt;Appium allows writing automated scripts using multiple programming languages, such as Java, PHP, Perl, Python, etc. The widespread acceptance of Appium results from its robust capability of writing tests against various platforms (iOS, Android, Windows).&lt;/p&gt;

&lt;p&gt;With its foundation written in Node.js, Appium works using client-server architecture, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Appium Client:&lt;/strong&gt; an automation scripted code that holds the configuration details of the mobile device and the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Appium Server:&lt;/strong&gt; it receives command requests from the Appium client in JSON format and executes it on mobile devices.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;End Device:&lt;/strong&gt; mainly a &lt;a href="https://www.katalon.com/resources-center/blog/mobile-cloud-testing/"&gt;real-time mobile device&lt;/a&gt;, or an emulator in which the automated scripts are performed, with the connection from Appium Server and commands from Client.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#appium-and-selenium-frameworks-for-automation-mobile-testing"&gt;
  &lt;/a&gt;
  Appium and Selenium Frameworks for Automation Mobile Testing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi9qbs8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/Appium-and-Selenium-for-Automation-Mobile-Tesing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi9qbs8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/Appium-and-Selenium-for-Automation-Mobile-Tesing.png" alt="Appium and Selenium for Automation Mobile Tesing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test automation has come into play and taken the developer’s part to monitor how their mobile apps work across all possible device variants. It provides vital debugging information on which should be fixed before launch. Among a &lt;a href="https://medium.com/@briananderson2209/best-mobile-testing-tools-ios-android-3efb84fa39"&gt;diverse population of automation testing tools&lt;/a&gt;, Appium, and its combination with Selenium Webdriver are the top choice on account of their flexibility and scalability.&lt;/p&gt;

&lt;p&gt;You’ve perhaps read this statement several times: &lt;em&gt;“Appium is like Selenium — but for mobile apps and games”&lt;/em&gt;. Yes, Appium and its various integrations with third-party tools empower testers to write automated test scripts (for iOS, Android, and Windows) even when &lt;strong&gt;real devices&lt;/strong&gt; and &lt;strong&gt;real browsers&lt;/strong&gt; are used in the testing process.&lt;/p&gt;

&lt;p&gt;By leveraging both tools in the testing lab, testers now have the best of both worlds. In case the QA team is familiar with Selenium and uses it for web testing, then bringing in Appium to test mobile apps is a logical next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-differences-between-appium-selenium-and-katalon-studio-topchoices-automation-tool"&gt;
  &lt;/a&gt;
  The Differences between Appium, Selenium and Katalon Studio &lt;strong&gt;—&lt;/strong&gt; Top-Choices Automation Tool
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OAnfXXZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/A-comparison-of-Selenium-Appium-and-Katalon-Studio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAnfXXZk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2020/11/A-comparison-of-Selenium-Appium-and-Katalon-Studio.png" alt="A comparison of Selenium, Appium and Katalon Studio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;On the whole, the definition of a best-fit mobile testing solution certainly depends on your product and team: testing strategy, member’s expertise and team’s budget. Your testing tool choice should be software that fits into your team, not software for your team to fit in!&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://www.katalon.com/resources-center/blog/appium-vs-selenium/"&gt;Appium vs Selenium — Architecture, Functionality, Applications, and Everything in Between&lt;/a&gt; appeared first on &lt;a href="https://www.katalon.com"&gt;Katalon Solution&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>automationtesting</category>
      <category>softwaretesting</category>
      <category>selenium</category>
      <category>appium</category>
    </item>
    <item>
      <title>How to create your own private cloud : part 1</title>
      <author>ecyrbe</author>
      <pubDate>Tue, 03 Aug 2021 01:15:39 +0000</pubDate>
      <link>https://dev.to/ecyrbe/how-to-create-your-own-private-cloud-part-1-4oim</link>
      <guid>https://dev.to/ecyrbe/how-to-create-your-own-private-cloud-part-1-4oim</guid>
      <description>&lt;p&gt;Hello folks,&lt;/p&gt;

&lt;p&gt;Have you ever wondered how do cloud providers build their cloud ? How do circle-ci, github actions, gitlab-ci do run your tests and builds your projects in their cloud ?&lt;/p&gt;

&lt;p&gt;Don't wonder anymore, because in this series, i'll show to build your own mini-cloud at home.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it will require some hardware investment,&lt;/li&gt;
&lt;li&gt;it will give you a glimpse of hardware architecture, but not full picture (we will not cover spine/leaf nodes architecture used in cloud datacenters)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-hardware-do-you-need-"&gt;
  &lt;/a&gt;
  What hardware do you need ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;At least two raspberry pi with 4GB each (official price &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-4-model-b/"&gt;55$&lt;/a&gt; each),&lt;/li&gt;
&lt;li&gt;One MicroSD card for each Raspberry pi (i recommend taking at least a 32GB card),&lt;/li&gt;
&lt;li&gt;[optional] A Raspberry pi POE+ hat for each Raspberry pi (official price &lt;a href="https://www.raspberrypi.org/products/poe-hat/"&gt;20$&lt;/a&gt; each)&lt;/li&gt;
&lt;li&gt;[optional] A POE+ ethernet switch (or the official raspberry pi &lt;a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/power/README.md"&gt;power supply&lt;/a&gt; if you can't afford a POE switch and want to use wifi for networking)&lt;/li&gt;
&lt;li&gt;[Optional] A cluster case for a clean setup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I made one based on 4 Raspberry pi's with POE+ hat and a POE+ switch. Total Budget : 400$.&lt;br&gt;&lt;br&gt;
If you go with only two RPI's over WIFI, it will cost you around 150$.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-it-looks-like"&gt;
  &lt;/a&gt;
  What it looks like?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#night-mode"&gt;
  &lt;/a&gt;
  night mode
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ism3cROr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9t9i3vor1cdqtzfxh84.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ism3cROr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9t9i3vor1cdqtzfxh84.jpg" alt="night cluster"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#day-mode"&gt;
  &lt;/a&gt;
  day mode
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N64hEjVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8t1u3spq96m2n0lx11r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N64hEjVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8t1u3spq96m2n0lx11r.jpg" alt="day cluster"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-ubuntu-server-arm64-on-sd-card"&gt;
  &lt;/a&gt;
  Install Ubuntu server ARM64 on SD card
&lt;/h2&gt;

&lt;p&gt;We could install the official Raspberry pi OS on each card, but unfortunately, raspberry only support 32 bit images officially (their 64 bit OS is still broken from time to time), and we want to use the full power of Raspberry pi 4 which is 64 bit. See this benchmark to compare for yourself the huge difference :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2zas1MI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yqaknmdagonr1022y0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2zas1MI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yqaknmdagonr1022y0s.png" alt="ARM32 vs ARM64"&gt;&lt;/a&gt;&lt;br&gt;
So here i'll recommend using Ubuntu Server 20.04 LTS ARM64 build provided by &lt;a href="https://www.raspberrypi.org/software/"&gt;Raspberry pi Imager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---7XHT0_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8fhjjwta4d95ktoju7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---7XHT0_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8fhjjwta4d95ktoju7o.png" alt="imager"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Other general purpose OS&lt;/code&gt;&amp;gt;&lt;code&gt;Ubuntu&lt;/code&gt;&amp;gt; &lt;code&gt;Ubuntu server 20.04 LTS&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rCkHWGDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmjijzw4k7j5zm99mcnm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rCkHWGDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmjijzw4k7j5zm99mcnm.png" alt="Other"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urT8FvhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xjw6wfkni2yu7ibl3kr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urT8FvhA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xjw6wfkni2yu7ibl3kr.png" alt="ubuntu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And click on the &lt;code&gt;Write&lt;/code&gt; button.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sd-card-modification"&gt;
  &lt;/a&gt;
  SD Card Modification
&lt;/h2&gt;

&lt;p&gt;Before putting your SD card on your raspberry pi, you first need to make a few changes to allow you to use it in Headless mode (ie: without a screen and keyboard linked to it).&lt;/p&gt;

&lt;p&gt;With your SD card still inserted, you should see two new disks :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bootfs&lt;/li&gt;
&lt;li&gt;writable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#enable-ssh"&gt;
  &lt;/a&gt;
  Enable SSH
&lt;/h3&gt;

&lt;p&gt;Still at the root of &lt;code&gt;bootfs&lt;/code&gt; disk, create an empty file named &lt;code&gt;ssh&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will enable &lt;code&gt;ssh&lt;/code&gt; connections on your Raspberry pi.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-container-cpu-and-memory-isolation"&gt;
  &lt;/a&gt;
  Enable container cpu and memory isolation
&lt;/h3&gt;

&lt;p&gt;Open a Terminal and go to the &lt;code&gt;bootfs&lt;/code&gt; filesystem of your SD Card, and open the &lt;code&gt;cmdline.txt&lt;/code&gt; file.&lt;br&gt;
You should see a single line, append this at the end of the line :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will enable you to use kubernetes (k3s to be precise) on your cluster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-enable-poe-hat-driver"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Optional&lt;/strong&gt; Enable POE+ hat driver
&lt;/h3&gt;

&lt;p&gt;Open &lt;code&gt;userconfig.txt&lt;/code&gt; and append these lines at the end of the file :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dtoverlay=rpi-poe
dtparam=poe_fan_temp0=45000
dtparam=poe_fan_temp1=55000
dtparam=poe_fan_temp2=65000
dtparam=poe_fan_temp3=75000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will enable POE+ hat driver and fan configuration to cool down your Raspberry pi.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rename-your-rasberrys"&gt;
  &lt;/a&gt;
  Rename your Rasberrys
&lt;/h2&gt;

&lt;p&gt;Now go to the &lt;strong&gt;writable&lt;/strong&gt; disk and edit as an admin the &lt;code&gt;etc/hosts&lt;/code&gt; and append at the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;127.0.1.1 &amp;lt;your-new-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the first SD card, i suggest naming it to recognize that's it will be the master node of your cluster. Mine is called &lt;strong&gt;&lt;code&gt;k3s-main&lt;/code&gt;&lt;/strong&gt;. For the other ones, you can choose a predictable name like &lt;strong&gt;&lt;code&gt;k3s-worker-01&lt;/code&gt;&lt;/strong&gt; ...&lt;/p&gt;

&lt;p&gt;Also edit &lt;code&gt;etc/hostname&lt;/code&gt; and change the current name (ubuntu) to the name you just choose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#insert-your-sd-card-and-boot"&gt;
  &lt;/a&gt;
  Insert your SD card and boot
&lt;/h2&gt;

&lt;p&gt;Now you can insert your SD card in your Raspberry pi's. put power on and let them boot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-each-of-them-with-ssh"&gt;
  &lt;/a&gt;
  Connect to each of them with ssh
&lt;/h3&gt;

&lt;p&gt;Now you need to connect to each of your booted Raspberry pi's. If you have wifi and a dhcp server, you might be able to connect to them using their name with .local appended to it. For exemple :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ssh ubuntu@k3s-main.local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When prompted for password, just use &lt;code&gt;ubuntu&lt;/code&gt;. it will ask you to change the default password after a successfull login.&lt;br&gt;
Once the password changed, it will disconnect you.&lt;/p&gt;

&lt;p&gt;If it does not work, don't worry. First run &lt;code&gt;ifconfig&lt;/code&gt; to get information about your network.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ifconfig
etho0: &lt;span class="nv"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4099&amp;lt;UP,BROADCAST,MULTICAST&amp;gt;  mtu 1500
        inet &amp;lt;YOUR.LOCAL.IP&amp;gt;  netmask 255.255.0.0  broadcast 172.19.255.255
        ether &amp;lt;MAC:ADDRESS&amp;gt;  txqueuelen 0  &lt;span class="o"&gt;(&lt;/span&gt;Ethernet&lt;span class="o"&gt;)&lt;/span&gt;
        RX packets 0  bytes 0 &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 &lt;span class="o"&gt;(&lt;/span&gt;0.0 B&lt;span class="o"&gt;)&lt;/span&gt;
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should give you your local IP. replace the last two digits by &lt;code&gt;00&lt;/code&gt; and run nmap :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; nmap &lt;span class="nt"&gt;-sn&lt;/span&gt; &amp;lt;YOUR.LOCAL.IP.ZERO&amp;gt;/24
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should return your your IP, plus the one of your Raspberry pi's. you should now be able to login using ssh and the raspberry IP&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ssh ubuntu@&amp;lt;Rasbpberry.IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have already setup a ssh key, i recommand using it to automatically connect to your Raspberry pi's without password prompt. To do this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ssh-copy-id &lt;span class="nt"&gt;-i&lt;/span&gt; ~/.ssh/id_rsa.pub ubuntu@k3s-main.local
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter password for the last time when prompted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-your-raspberry-pis"&gt;
  &lt;/a&gt;
  Update your Raspberry pi's
&lt;/h3&gt;

&lt;p&gt;On each Raspberry pi's within the SSH session, run :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt update &amp;amp; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-k3s"&gt;
  &lt;/a&gt;
  Install k3s
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#main-node"&gt;
  &lt;/a&gt;
  Main node
&lt;/h3&gt;

&lt;p&gt;On your main node (k3s-main for me), run the following command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; curl &lt;span class="nt"&gt;-sfL&lt;/span&gt; https://get.k3s.io | sh &lt;span class="nt"&gt;-s&lt;/span&gt; - &lt;span class="nt"&gt;--write-kubeconfig-mode&lt;/span&gt; 644
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the script finished execution, you should be able to see your node running :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; kubectl get nodes
NAME      STATUS    ROLES     AGE     VERSION
k3s-main   Ready    control-plane,master    1m      v1.21.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#save-your-cluster-token"&gt;
  &lt;/a&gt;
  Save your cluster token
&lt;/h3&gt;

&lt;p&gt;save your token to allow your workers to join the main node&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;cat&lt;/span&gt; /var/lib/rancher/k3s/server/node-token
&amp;lt;YOUR-TOKEN&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#join-main-node-on-workers"&gt;
  &lt;/a&gt;
  Join main node on workers
&lt;/h3&gt;

&lt;p&gt;On each of your worker nodes (k3s-worker-01, k3s-worker-02, k3s-worker-03 for me) join the main node by running the following command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; curl &lt;span class="nt"&gt;-sfL&lt;/span&gt; https://get.k3s.io | &lt;span class="nv"&gt;K3S_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://k3s-main.local:6443 &lt;span class="nv"&gt;K3S_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;YOUR-TOKEN&amp;gt; sh -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the scripts finished execution, you should be able to see your nodes running (execute on main node):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; kubectl get nodes
NAME      STATUS    ROLES     AGE     VERSION
k3s-main   Ready    control-plane,master    15m      v1.21.0
k3s-worker-01   Ready     &amp;lt;none&amp;gt;    3m      v1.21.0
k3s-worker-02   Ready     &amp;lt;none&amp;gt;    2m      v1.21.0
k3s-worker-03   Ready     &amp;lt;none&amp;gt;    1m      v1.21.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So we have installed a cluster on raspberry pi's. what now ?&lt;/p&gt;

&lt;p&gt;Next time, we'll see how to install &lt;a href="https://rancher.com/docs/rancher/v2.5/en/installation/install-rancher-on-k8s/"&gt;rancher&lt;/a&gt; on your cluster to monitor and administrate it with a beautifull UI.&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>raspberrypi</category>
      <category>k3s</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Arrays, hash tables, linked lists, queues, stacks, &amp; trees  (My repl.it playground while studying for FAANG) </title>
      <author>Clean Code Studio</author>
      <pubDate>Tue, 03 Aug 2021 01:15:17 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/arrays-hash-tables-linked-lists-queues-stacks-trees-my-repl-it-playground-while-studying-for-faang-26i2</link>
      <guid>https://dev.to/cleancodestudio/arrays-hash-tables-linked-lists-queues-stacks-trees-my-repl-it-playground-while-studying-for-faang-26i2</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__replit"&gt;
  &lt;iframe height="550px" src="https://repl.it/@zhorton34/Data-Structures?lite=true"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repl.it project was my sandbox/playground while I was studying for my FAANG interviews - not all data-structures and/or algorithms are guaranteed to work. This repl.it project is like my personal notes/journal - not professionally backed or tested. I could be wrong in my implementation and some parts may not work all together. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kKOeyR8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqdbgz3643atbg6k8bzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKOeyR8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqdbgz3643atbg6k8bzj.png" alt="Repl.it folder structure"&gt;&lt;/a&gt;&lt;br&gt;
Feel free to comment below if you want clarification on the credibility of some of the data structures shown in my practice repo.&lt;/p&gt;



&lt;p&gt;This is the &lt;strong&gt;index.js&lt;/strong&gt; page shown in the repl.it linked above. Uncomment the require statement that loads the file to the given data structure you want to tinker with then press the play/run button to re-execute the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**----------------------------------------------
 | Arrays
 *-----------------------------------------------
 |
 |   . Pros
 |     - Ordered
 |     - Fast lookups
 |     - Fast push &amp;amp; pop
 |
 |   . Cons
 |     - Slow iserts
 |     - Slow deletes
 |     - Fixed size (when using static arrays)
 |
 |   . Operations
 |     - append O(1)*
 |       -&amp;gt; may be O(n) 
 |       -&amp;gt; if allocated memory block needs more space
 |     - lookup O(1)
 |     - insert O(n)
 |     - delete O(n)
 |
 */&lt;/span&gt;

&lt;span class="c1"&gt;// require('./arrays/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./arrays/static-vs-dynamic.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./arrays/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./arrays/strings-and-arrays.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./arrays/merge-sorted-arrays.js')&lt;/span&gt;


&lt;span class="cm"&gt;/**----------------------------------------------
 | Hash Tables
 *-----------------------------------------------
 |
 |   . Pros
 |     - Fast lookups*
 |     - Fast inserts
 |     - Flexible keys
 |
 |   . Cons
 |     - Unordered
 |     - Slow key iteration
 |
 |   . Operations
 |     - insert O(1)
 |     - lookup O(1)
 |     - delete O(1)
 |     - search O(1)
 |
 */&lt;/span&gt;


&lt;span class="c1"&gt;// require('./hash-tables/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./hash-tables/collisions.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./hash-tables/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./hash-tables/first-recurring-character.js')&lt;/span&gt;


&lt;span class="cm"&gt;/**----------------------------------------------
 | Linked List
 *-----------------------------------------------
 |
 |   . Pros
 |     - Ordered
 |     - Flexible size
 |     - Fast deletion
 |     - Fast insertion
 |
 |   . Cons
 |     - Slow lookup
 |     - More memory
 |
 |   . Operations
 |     - prepend O(1)
 |     - append O(1)
 |     - lookup O(n)
 |     - insert O(n)
 |     - delete O(n)
 |
 */&lt;/span&gt;

&lt;span class="c1"&gt;// require('./linked-lists/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./linked-lists/pointer.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./linked-lists/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./linked-lists/reverse.js')&lt;/span&gt;


&lt;span class="c1"&gt;// require('./stacks/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./stacks/implementation.js')&lt;/span&gt;

&lt;span class="c1"&gt;// require('./queues/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./queues/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./queues/queues-using-stacks.js')&lt;/span&gt;



&lt;span class="cm"&gt;/**----------------------------------------------
 | Trees
 *-----------------------------------------------
 |
 |
 */&lt;/span&gt;
&lt;span class="c1"&gt;// require('./trees/introduction.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./trees/implementation.js')&lt;/span&gt;
&lt;span class="c1"&gt;// require('./trees/binary-search-tree-implementation.js')&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./linked-lists/implementation.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;All of my Data Structures and Algorithms Notes for FAANG Interview Preparation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>career</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>[Opinión] El problema del liderazgo en los equipos de tecnología.</title>
      <author>Juan A. Reséndiz</author>
      <pubDate>Mon, 02 Aug 2021 23:27:45 +0000</pubDate>
      <link>https://dev.to/jresendiz27/opinion-el-problema-del-liderazgo-en-los-equipos-de-tecnologia-3m6p</link>
      <guid>https://dev.to/jresendiz27/opinion-el-problema-del-liderazgo-en-los-equipos-de-tecnologia-3m6p</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Esto es mi opinión, la comparto y espero poder generar conciencia y un poco de debate sano; con la finalidad de mejorar o bien, comenzar con el camino de un liderazgo integral en la industria de tecnología.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conforme pasan los años y uno va creciendo en TI (hablando específicamente en la industria del Software) te das cuenta de las fuertes deficiencias en educación emocional, comunicación y resolución de conflictos que existen en la industria.&lt;/p&gt;

&lt;p&gt;Desafortunadamente es algo de lo que pecamos muchos en el área, nuestro egoísmo y &lt;a href="https://carloscastrom.wordpress.com/2012/06/24/teorias-de-comunicacion-que-es-gatekeeping/"&gt;gatekeeping&lt;/a&gt; nos impiden buscar un crecimiento organizacional íntegro y orgánico sin tener que aspirar siempre a ser el mejor en todo.&lt;/p&gt;

&lt;p&gt;Estos problemas permean mucho más allá cuando contamos con posiciones de liderazgo y nos deja con una gran deficiencia al intentar ser líderes de equipo. &lt;/p&gt;

&lt;p&gt;Imaginemos la siguiente mezcla: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatekeeping&lt;/li&gt;
&lt;li&gt;Sesgos personales&lt;/li&gt;
&lt;li&gt;Poca educación emocional (empatía, tolerancia, respeto, etc)&lt;/li&gt;
&lt;li&gt;Mala comunicación (timing, ortografía, tono de voz, etc)&lt;/li&gt;
&lt;li&gt;Egoísmo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Es una exquisita combinación para el desastre. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cu%C3%A1l-podr%C3%ADa-ser-el-origen-de-este-problema"&gt;
  &lt;/a&gt;
  ¿Cuál podría ser el origen de este problema?
&lt;/h2&gt;

&lt;p&gt;Esta es una excelente pregunta, y considero, no hay una respuesta correcta, si no, un universo de éstas. &lt;/p&gt;

&lt;p&gt;Bajo mi perspectiva, uno de los principales factores viene desde la formación y perfil de áreas relacionadas a ingeniería.&lt;/p&gt;

&lt;p&gt;En ciertas escuelas/empresas/bootcamps se nos enseña que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"Somos los mejores"&lt;/li&gt;
&lt;li&gt;"Podemos con todo lo que tenemos enfrente"&lt;/li&gt;
&lt;li&gt;"Cómo sea, pero hazlo"&lt;/li&gt;
&lt;li&gt;"Todos los egresados y egresadas de aquí terminan en las FAANG"&lt;/li&gt;
&lt;li&gt;"Si X persona no sabe Y concepto, ¿Para qué lo quiero en mi equipo?"&lt;/li&gt;
&lt;li&gt;"Necesito profesionales y especialistas, no code monkeys"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estas y muchas otras frases las podemos encontrar en #TechTwitter &lt;strong&gt;(donde también hay MUCHO apoyo y pasión por querer cambiar esto)&lt;/strong&gt;,así como rondando en chats de algunas comunidades, Linkedin y hasta dentro de los mismos procesos de reclutamiento (si eres entrevistador o aplicante, te invito a analizarlo).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Este tipo de ideas durante nuestra etapa formativa, terminan por acentuar conductas, por ejemplo: elitismo, egoísmo, falta de empatía, un debate sesgado y acotado por nuestro mismo grupo social, etc; que pueden o van a perdurar por años&lt;/strong&gt;, siempre y cuando no decidamos tomar conciencia, aceptar que se puede cambiar y actuar a nivel personal.&lt;/p&gt;

&lt;p&gt;Ahora imagina que tu líder (tech lead, manager, líder de área, CTO, CEO, etc) comparte esas mismas ideas, esto termina por generar procesos con muchos sesgos y acentuar dichos comportamientos. &lt;/p&gt;

&lt;p&gt;El resultado es &lt;strong&gt;un equipo fragmentado y una comunidad viciada&lt;/strong&gt; con esas mismas ideas; brindando también &lt;strong&gt;inconformidad y alta rotación en los equipos&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existe-una-soluci%C3%B3n-o-cu%C3%A1l-ser%C3%ADa-el-camino-m%C3%A1s-adecuado"&gt;
  &lt;/a&gt;
  Existe una solución o ¿cuál sería el camino más adecuado?
&lt;/h2&gt;

&lt;p&gt;Esta pregunta, igual que la anterior, no tienen una respuesta única ni absoluta (porque se terminaría por polarizar, y no es el objetivo); sin embargo, hay caminos validados y documentados.&lt;/p&gt;

&lt;p&gt;Es necesario comenzar con el proceso de deconstrucción como individuos (más aún los que estamos en posiciones de liderazgo), eso nos permitirá analizar y comprender mejor nuestros sesgos, fortalezas, debilidades y miedos (que se suelen reflejar en acciones que reprimen y limitan a nuestro equipo), y así comenzar a cuestionar si lo que somos es realmente lo que queremos tener en nuestra carrera profesional y mostrar como estandarte de un área. &lt;/p&gt;

&lt;p&gt;Aceptar la enorme diversidad de opiniones y como cada una de estas son valiosas para el crecimiento integral de la comunidad, será uno de los pilares para lograr una comunicación sana dentro del equipo.&lt;/p&gt;

&lt;p&gt;Estar abiertos como líderes del área a opiniones totalmente distantes de las nuestras, para comprenderlas y complementarlas o bien, incentivar el debate sano en los equipos a los que lleguemos a formar parte.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cambiar la imposición por guía, fomentar la comunicación abierta, motivar la retroalimentación empática, incentivar el reconocimiento, invitar a cometer y aprender de los errores&lt;/strong&gt;, son algunas de las muchas acciones que podemos tomar cuando estamos al frente de un equipo.&lt;/p&gt;

&lt;p&gt;Quitarnos la idea y esa pasión por el control en cada uno de los procesos de nuestros equipos y comprender, &lt;strong&gt;que la diversidad ideológica nos permite un crecimiento integral&lt;/strong&gt;, nos da una excelente oportunidad para crecer profesional y emocionalmente.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#la-educaci%C3%B3n-emocional-una-herramienta-dif%C3%ADcil-de-encontrar-y-a-veces-igual-de-complicado-de-desarrollar"&gt;
  &lt;/a&gt;
  La educación emocional: una herramienta difícil de encontrar y a veces igual de complicado de desarrollar.
&lt;/h2&gt;

&lt;p&gt;Estas famosas &lt;em&gt;Soft Skills&lt;/em&gt; (también muy relacionadas con la educación emocional), pueden ser unos de los factores de diferenciación entre un excelente compañero de trabajo (ya sea líder o no) o bien, alguien a quien podemos apoyar e incentivar a crecer a la par con el resto del equipo o de la organización. &lt;/p&gt;

&lt;p&gt;A título personal, estas habilidades me ha tocado desarrollarlas a través de procesos complejos (terapia, cometer errores, pérdidas, cambios de trabajo, etc), siendo mi experiencia sólo uno de los muchos caminos igual de válidos para lograrlo. &lt;/p&gt;

&lt;p&gt;Lo más importante es &lt;strong&gt;desarrollar la humildad, cuestionar la formación/idea que tenemos de nosotros, buscando siempre  nuestro crecimiento a la par de la comunidad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Como líderes, debemos recordar que todos los seres humanos tenemos una gran cualidad: la vulnerabilidad; esta nos permite detectar nuestras fortalezas y debilidades, a pesar de lo amargo que puede llegar a ser reconocerla y afrontarla.&lt;/p&gt;

&lt;p&gt;Terminaré por preguntarte: &lt;strong&gt;Y tú, ¿por donde comenzarás a cuestionarte y cuestionar los procesos e ideas que tienes a tu alrededor?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>software</category>
      <category>liderazgo</category>
      <category>opinion</category>
      <category>management</category>
    </item>
    <item>
      <title>6 Helpful OS Module Methods</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 02 Aug 2021 23:19:13 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/6-helpful-os-module-methods-5e3k</link>
      <guid>https://dev.to/ayabouchiha/6-helpful-os-module-methods-5e3k</guid>
      <description>&lt;p&gt;Hello,&lt;br&gt;
I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;,&lt;br&gt;
today,&lt;br&gt;
I'm going to share with you &lt;strong&gt;6 useful os module method&lt;/strong&gt;s.&lt;br&gt;
Firstly, we need to know that the os module is built-in in python, it is used for interacting with the operating system.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getcwd"&gt;
  &lt;/a&gt;
  getcwd()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;getcwd()&lt;/strong&gt;: this method helps you to get the absolute path of the current working directory as a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# C:\Users\AyaBouchiha\Desktop\posts
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#osmkdir"&gt;
  &lt;/a&gt;
  os.mkdir()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;mkdir()&lt;/strong&gt;: lets you create a new directory if it does not exists, else it raises an error (FileExistsError)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# done :)
&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'python'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# error (FileExistsError)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#osrmdir"&gt;
  &lt;/a&gt;
  os.rmdir()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;rmdir()&lt;/strong&gt;: helps you to remove an empty directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c1"&gt;# done
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'python/newFolder'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# done
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'python/newFolder'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="c1"&gt;# error (FileNotFoundError)
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'something/does-not-exists'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# error (NotADirectoryError)
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rmdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'user.json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#osremove"&gt;
  &lt;/a&gt;
  os.remove()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;remove()&lt;/strong&gt;: lets you delete a file. If it does not exists, this method raises an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c1"&gt;# done
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'posts/python/test.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# error(FileNotFoundError)
&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'posts/python/test.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ospathisfile"&gt;
  &lt;/a&gt;
  os.path.isfile()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;isfile()&lt;/strong&gt;: returns True if the given path is a regular file, otherwise It returns False.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="n"&gt;my_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'posts/python/os_module.py'&lt;/span&gt;
&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_file_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;file_does_not_exists_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'posts/python/os_module.json'&lt;/span&gt;
&lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_does_not_exists_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;directory_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'posts/python'&lt;/span&gt;
&lt;span class="c1"&gt;# False
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;directory_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#oslistdir"&gt;
  &lt;/a&gt;
  os.listdir()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;listdir()&lt;/strong&gt;:  returns a list that contains all files and directories names that exist in the specified path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'posts/'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Output:
# [
#  '5_list_python_methods.md',
#  'js_resources.md',
#  'MapObject.md',
#  'os_module.md',
#  'os_module.py',
#  'python'
# ]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;getcwd()&lt;/strong&gt;: returns the absolute path of the current working directory as a string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mkdir()&lt;/strong&gt;: creates a new directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;rmdir()&lt;/strong&gt;: removes an empty directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;remove()&lt;/strong&gt;: deletes a file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;isfile()&lt;/strong&gt;: returns True if the given path is a regular file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;listdir()&lt;/strong&gt;:  returns a list that contains all files and directories names that exist in the specified path.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/all-you-need-to-know-about-python-json-module-5ef0"&gt;All You Need To Know About Python JSON Module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Random Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Math Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7"&gt;5 Useful Python String Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;AyaBouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
