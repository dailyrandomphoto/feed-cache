<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create a captcha solver using 2captcha and PHP</title>
      <author>Posandu </author>
      <pubDate>Mon, 27 Dec 2021 13:29:45 +0000</pubDate>
      <link>https://dev.to/posandu/create-a-captcha-solver-using-2captcha-and-php-16ca</link>
      <guid>https://dev.to/posandu/create-a-captcha-solver-using-2captcha-and-php-16ca</guid>
      <description>&lt;p&gt;Hello, devs! Today we will be creating a captcha solver using 2captcha. So before we start, let's see what is 2captcha and how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-2captcha"&gt;
  &lt;/a&gt;
  What is 2captcha?
&lt;/h2&gt;

&lt;p&gt;2captcha is software that allows you to solve captchas. It is a service that is used by many websites to solve captchas. You can see their website &lt;a href="https://2captcha.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h3&gt;

&lt;p&gt;First, we send an API request to 2captcha with the captcha and their workers solve it and we get the captcha solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost
&lt;/h3&gt;

&lt;p&gt;The cost of using 2captcha is $0.77 per 1000 captcha. Pretty cheap.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Make sure you have a 2captcha account. You can create one &lt;a href="https://2captcha.com/auth/register"&gt;here&lt;/a&gt;. After that, you can get your API key from &lt;a href="https://2captcha.com/enterpage"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8stECM31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/147381189-341c9f3f-3490-4c13-8ac6-666cf0799aee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8stECM31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/147381189-341c9f3f-3490-4c13-8ac6-666cf0799aee.png" alt="" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now that you have your API key, you can start using it.&lt;br&gt;
Next, we need to install the 2captcha library. Make sure you have composer installed. If you don't, you can install it &lt;a href="https://getcomposer.org/download/"&gt;here&lt;/a&gt;. After that, you can install the library using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require 2captcha/2captcha
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have the library installed, you can start using it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding"&gt;
  &lt;/a&gt;
  Coding
&lt;/h2&gt;

&lt;p&gt;Now let's create an &lt;code&gt;index.php&lt;/code&gt; file in the root directory of your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Captcha Solver with 2Captcha&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;27px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nt"&gt;b&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f0f0f0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#c8c8c8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#5e5e5e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;27px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Solve Captchas with 2Captcha&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Let's solve captchas with &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://2captcha.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2Captcha&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

        &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;b&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;&amp;lt;/b&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Enter text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the template of the &lt;code&gt;index.php&lt;/code&gt; file. It contains the form where you can enter the captcha and submit it. You can also see the &lt;code&gt;$message&lt;/code&gt; variable. This variable is used to display the result of the captcha. If the captcha is solved, the message will be displayed. If not, the message will be empty or the error message. Our result will be like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hCxGBR4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/147381333-c9f6de61-9716-4bf7-8336-b2d26815584c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCxGBR4l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/147381333-c9f6de61-9716-4bf7-8336-b2d26815584c.png" alt="" width="528" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's code the PHP code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**
 * Set a time limit
*/&lt;/span&gt;
&lt;span class="nb"&gt;set_time_limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cd"&gt;/**
 * Include the 2captcha library
*/&lt;/span&gt;
&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"autoloader.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cd"&gt;/**
 * Check if the form is submitted
*/&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Declare variables
    */&lt;/span&gt;
    &lt;span class="nv"&gt;$captcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$captcha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;preg_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/[^a-zA-Z0-9]/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$captcha&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Check the length of the captcha
     */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$captcha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"The captcha is too short"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="cd"&gt;/**
         * Create a new instance of the 2captcha class
         * Don't forget to add your API key
         */&lt;/span&gt;
        &lt;span class="nv"&gt;$solver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;TwoCaptcha\TwoCaptcha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'YOUR_API_KEY'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cd"&gt;/**
         * Send the captcha to the 2captcha.com API server and get the result
         **/&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$solver&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$captcha&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"And the answer is, "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Oops Something went wrong "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, now we have our code. Let's run it. Here's what we get:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--235dP0K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/147381643-e0fc50a0-a374-47a3-8bf2-494f0821412b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--235dP0K6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/76736580/147381643-e0fc50a0-a374-47a3-8bf2-494f0821412b.PNG" alt="" width="539" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice! Now you can solve captchas with 2Captcha. See you soon!&lt;/p&gt;

</description>
      <category>2captcha</category>
    </item>
    <item>
      <title>Monitoring your Nestjs application using OpenTelemetry</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Mon, 27 Dec 2021 13:20:31 +0000</pubDate>
      <link>https://dev.to/signoz/monitoring-your-nestjs-application-using-opentelemetry-4ic0</link>
      <guid>https://dev.to/signoz/monitoring-your-nestjs-application-using-opentelemetry-4ic0</guid>
      <description>&lt;p&gt;Nestjs is a Nodejs framework for building scalable server-side applications with typescript. It makes use of frameworks like Express and Fastify to enable rapid development. It has gained wide popularity in recent times, and many applications are making use of the Nestjs framework.&lt;/p&gt;

&lt;p&gt;Monitoring your Nestjs application is critical for performance management. But setting up monitoring for Nestjs applications can get cumbersome requiring multiple libraries and patterns. That's where Opentelemetry comes in.&lt;/p&gt;

&lt;p&gt;OpenTelemetry is the leading open-source standard for instrumenting your code to generate telemetry data that can be a one-stop solution for monitoring Nestjs applications.&lt;/p&gt;

&lt;p&gt;OpenTelemetry is a set of tools, APIs, and SDKs used to instrument applications to create and manage telemetry data(Logs, metrics, and traces). It aims to make telemetry data(logs, metrics, and traces) a built-in feature of cloud-native software applications.&lt;/p&gt;

&lt;p&gt;One of the biggest advantages of using OpenTelemetry is that it is vendor-agnostic. It can export data in multiple formats, which you can send to a backend of your choice.&lt;/p&gt;

&lt;p&gt;In this article, we will use &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; as a backend. SigNoz is an open-source APM tool that can be used for both metrics and distributed tracing.&lt;/p&gt;

&lt;p&gt;Let's get started and see how to use OpenTelemetry for a Nestjs application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-a-nestjs-application-with-opentelemetry"&gt;
  &lt;/a&gt;
  Running a Nestjs application with OpenTelemetry
&lt;/h2&gt;

&lt;p&gt;First, you need to install SigNoz. Data collected by OpenTelemetry will be sent to SigNoz for storage and visualization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-signoz"&gt;
  &lt;/a&gt;
  Installing SigNoz
&lt;/h3&gt;

&lt;p&gt;You can get started with SigNoz using just three commands at your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/SigNoz/signoz.git&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;signoz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For detailed instructions, you can visit our documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/docs/deployment/docker/?utm_source=blog&amp;amp;utm_medium=opentelemetry_nestjs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIEm5Jzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/deploy_docker_documentation.webp" alt="Deployment Docs" width="880" height="82"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have installed SigNoz on your local host, you can access the UI at: &lt;a href="http://localhost:3000/application"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application list shown in the dashboard is from a sample app called HOT R.O.D that comes bundled with the SigNoz installation package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ih4CJjA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/signoz_dashboard_hc.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ih4CJjA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/signoz_dashboard_hc.webp" alt="SigNoz dashboard showing application list" width="880" height="492"&gt;&lt;/a&gt;SigNoz Dashboard&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instrumenting-a-sample-nestjs-application-with-opentelemetry"&gt;
  &lt;/a&gt;
  Instrumenting a sample Nestjs application with OpenTelemetry
&lt;/h3&gt;

&lt;p&gt;For instrumenting a Nestjs application with OpenTelemetry, you need to install the required OpenTelemetry packages first. Steps involved in instrumenting a Nestjs application with OpenTelemetry are as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install below dependencies&lt;br&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;opentelemetry&lt;/span&gt;&lt;span class="sr"&gt;/ap&lt;/span&gt;&lt;span class="err"&gt;i
&lt;/span&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;opentelemetry&lt;/span&gt;&lt;span class="sr"&gt;/sdk-nod&lt;/span&gt;&lt;span class="err"&gt;e
&lt;/span&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;opentelemetry&lt;/span&gt;&lt;span class="sr"&gt;/auto-instrumentations-nod&lt;/span&gt;&lt;span class="err"&gt;e
&lt;/span&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;opentelemetry&lt;/span&gt;&lt;span class="sr"&gt;/exporter-trace-otlp-proto@0.27.&lt;/span&gt;&lt;span class="err"&gt;0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;strong&gt;Create a &lt;code&gt;tracer.ts&lt;/code&gt; file&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
The &lt;code&gt;IP of SIgNoz&lt;/code&gt; will be localhost if you are running SigNoz on local.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tracing.ts&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opentelemetry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/sdk-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getNodeAutoInstrumentations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/auto-instrumentations-node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;OTLPTraceExporter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/exporter-trace-otlp-proto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Resource&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/resources&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SemanticResourceAttributes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@opentelemetry/semantic-conventions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// configure the SDK to export telemetry data to the console&lt;/span&gt;
&lt;span class="c1"&gt;// enable all auto-instrumentations from the meta package&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exporterOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://&amp;lt;IP of SigNoz&amp;gt;:55681/v1/trace&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;traceExporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OTLPTraceExporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exporterOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;opentelemetry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NodeSDK&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SemanticResourceAttributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SERVICE_NAME&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sampleNestJsApp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="nx"&gt;traceExporter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;instrumentations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;getNodeAutoInstrumentations&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// initialize the SDK and register with the OpenTelemetry API&lt;/span&gt;
&lt;span class="c1"&gt;// this enables the API to record telemetry&lt;/span&gt;
&lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tracing initialized&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error initializing tracing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// gracefully shut down the SDK on process exit&lt;/span&gt;
&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SIGTERM&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tracing terminated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error terminating tracing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;strong&gt;Import the tracer module where your app starts&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
On &lt;code&gt;main.ts&lt;/code&gt; file or file where your app starts import tracer using below command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tracer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tracer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;&lt;strong&gt;Start the tracer&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tracer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;You can now run your Nestjs application. The data captured with OpenTelemetry from your application should start showing on the SigNoz dashboard.&lt;/p&gt;

&lt;p&gt;You can check out a sample Nestjs application already instrumented with OpenTelemetry here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/sample-NestJs-app"&gt;Sample Nestjs Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you run this app, you can find a &lt;code&gt;SampleNestJsApp&lt;/code&gt; in the list of applications monitored with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HlHLT2aJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/12/nestjs_signoz_dashboard.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlHLT2aJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/12/nestjs_signoz_dashboard.webp" alt="Sample Nestjs application in the list of applications monitored by SigNoz" width="880" height="507"&gt;&lt;/a&gt;Sample Nestjs application in the list of applications monitored by SigNoz&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opensource-tool-to-visualize-telemetry-data"&gt;
  &lt;/a&gt;
  Open-source tool to visualize telemetry data
&lt;/h2&gt;

&lt;p&gt;SigNoz makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box RED metrics charts and visualization. RED metrics stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate of requests&lt;/li&gt;
&lt;li&gt;Error rate of requests&lt;/li&gt;
&lt;li&gt;Duration taken by requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---EjS1eNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EjS1eNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.webp" alt="SigNoz charts and metrics" width="880" height="512"&gt;&lt;/a&gt;Measure things like application latency, requests per sec, error percentage and see your top endpoints with SigNoz.&lt;/p&gt;

&lt;p&gt;You can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zipHHg5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_list_of_traces_hc.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zipHHg5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_list_of_traces_hc.webp" alt="List of traces on SigNoz dashboard" width="880" height="512"&gt;&lt;/a&gt;View of traces at a particular timestamp&lt;/p&gt;

&lt;p&gt;You can use flamegraphs to exactly identify the issue causing the latency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fmGoLDx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fmGoLDx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.webp" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI" width="880" height="512"&gt;&lt;/a&gt;View of traces at a particular timestamp&lt;/p&gt;

&lt;p&gt;You can also build custom metrics dashboard for your infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z7C5zsAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_custom_dashboard-min.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z7C5zsAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_custom_dashboard-min.webp" alt="Custom metrics dashboard" width="880" height="477"&gt;&lt;/a&gt;You can also build a custom metrics dashboard for your infrastructure&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry makes it very convenient to instrument your Nestjs application. You can then use an open-source APM tool like SigNoz to analyze the performance of your app. As SigNoz offers a full-stack observability tool, you don't have to use multiple tools for your monitoring needs.&lt;/p&gt;

&lt;p&gt;You can try out SigNoz by visiting its GitHub repo 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo" width="708" height="162"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions or need any help in setting things up, join our slack community and ping us in &lt;code&gt;#help&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/signoz-slack"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSs2tC2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/join_slack_cta.png" alt="SigNoz Slack community" width="880" height="118"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you want to read more about SigNoz 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/opentelemetry/go/"&gt;Golang Aplication Monitoring with OpenTelemetry and SigNoz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/blog/opentelemetry-collector-complete-guide/"&gt;OpenTelemetry collector - complete guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nestjs</category>
      <category>javascript</category>
      <category>monitoring</category>
      <category>microservices</category>
    </item>
    <item>
      <title>PyDP: A Python Differential Privacy Library</title>
      <author>Bala Priya C</author>
      <pubDate>Mon, 27 Dec 2021 13:12:00 +0000</pubDate>
      <link>https://dev.to/balapriya/pydp-a-python-differential-privacy-library-34ln</link>
      <guid>https://dev.to/balapriya/pydp-a-python-differential-privacy-library-34ln</guid>
      <description>&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;p&gt;1️⃣ &lt;a href="#what-does-differential-privacy-try-to-address"&gt;What does Differential Privacy try to address?&lt;/a&gt;&lt;br&gt;
2️⃣ &lt;a href="#why-doesnt-anonymization-suffice"&gt;Why doesn't anonymization suffice?&lt;/a&gt;&lt;br&gt;
3️⃣ &lt;a href="#pydp-example-walkthrough"&gt;PyDP example walkthrough&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-does-differential-privacy-try-to-address"&gt;
  &lt;/a&gt;
  What does Differential Privacy try to address?
&lt;/h2&gt;

&lt;p&gt;Differential privacy aims at addressing the paradox of &lt;em&gt;learning nothing about an individual while learning useful information about a population&lt;/em&gt;. In essence, it describes the following promise, made by a data holder, or curator, to a data subject:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“You will not be affected, adversely or otherwise, by allowing your data to be used in any study or analysis, no matter what other studies, data sets, or information sources, are available.” – Cynthia Dwork in &lt;em&gt;The Algorithmic Foundations of Differential Privacy&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Differential Privacy ensures that &lt;em&gt;any&lt;/em&gt; sequence of outputs, which are responses to queries is ‘&lt;em&gt;essentially&lt;/em&gt;’ equally likely to occur, independent of the presence or absence of any individual’s record.&lt;/p&gt;

&lt;p&gt;Consider the illustration below, where the two databases &lt;code&gt;Database#1&lt;/code&gt; and &lt;code&gt;Database#2&lt;/code&gt; differ by only one record, say, your data. If the results obtained from querying the database under these two different settings, are almost the same or similarly distributed, then they essentially are indistinguishable to an adversary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJXPrCfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg7q97kdm7wv601erl1i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJXPrCfD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg7q97kdm7wv601erl1i.jpg" alt="Image description" width="880" height="639"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Illustration of Differentially Private Database Mechanism (&lt;a href="https://github.com/chinmayshah99/pricon20/blob/master/ChinmayShah-Differential%20Privacy%20using%20PyDP.pdf"&gt;Image Source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Mathematically,&lt;br&gt;


&lt;/p&gt;
&lt;div class="katex-element"&gt;
  &lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;PrM(d)∈S≤exp(ϵ)PrM(d′)∈S
Pr{M(d)∈S}≤exp(ϵ)Pr{M(d′)∈S} 
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;P&lt;/span&gt;&lt;span class="mord mathnormal"&gt;r&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;M&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;∈&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;S&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;≤&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;e&lt;/span&gt;&lt;span class="mord mathnormal"&gt;x&lt;/span&gt;&lt;span class="mord mathnormal"&gt;p&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;ϵ&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mord mathnormal"&gt;P&lt;/span&gt;&lt;span class="mord mathnormal"&gt;r&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathnormal"&gt;M&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord mathnormal"&gt;d&lt;/span&gt;&lt;span class="mord"&gt;′&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;∈&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathnormal"&gt;S&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;br&gt;
where, &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;d’&lt;/code&gt; are two subsets of data that differ by a single training example. 

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;M(d)&lt;/code&gt; is the output of the training algorithm for the training subset &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;M(d’)&lt;/code&gt; is the output of the training algorithm for the training subset &lt;code&gt;d’&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The probabilities that these outputs belong to a specific set &lt;code&gt;S&lt;/code&gt; under both these conditions should be arbitrarily close. The above equation should hold for all subsets &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;d’&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Smaller the value of Ɛ, stronger the privacy guarantees.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Membership Inference Attack (MIA)&lt;/strong&gt; attempts at determining the presence of a record in a machine learning model’s training data by querying the model. From the discussion above, as the inclusion or exclusion of an individual’s data record cannot be inferred, differential privacy ensures protection against such attacks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Differentially private database mechanisms can therefore, make confidential data widely available for accurate data analysis.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#why-doesnt-anonymization-suffice"&gt;
  &lt;/a&gt;
  Why doesn't anonymization suffice?
&lt;/h2&gt;

&lt;p&gt;The Netflix Prize was an open competition for the best &lt;em&gt;collaborative filtering algorithm&lt;/em&gt; for movie recommendations. &lt;/p&gt;

&lt;p&gt;The dataset released was anonymized, without the users or the films being identified except by numbers assigned for the contest. Such anonymized movie records were published by Netflix as training data for the competition. &lt;/p&gt;

&lt;p&gt;However, there were several users who could be identified by linkage with the Internet Movie Database (IMDb) which was non-anonymized and publicly available. &lt;/p&gt;

&lt;p&gt;Researchers Arvind Narayanan and Vitaly Shmatikov, at the University of Texas at Austin present their studies in their work &lt;em&gt;Robust De-anonymization of Large Datasets (How to Break Anonymity of the Netflix Prize Dataset)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, such &lt;em&gt;linkage attacks&lt;/em&gt; can be used to match &lt;code&gt;“anonymized”&lt;/code&gt; records with non-anonymized records in a different dataset.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Differential privacy aims at neutralizing such linkage attacks. &lt;/li&gt;
&lt;li&gt;As Differential Privacy is a property of the data access mechanism, and is unrelated to the presence or absence of auxiliary information available to the adversary.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Therefore, access to the IMDb would no longer permit a linkage attack to someone whose history is in the Netflix training set than to someone not in the training set.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VPeqPC6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsq7l8rotc04r5k0vpem.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VPeqPC6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsq7l8rotc04r5k0vpem.jpg" alt="Image description" width="822" height="698"&gt;&lt;/a&gt;&lt;br&gt;
De-anonymization of users in the Netflix Prize contest (Image Credit: Arvind Narayanan)&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#pydp-example-walkthrough"&gt;
  &lt;/a&gt;
  PyDP Example Walkthrough
&lt;/h2&gt;

&lt;p&gt;PyDP is OpenMined’s Python wrapper for Google’s Differential Privacy project. The library provides a set of ε-differentially private algorithms, which can be used to produce aggregate statistics over numeric datasets containing private or potentially sensitive information.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installing-pydp"&gt;
  &lt;/a&gt;
  Installing PyDP
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="c1"&gt;# installing PyDP
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#necessary-imports"&gt;
  &lt;/a&gt;
  Necessary Imports
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pydp&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="c1"&gt;# by convention our package is to be imported as dp (dp for Differential Privacy!)
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydp.algorithms.laplacian&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BoundedSum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BoundedMean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Max&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statistics&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#fetch-all-the-required-data"&gt;
  &lt;/a&gt;
  Fetch all the required data!
&lt;/h3&gt;

&lt;p&gt;The dataset used here contains 5000 records, and is stored across 5 files, each file containing 1000 records. &lt;/p&gt;

&lt;p&gt;More specifically, the dataset contains details such as the first and last names, email addresses of customers and the amount they spent on purchasing goods, and the state in the US they're from.&lt;/p&gt;

&lt;p&gt;Let's fetch all the records, read them into pandas DataFrames and take a look at the head of each of the DataFrames.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://raw.githubusercontent.com/OpenMined/PyDP/dev/examples/Tutorial_4-Launch_demo/data/01.csv'&lt;/span&gt;
&lt;span class="n"&gt;df1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuzYwD4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozr7zs2pjhejc17dllm4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuzYwD4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozr7zs2pjhejc17dllm4.jpg" alt="Image description" width="880" height="285"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://raw.githubusercontent.com/OpenMined/PyDP/dev/examples/Tutorial_4-Launch_demo/data/02.csv'&lt;/span&gt;
&lt;span class="n"&gt;df2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KyYCa1rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqns91ihdlyyh6gjxr20.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KyYCa1rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqns91ihdlyyh6gjxr20.jpg" alt="Image description" width="880" height="278"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'https://raw.githubusercontent.com/OpenMined/PyDP/dev/examples/Tutorial_4-Launch_demo/data/03.csv'&lt;/span&gt;
&lt;span class="n"&gt;df3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---OQFeh9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q65q3a9rbl4xs4tzvdy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---OQFeh9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4q65q3a9rbl4xs4tzvdy.jpg" alt="Image description" width="880" height="259"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://raw.githubusercontent.com/OpenMined/PyDP/dev/examples/Tutorial_4-Launch_demo/data/04.csv'&lt;/span&gt;
&lt;span class="n"&gt;df4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M_ce07Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8fvbjzk9z8h9cwlsn00.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M_ce07Cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8fvbjzk9z8h9cwlsn00.jpg" alt="Image description" width="880" height="260"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://raw.githubusercontent.com/OpenMined/PyDP/dev/examples/Tutorial_4-Launch_demo/data/05.csv'&lt;/span&gt;
&lt;span class="n"&gt;df5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;","&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZcXPtyvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em91nefqovyos1h5i4lp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZcXPtyvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/em91nefqovyos1h5i4lp.jpg" alt="Image description" width="880" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we've fetched records from all the 5 files, let us concatenate all the DataFrames into a single large DataFrame and this constitutes our original dataset. Note that our dataset has 5000 rows(records) and 6 columns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;combined_df_temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;original_dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combined_df_temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Result
# (5000,6)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-a-parallel-database"&gt;
  &lt;/a&gt;
  Creating a Parallel Database
&lt;/h3&gt;

&lt;p&gt;Let us now create a parallel database that differs by only one record, say, Osbourne's record and name it redact_dataset. We then inspect the heads of both DataFrames to verify that Osbourne's record has been removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;redact_dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;redact_dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redact_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redact_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x7oaauvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcmrfdm81w3pxuegxs1g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x7oaauvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcmrfdm81w3pxuegxs1g.jpg" alt="Image description" width="880" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUsrQiHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zrzj5ohpslcjle7icjl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUsrQiHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zrzj5ohpslcjle7icjl.jpg" alt="Image description" width="880" height="275"&gt;&lt;/a&gt;&lt;br&gt;
At this point, let us ask ourselves the following question.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is the amount of money we spend at our neighborhood store private or sensitive information? Well, it may not seem all that sensitive! But, what if the same information can be used to identify us?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the example that we have, let us say we remove all personal information such as name and email address. Given that there's some access to the store's sales record, will the sales amount in itself not suffice to infer Osbourne's identity? Yes!&lt;/p&gt;

&lt;p&gt;And to do that, we sum up all entries in the &lt;code&gt;sales_amount&lt;/code&gt; column in our original dataset, and the &lt;code&gt;redact_dataset&lt;/code&gt;. The difference between these two sums exactly gives us the amount that Osbourne spent, and is verified as shown in the code snippet below. &lt;/p&gt;

&lt;p&gt;This is a simple example where membership inference was successful even after removal of personally identifiable information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sum_original_dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'sales_amount'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_list&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sum_redact_dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redact_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'sales_amount'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_list&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sales_amount_Osbourne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;sum_original_dataset&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sum_redact_dataset&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;sales_amount_Osbourne&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;original_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#differentially-private-sum"&gt;
  &lt;/a&gt;
  Differentially Private Sum
&lt;/h3&gt;

&lt;p&gt;Now, we illustrate how &lt;strong&gt;differentially private sum&lt;/strong&gt; in place of simple sum can help in &lt;em&gt;rendering membership inference attacks unsuccessful&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;For the example above, let's assume that the customers should spend a minimum of 5$ at the store and no more than 250$ for a particular purchase.&lt;/p&gt;

&lt;p&gt;We then go ahead and compute differentially private sum on both original and the parallel dataset that differed by one record, as shown in the code snippets below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;dp_sum_original_dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BoundedSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lower_bound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper_bound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'float'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;dp_sum_og&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dp_sum_original_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quick_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'sales_amount'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_list&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;dp_sum_og&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp_sum_og&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp_sum_og&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output dp_sum_og
# 636723.61
&lt;/span&gt;&lt;span class="n"&gt;dp_redact_dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BoundedSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;epsilon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lower_bound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper_bound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'float'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dp_redact_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redact_dataset&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'sales_amount'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_list&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;dp_sum_redact&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp_redact_dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp_sum_redact&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Output dp_sum_redact
# 636659.17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's proceed to summarize a few observations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now that we've calculated the differentially private sum on the original and the second dataset, it's straightforward to verify that that the &lt;em&gt;differentially private sums are not equal to sums under the non-differentially private setting&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Also, the difference is no longer equal to the amount that Osbourne spent indicating that membership attacks would now be unsuccessful, regardless of access to any other customer records.&lt;/li&gt;
&lt;li&gt;Interestingly, the differentially private sum values are still comparable and are not very different.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We've therefore succeeded in ensuring differential privacy in our simple example!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Sum of sales_value in the orignal dataset: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sum_original_dataset&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Sum of sales_value in the orignal dataset with DP: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dp_sum_og&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dp_sum_og&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;sum_original_dataset&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;sales_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;orignal&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;636594.59&lt;/span&gt;
&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;sales_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;orignal&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;DP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;636723.61&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Sum of sales_value in the second dataset: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sum_redact_dataset&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Sum of sales_value in the second dataset with DP: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dp_sum_redact&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;dp_sum_redact&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;sum_redact_dataset&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;sales_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;636562.65&lt;/span&gt;
&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;sales_value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;dataset&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;DP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;636659.17&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Difference in Sum with DP: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp_sum_og&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dp_sum_redact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Actual Difference in Sum: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sales_amount_Osbourne&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dp_sum_og&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dp_sum_redact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;sales_amount_Osbourne&lt;/span&gt;

&lt;span class="c1"&gt;# Output
&lt;/span&gt;&lt;span class="n"&gt;Difference&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;DP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;64.44&lt;/span&gt;
&lt;span class="n"&gt;Actual&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;31.94&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this introductory post helped in understanding the intuition behind differential privacy and protection against membership inference attacks. We shall look at a few more examples in subsequent blog posts.😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;[1] The Algorithmic Foundations of Differential Privacy by Cynthia Dwork.&lt;/p&gt;

&lt;p&gt;[2] PyDP Tutorial by Chinmay Shah at OpenMined Privacy Conference &lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is Web 3.0 ?</title>
      <author>Bhagya Indimagedara</author>
      <pubDate>Mon, 27 Dec 2021 12:43:29 +0000</pubDate>
      <link>https://dev.to/kithminiii/what-is-web-30--27pg</link>
      <guid>https://dev.to/kithminiii/what-is-web-30--27pg</guid>
      <description>&lt;p&gt;The evolution of the web is often divided into three seperate stages:&lt;br&gt;
     &lt;em&gt;Web 1.0 , Web 2.0 , Web 3.0&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post will break down how has the web evolved over the years, and more omportantly - Where is it going next ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web 1.0 (1989 - 2005)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Static Web - It was the first and most reliable internet in the 1990s despite only offering access to limited information with little to no user interaction.&lt;/p&gt;

&lt;p&gt;Experts refer to it as the "read-only" web. which is significantly a source of information and a research guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web 2.0 (2005-Present)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The social web-made the internet a lot more interactive thanks to advancements in web technologies like javascript, HTML5, CSS3, etc., which enabled startups to build interactive web platforms such as Youtube, Facebook, Wikipedia, and many more.&lt;/p&gt;

&lt;p&gt;Web 2.0 websites enable users to create, share, collaborate, and communicate their work with others, without a need for any web design or publishing skills. These capabilities were not present in the web 1.0 environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web 3.0 (Yet to come)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Web 3.0 is the next stage of the web evolution that would make the internet more intelligent or process information with near-human-like intelligence through the power of AI systems that could run smart programs to assist users.&lt;/p&gt;

&lt;p&gt;Web 3.0 offers distributed data across networks so there is no single entity that owns the user information.&lt;/p&gt;

&lt;p&gt;Web 3.0 will bring us a fairer internet by enabling the individual to be a sovereign- users hold maximum power. &lt;/p&gt;

&lt;p&gt;Web 3.0's decentralized blockchain protocol will enable individuals to connect to an internet where they can own and be properly compensated for their time and data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you think Web 3.0 will revolutionize the internet?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
    </item>
    <item>
      <title>Real Estate Mobile App Development Company</title>
      <author>Smith Lewis</author>
      <pubDate>Mon, 27 Dec 2021 12:29:54 +0000</pubDate>
      <link>https://dev.to/appstudio/real-estate-mobile-app-development-company-5b8k</link>
      <guid>https://dev.to/appstudio/real-estate-mobile-app-development-company-5b8k</guid>
      <description>&lt;p&gt;AppStudio is a renowned &lt;strong&gt;&lt;a href="https://www.appstudio.ca/real-estate-app-development-company.html"&gt;real estate app development company&lt;/a&gt;&lt;/strong&gt; offering best-in-class solutions to real estate industry. We have experienced developers in our real estate app development team who have created many unique Android and iOS apps for realtors, agents and brokers. We offer tailor-made services to meet specific business needs, thus ensuring unparalleled results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-app-development-services-to-bank-on"&gt;
  &lt;/a&gt;
  Our App Development Services to Bank on:
&lt;/h2&gt;

&lt;p&gt;Our skilled app developers provide a plethora of mobile application development services by harnessing the power of leading-edge tools and tech stacks. We focus on delivering creatively crafted and strategically designed mobile apps that can take your business to a whole new level.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.appstudio.ca/android-application-development.html"&gt;Android Application Development Company&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.appstudio.ca/ios-app-development.html"&gt;iOS App Development Services&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.google.ca/url?sa=t&amp;amp;url=https%3A%2F%2Fwww.appstudio.ca/healthcare-app-development.html"&gt;Healthcare App Development Services&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hire-our-worldwide-developers-for-your-business"&gt;
  &lt;/a&gt;
  Hire Our Worldwide Developers for Your Business:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.appstudio.ca/app-development-company-in-ottawa.html"&gt;Mobile App Development Company Ottawa&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.appstudio.ca/mobile-app-development-company-in-dubai.html"&gt;Mobile App Development Agency in Dubai&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appstudio-is-your-trusted-technology-partner-contact-us-to-discuss-your-project"&gt;
  &lt;/a&gt;
  AppStudio is your trusted technology partner. Contact us to discuss your project:-
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Email:&lt;a href="mailto:info@appstudio.ca"&gt;info@appstudio.ca&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Phone:+1(800)-352-9138&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Website:&lt;a href="https://www.appstudio.ca/"&gt;https://www.appstudio.ca/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>webdev</category>
      <category>react</category>
      <category>android</category>
    </item>
    <item>
      <title>Eloquent JavaScript(Part I : Chapter 3/Functions) </title>
      <author>Pranish Shrestha</author>
      <pubDate>Mon, 27 Dec 2021 12:15:07 +0000</pubDate>
      <link>https://dev.to/pranish07/eloquent-javascriptpart-i-chapter-3functions-1noi</link>
      <guid>https://dev.to/pranish07/eloquent-javascriptpart-i-chapter-3functions-1noi</guid>
      <description>&lt;p&gt;In this post, we will learn about: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defining a Function&lt;/li&gt;
&lt;li&gt;Bindings and Scopes&lt;/li&gt;
&lt;li&gt;Nested Scope&lt;/li&gt;
&lt;li&gt;Functions as Values&lt;/li&gt;
&lt;li&gt;Declaration Notation&lt;/li&gt;
&lt;li&gt;Arrow Functions&lt;/li&gt;
&lt;li&gt;The Call Stack &lt;/li&gt;
&lt;li&gt;Optional Arguments&lt;/li&gt;
&lt;li&gt;Closure&lt;/li&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;li&gt;Growing Functions&lt;/li&gt;
&lt;li&gt;Functions and Side Effects&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#defining-a-function"&gt;
  &lt;/a&gt;
  Defining a function
&lt;/h2&gt;

&lt;p&gt;A JavaScript function is a block of code designed to perform a particular task. It is executed when something invokes it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const square = function(x){
return x*x;
}
function cube(y){
return y*y*y;
}
console.log(square(12)); //144
console.log(cube(6)); //216

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;function is created with an expression that starts with the keyword function. Functions have a set of parameters(in this case x and y) and a body which contains a statement that are to be called when a function is called. Functions are always wrapped with braces'{}' even when there is only one statement.&lt;br&gt;
A function can have multiple parameters or no at all.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const makeNoise = function() {
  console.log("Pling!");
};

makeNoise();
// → Pling!

const power = function(base, exponent) {
  let result = 1;
  for (let count = 0; count &amp;lt; exponent; count++) {
    result *= base;
  }
  return result;
};

console.log(power(2, 10));
// → 1024
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some values produce a value, such as power, square and cube and some dont like makeNoise, whose only result is a side effect. A return statement determines the value the function returns. Functions that don’t have a return statement at all, such as makeNoise, similarly return undefined.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function name([parameter1, parameter2, parameter3) {
   statements
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bindings-and-scopes"&gt;
  &lt;/a&gt;
  Bindings and Scopes
&lt;/h2&gt;

&lt;p&gt;Each binding(variable) has a scope, which is the part of the program in which the binding is visible.&lt;br&gt;
Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.&lt;br&gt;
Variables defined inside a function are in local scope while variables defined outside of a function are in the global scope. &lt;/p&gt;

&lt;p&gt;JavaScript has 3 types of scope: block, function and global scope. Before ES6(2015) JavaScript only has global and function scope. ES6 introduced let and const variable which provide block scope in JavaScript. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Block scope:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
var x=2; 
let y=4;
}
//x can be used here but y cannot be used here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Variables declared with the var keyword can NOT have block scope. &lt;br&gt;
   Local Scope: Variables declared within a JavaScript function, become LOCAL to the function. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function scope : Variables defined inside a function are not accessible (visible) from outside the function.Variables declared with var, let and const are quite similar when declared inside a function.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function number(){
var num = 2; //function scope
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Global scope: Variable outside of a function becomes a function.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let x= 2;
//x can be used here
function sum(){
 //x can be used here
}
//x can be used here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#nested-scope"&gt;
  &lt;/a&gt;
  Nested Scope
&lt;/h2&gt;

&lt;p&gt;Blocks and functions can be created inside other blocks and functions, producing multiple degrees of locality.It is known as nested scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const hummus = function(factor) {
  const ingredient = function(amount, unit, name) {
    let ingredientAmount = amount * factor;
    if (ingredientAmount &amp;gt; 1) {
      unit += "s";
    }
    console.log(`${ingredientAmount} ${unit} ${name}`);
  };
  ingredient(1, "can", "chickpeas");
  ingredient(0.25, "cup", "tahini");
  ingredient(0.25, "cup", "lemon juice");
  ingredient(1, "clove", "garlic");
  ingredient(2, "tablespoon", "olive oil");
  ingredient(0.5, "teaspoon", "cumin");
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code inside the ingredient function can see the factor binding from the outer function. But its local bindings, such as unit or ingredientAmount, are not visible in the outer function. &lt;br&gt;
Each local scope can also see all the local scopes that contain it, and all scopes can see the global scope. This approach to binding visibility is called lexical scoping.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#functions-as-values"&gt;
  &lt;/a&gt;
  Functions as Values
&lt;/h2&gt;

&lt;p&gt;It is possible to store a function value in a new binding, pass it as an argument to a function, and so on. Similarly, a binding that holds a function is still just a regular binding and can, if not constant, be assigned a new value, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let launchMissiles = function() {
  missileSystem.launch("now");
};
if (safeMode) {
  launchMissiles = function() {/* do nothing */};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#declaration-notation"&gt;
  &lt;/a&gt;
  Declaration Notation
&lt;/h2&gt;

&lt;p&gt;There is a slightly shorter way to create a function binding. When the function keyword is used at the start of a statement, it works differently.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function square(x) {
  return x * x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function declarations are not part of the regular top-to-bottom flow of control.They are conceptually moved to the top of their scope and can be used by all the code in that scope. This is sometimes useful because it offers the freedom to order code in a way that seems meaningful, without worrying about having to define all functions before they are used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h2&gt;

&lt;p&gt;An arrow function expression is a compact alternative to a traditional function expression, but is limited and can't be used in all situations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Traditional Function
function bob (a){
  return a + 100;
}

// Arrow Function
let bob = a =&amp;gt; a + 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-call-stack"&gt;
  &lt;/a&gt;
  The Call Stack
&lt;/h2&gt;

&lt;p&gt;The way control flows through functions is somewhat involved. Let’s take a closer look at it. Here is a simple program that makes a few function calls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function greet(who) {
  console.log("Hello " + who);
}
greet("Harry");
console.log("Bye");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A run through this program goes roughly like this: the call to greet causes control to jump to the start of that function (line 2). The function calls console.log, which takes control, does its job, and then returns control to line 2. There it reaches the end of the greet function, so it returns to the place that called it, which is line 4. The line after that calls console.log again. After that returns, the program reaches its end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optional-arguments"&gt;
  &lt;/a&gt;
  Optional Arguments
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function square(x) { return x * x; }
console.log(square(4, true, "hedgehog"));
// → 16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In simple words, the extra arguments are ignored and just returns the value which it demands. &lt;br&gt;
JavaScript is extremely broad-minded about the number of arguments you pass to a function. If you pass too many, the extra ones are ignored. If you pass too few, the missing parameters get assigned the value undefined.&lt;/p&gt;

&lt;p&gt;The downside of this is that it is possible—likely, even—that you’ll accidentally pass the wrong number of arguments to functions. And no one will tell you about it.&lt;/p&gt;

&lt;p&gt;The upside is that this behavior can be used to allow a function to be called with different numbers of arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function minus(a, b) {
  if (b === undefined) return -a;
  else return a - b;
}

console.log(minus(10));
// → -10
console.log(minus(10, 5));
// → 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closure"&gt;
  &lt;/a&gt;
  Closure
&lt;/h2&gt;

&lt;p&gt;A closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function multiplier(factor) {
  return number =&amp;gt; number * factor;
}

let twice = multiplier(2);
console.log(twice(5));
// → 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example, multiplier is called and creates an environment in which its factor parameter is bound to 2. The function value it returns, which is stored in twice, remembers this environment. So when that is called, it multiplies its argument by 2.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursion"&gt;
  &lt;/a&gt;
  Recursion
&lt;/h2&gt;

&lt;p&gt;It is perfectly okay for a function to call itself, as long as it doesn’t do it so often that it overflows the stack. A function that calls itself is called recursive.&lt;/p&gt;

&lt;p&gt;Imperative approach(loop)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function countDownFrom(number) {
    for (let i = number; i &amp;gt; 0; i--) {
        console.log(i);
    }   
}

countDownFrom(5);
// 5
// 4
// 3
// 2
// 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recursive approach&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function countDownFrom(number) {
    if (number === 0) {
        return;
    }

    console.log(number);    
    countDownFrom(number - 1);
}

countDownFrom(5);
// 5
// 4
// 3
// 2
// 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#growing-functions"&gt;
  &lt;/a&gt;
  Growing Functions
&lt;/h2&gt;

&lt;p&gt;writing a good function name that defines the code in it refers to growing functions. Function name that gives precise explanation is helpful to understand the code but don't write every bit of functionality you come across--you'll just be writing code that you never use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions-and-side-effects"&gt;
  &lt;/a&gt;
  Functions and side Effects
&lt;/h2&gt;

&lt;p&gt;Functions can be divided into those that they called for their side effects and those that are called for their return values.(also possible to have both in same function).&lt;br&gt;
A pure function is a specific kind of value-producing function that not only has no side effects but also doesn’t rely on side effects from other code.&lt;br&gt;
When you are not sure that a pure function is working correctly, you can test it by simply calling it and know that if it works in that context, it will work in any context.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title> Generate a Blockchain Key Pair Address in Rust</title>
      <author>Boluwatife Ayodele G</author>
      <pubDate>Mon, 27 Dec 2021 12:06:17 +0000</pubDate>
      <link>https://dev.to/yceethetechie/generate-a-blockchain-key-pair-address-in-rust-4871</link>
      <guid>https://dev.to/yceethetechie/generate-a-blockchain-key-pair-address-in-rust-4871</guid>
      <description>&lt;p&gt;Hi, in this tutorial, we will be looking at how to generate a blockchain key pair address with the rust programming language. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qaAMvQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq2o1fegotuf7q4sjs3n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qaAMvQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq2o1fegotuf7q4sjs3n.jpeg" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[image credit : &lt;a href="https://connects.world"&gt;https://connects.world&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;In this project,two crates were used namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Secp256k1[&lt;a href="https://docs.rs/secp256k1/latest/secp256k1/"&gt;https://docs.rs/secp256k1/latest/secp256k1/&lt;/a&gt;] &lt;/li&gt;
&lt;li&gt;anyhow (&lt;a href="https://crates.io/crates/anyhow"&gt;https://crates.io/crates/anyhow&lt;/a&gt;). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Secp256k1&lt;/code&gt; is a Rust implementation of &lt;a href="https://github.com/sipa/secp256k1"&gt;the Pieter Wuille’s secp256k1 eliptic curve&lt;/a&gt;. The bitcoin network uses this eliptic curve for its public key generation algorithm too.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;anyhow&lt;/code&gt; crate is used for handling errors graciously in Rust.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enough of the talking....&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VyiW0iBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a5g01dit0ztru9x6gda.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyiW0iBj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a5g01dit0ztru9x6gda.png" alt="Image description" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we declare a public function named &lt;code&gt;create_keypair()&lt;/code&gt; which returns a public key and private (secret) key pair. We then initiate the &lt;code&gt;secp256k1&lt;/code&gt; crate. On line 9 we used the random number generator &lt;code&gt;rng&lt;/code&gt; on the &lt;code&gt;secp256k1&lt;/code&gt; crate to generate a secure private key. On line 10, we generated the key-pairs by invoking the &lt;code&gt;generate_keypair&lt;/code&gt; method which takes a rng from line 9.&lt;/p&gt;

&lt;p&gt;The main function just makes a call to the &lt;code&gt;create_keypair()&lt;/code&gt; function, and then prints the output.&lt;/p&gt;

&lt;p&gt;Note: As you change the integer in &lt;code&gt;seed_from_u64&lt;/code&gt;, you get a different set of private and public keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To run the code for this tutorial, add the following lines to your &lt;code&gt;Cargo.toml&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[dependencies]

secp256k1 = {version = "0.20.3", features = ["rand"]}
anyhow = "1.0.47"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open your terminal then execute &lt;code&gt;cargo run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the tutorial, you can drop your comments if you have questions.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>rust</category>
      <category>bitcoin</category>
      <category>programming</category>
    </item>
    <item>
      <title>Heaps explained in PHP | Quick access to the highest or lowest value of a dataset</title>
      <author>Doeke Norg</author>
      <pubDate>Mon, 27 Dec 2021 11:41:34 +0000</pubDate>
      <link>https://dev.to/doekenorg/heaps-explained-in-php-quick-access-to-the-highest-or-lowest-value-of-a-dataset-186a</link>
      <guid>https://dev.to/doekenorg/heaps-explained-in-php-quick-access-to-the-highest-or-lowest-value-of-a-dataset-186a</guid>
      <description>&lt;p&gt;In this article we'll explore the world of Heaps, the data structure. Because some knowledge of Trees is useful I highly suggest you read my &lt;a href="https://doeken.org/blog/tree-traversal-in-php"&gt;Trees and Tree Traversal in PHP&lt;/a&gt; article before diving into this one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I did my best to provide some visual aid for Heaps, because it can be hard to visualize some steps. If you have trouble understanding the concept through this blog post, I suggest you also watch the videos linked at the end of the post. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-heap"&gt;
  &lt;/a&gt;
  What is a Heap?
&lt;/h2&gt;

&lt;p&gt;A Heap is a data structure. So it is a way of how data is organized and how it can be accessed in an efficient way. There are many types of data structures, like: (Doubly) Linked Lists, Graphs, Stacks, Queues, Arrays and HashMaps. Each of these data types can be used for various use cases; but some are more performant than others in certain situations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-heap-is-a-binary-tree"&gt;
  &lt;/a&gt;
  🎄 A Heap is a Binary Tree
&lt;/h3&gt;

&lt;p&gt;The data structure of a Heap is a Binary Tree. Starting with a Root-node, every node has a maximum of two children; left &amp;amp; right. But there are two rules these trees have to follow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heap-rule-1-the-parent-node-has-a-lower-value-minheap-or-a-higher-value-maxheap-than-its-children"&gt;
  &lt;/a&gt;
  Heap rule #1: The parent node has a lower value (MinHeap) or a higher value (MaxHeap) than its children
&lt;/h3&gt;

&lt;p&gt;There are two types of heaps: a &lt;em&gt;MinHeap&lt;/em&gt; and a &lt;em&gt;MaxHeap&lt;/em&gt;. The difference between these are the order in which the nodes are placed inside the Tree.&lt;/p&gt;

&lt;p&gt;The children of a node in a &lt;em&gt;MinHeap&lt;/em&gt; have a higher value then their parent, while the children of a node in a &lt;em&gt;MaxHeap&lt;/em&gt; will have a lower value then their parent. If there are two identical values, a node can have a child with the same value. This behavior flows all the way down the Tree.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The naming of the heaps refers to the value of the top, or Root-node, of the Tree. This means the top of a MinHeap will always be the lowest value (min) of the nodes, and in a MaxHeap it will be the highest value (max).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#heap-rule-2-a-heap-is-a-complete-binary-tree"&gt;
  &lt;/a&gt;
  Heap rule #2: A Heap is a &lt;em&gt;Complete Binary Tree&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;There are 5 types of Binary Trees:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Full Binary Trees&lt;/em&gt;: every node has zero ór two children; but never one&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Perfect Binary Trees&lt;/em&gt;:  every node has exactly two children&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Balanced Binary Trees&lt;/em&gt;: the left and right sub-branch of a node never vary by more than one node&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Degenerate Binary Trees:&lt;/em&gt; every node has a single child, essentially making it like a single line list&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Complete Binary Tree&lt;/em&gt;: every row of the Tree is filled from left to right, without leaving gaps between nodes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So in a Complete Binary Tree, and thus also a Heap, it is &lt;strong&gt;not possible&lt;/strong&gt; to have a node with only a &lt;em&gt;right&lt;/em&gt; child-node. But it &lt;em&gt;ís&lt;/em&gt; possible to have one with only a &lt;em&gt;left&lt;/em&gt; child node.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-heap"&gt;
  &lt;/a&gt;
  🔨 Creating a Heap
&lt;/h2&gt;

&lt;p&gt;Enough theory; let's look at an example of a Heap.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In this example we'll use numbers (integers) that represent the values. But that's mostly for simplicity's sake. These values can be strings, objects, whatever you want; as long as you can compare them and figure out which is the lesser or greater of the two.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's say we have a list of values. I'll put it in a PHP array to make it look pretty:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll make this list into a MaxHeap. Remember; in this case the highest value goes at the Root-node, making the values decrease every level of the tree. So in this case our Root-node will be &lt;code&gt;72&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This root-node will have two children. Those values will be &lt;code&gt;36&lt;/code&gt; and &lt;code&gt;18&lt;/code&gt;, because those the next highest two values. The position of these values doesn't really matter at this point, they can both be either left or right.&lt;/p&gt;

&lt;p&gt;Both of these values can have 2 children; so lets find the next 4 values in declining order from the list: &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;,&lt;code&gt;2&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;. Again there exact position doesn't matter, because they are all lower then &lt;code&gt;18&lt;/code&gt; and &lt;code&gt;36&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And our final remaining number &lt;code&gt;-5&lt;/code&gt; will be the last child; the most left value on the lowest level of the tree. This makes our Complete Binary Tree complete.&lt;/p&gt;

&lt;p&gt;So this is the MaxHeap we created:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J63rg8Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://doeken.org/assets/img/heaps-explained-in-php/MaxHeap.png" class="article-body-image-wrapper"&gt;&lt;img alt="Example of a MaxHeap" src="https://res.cloudinary.com/practicaldev/image/fetch/s--J63rg8Ts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://doeken.org/assets/img/heaps-explained-in-php/MaxHeap.png" width="706" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The last node&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
The node that is the most right node (filled from the left) at the bottom of a Complete Binary Tree is called &lt;em&gt;the last node&lt;/em&gt;. In our example this is &lt;code&gt;-5&lt;/code&gt;. We'll come back to this node when we start extracting nodes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point you might be thinking: &lt;em&gt;this feels like cheating&lt;/em&gt;. And yes, I know; we cheated a bit by sorting the integers in our head from largest to smallest first, and then filling out the Heap from left to right. But that is actually the fastest way of creating a MaxHeap. However, what if we didn't know the values up front, or if they came in a random order? How would we fill out this MaxHeap?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-values-to-an-empty-heap"&gt;
  &lt;/a&gt;
  Adding values to an empty Heap
&lt;/h3&gt;

&lt;p&gt;So now let's create a Heap without sorting the numbers beforehand. In this case it would be a more iterative process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We add the first value to the heap (in our case &lt;code&gt;2&lt;/code&gt;). This will become our root-node by default.&lt;/li&gt;
&lt;li&gt;We insert the second value (&lt;code&gt;18&lt;/code&gt;) at the first available location (left child).&lt;/li&gt;
&lt;li&gt;We compare this value to its parent (the Root-node in this case). If it is bigger that the parent, swap them; otherwise go back to step 2 for the next value. (we need to swap)&lt;/li&gt;
&lt;li&gt;Repeat step 3 until there are no other parents to swap with (there are no other parents)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After this we go back to step 2 and insert the next value: &lt;code&gt;36&lt;/code&gt; (In our case the right child of the Root-node). We compare it to its parent. It is bigger, so we swap. &lt;code&gt;36&lt;/code&gt; is now the root with &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;18&lt;/code&gt; as its children.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This swapping of values with a parent to put the values in the correct spot is referred to as &lt;strong&gt;sifting up&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next value to add will be &lt;code&gt;5&lt;/code&gt;.  Again, we insert it at the first available location in the Tree (step 2). In this case the left child of &lt;code&gt;2&lt;/code&gt;. We compare it to its parent and swap (step 3), because &lt;code&gt;5&lt;/code&gt; is bigger than &lt;code&gt;2&lt;/code&gt;. We repeat step 3, but this parent (&lt;code&gt;36&lt;/code&gt;) is bigger, so we are done. Next!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Boring!&lt;/em&gt; - Ok, let's stop this explanation here. I think you get the point. If you really want a more in-depth visualization; I've added some useful links at the end of this article including a video explanation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extracting-a-value-from-a-heap"&gt;
  &lt;/a&gt;
  Extracting a value from a Heap
&lt;/h3&gt;

&lt;p&gt;We've seen how you can add a value to the Heap By injecting it, and then sifting it up. But how can you extract a value? It isn't as simple as removing the node, because that might cut the Tree in half. Take the Root-node for instance. On a Heap it's very likely you want to extract that value. But simply removing it will create two new Trees.&lt;/p&gt;

&lt;p&gt;To avoid this Tree splitting, we need to replace (or swap) the Root-node with &lt;em&gt;the last node&lt;/em&gt;. In a heap the last node can always be removed from a Tree, without corrupting it, because the Tree is already sorted.&lt;/p&gt;

&lt;p&gt;However, when we swap the Root-node with the last node, and extract it, the Tree will no longer be a Heap at that point, because the wrong value will be at the top. So we need to turn this Tree into a Heap again, starting with the Root-node. This process is not as lengthy as turning an entire unsorted Tree into a Heap, because most of the Tree is already in the correct order.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The transforming of a Binary Tree into a Heap, is known as to &lt;strong&gt;Heapify&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of sifting the Root-node &lt;em&gt;up&lt;/em&gt;, we need to sift the Root-node &lt;em&gt;down&lt;/em&gt;. In this case we need to compare the node to both its children, and swap it with the largest of the two. And keep repeating it, until the node is in its correct position. At this point the Tree is once again a Heap.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-heap-in-php"&gt;
  &lt;/a&gt;
  Creating a Heap in PHP
&lt;/h2&gt;

&lt;p&gt;Creating a Heap is made easy in PHP by using the &lt;a href="https://www.php.net/manual/en/class.splheap.php"&gt;&lt;code&gt;abstract SplHeap&lt;/code&gt;&lt;/a&gt; class. It contains all methods of an &lt;code&gt;Iterator&lt;/code&gt; as well as a few helper methods that are specific to a Heap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;extract()&lt;/code&gt; - Removes and returns the Root-node from the Heap, and reorders the Heap with a new Root node.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;insert($value)&lt;/code&gt; - Adds a new value to the Heap and reorders it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;top()&lt;/code&gt; - Only returns the current Root node value; it does not change the cursor of the iterator or remove the node.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isCorrupted()&lt;/code&gt; - Returns whether the current Heap is in a corrupted state (this happens when the &lt;code&gt;compare()&lt;/code&gt; function throws an exception).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;recoverFromCorruption()&lt;/code&gt; - resets the corrupted state of the heap and allows for further use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then there is also &lt;code&gt;abstract protected function compare($value1, $value2): int&lt;/code&gt;. This function is used inside the Heap algorithm to determine how it should order two values / nodes.&lt;/p&gt;

&lt;p&gt;PHP also provides a &lt;a href="https://www.php.net/manual/en/class.splminheap.php"&gt;&lt;code&gt;SplMinHeap&lt;/code&gt;&lt;/a&gt; and a &lt;a href="https://www.php.net/manual/en/class.splmaxheap.php"&gt;&lt;code&gt;SplMaxHeap&lt;/code&gt;&lt;/a&gt; class that are concrete implementations of the &lt;code&gt;SplHeap&lt;/code&gt;. These classes have an implemented &lt;code&gt;compare()&lt;/code&gt; method. Both classes essentially use the spaceship operator to compare the values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// SplMaxHeap&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$value1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// SplMinHeap&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$value2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Knowing all this we can create a MaxHeap from our &lt;code&gt;$values&lt;/code&gt; array like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;SplMaxHeap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$heap&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We saw that &lt;code&gt;SplHeap&lt;/code&gt; is also an &lt;code&gt;Iterator&lt;/code&gt;, so we can &lt;code&gt;foreach&lt;/code&gt; over the Heap and have it yield its values in a decreasing order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$heap&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// int(72), int(36), int(18), int(5), int(2), int(2), int(0), int(-5)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Iterating over the Heap will essentially call &lt;code&gt;extract()&lt;/code&gt; for every value. This means that those values are gone from the heap. If you call &lt;code&gt;::rewind()&lt;/code&gt; on the Heap, this will &lt;strong&gt;not&lt;/strong&gt; return those values. Using &lt;code&gt;::current()&lt;/code&gt; or &lt;code&gt;::top()&lt;/code&gt; will return the current top value without removing it. When you call &lt;code&gt;::next()&lt;/code&gt; however, this &lt;em&gt;will again&lt;/em&gt; extract the current value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-custom-maxheap-in-php"&gt;
  &lt;/a&gt;
  Creating a custom MaxHeap in PHP
&lt;/h3&gt;

&lt;p&gt;When using a MaxHeap to sort a list of objects it is possible the value of those objects is calculated through a function. In that case the regular &lt;code&gt;SplMaxHeap&lt;/code&gt; will (probably) not work, but you can create your own MaxHeap by extending &lt;code&gt;splHeap&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Imagine having a shop with product represented by a &lt;code&gt;Product&lt;/code&gt; class. It can store a physical weight in different units of measurements; like pounds (lbs) and grams (g). To put these in a MaxHeap, it needs to be able to compare those different types of measurements. A (very simple) implementation could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$weight_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$weight_amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductMaxHeap&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;SplHeap&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;asGrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;asGrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;asGrams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Product&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;float&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;weight_type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'grams'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;weight_amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;weight_type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'pounds'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;weight_amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;453.59237&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;InvalidArgumentException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Product has unknown weight type.'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we convert the weight amount of pounds into grams in order to compare the values accordingly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Whenever dealing with types like these, make sure to use constants that represent that type (like &lt;code&gt;public const WEIGHT_TYPE_GRAMS = 'grams';&lt;/code&gt;) or use &lt;code&gt;Enums&lt;/code&gt; when using PHP 8.1 or higher. This provides autocompletion in IDE's and prevents typo's like &lt;code&gt;gram&lt;/code&gt; instead of &lt;code&gt;grams&lt;/code&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#array-index-algorithm-for-heaps"&gt;
  &lt;/a&gt;
  Array Index Algorithm for Heaps
&lt;/h2&gt;

&lt;p&gt;Remember how Heaps are Complete Binary Trees? This is actually a very helpful characteristic of a Heap. If we give every node in the tree a 0-based index key, and moved from top to bottom, left to right, we can actually quite simply figure out what the keys of the children of a specific node are. So we can store a heap as an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$heap_as_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="c1"&gt;// Keys added for visual aid&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming &lt;code&gt;$i&lt;/code&gt; represents the current node's key, the algorithm to figure out the left child of that node is: &lt;code&gt;($i * 2) + 1&lt;/code&gt;, and for the right child it is: &lt;code&gt;($i * 2) + 2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's try that out. We want the values for the left and right child of &lt;code&gt;36&lt;/code&gt;.  Its key is &lt;code&gt;1&lt;/code&gt;. So the left key is &lt;code&gt;(1 * 2) + 1 = 3&lt;/code&gt;, and the right key is &lt;code&gt;(1 * 2) + 2 = 4&lt;/code&gt;. Which are respectively the nodes: &lt;code&gt;5&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;. Which in turn matches our Heap.&lt;/p&gt;

&lt;p&gt;We can also do the reverse and find out the parent of the current node. The algorithm for that is: &lt;code&gt;(int) ($i -1) / 2&lt;/code&gt;.  For the right child of 36 (index: 4) that would be: &lt;code&gt;(4 - 1) / 2) = 1.5&lt;/code&gt;.  The &lt;code&gt;int&lt;/code&gt; of 1.5 = &lt;code&gt;1&lt;/code&gt;. And key &lt;code&gt;1&lt;/code&gt; is indeed the parent node: &lt;code&gt;36&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heapify-an-0based-array"&gt;
  &lt;/a&gt;
  Heapify an 0-based array
&lt;/h3&gt;

&lt;p&gt;Because a Complete Binary Tree can be stored as a 0-based array; we can also see any 0-based array as a Complete Binary Tree. How is this helpful? Because it's very easy and efficient to turn any existing Complete Binary Tree into a Heap.&lt;/p&gt;

&lt;p&gt;When we want to convert a Complete Binary Tree into a Heap, we only have to sort half of it. Because the sorting is done by swapping two nodes, the other half of the Tree will automatically also end up in their correct position.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Since we are working with a 0-based array, &lt;strong&gt;swapping&lt;/strong&gt; means we can just switch the index of these values.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can try this out yourself:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Draw a Complete Binary Tree from the provided array &lt;code&gt;2, 18, 36, 5, 2, 0, -5, 72&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Start at the half of the array: &lt;code&gt;5&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Sift it down by swapping it with the largest of its children and repeat this until it has no children to swap with (It only has one child: &lt;code&gt;72&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Now work your way back by applying step 3 on every element before &lt;code&gt;5&lt;/code&gt; (So the next will be &lt;code&gt;36&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If done correctly, you end up with a Tree like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         72
       /    \
     18       36
    /  \     /  \
   5    2   0   -5
 /
2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, by only sifting down half the array, the other half of the Heap automatically ended up in a correct position.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-are-heaps-useful"&gt;
  &lt;/a&gt;
  🤷 When are Heaps useful?
&lt;/h2&gt;

&lt;p&gt;Because there are many types of data structures, there are also many ways to solve a problem. Sometimes a simple array is all you need. But Heaps have their time to shine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#direct-access-to-the-highest-or-lowest-value"&gt;
  &lt;/a&gt;
  Direct access to the highest (or lowest) value
&lt;/h3&gt;

&lt;p&gt;A MaxHeap (or MinHeap) has direct access to the highest (or lowest) value of the dataset. So whenever you are working with large datasets for which you need the maximum (or minimum) value; a Heap is a safe bet. As you've seen we only need to sort half the dataset in order to figure out the minimum or maximum value. Which is pretty fast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-with-a-lot-of-inserts-and-removals"&gt;
  &lt;/a&gt;
  Working with a lot of inserts and removals
&lt;/h3&gt;

&lt;p&gt;When inserting a new value into a dataset, a Heap is more efficient because it only performs (relatively) a few comparisons to end up in the right spot. In the worst case scenario an array would need to perform a comparison for &lt;em&gt;every&lt;/em&gt; value it has. Because a Heap is a binary tree, the worst case would need exponentially fewer comparisons. Making it a more efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sorting-arrays"&gt;
  &lt;/a&gt;
  Sorting arrays
&lt;/h3&gt;

&lt;p&gt;An array can be sorted by using a MaxHeap in a process known as &lt;strong&gt;HeapSort&lt;/strong&gt;.&lt;br&gt;
Because a MaxHeap continuously has the highest value at the top, you can extract that value and place it at it to the beginning of an array. By adding the next value, and the next, and the next, at the beginning of the array, it ends up sorted from lowest to highest.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although this technically qualifies as HeapSort this isn't the most efficient way. We'll cover HeapSort more in-depth in an upcoming post where we'll make it more efficient.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#priority-queues"&gt;
  &lt;/a&gt;
  Priority Queues
&lt;/h3&gt;

&lt;p&gt;While also a topic for a future blog post, queues are essentially a First-In First-Out system that adds new values at the end of a list, and extracts values from the start of the list.&lt;/p&gt;

&lt;p&gt;A variant on this is where you use a MaxHeap that contains a &lt;code&gt;priority&lt;/code&gt; value for a certain object. When adding this object to the Heap, it will end up higher or lower depending on its priority. This type of queue is called a &lt;strong&gt;Priority Queue&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fun fact:&lt;/strong&gt; Did you know the letters &lt;code&gt;ueue&lt;/code&gt; in &lt;code&gt;Queue&lt;/code&gt; are not silent, but are actually just waiting their turn? &lt;em&gt;- I'll let myself out; sorry.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because this is such a frequently used case for MaxHeaps, PHP actually provides a &lt;a href="https://www.php.net/manual/en/class.splpriorityqueue.php"&gt;&lt;code&gt;SplPriorityQueue&lt;/code&gt;&lt;/a&gt; based on a MaxHeap.&lt;/p&gt;

&lt;p&gt;Instead of updating your object to contain a priority, you can insert the object &lt;em&gt;with&lt;/em&gt; a priority.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SplPriorityQueue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nv"&gt;$queue&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task 1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$queue&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task 2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$queue&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'task 3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$queue&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// string(6) "task 2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And because we only need to partially sort a Heap find the highest priority, this too is a lot more efficient that sorting an array-queue after every insertion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#real-world-example"&gt;
  &lt;/a&gt;
  Real world example
&lt;/h2&gt;

&lt;p&gt;A very nice real world example of a Heap implemented with a PHP array &lt;a href="https://github.com/revoltphp/event-loop/blob/a928073cc74501c1852fd9d8c8b02e550cb56517/src/EventLoop/Internal/TimerQueue.php"&gt;can be found&lt;/a&gt; in the &lt;code&gt;revolt/event-loop&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;In this example they implemented a queue of callbacks based on an expiry time. Whenever the expiry time has passed, the callback will be extracted. So this is an example of a Priority Queue, but it's based on a MinHeap instead of a MaxHeap; because the lowest expiry time has to be on top.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-for-the-standard-php-library-spl"&gt;
  &lt;/a&gt;
  Alternative for the Standard PHP Library (SPL)
&lt;/h2&gt;

&lt;p&gt;As &lt;a href="https://www.reddit.com/r/PHP/comments/rj57h6/heaps_explained_in_php/hp1xzzd/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3"&gt;u/sproingie pointed out on Reddit&lt;/a&gt; The SPL data structures are not great. They are a great jumping of point in getting started with other data structures. But if you want / need more performance you could install the &lt;a href="https://www.php.net/manual/en/book.ds.php"&gt;Data Structures&lt;/a&gt; extension. While it has a Priority Queue, there is no generic Heap implementation. But you might be able to build this yourself using the &lt;a href="https://www.php.net/manual/en/class.ds-vector.php"&gt;&lt;code&gt;DS\Vector&lt;/code&gt; class&lt;/a&gt;.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  🔗 Useful links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.php.net/manual/en/class.splheap.php"&gt;&lt;code&gt;SplHeap&lt;/code&gt; documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.php.net/manual/en/class.splminheap.php"&gt;&lt;code&gt;SplMinHeap&lt;/code&gt; documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.php.net/manual/en/class.splmaxheap.php"&gt;&lt;code&gt;SplMaxHeap&lt;/code&gt; documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.php.net/manual/en/class.splpriorityqueue.php"&gt;&lt;code&gt;SplPriorityQueue&lt;/code&gt; documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.upgrad.com/blog/5-types-of-binary-tree/#Types_of_Binary_Trees"&gt;5 Types of Binary Tree Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.php.net/manual/en/book.ds.php"&gt;Data Structures PHP extension &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=BHB0B1jFKQc"&gt;Video: Binary Tree Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=g9YK6sftDi0"&gt;Video: Implement A Binary Heap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;Like I stated at the beginning of the post; Trees and Heaps are very visual things and not everything is as easily explained with a bunch of text. I do hope after reading this post you understand the gist of it. If you have any questions please leave a comment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article! If so, please leave a ❤️ or a 🦄 and consider subscribing! I write posts on PHP almost every week. You can also follow me on &lt;a href="https://twitter.com/intent/follow?screen_name=doekenorg"&gt;twitter&lt;/a&gt; for more content and the occasional tip. If you want to be the first to read my next blog; consider &lt;a href="https://doeken.org"&gt;subscribing to my newsletter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Top 10 Reasons Why Laravel Is The Most Popular PHP Framework</title>
      <author>Ashish Yadav</author>
      <pubDate>Mon, 27 Dec 2021 11:25:31 +0000</pubDate>
      <link>https://dev.to/expoashish/top-10-reasons-why-laravel-is-the-most-popular-php-framework-445h</link>
      <guid>https://dev.to/expoashish/top-10-reasons-why-laravel-is-the-most-popular-php-framework-445h</guid>
      <description>&lt;p&gt;In this blog we are going to see why laravel is the best PHP framework. 10 Reasons why Laravel is the best PHP framework in 2022. If you like my post then follow me. Lets Start:-👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-reasons-why-laravel-is-most.html"&gt;Top 10 Reasons Why Laravel Is The Most Popular PHP Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-programming-languages-you-must.html"&gt;Top 10 Programming Languages You Must Know In 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-free-blogging-sites-in-2022.html"&gt;Best Websites for Blogging&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-reasons-why-laravel-is-most.html"&gt;Top 10 Reasons Why Laravel Is The Most Popular PHP Framework&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/speed-up-your-laravel-website-super-fast.html"&gt;Speed Up Your Laravel website Super Fast&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-5-python-frameworks-for-game.html"&gt;Top 5 Python Frameworks for Game development 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/what-is-pykyra-in-python-programming.html"&gt;What is Pykyra in Python Programming?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PromiseExtra.sequence</title>
      <author>Amin</author>
      <pubDate>Mon, 27 Dec 2021 11:24:54 +0000</pubDate>
      <link>https://dev.to/aminnairi/promiseextrasequence-38i</link>
      <guid>https://dev.to/aminnairi/promiseextrasequence-38i</guid>
      <description>&lt;p&gt;Promises are very powerful at easing the manipulation of asynchronous contexts. And the language has several helpers to help us with that like &lt;code&gt;Promise.all&lt;/code&gt; which takes an array of promises and return an array containing all of the resolved values from the promises provided.&lt;/p&gt;

&lt;p&gt;There is one use-case where it would be great to have such helpers is when we want to work with a sequence of promises.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is your name? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, what is your age? `&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAge&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newAge&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, are you sure you are &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;? `&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmation&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmation&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alright, I won't do anything for now.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Thank you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; for answering. I am processing your request...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't see any problem with that source-code, then this article won't be of any interest for you but if you saw that we were using some global variables within our promises and that you would like to know if there is a solution to prevent manipulating such global variables then I'll show you my attempt at solving this issue.&lt;/p&gt;

&lt;p&gt;You may want to know how the &lt;code&gt;question&lt;/code&gt; function work. We will start by building our own &lt;code&gt;question&lt;/code&gt; function using the Node.js platform and the JavaScript language and then we will quickly go back to this example and try to find a solution to this global variable issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-own-question"&gt;
  &lt;/a&gt;
  Our own question
&lt;/h2&gt;

&lt;p&gt;Asking questions on Node.js is a problem that has already been solved using the &lt;code&gt;readline&lt;/code&gt; built-in module. We can even use the &lt;code&gt;readline/promises&lt;/code&gt; submodule to use our beloved &lt;code&gt;Promise&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createInterface&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;readline/promises&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stdout&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;process&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readlineInterface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createInterface&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;output&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;readlineInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;How are you? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`You are &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;readlineInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To put that in words:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We imported the &lt;code&gt;createInterface&lt;/code&gt; from the &lt;code&gt;readline/promises&lt;/code&gt; builtin module&lt;/li&gt;
&lt;li&gt;We also imported &lt;code&gt;input&lt;/code&gt; &amp;amp; &lt;code&gt;output&lt;/code&gt; to use the console input and output&lt;/li&gt;
&lt;li&gt;We created our interface&lt;/li&gt;
&lt;li&gt;We then call the &lt;code&gt;question&lt;/code&gt; function which will output the question and wait for the input&lt;/li&gt;
&lt;li&gt;We catch the input in the resolved promise returned by &lt;code&gt;question&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We also catch any errors&lt;/li&gt;
&lt;li&gt;We released the locking of the input&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So yeah, this can quickly be tedious to write if we wanted to ask several things to our user. This is a good candidate for a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createInterface&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;readline/promises&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stdin&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stdout&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;process&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createQuestionFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;createInterface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readlineInterface&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createInterface&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;output&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;readlineInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;readlineInterface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createQuestionFactory&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;createInterface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;output&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;How are you? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`You are &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run this code, we should get something like that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;How are you? fine
You are fine.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's my take at creating something reusable, but I'm pretty sure there are tons of ways to solve this issue, with plenty of optimizations but I don't want to spend too much time here.&lt;/p&gt;

&lt;p&gt;The important thing is that we have a function that allows us to ask a question and returns a promise resolved with the answer. The implementation details are of little to no interest for this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hitting-the-problem"&gt;
  &lt;/a&gt;
  Hitting the problem
&lt;/h2&gt;

&lt;p&gt;Promises are again really great at managing asynchronous contexts within our scripts. But when it comes to managing multiple states associated to a business need, it becomes clear that we need to use the good old tools like variables to store data associated with a sequence of promises.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is your name? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, what is your age? `&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newAge&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newAge&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, are you sure you are &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;? `&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmation&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmation&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alright, I won't do anything for now.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Thank you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; for answering. I am processing your request...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the exact same code we had in the introduction. What's really bothering here is that we are using global variables. Variables are great, but they come with some drawbacks like naming them, conflict between multiple global variables, possibility of having the state of our variable changed, especially when we are dealing with an asynchronous context which can update our variable anytime and it becomes very hard to manage once our script grows in size.&lt;/p&gt;

&lt;p&gt;Ideally, we would want to have something looking like that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;PromiseExtra&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is your name? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is your age? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Are you sure about your age? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;confirmation&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmation&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alright, I won't do anything for now.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Thank you for answering. I am processing your request...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we try to run this code, we should get this result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;What is your name? Amin
What is your age? 28
Are you sure about your age? yes
Thank you for answering. I am processing your request...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, let's explain what is happening:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We used &lt;code&gt;PromiseExtra.sequence&lt;/code&gt;, this is a function that we will be building together that accept an array of functions that return a promise&lt;/li&gt;
&lt;li&gt;Then, we get back our values, just like the &lt;code&gt;Promise.all&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;The difference between &lt;code&gt;PromiseExtra.sequence&lt;/code&gt; and &lt;code&gt;Promise.all&lt;/code&gt; is that the latter has already the promises executed, and they are executed at the same time whereas the first has the execution of the promises deferred in a function that is called by &lt;code&gt;PromiseExtra.sequence&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#promiseextrasequence"&gt;
  &lt;/a&gt;
  PromiseExtra.sequence
&lt;/h2&gt;

&lt;p&gt;Let's build our method. Here is my proposal definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PromiseExtra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;promises&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previousPromise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentPromise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previousPromise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previousState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentPromise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previousState&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;previousState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;newState&lt;/span&gt;
          &lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;([]));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's brake this in as usual.&lt;br&gt;
&lt;code&gt;PromiseExtra&lt;/code&gt; is an object containing a method, since this is not a constructor function, we don't need or want one and we can call this method like a static method on a class.&lt;/p&gt;

&lt;p&gt;It contains a method &lt;code&gt;sequence&lt;/code&gt;. This method is responsible for getting the array of functions and reducing it. It will reduce all of the promises to a single array of resolved values.&lt;/p&gt;

&lt;p&gt;I start with a resolved promise since an empty array as parameter should resolve to an empty array anyway.&lt;/p&gt;

&lt;p&gt;Then, if you are familiar with the reducing of arrays, you should get the idea. I received the previous resolved promise, I then grab the value inside this promise and call the current function (which is the current iteration, for each function in our array of function) and since the promise is deferred until the function is called, we can call it right now, get its resolved value and return the new state which is the aggregation of the old state and the new one.&lt;/p&gt;

&lt;p&gt;It is a sequence, because we still call each one of our functions in the given order, and the promise are called only when we resolve the previous one. This is why we talk about deferred promises here.&lt;/p&gt;

&lt;p&gt;Also, one important thing to note is that each function gets called with the previous state. This is helpful if we want to customize the behavior of each function from the derived state of the previous resolved promises. This let's us have a code that looks like that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;PromiseExtra&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is your name? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, what is your age? `&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, are you sure you are &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old? `&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;confirmation&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmation&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alright, I won't do anything for now.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Thank you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; for answering. I am processing your request...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the output result would be the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;What&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;Amin&lt;/span&gt;
&lt;span class="nx"&gt;Hi&lt;/span&gt; &lt;span class="nx"&gt;Amin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;what&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;
&lt;span class="nx"&gt;Amin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;sure&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="nx"&gt;years&lt;/span&gt; &lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;yes&lt;/span&gt;
&lt;span class="nx"&gt;Thank&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;Amin&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;answering&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;processing&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have an enhanced user experience thanks to the accumulation of states provided for free by the &lt;code&gt;PromiseExtra.sequence&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And for the ones that are in love with &lt;code&gt;async/await&lt;/code&gt;, we can of course use it as well with this static method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;confirmation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;PromiseExtra&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is your name? &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, what is your age? `&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, are you sure you are &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old? `&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmation&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alright, I won't do anything for now.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Thank you &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; for answering. I am processing your request...`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: you can use top-level await in recent versions of the browser and the Node.js platform.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have seen what was the problem about sequencing promises, and the need for a more functional approach, imitating the foot steps of the &lt;code&gt;Promise.all&lt;/code&gt; static method by creating our own &lt;code&gt;PromiseExtra.sequence&lt;/code&gt; static method.&lt;/p&gt;

&lt;p&gt;This article is heavily inspired by this answer on &lt;a href="https://stackoverflow.com/a/41115086"&gt;StackOverflow&lt;/a&gt;. I didn't find any satisfying solutions until I got to this answer so thanks for this one (except for the accumulation part).&lt;/p&gt;

&lt;p&gt;Since this is a very interesting question (from my perspective and I hope from yours too), I'm curious about your findings and if anyone has a better solution to give and why this one is better according to you.&lt;/p&gt;

&lt;p&gt;Even if this is quite niche, I truly hope that this will someday be part of the actual ECMAScript standard . What are your thoughts about this? Should this be part of the standard or rather a third-party library? Let me know in the comment section!&lt;/p&gt;

&lt;p&gt;Anyway I hope that you enjoyed this article as I did because I had so much fun playing with this. Take care and see you on the next article!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>promises</category>
    </item>
    <item>
      <title>Generate 10 QR Code Types with React</title>
      <author>Shahed Nasser</author>
      <pubDate>Mon, 27 Dec 2021 11:07:36 +0000</pubDate>
      <link>https://dev.to/shahednasser/generate-10-qr-code-types-with-react-jj4</link>
      <guid>https://dev.to/shahednasser/generate-10-qr-code-types-with-react-jj4</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://blog.shahednasser.com/generate-10-qr-code-types-with-react/"&gt;my personal blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;QR Codes are square codes that people can scan to perform an action. That action can be just viewing some text, going to a URL, opening a location on a map, viewing a social media account, and more.&lt;/p&gt;

&lt;p&gt;QR Codes are generally either used digitally on websites and apps to make it easier for users to perform something or used in printing when marketing your products or company. By printing your company URL's QR Code on your business card, you eliminate the need for people to type in the website to see it.&lt;/p&gt;

&lt;p&gt;In this tutorial, you'll learn how to generate 10 different types of QR Codes in JavaScript, particularly React. You can see the full code on &lt;a href="https://github.com/shahednasser/react-qr-tutorial"&gt;this GitHub repository&lt;/a&gt;, and you can see it in live-action on &lt;a href="https://shahednasser.github.io/react-qr-tutorial/"&gt;this website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow along with this tutorial, you need to have both &lt;a href="https://shahednasser.github.io/react-qr-tutorial/"&gt;Node.js&lt;/a&gt; and NPM installed. NPM will be automatically installed when you install Node.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-website"&gt;
  &lt;/a&gt;
  Setup Website
&lt;/h2&gt;

&lt;p&gt;To create a new React website, run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app react-qr-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this command is done, change to the newly created directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd react-qr-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, install &lt;a href="https://react-bootstrap.github.io"&gt;React Bootstrap&lt;/a&gt; for easy styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-bootstrap bootstrap@5.1.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-qr-library"&gt;
  &lt;/a&gt;
  Install QR Library
&lt;/h3&gt;

&lt;p&gt;For this tutorial, you'll use the library &lt;a href="https://www.npmjs.com/package/react-qr-code"&gt;react-qr-code&lt;/a&gt;. This library provides a React component that, when you provide the text to be encoded into a QR Code, will display the QR Code for it.&lt;/p&gt;

&lt;p&gt;To install the library run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install react-qr-code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#home-page"&gt;
  &lt;/a&gt;
  Home Page
&lt;/h3&gt;

&lt;p&gt;Before you start creating all different types of QR Codes, you'll setup the main layout for the home page.&lt;/p&gt;

&lt;p&gt;Change &lt;code&gt;src/App.js&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from 'react'
import 'bootstrap/dist/css/bootstrap.min.css';
import Container from 'react-bootstrap/Container'
import Tab from 'react-bootstrap/Tab'
import Row from 'react-bootstrap/Row'
import Col from 'react-bootstrap/Col'
import Nav from 'react-bootstrap/Nav'
import QRCode from 'react-qr-code'

function App() {
  const [qrText, setQrText] = useState("");
  return (
      &amp;lt;Container className='mx-auto'&amp;gt;
        &amp;lt;h1 className='my-4'&amp;gt;Qr Generator&amp;lt;/h1&amp;gt;
        {qrText.length &amp;gt; 0 &amp;amp;&amp;amp; &amp;lt;QRCode value={qrText} /&amp;gt;}
        &amp;lt;h4 className='my-3'&amp;gt;Choose the type of QRCode format&amp;lt;/h4&amp;gt;
        &amp;lt;Tab.Container defaultActiveKey="text"&amp;gt;
                &amp;lt;Row&amp;gt;
                  &amp;lt;Col sm={3}&amp;gt;
                    &amp;lt;Nav variant="pills" className="flex-column"&amp;gt;
                    &amp;lt;/Nav&amp;gt;
                  &amp;lt;/Col&amp;gt;
                  &amp;lt;Col sm={9}&amp;gt;
                    &amp;lt;Tab.Content&amp;gt;
                    &amp;lt;/Tab.Content&amp;gt;
                  &amp;lt;/Col&amp;gt;
                &amp;lt;/Row&amp;gt;
        &amp;lt;Tab.Container
      &amp;lt;/Container&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, you create a &lt;a href="https://react-bootstrap.github.io/components/tabs/#tabs-custom-layout"&gt;custom vertical tab layout&lt;/a&gt; using React Bootstrap. This will allow you to show the different QR Code types on the left, and the content necessary for that type on the right.&lt;/p&gt;

&lt;p&gt;You also create the state variable &lt;code&gt;qrText&lt;/code&gt; which will hold the text to generate a QR Code. When the &lt;code&gt;qrText&lt;/code&gt; is not empty, the &lt;code&gt;QRCode&lt;/code&gt; component from the library &lt;code&gt;react-qr-code&lt;/code&gt; will show the QR Code for that text.&lt;/p&gt;

&lt;p&gt;In the next parts, you'll create components for 10 types of QR Codes. After creating each component, a tab will be added to it nested in &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;, and the component will be added as a tab-pane nested inside &lt;code&gt;&amp;lt;Tab.Content&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The components will be placed inside a new directory &lt;code&gt;components&lt;/code&gt; nested inside &lt;code&gt;src&lt;/code&gt;, so make sure to create that directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plain-texturls-qr-codes"&gt;
  &lt;/a&gt;
  Plain Text/URLs QR Codes
&lt;/h2&gt;

&lt;p&gt;The most common QR Code type is a URL QR Code type. When a person scans the QR Code they'll be led to a webpage that this QR Code points to.&lt;/p&gt;

&lt;p&gt;You can actually create a QR Code for any kind of text. It doesn't need to be a URL.&lt;/p&gt;

&lt;p&gt;In this section, you'll create a component that takes text or URL and generate the QR Code for it.&lt;/p&gt;

&lt;p&gt;Create the file &lt;code&gt;src/components/Text.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form } from "react-bootstrap";

function Text ({ setQrText }) {
  const [text, setText] = useState('');

  function handleSubmit (e) {
    e.preventDefault();

    setQrText(text);

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Text or URL&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={text} onChange={(e) =&amp;gt; setText(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Text
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Text&lt;/code&gt; component receives as a prop the function &lt;code&gt;setQrText&lt;/code&gt;, which will be used to set the text to be encoded as QR Code. Then, a form with one input "Text or URL" will be shown to the user.&lt;/p&gt;

&lt;p&gt;Once the user enters the text or URL they want and clicks on the button "Generate", the text will be set with &lt;code&gt;setQrText&lt;/code&gt;. This will change the value of &lt;code&gt;qrText&lt;/code&gt; in the &lt;code&gt;App&lt;/code&gt; component, which will show a QR Code for that text.&lt;/p&gt;

&lt;p&gt;Next, add the link for this new tab in &lt;code&gt;src/App.js&lt;/code&gt; nested in &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav&amp;gt;
    &amp;lt;Nav.Item&amp;gt;
        &amp;lt;Nav.Link eventKey="text"&amp;gt;Text and URLs&amp;lt;/Nav.Link&amp;gt;
    &amp;lt;/Nav.Item&amp;gt;
&amp;lt;/Nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the new Tab pane nested in &lt;code&gt;Tab.Content&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Content&amp;gt;
    &amp;lt;Tab.Pane eventKey="text"&amp;gt;
        &amp;lt;Text setQrText={setQrText} /&amp;gt;
    &amp;lt;/Tab.Pane&amp;gt;
&amp;lt;/Tab.Content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to import the new &lt;code&gt;Text&lt;/code&gt; component at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Text from './components/Text'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test it out. Run the server with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run the server on &lt;code&gt;localhost:3000&lt;/code&gt; and the website will open in a browser. You should see one tab on the left and on the right a form that shows one text field with a button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ABzsBnWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-21-at-7.13.31-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABzsBnWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-21-at-7.13.31-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="151"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try entering any text or URL. You should see a QR code generated at the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQmFypUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-5.41.49-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQmFypUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-5.41.49-PM.png" alt="Generate 10 QR Code Types with React" width="650" height="720"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you try to scan the QR Code with your phone, you should either see the text you entered or see a URL to go to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#geolocation-qr-codes"&gt;
  &lt;/a&gt;
  GeoLocation QR Codes
&lt;/h2&gt;

&lt;p&gt;QR Codes can be used to share a location with others. When the QR Code is scanned, the person will see the location on Google Maps.&lt;/p&gt;

&lt;p&gt;The format of this QR Code's encoded value is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://maps.google.com/maps?q={lat},{long}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;{lat}&lt;/code&gt; is the latitude and &lt;code&gt;{long}&lt;/code&gt; is the longitude of the location.&lt;/p&gt;

&lt;p&gt;In this section, you'll create a component that shows the user 2 fields Longitude and Latitude to allow them to generate a QR Code for that location. You'll also add the functionality to automatically add the latitude and longitude of their location.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;src/components/Geolocation.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form, Spinner } from "react-bootstrap";

function Geolocation ({ setQrText }) {
  const [lat, setLat] = useState('');
  const [long, setLong] = useState('');
  const [locationLoading, setLocationLoading] = useState(false);

  function getCurrentLocation () {
    setLocationLoading(true);
    navigator.geolocation.getCurrentPosition((pos) =&amp;gt; {
      setLat(pos.coords.latitude);
      setLong(pos.coords.longitude);
      setLocationLoading(false);
    }, (err) =&amp;gt; {
      alert(err.message);
      setLocationLoading(false);
    }, {
      enableHighAccuracy: true
    });
  }

  function handleSubmit (e) {
    e.preventDefault();

    setQrText('http://maps.google.com/maps?q=' + lat + ','+ long);

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Latitude&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={lat} onChange={(e) =&amp;gt; setLat(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Longitude&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={long} onChange={(e) =&amp;gt; setLong(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="secondary" type="button" className="me-2" disabled={locationLoading} onClick={getCurrentLocation}&amp;gt;
        {locationLoading &amp;amp;&amp;amp; &amp;lt;Spinner animation="border" className="me-2 align-middle" /&amp;gt;}
        Set Current Location
      &amp;lt;/Button&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Geolocation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component, similar to the previous one, receives the &lt;code&gt;setQrText&lt;/code&gt; function as a prop. 3 state variables are defined. &lt;code&gt;lat&lt;/code&gt; to hold the latitude value entered in the Latitude field, &lt;code&gt;long&lt;/code&gt; to hold the longitude value entered in the Longitude field, and &lt;code&gt;locationLoading&lt;/code&gt; to show a loading spinner when fetching the user's current location.&lt;/p&gt;

&lt;p&gt;the &lt;code&gt;getCurrentLocation&lt;/code&gt; is executed when the user clicks on &lt;code&gt;Set Current Location&lt;/code&gt;. You first have to obtain the user's permission to get access to their location, then, when permitted, set the &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; state variables based on the coordinates obtained.&lt;/p&gt;

&lt;p&gt;Finally, when the form is submitted, the &lt;code&gt;qrText&lt;/code&gt; is set using &lt;code&gt;setQrText&lt;/code&gt; to the format shown before using &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;lang&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You just need to add the new tab in &lt;code&gt;App.js&lt;/code&gt; just like you did in the previous section under &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav.Item&amp;gt;
    &amp;lt;Nav.Link eventKey="geo"&amp;gt;GeoLocation&amp;lt;/Nav.Link&amp;gt;
&amp;lt;/Nav.Item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the new component as a tab-pane under &lt;code&gt;&amp;lt;Tab.Content&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Pane eventKey="geo"&amp;gt;
    &amp;lt;Geolocation setQrText={setQrText} /&amp;gt;
&amp;lt;/Tab.Pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, of course, import the component at the beginning of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Geolocation from './components/Geolocation'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test it out. Run the server if it isn't already running. You'll see a new tab "GeoLocation". When you click on the tab, you'll see 2 fields with 2 buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Z9ZQhxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-5.51.26-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Z9ZQhxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-5.51.26-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try entering a Latitude and Longitude, or set your current location with the "Set Current Location" button. When you click "Generate", a new QR Code will be generated.&lt;/p&gt;

&lt;p&gt;If you try scanning the QR Code and if you have Google Maps installed, you'll see that you can open the QR Code directly in Google Maps and you'll see the location specified in the QR Code's value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calendar-qr-codes"&gt;
  &lt;/a&gt;
  Calendar QR Codes
&lt;/h2&gt;

&lt;p&gt;QR codes can be used to add events to a calendar. Using this QR Code, you can make it easier for your users or customers to remember events by easily scanning the QR Code and adding the event to their calendar.&lt;/p&gt;

&lt;p&gt;The text format for a Calendar QR Code is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BEGIN:VCALENDAR\nBEGIN:VEVENT\nDTSTART:{start-date}\nDTEND:{end-date}\nSUMMARY:{title}\nEND:VEVENT\nEND:VCALENDAR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks like a bunch of gibberish at first glance, but you can see that you're just specifying the start date, the end date, and the title of the event. Note that the start and end date are of the format &lt;code&gt;YYYYMMDD&lt;/code&gt; with no separation between any of them.&lt;/p&gt;

&lt;p&gt;In this section, you'll create a component that shows the user 3 fields, one for the start date, one for the end date, and one for the title.&lt;/p&gt;

&lt;p&gt;Create the file &lt;code&gt;/src/components/Calendar.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form } from "react-bootstrap";

function Calendar ({ setQrText }) {
  const [title, setTitle] = useState('');
  const [dateStart, setDateStart] = useState('');
  const [dateEnd, setDateEnd] = useState('');

  function handleSubmit (e) {
    e.preventDefault();

    const dateStartFormatted = dateStart.replace(/-/g, "");
    const dateEndFormatted = dateEnd.replace(/-/g, "")

    setQrText(`BEGIN:VCALENDAR\nBEGIN:VEVENT\nDTSTART:${dateStartFormatted}\nDTEND:${dateEndFormatted}\nSUMMARY:${title}\nEND:VEVENT\nEND:VCALENDAR`);

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Title&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={title} onChange={(e) =&amp;gt; setTitle(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Start Date&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="date" value={dateStart} onChange={(e) =&amp;gt; setDateStart(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;End Date&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="date" value={dateEnd} onChange={(e) =&amp;gt; setDateEnd(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Calendar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component defines 3 state variables: &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;dateStart&lt;/code&gt;, and &lt;code&gt;dateEnd&lt;/code&gt;. When the user enters the values into the fields and clicks "Generate", &lt;code&gt;qrText&lt;/code&gt; will be set to the format stated above, with the values used in their specific places.&lt;/p&gt;

&lt;p&gt;Just like you did in previous sections, go to &lt;code&gt;src/App.js&lt;/code&gt; and add a new tab under &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav.Item&amp;gt;
    &amp;lt;Nav.Link eventKey="calendar"&amp;gt;Calendar&amp;lt;/Nav.Link&amp;gt;
&amp;lt;/Nav.Item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the component as a tab-pane under &lt;code&gt;Tab.Content&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Pane eventKey="calendar"&amp;gt;
    &amp;lt;Calendar setQrText={setQrText} /&amp;gt;
&amp;lt;/Tab.Pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And import the &lt;code&gt;Calendar&lt;/code&gt; component at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Calendar from './components/Calendar'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open the website. You should see a new tab "Calendar". Click on it and 3 fields will show up for the start date, end date, and title.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ue32YxMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.04.20-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ue32YxMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.04.20-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try entering values for these fields then click "Generate". If you scan the QR Code generated you should be able to open your calendar and add an event with the title, start date, and end date you entered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mail-qr-codes"&gt;
  &lt;/a&gt;
  Mail QR Codes
&lt;/h2&gt;

&lt;p&gt;QR Codes can be used to allow your users or customers to easily email you. When they scan the QR Code, they can open a mail app with the to, subject, and message field already filled.&lt;/p&gt;

&lt;p&gt;The format of a mail QR code is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MATMSG:TO:{to};SUB:{subject};BODY:{message};;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;{to}&lt;/code&gt; is the email address this mail should be sent to, &lt;code&gt;{subject}&lt;/code&gt; is the subject of the email, and &lt;code&gt;{message}&lt;/code&gt; is the message to include in the body.&lt;/p&gt;

&lt;p&gt;In this section, you'll create a Mail component with 3 fields: To, Subject and Message. You'll then generate the QR Code using the values of these fields.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;src/components/Mail.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form } from "react-bootstrap";

function Mail ({ setQrText }) {
  const [to, setTo] = useState('');
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');

  function handleSubmit (e) {
    e.preventDefault();

    setQrText(`MATMSG:TO:${to};SUB:${subject};BODY:${message};;`);

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;To Email&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="email" value={to} onChange={(e) =&amp;gt; setTo(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Subject&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={subject} onChange={(e) =&amp;gt; setSubject(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Message&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control as="textarea" value={message} onChange={(e) =&amp;gt; setMessage(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Mail
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to before, this creates 3 fields managed by 3 states, and when the "Generate" button is clicked the QR code will be generated using the format mentioned above.&lt;/p&gt;

&lt;p&gt;Add the new tab in &lt;code&gt;src/App.js&lt;/code&gt; in &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav.Item&amp;gt;
    &amp;lt;Nav.Link eventKey="mail"&amp;gt;Mail&amp;lt;/Nav.Link&amp;gt;
&amp;lt;/Nav.Item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the tab-pane in &lt;code&gt;&amp;lt;Tab.Control&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Pane eventKey="mail"&amp;gt;
    &amp;lt;Mail setQrText={setQrText} /&amp;gt;
&amp;lt;/Tab.Pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, import the &lt;code&gt;Mail&lt;/code&gt; component at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Mail from './components/Mail'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the website now and you should see a new Mail tab. Click on the tab and you'll see 3 fields with a button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Anx1Khy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-21-at-7.48.46-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Anx1Khy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-21-at-7.48.46-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter values in these fields then click Generate. If you scan the QR code that is generated, you'll see that you can open a mail app and send an email with these fields prefilled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#call-qr-code"&gt;
  &lt;/a&gt;
  Call QR Code
&lt;/h2&gt;

&lt;p&gt;QR Codes can be used to let your users or customers easily call you just by scanning the QR code.&lt;/p&gt;

&lt;p&gt;The format for Call QR Code is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TEL:{phone_number}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;{phone_number}&lt;/code&gt; is the phone number that the person will call when they scan the QR code.&lt;/p&gt;

&lt;p&gt;In this section, you'll create a component that shows the user a field to enter their phone number, then generate the QR Code for it.&lt;/p&gt;

&lt;p&gt;Create the file &lt;code&gt;src/components/Call.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form } from "react-bootstrap";

function Call ({ setQrText }) {
  const [phoneNumber, setPhoneNumber] = useState('');

  function handleSubmit (e) {
    e.preventDefault();

    setQrText("TEL:" + phoneNumber);

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Phone Number&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={phoneNumber} onChange={(e) =&amp;gt; setPhoneNumber(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Call
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to other components, this component has 1 state variable with a field to change its value. Then, on the form's submission, the text for the QR code is set to the format mentioned above.&lt;/p&gt;

&lt;p&gt;Add in &lt;code&gt;src/App.js&lt;/code&gt; the tab for "Call":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav.Item&amp;gt;
    &amp;lt;Nav.Link eventKey="call"&amp;gt;Call&amp;lt;/Nav.Link&amp;gt;
&amp;lt;/Nav.Item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add a tab-pane for the &lt;code&gt;Call&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Pane eventKey="call"&amp;gt;
    &amp;lt;Call setQrText={setQrText} /&amp;gt;
&amp;lt;/Tab.Pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, import &lt;code&gt;Call&lt;/code&gt; at the beginning of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Call from './components/Call'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the website. You should see a new "Call" tab. If you click on it, you'll see one field for the phone number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N146V4sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.17.16-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N146V4sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.17.16-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enter a phone number, click "Generate", then scan the QR Code, you'll be able to directly call the phone number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sms-qr-code"&gt;
  &lt;/a&gt;
  SMS QR Code
&lt;/h2&gt;

&lt;p&gt;QR Codes can be used to easily send SMS. You can show your users or customer a QR Code with your number and a prefilled message. When they scan it, they can directly open the messaging app and send a text message to the number with the message right away.&lt;/p&gt;

&lt;p&gt;The format for SMS QR Codes is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;smsto:{phoneNumber}:{message}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;{phoneNumber}&lt;/code&gt; is the phone number to send the SMS to, and &lt;code&gt;{message}&lt;/code&gt; is the prefilled message. The &lt;code&gt;{message}&lt;/code&gt; is optional. So, you can just have the phone number and the user will be able to send you a message without prefilled content.&lt;/p&gt;

&lt;p&gt;In this section, you'll create a component that shows the user 2 fields, one for phone number and one for the message content.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;src/components/Sms.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form } from "react-bootstrap";

function Sms ({ setQrText }) {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [message, setMessage] = useState('');

  function handleSubmit (e) {
    e.preventDefault();

    setQrText(`smsto:${phoneNumber}:${message}`);

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Phone Number&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={phoneNumber} onChange={(e) =&amp;gt; setPhoneNumber(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Message (Optional)&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={message} onChange={(e) =&amp;gt; setMessage(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Sms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like previous components, this component has 2 state variables for the phone number and message, then on form submission sets the text for the QR Code in the format mentioned above.&lt;/p&gt;

&lt;p&gt;Add the tab in &lt;code&gt;src/App.js&lt;/code&gt; under &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav.Item&amp;gt;
    &amp;lt;Nav.Link eventKey="sms"&amp;gt;SMS&amp;lt;/Nav.Link&amp;gt;
&amp;lt;/Nav.Item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the tab-pane for the &lt;code&gt;Sms&lt;/code&gt; component under &lt;code&gt;Tab.Content&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Pane eventKey="sms"&amp;gt;
    &amp;lt;Sms setQrText={setQrText} /&amp;gt;
&amp;lt;/Tab.Pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, import the component at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Sms from './components/Sms'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the website now and click on the new "SMS" tab. You'll see 2 fields for phone number and message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFLW8SkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-21-at-7.52.45-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFLW8SkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-21-at-7.52.45-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the phone number and optionally the message, click Generate, then scan the QR code. You'll be able to open the messaging app with the number and the message (if you entered one) filled in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wifi-qr-codes"&gt;
  &lt;/a&gt;
  Wifi QR Codes
&lt;/h2&gt;

&lt;p&gt;QR Codes can be used to easily connect to a Wifi network. When a person scans the QR code, they can join the network.&lt;/p&gt;

&lt;p&gt;The Wifi QR code has the following format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WIFI:T:{authentication};S:{name};P:{password};H:{hidden};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;{authentication}&lt;/code&gt; can either be &lt;code&gt;nopass&lt;/code&gt;, &lt;code&gt;WPA&lt;/code&gt; or &lt;code&gt;WEP&lt;/code&gt;. &lt;code&gt;{name}&lt;/code&gt; is the name or SSID of the network. &lt;code&gt;{password}&lt;/code&gt; is the password of the network and optional. &lt;code&gt;{hidden}&lt;/code&gt; is a boolean value (true or false) that indicates whether this network is hidden or not.&lt;/p&gt;

&lt;p&gt;In this section, you'll create a component that shows the user 4 components for the 4 fields mentioned above, then generates the QR code for it.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;src/components/Wifi.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form } from "react-bootstrap";

function Wifi ({ setQrText }) {
  const [authentication, setAuthentication] = useState('nopass');
  const [name, setName] = useState('');
  const [password, setPassword] = useState('');
  const [hidden, setHidden] = useState(false);

  function handleSubmit (e) {
    e.preventDefault();

    setQrText(`WIFI:T:${authentication};S:${name};${authentication !== 'nopass' ? `P:${password};` : ''}H:${hidden};`);

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Authentication type&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Select value={authentication} aria-label="Authentication" onChange={(e) =&amp;gt; setAuthentication(e.target.value)}&amp;gt;
          &amp;lt;option value="nopass"&amp;gt;No Password&amp;lt;/option&amp;gt;
          &amp;lt;option value="WEP"&amp;gt;WEP&amp;lt;/option&amp;gt;
          &amp;lt;option value="WPA"&amp;gt;WPA&amp;lt;/option&amp;gt;
        &amp;lt;/Form.Select&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Network Name (SSID)&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={name} onChange={(e) =&amp;gt; setName(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Password (Optional)&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="password" value={password} onChange={(e) =&amp;gt; setPassword(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Hidden?&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Check 
          type={'checkbox'}
          checked={hidden}
          onChange={(e) =&amp;gt; setHidden(e.target.checked)}
        /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Wifi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add in &lt;code&gt;src/App.js&lt;/code&gt; the tab in &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav.Item&amp;gt;
    &amp;lt;Nav.Link eventKey="wifi"&amp;gt;Wifi&amp;lt;/Nav.Link&amp;gt;
&amp;lt;/Nav.Item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add &lt;code&gt;Wifi&lt;/code&gt; as a tab-pane in &lt;code&gt;&amp;lt;Tab.Content&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Pane eventKey="wifi"&amp;gt;
    &amp;lt;Wifi setQrText={setQrText} /&amp;gt;
&amp;lt;/Tab.Pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, import &lt;code&gt;Wifi&lt;/code&gt; at the beginning of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Wifi from './components/Wifi'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you open the website and click on the Wifi tab, you should see 4 fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pTPVvNCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.32.19-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTPVvNCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.32.19-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter values for the fields then click Generate. If you scan the generated QR Code, you'll be able to automatically connect to the Wifi network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube-qr-codes"&gt;
  &lt;/a&gt;
  YouTube QR Codes
&lt;/h2&gt;

&lt;p&gt;QR Codes can be used to easily open a YouTube video. They have the following format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;youtube://{videoId}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;{videoId}&lt;/code&gt; is the ID of a video. You can obtain the ID of a video from the &lt;code&gt;v&lt;/code&gt; parameter in the URL of the video:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.youtube.com/watch?v={videoId}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll create in this section a component that shows a field for the video's ID then generate the QR code for it.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;js/components/Youtube.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form } from "react-bootstrap";

function Youtube ({ setQrText }) {
  const [videoId, setVideoId] = useState('');

  function handleSubmit (e) {
    e.preventDefault();

    setQrText('youtube://' + videoId);

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Video ID&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={videoId} onChange={(e) =&amp;gt; setVideoId(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Youtube
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the new tab in &lt;code&gt;src/App.js&lt;/code&gt; inside &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav.Item&amp;gt;
    &amp;lt;Nav.Link eventKey="youtube"&amp;gt;Youtube&amp;lt;/Nav.Link&amp;gt;
&amp;lt;/Nav.Item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the tab-pane for YouTube:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Pane eventKey="youtube"&amp;gt;
    &amp;lt;Youtube setQrText={setQrText} /&amp;gt;
&amp;lt;/Tab.Pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, import the &lt;code&gt;Youtube&lt;/code&gt; component at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Youtube from './components/Youtube'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the website and click on the Youtube tab. You'll see one field to enter the video ID.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qcgotA6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.36.53-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qcgotA6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.36.53-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="135"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter a video's ID then click Generate. If you scan the QR code, you can open the video in the YouTube app right away.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instagram-qr-codes"&gt;
  &lt;/a&gt;
  Instagram QR Codes
&lt;/h2&gt;

&lt;p&gt;QR Codes can be used to lead people to your Instagram account. The format is just like a URL to your profile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://instagram.com/{username}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;{username}&lt;/code&gt; is the username of the profile to open in the Instagram app.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;src/components/Instagram.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form } from "react-bootstrap";

function Instagram ({ setQrText }) {
  const [username, setUsername] = useState('');

  function handleSubmit (e) {
    e.preventDefault();

    setQrText('https://instagram.com/' + username);

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Username&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={username} onChange={(e) =&amp;gt; setUsername(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Instagram
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;src/App.js&lt;/code&gt; add the new tab under &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav.Item&amp;gt;
    &amp;lt;Nav.Link eventKey="instagram"&amp;gt;Instagram&amp;lt;/Nav.Link&amp;gt;
&amp;lt;/Nav.Item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the new tab-pane for &lt;code&gt;Instagram&lt;/code&gt; under &lt;code&gt;&amp;lt;Tab.Content&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Pane eventKey="instagram"&amp;gt;
    &amp;lt;Instagram setQrText={setQrText} /&amp;gt;
&amp;lt;/Tab.Pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, import &lt;code&gt;Instagram&lt;/code&gt; at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Instagram from './components/Instagram'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the website and click on the Instagram tab. You'll see a field to enter your username.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gubQiRsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.40.28-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gubQiRsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.40.28-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter a username and click on Generate. If you scan the generated QR code, you can open the username's profile right away in the Instagram app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitter-qr-codes"&gt;
  &lt;/a&gt;
  Twitter QR Codes
&lt;/h2&gt;

&lt;p&gt;QR Codes can be used to lead people to your Twitter profile or to Tweet something.&lt;/p&gt;

&lt;p&gt;The format to lead to a Twitter profile is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://twitter.com/{username}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is similar to Instagram. When the QR Code for this text is scanned, the profile for &lt;code&gt;{username}&lt;/code&gt; will be opened in the Twitter app.&lt;/p&gt;

&lt;p&gt;The format to allow people to Tweet something with prefilled content is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://twitter.com/intent/tweet?text={content}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;{content}&lt;/code&gt; is the content of the tweet.&lt;/p&gt;

&lt;p&gt;In this section, you'll create a component with 2 fields, one to determine the type of Twitter QR Code, and one for the content of the text.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;src/components/Twitter.js&lt;/code&gt; with the following text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import { Button, Form } from "react-bootstrap";

function Twitter ({ setQrText }) {
  const [type, setType] = useState('profile')
  const [text, setText] = useState('');

  function handleSubmit (e) {
    e.preventDefault();

    setQrText('https://twitter.com/' + (type === 'profile' ? text : 'intent/tweet?text=' + text));

    return false;
  }

  return (
    &amp;lt;Form onSubmit={handleSubmit}&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Type&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Select value={type} aria-label="Type" onChange={(e) =&amp;gt; setType(e.target.value)}&amp;gt;
          &amp;lt;option value="profile"&amp;gt;Profile&amp;lt;/option&amp;gt;
          &amp;lt;option value="tweet"&amp;gt;Tweet&amp;lt;/option&amp;gt;
        &amp;lt;/Form.Select&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Form.Group className="mb-3"&amp;gt;
        &amp;lt;Form.Label&amp;gt;Username or Tweet Text&amp;lt;/Form.Label&amp;gt;
        &amp;lt;Form.Control type="text" value={text} onChange={(e) =&amp;gt; setText(e.target.value)} /&amp;gt;
      &amp;lt;/Form.Group&amp;gt;
      &amp;lt;Button variant="primary" type="submit"&amp;gt;
        Generate
      &amp;lt;/Button&amp;gt;
    &amp;lt;/Form&amp;gt;
  )
}

export default Twitter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;src/App.js&lt;/code&gt; add the new tab in &lt;code&gt;&amp;lt;Nav&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Nav.Item&amp;gt;
    &amp;lt;Nav.Link eventKey="twitter"&amp;gt;Twitter&amp;lt;/Nav.Link&amp;gt;
&amp;lt;/Nav.Item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the &lt;code&gt;Twitter&lt;/code&gt; component in &lt;code&gt;&amp;lt;Tab.Content&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Tab.Pane eventKey="twitter"&amp;gt;
    &amp;lt;Twitter setQrText={setQrText} /&amp;gt;
&amp;lt;/Tab.Pane&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, import the &lt;code&gt;Twitter&lt;/code&gt; component at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Twitter from './components/Twitter'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the website now and click on the Twitter tab. You'll see 2 fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TPv2mD8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.45.48-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPv2mD8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/12/Screen-Shot-2021-12-22-at-7.45.48-PM.png" alt="Generate 10 QR Code Types with React" width="880" height="214"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose one of the types and enter the text based on what you chose, then click Generate. If you scan the QR code, based on the type you chose you'll either be led to the user's profile or to tweet something with the text you entered prefilled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;QR Codes simplify doing certain actions and allow people to easily interact with your websites, products, or services. These 10 QR code types are just some of the actions you can let users perform, and you can easily generate QR codes in JavaScript, specifically React, using the react-qr-code library.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Good News and Bad News, Pivot and Turn - Building DDTJ Day 6</title>
      <author>Shai Almog</author>
      <pubDate>Mon, 27 Dec 2021 10:52:41 +0000</pubDate>
      <link>https://dev.to/codenameone/good-news-and-bad-news-pivot-and-turn-building-ddtj-day-6-1pl4</link>
      <guid>https://dev.to/codenameone/good-news-and-bad-news-pivot-and-turn-building-ddtj-day-6-1pl4</guid>
      <description>&lt;p&gt;Last week I &lt;a href="https://dev.to/codenameone/series/15971"&gt;spent 5 days building and designing&lt;/a&gt; the &lt;a href="https://github.com/ddtj/ddtj"&gt;DDTJ project&lt;/a&gt;. Hopefully, I’ll complete the MVP by this weekend. As we left the series last week, I was stuck. This week there’s a bit of an improvement…&lt;/p&gt;

&lt;p&gt;There are a lot of variations on the good news/bad news joke. I’m sure you all know some form of it… Here’s a programming oriented one: &lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;developer: so i have good news and bad news&lt;br&gt;&lt;br&gt;manager: what's the good news?&lt;br&gt;&lt;br&gt;developer: i've discovered that the "5 second rule" only applies to food&lt;br&gt;&lt;br&gt;manager: and the bad news?&lt;br&gt;&lt;br&gt;developer: i dropped our tables&lt;/p&gt;— Kat Maddox (&lt;a class="mentioned-user" href="https://dev.to/ctrlshifti"&gt;@ctrlshifti&lt;/a&gt;) &lt;a href="https://twitter.com/ctrlshifti/status/1352103674030432257?ref_src=twsrc%5Etfw"&gt;January 21, 2021&lt;/a&gt;
&lt;/blockquote&gt;  

&lt;p&gt;In that spirit, I’ve made some progress and we are now collecting some data… The bad news: I had to throw away a lot of concepts and performance is roughly 700x worse than without our instrumentation. Ugh.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-did-i-get-here"&gt;
  &lt;/a&gt;
  How did I get Here?
&lt;/h2&gt;

&lt;p&gt;Last week I was still modeling the objects stored locally when debugging the remote VM. As you may recall, the debug API needs to copy objects locally so we can later on analyze them. We can’t leave this in the target VM as the data will get lost as the VM continues.&lt;/p&gt;

&lt;p&gt;I created a data model and implemented a debugger of sorts that effectively automatically debugs the application and stores all the data. Unfortunately, this isn’t as simple as one would hope.&lt;/p&gt;

&lt;p&gt;Initially, I thought I’d use the step over API to review individual lines. This includes some problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don’t know what a line contains without looking at the source/bytecode and I don’t want to get into that complexity&lt;/li&gt;
&lt;li&gt;I can’t have two instances of a step over monitor at the same time. This is something I’ll need for nested method calls, threads, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So using the approach of stepping over code isn’t practical for this tool…&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#method-enterexit"&gt;
  &lt;/a&gt;
  Method Enter/Exit
&lt;/h3&gt;

&lt;p&gt;Luckily, pretty much any debugging API supports setting a method enter/exit event. This lets us monitor all the important points and log all the relevant information. Perfect… Almost…&lt;/p&gt;

&lt;p&gt;Here’s the problem, say we have code like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;myMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;otherObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;otherMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I’ll get 4 events for this sequence:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Method enter to myMethod
Method enter to otherMethod
Method exit on otherMethod
Method exit on myMethod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, so good. But here’s the thing. I need to log the invocation of &lt;code&gt;otherMethod&lt;/code&gt; inside &lt;code&gt;myMethod&lt;/code&gt; so I can mock that later on. &lt;/p&gt;

&lt;p&gt;How would I do that?&lt;/p&gt;

&lt;p&gt;We need to analyze the data and see the data related to &lt;code&gt;myMethod&lt;/code&gt;’s call hierarchy. &lt;/p&gt;

&lt;p&gt;The solution is to somehow know that the enter event and the exit events are related. Initially, I tried to create the exit event dynamically and restrict it to a specific object instance. But that fails with recursion.&lt;/p&gt;

&lt;p&gt;I’ve tried several approaches. I now have one that works, but it isn’t ideal…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-current-approach"&gt;
  &lt;/a&gt;
  The Current Approach
&lt;/h3&gt;

&lt;p&gt;I create a uniquely repeatable string when method entry occurs. It’s built with roughly this formula:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;threadId + object instance id (if not static) + frame count + callstack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a relatively long string, but it’s unique. We place an object in the map with this as a key when entering a method. Then, when exiting the method, we find the object using an identical key. &lt;/p&gt;

&lt;p&gt;We can now connect the method entry/exit and as a result log all the data we need. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Unfortunately, that isn’t enough. &lt;code&gt;700x&lt;/code&gt; is way above a reasonable &lt;code&gt;10x&lt;/code&gt; or bearable &lt;code&gt;20x&lt;/code&gt; reduction in performance for a debugging environment. Normally we need to stay away from premature optimizations, but if there’s a conceptual flaw in the architecture, we need to understand it. &lt;code&gt;700x&lt;/code&gt; isn’t something we can realistically work with.&lt;/p&gt;

&lt;p&gt;So my next focus is to get the current code in shape for a pull request and then move on to understand the performance implications and what exactly causes this overhead.&lt;/p&gt;

&lt;p&gt;I have a lot of theories on the subject, but experience taught me to ignore them. A lot of times, the things we think are “expensive” turn out to be a tiny bump. The things we discounted end up being the big penalty. A profiler will tell us where time is wasted and I can evaluate based on facts. Right now I don’t want to look. If I do, I won’t be able to stop and it’s important to stop, synchronize with the trunk and move iteratively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;This has been a short post since I’m still pretty busy getting the PR out and bringing the tests up to speed. Once it’s done, I hope to get to the profiling session.&lt;br&gt;
At the current rate, I think my initial goal of having a tool that can generate tests for spring boot might be high for this week. I’ll lower the expectations to debugging a hello world application and generating a simple test case. After everything I’ve been through with this API, it seems like a pretty ambitious goal too.&lt;/p&gt;

&lt;p&gt;If you want to keep up with the latest updates on this series and the many other things I work on then &lt;a href="https://twitter.com/debugagent"&gt;follow me on twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>programming</category>
      <category>architecture</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
