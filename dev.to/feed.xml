<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Expo SDK¬†41</title>
      <author>Expo Team</author>
      <pubDate>Fri, 23 Apr 2021 23:02:17 +0000</pubDate>
      <link>https://dev.to/expo/expo-sdk-41-1f2j</link>
      <guid>https://dev.to/expo/expo-sdk-41-1f2j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRk7PTwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdqsbfehonsots7vahff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRk7PTwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdqsbfehonsots7vahff.png" alt="Stylized number 41"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today we're announcing the release of &lt;strong&gt;Expo SDK 41&lt;/strong&gt;. SDK 41 includes React Native 0.63, the same version as in SDK 40. Thank you to everyone that [helped with beta testing[(&lt;a href="https://blog.expo.io/expo-sdk-41-beta-is-now-available-958edcd78991"&gt;https://blog.expo.io/expo-sdk-41-beta-is-now-available-958edcd78991&lt;/a&gt;). (&lt;em&gt;Curious why we didn't include the recently released React Native 0.64? &lt;a href="https://expo.fyi/react-native-releases"&gt;Learn more&lt;/a&gt;.&lt;/em&gt;)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%EF%B8%8F-highlights"&gt;
  &lt;/a&gt;
  ‚ö°Ô∏è Highlights
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Android apps now target Android R (11 / SDK 30)&lt;/strong&gt;. This comes with some significant changes for location permissions, media library (related to &lt;a href="https://android-doc.github.io/guide/topics/providers/document-provider.html"&gt;StorageAccessFramework&lt;/a&gt;), and constants. Please note that these changes also impact SDK &amp;lt;= 40 projects in Expo Go, but they will not impact SDK &amp;lt;= 40 standalone apps. Refer to &lt;a href="https://expo.fyi/android-r"&gt;expo.fyi/android-r&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The recommended version of react-native-reanimated has been updated to v2&lt;/strong&gt;. If you would like to use v2 features in your app, you need to add the &lt;a href="https://docs.swmansion.com/react-native-reanimated/docs/installation/#babel-plugin"&gt;Reanimated v2 Babel plugin&lt;/a&gt;. You can continue to use v1 features (eg: those used by React Navigation v5) without adding the new Babel plugin. Please note that if you use the new features from v2, you will not be able to use remote JS debugging in your app! If you use v2 APIs, JS debugging is only possible using Flipper and Hermes, which are not yet fully supported in the managed workflow. (&lt;em&gt;We plan to investigate integrating Hermes during the next SDK cycle, but we don't currently expect to have it ready for SDK 42.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;lottie-react-native has been updated to the latest version (3.5.0)&lt;/strong&gt;. Your existing animations should continue to work as before, but if you encounter any issues please &lt;a href="https://github.com/expo/expo/issues"&gt;file an issue&lt;/a&gt; and share the animation file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The new version of react-native-screens (v3) "enables screens" by default&lt;/strong&gt;. If you encounter any related issues, you can report the issue and opt out with &lt;code&gt;enableScreens(false)&lt;/code&gt;. Be sure to update to the latest v4 patch release of React Navigation if you use v4.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improvements were made across the SDK to ensure compatibility with EAS Build&lt;/strong&gt;. A big part of this SDK has been making the necessary underlying changes to support EAS Build for managed projects. You can now use EAS Build with Expo managed apps to reduce the size of your standalone apps by up to 10x! &lt;a href="https://blog.expo.io/eas-build-april-preview-update-ebd7dff9dd25"&gt;Learn more about the latest EAS Build updates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The expo package is now 93% smaller in production and better than ever&lt;/strong&gt;. We've simplified the experience so the¬†&lt;code&gt;.expo&lt;/code&gt; extension is no longer needed (and so we removed it), and neither is the &lt;code&gt;--target bare|managed&lt;/code&gt; flag‚Ää-‚Ääupdates will run in either context provided the native runtime is compatible. We've improved consistency across the managed and bare workflow, removed legacy code, and improved tree-shaking on the package using &lt;code&gt;@expo/metro-config&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To see the full list of new features and fixes, refer to the &lt;a href="https://github.com/expo/expo/blob/master/CHANGELOG.md"&gt;changelog&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#expo%C2%A0go"&gt;
  &lt;/a&gt;
  üè° Expo¬†Go
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We changed sign in to use &lt;code&gt;expo-web-browser&lt;/code&gt; so we can leverage our &lt;a href="https://blog.expo.io/four-new-security-features-to-protect-your-expo-apps-cdf3e409a1b0"&gt;existing web auth flow with two-factor-authentication&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can now see &lt;a href="https://blog.expo.io/expo-organizations-a-simpler-way-to-work-as-a-team-5dc244f0efcb"&gt;teams and organizations&lt;/a&gt; that you are a part of in the &lt;em&gt;Profile&lt;/em&gt; tab, and their associated projects show up in your recent projects below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rY_UGRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wie90orw7gnupg8pq5u8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rY_UGRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wie90orw7gnupg8pq5u8.png" alt="Accounts &amp;amp; Organizations screenshot on mobile phones"&gt;&lt;/a&gt;Notice the "Accounts &amp;amp; Organizations" section and the shared "Recent Projects" list below¬†it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#expo%C2%A0cli"&gt;
  &lt;/a&gt;
  üåê Expo¬†CLI
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Integrated Developer Tools&lt;/strong&gt;: Open the developer menu, inspect elements, and monitor performance all from the CLI. Just run &lt;code&gt;expo start&lt;/code&gt; then press "m" to toggle the dev menu, and "shift+M" to toggle the performance monitor or element inspector across native apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iZ8FwgDy2Ek"&gt;
&lt;/iframe&gt;It was either a heavily compressed but still 7mb gif or a YouTube video, so we went for the YouTube video.
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Force Reloading&lt;/strong&gt;: Shaking your devices every few minutes can get exhausting! Now you can reload connected phones, tablets, simulators, and browsers all by pressing "r" in the Terminal UI. This works across iOS, Android, web, and on physical devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wIH0OEmLgy8"&gt;
&lt;/iframe&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Automatic TypeScript setup&lt;/strong&gt;: Setting up TypeScript can be a pain, so we've completely automated it! Just create a blank &lt;code&gt;tsconfig.json&lt;/code&gt; and run &lt;code&gt;expo start&lt;/code&gt;, we'll take care of the rest! Learn more: &lt;a href="https://docs.expo.io/guides/typescript/"&gt;"TypeScript" in the Expo docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cUhwuPif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neum1v776b28igfd16j7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cUhwuPif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neum1v776b28igfd16j7.gif" alt="GIF of following the instructions in a terminal window"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Vastly better errors&lt;/strong&gt;: No one likes errors‚Ää-‚Ääthat's why in SDK 41 we've refined them to be as concise, and useful as possible! We only surface the most relevant stack traces and point to exactly where the error or warning is. We've also improved source maps, and muted generated code traces.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQMd8Qrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmyabirypop0bk95ncma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQMd8Qrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmyabirypop0bk95ncma.png" alt="before and after screenshots of error log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Debug your config&lt;/strong&gt;: The new &lt;code&gt;expo config&lt;/code&gt; command enables you to view the evaluated results of &lt;code&gt;app.config.js&lt;/code&gt; or &lt;code&gt;app.json&lt;/code&gt;. You can use &lt;code&gt;expo config --type public&lt;/code&gt; to see the app manifest used in &lt;code&gt;expo publish&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Better interactions with Apple Store Connect from your terminal&lt;/strong&gt;: Faster, smarter authentication, better error handling, and‚Ää-‚Ääfor the first time ever‚Ää-‚Ääget full insight into complex issues right from the console. Where other tools &lt;code&gt;401&lt;/code&gt;, Expo CLI gives you links to resolve issues in seconds. Need to update your payment or accept a contract? Resolve in a couple clicks, and get back to developing incredible (or at least "good") apps!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rlZrXXRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfyffordonfzzjrxbmb9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlZrXXRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfyffordonfzzjrxbmb9.png" alt="A terminal window showing information about a rejected request from App Store Connect due to an expired Developer Program membership."&gt;&lt;/a&gt;A terminal window showing information about a rejected request from App Store Connect due to an expired Developer Program membership.&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The --config is flag deprecated&lt;/strong&gt;. We suggest using &lt;code&gt;app.config.js&lt;/code&gt; instead. The &lt;code&gt;--config&lt;/code&gt; flag will continue to be supported for existing use cases for the foreseeable future, but it will not be supported in some situations in bare workflow projects, and it will also not be supported on EAS Build. Learn more: &lt;a href="https://expo.fyi/config-flag-migration"&gt;Migrating away from &lt;code&gt;--config&lt;/code&gt; in Expo CLI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The &lt;code&gt;--target flag&lt;/code&gt; is deprecated for SDK 41+&lt;/strong&gt;. This was used to provide slightly different behavior when in a managed or bare app environment, but it ended up being tricky to use because updates published with the &lt;code&gt;bare&lt;/code&gt; target could not run in Expo Go, and updates published with the &lt;code&gt;managed&lt;/code&gt; target could not run in a bare app. We now do any necessary adjustments to accommodate the environment at runtime, so an update bundle will work in either context, provided that the native runtime is compatible with the update.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Versioned Metro Config&lt;/strong&gt;: Rather than adding &lt;code&gt;@expo/metro-config&lt;/code&gt; to your &lt;code&gt;package.json&lt;/code&gt;, you can now import it through the expo package with the vendored &lt;code&gt;expo/metro-config&lt;/code&gt; import. This ensures that your project is always using a compatible version of the package. Learn More: &lt;a href="https://docs.expo.io/guides/customizing-metro/"&gt;Customizing Metro&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Introducing Config Plugins (beta)&lt;/strong&gt;: Config plugins are an important step towards making it possible for library authors to make their native modules part of the Expo ecosystem. This system is in beta, with a more stable release planned for SDK 42. Learn more: &lt;a href="https://docs.expo.io/guides/config-plugins/"&gt;Config Plugins&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#%F0%9F%8F%97-deprecations-renamings-and%C2%A0removals"&gt;
  &lt;/a&gt;
  üèó Deprecations, renamings, and¬†removals
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Deprecated globals have been removed from the expo¬†package&lt;/strong&gt;.As a result, &lt;code&gt;expo-linear-gradient&lt;/code&gt;, &lt;code&gt;expo-linking&lt;/code&gt;, &lt;code&gt;expo-location&lt;/code&gt;, &lt;code&gt;expo-permissions&lt;/code&gt;, and &lt;code&gt;expo-sqlite&lt;/code&gt; are no longer automatically installed in every project by default as dependencies of &lt;code&gt;expo&lt;/code&gt;. If you were depending on &lt;code&gt;global.expo.LinearGradient&lt;/code&gt; or similar, please install the respective package and import the API from there instead, eg: &lt;code&gt;import { LinearGradient } from 'expo-linear-gradient';&lt;/code&gt;. Refer to &lt;a href="http://expo.fyi/deprecated-globals"&gt;expo.fyi/deprecated-globals&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Files with the¬†.expo.* extension (eg: MyComponent.expo.js) are no longer recognized as source¬†files.&lt;/strong&gt; If your project source code or dependencies include any files with the¬†&lt;code&gt;.expo.*&lt;/code&gt; extension, &lt;code&gt;expo-cli&lt;/code&gt; will let you know when you upgrade. Refer to &lt;a href="//expo.fyi/expo-extension-migration"&gt;expo.fyi/expo-extension-migration&lt;/a&gt; for more information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcuqhJVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp1jqobz7hzu1t6kd0ll.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcuqhJVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp1jqobz7hzu1t6kd0ll.png" alt="Terminal window showing a warning that projects with .expo.* file extensions are deprecated"&gt;&lt;/a&gt;We thought the¬†.expo file extension was neat but it ended up not being necessary or particularly useful, and simplicity wins over neat¬†things.&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;expo-permissions has been deprecated in favor of module-specific permissions methods.&lt;/strong&gt; You should migrate from using &lt;code&gt;Permissions.askAsync&lt;/code&gt; and &lt;code&gt;Permissions.getAsync&lt;/code&gt; to the permissions methods exported by modules that require the permissions. For example: you should replace calls to &lt;code&gt;Permissions.askAsync(Permissions.CAMERA)&lt;/code&gt; with &lt;code&gt;Camera.requestPermissionsAsync()&lt;/code&gt;. There shouldn't be two ways to do an identical thing in a single SDK, and so we picked our preferred approach and are consolidating around it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@react-native-community/async-storage&lt;/code&gt; is now &lt;code&gt;@react-native-async-storage/async-storage&lt;/code&gt;&lt;/strong&gt;. AsyncStorage is next in the packages that are gradually migrating out of the &lt;code&gt;@react-native-community&lt;/code&gt; scope on npm (&lt;a href="https://github.com/react-native-community/discussions-and-proposals/blob/master/partners/0001-organization-repository-policy.md"&gt;more context on why this is happening available here&lt;/a&gt;). We will take care of switching the packages in your dependencies in &lt;code&gt;package.json&lt;/code&gt; when you run &lt;code&gt;expo upgrade&lt;/code&gt;, but after that you will need to either manually update your imports in your source code, or run &lt;code&gt;npx expo-codemod sdk41-async-storage [your-source-directory]&lt;/code&gt; to update it automatically.
Along with this superficial change in package names comes a fix for an issue that occurs when ejecting your project; more information in &lt;a href="https://github.com/expo/expo/issues/8220"&gt;this issue&lt;/a&gt; and these &lt;a href="https://github.com/react-native-async-storage/async-storage/pull/563"&gt;pull&lt;/a&gt; &lt;a href="https://github.com/react-native-async-storage/async-storage/pull/559"&gt;requests&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;@expo/metro-config&lt;/code&gt; is now vendored by the &lt;code&gt;expo&lt;/code&gt;¬†package&lt;/strong&gt;. If your &lt;code&gt;metro.config.js&lt;/code&gt; uses &lt;code&gt;@expo/metro-config&lt;/code&gt;, you should switch over to importing it from the &lt;code&gt;expo&lt;/code&gt; package instead. Remove &lt;code&gt;@expo/metro-config&lt;/code&gt; from your &lt;code&gt;package.json&lt;/code&gt; dependencies and change your import in &lt;code&gt;metro.config.js&lt;/code&gt; from &lt;code&gt;@expo/metro-config&lt;/code&gt; to &lt;code&gt;expo/metro-config&lt;/code&gt;. Learn more: &lt;a href="https://docs.expo.io/guides/customizing-metro/"&gt;Customizing Metro&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Legacy Notifications API has been¬†removed&lt;/strong&gt;.The legacy Notifications library (imported from the &lt;code&gt;expo&lt;/code&gt; package) has been deprecated since SDK 38, and is now fully removed in SDK 41. If you're still relying on this package, you should &lt;a href="https://github.com/expo/fyi/blob/master/LegacyNotifications-to-ExpoNotifications.md"&gt;upgrade to &lt;code&gt;expo-notifications&lt;/code&gt;&lt;/a&gt;, which has plenty of improvements and additional features. Learn more: &lt;a href="https://expo.fyi/LegacyNotifications-to-ExpoNotifications"&gt;How to migrate from Expo's LegacyNotifications to the new expo-notifications library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;üëã iOS 10 support has been dropped‚Ää-‚ÄäExpo SDK 41 supports iOS¬†11+&lt;/strong&gt;. More information on this from our &lt;a href="https://blog.expo.io/expo-sdk-40-is-now-available-d4d73e67da33"&gt;SDK 40 release notes&lt;/a&gt;:&lt;em&gt;iOS 10 is the last version of iOS that still supports 32-bit simulator builds (x86), and to keep Expo npm packages smaller, we plan to publish only 64-bit pre-build binaries for simulators (x64 and arm64). This has been past due‚Ää-‚Ääthe last time we dropped an iOS version was over two years ago, when we dropped support for iOS 9 in September 2018. Apple no longer reports usage statistics for iOS 10 directly, but you can get a rough idea from reading the &lt;a href="https://developer.apple.com/support/app-store/"&gt;App Store‚Ää-‚ÄäiOS and iPadOS usage table&lt;/a&gt;‚Ää-‚Ää6% of all devices use iOS 11 or lower at the time of writing.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;üü¢ Node 10 support will be dropped soon from Expo¬†CLI&lt;/strong&gt;.
It's not that we have anything against the number 10, but Node 10 is about to be replaced by Node 12 as the Maintenance LTS release.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;üßπ Dropped SDK 37; will drop SDK 38 next¬†release&lt;/strong&gt;. We routinely drop SDK versions that have low usage in order to reduce the number of versions we need to support. This release sees the end of life for SDK 37. As usual, your standalone apps built with SDK 37 will continue to work; however, SDK 37 projects will no longer work within the latest version of Expo Go. If you want to re-run &lt;code&gt;expo build&lt;/code&gt;, then you'll need to upgrade from SDK 37, preferably to SDK 41 so you won't need to update again for a while (and also because each Expo version is better than the last!). &lt;strong&gt;Our next release is planned for June/July 2021 and, at that time, we'll be dropping support for SDK 38&lt;/strong&gt;. If your project is running on SDK 38, consider upgrading to a newer version in the coming months.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#upgrading-your%C2%A0app"&gt;
  &lt;/a&gt;
  ‚û°Ô∏è Upgrading your¬†app
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#managed-workflow"&gt;
  &lt;/a&gt;
  Managed workflow
&lt;/h2&gt;

&lt;p&gt;Here's how to upgrade your app to Expo SDK 41 from 40:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update to the latest version of Expo CLI: &lt;code&gt;npm i -g expo-cli&lt;/code&gt;. &lt;a href="mailto:expo-cli@4.4.1"&gt;expo-cli@4.4.1&lt;/a&gt; or greater is required.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;expo upgrade&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;li&gt;If you are using &lt;code&gt;react-navigation&lt;/code&gt; v4, please be sure to update to the latest v4 patch release. This is required due to changes in the version of &lt;code&gt;react-native-screens&lt;/code&gt; included in SDK 41.&lt;/li&gt;
&lt;li&gt;Refer to the "Deprecations, renamings, and removals" section above for breaking changes that are most likely to impact your app.&lt;/li&gt;
&lt;li&gt;Make sure to check the &lt;a href="https://github.com/expo/expo/blob/master/CHANGELOG.md"&gt;changelog&lt;/a&gt; for all other breaking changes!&lt;/li&gt;
&lt;li&gt;Update the Expo app on your phones from the App Store / Google Play. expo-cli&lt;code&gt;will automatically update your apps in simulators if you delete the existing apps, or you can run&lt;/code&gt;expo client:install:ios&lt;code&gt;and&lt;/code&gt;expo client:install:android`.&lt;/li&gt;
&lt;li&gt;If you built a standalone app previously, &lt;a href="https://docs.expo.io/versions/latest/workflow/publishing/#limitations"&gt;remember&lt;/a&gt; that you'll need to create a new build in order to update the SDK version. Run &lt;code&gt;expo build:ios&lt;/code&gt; and/or &lt;code&gt;expo build:android&lt;/code&gt; when you are ready to do a new build for submission to stores.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bare-workflow"&gt;
  &lt;/a&gt;
  Bare workflow
&lt;/h2&gt;

&lt;p&gt;The Bare workflow lets you operate independently of the Expo SDK cycle, updating RN versions and versions of individual Expo packages however and whenever you want. However, if you do stick roughly to Expo SDK versions, these steps will help you to upgrade to Expo SDK 41 from 40:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the latest version of CocoaPods‚Ää-‚Ää1.10.0 or greater is required.&lt;/li&gt;
&lt;li&gt;Update to the latest version of Expo CLI: &lt;code&gt;npm i -g expo-cli&lt;/code&gt;. &lt;a href="mailto:expo-cli@4.4.1"&gt;expo-cli@4.4.1&lt;/a&gt; or greater is required.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;expo upgrade&lt;/code&gt; in your project directory.&lt;/li&gt;
&lt;li&gt;Update to &lt;code&gt;platform¬†:ios, '11.0'&lt;/code&gt; in your Podfile.&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;compileSdkVersion&lt;/code&gt; and &lt;code&gt;targetSdkVersion&lt;/code&gt; to 30 in &lt;code&gt;android/build.gradle&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If you are using &lt;code&gt;react-navigation&lt;/code&gt; v4, please be sure to update to the latest v4 patch release. This is required due to changes in the version of &lt;code&gt;react-native-screens&lt;/code&gt; included in SDK 41.&lt;/li&gt;
&lt;li&gt;Rebuild your native projects with &lt;code&gt;npm run ios&lt;/code&gt; and &lt;code&gt;npm run android&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make sure to check the &lt;a href="https://github.com/expo/expo/blob/master/CHANGELOG.md"&gt;changelog&lt;/a&gt; for other breaking changes!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>mobile</category>
      <category>reactnative</category>
      <category>ios</category>
      <category>android</category>
    </item>
    <item>
      <title>Replace Loops using Recursion</title>
      <author>Randy Rivera</author>
      <pubDate>Fri, 23 Apr 2021 22:48:13 +0000</pubDate>
      <link>https://dev.to/rthefounding/replace-loops-using-recursion-3npg</link>
      <guid>https://dev.to/rthefounding/replace-loops-using-recursion-3npg</guid>
      <description>&lt;p&gt;Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by thinking about the following task: Add the first n elements of an array to create the product of those elements. we can rewrite sum in terms of itself and never need to use a loop.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here we write a recursive function, sum(arr, n), that returns the sum of the first n elements of an array arr. &lt;/li&gt;
&lt;li&gt;Note: Recursive functions must have a base case when they return without calling the function again (in this example, when n &amp;lt;= 0), otherwise they can never finish executing.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sum(arr, n) {
if (n &amp;lt;= 0) {
  return 0;
} else {
  return sum(arr, n - 1) + arr[n - 1];
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(sum([2, 3, 4, 5], 3)); will display 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// sum([2, 3, 4, 5], 3 - 1) + arr[3 - 1];
// sum([2, 3, 4 ,5], 2) + arr[2];
// sum([2, 3, 4, 5], 2) + 4;
//        n = 2

// sum([2, 3, 4, 5], 2 - 1) + arr[2 - 1];
// sum([2, 3, 4, 5], 1) + arr[1];
// sum([2, 3, 4, 5], 1) + 3; 
//      n = 1             3

// sum([2, 3, 4, 5], 1 - 1) + arr[1 - 1];
// sum([2  3, 4, 5], 0) + arr[0];
// sum([2, 3, 4, 5], 0) + 2;
//      n = 0             2

//      we hit our base case so now n = 0

// 0 + 2 + 3 + 4 = 9
// we want it to return 9 because 4 + 3 + 2 = 9;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>Take care of your physiological needs to make optimal architectural decisions ü§î
</title>
      <author>Krzysztof Platis</author>
      <pubDate>Fri, 23 Apr 2021 21:42:30 +0000</pubDate>
      <link>https://dev.to/krisplatis/take-care-of-your-physiological-needs-to-make-optimal-architectural-decisions-1ldd</link>
      <guid>https://dev.to/krisplatis/take-care-of-your-physiological-needs-to-make-optimal-architectural-decisions-1ldd</guid>
      <description>&lt;p&gt;&lt;strong&gt;As a software architect, your most important skill is making optimal decisions. But your brain totally depends on your body. When you're sleepy üõèÔ∏è, hungry üç¥ or need to visit a toilet üöΩ, your brain gets disturbed. Then it can hardly make any well-balanced judgements. Don't force yourself to finish your task first, unless you want to make some bad decision. When feeling strange or anxious, just pause, take care of yourself and get back to your work. You‚Äôll finish your task better when calmed down.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The great book ‚ÄúSelf-Reg‚Äù (by Stuart Shanker) explained to me the implication: neglecting physiological needs cause higher susceptibility to stress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfregulation"&gt;
  &lt;/a&gt;
  Self-regulation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#read-the-signals-from-your-body"&gt;
  &lt;/a&gt;
  Read the signals from your body
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;tapping your fingers nervously&lt;/li&gt;
&lt;li&gt;shaking your leg&lt;/li&gt;
&lt;li&gt;feeling a headache&lt;/li&gt;
&lt;li&gt;ruminating past mistakes or thinking about things which can go wrong&lt;/li&gt;
&lt;li&gt;getting easily frustrated by small problems&lt;/li&gt;
&lt;li&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#identify-your-stressors"&gt;
  &lt;/a&gt;
  Identify your stressors
&lt;/h3&gt;

&lt;p&gt;Ask yourself: ‚ÄúWhy now?‚Äù&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;did you have enough sleep today? Wanna yawn?&lt;/li&gt;
&lt;li&gt;are you hungry? Is it now your usual time for a meal?&lt;/li&gt;
&lt;li&gt;are you thirsty?&lt;/li&gt;
&lt;li&gt;do you need to visit a toilet?&lt;/li&gt;
&lt;li&gt;do you need more movement?&lt;/li&gt;
&lt;li&gt;are you tired of noise?&lt;/li&gt;
&lt;li&gt;is anyone or anything else stressing you?&lt;/li&gt;
&lt;li&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#reduce-your-stressors"&gt;
  &lt;/a&gt;
  Reduce your stressors
&lt;/h3&gt;

&lt;p&gt;When you know what your body needs, satisfy it. ‚ÄúTurn down the volume‚Äù of your stressor. üîá&lt;br&gt;
If you cannot switch it off completely, take a break and use your best tricks that calm you down. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;eat ü•™&lt;/li&gt;
&lt;li&gt;drink ü•§ &lt;/li&gt;
&lt;li&gt;take a walk üö∂‚Äç‚ôÇÔ∏è&lt;/li&gt;
&lt;li&gt;listen to relaxing music üéß&lt;/li&gt;
&lt;li&gt;make your coffee ‚òïÔ∏è&lt;/li&gt;
&lt;li&gt;take a short power nap üõè&lt;/li&gt;
&lt;li&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#our-highest-priority-is-to-protect-our-ability-to-set-priorities"&gt;
  &lt;/a&gt;
  ‚ÄúOur highest priority is to protect our ability to set priorities‚Äù
&lt;/h2&gt;

&lt;p&gt;(Essentialism - Greg McKeown)&lt;/p&gt;

&lt;p&gt;When you‚Äôre stressed out, your perception doesn‚Äôt adapt quickly to changing circumstances. You focus easily on irrelevant details and loose the big picture. You invest time in perfectionism for things that don‚Äôt deserve it. &lt;/p&gt;

&lt;p&gt;To make optimal decisions you often need to rely on your intuition. It‚Äôs a general body‚Äôs feeling of comfort or discomfort when evaluating some idea. But any neglected physiological need can disrupt your gut feeling.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt reduce your stressor for too long, the tension escalates and you totally loose the essence. Your attention can hardly get away from what you‚Äôve been working on for long time. That can be a vicious circle which may disrupt both your health and the health of the project‚Äôs architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;In every work day you face challenges which require from you setting priorities and making judgements. So you need your brain to stay efficient. But it totally depends on your body, so you should take care of it. Read it's signals, identify stressors and reduce them. It's for the sake of your health and the health of your project which depend on your optimal decisions. üòâ&lt;/p&gt;

</description>
      <category>5days5blogposts</category>
      <category>decisions</category>
      <category>selfcare</category>
    </item>
    <item>
      <title>Bearers of the bad news</title>
      <author>Ania Gajecka</author>
      <pubDate>Fri, 23 Apr 2021 21:40:19 +0000</pubDate>
      <link>https://dev.to/annadayl/bearers-of-the-bad-news-41md</link>
      <guid>https://dev.to/annadayl/bearers-of-the-bad-news-41md</guid>
      <description>&lt;p&gt;Testing is often seen as a destructive activity. Spotting and reporting failures may be regarded as criticism against the product and against the author. I, as a software tester, am the bearer of the &lt;em&gt;bad news&lt;/em&gt;. We are the messengers of undesired revelations about issues. &lt;/p&gt;

&lt;p&gt;Testing is important. It considerably contributes to assuring that the application does everything that it was designed for. Looking for defects requires curiosity, attention to detail and professional pessimism. You probably want to know as soon as possible that something is wrong with your product. Defects found during testing will save time and money later. Win-win!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>5days5blogposts</category>
    </item>
    <item>
      <title>How to Use Visme to Help Your Desing Projects Stand Out</title>
      <author>Sarah Bartley</author>
      <pubDate>Fri, 23 Apr 2021 21:17:21 +0000</pubDate>
      <link>https://dev.to/theoriginalbpc/how-to-use-visme-to-help-your-desing-projects-stand-out-2hj0</link>
      <guid>https://dev.to/theoriginalbpc/how-to-use-visme-to-help-your-desing-projects-stand-out-2hj0</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published September 28, 2019 on BritishPandaChick Codes. I made tweaks to the original post so it works for The Practical Dev.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On July 11, I was tagged in a Twitter thread where developers were sharing their 5 favorite tools or apps they couldn't live without then tagging more developers so the list of resources would continue to grow. My tweet listed five things I regularly use when I code or blog. My 5 favorite tools are Google, Twitter, Github, CodePen, and Canva.&lt;/p&gt;
 

&lt;p&gt;You've already seen CodePen here on some of the code tutorial posts. Github is online platform developers use to host their code on the web. Canva is an online graphic design tool. I regularly use Canva to create banners and logos for websites.&lt;/p&gt;

&lt;p&gt;After this tweet was published, I went on with the rest of my day. A few days later, Visme sent me an e-mail about the tweet I posted. They asked me if they knew about their design tool.&lt;/p&gt;

&lt;p&gt;They asked me to take a closer look at their tool and play around with it so I could share it with you here. Visme gave me a complimentary premium account to use for this review. I started playing around with Visme once I finished the Skillcrush 300 series.&lt;/p&gt;

&lt;p&gt;After playing around with the tool and making some projects, here's my official guide I promised for Visme. This post will show you how to use Visme to create your own design projects such as the blog graphic I made for today's post.&lt;/p&gt;

&lt;h2&gt;What is Visme?&lt;/h2&gt;

&lt;p&gt;Visme is a data presentation and visualization tool that allows users to make a variety of visual content. Users can use the platform to create different professional graphics and presentations. Think of this tool as a mix of Microsoft PowerPoint, Adobe Photoshop, and Google Drive. You can learn more about Visme from this video on their YouTube channel.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jpYosGCV9vI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;How much does Visme cost?&lt;/h3&gt;

&lt;p&gt;At the time of this post, you can buy Visme as an individual, school, or business. You can pay per month or yearly. Individual basic membership is completely free. You‚Äôll be limited with the number of projects, storage, and templates but you‚Äôll still be able to get the main benefits from Visme.&lt;/p&gt;

&lt;p&gt;The individual standard plan is $14 a month. You get more storage and projects you can keep on the platform. Other perks include creating color palettes, downloading projects as PDFs, and no Visme brand on projects.&lt;/p&gt;

&lt;p&gt;The individual complete membership is $25 a month. Members get the full benefits of the platform including privacy controls, slide library, and downloading as HTML code.

&lt;/p&gt;
&lt;p&gt;Do you want to use Visme for your business or at your school? Visme offers standard and complete packages for businesses and schools. A business single package is $25 a month while an education single package is $30 a semester.&lt;/p&gt;

&lt;p&gt;You can contact the customer service team to learn more. If you would like to learn more about Visme's pricing, head to the Visme website and see how they break down their prices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.visme.co/"&gt;==&amp;gt; Click here to learn more about Visme!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;So how do I use Visme?&lt;/h2&gt;

&lt;p&gt;You can make a Visme account by creating your own username and password. Users can also use their Google or Facebook accounts to login. Once you login, you will be taken straight to the dashboard.&lt;/p&gt;

&lt;p&gt;At the top of the dashboard beside the help icon and the bell for notifications, you will see your account name and e-mail. If you click on this, it will open to a sub-menu with the account type and account number. You will want to keep note of this in case you need to contact Visme customer service and discuss your account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1RLa8Wwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51135118040_2988b6efaa_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1RLa8Wwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51135118040_2988b6efaa_m.jpg" alt="Visme Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you login to Visme, you'll see all the projects you made here. You can also see these projects in all projects or my projects on the black sidebar navigation menu. Other things you can see on the sidebar menu are share with me, slide library, and my folders.&lt;/p&gt;

&lt;p&gt;Share with me is where you can see projects others have shared with you. Slide library is where you can find all the slides you have saved for future presentations. Then My Folders is where you can make or see folders.&lt;/p&gt;

&lt;p&gt;At the end of the sidebar is the trash, my brand, analytics, and form results. Trash is where you find all the projects you've deleted. My brand is where you'll be able to save your brand information such as fonts, color palette, logos, and templates.&lt;/p&gt;

&lt;p&gt;Analytics is where you will be able to track users visiting your published projects and download this data. Form result is where you can find data from any forms you make. Like the analytics, you can download this information too if you like.&lt;/p&gt;

&lt;h2&gt;Let's create a brand new project!&lt;/h2&gt;

&lt;p&gt;You can create a brand new project in two ways. You can click the button in the main dashboard window at the bottom of the create button at the top of the black sidebar menu. Once you click the create button, you will be taken to a page to decide which project you will make.&lt;/p&gt;

&lt;p&gt;At the top of the page, you will see a black navigation menu with the types of projects you can make. Visme allows users to create presentations, infographics, documents, printables, web graphics, social graphics, and custom size. Custom size allows users to create any size project they would like.&lt;/p&gt;

&lt;p&gt;Users can set the width and the height of their projects by pixels, inches, or centimeters. You can also select by common sizes such as presentation (16.9), presentation (4.3), US letter, A4, Infographic, and business card. Once you click on a type of project you want to build, the page will show users theme templates Visme has created or a blank project.&lt;/p&gt;

&lt;p&gt;If you click on presentations, users can access libraries of ready-use slides Visme has created. Documents, printables, web graphics, and social graphics will have a sub-menu at the top of the page which shows users the different types of projects you can make. So if you would like to make a menu, you can find menu templates by clicking printables then menus in the sub-menu that appears underneath the black navigation menu.&lt;/p&gt;

&lt;h2&gt;Creating a Pinterest Graphic&lt;/h2&gt;

&lt;p&gt;Let's start with the Pinterest graphic. Once I click the social graphics and pick the Pinterest icon, I'm taken straight to the Visme workspace. The image below is what the Visme workspace looks like for almost every project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wod5UlHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134227923_8cf19d1029_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wod5UlHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134227923_8cf19d1029_m.jpg" alt="Visme Canvas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the top of the page is the black navigation bar. You can click on the three bars icon go back to the dashboard, view the options, change settings and modify your canvas size. Besides the three bars icon, you'll find the save, undo, help, and project name. You can click on the project name to change it to anything you like. I changed mine to sample-pinterest for this review.&lt;/p&gt;

&lt;p&gt;Now let's start with the left side of the workspace. The left navigation bar is where you'll find everything you need to make any project. Here you'll find layouts, basics, graphics, data, media, theme colors, and my files.&lt;/p&gt;

&lt;p&gt;When you click on each of these icons on the navigation bar, a window will open up to show samples and different content you can use to create your designs. Some of these items will give you ones Visme provides but you still are able to add your own items for your design. I'm going to start by adding text to my blog graphic.&lt;/p&gt;

&lt;p&gt;When I add text to my Visme canvas, a menu bar will appear for the text. This is where you can change the fonts, colors, font size, and more. You can add effects, animation, or arrange the text on the canvas. You can even turn your text into a link.&lt;/p&gt;

&lt;p&gt;As you add items to the canvas, Visme will show you a preview of your project on the right side of the screen. You can also click the preview button at the top right navigation menu to preview your project up closer. If you would like to add more pages, you can press the add page icon at the top of the right window.&lt;/p&gt;

&lt;p&gt;When you are working on your project and what to edit on the text, you click on the text you want to change to get the text menu. Clicking the text once will give you the following menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--96j260-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134009226_c331946322_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--96j260-E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134009226_c331946322_m.jpg" alt="Text Menu at the top of the Visme canvas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This menu allows users to change the text by adding the following to a text box.&lt;/p&gt;


&lt;ul&gt;

&lt;li&gt;spacing&lt;/li&gt;

&lt;li&gt;fill&lt;/li&gt; 
&lt;li&gt;border&lt;/li&gt;

&lt;li&gt;special characters&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;alignment&lt;/li&gt;

&lt;p&gt;The rest of the menu gives you similar items that were in the original text menu such as effect, animate and duplicate. If you double-check on the menu, you will be able to change the fonts, font size, and colors.&lt;/p&gt;

&lt;p&gt;I am going to add a line in between my logo and graphic text. In order to add shapes, I'm going to click on the graphics icon on the left menu and click lines. I just picked the line I wanted and double-click it to have it appear on the canvas.&lt;/p&gt;

&lt;p&gt;Then I just need to move the line and change the line size by clicking on the black dots that appear when I click on the line. If you click on the line, you can open up the icon menu to change the color, thickness or flip the icon vertically.&lt;/p&gt;

&lt;h2&gt;Ready to publish?&lt;/h2&gt;

&lt;p&gt;It is time to think about how you want to publish it. Now that you are satisfied with your project, you can publish it. I'm going to download my Pinterest graphic.&lt;/p&gt;

&lt;p&gt;In order to do this, I just need to click on the download button on the top right of the black navigation bar. When I click the button, a window opens with several options. These options include downloading the project as an image,  document, or HTML5 file.&lt;/p&gt;

&lt;p&gt;Visme gives users two options for image and document. You can download the project as a JPG or a PNG file. Visme gives users the option to download the image as a high resolution at the top so just switch the button if you want a high-resolution image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SFaw5qCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134248833_ca4cb80a5f_m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SFaw5qCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/65535/51134248833_ca4cb80a5f_m.jpg" alt="How to Use Visme to Help Your Design Projects Stand Out"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to download it as a document, you choose between the PDF or PPTX.  PDF files have a button that users can click to show bleed marks. Bleed marks just show the areas that need to be trimmed after the project is printed. So if you want your project professionally printed, you can turn the bleed marks on.&lt;/p&gt;

&lt;p&gt;Visme encourages users to use HTML5 if they plan on using any animations or effects since this file type will preserve all these so you can use them offline. They even include a gear icon for advanced settings for HTML5 files so you can change the page design, display options, social/engagement, and audio controls I am going to click the PNG image.&lt;/p&gt;

&lt;p&gt;As soon as I click the PNG option, my design project is generated and the project is downloaded to my computer. If it doesn't automatically download, you might get a window saying that you've been chosen to open your Visme file from the Visme website. It will ask what you want to do with this file from opening it or saving it.&lt;/p&gt;

&lt;h2&gt;Sharing Projects Online&lt;/h2&gt;

&lt;p&gt;If you would like to share your project online, click the share button on the black navigation bar. This opens a window with three options. First, you can publish it on the web and get a shareable link.&lt;/p&gt;

&lt;p&gt;This will also allow Google to index your project. You can share your project privately. Two, you can share your project privately and allow certain people access to your project. Third, you can embed your projects on your website or blog.&lt;/p&gt;

&lt;p&gt;On the top right corner of the share online window, you'll see the gear for advanced settings. Advanced settings are where you want to change page design, display options, audio controls, and social/engagement. You can change any of these settings for any of the share online options.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is everything you need to know to start making design projects on Visme. If you need any help using the Visme workspace, Visme has tons of great ways to help you with your projects. You can get tips from the Visme blog. There are tons of great posts on their blog for creating awesome Visme designs.&lt;/p&gt;

&lt;p&gt;You can also use the Help icon on your Visme dashboard to find more guides and tutorials. You can also e-mail the Visme customer service team with any questions. Once you've made a Visme account, you can register for one of the free webinars Visme hosts every Thursday.&lt;/p&gt;

&lt;p&gt;Each webinar has the Visme team walking viewers through the Visme tool and answer any questions live on the webinar you might have. You can ask the customer service team for a webinar link if you would like to attend the webinar.&lt;/p&gt;

&lt;p&gt;Have you used Visme before? Share your experience with the Visme tool in the comments. You can also share any design tips you have in the comments.&lt;/p&gt;


&lt;/ul&gt;

</description>
      <category>visme</category>
      <category>design</category>
    </item>
    <item>
      <title>Would you use a webapp to search linux commands</title>
      <author>Vivek</author>
      <pubDate>Fri, 23 Apr 2021 21:16:17 +0000</pubDate>
      <link>https://dev.to/vivekweb2013/would-you-use-a-webapp-to-search-linux-commands-26kl</link>
      <guid>https://dev.to/vivekweb2013/would-you-use-a-webapp-to-search-linux-commands-26kl</guid>
      <description>&lt;p&gt;How do you remember the options and flags supported by a specific linux command, do you use search engine every time to look for the supported options and flags.&lt;/p&gt;

&lt;p&gt;You might have some commands with lots of options which might take too long to type. Do you store such commands for reusing them? where do you store them? maybe in notes app or some text documents?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqFibUWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvuqzir6gghf3k4t9xpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqFibUWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvuqzir6gghf3k4t9xpm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Would you use a free web application to store the commands for you privately. Try a free webapp I've developed to give back to community which has gave me so much.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://commandhunt.com"&gt;https://commandhunt.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's completely free, allows copying a command with a single click, generate the commands using nicely designed user interface (by selecting required flags and filling necessary values for required options).&lt;/p&gt;

&lt;p&gt;your valued feedback is much appreciated.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>
Top 10 best extensions for VScode - #1</title>
      <author>Francisco</author>
      <pubDate>Fri, 23 Apr 2021 21:01:06 +0000</pubDate>
      <link>https://dev.to/franciscode/top-10-best-extensions-for-vscode-1-414l</link>
      <guid>https://dev.to/franciscode/top-10-best-extensions-for-vscode-1-414l</guid>
      <description>&lt;p&gt;Hello everybody! This is my first post in English, today we will see the 10 best extensions for Visual Studio Code.&lt;/p&gt;

&lt;p&gt;VSCode extensions serve to speed up certain tasks that can take away valuable seconds in our work, that's why the community of this code editor has created several tools for its useful operation.&lt;/p&gt;

&lt;p&gt;Today I bring you, my top 10 extensions for Visual Studio Code.&lt;/p&gt;

&lt;p&gt;When we start Visual Studio Code we will have what we should be used to, that's right, the typical welcome screen in every code editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axaARdJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qztcpi4trwmifpl72vmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axaARdJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qztcpi4trwmifpl72vmb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we will have to go to the extensions box:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ab5Gytrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyv5pe1uyj6acrx1yp0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ab5Gytrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyv5pe1uyj6acrx1yp0r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now we only need to look for the following extensions&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_hGTB76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vgxjx4ifaw2seoe6pc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_hGTB76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vgxjx4ifaw2seoe6pc8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We simply search for its name in the text box, and select the first one.&lt;/p&gt;

&lt;p&gt;We will click on install&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZf83Of---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucl0j37j8qel20jk1xp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZf83Of---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucl0j37j8qel20jk1xp2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What does this extension do?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;This extension is used to format the document, in other words to tidy it up and clean it up.&lt;/p&gt;

&lt;p&gt;To use it we will simply have to be in the file in which we want to clean it, for example this very, very messy HTML file üòÇ.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BxYF6pHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/confeiojvuopfjvppmej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxYF6pHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/confeiojvuopfjvppmej.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use the extension press the following key combination:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And type Format Document and press Enter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dwBaZJnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o6mwtiv65kjrl4iuakz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwBaZJnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o6mwtiv65kjrl4iuakz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or simply &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Shift + Alt + F&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;And with this we will have our code in order!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-server"&gt;
  &lt;/a&gt;
  Live Server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfm-4zyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx3t1dvvjp21hdxkga5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfm-4zyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qx3t1dvvjp21hdxkga5f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As in the previous extension, simply click on install.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;To use it, simply type&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And type Live server&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QohgOw13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q7fabxbsrsrikno5qae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QohgOw13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q7fabxbsrsrikno5qae.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the one that says &lt;strong&gt;"Open with live Server"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Or to make it shorter, we will make the following combination&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Alt + L + O&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will open our default browser and give us a view of our HTML file, this extension allows us to simply save the files with VSCode with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Ctrl + S&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And the changes will already be in the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#material-icon-theme"&gt;
  &lt;/a&gt;
  Material Icon Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--woqZ6h1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3znfo5hp8ubfs318ljo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--woqZ6h1M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3znfo5hp8ubfs318ljo8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension will give us a wide variety of icons for a wide variety of files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1LibXKwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmh2w1kykx1zc0or4muh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1LibXKwc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmh2w1kykx1zc0or4muh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As in the previous ones, we will look for it by its name and click on install.&lt;/p&gt;

&lt;p&gt;Once installed, the following window will appear&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hhA0opL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xer0t1x2jec12j90ye2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hhA0opL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xer0t1x2jec12j90ye2i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We should select the one that says Material Icon Theme&lt;/p&gt;

&lt;p&gt;And that's it! we have new icons for our visual studio code!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ok ok, we already have 3 extensions, there is still a lot left, but let's not be discouraged!!! We will have our very nice Code Editor at the end of this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#indent-rainbow"&gt;
  &lt;/a&gt;
  Indent Rainbow
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFeYw8FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rblh59epae8ioxi8pdy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFeYw8FC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rblh59epae8ioxi8pdy2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension will help us a lot to order our code, the installation is the same as we have followed before, (The search for it, and simply give the button to install)&lt;/p&gt;

&lt;p&gt;The installation is very fast and to check that it is ready we will go to our test file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JdrThvuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xry3gk868724s7e2e3r2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JdrThvuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xry3gk868724s7e2e3r2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see this extension will help us to guide us, to see where a tag or key starts and where it ends.  &lt;/p&gt;

&lt;p&gt;And now the following extension will give an excellent essence to our editor&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-monokai-theme"&gt;
  &lt;/a&gt;
  One Monokai Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OL9ymktw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hui3hh2qzpwpr1in6wg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OL9ymktw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hui3hh2qzpwpr1in6wg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the One Monokai theme, to install it we must follow the procedure previously discussed and when we install it, the following will appear&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aalgtDgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84jvkng7dtqjxg1wy3ml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aalgtDgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84jvkng7dtqjxg1wy3ml.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And simply select the option One Monokai&lt;/p&gt;

&lt;p&gt;When we go back to our test HTML file it will look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBtDH342--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fg2gqkeopt0qamg74sp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBtDH342--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fg2gqkeopt0qamg74sp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well well, then I decided to leave this post until here so as not to extend it too much, and also not to fill the reader with so much information haha.&lt;br&gt;
I hope this post will be very supported as it is my first post in English, thank you very much for reading, remember to leave the Heart, Unicorn and save&lt;/p&gt;

&lt;p&gt;Keep Programming!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>plugin</category>
      <category>discuss</category>
      <category>editor</category>
    </item>
    <item>
      <title>Simple way to transform any Google Sheet to JSON</title>
      <author>Krzysztof Kopieczek</author>
      <pubDate>Fri, 23 Apr 2021 20:53:02 +0000</pubDate>
      <link>https://dev.to/kopieczekdev/simple-way-to-transform-any-google-sheet-to-json-1o74</link>
      <guid>https://dev.to/kopieczekdev/simple-way-to-transform-any-google-sheet-to-json-1o74</guid>
      <description>&lt;p&gt;Solution is really easy, but with one big drawback - the sheet needs to accessed publicly on the Internet. In my case this is not a permanent feature - I just have to move data from one source to another one, but I would not recommend this solution if you deal with sensitive data. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prepare-the-sheet"&gt;
  &lt;/a&gt;
  Prepare the sheet
&lt;/h1&gt;

&lt;p&gt;Go to &lt;strong&gt;File &amp;gt; Publish to the web&lt;/strong&gt; and select &lt;strong&gt;Entire Document &amp;gt; Web Page&lt;/strong&gt;. That's all here, just close the window. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qd75C4Sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7n6dszibuh8j3osy76b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qd75C4Sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7n6dszibuh8j3osy76b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, copy the sheet id from the URL in the browser.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-saviour"&gt;
  &lt;/a&gt;
  The saviour
&lt;/h1&gt;

&lt;p&gt;&lt;a href="http://gsx2json.com"&gt;gsx2json&lt;/a&gt; is a tool which does all the magic for us. Please go to the project website and buy a coffee to the author if it helped you. It saved me a ton of time!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#get-the-data"&gt;
  &lt;/a&gt;
  Get the data
&lt;/h1&gt;

&lt;p&gt;I use C# but the code is quite simple. Just create the url with the sheet id and get the JSON.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using System.Net;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sheetId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1zpss4g850wpb9YltdzefCyvl2Vl4gDZ-Ip4Hk-dQjOk"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"http://gsx2json.com/api?id=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sheetId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DownloadStringTaskAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the &lt;a href="http://gsx2json.com/api?id=1zpss4g850wpb9YltdzefCyvl2Vl4gDZ-Ip4Hk-dQjOk"&gt;link&lt;/a&gt; to the API if you'd like to review the JSON created by gsx2json.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#transform-the-data"&gt;
  &lt;/a&gt;
  Transform the data
&lt;/h1&gt;

&lt;p&gt;Now, when you got the data, do whatever it has to be done. Here is an example of extracting rows from the JSON response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using Newtonsoft.Json.Linq;&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;"rows"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToObject&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;]&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h1&gt;

&lt;p&gt;Remember to unpublish the sheet from the Internet. And that's all!&lt;/p&gt;

</description>
      <category>5days5blogposts</category>
      <category>googlesheets</category>
      <category>csharp</category>
      <category>json</category>
    </item>
    <item>
      <title>Escreva um JavaScript mais limpo com Operador Optional Chaining [Tradu√ß√£o pt-BR]</title>
      <author>Adriana Lima Shikasho</author>
      <pubDate>Fri, 23 Apr 2021 20:49:26 +0000</pubDate>
      <link>https://dev.to/dxwebster/escreva-um-javascript-mais-limpo-com-operador-optional-chaining-traducao-pt-br-4gia</link>
      <guid>https://dev.to/dxwebster/escreva-um-javascript-mais-limpo-com-operador-optional-chaining-traducao-pt-br-4gia</guid>
      <description>&lt;h4&gt;
  &lt;a href="#artigo-traduzido-e-adaptado-do-original-javascript-optional-chaining-por-kyle-cook-acessar"&gt;
  &lt;/a&gt;
  Artigo traduzido e adaptado do original "JavaScript Optional Chaining" por Kyle Cook. &lt;a href="https://blog.webdevsimplified.com/2020-03/javascript-optional-chaining/"&gt;Acessar&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Se voc√™ trabalha com JavaScript h√° um tempo, voc√™ provavelmente j√° se deparou com um c√≥digo parecido com esse:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;street&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;street&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O c√≥digo acima acaba n√£o sendo a forma mais concisa ou limpa de verificar se um objeto √© undefined ou null antes de acessar suas propriedades. Por essse motivo, o JavaScript finalmente nos trouxe o operador &lt;em&gt;optional chaining&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#o-que-%C3%A9-optional-chaining"&gt;
  &lt;/a&gt;
  O que √© Optional Chaining
&lt;/h1&gt;

&lt;p&gt;Se voc√™ tem usado outra linguagem al√©m do JavaScript voc√™ provavelmente est√° familiarizado com o &lt;em&gt;optional chaining&lt;/em&gt; pelo fato da maioria das linguagens darem suporte a ele. &lt;/p&gt;

&lt;p&gt;Basicamente, a ideia do &lt;em&gt;optional chaining&lt;/em&gt; √© facilitar a escrita de um c√≥digo da qual voc√™ precisa acessar as propriedades ou valores que est√£o aninhados dentro do objeto ou de um array, e que podem ou n√£o ser null/undefined. Vamos olhar a sintaxe b√°sica do &lt;em&gt;optional chaining&lt;/em&gt; para entender exatamente como isso funciona.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No c√≥digo acima temos a vari√°vel &lt;code&gt;person&lt;/code&gt; que pode ou n√£o ser null/undefined. Pelo fato de n√£o sabermos se &lt;code&gt;person&lt;/code&gt; est√° definida, n√£o podemos acessar diretamente a propriedade &lt;code&gt;name&lt;/code&gt; tendo em vista que se &lt;code&gt;person&lt;/code&gt; for undefined n√≥s teremos o seguinte erro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Uncaught TypeError: Cannot read property 'name' of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usando o operador &lt;em&gt;optional chaining&lt;/em&gt; (&lt;code&gt;?&lt;/code&gt;), podemos escrever nosso  c√≥digo e acessar diretamente o &lt;code&gt;name&lt;/code&gt;. Se &lt;code&gt;person&lt;/code&gt; for undefined, nosso c√≥digo vai simplesmente retornar undefined ao inv√©s de um erro. O c√≥digo acima √© o mesmo que o c√≥digo seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O operador &lt;em&gt;optional chaining&lt;/em&gt; est√° verificando a vari√°vel &lt;code&gt;person&lt;/code&gt; para garantir que esteja definida antes dde acessar a propriedade &lt;code&gt;name&lt;/code&gt; e se n√£o for definida vai retornar undefined. Como exemplo, se quisermos pegar a rua do endere√ßo, ficaria da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;street&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;street&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esse c√≥digo √© muito mais f√°cil de ler do que o c√≥digo original e √© um dos melhores exemplos de uso do &lt;em&gt;optional chaining&lt;/em&gt;. O JavaScript possui diversos usos adicionais para o optional chaining que a maioria das outras linguagens n√£o implementam.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optional-chaining-em-functions"&gt;
  &lt;/a&gt;
  Optional Chaining em Functions
&lt;/h1&gt;

&lt;p&gt;O primeiro grande exemplo de uso adicional do &lt;em&gt;optional chaining&lt;/em&gt; √© nas chamadas de fun√ß√µes. Vamos olhar um c√≥digo que descreve uma fun√ß√£o de um objeto que pode ou n√£o estar definido.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;windowCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;house&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getWindowCount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;house&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getWindowCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esse c√≥digo est√° basicamente verificando a vari√°vel &lt;code&gt;house&lt;/code&gt; para garantir que a propriedade &lt;code&gt;getWindowCount&lt;/code&gt; existe antes de tentar chamar a fun√ß√£o. √â nesse c√≥digo desajeitado e dif√≠cil de ler, que o optional chaining ir√° entrar em a√ß√£o.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;windowCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;house&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getWindowCount&lt;/span&gt;&lt;span class="p"&gt;?.()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logo de cara pode parecer estranho ter um ponto final (&lt;code&gt;.&lt;/code&gt;) antes  o par√™ntesis da fun√ß√£o, mas isso  √© porque o &lt;em&gt;optional chaining&lt;/em&gt; √©  um ponto de interroga√ß√£o seguido por um ponto final, n√£o apenas um ponto de interroga√ß√£o.&lt;/p&gt;

&lt;p&gt;Esse novo c√≥digo que usa o &lt;em&gt;optional chaining&lt;/em&gt; vai agora verificar se existe a fun√ß√£o &lt;code&gt;getWindowCount&lt;/code&gt; definida na vari√°vel &lt;code&gt;house&lt;/code&gt; e, se existir, cham√°-la. Se a fun√ß√£o n√£o existir na vari√°vel &lt;code&gt;house&lt;/code&gt; ent√£o ir√° retornar undefined ao inv√©s de chamar a fun√ß√£o.&lt;/p&gt;

&lt;p&gt;Essa habilidade do &lt;em&gt;optional chaining&lt;/em&gt; nas fun√ß√µes √© algo que outras linguagens n√£o implementam e √© realmente √∫til, especialmente em JavaScript, uma vez que functions s√£o usadas em todos os lugares.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optional-chaining-em-arrays"&gt;
  &lt;/a&gt;
  Optional Chaining em Arrays
&lt;/h1&gt;

&lt;p&gt;O √∫ltimo principal modo que o &lt;em&gt;optional chaining&lt;/em&gt; pode ser usado √© nos arrays. Se voc√™ deseja acessar um elemento no array pelo index, mas n√£o tem certeza se o array est√° definido, ent√£o voc√™ vai precisar usar um c√≥digo parecido com esse:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usando o operador &lt;em&gt;optional chaining&lt;/em&gt; esse c√≥digo pode ser simplificado para o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;?.[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Novamente pode parecer estranho o ponto final antes dos colchetes que acessam o elemento do array, mas faz parte da sintaxe do operador &lt;em&gt;optional chaining&lt;/em&gt;. Esse novo c√≥digo vai funcionar primeiramente verificando se a var &lt;code&gt;arr&lt;/code&gt; est√° definida e se sim, ir√° tentar acessar o index especificado. Se a var &lt;code&gt;arr&lt;/code&gt; n√£o estiver definida, ir√° retornar undefined.&lt;/p&gt;

&lt;p&gt;Essa nota√ß√£o de colchetes com &lt;em&gt;optional chaining&lt;/em&gt; pode ser usada em objetos tamb√©m.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;?.[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso √© realmente √∫til se voc√™ deseja acessar dinamicamente as propriedades de um objeto com base em uma string e n√£o tem certeza se o objeto est√° definido.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#suporte-para-navegador"&gt;
  &lt;/a&gt;
  Suporte para navegador
&lt;/h1&gt;

&lt;p&gt;Com todos esses excelentes novos recursos do JavaScript, a maior preocupa√ß√£o √© o suporte do navegador. Infelizmente, o &lt;em&gt;optional chaining&lt;/em&gt; tem muito pouco suporte fora dos navegadores mais recentes. No momento em que este artigo foi escrito, o &lt;em&gt;optional chaining&lt;/em&gt; tinha suporte de apenas 45% em todos os navegadores.&lt;/p&gt;

&lt;p&gt;Felizmente, por√©m, voc√™ ainda pode usar esse operador usando ferramentas como o babel para transpilar seu c√≥digo JavaScript para que navegadores mais antigos possam entend√™-lo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h1&gt;

&lt;p&gt;O operador &lt;em&gt;optional chaining&lt;/em&gt; √© algo que a maioria das outras linguagens tiveram o luxo de usar por anos, mas s√≥ agora est√° sendo introduzido no JavaScript. Isso significa que a maioria dos navegadores ainda n√£o implementaram esse recurso, mas com o poder de ferramentas como o Babel por exemplo, esse recurso pode ser usado hoje em dia, sem a necessidade de se preocupar com o suporte do navegador.&lt;/p&gt;

&lt;p&gt;Eu recomendo fortemente o uso deste operador em todos os seus novos projetos que possuem o Babel, pois ele tornar√° a escrita do JavaScript mais limpa e mais f√°cil.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Artigo traduzido e adaptado do original "JavaScript Optional Chaining" por Kyle Cook. &lt;a href="https://blog.webdevsimplified.com/2020-03/javascript-optional-chaining/"&gt;Acessar&lt;/a&gt;/&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Everything JavaScript Arrays &amp; Array Methods!</title>
      <author>Waverley Leung</author>
      <pubDate>Fri, 23 Apr 2021 20:49:19 +0000</pubDate>
      <link>https://dev.to/wlcreate/all-about-javascript-arrays-array-methods-3n9</link>
      <guid>https://dev.to/wlcreate/all-about-javascript-arrays-array-methods-3n9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-are-arrays"&gt;What are arrays?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-do-we-create-arrays"&gt;How do we create arrays?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#methods"&gt;Methods&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#basic-methods"&gt;Basic Methods&lt;/a&gt;: pop, push, shift, unshift, splice, slice&lt;/li&gt;
&lt;li&gt;
&lt;a href="#advanced-methods"&gt;Advanced Methods&lt;/a&gt;: reduce, sort, concat, filter, join, map, find, forEach&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fun-methods"&gt;Fun Methods&lt;/a&gt;: toString, includes, fill, indexOf, findIndex&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;One data structure that many other complex ones build off of is the humble array. Therefore, it‚Äôs important to have a strong foundational understanding and knowledge of arrays before diving into other data structures. In this post we will cover what arrays are, how to create them, and 20 methods ranging from ones you will commonly use, some that are a bit more complex (mainly because of callback functions), and some fun ones to know as well. &lt;/p&gt;

&lt;p&gt;Before you go, if you‚Äôre interested in learning more data structures and want another resource for algorithms, check out the series &lt;a href="https://dev.to/mehmehmehlol"&gt;Megan Lo&lt;/a&gt; and I are collaborating on! The series will focus on data structures and algorithms, and our first post covers the crossover of Strings and Arrays. If you need a refresher on Strings, check out her post &lt;a href="https://dev.to/mehmehmehlol/when-to-use-these-string-methods-in-javascript-3m4h"&gt;here&lt;/a&gt;, otherwise visit our &lt;a href="https://dev.to/wlcreate/all-about-javascript-arrays-array-methods-4ek4"&gt;collab&lt;/a&gt; and stay tuned for more!&lt;/p&gt;

&lt;p&gt;Without further ado, let‚Äôs dive into the wonderful world of arrays!&lt;/p&gt;

&lt;p&gt;P.S. Since this is a very long post, feel free to skip around as you like üòâ&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#what-are-arrays"&gt;
  &lt;/a&gt;
  What are arrays? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;According to MDN, JavaScript arrays are ‚Äúlist-like objects whose prototype has methods to perform traversal and mutation operations‚Äù. In other words, arrays organize their items sequentially and have built-in methods that allow you to easily lookup and add/remove information based on its position. Array positions, also known as indexes, start at zero.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun fact&lt;/em&gt;: Unlike non-scripting languages like Java, C, or C++, JavaScript (as a scripted language) does not have static arrays where you need to specify in advance how many elements you plan to store because they have a fixed size. Instead, JavaScript arrays are dynamic, meaning the size of it will grow or shrink as needed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun Fact&lt;/em&gt;: Arrays are a special type of object! That said, the array‚Äôs object properties are kept separate from its elements and the methods you would use on the array‚Äôs elements cannot be used on its object properties. To set or access the array‚Äôs object property collection, you need to use bracket or dot notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// ‚Äúobject‚Äù&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// ‚Äúobject‚Äù&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Things to keep in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrays have fast lookups of O(1) time because you can simply retrieve an element based on its given index, no matter how large the size of the array is.&lt;/li&gt;
&lt;li&gt;It is time expensive O(n)  to insert or delete from an array because it requires the other elements to ‚Äúscoot‚Äù over to make room or fill the gap.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#how-do-we-create-arrays"&gt;
  &lt;/a&gt;
  How do we create arrays? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Essentially there are two ways to create an array:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With the array literal
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;literalEmptyArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;literalFilledArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;With the new constructor
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;constructorEmptyArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;constructorFilledArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That said, a third way to create an array is the &lt;code&gt;of&lt;/code&gt; method! Essentially the &lt;code&gt;of&lt;/code&gt; method creates a new Array instance from the passed in number of arguments, regardless of number or type of the arguments. The difference between the &lt;code&gt;of&lt;/code&gt; method and &lt;code&gt;Array&lt;/code&gt; constructor is what they do with the arguments; &lt;code&gt;Array.of(7)&lt;/code&gt; creates an array with a single element, 7, whereas &lt;code&gt;Array(7)&lt;/code&gt; creates an empty array with a length property of 7 (Note: this implies an array of 7 empty slots, not slots with actual undefined values)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;         &lt;span class="c1"&gt;// [1]&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// [1, 2, 3]&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [undefined]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods &lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before going into some of the numerous (I roughly estimate more than 35) methods that arrays have, let‚Äôs first review what it means for something to be destructive vs non-destructive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Destructive&lt;/em&gt;: The action mutates the original array, meaning that once you perform the action on the original array, you will not be able to have the original‚Äôs information again. Rather, the original has become updated.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Non-destructive&lt;/em&gt;: The action does not mutate the original array, meaning that once you perform the action on the original array, you will have the original‚Äôs information. Therefore, you will be able to have both the original and updated information.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding and being aware of when a method is destructive vs non-destructive is important when you will ultimately need to decide which method to use. Now, let‚Äôs take a look at some &lt;a href="#basic-methods"&gt;basic&lt;/a&gt;, &lt;a href="#advanced-methods"&gt;advanced&lt;/a&gt;, and &lt;a href="#fun-methods"&gt;fun&lt;/a&gt; methods!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-methods"&gt;
  &lt;/a&gt;
  Basic Methods &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The methods we will be covering are: &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt;, &lt;code&gt;splice&lt;/code&gt;, and &lt;code&gt;slice&lt;/code&gt;. To demonstrate each method, the base array &lt;a&gt;&lt;/a&gt; we will be referring to is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;iceCream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;vanilla&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;chocolate&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;strawberry&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt; &lt;span class="nx"&gt;tea&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The 4 most common use cases for methods on an array is to destructively add or remove an element from the beginning or end of it. &lt;/p&gt;

&lt;p&gt;In case you can't see the image below, here's a summary of the methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;push&lt;/code&gt;&lt;/strong&gt;: Add an item to the end of an Array&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;pop&lt;/code&gt;&lt;/strong&gt;: Remove an item from the end of an Array&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;unshift&lt;/code&gt;&lt;/strong&gt;: Add an item to the beginning of an Array&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;shift&lt;/code&gt;&lt;/strong&gt;: Remove an item from the beginning of an Array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ku7bD4VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g841pk0jc1v8ang6oed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ku7bD4VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g841pk0jc1v8ang6oed.png" alt="basic-destructive-methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other common cases are copying or removing a section of the array. While they have similar names, these methods are &lt;code&gt;splice&lt;/code&gt; and &lt;code&gt;slice&lt;/code&gt; and it's important to remember whether or not you want the action to be destructive or non-destructive.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-splice-endraw-remove-an-item-by-index-position-destructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;splice&lt;/code&gt;: Remove an item by index position (destructive)
&lt;/h4&gt;

&lt;p&gt;When using &lt;code&gt;splice&lt;/code&gt;, you must pass in what index you want to start removing items from (inclusive). You can optionally include a second argument index to say where you want to stop removing items from (inclusive), however if you don‚Äôt the method will automatically remove to the end.  Additionally, starting from the third argument, any that you include will be elements added to the array, beginning from start (first argument). If you do not specify any elements, &lt;code&gt;splice&lt;/code&gt; will only remove elements from the array. That said, if no arguments at all are passed in, the return value will be an empty array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// general&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// including the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget the &lt;a href="#original-basic-array"&gt;original array&lt;/a&gt; for the following example!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKUd5FpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay1g79rufdmej02uunhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKUd5FpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay1g79rufdmej02uunhu.png" alt="splice-method"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-slice-endraw-copy-an-array-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;slice&lt;/code&gt;: Copy an Array (non-destructive)
&lt;/h4&gt;

&lt;p&gt;If you simply want to make a copy of an array you do not need to pass in any arguments. That said, you do have the option to include the starting index (inclusive) and ending index (non-inclusive) to copy from. This method is often used over &lt;code&gt;splice&lt;/code&gt; because it avoids the ‚Äúside-effect‚Äù of mutating the original array.&lt;/p&gt;

&lt;p&gt;If you do not pass in any arguments, by default the entire original array will be copied. If either index is negative, it extracts starting from the end or last element (&lt;code&gt;Array.length&lt;/code&gt; - index). On the other hand, if the arguments you pass in are larger than the actual array (for example, an array with 5 elements but passing in arguments to start at 10 and end at 50) the return value will be an empty array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// general&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// including the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;endIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget the &lt;a href="#original-basic-array"&gt;original array&lt;/a&gt; for the following example!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9PWkyw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxyucp8qh6vlj50ovjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9PWkyw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjxyucp8qh6vlj50ovjg.png" alt="slice-method"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#advanced-methods"&gt;
  &lt;/a&gt;
  Advanced Methods &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The methods we will be covering in this section are: &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt;, &lt;code&gt;flat&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, and &lt;code&gt;forEach&lt;/code&gt;. Before continuing on, it‚Äôs important to know that many of the methods have the same parameters; in this case &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, and &lt;code&gt;forEach&lt;/code&gt;. Instead of repeating it each time, I‚Äôll leave the explanation of the parameters up here for you to refer to! &lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three arguments you can pass into the callback function, two of them being optional. The one argument you must pass in is the current value, which represents the current element being processed. The other two arguments are the index of the current element and array the method was called upon. Besides the callback function, you can also use the &lt;code&gt;thisArg&lt;/code&gt; parameter, which is the value to use as &lt;code&gt;this&lt;/code&gt; when executing the callback. However, if the callback uses an arrow function the &lt;code&gt;thisArg&lt;/code&gt; can be omitted because all arrow functions lexically bind the &lt;code&gt;this&lt;/code&gt; value.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-reduce-endraw-reduce-to-a-single-value-destructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;reduce&lt;/code&gt;: Reduce to a single value (destructive)
&lt;/h4&gt;

&lt;p&gt;Essentially, the reduce method takes in a callback function that executes the callback on each element of the array, resulting in single output value. The callback (reducer) function you provide must at the very least include two parameters: the accumulator and current value. The accumulator accumulates callback's return values; in other words, it is the accumulated value previously returned in the last invocation of the callback On the hand, the current value is the value currently being processed in the array.&lt;/p&gt;

&lt;p&gt;Optionally, the reduce method can take in a second argument that will represent the initialValue. This value is what the accumulator will start as if it is passed in. Additionally, the callback can take in other parameters for the index and array, which represent the index of the current element being processed and the array the reduce method was called on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rFiPDJIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lb03s75386jtjqpiknmz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rFiPDJIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lb03s75386jtjqpiknmz.png" alt="reduce-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-sort-endraw-sorts-the-elements-destructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;sort&lt;/code&gt;: Sorts the elements (destructive)
&lt;/h4&gt;

&lt;p&gt;When calling this method on the array it will sort it in place and return the sorted version. By default the elements will be sorted in &lt;strong&gt;ascending&lt;/strong&gt; order by converting the elements to strings and then comparing their Unicode code points. It‚Äôs important to know how they are sorted because in a numeric sort, 9 comes before 80, but because numbers are converted to strings, "80" comes before "9" in the Unicode order. Something important to note, all undefined elements are sorted to the end of the array.&lt;/p&gt;

&lt;p&gt;Optionally, and if you want to be more specific on how to sort (i.e. for integers), you can pass in a callback (compare) function that compares two arguments; the first and second element, often referred to as &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;, to each other. Under the hood, if the callback function returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;less than 0, it means that the current order is correct; the first element will remain before the second element (&lt;strong&gt;a&lt;/strong&gt; will still come before &lt;strong&gt;b&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;0, it means that the elements are equal to each other; the order will remain the same with respect to each other, but sorted with respect to all different elements.&lt;/li&gt;
&lt;li&gt;greater than 0, it means that the current order is incorrect; the second element will be before the first element (&lt;strong&gt;b&lt;/strong&gt; before &lt;strong&gt;a&lt;/strong&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// including the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W8u6CsOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sabheybbo9vb35vrd87x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8u6CsOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sabheybbo9vb35vrd87x.png" alt="sort-method"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-concat-endraw-merge-arrays-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;concat&lt;/code&gt;: Merge arrays (non-destructive)
&lt;/h4&gt;

&lt;p&gt;This method is used to merge two or more arrays, returning a new array without mutating the originals. To be more specific, the new array has all of the elements of the array it is called on, followed in order by, for each argument, the elements of the argument or the argument itself. However, if an argument is a nested array it will not take the nested array out, rather it will only remove it from the array it is in (one-level deep)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun Fact&lt;/em&gt;: &lt;code&gt;concat&lt;/code&gt; copies the object references of the original into the new array so that both the original and new array refer to the same object! Therefore, if a referenced object is modified, the changes are visible to both the new and original arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Array2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWVrpFiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9oltljr4kpp1vt43orz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWVrpFiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9oltljr4kpp1vt43orz.png" alt="concat-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-flat-endraw-creates-a-new-array-with-the-subarray-elements-concatenated-into-it-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;flat&lt;/code&gt;: Creates a new array with the sub-array elements concatenated into it (non-destructive)
&lt;/h4&gt;

&lt;p&gt;Building off of the &lt;code&gt;concat&lt;/code&gt; method, the &lt;code&gt;flat&lt;/code&gt; method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. For a single level array, this accomplishes that same thing as the &lt;code&gt;reduce&lt;/code&gt; method calling upon the &lt;code&gt;concat&lt;/code&gt; method on its accumulator. On the other hand, to enable deep level flatten without the flat method, you can use recursion with reduce and concat.&lt;/p&gt;

&lt;p&gt;While not required, you can optionally pass in an argument that specifies how deep a nested array structure should be flattened. By default this argument is 1, for a single level array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// including the optional parameters&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t2wJrI0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7y5i0ymullgri0co4x1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t2wJrI0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7y5i0ymullgri0co4x1.png" alt="flat-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-filter-endraw-returns-all-the-elements-that-pass-the-test-function-provided-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;filter&lt;/code&gt;: Returns all the elements that pass the test function provided (non-destructive)
&lt;/h4&gt;

&lt;p&gt;This method creates a new array with all the elements that pass a callback (test) function. As it tests each element of the array it is called on, it returns a value that coerces to true to keep the element, or to false otherwise. When the value is false, it essentially skips over the element and does not include it in the array. If nothing passes the test, an empty array is returned. For more information on the parameters for this function, skip back to the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rcO5HWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4uiz06i9rzmf48fwodv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rcO5HWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4uiz06i9rzmf48fwodv.png" alt="filter-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-join-endraw-join-all-the-elements-from-an-array-to-a-string-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;join&lt;/code&gt;: Join all the elements from an array to a string (non-destructive)
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;join&lt;/code&gt; creates and returns a string by concatenating, or joining, all of the elements of the array it was called on. By default the elements are separated by commas, however you can specify what you want to join/separate the elements by. On the other hand, if there is only one element in the array, the single item will be returned as a string without separators, and if there are no elements, an empty string is returned.&lt;/p&gt;

&lt;p&gt;As mentioned, including an argument for the separator parameter is optional if you want the elements to be joined with a comma. Passing in an empty string as the argument will result in the elements joined without any characters/separators. Otherwise, the parameter is what you want to separate each pair of adjacent elements of the array for the returned string. If necessary, the separator is converted to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0h9QhYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9mwzmt1tr112fdvpr46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0h9QhYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9mwzmt1tr112fdvpr46.png" alt="join-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-map-endraw-creates-a-new-array-with-the-results-of-a-callback-function-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;map&lt;/code&gt;: Creates a new array with the results of a callback function (non-destructive)
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;map&lt;/code&gt; takes in a callback function that is called once for every element of the array it is called on. Each time the callback is executed, it returns the value into the new array, which is returned at the end. That said, if you do not use the returned (new) array and/or do not return a value from the callback, using the &lt;code&gt;map&lt;/code&gt; method is considered anti-pattern. Instead you should use the &lt;code&gt;forEach&lt;/code&gt; method or a for loop. For more information on the parameters for this function, skip back to the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oD4u56o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fmnuxv2owhi63zj34aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oD4u56o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fmnuxv2owhi63zj34aw.png" alt="map-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-find-endraw-return-the-value-of-the-first-element-that-satisfies-the-provided-function-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;find&lt;/code&gt;: Return the value of the first element that satisfies the provided function (non-destructive)
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;find&lt;/code&gt; method only returns the first value of the element that satisfies the callback (test) function. If no element passes the test, the &lt;code&gt;find&lt;/code&gt; method will return undefined. That said, if you want to return the index of the element instead of its value, you can use the &lt;code&gt;findIndex&lt;/code&gt; method instead. For more information on the parameters for this function, skip back to the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qptT1Fr7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37yuxx94yfgt36eqtt04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qptT1Fr7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37yuxx94yfgt36eqtt04.png" alt="find-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-foreach-endraw-loop-over-an-array-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;forEach&lt;/code&gt;: Loop over an Array (non-destructive)
&lt;/h4&gt;

&lt;p&gt;Similar to a &lt;code&gt;for&lt;/code&gt; loop, &lt;code&gt;forEach&lt;/code&gt; executes a callback function once for each element in the array. While the &lt;code&gt;forEach&lt;/code&gt; method will not mutate the array it was called on, it is possible for the callback function to mutate it. That said, the &lt;code&gt;forEach&lt;/code&gt; method expects a synchronous function, always returns undefined, and is not chainable. Therefore, the typical use case is to execute side effects at the end of a chain. For more information on the parameters for this function, skip back to the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLxop8x5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl9q1aysk5miay5cfa58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLxop8x5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl9q1aysk5miay5cfa58.png" alt="forEach-method"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fun-methods"&gt;
  &lt;/a&gt;
  Fun Methods &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now, time for some ‚Äúfun‚Äù methods! The methods we will cover here are: &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;includes&lt;/code&gt;, &lt;code&gt;fill&lt;/code&gt;, &lt;code&gt;indexOf&lt;/code&gt;, and &lt;code&gt;findIndex&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-tostring-endraw-returns-a-string-representing-the-array-and-its-elements-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;toString&lt;/code&gt;: Returns a string representing the array and its elements (non-destructive)
&lt;/h4&gt;

&lt;p&gt;Like its name, the &lt;code&gt;toString&lt;/code&gt; method turns the array‚Äôs elements it was called on to a string. To be more specific, this method joins the array and returns one string containing each array element separated by commas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun fact&lt;/em&gt;: JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYwWM5Uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ni7jbhep0wlnzk4oi9id.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYwWM5Uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ni7jbhep0wlnzk4oi9id.png" alt="toString-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-includes-endraw-returns-a-boolean-if-a-value-exists-in-an-array-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;includes&lt;/code&gt;: Returns a boolean if a value exists in an array (non-destructive)
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;includes&lt;/code&gt; determines whether an array includes a certain value among its entries, returning true or false as appropriate. It does this by checking each element for equality with the value rather than using a testing callback function. That said, if you need to find if any element satisfies a provided testing callback function, you can use the some method.&lt;/p&gt;

&lt;p&gt;The argument you must pass in is the value you want the method to search for; keep in mind when comparing strings and characters, &lt;code&gt;includes&lt;/code&gt; is case-sensitive. The optional second argument is the index to start searching for the value and by default is zero. That said, if the index passed in is greater than or equal to the length of the array, false is returned and the array will not be searched. On the other hand, if the index is negative the method uses the absolute value of it as the number of elements from the end of the array at which to start the search&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VO03s7zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6js5a1t1r7jqndvav2m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VO03s7zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6js5a1t1r7jqndvav2m.png" alt="includes-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-fill-endraw-fills-all-the-elements-of-an-array-with-a-static-value-destructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;fill&lt;/code&gt;: Fills all the elements of an array with a static value (destructive)
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;fill&lt;/code&gt; method changes all elements in an array to a static value, from a start index to an end index. It then returns the modified array with the filled values.&lt;/p&gt;

&lt;p&gt;There are three parameters however only the first one is required. The first argument you must pass in is the value to fill the array with. It‚Äôs important to know that all of the elements in the array will be this exact value. The other two optional parameters are for the start index, default is zero, and the end index, default is array.length.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;staticValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JzV5wdtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlvxejp8xxif5jndal1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JzV5wdtq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlvxejp8xxif5jndal1c.png" alt="fill-method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#indexof-amp-findindex-find-the-index-of-an-item-in-the-array-nondestructive"&gt;
  &lt;/a&gt;
  indexOf &amp;amp; findIndex: Find the index of an item in the Array (non-destructive)
&lt;/h4&gt;

&lt;p&gt;Similar to each other in that both return the first index that satisfies a condition. However, while &lt;code&gt;findIndex&lt;/code&gt; is based on the element that satisfies a testing callback function, &lt;code&gt;indexOf&lt;/code&gt; checks each element for equality with the value. Additionally, -1 is returned by &lt;code&gt;indexOf&lt;/code&gt; if the element you are searching for is not present, whereas -1 is returned by &lt;code&gt;findIndex&lt;/code&gt; if nothing satisfies the callback. That said, if you need to find if any element satisfies the provided testing function, you can use the some method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;findIndex&lt;/code&gt; has the same parameters detailed in the &lt;a href="#callback-information"&gt;beginning&lt;/a&gt; of the Advanced Methods section. On the other hand, &lt;code&gt;indexOf&lt;/code&gt; takes in an argument for the element to search for and optionally the index to start searching for. If you include the second argument of the index to start searching and the index is greater than or equal to the array's length, -1 is returned, which means the array will not be searched.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something&lt;/span&gt;
   &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUkpogad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfrprhjctbudkz0l38ut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUkpogad--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfrprhjctbudkz0l38ut.png" alt="indexOf-findIndex-methods"&gt;&lt;/a&gt; &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Congratulations! I declare you ‚Äúmaster of JavaScript arrays and (most) array methods‚Äù! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/12Lt1KWHowKtKo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/12Lt1KWHowKtKo/giphy.gif" alt="diploma"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But seriously though, this was a lot of information and I hope you‚Äôll be able to refer to it in the future! Here are some key takeaways, as well as a reminder of what methods we covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arrays organize their items sequentially and have built-in methods that allow you to easily lookup and add/remove information based on its position.&lt;/li&gt;
&lt;li&gt;JavaScript arrays are special type of object and unlike non-scripting languages, are dynamic&lt;/li&gt;
&lt;li&gt;To create arrays you can use the array literal, new constructor, or of method&lt;/li&gt;
&lt;li&gt;Additionally, you can copy, concatenate arrays, and convert a string into an array by using the spread operator &lt;/li&gt;
&lt;li&gt;
&lt;a href="#basic-methods"&gt;Basic methods&lt;/a&gt; about adding, removing, or copying an array: &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, &lt;code&gt;unshift&lt;/code&gt;, &lt;code&gt;splice&lt;/code&gt;, &lt;code&gt;slice&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#advanced-methods"&gt;Advanced methods&lt;/a&gt; to merge: &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;concat&lt;/code&gt;, &lt;code&gt;flat&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#advanced-methods"&gt;Advanced methods&lt;/a&gt; do something based on a callback: &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;forEach&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fun-methods"&gt;Fun methods&lt;/a&gt; that have to do with the value or index: &lt;code&gt;includes&lt;/code&gt;, &lt;code&gt;indexOf&lt;/code&gt;, &lt;code&gt;findIndex&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fun-methods"&gt;Fun methods&lt;/a&gt; to know: &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;fill&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you made it to the end thank you so much for reading, I hope you found it useful! I recommend checking out my friend Megan's &lt;a href="https://dev.to/mehmehmehlol/when-to-use-these-string-methods-in-javascript-3m4h"&gt;When to Use these String Methods in JavaScript&lt;/a&gt;, for a similar post on String methods. And don't forget about my &lt;a href="https://dev.to/wlcreate/all-about-javascript-arrays-array-methods-4ek4"&gt;collaboration post&lt;/a&gt; with Megan that covers the crossovers between Strings and Arrays!&lt;/p&gt;





&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;All array methods&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.interviewcake.com"&gt;Interview Cake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Fixing the node-sass problem in Rails - node downgrade helps</title>
      <author>Andrzej Krzywda</author>
      <pubDate>Fri, 23 Apr 2021 20:42:05 +0000</pubDate>
      <link>https://dev.to/andrzejkrzywda/fixing-the-node-sass-problem-in-rails-node-downgrade-helps-16lh</link>
      <guid>https://dev.to/andrzejkrzywda/fixing-the-node-sass-problem-in-rails-node-downgrade-helps-16lh</guid>
      <description>&lt;p&gt;Today I've had one of those irritating problems with Rails that I know one day I will have again. So, future me when you google it, here is the fix, you're welcome :)&lt;/p&gt;

&lt;p&gt;The problem shows like this during &lt;code&gt;rails new new_app&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules/node-sass: Command failed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1 error generated.
make: *** [Release/obj.target/binding/src/binding.o] Error 1
gyp ERR! build error 
gyp ERR! stack Error: `make` failed with exit code: 2
gyp ERR! stack     at ChildProcess.onExit (/Users/andrzej/apps/stimulus_infinite_scroll/node_modules/node-gyp/lib/build.js:262:23)
gyp ERR! stack     at ChildProcess.emit (node:events:365:28)
gyp ERR! stack     at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12)
gyp ERR! System Darwin 19.6.0
gyp ERR! command "/usr/local/Cellar/node/16.0.0/bin/node" "/Users/andrzej/apps/stimulus_infinite_scroll/node_modules/node-gyp/bin/node-gyp.js" "rebuild" "--verbose" "--libsass_ext=" "--libsass_cflags=" "--libsass_ldflags=" "--libsass_library="
gyp ERR! cwd /Users/andrzej/apps/stimulus_infinite_scroll/node_modules/node-sass
gyp ERR! node -v v16.0.0
gyp ERR! node-gyp -v v3.8.0
gyp ERR! not ok
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the node version used is &lt;code&gt;16.0.0&lt;/code&gt;. At the moment of writing this post, it's a relatively new version and not everything works fine with this. &lt;/p&gt;

&lt;p&gt;The solution? Downgrade node.&lt;/p&gt;

&lt;p&gt;In my case I did:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g n
sudo n 14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and that's it. &lt;/p&gt;

&lt;p&gt;A possible alternative:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew remove node
brew install node@14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If this helped you, let me know in the comments, so that I believe in value of such posts even more ;)&lt;/p&gt;

</description>
      <category>5days5blogposts</category>
      <category>rails</category>
      <category>node</category>
    </item>
    <item>
      <title>From String to Array to String</title>
      <author>Megan Lo</author>
      <pubDate>Fri, 23 Apr 2021 20:38:40 +0000</pubDate>
      <link>https://dev.to/mehmehmehlol/from-string-to-array-to-string-f67</link>
      <guid>https://dev.to/mehmehmehlol/from-string-to-array-to-string-f67</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about-writers"&gt;
  &lt;/a&gt;
  About Writers
&lt;/h2&gt;

&lt;p&gt;Hello everyone! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSAUibP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://37.media.tumblr.com/1dee0c9e399b34cc10c12d04506d5f10/tumblr_n53cb0KpVC1smcbm7o1_500.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSAUibP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://37.media.tumblr.com/1dee0c9e399b34cc10c12d04506d5f10/tumblr_n53cb0KpVC1smcbm7o1_500.gif" alt="Hello GIF"&gt;&lt;/a&gt;&lt;br&gt;
This is Waverley and Megan! We are both tech enthusiasts and graduated from Flatiron School recently. Both of us enjoy writing blogs to help other programmers learn and we learn from writing as well (win-win!). This will be our first time writing blogs on dev.to and collaborating on a series with each other, and we are so excited to create content for you all! &lt;strong&gt;Feedback is appreciated as we continue to navigate this process&lt;/strong&gt; üôè &lt;/p&gt;

&lt;p&gt;When we first decided to collaborate we came up with a lot of topics to write about. However, as we are both currently in our job search and as bootcamp graduates, we wanted to work on something that will help us now and others in the future. Ultimately, we decided to have this series focus on data structures and algorithms, something we both feel is important to know but not exactly the easiest to understand. &lt;/p&gt;

&lt;p&gt;Also, check out our Medium blogs for more of our work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://waverley-place.medium.com/"&gt;Waverley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meganslo.medium.com/"&gt;Megan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Today, we are going to talk about converting array to string, and vice versa. This is one of the commonly seen strategies that is used when solving string-and-array-related coding questions. &lt;/p&gt;

&lt;p&gt;Before we get started, if you are interested in knowing array methods, here's &lt;a href="https://dev.to/wlcreate/everything-javascript-arrays-array-methods-14om"&gt;Everything JavaScript Arrays &amp;amp; Array Methods!&lt;/a&gt; by Waverley; and for string methods, here's &lt;a href="https://dev.to/mehmehmehlol/when-to-use-these-string-methods-in-javascript-3m4h"&gt;When to Use these String Methods in JavaScript&lt;/a&gt; by Megan.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#array-to-string"&gt;From Array to String&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#toString"&gt;toString()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#join"&gt;join()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#string-to-array"&gt;From String to Array&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#split"&gt;split()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#array-from"&gt;Array.from()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#object-assign"&gt;Object.assign([], string)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#bonus"&gt;Bonus&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#spread-operator"&gt;Spread Operator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#from-array-to-string"&gt;
  &lt;/a&gt;
  From Array to String &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Something that we often need to do is convert an array to a string. Thankfully JavaScript has two built-in methods to accomplish this: &lt;code&gt;toString()&lt;/code&gt; and &lt;code&gt;join()&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-tostring-endraw-returns-a-string-representing-the-array-and-its-elements-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;toString()&lt;/code&gt;: Returns a string representing the array and its elements (non-destructive)
&lt;/h4&gt;

&lt;p&gt;Like its name, the &lt;code&gt;toString()&lt;/code&gt; method turns the array‚Äôs elements it was called on to a string. To be more specific, this method joins the array and returns one string containing each array element separated by commas.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fun fact&lt;/em&gt;: JavaScript calls the toString method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// "1,2,a,1a"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-join-endraw-join-all-the-elements-from-an-array-to-a-string-nondestructive"&gt;
  &lt;/a&gt;
  &lt;code&gt;join()&lt;/code&gt;: Join all the elements from an array to a string (non-destructive)
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;join()&lt;/code&gt; creates and returns a string by concatenating, or joining, all of the elements of the array it was called on. By default the elements are separated by commas, however you can specify what you want to join/separate the elements by. On the other hand, if there is only one element in the array, the single item will be returned as a string without separators, and if there are no elements, an empty string is returned.&lt;/p&gt;

&lt;p&gt;As mentioned, including an argument for the separator parameter is optional if you want the elements to be joined with a comma. Passing in an empty string as the argument will result in the elements joined without any characters/separators. &lt;/p&gt;

&lt;p&gt;Otherwise, the parameter is what you want to separate each pair of adjacent elements of the array for the returned string. If necessary, the separator is converted to a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;joinArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wind&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Water&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fire&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;joinArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;      &lt;span class="c1"&gt;// 'Wind,Water,Fire' b/c no separator so joined with commas and no spaces&lt;/span&gt;
&lt;span class="nx"&gt;joinArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 'Wind, Water, Fire' b/c separator is comma and space&lt;/span&gt;
&lt;span class="nx"&gt;joinArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 'Wind + Water + Fire' b/c separator is space, plus sign, space&lt;/span&gt;
&lt;span class="nx"&gt;joinArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äú‚Äù&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 'WindWaterFire' b/c separator is an empty string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#toc"&gt;Back to the Table of Contents&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#from-string-to-array"&gt;
  &lt;/a&gt;
  From String to Array &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#-raw-split-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;split()&lt;/code&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;As mentioned above, we can &lt;code&gt;join&lt;/code&gt; string from array. We can also &lt;code&gt;split&lt;/code&gt; string to array. Here, we are going to utilize the &lt;code&gt;join()&lt;/code&gt; example to see the alternative results from above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;splitToArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wind, Water, Fire&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;splitToArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="cm"&gt;/* [
     'W', 'i', 'n', 'd', ',',
     ' ', 'W', 'a', 't', 'e',
     'r', ',', ' ', 'F', 'i',
     'r', 'e'
   ], no separators
*/&lt;/span&gt;
&lt;span class="nx"&gt;splitToArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// [ 'Wind,', 'Water,', 'Fire' ], split by the whitespaces&lt;/span&gt;
&lt;span class="nx"&gt;splitToArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// [ 'Wind', ' Water', ' Fire' ], split by commas&lt;/span&gt;
&lt;span class="c1"&gt;// As you can see there're still whitespaces in front of each element&lt;/span&gt;
&lt;span class="c1"&gt;// To solve this, we can do the following:&lt;/span&gt;
&lt;span class="nx"&gt;splitToArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'Wind', 'Water', 'Fire' ], split by commas and one additional whitespace&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is probably the most common way to split a string to an array and join afterwards.&lt;/p&gt;

&lt;p&gt;Most of the time, when we want to apply array methods to a given string, this is a go-to method to do so. For instance, if we want to reverse a string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// In comparison to:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reversed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="c1"&gt;// having to create a new string takes space&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reversed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;reversed&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unless your interviewer specifies &lt;code&gt;reverse()&lt;/code&gt; method is not allowed to be used, using the &lt;code&gt;split()&lt;/code&gt; and &lt;code&gt;join()&lt;/code&gt; method would help create a more readable, cleaner code. Also, since &lt;code&gt;reverse()&lt;/code&gt; is not a string method, this is where we can utilize our array method in this case.&lt;/p&gt;

&lt;p&gt;Palindrome is also another common question which you can make use of the &lt;code&gt;split()&lt;/code&gt; and &lt;code&gt;join()&lt;/code&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#-raw-arrayfromstring-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Array.from(string)&lt;/code&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;There are two ways you can use &lt;code&gt;Array.from()&lt;/code&gt;. Either you want to modify and create a new shallow-copied array OR &lt;em&gt;drumroll please&lt;/em&gt; ü•Åü•Åü•Å converting string to array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// To modify an array (Not the focus of this section)&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [ 2, 4, 6, 8, 10 ]&lt;/span&gt;

&lt;span class="c1"&gt;// Convert string to array&lt;/span&gt;
&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;J&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, these are just some suggestive ways of converting string to array. &lt;br&gt;
According to this &lt;a href="https://blog.shovonhasan.com/never-use-array-from-to-convert-strings-to-arrays/"&gt;article&lt;/a&gt;, using the same reversed example we have above, the runtime of using &lt;code&gt;String.prototype.split()&lt;/code&gt; is way faster than using &lt;code&gt;Array.from()&lt;/code&gt;. &lt;br&gt;
But you know, at least we know &lt;code&gt;Array.from()&lt;/code&gt; is one of the possible ways to convert string to array!&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#-raw-objectassign-string-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Object.assign([], string)&lt;/code&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;You probably heard of &lt;code&gt;Object.keys()&lt;/code&gt;, &lt;code&gt;Object.entries()&lt;/code&gt; which would return a new array. What about &lt;code&gt;Object.assign()&lt;/code&gt;?&lt;br&gt;
Similar deal! &lt;br&gt;
According to MDN, the definition of &lt;code&gt;Object.assign()&lt;/code&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Object.assign() method copies all enumerable own properties from one or more source objects to a target object. It returns the target object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;Object.assign()&lt;/code&gt; takes two arguments: &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt;. In our case, our &lt;code&gt;target&lt;/code&gt; is an empty array &lt;code&gt;[]&lt;/code&gt; and our &lt;code&gt;source&lt;/code&gt; is the given string (which is an enumerable/ can be iterated object).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['f', 'o', 'o']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay! It works... on the surface... If you move this to TypeScript...&lt;/p&gt;




&lt;p&gt;‚úãüèªPAUSE‚úãüèª&lt;br&gt;
For those who are not familiar with TypeScript, don't worry. Here's a quick breakdown. You don't have to fully understand TypeScript. All you have to know is that TypeScript is a superset of JavaScript. Most of the time, variables are assigned to a primitive data type in advance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In JS&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// In TS&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool thing about using TypeScript is that you would also see the variable type by hovering over the variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hYTqgO5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxwuodfn7dzmy9yshmc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hYTqgO5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxwuodfn7dzmy9yshmc0.png" alt="Screenshot from CodeCademy"&gt;&lt;/a&gt;&lt;br&gt;
(Screenshot Credit: CodeCademy -- Learn TypeScript course)&lt;/p&gt;

&lt;p&gt;Capiche? Hopefully you got the gist of it. Back to the topic...&lt;/p&gt;



&lt;p&gt;If you move this to TypeScript, the type of this new copied array does not return as &lt;strong&gt;an array of string&lt;/strong&gt;. üò± &lt;br&gt;
If we look at other methods we mentioned above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to copy and paste the code to the &lt;a href="https://www.typescriptlang.org/play/"&gt;playground&lt;/a&gt; and hover over &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt;. &lt;br&gt;
They both return &lt;code&gt;split: string[]&lt;/code&gt; and &lt;code&gt;from: string[]&lt;/code&gt;. (&lt;code&gt;string[]&lt;/code&gt; means array of strings.)&lt;/p&gt;

&lt;p&gt;However, when you hover over &lt;code&gt;const obj = Object.assign([], str)&lt;/code&gt;. It returns...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMXQbovs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4arulbcswlcpc2uuhkoc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMXQbovs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4arulbcswlcpc2uuhkoc.png" alt="Screenshot for Object.assign()"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;obj : never[] &amp;amp; "foo"&lt;/code&gt;, a.k.a. it is never an array but a string.&lt;/p&gt;

&lt;p&gt;Isn't that interesting? üòÆ (thanks to our &lt;a href="https://www.samanthaming.com/tidbits/83-4-ways-to-convert-string-to-character-array/#a-caveat-about-object-assign-%E2%9A%A0%EF%B8%8F"&gt;resource&lt;/a&gt;)&lt;/p&gt;



&lt;p&gt;Although we have 3 ways to convert strings to array, including the spread operator (will be explained in the Bonus Section below), it seems like &lt;code&gt;split()&lt;/code&gt; is the best way to do so!&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;Back to the Table of Contents&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#spread-operator"&gt;
  &lt;/a&gt;
  Spread Operator &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;While the spread operator (&lt;code&gt;...&lt;/code&gt;)  is not specific to arrays, it is something helpful to know and use! &lt;/p&gt;

&lt;p&gt;From MDN, the spread operator: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, essentially the spread operator takes each of the elements inside of the passed in object or array and adds it to the array it is being added to. &lt;/p&gt;

&lt;p&gt;As a result, it is often used when all elements from an object or array need to be included in another list of some kind; typical use cases include copying arrays or concatenating an array to the end of an existing array. However, specifically for copying an array, the spread operator goes one level deep. Meaning that if you spread an array into another array, the array it was spread into will not be nested.&lt;/p&gt;

&lt;p&gt;Furthermore, it‚Äôs important to know that you cannot spread objects into an array or an array into an object. This is because objects alone are not iterable. However, when used in an array or with iterating functions (such as &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;reduce&lt;/code&gt;), they become iterable. &lt;/p&gt;

&lt;p&gt;Under the hood, when the merging occurs 2 objects together with the spread operator, it is assumed that another iterating function is used. On the other hand, if you spread a string into an array, it will create an array with each char in the string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// general example&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;constructorArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [4, 1, 2, 3]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;literalArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// [4, 1, 2, 3]&lt;/span&gt;

&lt;span class="c1"&gt;// copying an array- showing how the spread operator does not nest&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [[1], [2], [3]]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [[1], [2], [3]]&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [[], [2], [3]]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [[2], [3]]&lt;/span&gt;

&lt;span class="c1"&gt;// cannot spread an object into an array&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: obj is not iterable&lt;/span&gt;

&lt;span class="c1"&gt;// spreading a string into an array&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["h", "e", "l", "l", "o", "w", "o", "r", "l", "d"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#before-you-go"&gt;
  &lt;/a&gt;
  Before You Go... &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's conclude what we have discussed!&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#from-array-to-string-we-have"&gt;
  &lt;/a&gt;
  From Array to String, we have...
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#from-string-to-array-we-have"&gt;
  &lt;/a&gt;
  From String to Array, we have...
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assign.from()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.assign([], string)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least, spread operator (&lt;code&gt;...&lt;/code&gt;) can be used to convert array to string, and vice versa. &lt;/p&gt;

&lt;p&gt;Hope you enjoy our first collab article and please give us feedback if you have!&lt;br&gt;
&lt;a href="https://i.giphy.com/media/M9NbzZjAcxq9jS9LZJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/M9NbzZjAcxq9jS9LZJ/giphy.gif" alt="Thank You GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üôåüèª Since we can't co-publish articles, we have to publish the same article in our own individual platform. Please give some shoutout to &lt;a href="https://dev.to/wlcreate/all-about-javascript-arrays-array-methods-4ek4"&gt;Waverley&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;Back to the Table of Contents&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;String &amp;lt;=&amp;gt; Array

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.samanthaming.com/tidbits/83-4-ways-to-convert-string-to-character-array/"&gt;4 Ways to Convert String to Character Array in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flaviocopes.com/how-to-convert-array-to-string-javascript/"&gt;How to convert an Array to a String in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Array

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/wlcreate/all-about-javascript-arrays-array-methods-3n9"&gt;Everything JavaScript Arrays &amp;amp; Array Methods!&lt;/a&gt; (by Waverley)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;String

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/mehmehmehlol/when-to-use-these-string-methods-in-javascript-3m4h"&gt;When to Use these String Methods in JavaScript&lt;/a&gt; (by Megan)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;MDN&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
