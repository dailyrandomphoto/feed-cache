<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Dev Decoded: Lessons from publishing 20 blogs</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 20 Jun 2021 05:33:11 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/dev-decoded-lessons-from-publishing-20-blogs-blj</link>
      <guid>https://dev.to/ruppysuppy/dev-decoded-lessons-from-publishing-20-blogs-blj</guid>
      <description>&lt;p&gt;I had been writing blogs since March 2021 and had been posting articles every week consistently. Over the last 20 weeks, I had my fair share of massive hits which made it to the &lt;strong&gt;#1 Weekly Blogs&lt;/strong&gt; as well as articles which no one read. In this article, I would be sharing the lessons I learned on this journey.&lt;/p&gt;

&lt;p&gt;My metrics you ask? I am always open for some &lt;em&gt;shameless self-promotion&lt;/em&gt; 😉&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Views:&lt;/strong&gt; 104,929&lt;br&gt;
&lt;strong&gt;Reactions:&lt;/strong&gt; 3,298&lt;br&gt;
&lt;strong&gt;Followers:&lt;/strong&gt; 818&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#does-reading-time-matter"&gt;
  &lt;/a&gt;
  Does Reading Time matter?
&lt;/h1&gt;

&lt;p&gt;Short answer no. As the saying goes, content is the king. If you produce good content the views and the reactions will come, doesn't matter how long or short your articles is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8P-ujpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcx3kytr03ao03d2f94j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8P-ujpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vcx3kytr03ao03d2f94j.jpg" alt="Content is King"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main issue is identifying content that will engage readers. There is no simple solution for this, but I will share how I approach the problem: &lt;em&gt;I try writing articles that users already are looking for&lt;/em&gt;. This helps to drive up views as people are actively looking for the information you are providing. You can identify such topics by the issues you faced while &lt;em&gt;building&lt;/em&gt; or &lt;em&gt;learning&lt;/em&gt; something and share how you solved the problem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#auto-promoted-posts"&gt;
  &lt;/a&gt;
  Auto Promoted Posts
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Dev&lt;/strong&gt; algorithm promotes new articles, which is fabulous because you can create new posts regularly and &lt;strong&gt;Dev&lt;/strong&gt; will take care of pushing them to readers. Once you gain some traction with your article, &lt;strong&gt;Dev&lt;/strong&gt; will also promote it in &lt;em&gt;Must Reads Section&lt;/em&gt;, which draws even more readers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#best-time-to-post"&gt;
  &lt;/a&gt;
  Best Time to post
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OCEmHWm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvznj5is023ib139ogl9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCEmHWm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvznj5is023ib139ogl9.jpg" alt="Best Time to Post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Several people carried out their own research and found out that the best time to post articles is on &lt;strong&gt;Monday afternoon (UTC)&lt;/strong&gt; as it's the time when &lt;strong&gt;Dev&lt;/strong&gt; sees its highest number of active users. But I truly believe that quality content will still outperform content released at the right time, but publishing the articles at the right time DOES help in boosting how the blog performs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-grammarly"&gt;
  &lt;/a&gt;
  Use Grammarly
&lt;/h1&gt;

&lt;p&gt;This the biggest boon for me while writing my blogs. Even the free tier of &lt;a href="https://app.grammarly.com/"&gt;Grammarly&lt;/a&gt; provides plenty of outstanding features ranging from &lt;em&gt;spelling checker&lt;/em&gt; to &lt;em&gt;enagagement&lt;/em&gt; and &lt;em&gt;delivery analyzer&lt;/em&gt;, that helps you write engaging content and take your blog to the next level.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This article covers some of the things I learned over the past few months of writing a blog every week.&lt;/p&gt;

&lt;p&gt;By no means I am an expert &lt;strong&gt;blogger&lt;/strong&gt;, but I definitely have come a long way at writing articles from where I started. I had some great successes and epic failures along the way, but above all, I got to learn a lot by embarking on this journey. I found that the best way to learn anything is to try it hands-on. When I began I was scared to the bone, but over time writing has become a hobby moreover, I have become quite decent at writing content. I wish you a &lt;strong&gt;Best of Luck&lt;/strong&gt; if you are getting started on this journey :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w_zzxv9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn5ga5oud0109544mu1x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w_zzxv9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn5ga5oud0109544mu1x.PNG" alt="Best of Luck"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a student &amp;amp; freelancer who will soon start off as a Digital Nomad as soon as I graduate. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Build a Strong Professional Network Online</title>
      <author>Neha Soni</author>
      <pubDate>Sun, 20 Jun 2021 05:18:32 +0000</pubDate>
      <link>https://dev.to/nehasoni__/how-to-build-a-strong-professional-network-online-b7k</link>
      <guid>https://dev.to/nehasoni__/how-to-build-a-strong-professional-network-online-b7k</guid>
      <description>&lt;p&gt;Whether you’re a company leader, an expert, an online course creator, a student or a Fortune 500 company, the benefits of building an online community are undeniable. Networking is the key to a successful career but making new connections can be difficult because a global pandemic has made meeting new people nearly impossible. &lt;br&gt;
Does this mean we should give up on networking altogether?&lt;br&gt;&lt;br&gt;
So the answer to this question is NO, just because we can’t meet people face-to-face doesn't mean we should give up networking entirely. You can still connect with people in your industry by learning how to build a network online.&lt;br&gt;
Today I am going to share some tips that will help you to build your professional network online, even if you're not a natural schmoozer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-choose-the-right-platforms"&gt;
  &lt;/a&gt;
  1.) Choose the right platforms
&lt;/h1&gt;

&lt;p&gt;You are familiar with social media platforms, right? You add friends on Snapchat and gain followers on Instagram.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZGfgtyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624091417768/Oo1mEdZAX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZGfgtyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624091417768/Oo1mEdZAX.png" alt="platforms.png"&gt;&lt;/a&gt;&lt;br&gt;
In the professional sense, networking is like establishing connections with people typically in your field. As you know, &lt;strong&gt;LINKEDIN&lt;/strong&gt; is the most popular professional networking platform. Yet, other options like &lt;strong&gt;FACEBOOK&lt;/strong&gt;, &lt;strong&gt;TWITTER&lt;/strong&gt;, &lt;strong&gt;QUORA&lt;/strong&gt;, &lt;strong&gt;ALIGNABLE&lt;/strong&gt;, etc. have specific strengths that approach networking in different and meaningful ways. &lt;br&gt;&lt;br&gt;
If you are searching for job seekers, looking to build your personal brand, &lt;strong&gt;Linkedin&lt;/strong&gt; is best for that. Here you can find people who work in various companies you are interested in. &lt;strong&gt;Twitter’s&lt;/strong&gt; use of hashtags makes it easy to find trending topics and experts and join the conversations too. The more you use social media with professional networking in mind, the more you’ll be able to connect with others.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-maintain-your-profile-be-fresh-be-relevant"&gt;
  &lt;/a&gt;
  2.) Maintain your profile: Be Fresh, Be Relevant
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ghMzCLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624091739107/wSnQu_MF7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ghMzCLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624091739107/wSnQu_MF7.png" alt="professionalprofile.png"&gt;&lt;/a&gt;&lt;br&gt;
To make a strong impact, make sure you put together a solid, detailed, and accurate profile. Continuously update your profile because as your career grows and changes so should your profile. Choose a clear, close-up image of yourself wearing something that you would wear to work for your profile picture. A well-written profile will give you credibility and will establish you as a trustworthy potential employee. If you update your profile timely there are great chances to get better job opportunities and it also attracts unexpected opportunities. So, &lt;em&gt;Update your profile and upload your resume if not done already.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-be-open-to-new-connections"&gt;
  &lt;/a&gt;
  3.) Be open to new connections
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cst3Q0-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624091938848/Ofov3k-pS.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cst3Q0-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624091938848/Ofov3k-pS.jpeg" alt="newcon.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Having the right people in your network can give you tons of opportunities, but you have to take the first step. Don't limit yourself to connecting with people you think can help you. If you have your eye on a specific company, try connecting with the people who work there. Establishing an online network of your peers can help you stay engaged and once you start connecting with people you can discover more people through mutual connections. Share your accomplishments, thoughts, show off your work, and also start interacting with people.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-be-clear-with-your-intentions"&gt;
  &lt;/a&gt;
  4.) Be clear with your intentions
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W7YNZR-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624092120350/BEsGb1Kpo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W7YNZR-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624092120350/BEsGb1Kpo.jpeg" alt="sample.jpg"&gt;&lt;/a&gt;&lt;br&gt;
It is important to make your intentions clear when you are reaching out to someone new. Do not just drop 'Hi', 'Hey', 'Hello'. Don't expect a response for:-&lt;br&gt;
1.) Please be my girlfriend/boyfriend.&lt;br&gt;
2.) Let's chat on WhatsApp.&lt;br&gt;
3.) send me money.&lt;br&gt;
4.) get Subscribers for my YouTube.&lt;br&gt;
...etc. For your time pass just don't kill other’s time. Be professional, clear, and concise. Planning your questions in advance can also help the meeting run smoothly.&lt;br&gt;
You should follow basic ethics and motivate people like you to help the society who is eager to learn and grow.&lt;br&gt;&lt;br&gt;
&lt;em&gt;" Be clear on what you want. You will get a better response if you do this. "&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-help-people-out"&gt;
  &lt;/a&gt;
  5.) Help people out
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R8G8UYAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624092133562/z7KopMu77.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R8G8UYAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624092133562/z7KopMu77.jpeg" alt="poster.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Volunteering your time, money, or energy to help others doesn't just make the world better—it also makes you better. When you help someone you earn respect from them, your networking partner will be grateful and want to return the favor. If you provide others value, they’ll eventually help you without even thinking twice. So be helpful and supportive. Support their valuable content, share their work so that it can help others too.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-be-naturally-curious-to-learn-new-things"&gt;
  &lt;/a&gt;
  6.) Be naturally curious to learn new things
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xitD8ymS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624092202473/8YjBqqb4z.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xitD8ymS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624092202473/8YjBqqb4z.jpeg" alt="curious.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Being curious is the key to excel at any task and do it better, as you ask questions, learn from others, and look for ways to do your job better. When curious people fail, they analyze their failure, because they are keen on knowing the reasons, so they can do better the next time. This increases their chances for success. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Building your online network is a lot like building it in person-it requires perseverance, persistence, and a desire to connect. It can also make you a better, more interesting person.&lt;br&gt;&lt;br&gt;
So are you ready to expand your network? Go for it. And remember: be kind, be professional, and be yourself.&lt;br&gt;&lt;br&gt;
If you liked this article, share it with others and &lt;strong&gt;"Let's learn and grow together"&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 🤝🤝
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;br&gt;
Let me know in the comment section if you have any doubts or feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5"&gt;Plasma Donation Website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/random-quote-generator-using-html-css-and-javascript-3gbp"&gt;Random Quote Generator Using HTML, CSS, and JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/playing-with-javascript-objects-k4h"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-reactjs-3553"&gt;Introduction to ReactJS
&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>career</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Drag &amp; Drop or Browse 😍 to Upload File using JavaScript | Tutorial</title>
      <author>Somanath Goudar</author>
      <pubDate>Sun, 20 Jun 2021 05:15:33 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/drag-drop-or-browse-to-upload-file-using-javascript-tutorial-3hcd</link>
      <guid>https://dev.to/somanathgoudar/drag-drop-or-browse-to-upload-file-using-javascript-tutorial-3hcd</guid>
      <description>&lt;p&gt;Hey Everyone, In this JavaScript Project Tutorial, Lets learn how to Implement Drag &amp;amp; Drop feature to upload an Image File using JavaScript. And also We will Implement our good old browse to upload file as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It supports these file formats :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JPEG&lt;/li&gt;
&lt;li&gt;JPG&lt;/li&gt;
&lt;li&gt;PNG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;We are going to use three Event Listeners :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;dragover&lt;/strong&gt; : which listens for when file enters the drag area.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;gragleave&lt;/strong&gt; : which listens for when fil leaves the drag area.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;drop&lt;/strong&gt; : when the file is dropped in the drag area.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;➜ Here is the Demo :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ruu9_Fm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-dvxwgD16dJg/YMWtkLCdlkI/AAAAAAAAAGg/2l64Tdd-nQ8uMSjDiCkWklu8eMiASgidQCLcBGAsYHQ/s16000/drag-drop-gif.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ruu9_Fm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://1.bp.blogspot.com/-dvxwgD16dJg/YMWtkLCdlkI/AAAAAAAAAGg/2l64Tdd-nQ8uMSjDiCkWklu8eMiASgidQCLcBGAsYHQ/s16000/drag-drop-gif.gif" alt="Drag &amp;amp; Drop or Browse 😍 to Upload File using HTML CSS and JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;➜ Step by Step Tutorial :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HuVI3p1MNPo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://www.futurecodersweb.com/2021/06/drag-drop-or-browse-file-upload.html"&gt;Source Code&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.youtube.com/futurecoders"&gt;Subscribe to My Channel&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;&lt;strong&gt;You may also like my other posts :&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/facebook-clone-using-just-html-css-beginners-tutorial-2fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;FACEBOOK Clone Using just HTML &amp;amp; CSS - Beginners Tutorial&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-a-youtube-clone-with-just-html-css-for-complete-beginners-4fk1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a YouTube Clone with just HTML &amp;amp; CSS + Responsive - For  Beginners&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ Mar 21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-tiktok-clone-in-just-30-mins-using-html-and-css-213l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔴 Build TikTok Clone using HTML and CSS&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ May 24 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Design Patterns: Abstract Factory</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 20 Jun 2021 05:01:33 +0000</pubDate>
      <link>https://dev.to/tamerlang/design-patterns-abstract-factory-1i0n</link>
      <guid>https://dev.to/tamerlang/design-patterns-abstract-factory-1i0n</guid>
      <description>&lt;p&gt;Abstract Factory?&lt;/p&gt;

&lt;p&gt;For the longest time, this pattern was very confusing to me. &lt;/p&gt;

&lt;p&gt;But through blood, sweat, and tears, I've finally cracked it down.&lt;/p&gt;

&lt;p&gt;I don't want you to go through the same. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;By the end of this article, you will:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand the core concepts of Abstract Factory&lt;/li&gt;
&lt;li&gt;Recognize opportunities to use Abstract Factory&lt;/li&gt;
&lt;li&gt;Understand the pros and cons of Abstract Factor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;Abstract factory is a creational design pattern that provides an interface to create families of classes without concrete implementations. &lt;/p&gt;

&lt;p&gt;But Tamer, what do you mean by "families of classes"?&lt;/p&gt;

&lt;p&gt;Well, imagine that you are creating a software for a furniture store. The store sells chairs, sofas, etc... &lt;/p&gt;

&lt;p&gt;But there isn't only one type of chair there are multiple types of chairs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3Chzp96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q5d4pm0hv1nzo7os7s4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3Chzp96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q5d4pm0hv1nzo7os7s4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can call this a family of chairs, hence have different classes for each type of chair.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ack86bQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7y5iy8wteauzs1mzxyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ack86bQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7y5iy8wteauzs1mzxyj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But now let's us imagine that we not only have a family of chairs, we have a family of tables, sofas, etc...&lt;/p&gt;

&lt;p&gt;They also are a family for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Victorian Furniture: Victorian Chair + Victorian Table + Victorian Sofa&lt;/li&gt;
&lt;li&gt;Modern Furniture: Modern Chair + Modern Table + Modern Sofa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So right now our problem is that we have to be able to create individual furniture objects so that they match other objects of the same family.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;To begin, we would need to create an interface for each furniture, i.e chair, table, and sofa.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Chair&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;hasLegs&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sitOn&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ... other interfaces for table and sofa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this we can now create the specific objects such as &lt;code&gt;VictorianChair&lt;/code&gt; and &lt;code&gt;ModernChair&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VictorianChair&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Chair&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code implementing victorian chair &lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModernChair&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Chair&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// code implementhing modern chair&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we would want to create families of products, for that we would create a factory. But to do that let's first create the interface the factory would use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FurnitureFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Chair&lt;/span&gt; &lt;span class="nf"&gt;createChair&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="nf"&gt;createTable&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Sofa&lt;/span&gt; &lt;span class="nf"&gt;createSofa&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we can have, different factories for different types of furniture i.e &lt;code&gt;VictorianFurnitureFactory&lt;/code&gt; and &lt;code&gt;ModernFurnitureFactory&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;VictorianFurnitureFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FurnitureFactory&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Chair&lt;/span&gt; &lt;span class="nf"&gt;createChair&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;VictorianChair&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Table&lt;/span&gt; &lt;span class="nf"&gt;createTable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;VictorianTable&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Sofa&lt;/span&gt; &lt;span class="nf"&gt;createSofa&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;VictorianSofa&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// same thing for modern furniture factory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Things are much simpler now, for each new variant of furniture, we simply create a new class that implements the abstract factory in our case it's the &lt;code&gt;FurnitureFactory&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;Now the client code only needs to accept a class that implements &lt;code&gt;FurnitureFactory&lt;/code&gt; and call it's respective methods. If you want a different variation you simply change the concrete factory class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-the-pattern"&gt;
  &lt;/a&gt;
  When to use the pattern?
&lt;/h2&gt;

&lt;p&gt;Use the abstract factory pattern when you have families of objects, and you don't want them to concretely depend on each other. For example, I wouldn't want my &lt;code&gt;VictorionChair&lt;/code&gt; to be directly coupled with &lt;code&gt;VictorianTable&lt;/code&gt; or &lt;code&gt;VictorianSofa&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-amp-cons"&gt;
  &lt;/a&gt;
  Pros &amp;amp; Cons
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Products are compatible with each other, because they all use the same interface.&lt;/li&gt;
&lt;li&gt;You avoid tight coupling between the concrete objects and client code.&lt;/li&gt;
&lt;li&gt;Single Responsibility Principle: you put the object creation all into one class. Hence making it easier to maintain.&lt;/li&gt;
&lt;li&gt;Open Closed Principle: to add new variants you don't have to change existing code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We added so many classes and interfaces, making the code more complicated.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, you just learned the abstract factory. It's useful in many business domains, and you might just use it next time at work. &lt;/p&gt;

&lt;p&gt;In this article, you learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What the abstract factory is, and it's components.&lt;/li&gt;
&lt;li&gt;How to implement the abstract factory.&lt;/li&gt;
&lt;li&gt;When to recognize opportunities to use the abstract factory.&lt;/li&gt;
&lt;li&gt;Pros and cons of the abstract factory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#further-readings"&gt;
  &lt;/a&gt;
  Further Readings
&lt;/h2&gt;

&lt;p&gt;If you want to learn more about the design patterns, I would recommend &lt;a href="https://refactoring.guru/design-patterns"&gt;Diving into Design Patterns&lt;/a&gt;. It explains all 23 design patterns found in the GoF book, in a fun and engaging manner.&lt;/p&gt;

&lt;p&gt;Another book that I recommend is &lt;a href="https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124"&gt;Heads First Design Patterns: A Brain-Friendly Guide&lt;/a&gt;, which has fun and easy-to-read explanations.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Daily Developer Jokes - Sunday, Jun 20, 2021</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Sun, 20 Jun 2021 04:48:34 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/daily-developer-jokes-sunday-jun-20-2021-18dk</link>
      <guid>https://dev.to/dailydeveloperjokes/daily-developer-jokes-sunday-jun-20-2021-18dk</guid>
      <description>&lt;p&gt;Generated by Daily Developer Jokes, a project by &lt;a href="https://xtrp.io/"&gt;Fred Adams&lt;/a&gt; (&lt;a href="https://dev.to/xtrp"&gt;@xtrp&lt;/a&gt; on DEV)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Read about Daily Developer Jokes on &lt;a href="https://xtrp.io/blog/2020/01/12/daily-jokes-bot-release/"&gt;this blog post&lt;/a&gt;, and check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todays-joke-is"&gt;
  &lt;/a&gt;
  Today's Joke is...
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9CeD24-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1258999910d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9CeD24-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1258999910d.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Have a joke idea for a future post? Email &lt;strong&gt;&lt;em&gt;&lt;a href="//mailto:xtrp@xtrp.io"&gt;xtrp@xtrp.io&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; with your suggestions!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>What is Bash?</title>
      <author>Meet Gor</author>
      <pubDate>Sun, 20 Jun 2021 03:43:46 +0000</pubDate>
      <link>https://dev.to/mrdestructive/what-is-bash-4mco</link>
      <guid>https://dev.to/mrdestructive/what-is-bash-4mco</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;BASH or Bourne Again Shell is an interface(program) between the user and the Operating System. BASH is just an application just like others, but not an ordinary one. It is quite powerful when used to its potential. It is used in various aspects of computing. No, it's not only for server admins, but it specializes in that field though. We'll see how we can use Bash to perform several tasks quite powerfully. Not just automation, you'll be surprised what Bash is capable of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bash-the-program-that-powers-the-world"&gt;
  &lt;/a&gt;
  BASH - The program that powers the world.
&lt;/h2&gt;

&lt;p&gt;BASH is just like any other shell such as z-shell, c-shell, Korn shell, and Bourne shell. BASH is a variant or update version of the BOURNE shell. Technically it has quite advanced features than the Bourne shell, such as arithmetic operators, signal handling, command-line completion, and tons of quality of life improvements. So what can Bash do? Well pretty much anything, it is close enough to call itself a programming language but not quite enough. You can call it the programming language of the command line. It can perform arithmetic, logical and programmatical operations inside of a terminal or command line.&lt;br&gt;&lt;br&gt;
Bash also has built in features such as variables, loops, if-else conditional statements, functions, and all but there are no concrete data structures to work with. Some of the quite useful structures are built-in such as arrays and dictionaries. It can make use of some other programs such as grep, awk, sed, cURL, find, wc, the list is quite large. Most of the commands are quite versatile and can be integrated with each other quite well. Certain concepts such as command piping, brace expansion, and others provide a great integration and feasibility to make quite a lot of applications using Bash. Certain commands such as grep, cURL, sed, cat, touch are quite incredible and are used a lot in day-to-day use cases. Let's take a quick look at how actually we can use Bash to perform a basic task.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bznWxva---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s6.gifyu.com/images/recording1b26b94770ee59bf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bznWxva---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s6.gifyu.com/images/recording1b26b94770ee59bf.gif" alt="Demonstrating bash commands"&gt;&lt;/a&gt;&lt;br&gt;
From the above gif, I edited a file without leaving the terminal. That can be lame but powerful in certain conditions. Anyways, that was just an example, but you can see where it can go. It can be extremely powerful for some repetitive tasks in programming or any other tasks. it can be also quite vividly used in the upcoming fields.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applications"&gt;
  &lt;/a&gt;
  Applications
&lt;/h2&gt;

&lt;p&gt;Well, Bash has some epic applications, some of them might surprise you but they are indeed liable to call themselves features of Bash. Let's dive in then.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automation-of-course"&gt;
  &lt;/a&gt;
  Automation "of course!"
&lt;/h3&gt;

&lt;p&gt;This is the most known feature of Bash as it stands upright on top of other tools and programs. Bash is most commonly used by system admins to automate repetitive tasks in managing a system. These tasks may include backing up files, managing file structures, monitoring the performance of a system, and debugging any errors and issues in the system on a regular basis to ensure the smooth functioning of a system. So, it makes quite a lot of sense to automate certain tasks that might waste time and effort to do them over and over again. Hence, Bash is the system admin's best friend and also for programmers to automate certain tasks and compilation of programs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-handling"&gt;
  &lt;/a&gt;
  File handling
&lt;/h3&gt;

&lt;p&gt;This is another aspect where Bash just makes things flawless, just flawless. It's much more easy, straight forward and intuitive to manage or handle files in Linux/ Unix operating systems. The tools and command-line utilities such as grep, awk, sed for matching patterns using regular expressions,  cat, tac, touch to create and make changes to the file. There are a plethora of ways to make files and directories using Bash utility tools. We can also make a bunch of files at once, make the structure of a file system at once just using Bash and its commands. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#programming-environment"&gt;
  &lt;/a&gt;
  Programming environment
&lt;/h3&gt;

&lt;p&gt;This is a concept which many people use but are unaware of. People using Linux for programming are mostly using bash as their environment to make, compile, run files of the program. That is quite a powerful environment to work with as it is quite customizable and efficient as compared to Windows at least. Even macOS used Bash till a certain time but migrated to zsh for silly reasons about security issues on Bash. But still, Bash is the tool that most programmers use while interacting with the web servers or any other programs that deal with some kind of interface to the operating system especially Linux/ Unix. So, it is worth noting that Bash is the default development environment for many programmers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#networking"&gt;
  &lt;/a&gt;
  Networking
&lt;/h3&gt;

&lt;p&gt;Networking is another aspect where Bash also some quite remarkable tools to play around with. Bash has certain powerful tools like Nmap, aircrack-ng, ping, and many other networking tools which makes it quite a good choice for ethical hacking and network security as well. This domain is quite complex in terms of concepts as it makes the core IT domain. Bash also provides ways to manage the network using some well-equipped tools and programs to make it quite user-friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webscraping-wait-what"&gt;
  &lt;/a&gt;
  Web-Scraping "wait what!?"
&lt;/h3&gt;

&lt;p&gt;Yes, This is possible by making use of certain tools such as cURL to extract the content from the web and then using grep, sed, awk, or any other pattern/ regex matching tools to filter out the content. This might be very useful and informative for beginners trying to understand how web scraping actually works. Web-scraping can be learned this way so as to understand "Under the Hood" working of some utility and frameworks for web-scraping. This is some super great stuff for a simple shell to do in a standalone way though it may require a good skill of regexes and how the web works to make full utilization of the powers of Bash.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maybe-more"&gt;
  &lt;/a&gt;
  Maybe More
&lt;/h3&gt;

&lt;p&gt;OK, now I just know about these many applications about Bash but if you know any other please let me know in the comments. Bash is a great tool and I don't why it's not quite famous but still used a lot. Maybe I am wrong here, just an opinion though. So, I hope you might have got some insights to dig deeper into Bash and learn to improve efficiency and skills. &lt;/p&gt;

&lt;p&gt;So, that's it from Bash and its application in a high-level view, there is a huge field and community for Bash, just because of some threats Bash is not going anywhere, still, zsh is getting replaced in most cases, but the concept and tools remain the same. At the end of the day, its the skill rather than the version of any tool that matters Happy Coding and have a blast learning Bash :)&lt;/p&gt;

</description>
      <category>bash</category>
      <category>linux</category>
      <category>programming</category>
    </item>
    <item>
      <title>Your own bit.ly for a grand total of $0</title>
      <author>OkkarMin</author>
      <pubDate>Sun, 20 Jun 2021 03:00:24 +0000</pubDate>
      <link>https://dev.to/okkarmin/your-own-bit-ly-for-a-grand-total-of-0-5hmi</link>
      <guid>https://dev.to/okkarmin/your-own-bit-ly-for-a-grand-total-of-0-5hmi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#sob-story"&gt;
  &lt;/a&gt;
  Sob story
&lt;/h2&gt;

&lt;p&gt;I have always wanted to have my very own url shortner becuase of the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Link will be easy to remember, for ownself and for others&lt;/li&gt;
&lt;li&gt;Just plain cool. Imagine this, &lt;code&gt;https://{your-name}.ml/{whatever-you-want}&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;.ml&lt;/code&gt; becuase it is free! &lt;code&gt;.tk&lt;/code&gt; is also free. If you have some spare cash lying around, you can buy your own&lt;br&gt;
&lt;code&gt;.com&lt;/code&gt; or &lt;code&gt;.whaterver&lt;/code&gt; domain you like&lt;/p&gt;

&lt;p&gt;Okay sob story is done, let's get right down to it and here is &lt;a href="https://github.com/OkkarMin/url-shortner-app"&gt;final repository&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/OkkarMin"&gt;
        OkkarMin
      &lt;/a&gt; / &lt;a href="https://github.com/OkkarMin/url-shortner-app"&gt;
        url-shortner-app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Repository for url-shortner-app post
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;NextJS + ChakraUI&lt;/li&gt;
&lt;li&gt;Firebase Firestore for data storage&lt;/li&gt;
&lt;li&gt;Vercel for hosting&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-process"&gt;
  &lt;/a&gt;
  The Process
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;'Purchase' domain&lt;/li&gt;
&lt;li&gt;Set up Firebase&lt;/li&gt;
&lt;li&gt;Create NextJS app&lt;/li&gt;
&lt;li&gt;Host app on vercel&lt;/li&gt;
&lt;li&gt;Add domain to vercel&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-purchase-domain"&gt;
  &lt;/a&gt;
  1. 'Purchase' domain
&lt;/h2&gt;

&lt;p&gt;We are going to obtain free domain from &lt;a href="https://freenom.com"&gt;freenom&lt;/a&gt;. Head over there, register for an account and&lt;br&gt;
type in your desired domain in the &lt;code&gt;Find a new FREE domain&lt;/code&gt;. Really anything you like but best is to keep it short.&lt;br&gt;
I wanted &lt;code&gt;okkar.ml&lt;/code&gt; but it was taken, so I got myself &lt;code&gt;okkar.tk&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--US9sN44J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tx1tei76d1v08l0j1br.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--US9sN44J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tx1tei76d1v08l0j1br.png" alt="Explaining how to get freenom free domain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose 12 months when asked to select the duration, you can also 'release' the domain free domain back if you happen to&lt;br&gt;
buy yourself a domain. Okay we are done with this step&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-set-up-firebase"&gt;
  &lt;/a&gt;
  2. Set up Firebase
&lt;/h2&gt;

&lt;p&gt;You can use any database you are comfortable with. The shape of the data is simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"slug"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"linkedin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"full_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://linkedin.com/in/okarmin/"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When user, navigate to &lt;code&gt;https://okkar.tk/linkedin&lt;/code&gt; they are going to get redirected to the full url, which is&lt;br&gt;
&lt;code&gt;http://linkedin.com/in/okarmin/&lt;/code&gt;. In general, when user visit &lt;code&gt;https://okkar.tk/[slug]&lt;/code&gt; we are going to look up for&lt;br&gt;
corresponding &lt;code&gt;full_url&lt;/code&gt; and redirect the user to it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to Firebase console&lt;/li&gt;
&lt;li&gt;Add project, any name you like, I will be using &lt;code&gt;url-shortner-app&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Default for rest of the options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now it should take about a minute to create the project. Once ready, click on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Continue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Firestore Database&lt;/code&gt; on the left&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Create database&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Start in test mode&lt;/code&gt;, &lt;a href="https://medium.com/@gaute.meek/firestore-and-security-1d77812715c1"&gt;this article&lt;/a&gt; will do a better job than me to discuss about securing Firestore&lt;/li&gt;
&lt;li&gt;Choose location that is nearest to your country, &lt;code&gt;asia-southeast2&lt;/code&gt; for Singapore. &lt;a href="https://firebase.google.com/docs/firestore/locations"&gt;See all Cloud Firestore locations here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have created Firestore, let's now add a document to it, click on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Start collection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;urls&lt;/code&gt; for Collection ID&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Auto ID&lt;/code&gt; for Document ID&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;slug&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; &lt;code&gt;github&lt;/code&gt; then &lt;code&gt;Add field&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;full_url&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;{your github link}&lt;/code&gt; then &lt;code&gt;Save&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cr7g1BS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x1zhj8ql918dhthoz5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cr7g1BS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x1zhj8ql918dhthoz5y.png" alt="Firebase Cloud Firestore state after adding one url"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add more document if you want to have more urls and remember to use same datashape of &lt;code&gt;{slug, full_url}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We now need to add new web project and get configuration values from Firebase&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on setting icon beside &lt;code&gt;Project Over&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Choose web, &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; logo&lt;/li&gt;
&lt;li&gt;Give it any nickname you like, I will be using &lt;code&gt;url-shortner-app&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Register&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Firebase should now give you the configurations like below
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;measurementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Keep this tab open, we will be using the config in the next step.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-create-nextjs-app"&gt;
  &lt;/a&gt;
  3. Create NextJS app
&lt;/h2&gt;

&lt;p&gt;We will use &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/with-chakra-ui-typescript"&gt;with-chakra-ui-typescript&lt;/a&gt; starter from NextJS.&lt;br&gt;
Also npm install Firebase module to allow us to connect with Firestore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app &lt;span class="nt"&gt;--example&lt;/span&gt; with-chakra-ui-typescript url-shortner-app
&lt;span class="nb"&gt;cd &lt;/span&gt;url-shortner-app
npm &lt;span class="nb"&gt;install &lt;/span&gt;firebase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can delete the &lt;code&gt;src/components&lt;/code&gt; and &lt;code&gt;pages/index.tsx&lt;/code&gt; we will not be using them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-page-for-redirecting-to-raw-fullurl-endraw-"&gt;
  &lt;/a&gt;
  3.1 Page for redirecting to &lt;code&gt;full_url&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Create &lt;code&gt;pages/[slug].tsx&lt;/code&gt; and put the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase/app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firebase/firestore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{ value }&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebaseConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;full_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;querySnapShot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;urls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;querySnapShot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;full_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;full_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Slug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We import the required modules and files&lt;/li&gt;
&lt;li&gt;Notice the &lt;code&gt;return null&lt;/code&gt;, we don't have to return any UI component as we are will be redirecting the users&lt;/li&gt;
&lt;li&gt;On page visit, &lt;code&gt;getServerSideProps&lt;/code&gt; will help us determine whether there is an entry in Firestore that has
&lt;code&gt;{slug, full_url}&lt;/code&gt; pair or not, if there is, redirect user to &lt;code&gt;full_url&lt;/code&gt;, otherwise redirect user to &lt;code&gt;/&lt;/code&gt; where 404 error
page will be shown&lt;/li&gt;
&lt;li&gt;We are only making use of 3 config options for Firebase, &lt;code&gt;apiKey, authDomain, projectID&lt;/code&gt; out of
full configuration options that we obatined from step 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this stage, you can &lt;code&gt;npm run dev&lt;/code&gt; to test your app locally but for us we are sure that it will work :) so we don't test&lt;br&gt;
and let us directly host on vercel and your folder structure should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url-shortner-app/
┣━━📁 src
┃ ┣━━📁 pages
┃ ┃ ┣━━ [slug].tsx
┃ ┃ ┣━━ _app.tsx
┃ ┃ ┗━━ _document.tsx
┃ ┗━━ theme.tsx
┣━━ .gitignore
┣━━ README.md
┣━━ next-env.d.ts
┣━━ package-lock.json
┣━━ package.json
┗━━ tsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-host-app-on-vercel"&gt;
  &lt;/a&gt;
  4. Host app on vercel
&lt;/h3&gt;

&lt;p&gt;Vercel made it extremely easy to host NextJS apps. After all, Vercel is behind NextJS. Before we can host on vercel, create new&lt;br&gt;
repository on github and push your codes to github.&lt;/p&gt;

&lt;p&gt;Now we can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login to Vercel using GitHub&lt;/li&gt;
&lt;li&gt;&lt;code&gt;New Project&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Import&lt;/code&gt; the repository that you just created and pushed&lt;/li&gt;
&lt;li&gt;Use default options and &lt;code&gt;Deploy&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After it has successfully deployed, we need to link the domain we obtained from freenom with Vercel. Click on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Domains&lt;/code&gt;, in &lt;code&gt;https://vercel.com/dashboard&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select the project that was just deployed and &lt;code&gt;Continue&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Type in your domain, &lt;code&gt;okkar.tk&lt;/code&gt; for me and &lt;code&gt;Add&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You should see this and take note of &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt; shown:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1gz4Kpu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnv35g4ndf7k56ug5i66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1gz4Kpu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnv35g4ndf7k56ug5i66.png" alt="Showing the state after you have added domain to Vercel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now need to go back to freenom:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Services&lt;/code&gt; -&amp;gt; &lt;code&gt;My Domains&lt;/code&gt; -&amp;gt; &lt;code&gt;Manage Domain&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Manage Freenom DNS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Put the &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt; you saw from Vercel here&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Save Changes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbE_zWEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56jw2vtjv1zu6z7r8nvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbE_zWEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56jw2vtjv1zu6z7r8nvb.png" alt="Showing how A record look like on Freenom DNS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give it sometime for the DNS configuration to propagate and after some time you should be able to see &lt;code&gt;Valid Configuration&lt;/code&gt;&lt;br&gt;
on Vercel. Vercel magically gave us SSL certificate as well which allows our domain to have &lt;code&gt;https&lt;/code&gt; protocol.&lt;/p&gt;

&lt;p&gt;That's it! We now have a functioning app that allows you to pass your &lt;code&gt;slug&lt;/code&gt; and redirect to &lt;code&gt;full_url&lt;/code&gt;, in my case since&lt;br&gt;
I bought domain, &lt;code&gt;https://okkarm.in/linkedin&lt;/code&gt; will be redirected to &lt;code&gt;http://linkedin.com/in/okarmin/&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end"&gt;
  &lt;/a&gt;
  End
&lt;/h2&gt;

&lt;p&gt;Right now we are adding new urls from Firebase console, you could try to extend what we have by adding an authenticated&lt;br&gt;
page that allows you to add new urls from the app itself &lt;code&gt;https://domain.ml/addNewUrl&lt;/code&gt;. Since we use &lt;code&gt;with-chakra-ui-typescript&lt;/code&gt; starter,&lt;br&gt;
you can now use UI components to quickly build fairly nice looking pages.&lt;/p&gt;

&lt;p&gt;You could also add in Firebase analytics to keep track of how many visitors per shortened url. Tons of ways you can add on top&lt;br&gt;
of this project.&lt;/p&gt;

&lt;p&gt;With that, we end here for today, for more content like this, please hit the subscribe button and ofcourse smash that notificaiton&lt;br&gt;
bell.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>beginners</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Top 5 Django projects that can get you a job.</title>
      <author>Shivam Rohilla</author>
      <pubDate>Sun, 20 Jun 2021 02:04:22 +0000</pubDate>
      <link>https://dev.to/shivamrohilllaa/top-5-django-projects-that-can-get-you-a-job-1mn3</link>
      <guid>https://dev.to/shivamrohilllaa/top-5-django-projects-that-can-get-you-a-job-1mn3</guid>
      <description>&lt;p&gt;Hello Devs, In this Post I'm gonna show you some top Django projects that can get you a job very easily and that Django projects look awesome on your resume.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Post Link:- https://webdevcodes.com/django/top-5-django-projects-that-can-get-you-a-job/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are the top 5 Django projects that can provide you a job very easily:-&lt;/p&gt;

&lt;p&gt;1) Personal Portfolio in Django&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--feXTdA0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d75o2kh8zk5bye6fyjx8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--feXTdA0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d75o2kh8zk5bye6fyjx8.png" alt="screencapture-shivamrohilla-herokuapp-2021-06-20-07_00_24"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a personal portfolio website in Django and post your projects on your personal portfolio and show that portfolio to any company and mention that portfolio on your resume and host that portfolio on free web hosting like Heroku or python anywhere if you want to learn how to host Django app on Heroku so here is a link:- &lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevcodes.com/python/deploy-your-django-application-on-heroku/"&gt;https://webdevcodes.com/python/deploy-your-django-application-on-heroku/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mention all your skills and write something about yourself on that portfolio and the most important thing is please download premium templates so that they look more impressive.&lt;/p&gt;

&lt;p&gt;2) CRUD Based Application in Django (Basic Student Information App)&lt;/p&gt;

&lt;p&gt;and the second one is a Basic student information application based on Django in which you can add, delete or update the data of students with pagination.&lt;/p&gt;

&lt;p&gt;Source Code:- &lt;a href="https://github.com/ShivamRohilllaa/students"&gt;https://github.com/ShivamRohilllaa/students&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wujF36f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqylqf81gzzut3wgxv78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wujF36f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqylqf81gzzut3wgxv78.png" alt="screencapture-studentsinform-herokuapp-2021-06-18-20_26_28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Blog Application in Django&lt;br&gt;
and the third one is blog application, please create a blog application with multiple features like comment system, like and post views, companies like these types of application.&lt;/p&gt;

&lt;p&gt;Example:- &lt;a href="https://webdevcodes.com/"&gt;https://webdevcodes.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJ7XKezY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcn9s0bfk79618s53pzg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJ7XKezY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcn9s0bfk79618s53pzg.png" alt="screencapture-webdevcodes-2021-06-20-07_00_46"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) E-commerce Application in Django&lt;/p&gt;

&lt;p&gt;and the fourth one is the Ecommerce application in Django, so that's the most important application, and most startup companies like these types of applications, if you build an e-commerce application in Django and mention this on your resume so no one can stop you to get a job as Django Developer.&lt;/p&gt;

&lt;p&gt;5) E-learning Application in Django&lt;/p&gt;

&lt;p&gt;and the last one is the E-learning application and that's the advanced application if you build this application and mention it in your resume so you can easily get a job as a Django Developer in any company and that project is a little bit advanced so here is the source code of e-learning project&lt;/p&gt;

&lt;p&gt;Source Code:- &lt;a href="https://github.com/ShivamRohilllaa/E-learning-Django-"&gt;https://github.com/ShivamRohilllaa/E-learning-Django-&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Shivam Rohilla | Python Developer&lt;/p&gt;

&lt;p&gt;Thank You&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Intro to Asynchronous JavaScript</title>
      <author>Megan Lo</author>
      <pubDate>Sun, 20 Jun 2021 00:53:40 +0000</pubDate>
      <link>https://dev.to/mehmehmehlol/intro-to-asynchronous-javascript-g9e</link>
      <guid>https://dev.to/mehmehmehlol/intro-to-asynchronous-javascript-g9e</guid>
      <description>&lt;p&gt;Let's all be honest and address the elephant in the room. As a beginner developer, asynchronous programming is one of the hardest and confusing JavaScript concepts to grasp. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QcRXvLQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/94ef34c03174b05e5613ec1586c349f1/tumblr_pou62wLxEI1wq5h3eo2_500.gifv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QcRXvLQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/94ef34c03174b05e5613ec1586c349f1/tumblr_pou62wLxEI1wq5h3eo2_500.gifv" alt="confusing bruce"&gt;&lt;/a&gt;&lt;br&gt;
A bit out of context, but can't we agree that the async concept can be confusing, like Bruce Banner didn't know there's an Ant-Man and a Spider-Man? 😅&lt;/p&gt;

&lt;p&gt;I struggled to learn &lt;code&gt;Promises&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; in the past few months, and I have seen &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; in my interviews. I decided to write a series of Async JS to break this struggle and hopefully will help anyone who is trying to understand asynchronous programming in JavaScript.&lt;/p&gt;

&lt;p&gt;There are 3 parts in this series:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Intro to Asynchronous JS (this article)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Promises&lt;/code&gt; (Will be published on Jun 20, Sunday)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt;, &lt;code&gt;await&lt;/code&gt; (Will be published on Jun 21, Monday)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Before we start talking about &lt;code&gt;Promises&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;, &lt;code&gt;await&lt;/code&gt;, we need to first understand &lt;strong&gt;why do we care about handling asynchronously?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;(Disclaimer: I understand the importance of learning how async works in both client-side and server-side. But in this article, I will mainly focus on client-side JS rather than server-side. I would like to write more about server-side in the future.)&lt;/p&gt;

&lt;p&gt;First off, we have to understand JavaScript is always synchronous and single-threaded. In other words, when one block of code is being executed, no other block of code will be executed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90qe_hUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntpmrg34mp98ub7hfmbh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90qe_hUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntpmrg34mp98ub7hfmbh.gif" alt="synchronous demonstration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see from above, the console printed the values according to the order.&lt;/p&gt;

&lt;p&gt;JavaScript programs in web browser is typically &lt;strong&gt;event-driven&lt;/strong&gt;. In other words, JavaScript is not going to do anything until the user tap or click on something. That's the client side. As for the JS-based server side, it usually waits for client requests to arrive over internet before doing anything. &lt;/p&gt;

&lt;p&gt;We would use asynchronous JS in cases like fetching or accessing some kind of resource from a third party API. &lt;/p&gt;

&lt;p&gt;Say you have a pretty large image on top of your website from a server, if we follow the JS synchronous style, the web browser has to completely finish loading the image before loading the rest of the content. For user experience, this behavior is not ideal, because you don't know how long the image will take to load. &lt;/p&gt;

&lt;p&gt;If we use the &lt;code&gt;fetch&lt;/code&gt; method to fetch the image from a server for the website, since &lt;code&gt;fetch&lt;/code&gt; is asynchronous, when running the next line, it will throw an error as the response is not yet available (I PROMISE -- pun intended -- this will make more sense later on).&lt;/p&gt;

&lt;p&gt;(You probably notice the images/GIFs in this article took a little bit time to load while the text is available -- a real example of asynchronous programming)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#asynchronous-programming-with-callbacks"&gt;
  &lt;/a&gt;
  Asynchronous Programming with Callbacks
&lt;/h2&gt;

&lt;p&gt;Before we dive into &lt;code&gt;Promise&lt;/code&gt; (will be introduced in the next article), the most fundamental concept we have to understand is &lt;strong&gt;callbacks&lt;/strong&gt; (passing another function in a function and will be invoked when some condition is met or some event is occured). This is also the old-fashioned way of handling asynchronous programming before the introduction of &lt;code&gt;Promise&lt;/code&gt; in ES6. But some of these callbacks are still commonly seen without &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#timers-raw-settimeout-endraw-"&gt;
  &lt;/a&gt;
  Timers (&lt;code&gt;setTimeOut()&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;Using the example above from the Introduction section, a quick refresher of what we want in the following order:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ice cream&lt;/li&gt;
&lt;li&gt;boba tea&lt;/li&gt;
&lt;li&gt;iced coffee&lt;/li&gt;
&lt;li&gt;beach &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What if I want boba tea after I go to beach, let's add &lt;code&gt;setTimeOut()&lt;/code&gt; and get it 2 seconds (1000 milliseconds = 1 second) after I go to beach? Let's see how it looks like: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6uPur2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq9fbfcqmfghd2rlb5yu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6uPur2I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq9fbfcqmfghd2rlb5yu.gif" alt="setTimeOut Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, "boba tea" appears ~2 sec after everything is printed on the console! &lt;/p&gt;

&lt;p&gt;The first argument of &lt;code&gt;setTimeOut()&lt;/code&gt; is a callback function and the second argument is a time interval measured in milliseconds. &lt;/p&gt;

&lt;p&gt;There's another type of timer function called &lt;code&gt;setInterval()&lt;/code&gt;. It is useful if you want a function to run repeatedly, but I will not cover in this article. Feel free to check this out &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval"&gt;here&lt;/a&gt; for more info about &lt;code&gt;setInterval()&lt;/code&gt; on MDN.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h3&gt;

&lt;p&gt;Speaking of events, you probably heard of &lt;code&gt;addEventListener()&lt;/code&gt;. As mentioned in the intro, client-side JavaScript programs are almost universally event-driven. The web browser invokes these callback functions whenever a specified event occurs (as you may be familiar with hovering, clicking a mouse button, pressing a key on the keyboard). These callback functions are known as &lt;strong&gt;event listener&lt;/strong&gt; and &lt;strong&gt;event handler&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;addEventListener()&lt;/code&gt; is the method to perform these callback functions based on specified event in a specified content. The second parameter of &lt;code&gt;addEventListener()&lt;/code&gt; method is an example of async callback. &lt;/p&gt;

&lt;p&gt;Here is the &lt;a href="https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_element_addeventlistener"&gt;example&lt;/a&gt; from W3Schools:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myBtn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// a callback function to be invoked when the user clicks on&lt;/span&gt;
&lt;span class="c1"&gt;// that button&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what happened, when a user clicks on a button that represent the HTML &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element that has an ID &lt;code&gt;myBtn&lt;/code&gt;,  the text "Hello World" will show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nebum1sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7syjqj833rck7f5wdul.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nebum1sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7syjqj833rck7f5wdul.gif" alt="addEventListener() Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The callback function is not immediately executed. Once any specified event occurs (in this case is "clicking"), the callback function will be performed &lt;strong&gt;asynchronously&lt;/strong&gt; somewhere inside the HTML body.&lt;/p&gt;




&lt;p&gt;✨ Pause for this iconic MCU GIF before we get to the final callbacks ✨&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p2K3PMRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/34/4d/8f/344d8f8a98ad8b8db6359849d24d78f7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p2K3PMRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/34/4d/8f/344d8f8a98ad8b8db6359849d24d78f7.gif" alt="MCU: Last Stand"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(I also needed to take a quick tea break here 😬)&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#network-eventsxmlhttprequest"&gt;
  &lt;/a&gt;
  Network Events/XMLHttpRequest
&lt;/h3&gt;

&lt;p&gt;Last but not least, fetching data from a web server is another common source of asynchrony in JS programming (Like the example of fetching a large image I mentioned earlier in the intro section).&lt;/p&gt;

&lt;p&gt;We would use an API object called &lt;code&gt;XMLHttpRequest&lt;/code&gt; to interact with servers. &lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"&gt;MDN&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;XMLHttpRequest (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing. XMLHttpRequest is used heavily in AJAX programming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's how it looks like (from &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing#async_callbacks"&gt;MDN&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayImg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;objectURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pic&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;objectURL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;starbucks.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pics&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;displayImg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quick breakdown: &lt;/p&gt;

&lt;p&gt;We separate two functions: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;loadData&lt;/code&gt; to fetch the data from another server with &lt;code&gt;XMLHttpRequest&lt;/code&gt; and &lt;code&gt;displayImg&lt;/code&gt; to create an image to display the fetched data.
&lt;/li&gt;
&lt;li&gt;We then take the &lt;code&gt;displayImg&lt;/code&gt; as a callback function, as well as the URL and the content type. As the web browser loads the JS program, the &lt;code&gt;XMLHttpRequest&lt;/code&gt; class plus the callback function would handle the server's response asynchronously and make HTTP request. &lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;I know that's a lot to learn, but understanding the fundamental of callbacks helps understanding why &lt;code&gt;Promises&lt;/code&gt; was introduced. In the next article, we will look into using &lt;code&gt;Promises&lt;/code&gt; to simplify asynchronous programming. &lt;/p&gt;

&lt;p&gt;See you in the next article!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;🌟 &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing#asynchronous_javascript"&gt;Asynchronous JavaScript&lt;/a&gt; (MDN)&lt;br&gt;
🌟 &lt;a href="https://eloquentjavascript.net/11_async.html"&gt;Eloquent JavaScript Chapter 11: Asynchronous Programming&lt;/a&gt;&lt;br&gt;
🌟 JavaScript The Definitive Guide by David Flanagan (7th Edition) Chapter 13: Asynchronous JavaScript (Pg. 341 - 344) (&lt;a href="https://www.amazon.com/_/dp/1491952024?tag=oreilly20-20"&gt;Amazon&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding SOLID: Dependency Inversion Principle</title>
      <author>Sowmen Rahman</author>
      <pubDate>Sun, 20 Jun 2021 00:22:34 +0000</pubDate>
      <link>https://dev.to/sowmenappd/understanding-solid-dependency-inversion-principle-1i50</link>
      <guid>https://dev.to/sowmenappd/understanding-solid-dependency-inversion-principle-1i50</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-the-dependency-inversion-principle"&gt;
  &lt;/a&gt;
  What is the dependency inversion principle?
&lt;/h2&gt;

&lt;p&gt;The dependency inversion principle is one of the standard guiding rules of software design and development to ensure component extensibility and loosely-coupled components.&lt;/p&gt;

&lt;p&gt;Simply said, the dependency inversion principle states that we need to rely on abstractions rather than concrete implementations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-system-coupling"&gt;
  &lt;/a&gt;
  What is system coupling?
&lt;/h2&gt;

&lt;p&gt;System coupling is defined as the constraining state of one item to another item inside a system. Coupling occurs on context information. For example, in an air-conditioner, the compressor is said to be coupled to the internal cooling refrigerant and cooling mechanism, since these components together make up the entirety of the cooling system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tightlycoupled-vs-looselycoupled-components"&gt;
  &lt;/a&gt;
  Tightly-coupled vs. loosely-coupled components?
&lt;/h2&gt;

&lt;p&gt;Coupling can be of two types: &lt;strong&gt;tight coupling&lt;/strong&gt; and &lt;strong&gt;loose coupling&lt;/strong&gt;. These refer to how a system would react in presence of a substitute of a certain component/module.&lt;/p&gt;

&lt;p&gt;In our example before, if the cooling mechanism of the air condition was "tightly-coupled" to the compressor, then substitution of the compressor made by other companies are &lt;strong&gt;highly likely to break the cooling mechanism entirely&lt;/strong&gt;. This would be an example of a tightly-coupled component system. Tightly-coupled components have concrete, hard-coded implementations.&lt;/p&gt;

&lt;p&gt;Loose coupling is the &lt;em&gt;exact opposite&lt;/em&gt; of the example above, where replacement of a system with one of a similar function but of different &lt;em&gt;constitution&lt;/em&gt;/&lt;em&gt;implementation&lt;/em&gt;, will ensure that the system works as these.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-look-at-a-code-example-now"&gt;
  &lt;/a&gt;
  Let's look at a code example now
&lt;/h2&gt;

&lt;p&gt;Following with our analogy from before, we define a simple &lt;strong&gt;AirConditioner&lt;/strong&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CompressorV1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Compressor V1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// perform some necessary setup task&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// function code&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AirConditioner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;compressor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Compressor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CompressorV1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;powerOn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compressor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;CompressorV1&lt;/strong&gt; object is a &lt;strong&gt;direct dependency&lt;/strong&gt; in this &lt;strong&gt;AirConditioner&lt;/strong&gt; class. If a new modification was to be made according to our analogy, this would break the &lt;strong&gt;AirConditioner&lt;/strong&gt; class as it doesn't have a way to extend functionality to operate with a new Compressor type. Without implementing the dependency inversion principle, this would be the future snapshot of the code, if a new compressor &lt;strong&gt;CompressorV2&lt;/strong&gt; was introduced to the air conditioner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CompressorV2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Compressor V2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// perform some necessary setup task&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// function code&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AirConditioner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;compressor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Compressor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CompressorV1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;compressor2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CompressorV2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CompressorV2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;activeCompressor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;powerOn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;activeCompressor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compressor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compressor2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The problem suddenly becomes evident&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The code &lt;strong&gt;won't scale well&lt;/strong&gt; upon addition of a multitude of different components that are core dependencies in the &lt;strong&gt;AirConditioner&lt;/strong&gt; class and may need to be replaced in the future. And even if the components don't need replacement, using &lt;strong&gt;if-else&lt;/strong&gt; blocks in this way is not good for production code. It is a known fact that the more the decision branches are encountered during code execution, the slower the execution will be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inversion-of-control-ioc"&gt;
  &lt;/a&gt;
  Inversion of control (IoC)
&lt;/h2&gt;

&lt;p&gt;From the above example, we see that the &lt;strong&gt;AirConditioner&lt;/strong&gt; class is in charge of instantiating and managing the compressor objects. This results in a tedious type of code pattern, where everytime a new &lt;strong&gt;Compressor&lt;/strong&gt; was introduced, someone would have to modify the &lt;strong&gt;AirConditioner&lt;/strong&gt; class to &lt;strong&gt;support&lt;/strong&gt; the new &lt;strong&gt;Compressor&lt;/strong&gt; type.&lt;/p&gt;

&lt;p&gt;However, let's look from a different angle. Instead of letting the &lt;strong&gt;AirConditioner&lt;/strong&gt; class handle the lifecycle of the compressor objects, we define an &lt;em&gt;abstract&lt;/em&gt; compressor interface that handles it for the &lt;strong&gt;AirConditioner&lt;/strong&gt;. We'll name this interface &lt;strong&gt;ICompressor&lt;/strong&gt; (adding an &lt;strong&gt;I&lt;/strong&gt; in front is just a naming convention for interfaces).&lt;/p&gt;

&lt;p&gt;Why an &lt;strong&gt;interface&lt;/strong&gt;, you ask? An interface allows us to &lt;em&gt;define&lt;/em&gt; a particular type of function, &lt;em&gt;without actually implementing it&lt;/em&gt;. Thus, we define an interface of a compressor that has the declaration of "setup" and "turnOn" but not the definition of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ICompressor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each compressor class would now implement this interface. The resulting code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CompressorV1&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ICompressor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CompressorV1 is in system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// perform the very same setup tasks in this interface function&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// same function code&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CompressorV2&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ICompressor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Compressor V2 is in system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// perform the same necessary setup task&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// same function code as before&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moreover, the &lt;strong&gt;AirConditioner&lt;/strong&gt; class looks much cleaner with this elegant interface design:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AirConditioner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;compressor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ICompressor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;powerOn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compressor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we were to run our program now, this is how it'd look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AirConditioner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AirConditioner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CompressorV1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nx"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;powerOn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we did just now is known as &lt;strong&gt;Inversion of Control&lt;/strong&gt;. This process removes the dependency of the &lt;strong&gt;AirConditioner&lt;/strong&gt; on the &lt;strong&gt;Compressor&lt;/strong&gt; classes. So to generalize, we have &lt;strong&gt;inverted&lt;/strong&gt; the &lt;strong&gt;dependency control flow&lt;/strong&gt; where the higher level module (&lt;strong&gt;AirConditioner&lt;/strong&gt; class) was depending on the lower level module (&lt;strong&gt;CompressorV1&lt;/strong&gt; / &lt;strong&gt;CompressorV2&lt;/strong&gt; classes) by introducing an &lt;em&gt;even higher level abstraction&lt;/em&gt; (&lt;strong&gt;ICompressor&lt;/strong&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-more-example"&gt;
  &lt;/a&gt;
  One more example
&lt;/h2&gt;

&lt;p&gt;Now in our above air conditioner case, it is not uncommon that a complex behavior may be introduced. Suppose, a third type of compressor came along and we need to provide support for this type of compressor in our ACs as well. But the setup process for this compressor is a bit different. Unlike the first two types that had completely offline setup processes, this one has a remote connection module that is needed to be configured for the compressor system resource monitoring before the compressor can be turned on.&lt;/p&gt;

&lt;p&gt;The third compressor therefore has a different internal setup behavior as it relies on an asynchronous request to finish before its setup task can be completed.&lt;/p&gt;

&lt;p&gt;Thanks to the implementation that now uses a higher level abstration, this new type of compressor can be very easily integrated in our air conditioners. We simply implement one more &lt;strong&gt;Compressor&lt;/strong&gt; class in the following way, but this time the &lt;strong&gt;turnOn&lt;/strong&gt; function is implemented as an &lt;strong&gt;async&lt;/strong&gt; function. This is a completely valid modification as interfaces only ever care about the signature of the function and never about &lt;em&gt;how the function is implemented&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SmartCompressor&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ICompressor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smart Compressor is in system&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;loadConfiguration&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//function to load connection configuration&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// perform the same necessary setup task&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;turnOn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;configObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadConfiguration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;configObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// function code to turn on compressor&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// catch error if connection fails&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though the process of setting up the compressor is very different this time, dependency inversion ensures this new addition will not need a complete re-iteration of our system (notice how we don't even have to touch our &lt;strong&gt;AirConditioner&lt;/strong&gt; class this time), thus saving us time and the loss of sanity. This system has now been converted to a loosely-coupled system with the help of the dependency inversion principle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In summary, this is what the &lt;strong&gt;Dependency Inversion Principle&lt;/strong&gt; states and intends to implement. It is clearly visible how and why loosely coupled architectures favor this principle to be staged in place and also why it made the list on the &lt;strong&gt;S.O.L.I.D&lt;/strong&gt; software design principles.&lt;/p&gt;

</description>
      <category>solidjs</category>
      <category>architecture</category>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Frontend Hitchhiker's Guide: Build Tools</title>
      <author>Nicholas Mendez</author>
      <pubDate>Sat, 19 Jun 2021 23:56:03 +0000</pubDate>
      <link>https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-build-tools-3bj2</link>
      <guid>https://dev.to/snickdx/the-frontend-hitchhiker-s-guide-build-tools-3bj2</guid>
      <description>&lt;p&gt;Build tools let's you transform your source code for production environments. Additionally, they can be utilized to use pre-processors, modules and perform various other tasks.&lt;/p&gt;

&lt;p&gt;Some of these transformations include:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Transformation&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Transpilation&lt;/td&gt;
&lt;td&gt;Adds backward compatibility for browsers that don't support new JavaScript syntax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Minify/Uglify&lt;/td&gt;
&lt;td&gt;Removes white space and shortens variable names to reduce the source code's file size.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bundling&lt;/td&gt;
&lt;td&gt;Organizes your dependencies and other codes into file bundles to optimize delivery.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dead Code Elimination&lt;/td&gt;
&lt;td&gt;Removes unused code paths from the bundle.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#build-tools"&gt;
  &lt;/a&gt;
  Build Tools
&lt;/h1&gt;

&lt;p&gt;The following are some of the more popular build tools&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#parcel"&gt;Parcel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rollup"&gt;Rollup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webpack"&gt;Webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#es-build"&gt;ES Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#snowpack"&gt;Snowpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#broserify"&gt;Browserify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#parcel"&gt;
  &lt;/a&gt;
  Parcel
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NiMvEaK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9vmmuk2zwq600oplzsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NiMvEaK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9vmmuk2zwq600oplzsy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v2.parceljs.org/"&gt;Parcel&lt;/a&gt; is a neat build tool that can be used with zero configuration. It also supports &lt;a href="https://v2.parceljs.org/getting-started/webapp/"&gt;differential serving&lt;/a&gt; which means it will build different bundles but only send down those optimized for the visitor's browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rollup"&gt;
  &lt;/a&gt;
  Rollup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZhfHlDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrqimrh70rnpn9tb30yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZhfHlDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrqimrh70rnpn9tb30yq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rollupjs.org/guide/en/"&gt;Rollup&lt;/a&gt; describes itself as a module bundler that lets you compiles your &lt;a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/"&gt;ES&lt;/a&gt;/&lt;a href="https://requirejs.org/docs/whyamd.html"&gt;AMD&lt;/a&gt;/&lt;a href="https://requirejs.org/docs/commonjs.html"&gt;common JS&lt;/a&gt; modules used into your project into your bundle. Rollup also has broader support for code splitting over parcel. Code Splitting is breaking up bundles into smaller independent bundles so that they only loaded on the pages that need them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webpack"&gt;
  &lt;/a&gt;
  Webpack
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JX0wQMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg7pz9nw10kipvl5cjm0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JX0wQMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg7pz9nw10kipvl5cjm0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt; is the most robust build tool on this list. Webpack has wide support for transformations such as dead code elimination, removing dead imported code and compressing images and svg. Webpack is also used by the angular CLI. However, webpack can be a bit daunting to pickup due to it's robustness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#es-build"&gt;
  &lt;/a&gt;
  ES Build
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GvRxx8lf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt8vsjdn68jn4gd5q5in.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GvRxx8lf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt8vsjdn68jn4gd5q5in.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://esbuild.github.io/"&gt;ES Build&lt;/a&gt; describes itself as 'An extremely fast JavaScript bundler'. ES Build boats a 10-100x speed boost over other alternatives in terms of build times. ES Build supports ES6 and CommonJS modules.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#snowpack"&gt;
  &lt;/a&gt;
  Snowpack
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ICb7I4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg04arlxbdues7hwv61l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ICb7I4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qg04arlxbdues7hwv61l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.snowpack.dev/"&gt;Snowpack&lt;/a&gt; is a relatively new build tool on the scene and also boasts faster build times over parcel and webpack. Like the other tools snowpack can be used with libraries like React and Vue as an alternative to the default cli tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browserify"&gt;
  &lt;/a&gt;
  Browserify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQ-AfLLj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2urq7c7v3xv6n5kn8yf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQ-AfLLj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2urq7c7v3xv6n5kn8yf4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://browserify.org/"&gt;Browserify&lt;/a&gt; started with the simple mission of allowing you to port your nodejs code to run in the browser. It can be used out of the box to compile a node script into a bundle that can be dropped into a web page. Browserify also supports other build tool features such as transformations and CSS &amp;amp; image imports.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This article is more an overview than a feature comparison. The &lt;a href="https://tooling.report/"&gt;Tooling Report&lt;/a&gt; is your best guide to understand of the features supported by some of the tools mentioned here.&lt;/p&gt;

&lt;p&gt;It is also worth mentioning these tools support 3rd party plugins for adding custom functionality. Build tools are an essential part of the modern development workflow, it helps keeps our sites fast, manageable and optimized.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#need-more"&gt;
  &lt;/a&gt;
  Need More? 👀🔍
&lt;/h1&gt;

&lt;p&gt;We are just at the halfway point in our journey in the frontend web ecosystem. Next week will be our 5th destination but there's so much to discover outside of this series. &lt;/p&gt;

&lt;p&gt;If you are interested in hearing about great dev talks, new products, services and tools consider following me on &lt;a href="https://twitter.com/snickdx"&gt;twitter&lt;/a&gt;. Over there I share whatever comes across my radar that I think is worth checking out.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dottedsquirrel.com/bundling-javascript/"&gt;Bundling Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>hitchhikers</category>
    </item>
    <item>
      <title>3 criptomonedas para ganar dinero mientras duerme - Parte 1
</title>
      <author>PRONET </author>
      <pubDate>Sat, 19 Jun 2021 23:31:26 +0000</pubDate>
      <link>https://dev.to/devtothemoon/3-criptomonedas-para-ganar-dinero-mientras-duerme-parte-1-3md4</link>
      <guid>https://dev.to/devtothemoon/3-criptomonedas-para-ganar-dinero-mientras-duerme-parte-1-3md4</guid>
      <description>&lt;p&gt;Existen numerosas formas de ganar dinero en el espacio de las criptomonedas, incluidas inversiones a largo plazo, transacciones diarias, arbitraje, etc. Un hecho poco conocido (especialmente para los recién llegados) es que ciertas criptomonedas le permiten obtener ingresos pasivos; simplemente dinero que gana sin hacer mucho para ganarlo. En esta publicación, destacaré 3 criptomonedas que te permiten hacer exactamente esto. Antes de continuar, me gustaría citar a Warren Buffett:"Si no encuentra una manera de ganar dinero mientras duerme, trabajará hasta que muera".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WkKv1z2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resizer.iproimg.com/unsafe/880x/filters:format%28webp%29/https://assets.iproup.com/assets/jpg/2019/11/6807.jpg%3F7.0.2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WkKv1z2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://resizer.iproimg.com/unsafe/880x/filters:format%28webp%29/https://assets.iproup.com/assets/jpg/2019/11/6807.jpg%3F7.0.2" alt="Criptomonedas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Realmente creo que el futuro de NEO es muy brillante, como se muestra en mi publicación de blog 3 Coins to Watch en 2018 , que puede encontrar aquí . NEO ha ido viento en popa y se ha mantenido excepcionalmente bien durante esta turbulencia del mercado.&lt;br&gt;
NEO utiliza un mecanismo de consenso llamado Tolerancia a fallas bizantinas delegadas (dBFT).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TvvyZPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://diariocripto.com/wp-content/uploads/2018/03/NEO-criptomoneda.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TvvyZPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://diariocripto.com/wp-content/uploads/2018/03/NEO-criptomoneda.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Es un mecanismo de consenso que permite la participación a gran escala en el consenso a través del voto por poder. El titular del token NEO puede, votando, elegir al contable que apoya. El grupo de contables seleccionado, a través del algoritmo BFT, llega a un consenso y genera nuevos bloques. En dBFT, 2/3 de todos los contables estarán de acuerdo con lo que va en cada bloque.&lt;br&gt;
Puede encontrar más información sobre dBFT, qué hacen los contables, etc. aquí .&lt;br&gt;
En esencia, NEO actúa como una acción y, al poseerlo, eres dueño de una parte de la cadena de bloques. Además, al poseer y mantener NEO , gana GAS pasivamente ; el token utilizado como combustible en la cadena de bloques NEO . Por ejemplo, GAS se usa para implementar contratos inteligentes, votar en la red, etc.&lt;br&gt;
Para ganar GAS , simplemente necesita tener NEO en su billetera y el GAS se acumulará con el tiempo. Hay muy poco esfuerzo por su parte. Mantenerlo en intercambios no le generará GAS , con la excepción de Binance y KuCoin . Para tener una idea de la cantidad de GAS que genera, según la cantidad de NEO que tiene, haga clic aquí .&lt;br&gt;
Puede comprar NEO y GAS en Binance , Gate.io , KuCoin y muchos otros .&lt;/p&gt;

&lt;p&gt;VeChain Thor (VET)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1aepAqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0asiacryptotopf9lu.kinstacdn.com/wp-content/uploads/2018/05/vechain_logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1aepAqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0asiacryptotopf9lu.kinstacdn.com/wp-content/uploads/2018/05/vechain_logo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aunque todavía es un trabajo en progreso, no podía ignorar VeChain Thor ( el pivote y el cambio de marca de VeChain ); un proyecto que ha estado haciendo olas en el espacio últimamente. VeChain Thor se moverá más allá de la cadena de suministro y se dirigirá a las soluciones de aplicaciones descentralizadas empresariales (dApp) . No discutiré cómo funciona VeChain actualmente, pero me enfocaré en VeChain Thor .&lt;br&gt;
VeChain Thor presentará dos nuevos tokens:&lt;br&gt;
VeChain Tokens (VET) actuará como la moneda de pago inteligente para permitir una rápida circulación de valor dentro del ecosistema basado en VeChain Blockchain . VET representa el derecho y el privilegio de ocupar y utilizar los recursos públicos de blockchain. Cuanto más VET tenga uno, más derechos y mayor prioridad tendrá (para usar la cadena de bloques).&lt;br&gt;
THOR Power (THOR) será el combustible en la cadena de bloques y se consumirá / quemará después de que se realicen ciertas operaciones, como transferir VET o ejecutar contratos inteligentes.&lt;br&gt;
El VeChain Blockchain estará asegurado por 4 diferentes tipos de nodos. Hay algunos requisitos mínimos para convertirse en nodo. Los tipos de nodos están determinados por la cantidad de VET que poseen y la fecha de vencimiento . Puedes encontrar más detalles aquí .&lt;br&gt;
Todos los titulares de VET (independientemente de si son un nodo) ganarán THOR de forma pasiva al mantener VET en sus billeteras. Los nodos (que inherentemente contienen más VET), como recompensa por asegurar la red, tendrán un porcentaje más alto de THOR pagado.&lt;br&gt;
Para ver cuánto THOR podría estar ganando pasivamente, según la cantidad de VET que tenga, haga clic aquí .&lt;br&gt;
VeChain (VEN), el predecesor de VET , se puede comprar en Binance , Gate.io , COSS y muchos otros.&lt;/p&gt;

&lt;p&gt;ARK&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GKApEEcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marketingdesdecero.com/wp-content/uploads/2018/01/En-esta-oportunidad-explicaremos-qu%25C3%25A9-es-Ark-ARK-te-ense%25C3%25B1aremos-su-funcionamiento-y-quien-est%25C3%25A1-al-mando-de-este-proyecto-370x297.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKApEEcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://marketingdesdecero.com/wp-content/uploads/2018/01/En-esta-oportunidad-explicaremos-qu%25C3%25A9-es-Ark-ARK-te-ense%25C3%25B1aremos-su-funcionamiento-y-quien-est%25C3%25A1-al-mando-de-este-proyecto-370x297.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ARK utiliza un mecanismo de consenso llamado Prueba de participación delegada (DPoS). Este mecanismo requiere que los poseedores de monedas voten por los delegados , quienes son responsables de validar las transacciones y mantener la cadena de bloques. Es bastante similar a dBFT con la gran diferencia de que en DPoS solo un delegado verifica el bloque, mientras que en dBFT, 2/3 de los contables tienen que llegar a un consenso y generar nuevos bloques. Puede encontrar más detalles sobre DPoS y delegados, aquí .&lt;br&gt;
Al igual que con las dos criptomonedas anteriores, se requiere muy poco esfuerzo para ganar ARK de forma pasiva . Los pasos son bastante simples: configure una cuenta ARK y emita su voto de delegado. Luego, recibirá un pago a través del delegado como recompensa por votar por ellos. Puede encontrar un tutorial detallado sobre cómo votar por un delegado aquí . Para tener una idea de cuánto podría ganar pasivamente votando por los delegados, haga clic aquí .&lt;/p&gt;

&lt;p&gt;Como habrás notado en el título, esta es solo la primera parte. Hay algunas criptomonedas más sobre las que me gustaría escribir. Hablaré de esto en una próxima publicación, que debería llegar en algún momento de las próximas semanas; así que esté atento si está interesado en obtener más información.&lt;/p&gt;

&lt;p&gt;Descargo de responsabilidad: toda la información y los datos en esta publicación de blog son solo para fines informativos. Mis opiniones son mías. No hago declaraciones sobre la precisión, integridad, idoneidad o validez de cualquier información. No seré responsable de ningún error, omisión o pérdida o daño que surja de su visualización o uso. Toda la información se proporciona tal cual, sin garantías y no confiere derechos&lt;/p&gt;

&lt;p&gt;Si esto te ayudo puedes mostrar tu apoyo a este contenido donando a las siguientes direcciones:&lt;/p&gt;

&lt;p&gt;BTC:1GXHbLwEY8LqFqgDZix2ry3hCDpWhtroQ4&lt;br&gt;
USDT:0x33094521973702545979baf306d6a86c28555258&lt;br&gt;
ETH:0x33094521973702545979baf306d6a86c28555258&lt;/p&gt;

</description>
      <category>crypto</category>
      <category>btc</category>
      <category>blockchain</category>
      <category>money</category>
    </item>
  </channel>
</rss>
