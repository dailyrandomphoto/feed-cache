<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>These were my favorite apps of 2021</title>
      <author>Fernando Cutire</author>
      <pubDate>Thu, 06 Jan 2022 21:15:47 +0000</pubDate>
      <link>https://dev.to/fernandocutire/these-were-my-favorite-apps-of-2021-2nof</link>
      <guid>https://dev.to/fernandocutire/these-were-my-favorite-apps-of-2021-2nof</guid>
      <description>&lt;p&gt;This is not some kind of paid promotion. Just that sometimes are curious about what other people use in a daily basis.&lt;/p&gt;

&lt;p&gt;When I ask, I get different responses and is cool to have this variety.&lt;/p&gt;

&lt;p&gt;So I present my favorite apps/software of the last year&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-favorite-apps"&gt;
  &lt;/a&gt;
  My favorite apps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#calm"&gt;
  &lt;/a&gt;
  Calm
&lt;/h3&gt;

&lt;p&gt;A sleep and meditation app, has a ton of meditation exercises and calm music. Really an amazing app , i wish it has a better web app but for now it’s ok.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dashlane"&gt;
  &lt;/a&gt;
  Dashlane
&lt;/h3&gt;

&lt;p&gt;This password manager is really useful. By now it makes all that it needs to do. Also it has VPN, and a dark web email analyzer. It is a really great password manager.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#toggl"&gt;
  &lt;/a&gt;
  Toggl
&lt;/h3&gt;

&lt;p&gt;It is a time tracker useful when working on different projects and clients. For me i use it to know how many time i spent on different topics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rescuetime"&gt;
  &lt;/a&gt;
  Rescuetime
&lt;/h3&gt;

&lt;p&gt;Another time tracker, this really blows my mind. It can track without specifying some task. When i open my PC it begins to track, really useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#os-ubuntu"&gt;
  &lt;/a&gt;
  OS: Ubuntu
&lt;/h3&gt;

&lt;p&gt;This was the year i began to use linux. Ubuntu has make things easier in development, although i had audio related issues, and the os freeze sometimes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connnect"&gt;
  &lt;/a&gt;
  Let's connnect
&lt;/h2&gt;

&lt;p&gt;Remember you can follow me on Twitter &lt;a class="mentioned-user" href="https://dev.to/fernandocutire"&gt;@fernandocutire&lt;/a&gt;, I am getting better at writing in English so we could talk there&lt;/p&gt;

</description>
      <category>software</category>
      <category>apps</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to create a PyPi (Python) package</title>
      <author>Kalob Taulien</author>
      <pubDate>Thu, 06 Jan 2022 21:04:03 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/how-to-create-a-pypi-python-package-3g52</link>
      <guid>https://dev.to/kalobtaulien/how-to-create-a-pypi-python-package-3g52</guid>
      <description>&lt;p&gt;Have you ever wanted to create a Python package so you can type the following?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;my-awesome-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If so, this tutorial is for you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-getting-poetry"&gt;
  &lt;/a&gt;
  1. Getting Poetry
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt; is a system package you can use to &lt;strong&gt;very easily&lt;/strong&gt; manage your Python Packages. &lt;/p&gt;

&lt;p&gt;It makes handling your packages super easy. I have 9 Python packages under my name, and this is by far the best solution. &lt;/p&gt;

&lt;p&gt;First, you need to install Poetry on your system. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#osx-linux-bashonwindows-install-instructions"&gt;
  &lt;/a&gt;
  osx / linux / bashonwindows install instructions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-sSL&lt;/span&gt; https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#windows-powershell-install-instructions"&gt;
  &lt;/a&gt;
  windows powershell install instructions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;Invoke-WebRequest &lt;span class="nt"&gt;-Uri&lt;/span&gt; https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py &lt;span class="nt"&gt;-UseBasicParsing&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.Content | python -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://python-poetry.org/docs/#installation"&gt;More details about installation here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can type &lt;code&gt;poetry --version&lt;/code&gt; to see the version you're running. If this doesn't work for you, try closing and re-opening your terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-creating-a-poetry-project"&gt;
  &lt;/a&gt;
  2. Creating a Poetry project
&lt;/h2&gt;

&lt;p&gt;In this tutorial we're going to create a new package from scratch. &lt;/p&gt;

&lt;p&gt;Go ahead and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry new test-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the docs mention, it'll create a new folder with a bunch of files for you that are structured like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test-package
├── pyproject.toml
├── README.rst
├── test_package
│   └── __init__.py
└── tests
    ├── __init__.py
    └── test_test_package.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-adding-your-code"&gt;
  &lt;/a&gt;
  3. Adding your code
&lt;/h2&gt;

&lt;p&gt;Create a new file in &lt;code&gt;test-package/test_package/&lt;/code&gt; called &lt;code&gt;myfile.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your file structure should look like this now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test-package
├── pyproject.toml
├── README.rst
├── test_package
│   ├── __init__.py
│   └── myfile.py  # &amp;lt;- This is new
└── tests
    ├── __init__.py
    └── test_test_package.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of your code will go in the &lt;code&gt;test_package/&lt;/code&gt; folder. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: This folder name will be different if you used a different package name during step 2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can add any files you want in this folder. This is what get's bundled in your package.&lt;/p&gt;

&lt;p&gt;Now in your &lt;code&gt;myfile.py&lt;/code&gt; file, add this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;custom_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Later we can use this code like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test_package.myfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;custom_function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;👆 We'll get to that later, first we need to build the package. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-building-your-package"&gt;
  &lt;/a&gt;
  4. Building your package
&lt;/h2&gt;

&lt;p&gt;So far we just have a bunch of code sitting on our computer and if someone else wants to use our code, they need to copy all the files and folders. &lt;/p&gt;

&lt;p&gt;Let's "build" the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take all your code, bundle it, and put it in a versioned file inside of a &lt;code&gt;/dist/&lt;/code&gt; folder. The file should look something like this: &lt;code&gt;test-package-0.1.0.tar.gz&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It will also create a wheel file for you that looks something like this: &lt;code&gt;test_package-0.1.0-py3-none-any.whl&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-testing-your-code-in-other-virtual-environments"&gt;
  &lt;/a&gt;
  5. Testing your code in other virtual environments
&lt;/h2&gt;

&lt;p&gt;Now what I like to do is test my package in a brand new virtual environment. &lt;/p&gt;

&lt;p&gt;Create a new virtual env in a new folder somewhere else on your computer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;testenv &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;testenv 
python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv .venv/ 
&lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Your virtual env will be created differently if you're on Windows. You can use virtualenv, pipenv, Docker, etc. It just needs to be a fresh environment. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that you're in a new Python environment, copy that .tar.gz from from earlier into this folder. (I usually use the operating systems OS for this, but there's nothing wrong with using &lt;code&gt;cp&lt;/code&gt; to copy the file). The only file in this virtual environment should be your .tar.gz file. &lt;/p&gt;

&lt;p&gt;Now install this file with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;test-package-0.1.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assuming everything went well, let's test this out. &lt;/p&gt;

&lt;p&gt;Open a new Python shell (REPL) with:&lt;br&gt;
&lt;code&gt;python&lt;/code&gt; (on non-Windows) or &lt;code&gt;py&lt;/code&gt; on Windows. And type this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;test_package.myfile&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;custom_function&lt;/span&gt;

&lt;span class="n"&gt;custom_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kalob"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should print out &lt;code&gt;Hello Kalob!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And just like that, you have create a bundled package. But it's not available for everybody just yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-push-it-to-github"&gt;
  &lt;/a&gt;
  6. Push it to GitHub
&lt;/h2&gt;

&lt;p&gt;At this stage I like to push my code up to GitHub. &lt;/p&gt;

&lt;p&gt;Because we're making a public package, I tend to make my repo's public as well. No use hiding the source code when it will be easily downloaded from PyPi.org anyway. &lt;/p&gt;

&lt;p&gt;Dont forget to add &lt;code&gt;/dist/&lt;/code&gt; and other files to your .gitignore file. The &lt;code&gt;/dist/&lt;/code&gt; folder is where your bundled code goes when it's built by Poetry. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-publish-the-package"&gt;
  &lt;/a&gt;
  7. Publish the package
&lt;/h2&gt;

&lt;p&gt;Now let's publish this code on PyPi.org. &lt;/p&gt;

&lt;p&gt;First, you need a free &lt;a href="https://pypi.org/"&gt;PyPi.org&lt;/a&gt; account.  You'll need your username and password handy because Poetry will ask for it so it can upload your file to PyPi and associate it with your account. &lt;/p&gt;

&lt;p&gt;Once you have a free PyPi account, go ahead and run this in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;poetry publish
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will ask for your username and password. Go ahead and type those in. &lt;/p&gt;

&lt;p&gt;And now your package will be on PyPi.org. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the package of &lt;code&gt;test-package&lt;/code&gt; already exists, or at one point existed, on PyPi.org you &lt;em&gt;cannot&lt;/em&gt; use the same name. Making your Python packages have unique names is the best way to avoid this problem. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you didn't run into a naming problem, you'll have successfully published a package to PyPi.org! &lt;/p&gt;

&lt;p&gt;Congrats!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-install-your-package-using-pip"&gt;
  &lt;/a&gt;
  8. Install your package using pip
&lt;/h2&gt;

&lt;p&gt;Assuming your package is now on PyPi, let's install your package in another project and test it out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;test-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything should work as expected now. And your code is now easily accessible to every Python developer. 🎉 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-repo"&gt;
  &lt;/a&gt;
  Example repo
&lt;/h2&gt;

&lt;p&gt;If you'd like to see a simple package I recently created for &lt;a href="https://arbington.com"&gt;Arbington.com&lt;/a&gt; take a look at &lt;a href="https://github.com/arbington/python-vimeo"&gt;python-vimeo on GitHub&lt;/a&gt; and feel free to use any part of that repo. That's why we open sourced it! :) &lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>4 years of taking online education taught me this (first year) Pt1</title>
      <author>Fernando Cutire</author>
      <pubDate>Thu, 06 Jan 2022 20:51:57 +0000</pubDate>
      <link>https://dev.to/fernandocutire/5-years-of-taking-online-education-taught-me-this-first-year-pt1-eeh</link>
      <guid>https://dev.to/fernandocutire/5-years-of-taking-online-education-taught-me-this-first-year-pt1-eeh</guid>
      <description>&lt;p&gt;Online courses are everywhere, and every day there are more. &lt;br&gt;
This is not going anywhere, and don't expect that it would slow down.&lt;/p&gt;

&lt;p&gt;In a series of articles, I will explain my approach to online education. &lt;/p&gt;

&lt;p&gt;This is written in a personal way, maybe you can relate. It wasn't always perfect, I was really slow and the start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-this-was-the-first-year"&gt;
  &lt;/a&gt;
  So this was the first year.
&lt;/h1&gt;

&lt;p&gt;In my first year, I discover online courses, but I didn’t see it as a way that can help me at the time. &lt;/p&gt;

&lt;p&gt;I would only say to myself, this looks good but I don’t feel pressured to finish it, maybe someday, like when I am looking for a job I will have better reasons&lt;/p&gt;

&lt;p&gt;As you may know, my way of thinking was not very mature, and it wasn’t because I was at school with so many hours and for me, it was not a big deal to finish.&lt;/p&gt;

&lt;p&gt;The topics that interested me at the time were mainly programming and business. I enroll in 3 free udemy courses and paid for 3. I remember that I just completed 2 but because it was 2 hours or less, so no big deal.&lt;/p&gt;

&lt;p&gt;As you may know, some Udemy Courses can get through 30 hours of content, and this makes it hard to finish. At the time I thought that more content meant that the course was better, but obviously, I was mistaken.&lt;/p&gt;

&lt;p&gt;Finally, it is important to say that I just took courses from Spanish speakers instructors so as you may think, the offer was not very high back then.&lt;/p&gt;

&lt;p&gt;This series will continue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connnect"&gt;
  &lt;/a&gt;
  Let's connnect
&lt;/h2&gt;

&lt;p&gt;Remember you can follow me on Twitter  &lt;a href="https://twitter.com/fernandocutire"&gt;@fernandocutire&lt;/a&gt;, I am getting better at writing in English so we could talk there&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>WeAreDevelopers Live - Java Day</title>
      <author>Gerry Schneider</author>
      <pubDate>Thu, 06 Jan 2022 19:31:20 +0000</pubDate>
      <link>https://dev.to/gerryvienna/wearedevelopers-live-java-day-fj7</link>
      <guid>https://dev.to/gerryvienna/wearedevelopers-live-java-day-fj7</guid>
      <description>&lt;p&gt;Ready to level up your Java skills? Then sign up and join for our first WeAreDevelopers Live Event this year - it’s Java Day! &lt;strong&gt;It’s free!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you think about Java you either think about beautiful tropical islands, a good cup of coffee or that’s right: one of the best known and most important programming languages of all time. Basically there’s nothing you can’t do with Java- therefore we have reached out to some real Java Pros to learn what’s on their mind!&lt;/p&gt;

&lt;p&gt;So grab your coffee and tune in on January :&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;Going reactive with Spring WebFlux&lt;/strong&gt;&lt;br&gt;
📣 Michael Eder &amp;amp; Philipp Frauenthaler&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;Get old, go slow, write code!&lt;/strong&gt;&lt;br&gt;
📣 Tobias Modig&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;What´s New for Developers Moving from Java 11 to 17?&lt;/strong&gt;&lt;br&gt;
📣 Daniel Strmečki&lt;/p&gt;

&lt;p&gt;👉🏻 &lt;strong&gt;The Cool Thing about Cool Things in Java 16 &amp;amp; 17 LTS&lt;/strong&gt;&lt;br&gt;
📣 Mohamed Taman&lt;/p&gt;

&lt;p&gt;Save your spot - &lt;strong&gt;it's free&lt;/strong&gt;! &lt;br&gt;
&lt;a href="https://bit.ly/WADJavaDay2021"&gt;https://bit.ly/WADJavaDay2021&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PS: Join our latest &lt;strong&gt;raffle&lt;/strong&gt; provided by Deloitte for your chance to &lt;strong&gt;win a Nintendo Switch&lt;/strong&gt; and some &lt;strong&gt;nice goodies&lt;/strong&gt;. &lt;a href="https://bit.ly/WADWinaNintendoSwitch"&gt;https://bit.ly/WADWinaNintendoSwitch&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>wearedevs</category>
      <category>developerevent</category>
      <category>onlineevent</category>
    </item>
    <item>
      <title>What is in your bag?</title>
      <author>Pavel Polívka</author>
      <pubDate>Thu, 06 Jan 2022 19:25:40 +0000</pubDate>
      <link>https://dev.to/pavel_polivka/what-is-in-your-bag-1ijb</link>
      <guid>https://dev.to/pavel_polivka/what-is-in-your-bag-1ijb</guid>
      <description>&lt;p&gt;As a new year article, I decided to write up some words about what are the daily drivers I have in my bag. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bag"&gt;
  &lt;/a&gt;
  Bag
&lt;/h2&gt;

&lt;p&gt;I use a top-loaded HP bag for 15-inch laptops. My 17 inch Mac Book fits it well and it's pretty nice. But nothing special. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laptops"&gt;
  &lt;/a&gt;
  Laptops
&lt;/h2&gt;

&lt;p&gt;I have multiple laptops. For my work, I mostly use Macbook Pro 17" - 16GB RAM, 2019 model. I also have Macbook Air 13" M1 model I use for my personal projects. I also got a few Windows and Linux machines but those are rarely used.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-electronics"&gt;
  &lt;/a&gt;
  Other electronics
&lt;/h2&gt;

&lt;p&gt;I carry Kindle Whitepaper 4 with me almost everywhere. I love reading.&lt;br&gt;
I also carry Jabra Evolve 75 I use it for work meetings. It's a really great headset. I also have Marshall Mode II true wireless for music and or audiobooks on the go. I love the Marshall sound. &lt;/p&gt;

&lt;p&gt;I also have some USB/USB-C cables and some USB-C dongles. Fully embracing that Mac dongle life. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drug-store"&gt;
  &lt;/a&gt;
  Drug store
&lt;/h2&gt;

&lt;p&gt;I have deodorant in spray, hand sanitizer, mouth deodorant, and glass cleaning gel. Nothing special. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#various"&gt;
  &lt;/a&gt;
  Various
&lt;/h2&gt;

&lt;p&gt;I have my Moleskin notebook, Parker pen, FFP2 respirator, chopsticks, and set of lockpicks. I have lockpicking as one of my hobbies I rarely use those but saved me calling locksmith more than once. &lt;/p&gt;




&lt;p&gt;If you like this article you can follow me on &lt;a href="https://twitter.com/pavel_polivka"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>gear</category>
    </item>
    <item>
      <title>Clearing Rows with CSS Grid</title>
      <author>Benny Powers 🇮🇱🇨🇦</author>
      <pubDate>Thu, 06 Jan 2022 19:14:26 +0000</pubDate>
      <link>https://dev.to/bennypowers/clearing-rows-with-css-grid-49c1</link>
      <guid>https://dev.to/bennypowers/clearing-rows-with-css-grid-49c1</guid>
      <description>&lt;p&gt;Today I completed a fun little challenge using CSS Grid.&lt;/p&gt;

&lt;p&gt;The goal was to update a layout that relied on container elements and flexbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cards"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"cards"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.cards&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.cards&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My first step was to remove the container elements and 'lift up' the flex properties into the grid container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"a-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pfe-card&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"b-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/pfe-card&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:host&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;auto-fill&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;25%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="py"&gt;grid-auto-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This did most of the job on its own, but there was one issue: in the original layout, card &lt;code&gt;b-1&lt;/code&gt; appeared in a new 'row' below the first set of cards. How could I emulate this 'row-clearing' behaviour? Using &lt;code&gt;grid-column&lt;/code&gt;, I specified the position of the first card in the second set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#b-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, that one specific card 'resets' it's whole row, replicating the original behaviour, but with fewer non-semantic elements, and less CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--edJ2YsXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwu3aivsmjqa0g898mbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--edJ2YsXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwu3aivsmjqa0g898mbj.png" alt="Browser Screenshot showing rows of cards. The second row ends with two empty cells, and the third row begins with the desired element" width="880" height="767"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nice&lt;/em&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>React folder structuring</title>
      <author>Rakesh Shravz</author>
      <pubDate>Thu, 06 Jan 2022 19:14:11 +0000</pubDate>
      <link>https://dev.to/rakeshshravz/react-folder-structure-10i2</link>
      <guid>https://dev.to/rakeshshravz/react-folder-structure-10i2</guid>
      <description>&lt;p&gt;Hey all great minds, this post is all about how I used to structure the react applications that I built so far. It's completely opinionated. Please comment with your thoughts.&lt;/p&gt;

&lt;p&gt;Let's assume that we are building a simple application with some common modules and features in it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IDYlRkEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4a07e7oyxeqhm72jxdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IDYlRkEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4a07e7oyxeqhm72jxdl.png" alt="Image description" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I always do the structuring based on the features or routes. This is the most common approach by the react community.&lt;/p&gt;

&lt;p&gt;From the above project view, when we open the "src" folder, all the folders with the feature name need to be aligned on the same vertical line. By looking at these folders inside the "src" folder, we should come to an idea of the nature of the application and what this project is about.&lt;/p&gt;

&lt;p&gt;Every features folder should contain an "index.js" file that has the root component of this feature. The presentational and non-presentational components are placed inside the "Components" folder. The other files are styles.js, actions.js, actionTypes.js, and reducers.js are placed within the folder for all the features&lt;/p&gt;

&lt;p&gt;Every feature folder should have all these files which help in code splitting and project folders looks identical which avoids chaos and helps better debugging.&lt;/p&gt;

&lt;p&gt;The "Common" folder can contain the styles, constants, and utils which we think can be used by other components.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>architecture</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I decided which language I should learn </title>
      <author>𝕁𝕦𝕝𝕚𝕒 👩🏻‍💻</author>
      <pubDate>Thu, 06 Jan 2022 18:43:14 +0000</pubDate>
      <link>https://dev.to/yuridevat/how-i-decided-which-language-i-should-learn-2lk4</link>
      <guid>https://dev.to/yuridevat/how-i-decided-which-language-i-should-learn-2lk4</guid>
      <description>&lt;p&gt;Like many of you, I also thought for a long time about which programming language I should actually learn. Python for machine learning and AI, Java for big apps, Swift for mobile apps, each language/field seemed so interesting and I spent a lot of time trying different things and still had no idea which language to stick with. This cost me a lot of time that I really want to spare you.&lt;/p&gt;

&lt;p&gt;Hello, I am Julia 👩‍💻, a self-taught React developer and I would like to explain to you why I chose frontend and ReactJS in particular as a programming language to learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-to-choose-frontend"&gt;
  &lt;/a&gt;
  Why to choose frontend
&lt;/h2&gt;

&lt;p&gt;Frontend seemed to me to be the easiest to learn at the time. And in my situation, it was definitely much easier than Python or Java. I needed to see things right away, and fiddling around with CSS and creating something beautiful made me happy.&lt;/p&gt;

&lt;p&gt;That doesn't mean I'll stay with frontend forever, I'm interested in other languages too, but I wanted to get a job as soon as possible and calculated my odds, so I started learning HTML, CSS, and then JS/React.&lt;/p&gt;

&lt;p&gt;When I googled for tutorials, React was everywhere. React seemed to be THE language to learn at that moment, and when I learned about a mentorship program called &lt;a href="https://the-collab-lab.codes/"&gt;&lt;strong&gt;The Collab Lab&lt;/strong&gt;&lt;/a&gt; where you can apply if you know React to work on a smart app in an agile team, that was the final decision and motivation to dedicate myself fully to React.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I want to get into this program, so I'm going to learn React, no matter the cost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After learning frontend for three months, I applied for the program and was accepted 💪. I have to admit that at that point I didn't have the knowledge that the others had. I had to put in a lot more hours than the others and learn React all day to keep up.&lt;/p&gt;

&lt;p&gt;But it was definitely worth it. The experience was amazing because even though I didn't have all the programming skills of my peers, I was able to impress the mentors with other skills like motivation, communication, and a little bit of leadership, and they asked me to become an assistant mentor for future cohorts, which I gladly accepted.&lt;/p&gt;

&lt;p&gt;It was a great experience. Last but not least, this experience was also the most interesting one on my CV that was talked about in every interview I had and ultimately helped me get my first tech job ☝️.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is the language in demand?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Because I'm talking about my first job: I hadn't thought about whether React was even used here in Austria. There were very few jobs that required React at the time of job searching, but I was lucky. React is just coming, so I am one of the few who already know React, while others have worked with Angular for years and now have to relearn.&lt;/p&gt;

&lt;p&gt;That's why it's important to look for jobs in advance, for example on LinkedIn, and find out if the programming language you want to learn is even in demand in the place where you live and want to work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#possibilites-with-frontend"&gt;
  &lt;/a&gt;
  Possibilites with frontend
&lt;/h2&gt;

&lt;p&gt;There are so many paths after that, if you don't like frontend, and you have enough time after the successful job search to focus on the things you really enjoy. The good thing is that JavaScript has many logical parts that Java and Python also have. That means it's important to master logical thinking, and that's what you need to improve on, how to solve problems. So then learning a new language won't be as hard as it was in the beginning. &lt;/p&gt;

&lt;p&gt;What I'm saying is that even if frontend seems a bit boring to you now, like, "I don't want to build websites", there are so many other areas you can focus on after you have a deep knowledge. You could become a frontend developer with a strong focus on &lt;em&gt;UX/UI design&lt;/em&gt;, a focus on &lt;em&gt;animation&lt;/em&gt;, if you like teaching you can apply for jobs at a coding school to become a &lt;em&gt;mentor&lt;/em&gt;, &lt;em&gt;freelancer&lt;/em&gt; or &lt;em&gt;content creator&lt;/em&gt;, or you can learn Python in your spare time and switch your career to Machine Learning or AI. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages worth mentioning&lt;/strong&gt;&lt;br&gt;
After getting my first job, I can assure you that I feel so relieved because I made it, I feel secure because I'm making money now. The way I study now in my free time is much more effective because I don't have any ulterior motives anymore: "Am I really going to make it? Is there any point in learning this language at all?"&lt;/p&gt;

&lt;p&gt;While getting better at frontend at work, you will also get better in other areas, like internal tools, personal growth, and soft skills. And maybe the company provides other areas too and a switch within the company would be possible 🙂.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My recommendation&lt;/strong&gt;&lt;br&gt;
Learning React development, after mastering the basics, you can and should also specialize in something to stand out from the crowd when applying for jobs, like UX design, UI design, a11y, some BackEnd, animation, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;When learning frontend / JavaScript, you can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;develop websites using frameworks and libraries like &lt;a href="https://beta.reactjs.org/"&gt;ReactJS&lt;/a&gt;, &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;, etc&lt;/li&gt;
&lt;li&gt;develop mobile apps using &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop desktop apps using &lt;a href="https://www.electronjs.org/"&gt;ElectronJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop (game) animations using &lt;a href="https://threejs.org/"&gt;ThreeJS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;develop ML models using &lt;a href="https://www.tensorflow.org/js"&gt;TensorflowJS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find a good start into programming and can get started now. Have fun ✨.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" alt="Thank you" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for your reading and time. I really appreciate it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Git Workflows - Solo Vs Team Work, Undoing Mistakes, Contributing to Open Source... and more</title>
      <author>Danny Adams</author>
      <pubDate>Thu, 06 Jan 2022 18:40:18 +0000</pubDate>
      <link>https://dev.to/doabledanny/git-workflows-solo-vs-team-work-undoing-mistakes-contributing-to-open-source-and-more-2bda</link>
      <guid>https://dev.to/doabledanny/git-workflows-solo-vs-team-work-undoing-mistakes-contributing-to-open-source-and-more-2bda</guid>
      <description>&lt;p&gt;In this article, I give my workflows for almost everything that you will ever need to do with Git:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Git commands&lt;/li&gt;
&lt;li&gt;Setting up a remote repository and pushing to Github&lt;/li&gt;
&lt;li&gt;Undoing things in Git&lt;/li&gt;
&lt;li&gt;Ignoring things in Git&lt;/li&gt;
&lt;li&gt;Git branches for new features&lt;/li&gt;
&lt;li&gt;Working solo vs in a team&lt;/li&gt;
&lt;li&gt;Forking and contributing to open source&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#basic-git-commands"&gt;
  &lt;/a&gt;
  Basic Git Commands
&lt;/h2&gt;

&lt;p&gt;These are the commands you will use in every single project.&lt;/p&gt;

&lt;p&gt;1) Initialise Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git init &amp;lt;project-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Add files to the staging area&lt;/p&gt;

&lt;p&gt;To add all files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add all files in a specific folder:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add src/posts/Git_Commands_Post&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add one file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add styles.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add all files with a specific extension (in this case, all html files):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add *.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Check the staging area is correct before committing to Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4) Committing the changes to Git&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "A short message describing the changes here"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5) Push to remote repository (see below for how to set up remote repository)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-remote-repository-and-pushing-to-github"&gt;
  &lt;/a&gt;
  Setting up a remote repository and pushing to Github
&lt;/h2&gt;

&lt;p&gt;First we need to set up the repository on Github:&lt;/p&gt;

&lt;p&gt;1) Go to github.com&lt;br&gt;
2) Sign in or create an account&lt;br&gt;
3) Select "New" to create a new repository&lt;br&gt;
4) Type in your repository information. I always leave the "Add a README file", "Add a .gitignore" and "Choose a license" checkbox unchecked.&lt;br&gt;
5) Click "Create repository"&lt;/p&gt;

&lt;p&gt;Now we need to connect up our local repository to the just-created Github repository:&lt;/p&gt;

&lt;p&gt;6) Add the remote repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git remote add origin https://github.com/YourUsername/Your-remote-repo-name.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7)  Ensure we are in the main branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -M main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;8) Push your committed local code to Github&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push -u origin main&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#changing-your-username-and-email-in-git"&gt;
  &lt;/a&gt;
  Changing your username and email in Git
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "Danny Adams"
git config --global user.email "my-email@gmail.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#undoing-things-in-git"&gt;
  &lt;/a&gt;
  Undoing things in Git
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#remove-a-file-from-staging"&gt;
  &lt;/a&gt;
  Remove a file from staging
&lt;/h3&gt;

&lt;p&gt;The below command removes the file only from the Git repository. The local, working directory copy of the file will remain intact - this is ensured by adding the &lt;code&gt;--cached&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To remove all files in a folder, add the recursive flag:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm --cached &amp;lt;filename&amp;gt; -r&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#going-back-to-a-previous-commit-to-read-only"&gt;
  &lt;/a&gt;
  Going back to a previous commit to READ ONLY
&lt;/h3&gt;

&lt;p&gt;To see how things looked at a particular commit, without re-writing history or deleting things, we can simply:&lt;/p&gt;

&lt;p&gt;1) Log the commit history and copy the ID of the commit we want to go back to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Go back in time to the commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout &amp;lt;commit_ID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Once done, go back to where we were&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reverting-a-commit"&gt;
  &lt;/a&gt;
  Reverting a commit
&lt;/h3&gt;

&lt;p&gt;Revert commit creates a new commit, where the changes made in a specific commit are undone.&lt;/p&gt;

&lt;p&gt;Let's say we wanted to undo what we did in commit 2 of the below branch:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dMw7fuX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjnl5u78yrxwun4ssql3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dMw7fuX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjnl5u78yrxwun4ssql3.jpg" alt="Git Revert commit branch before" width="427" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Revert, a new commit would be made, where the changes made in C2 are undone - but C2 is still kept in history so we could still go back and keep the changes if we decide we want them again:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWV_WDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewxmeujepd9sptf3uxqb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dAWV_WDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewxmeujepd9sptf3uxqb.jpg" alt="Git Revert commit after" width="579" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go through an example. Below, I have 3 commits in my project - with the latest at the top:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e3P7gz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j61o10ca2fr4coono0vz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e3P7gz9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j61o10ca2fr4coono0vz.JPG" alt="Git log of commits" width="382" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's say I wanted to undo the changes I made with the "Created styles.css" commit only. I can simply revert this commit:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git revert a432c9f&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Git will then open up a file in your text editor (if your using VS code) and ask you to create a message for the new commit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNtGMboC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229hxf1zu11gplyx20sz.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNtGMboC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/229hxf1zu11gplyx20sz.JPG" alt="Git revert command line" width="467" height="63"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqTskTr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yltyld3fcaibwb1cezb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqTskTr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yltyld3fcaibwb1cezb.JPG" alt="Git revert message" width="723" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, the commit message reads 'Revert "Created styles.css"', but this can be changed to whatever you want. I usually just leave it as is.&lt;/p&gt;

&lt;p&gt;Once you're happy with the message, simply close the file and Git will add the new commit where the "Create styles.css" changes are undone.&lt;/p&gt;

&lt;p&gt;But here's the beauty of using revert to undo things: the commit history is all still there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adWwdoHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfc6li2ep14d0186oqs.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adWwdoHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfc6li2ep14d0186oqs.JPG" alt="Commit history after reverting" width="457" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the "Created styles.css" commit is still there. Revert has simply made a new commit where the changes made in "Created styles.css" are reverted (undone). This is MUCH safer than using Reset - the next section - which deletes commits.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#reset-commit"&gt;
  &lt;/a&gt;
  Reset commit
&lt;/h3&gt;

&lt;p&gt;Reset commit goes back in time to a previous commit and permanently deletes all commits that happened ahead of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mas5OZti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlo3p6yn5espyxkxso7t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mas5OZti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlo3p6yn5espyxkxso7t.jpg" alt="Git Reset branch diagram" width="566" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) Get the Id of the commit you want to go back to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log --oneline&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Reset&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit_ID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: all the code changes will still remain in the workspace files - but they'll be uncommitted. To remove from Git AND your workspace, use:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset &amp;lt;commit_ID&amp;gt; --hard&lt;/code&gt; (Very dangerous - be very careful!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tell-git-to-ignore-certain-files"&gt;
  &lt;/a&gt;
  Tell Git to ignore certain files
&lt;/h2&gt;

&lt;p&gt;Some files in your project will contain private information, such as passwords and keys. It's very important that this information isn't pushed to Github. Also, folders like the node_modules folder can take up lots of disc space, and there is no need for them to be pushed to Github as they can be reinstalled any time via the project's package.json file.&lt;/p&gt;

&lt;p&gt;1) Create a &lt;code&gt;.gitignore&lt;/code&gt; file in the root of your project&lt;br&gt;
2) Add the names of the folders and files you want to ignore:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
secret-password.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to add these files to .gitignore as soon as they are made. But if you have accidentally committed them to git, you can untrack them with the following commands:&lt;/p&gt;

&lt;p&gt;1) Remove everything from the repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rm -r --cached .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Re add everything&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now everything apart from the files in your .gitignore will be added to the staging area.&lt;/p&gt;

&lt;p&gt;3) Commit&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m ".gitignore fix"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The local repository is now clean. Push the changes to Github to see the changes effective there too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-branches"&gt;
  &lt;/a&gt;
  Git branches
&lt;/h2&gt;

&lt;p&gt;A common Git paradigm is to always keep the main branch deployable. This means that whenever you're working on a new feature, you should create a new branch and make your commits to that. Then once the feature is complete, you can merge it back into main.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wciQqXfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhd4ch9mtfwo9xa8s6x3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wciQqXfZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhd4ch9mtfwo9xa8s6x3.jpg" alt="Git merge branch diagram" width="640" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-working-solo"&gt;
  &lt;/a&gt;
  When working solo
&lt;/h3&gt;

&lt;p&gt;If you're the only one contributing to a repo, then you can safely merge a feature into main without creating a pull request.&lt;/p&gt;

&lt;p&gt;1) Create new branch and go into it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Make your changes in this branch. Add and commit your changes as many times as necessary.&lt;/p&gt;

&lt;p&gt;3) Checkout to main and merge the feature branch into main&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge &amp;lt;branch-name&amp;gt; --no-ff&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The no-fastforward flag creates a new merge commit and maintains history of the feature branches. Without this flag, the head will simply fastforward to the end of the feature without a new merge commit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-working-in-a-team"&gt;
  &lt;/a&gt;
  When working in a team
&lt;/h3&gt;

&lt;p&gt;Let's say someone has added you to a Github repository, so that you can now contribute as part of the team.&lt;/p&gt;

&lt;p&gt;To contribute, you will need to make a pull request. A pull request is for communicating and reviewing code, before merging it to main. Merging directly, and merging with a pull request are identical - the only difference is that a pull request creates a dedicated forum on Github for discussion - this allows team members to review your code before merging it.&lt;/p&gt;

&lt;p&gt;1) Clone the Github repository&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git clone &amp;lt;repo-url&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2) Ensure our code is up to date&lt;/p&gt;

&lt;p&gt;Before making any changes, you should always make sure your local copy is up to date with the remote repo - as other devs may have contributed. Pull the latest code from remote repo.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git pull origin main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3) Create and checkout to new branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4) Make desired changes&lt;/p&gt;

&lt;p&gt;5) Add and commit changes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "some message"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;6) Push the code in this branch to a branch in Github&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git push origin &amp;lt;name-of-branch-for-Github&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7) Create a pull request&lt;/p&gt;

&lt;p&gt;Go to the Github repo main branch and click "compare and pull request".&lt;/p&gt;

&lt;p&gt;8) Leave a comment to explain exactly what you've done, then "create pull request".&lt;/p&gt;

&lt;p&gt;Other team members will get an email for the request to pull your code into main. They can see changes, see commits, leave comments, and (if happy) merge the code into main.&lt;/p&gt;

&lt;p&gt;Feature branch can be deleted once merged.&lt;/p&gt;

&lt;p&gt;** But what if people make changes to main while your still working on the feature branch? **&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git checkout main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout &amp;lt;feature-branch-name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Merge the latest main branch into your feature branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git merge main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can now incorporate the latest changes by other devs into your feature.&lt;/p&gt;

&lt;p&gt;Note: you may need to iron out merge conflicts. This is normal and part of working with Git.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#forking-and-contributing-to-open-source-projects"&gt;
  &lt;/a&gt;
  Forking and contributing to open source projects
&lt;/h3&gt;

&lt;p&gt;If you don't have write access to a repo, but still want to contribute to it, you can Fork the project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find an open source public repo&lt;/li&gt;
&lt;li&gt;Fork the repo (create a copy to your own Github account)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;url-of-your-fork&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make changes (could also create a new branch for the changes then push to a new branch)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add .&lt;/code&gt; &lt;code&gt;git commit -m "message"&lt;/code&gt; &lt;code&gt;git push origin main&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to your forked copy on Github and click "New pull request"&lt;/li&gt;
&lt;li&gt;"Create pull request" - this pulls your code into the parent repo to be reviewed for merging. YOU CAN'T MERGE THIS - only the repo owners are allowed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;Hopefully that was helpful.&lt;/p&gt;

&lt;p&gt;For more from me, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/DoableDanny"&gt;Follow me on twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;Subscribe to my YouTube channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👋&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to make Image responsive using Aspect ratio? No media queries are needed</title>
      <author>Anjan Shomooder</author>
      <pubDate>Thu, 06 Jan 2022 18:39:23 +0000</pubDate>
      <link>https://dev.to/thatanjan/how-to-make-image-responsive-using-aspect-ratio-no-media-queries-are-needed-2oj2</link>
      <guid>https://dev.to/thatanjan/how-to-make-image-responsive-using-aspect-ratio-no-media-queries-are-needed-2oj2</guid>
      <description>&lt;p&gt;In this blog, you will learn how to make an image responsive without any media queries. We will use the Aspect ratio to make our image responsive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video tutorial
&lt;/h2&gt;

&lt;p&gt;I have already made a video about it on my youtube channel. Check that out.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YYxfwDWuPmc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-preview"&gt;
  &lt;/a&gt;
  Live Preview
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thatanjan/embed/mdBLjgK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The basic idea here is to set the image width in a way that will change when the browser screen size will changes. And when the width will change, the height will also change based on the width.&lt;/p&gt;

&lt;p&gt;Now there are two types of aspect ratios you can use.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Original ratio of Image&lt;/li&gt;
&lt;li&gt;  Custom aspect ratio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will show you both. I will also show you how to use the aspect ratio with the nextjs image component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#original-aspect-ratio"&gt;
  &lt;/a&gt;
  Original aspect ratio
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ts.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DYoVlZ0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iys960m9ohvi0p91g96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DYoVlZ0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iys960m9ohvi0p91g96.png" alt="Image description" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The container will take 80% width and will be in the center horizontally.&lt;/li&gt;
&lt;li&gt;  The image is taking the full width of the container.&lt;/li&gt;
&lt;li&gt;  The image will take as much height it needs. It will change when the width will change.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#custom-aspect-ratio"&gt;
  &lt;/a&gt;
  Custom Aspect ratio
&lt;/h2&gt;

&lt;p&gt;Now there are two ways you can use a custom aspect ratio in CSS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  aspect-ratio property&lt;/li&gt;
&lt;li&gt;  padding-top property&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-paddingtop-property"&gt;
  &lt;/a&gt;
  Using padding-top property
&lt;/h2&gt;

&lt;p&gt;The process is very simple but a little bit tricky. You just need to create extra containers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;56.25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nc"&gt;.image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./ts.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ViMWJN6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si3hazkd9eqc1e4nregc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ViMWJN6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si3hazkd9eqc1e4nregc.png" alt="Image description" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The container will now take full width and position relative.&lt;/li&gt;
&lt;li&gt;  The image will take full space of its container. But it will be positioned absolute and aligned with its container. If you don't know about CSS positions, you can check out this video.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tO2KjMlor4o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We need to give height to the container using &lt;code&gt;padding-top&lt;/code&gt;. The value will depend on the aspect ratio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get the aspect ratio, do the simple math. Do this on the calculator. Just divide the height by width. Then multiply by 100 to get the percentage value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1920 X 1080 resolution

1080 / 1920 = 0.5625 --&amp;gt; The ratio

0.5625 * 100 = 56.25%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;56.25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes the image might get too small on small screens. Then you can use a media query and make the image square.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVo2g_fx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw4uk5qeeriswzhqwskj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVo2g_fx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw4uk5qeeriswzhqwskj.png" alt="Image description" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;padding-top&lt;/code&gt; will be 100% because in a square height and width is the same. If you divide them you will get 1. And you know the rest.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#use-aspect-ratio-with-nextjs-image-component"&gt;
  &lt;/a&gt;
  Use Aspect ratio with Nextjs Image Component.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Responsive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt;
                &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/ts.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;responsive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="nx"&gt;objectFit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Responsive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ViMWJN6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si3hazkd9eqc1e4nregc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ViMWJN6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si3hazkd9eqc1e4nregc.png" alt="Image description" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The idea here is the same. Make layout responsive.&lt;/li&gt;
&lt;li&gt;  Give height and width based on the ratio.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have made two landing page clone videos with vanilla HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  SpaceX&lt;/li&gt;
&lt;li&gt;  Tesla&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HkOcmKGm0zU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DwvJnDQgIIU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You will learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Javascript intersection observer to add cool effects&lt;/li&gt;
&lt;li&gt;  DOM manipulation&lt;/li&gt;
&lt;li&gt;  Aligning elements with CSS positions.&lt;/li&gt;
&lt;li&gt;  How to make responsive websites.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will be great projects to brush up on your front end skills.&lt;/p&gt;

&lt;p&gt;If you are interested you can check the videos.&lt;/p&gt;

&lt;p&gt;You can also demo the application form&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://thatanjan.github.io/spaceX-landing-page-clone-yt/"&gt;SpaceX&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://thatanjan.github.io/tesla-clone-yt/"&gt;Tesla&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;That's it for this blog. I have tried to explain things simply. If you get stuck, you can ask me questions.&lt;/p&gt;

&lt;p&gt;By the way, I am looking for a new opportunity in a company where I can provide great value with my skills. If you are a recruiter, looking for someone skilled in full stack web development and passionate about revolutionizing the world, feel free to contact me. Also, I am open to talking about any freelance project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites. See more of my work from &lt;a href="https://www.thatanjan.me/projects"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3wyVLL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/confession/master/screenshots/homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3wyVLL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/confession/master/screenshots/homepage.png" alt="Homepage" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thatanjan/confession/blob/master/screenshots.md"&gt;More screenshots&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt;Eslint, prettier setup with TypeScript and react &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.culescoding.space/blog/beginners-guide-to-quantum-computers"&gt;Beginners guide to quantum computers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/s6J2Q2vOhf0"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0an2g0lq7LU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kVjOEYKUXxE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>How to create jars that run like any other executable binary (./app.jar)</title>
      <author>Lucy Linder</author>
      <pubDate>Thu, 06 Jan 2022 18:37:58 +0000</pubDate>
      <link>https://dev.to/derlin/how-to-create-jars-that-run-like-any-other-executable-binary-appjar-ic3</link>
      <guid>https://dev.to/derlin/how-to-create-jars-that-run-like-any-other-executable-binary-appjar-ic3</guid>
      <description>&lt;p&gt;Fat jars are a good way to package java applications, whether they are command-line programs or GUIs. However, a jar differs from other executables: instead of the regular &lt;code&gt;./app.jar&lt;/code&gt;, it must be invoked using &lt;code&gt;java -jar app.jar&lt;/code&gt;. This is ok, but not ideal.&lt;/p&gt;

&lt;p&gt;It is not a given though: &lt;a href="https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/deployment-install.html"&gt;Spring Boot&lt;/a&gt; is able to generate &lt;em&gt;&lt;strong&gt;executable jars&lt;/strong&gt;&lt;/em&gt;, that is jars that can be executed using the direct syntax &lt;code&gt;./app.jar&lt;/code&gt; like any other executable binary. How do they pull this off ? And, more importantly, how can we apply the same logic to any jar ? Let's find out !&lt;/p&gt;

&lt;p&gt;
  why not a native executable 😐  ?
  &lt;br&gt;
An even better way is to create a real &lt;em&gt;native executable&lt;/em&gt; using &lt;a href="https://www.graalvm.org"&gt;GraalVM&lt;/a&gt;, which directly embeds a tiny Virtual Machine, so it can run even on machines that do not have a JRE installed. However, this process is tedious and has limitations... It won't work for any codebase ! If you assume all your users will have a JRE, this solution is way easier.&lt;br&gt;


&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-magic-behind-executable-jars"&gt;
  &lt;/a&gt;
  The magic behind executable jars
&lt;/h2&gt;

&lt;p&gt;The actual magic involved is pretty straight-forward, and based on a little known fact about the Zip format. From &lt;a href="https://en.wikipedia.org/wiki/ZIP_(file_format)#Combination_with_other_file_formats"&gt;the .ZIP format wiki page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The .ZIP file format allows for a comment containing up to 65,535 (216−1) bytes of data to occur at the end of the file after the central directory&lt;/em&gt; [...]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This allows arbitrary data to occur in the file both before and after the ZIP archive data, and for the archive to still be read by a ZIP application. A side-effect of this is that it is possible to author a file that is both a working ZIP archive and another format, provided that the other format tolerates arbitrary data at its end, beginning, or middle.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since JAR is a variant of ZIP, it works for them as well. It means it is possible to append a bash script, acting like a launcher, at the beginning of a jar file without corrupting it.&lt;/p&gt;

&lt;p&gt;This is exactly what Spring Boot does. Take any executable Spring Boot jar (for example &lt;a href="https://github.com/big-building-data/bbdata-api/releases/tag/nightly"&gt;bbdata-api-*.jar&lt;/a&gt;), and run &lt;code&gt;head&lt;/code&gt; on it. You should see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;head&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 10 /tmp/bbdata-api-2.0.0-alpha.jar
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#    .   ____          _            __ _ _&lt;/span&gt;
&lt;span class="c"&gt;#   /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \&lt;/span&gt;
&lt;span class="c"&gt;#  ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \&lt;/span&gt;
&lt;span class="c"&gt;#   \\/  ___)| |_)| | | | | || (_| |  ) ) ) )&lt;/span&gt;
&lt;span class="c"&gt;#    '  |____| .__|_| |_|_| |_\__, | / / / /&lt;/span&gt;
&lt;span class="c"&gt;#   =========|_|==============|___/=/_/_/_/&lt;/span&gt;
&lt;span class="c"&gt;#   :: Spring Boot Startup Script ::&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#turning-a-jar-into-an-executable-with-one-bash-command-"&gt;
  &lt;/a&gt;
  Turning a jar into an executable (with one bash command !)
&lt;/h2&gt;

&lt;p&gt;With this trick in mind, turning any jar into a executable jar is as easy as running those two commands (see &lt;a href="https://gist.github.com/joewalnes/e200c21288edaa970453ec47b6711254"&gt;this gist&lt;/a&gt; for a variant):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Append a basic launcher script to the jar&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'#!/bin/sh'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
  &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'exec java -jar $0 "$@"'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
  &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'exit 0'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
  original.jar &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; executable.jar

&lt;span class="c"&gt;# Make the new jar executable&lt;/span&gt;
&lt;span class="nb"&gt;chmod&lt;/span&gt; +x executable.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it &lt;strong&gt;works on all unix like systems&lt;/strong&gt; including Linux, MacOS, Cygwin, and Windows Linux subsystem !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-executable-jars-using-gradle"&gt;
  &lt;/a&gt;
  Making executable jars using Gradle
&lt;/h2&gt;

&lt;p&gt;Now that the process is understood, writing a Gradle Task for it is easy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-gradle-task"&gt;
  &lt;/a&gt;
  Custom Gradle Task
&lt;/h3&gt;

&lt;p&gt;First, we need to define a new custom task in &lt;code&gt;build.gradle.kts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExecutableJarTask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DefaultTask&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This custom task will prepend the content of a&lt;/span&gt;
    &lt;span class="c1"&gt;// bash launch script at the beginning of a jar,&lt;/span&gt;
    &lt;span class="c1"&gt;// and make it executable (chmod +x)&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InputFiles&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;originalJars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ConfigurableFileTree&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
      &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fileTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${project.buildDir}/libs"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"*.jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;OutputDirectory&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buildDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// where to write the modified jar(s)&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gradle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InputFile&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;launchScript&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rootDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"launch.sh"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// script to prepend&lt;/span&gt;

    &lt;span class="nd"&gt;@TaskAction&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;createExecutableJars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;originalJars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;run&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;outputStream&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;launchScript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;readBytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                    &lt;span class="k"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;readBytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nf"&gt;setExecutable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"created executable: $path"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This task extends gradle's &lt;code&gt;DefaultTask&lt;/code&gt; (Kotlin DSL), and takes three arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the list of "normal" jars that need to be made executable (&lt;code&gt;build/libs/*.jar&lt;/code&gt; by default),&lt;/li&gt;
&lt;li&gt;the directory where to output the transformed jars (&lt;code&gt;bin&lt;/code&gt; by default), &lt;/li&gt;
&lt;li&gt;the bash launch script to prepend, which needs to exist ! (&lt;code&gt;&amp;lt;project_root&amp;gt;/launch.sh&lt;/code&gt; by default).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, the job is straight-forward: for each jar found in &lt;code&gt;inputJars&lt;/code&gt;, execute the equivalent of the &lt;code&gt;cat&lt;/code&gt; and &lt;code&gt;chmod&lt;/code&gt; commands outlined earlier, but in Kotlin.&lt;/p&gt;

&lt;p&gt;Note that the jars will keep the same name, so ensure the &lt;code&gt;outputDirectory&lt;/code&gt; doesn't match the input directory (or the jar will be corrupted). If you don't like this, adapt the script accordingly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invoking-the-custom-task"&gt;
  &lt;/a&gt;
  Invoking the custom task
&lt;/h3&gt;

&lt;p&gt;We now need to register this new task, so it can be invoked from the command-line. We also want it to run &lt;em&gt;after&lt;/em&gt; the task creating the jars. If you use the built-in &lt;code&gt;jar&lt;/code&gt; task for the latter, this will do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ExecutableJarTask&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"exec-jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "jar" task should have ran prior to it &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, you can now use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./gradlew exec-jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to customise the task, for example change the path to the launch script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ExecutableJarTask&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"exec-jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;dependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// customise directly here&lt;/span&gt;
    &lt;span class="n"&gt;launchScript&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rootDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bin/launcher.sh"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-launch-script"&gt;
  &lt;/a&gt;
  An example launch script
&lt;/h2&gt;

&lt;p&gt;Based on Spring Boot's script, I personally use the following launch script, that should run fine on all supported platforms:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DEBUG&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-x&lt;/span&gt;

&lt;span class="c"&gt;# Find Java (cf: spring-boot launcher)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-x&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;&lt;span class="s2"&gt;/bin/java"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;javaexe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;&lt;span class="s2"&gt;/bin/java"&lt;/span&gt;
&lt;span class="k"&gt;elif &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; java &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;javaexe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; java&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-x&lt;/span&gt; &lt;span class="s2"&gt;"/usr/bin/java"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;javaexe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/usr/bin/java"&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Unable to find Java"&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# run jar&lt;/span&gt;
&lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nv"&gt;$javaexe&lt;/span&gt; &lt;span class="nt"&gt;-jar&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the &lt;code&gt;exit 0&lt;/code&gt; at the end: this is very important if your jar has a finite runtime (vs a Spring Boot server application). Indeed, without it, your jar will run and exit, then bash will try to execute whatever is found after the &lt;code&gt;exec&lt;/code&gt; line (that is, the zipped content of the jar) and will exit with an error.&lt;/p&gt;




&lt;p&gt;Written with ♡ by &lt;a href="https://github.com/derlin"&gt;derlin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>gradle</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Do you really know TypeScript? (4): Type assertions</title>
      <author>Alex Menor</author>
      <pubDate>Thu, 06 Jan 2022 18:25:55 +0000</pubDate>
      <link>https://dev.to/alexmenor/do-you-really-know-typescript-4-type-assertions-2644</link>
      <guid>https://dev.to/alexmenor/do-you-really-know-typescript-4-type-assertions-2644</guid>
      <description>&lt;p&gt;In this post (the last of the series 😢) we are going to understand type assertions and compare them against type declarations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-use-type-assertions-for"&gt;
  &lt;/a&gt;
  What do you use type assertions for?
&lt;/h2&gt;

&lt;p&gt;There are situations where you know more than TypeScript can infer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FileItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We know for sure that item&lt;/span&gt;
&lt;span class="c1"&gt;// is also a file&lt;/span&gt;
&lt;span class="nx"&gt;printFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#golden-rule-for-using-assertions"&gt;
  &lt;/a&gt;
  Golden rule for using assertions
&lt;/h2&gt;

&lt;p&gt;You can only assert from one type to another if either type is a subset of the other. 🧐&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Airplane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;numOfEngines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Conversion of type 'Car' to type 'Airplane' may be a mistake&lt;/span&gt;
&lt;span class="c1"&gt;// because neither type sufficiently overlaps with the other. &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;airplane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Airplane&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An exception to this rule is when using &lt;code&gt;unknown&lt;/code&gt; or &lt;code&gt;any&lt;/code&gt;.&lt;br&gt;
You can use these to bypass it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;unknown&lt;/code&gt; because is the universal set&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;any&lt;/code&gt; because disables the type checking
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;airplane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Airplane&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#prefer-type-declarations-to-type-assertions"&gt;
  &lt;/a&gt;
  Prefer type declarations to type assertions
&lt;/h2&gt;

&lt;p&gt;This is a mistake that I've seen a lot!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="na"&gt;numOfAirbags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Error: Property 'numOfAirbags' is missing&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// No error&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;numOfDoors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you use type assertions you are telling TypeScript to get out of the way, with type declarations you are making your intentions clear so it can help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-raw-as-const-endraw-a-type-assertion"&gt;
  &lt;/a&gt;
  Is &lt;code&gt;as const&lt;/code&gt; a type assertion?
&lt;/h2&gt;

&lt;p&gt;It is not. &lt;br&gt;
Despite having a similar syntax, &lt;code&gt;as const&lt;/code&gt; is used to hint the type system about values being immutable.&lt;/p&gt;

&lt;p&gt;It is very situational, but could be useful for using the values of an array as literals, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coolBands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oasis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AC/DC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Foo Fighters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;

&lt;span class="c1"&gt;// type CoolBands = "Oasis" | "AC/DC" | "Foo Fighters"&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CoolBands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;coolBands&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or for using the values of an object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coolBandsAndSingers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oasis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Liam Gallagher&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AC/DC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Brian Johnson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Foo Fighters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dave Grohl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;

&lt;span class="c1"&gt;// type CoolBands = "Oasis" | "AC/DC" | "Foo Fighters"&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CoolBands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;coolBandsAndSingers&lt;/span&gt;

&lt;span class="c1"&gt;// type CoolSingers = "Liam Gallagher" | "Brian Johnson" | "Dave Grohl"&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CoolSingers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;coolBandsAndSingers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;CoolBands&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it is the last post of this series, I also want to go through some topics that couldn't get a post for their own. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-type-everything"&gt;
  &lt;/a&gt;
  Don't type everything!
&lt;/h2&gt;

&lt;p&gt;I did it, and probably so did you. &lt;/p&gt;

&lt;p&gt;It is not bad, but can make the code too verbose and therefore harder to read.&lt;/p&gt;

&lt;p&gt;As a rule of thumb, you should type very well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Function and method signatures&lt;/strong&gt; (parameters and return types)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Variables and constants when using object literals&lt;/strong&gt;, to take advantage of excess property checking.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a TDD like spirit, you should know your input and output types before implementing a function/method, so typing it from the beginning makes it easier for you to implement it.&lt;/p&gt;

&lt;p&gt;Typing return types usually avoids implementation errors, specially if your function has many "paths".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-use-uppercase-variants-of-primitive-types"&gt;
  &lt;/a&gt;
  Don’t use uppercase variants of primitive types
&lt;/h2&gt;

&lt;p&gt;Probably you noticed that &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;Number&lt;/code&gt; exist and wonder if you should use them as types.&lt;/p&gt;

&lt;p&gt;The answer is no. Just stick to lowercase types for primitives &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;These uppercase variants exist primarily for convenience, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// charAt is not a property of&lt;/span&gt;
&lt;span class="c1"&gt;// the string primitive&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript wraps the &lt;code&gt;string&lt;/code&gt; primitive in &lt;code&gt;String&lt;/code&gt; under the hood and uses the &lt;code&gt;charAt&lt;/code&gt; method of &lt;code&gt;String&lt;/code&gt; and then throws that object away.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// These wrappers don't have behave &lt;/span&gt;
&lt;span class="c1"&gt;// as primitives&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's been a pleasure to write this series and I wish you a very productive experience with TypeScript 🙂&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-go-deeper"&gt;
  &lt;/a&gt;
  Resources to go deeper
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/en/book/show/48570456-effective-typescript"&gt;Effective TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/"&gt;TypeScript docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
