<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Php Operator</title>
      <author>Irfan Khan</author>
      <pubDate>Wed, 22 Dec 2021 03:32:55 +0000</pubDate>
      <link>https://dev.to/irfankhan177/php-operator-4ke9</link>
      <guid>https://dev.to/irfankhan177/php-operator-4ke9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Arithmetic Operators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Arithmetic operators work with numeric values to perform common arithmetical operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Addition&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//14&lt;/span&gt;
&lt;span class="c1"&gt;//Substraction&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//2&lt;/span&gt;
&lt;span class="c1"&gt;//Multiplication&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//48&lt;/span&gt;

&lt;span class="c1"&gt;//Division&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$num2&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//1.33333333&lt;/span&gt;


&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Modulus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The modulus operator, represented by the % sign, returns the remainder of the division of the first operand by the second operand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="c1"&gt;//2&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Increment &amp;amp; Decrement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The increment operators are used to increment a variable's value.&lt;br&gt;
The decrement operators are used to decrement a variable's value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// equivalent to $x = $x+1;&lt;/span&gt;

&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// equivalent to $x = $x-1;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Increment and decrement operators either precede or follow a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// post-increment &lt;/span&gt;

&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// post-decrement &lt;/span&gt;
&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// pre-increment &lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// pre-decrement&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference is that the post-increment returns the original value before it changes the variable, while the pre-increment changes the variable first and then returns the value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$a&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// $a=3,  $b=2&lt;/span&gt;

&lt;span class="nv"&gt;$a&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// $a=3,  $b=3&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Bash Scripting Concepts: Part 2 of 2</title>
      <author>SerDigital64</author>
      <pubDate>Wed, 22 Dec 2021 03:07:56 +0000</pubDate>
      <link>https://dev.to/serdigital64/bash-scripting-concepts-part-2-of-2-3j0f</link>
      <guid>https://dev.to/serdigital64/bash-scripting-concepts-part-2-of-2-3j0f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;This is the second part of the tutorial. If not done already, please read the first part: &lt;a href="https://dev.to/serdigital64/bash-scripting-concepts-part-1-of-2-28fk"&gt;Bash Scripting Concepts: Part 1 of 2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-loops"&gt;
  &lt;/a&gt;
  Working with loops
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; provides three ways of creating loops:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;for&lt;/code&gt;: loop for a predefined number of times&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;while&lt;/code&gt;: loop while the exit condition is true. The condition is evaluated before executing tasks.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;until&lt;/code&gt;: loop until the exit condition is true. The condition is evaluated after executing tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to the loop condition, Bash provides two statements that can be used to control the loop execution flow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;break&lt;/code&gt;: forces the loop to stop.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;continue&lt;/code&gt;: forces the loop to skip remaining tasks and start the next iteration.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#command-raw-while-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;while&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In the following example, the loop iterates 5 times. The loop condition is evaluated after all commands in the code block are executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;count &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; max&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'counter: %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;count &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#command-raw-until-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;until&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Using the same structure as in the &lt;code&gt;while&lt;/code&gt; example, notice that now the loop iterates 4 times only. This is because the loop condition is evaluated before executing the code block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5

&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;count &lt;span class="o"&gt;==&lt;/span&gt; max&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'counter: %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;count &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#command-raw-for-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;for&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In the case of the &lt;code&gt;for&lt;/code&gt; loop the iteration is predefined. Instead of having a loop condition, the loop variable &lt;code&gt;count&lt;/code&gt; will be assigned each value in the list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; count

&lt;span class="k"&gt;for &lt;/span&gt;count &lt;span class="k"&gt;in &lt;/span&gt;1 2 3 4 5 &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'counter: %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-conditionals"&gt;
  &lt;/a&gt;
  Working with conditionals
&lt;/h2&gt;

&lt;p&gt;Bash provides the following options for implementing conditional execution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;||&lt;/code&gt;: (logical OR) evaluates the execution of two commands and sets the exit status to zero if any associated exit status is zero.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;: (logical AND) evaluates the execution of two commands and sets the exit status to zero if all associated exit statuses are zero.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\!&lt;/code&gt;: (logical NOT) evaluates the execution of a command and sets the exit status to zero if the associated exit status is not zero.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(( ))&lt;/code&gt;: performs logical evaluation on the integer expression and sets the exit status to zero if true&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[[ ]]&lt;/code&gt;: evaluates the literal expression and sets the exit status to zero if true.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if&lt;/code&gt;: executes a command and if the exit status is zero then performs additional actions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;case&lt;/code&gt;: compares the provided value against a list of patterns and executes the commands upon match.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned before, &lt;strong&gt;Bash&lt;/strong&gt; interprets the exit status of commands as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;: true&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;0&lt;/code&gt;: false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the following examples &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are external commands that emulates true and false values (exist status 0 and 1 respectively)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logical-or-raw-endraw-"&gt;
  &lt;/a&gt;
  Logical OR: &lt;code&gt;||&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (true || false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (true || true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (false || false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (false || true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logical-and-raw-ampamp-endraw-"&gt;
  &lt;/a&gt;
  Logical AND: &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (true &amp;amp;&amp;amp; false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (true &amp;amp;&amp;amp; true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (false &amp;amp;&amp;amp; false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (false &amp;amp;&amp;amp; true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logical-not-raw-endraw-"&gt;
  &lt;/a&gt;
  Logical NOT: &lt;code&gt;!&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (! true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (! false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arithmetic-expression-evaluation-raw-endraw-"&gt;
  &lt;/a&gt;
  Arithmetic Expression Evaluation: &lt;code&gt;(( ))&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;(( ))&lt;/code&gt; form accepts several logical operators. Some of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;==&lt;/code&gt;: equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!=&lt;/code&gt;: not equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt;: greater than&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;&lt;/code&gt;: less than&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;=&lt;/code&gt;: greater than or equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;=&lt;/code&gt;: less than or equal
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;
&lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 5000 &lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (( %s &amp;gt; 5000 )): %s\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#expression-evaluation-raw-endraw-"&gt;
  &lt;/a&gt;
  Expression Evaluation: &lt;code&gt;[[ ]]&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;[[ ]]&lt;/code&gt; form accepts several logical operators and tests. Some of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;==&lt;/code&gt;: equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!=&lt;/code&gt;: not equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-z&lt;/code&gt;: string is empty&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-n&lt;/code&gt;: string is not empty&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-f&lt;/code&gt;: path is a file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; the special character &lt;code&gt;*&lt;/code&gt; can be used as a wildcard to match zero or more characters to the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 1&lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of [[ "%s" == 1* ]]: %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#command-raw-if-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;if&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In the following example, arithmetic evaluation is used. Notice that quotes are not required within &lt;code&gt;(( ))&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RANDOM&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; 10000 &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'test value (%s) is equal or greater than 10000\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 5000 &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &amp;lt; 10000 &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'test value (%s) is between 5001 and 9999\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'test value (%s) is less than than 5001\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#command-raw-case-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;case&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RANDOM&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;in
  &lt;/span&gt;1&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;2&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Random number (%s) starts with 1 or 2\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
  3&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Random number (%s) starts with 3\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
  &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Random number (%s) does not start with 1,2 or 3\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#redirecting-data-flows"&gt;
  &lt;/a&gt;
  Redirecting data flows
&lt;/h2&gt;

&lt;p&gt;Bash provides two alternatives for establishing data flows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redirection

&lt;ul&gt;
&lt;li&gt;Set read source for &lt;strong&gt;STDIN&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Set write destination for &lt;strong&gt;STDOUT&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Set write destination for &lt;strong&gt;STDERR&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Pipelines: integrate two commands by plugging the &lt;strong&gt;STDOUT&lt;/strong&gt; from the first one to the &lt;strong&gt;STDIN&lt;/strong&gt; of the second one&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#redirection"&gt;
  &lt;/a&gt;
  Redirection
&lt;/h3&gt;

&lt;p&gt;In the following example, two functions will communicate with each other using a common file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;readonly &lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;mktemp&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;produce_data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'produce_data(): write data to the temporary file (%s) by redirectin the STDOUT of the printf command\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'[sample data]\n'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;ingest_data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'ingest_data(): read data from the temporary file (%s) by redirecting the STDIN of the cat command: '&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;cat&lt;/span&gt; &amp;lt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

produce_data
ingest_data

&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pipelines"&gt;
  &lt;/a&gt;
  Pipelines
&lt;/h3&gt;

&lt;p&gt;This example shows an alternative way of integrating both functions using pipelines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;produce_data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'[sample data]\n'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;ingest_data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;cat&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Integrate functions produce_data() and ingest_data() by piping their STDIN and STDOUT: '&lt;/span&gt;
produce_data | ingest_data

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Discover advanced features by exploring the &lt;a href="https://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents"&gt;Bash Reference Manual&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jobs&lt;/li&gt;
&lt;li&gt;signals&lt;/li&gt;
&lt;li&gt;traps&lt;/li&gt;
&lt;li&gt;parallelism&lt;/li&gt;
&lt;li&gt;error handling&lt;/li&gt;
&lt;li&gt;configuration settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Organize your code by choosing a coding style. For example: &lt;a href="https://google.github.io/styleguide/shellguide.html"&gt;Google Shell Style Guide&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhance script's quality by incorporating linter and testing tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.shellcheck.net/"&gt;Shell Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bats-core/bats-core"&gt;Basts-Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#copyright-information"&gt;
  &lt;/a&gt;
  Copyright information
&lt;/h2&gt;

&lt;p&gt;This article is licensed under a &lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;. For copyright information on the product or products mentioned inhere refer to their respective owner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Opinions presented in this article are personal and belong solely to me, and do not represent people or organizations associated with me in a professional or personal way. All the information on this site is provided "as is" with no guarantee of completeness, accuracy or the results obtained from the use of this information.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Bash Scripting Concepts: Part 1 of 2</title>
      <author>SerDigital64</author>
      <pubDate>Wed, 22 Dec 2021 03:06:52 +0000</pubDate>
      <link>https://dev.to/serdigital64/bash-scripting-concepts-part-1-of-2-28fk</link>
      <guid>https://dev.to/serdigital64/bash-scripting-concepts-part-1-of-2-28fk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; is a tool that provides a text-based user interface for managing operating system resources. It's also the run-time environment for a simple interpreted programming language that can be used to create &lt;strong&gt;scripts&lt;/strong&gt; for automating tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; is the evolution of the popular &lt;strong&gt;Born Shell (sh)&lt;/strong&gt;, a de facto standard among Unix-like operating systems. It provides all the features of its predecessor plus a new set of built-ins and configuration settings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-bash"&gt;
  &lt;/a&gt;
  Using Bash
&lt;/h2&gt;

&lt;p&gt;There are three common use cases for &lt;strong&gt;Bash&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;User shell&lt;/strong&gt;: configured at the operating system level, provides the shell for user login, either local or remote.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Script run-time&lt;/strong&gt;: provides the execution run-time for &lt;strong&gt;Bash&lt;/strong&gt; scripts&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Temporal shell&lt;/strong&gt;: provides an interactive shell session on top of the user shell. The new session is a sub-process of the actual user or a different user when using privilege delegation tools such as SuDO.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial will focus on the &lt;strong&gt;scripts run-time&lt;/strong&gt; use case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#script-structure"&gt;
  &lt;/a&gt;
  Script structure
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; scripts are text files describing a sequence of commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commands can be either built-in or external Linux apps.&lt;/li&gt;
&lt;li&gt;Commands are separated from each other by the new-line character (standard line separator for Linux/Unix systems).&lt;/li&gt;
&lt;li&gt;Long lines can be split using the scape character &lt;code&gt;\&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Commands can be grouped on the same line using the semicolon separator &lt;code&gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Commands and arguments are separated using one or more spaces.&lt;/li&gt;
&lt;li&gt;Although not required, it's recommended that the first line of the script contains: &lt;code&gt;#!/bin/bash&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Script files must have execution and read permissions if used directly, or just read-only permissions if called using &lt;strong&gt;Bash&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'echo and printf are built-in commands'&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'pwd is an external Linux command that shows the current directory: '&lt;/span&gt;
&lt;span class="nb"&gt;pwd

printf&lt;/span&gt; &lt;span class="s1"&gt;'multiple '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'commands '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'on the same line\n'&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'%s %s %s\n'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s1"&gt;'single command'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s1"&gt;'using multiple'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s1"&gt;'lines'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-variables"&gt;
  &lt;/a&gt;
  Using Variables
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#declaration"&gt;
  &lt;/a&gt;
  Declaration
&lt;/h3&gt;

&lt;p&gt;Variables in Bash are created using a declaration command and the equal &lt;code&gt;=&lt;/code&gt; symbol to associate the variable name to its value. Notice that there should be no spaces before and after the assignment symbol:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;declare variable_name='variable value'&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bash provides the following built-in commands for declaring variables:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th&gt;Scope&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;export&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declare global variables&lt;/td&gt;
&lt;td&gt;Script-wide and sub-processes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;readonly&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declare readonly variables (constants)&lt;/td&gt;
&lt;td&gt;Script-wide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;declare&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declare script level variables&lt;/td&gt;
&lt;td&gt;Script-wide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declare function level variables&lt;/td&gt;
&lt;td&gt;Function-wide&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Consider the following best practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Declare variables at the beginning of the code block.&lt;/li&gt;
&lt;li&gt;Declare and initialize all the variables that the script will use.&lt;/li&gt;
&lt;li&gt;Readonly and exported variables should be named using all uppercase.&lt;/li&gt;
&lt;li&gt;Use single quotes for static content.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#retreive-variables-value"&gt;
  &lt;/a&gt;
  Retreive variable's value
&lt;/h3&gt;

&lt;p&gt;To use the value of a variable, prepend the dollar symbol &lt;code&gt;$&lt;/code&gt; to the name of the variable surrounded by brackets &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a best-practice, surround variable expansion with double quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;echo "${test_variable}"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; also provides processing functions that can be used for altering the value before the expansion.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;var1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'word1'&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;var2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'WORD2'&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;var3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'AbCdE/12345'&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'replace value with its length: "${#var1}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;var1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'right strip from pattern: "${var3##*/}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;##*/&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'left strip from pattern: "${var3%%/*}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;%%/*&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'convert to uppercase: "${var1^^}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;^^&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'convert to lowercase: "${var2,,}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h3&gt;

&lt;p&gt;Bash supports four data types:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Declaration command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;declare&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;declare -i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;declare -a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;associative array&lt;/td&gt;
&lt;td&gt;declare -A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Even though there is no explicit boolean data type, &lt;strong&gt;Bash&lt;/strong&gt; interprets the exit status of commands as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exit status == 0: true&lt;/li&gt;
&lt;li&gt;exit status &amp;gt; 0: false&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;Parameters are special variables that are automatically created when a function or script is called with arguments.&lt;/p&gt;

&lt;p&gt;The variable name is created by using a single number to represent the position of the word in the argument list:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;bash say_hello.bash 'to' 'my' 'little' 'friend'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;msg1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# Variable $1: assigned to the first variable&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;msg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# Variable $2: assigned to the second variable&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;msg3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$3&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# Variable $3: assigned to the third variable&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;msg4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$4&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# Variable $4: assigned to the forth variable&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'say hello %s %s %s %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;msg1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;msg2&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;msg3&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;msg4&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shell-expansion"&gt;
  &lt;/a&gt;
  Shell Expansion
&lt;/h3&gt;

&lt;p&gt;In addition to variables &lt;strong&gt;Bash&lt;/strong&gt; provides additional features for generating dynamic values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$( )&lt;/code&gt;: Command Expansion: Execute the command in a sub-process and expand its STDOUT.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$(( ))&lt;/code&gt;: Arithmetic Expansion: Evaluate the arithmetic expression and use the resulting value for the expansion.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$(&amp;lt; )&lt;/code&gt;: File Expansion: Read the content of a file and use it for the expansion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Command Expansion: "$(echo hello-world)" = "%s"\n\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'hello-world'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Arithmetic Expansion:  "$(( 2 + 2 ))" = %s\n\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'File Expansion: "$(&amp;lt;/etc/os-release)"\n %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&amp;lt;/etc/os-release&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-processes"&gt;
  &lt;/a&gt;
  Working with processes
&lt;/h2&gt;

&lt;p&gt;Before going into the details, let's review the following key concepts about Unix processes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A process is a running app that is executed from an already running process (parent). For scripts, the parent process is the one running the &lt;strong&gt;Bash&lt;/strong&gt; run-time.&lt;/li&gt;
&lt;li&gt;The Operating System assigns unique integer identifiers to each process (&lt;strong&gt;PID&lt;/strong&gt;: Process ID).&lt;/li&gt;
&lt;li&gt;Processes have 3 data paths:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;STDIN&lt;/strong&gt;: standard input: process can read data from this path.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;STDOUT&lt;/strong&gt;: standard output: process can write data to this path.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;STDERR&lt;/strong&gt;:: standard error: process can write error diagnostic data to this path.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Exit status: numeric value that represents the final execution status of the process. In general:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;: successful execution&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;0&lt;/code&gt;: failed execution. The app can assign different numbers to further describe the error.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; provides the following features for interacting with processes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables: show process information

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$?&lt;/code&gt;: exit status of the last executed command&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$BASHPID&lt;/code&gt;: PID of the current &lt;strong&gt;Bash&lt;/strong&gt; process&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Redirection: redirect the data flow from the STDIN, STDOUT, and STDERR&lt;/li&gt;
&lt;li&gt;Pipelines: integrate two processes by creating a pipe between the STDOUT from one to the STDIN of the other&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional features are available but no covered in the current tutorial (jobs, signals, traps, parallelism, etc.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-functions"&gt;
  &lt;/a&gt;
  Implementing Functions
&lt;/h2&gt;

&lt;p&gt;To declare a function in Bash use the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &amp;lt;FUNCTION_NAME&amp;gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &amp;lt;COMMANDS&amp;gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &amp;lt;EXIT_STATUS&amp;gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions in Bash behave in a similar way to scripts and commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can be called directly from the script or command line&lt;/li&gt;
&lt;li&gt;Use positional parameters that are automatically assigned to &lt;code&gt;$N&lt;/code&gt; variables&lt;/li&gt;
&lt;li&gt;Have exit status&lt;/li&gt;
&lt;li&gt;Can send data to STDOUT and STDERR&lt;/li&gt;
&lt;li&gt;Can receive data from STDIN&lt;/li&gt;
&lt;li&gt;Can be used in complex command sequences (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's create a function with all the concepts seen so far:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;readonly &lt;/span&gt;&lt;span class="nv"&gt;TEST_READONLY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'content of this variable is constant and can not be modified afterwords'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TEST_EXPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'content of this variable is visible everywhere'&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;test_declare&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'this variable is declared at the script level'&lt;/span&gt;
&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;function_result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="k"&gt;function &lt;/span&gt;test_function&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_parameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_parameter_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="p"&gt;-value&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_local&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'this variable is available only inside this function'&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_static&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;  &lt;span class="c"&gt;# initialize a static variable&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="c"&gt;# initialize a dynamic variable&lt;/span&gt;

  &lt;span class="nv"&gt;test_static&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'this variable has static content'&lt;/span&gt;
  &lt;span class="nv"&gt;test_dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'this dynamic variable is assigned at execution time'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Show variable content from inside a function:\n\n'&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  first parameter: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_parameter&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  second parameter, default value: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_parameter_default&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local static variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_static&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local dynamic variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_dynamic&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  exported variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_EXPORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  readonly variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_READONLY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  declared variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_declare&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;return &lt;/span&gt;5

&lt;span class="o"&gt;}&lt;/span&gt;

test_function &lt;span class="s1"&gt;'this value is assigned to the first parameter'&lt;/span&gt;
&lt;span class="nv"&gt;function_result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'\nShow the same variables but outside the function:\n\n'&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_local&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local static variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_static&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local dynamic variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_dynamic&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  exported variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_EXPORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  readonly variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_READONLY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  declared variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_declare&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'\nShow the exit status (return value) of the function: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;function_result&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'\nShow current PID of the Bash run-time: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASHPID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Continue reading the second part of the tutorial: &lt;a href="https://dev.to/serdigital64/bash-scripting-concepts-part-2-of-2-3j0f"&gt;Bash Scripting Concepts: Part 2 of 2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copyright-information"&gt;
  &lt;/a&gt;
  Copyright information
&lt;/h2&gt;

&lt;p&gt;This article is licensed under a &lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;. For copyright information on the product or products mentioned inhere refer to their respective owner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Opinions presented in this article are personal and belong solely to me, and do not represent people or organizations associated with me in a professional or personal way. All the information on this site is provided "as is" with no guarantee of completeness, accuracy or the results obtained from the use of this information.&lt;/p&gt;

</description>
      <category>bash</category>
    </item>
    <item>
      <title>How to use MongoDB locally with VS Code</title>
      <author>Michael Hungbo</author>
      <pubDate>Wed, 22 Dec 2021 02:59:17 +0000</pubDate>
      <link>https://dev.to/heymich/how-to-use-mongodb-locally-with-vs-code-jgm</link>
      <guid>https://dev.to/heymich/how-to-use-mongodb-locally-with-vs-code-jgm</guid>
      <description>&lt;p&gt;Recently, a friend asked me if it's possible to work with their MongoDB databases and Atlas clusters locally without the internet and my answer to that was yes. So, I decided to create a guide to show them how and any other persons who might want to test their collections and perform all kinds of database operations with their MongoDB database using VS Code as the editor.&lt;/p&gt;

&lt;p&gt;Installing the MongoDB Community Server Edition allows us to host MongoDB databases locally unlike Atlas which is a cloud hosted database option. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-and-install-mongodb-community-server-edition-50"&gt;
  &lt;/a&gt;
  Download and Install MongoDB Community Server Edition 5.0
&lt;/h3&gt;

&lt;p&gt;Visit the download &lt;a href="https://docs.mongodb.com/manual/administration/install-community/"&gt;website&lt;/a&gt; to download and install MongoDB Community Edition for your OS. You can follow this guide to install MongoDB for Windows OS but the process is pretty much the same for other OS.&lt;br&gt;
For Windows, you can download the &lt;code&gt;.msi&lt;/code&gt; installation file &lt;a href="https://www.mongodb.com/try/download/community?tck=docs_server&amp;amp;_ga=2.236173761.1153293086.1639815683-1594733346.1639815683"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The download page should look something like below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FYszJBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idcras0bnyadefokil39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FYszJBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idcras0bnyadefokil39.png" alt="MongoDB Installation Page" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Run the downloaded installer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose &lt;code&gt;Custom&lt;/code&gt; when prompted for the installation type&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the &lt;code&gt;Service Configuration&lt;/code&gt; pane, select *&lt;em&gt;Install MongoDB as a Service *&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#install-the-mongodb-extension-for-vs-code"&gt;
  &lt;/a&gt;
  Install the MongoDB extension for VS Code
&lt;/h3&gt;

&lt;p&gt;The MongoDB extension for VS Code allows us to create playgrounds to interact and perform query operations on our data and collections and giving us the results on the fly at the click of a button (which is supercool!).&lt;br&gt;
To install, open the extension tab on VS Code and search for &lt;code&gt;MongoDB for VS Code&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The extension looks something like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kl5ZBwRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6kdx6j3tccqqfuw646o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kl5ZBwRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6kdx6j3tccqqfuw646o.png" alt="MongoDB VS Code extension" width="880" height="325"&gt;&lt;/a&gt;&lt;br&gt;
As you can see, it's already installed for me so you can just go ahead and install it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#connect-to-a-mongodb-deployment"&gt;
  &lt;/a&gt;
  Connect to a MongoDB deployment
&lt;/h3&gt;

&lt;p&gt;In VS Code, open the MongoDB interactive panel by clicking on the leaf icon on the left sidebar menu, then click on create a connection to connect to a database instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m51UPu5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whlwdjvok3ikddcmh23v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m51UPu5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whlwdjvok3ikddcmh23v.jpg" alt="MongoDB VS Code Panel" width="880" height="401"&gt;&lt;/a&gt;&lt;br&gt;
Note: To connect to a deployment using a &lt;code&gt;connection string&lt;/code&gt;, you must have a MongoDB cluster running on your machine or have one in the cloud using Atlas. We'll create one for this guide in a moment.&lt;/p&gt;

&lt;p&gt;An example connection string for a local deployment looks like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uE9Nd2YE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bad9n0409gk2i5wwv0lw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uE9Nd2YE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bad9n0409gk2i5wwv0lw.png" alt="MongoDB VS Code successful connection" width="405" height="57"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;localhost&lt;/strong&gt;: specifies our host&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;27017&lt;/strong&gt;: the default port used by mongodb&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;myDatabase&lt;/strong&gt;: is the name of our local database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a sample database named &lt;code&gt;myDatabase&lt;/code&gt; locally, we can either use &lt;code&gt;MongoDB Compass&lt;/code&gt;, a graphical interface for working with databases or &lt;code&gt;mongosh&lt;/code&gt; (Mongo Shell). For this guide, we'll use mongosh.&lt;/p&gt;

&lt;p&gt;Note: You can also connect to a cloud database instance, for example, a MongoDB Atlas cluster.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#download-and-install-mongosh"&gt;
  &lt;/a&gt;
  Download and install Mongosh
&lt;/h3&gt;

&lt;p&gt;Mongosh (MongoDB Shell) is a JavaScript REPL command line tool for interacting with MongoDB offline and online deployments. What this means is that it allows us to run valid JS code right in the command line to query your database. You can download and install Mongosh &lt;a href="https://docs.mongodb.com/mongodb-shell/install/#std-label-mdb-shell-install"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;On successful installation, you should see this panel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZ2L6suw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lllt96wy7tljje399e4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZ2L6suw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lllt96wy7tljje399e4g.png" alt="Mongo Shell" width="252" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, open command prompt on windows and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mongosh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Current Mongosh Log ID: 61bfbc4837f8722b10f9e21e
Connecting to:          mongodb://127.0.0.1:27017/?directConnection&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&amp;amp;serverSelectionTimeoutMS&lt;span class="o"&gt;=&lt;/span&gt;2000
Using MongoDB:          5.0.5
Using Mongosh:          1.1.7

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

&lt;span class="nt"&gt;------&lt;/span&gt;
   The server generated these startup warnings when booting:
   2021-12-18T10:24:36.928-08:00: Access control is not enabled &lt;span class="k"&gt;for &lt;/span&gt;the database. Read and write access to data and configuration is unrestricted
&lt;span class="nt"&gt;------&lt;/span&gt;

&lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;test&lt;/code&gt; shown at the bottom of the result is the default database created for us by mongosh. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Create a new database, run the following command on the cmd:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;use myDatabase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This automatically creates a new database called &lt;code&gt;myDatabase&lt;/code&gt; for us. Which returns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; use myDatabase
switched to db myDatabase

myDatabase&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#great-now-lets-connect"&gt;
  &lt;/a&gt;
  Great. Now, let's connect
&lt;/h3&gt;

&lt;p&gt;Remember the connection string we talked about earlier? Good. We're going to use that on VS Code to connect to our newly created database.&lt;br&gt;
The connection string for our database will be: &lt;code&gt;mongodb://localhost:27017/myDatabase&lt;/code&gt;, paste this in the text bar at the top of the window, that is, step 3 in the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GOWXCHfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2x584se5r7hpfk9lhz8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GOWXCHfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2x584se5r7hpfk9lhz8.jpg" alt="Connection String" width="880" height="401"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upon a successful connection, you should see the following changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdvuUt84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e96r2t1hdaem7nx4awuz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdvuUt84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e96r2t1hdaem7nx4awuz.jpg" alt="MongoDB connected in VS Code" width="880" height="400"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Congratulations! You have just created a local MongoDB database and connected to it from VS Code, successfully!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#play-with-your-database"&gt;
  &lt;/a&gt;
  Play with your database
&lt;/h3&gt;

&lt;p&gt;To perform queries and other database operations on our new database, we can create a &lt;code&gt;Playground&lt;/code&gt; in VS Code to do these.&lt;/p&gt;

&lt;p&gt;Click on the green &lt;code&gt;create playground&lt;/code&gt; button in VS Code to create a playground.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OoTrsIz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9iu0gv3aja49xurf4pk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OoTrsIz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9iu0gv3aja49xurf4pk.jpg" alt="MongoDB Playground" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your newly opened editor tab should look like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtZKng_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdh8vutko9levek5w282.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FtZKng_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdh8vutko9levek5w282.jpg" alt="MongoDB Playground" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delete the content in the default template and paste the following to test our &lt;code&gt;myDatabase&lt;/code&gt; database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Select the database to use&lt;/span&gt;
&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myDatabase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Insert a few documents in the continents collection&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;continents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertMany&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;africa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nigeria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;asia&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;southAmerica&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Colombia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Return all the fields in the continents collection&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;continents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Write other queries and operations ...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click on the play button at the top-right side to run the code. A new panel should be opened with our results like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DhQyaVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieymsciubm173tegz0mf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DhQyaVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieymsciubm173tegz0mf.png" alt="Results pane" width="880" height="401"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#congratulations-you-made-it"&gt;
  &lt;/a&gt;
  Congratulations, you made it!
&lt;/h3&gt;

&lt;p&gt;There you have it. Now you can work with your MongoDB databases locally using VS Code, perform database operations and see the results on the fly! Isn't that awesome? Yeah, it is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/mongodb-vscode/"&gt;MongoDB for VS Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/mongodb-vscode/connect/"&gt;Connecting to your MongoDB deployment&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-me-for-more-content-on-javascript-and-react"&gt;
  &lt;/a&gt;
  Follow me for more content on JavaScript and React!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-say-hi-on-twitter"&gt;
  &lt;/a&gt;
  You can also say hi on &lt;a href="https://twitter.com/michaelhungbo"&gt;Twitter&lt;/a&gt; 🙂
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>database</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Tutorial Android Studio: Agregar Notificaciones de firebase</title>
      <author>Rodrigo Garcia Trejo</author>
      <pubDate>Wed, 22 Dec 2021 01:11:16 +0000</pubDate>
      <link>https://dev.to/fynio/tutorial-android-studio-agregar-notificaciones-de-firebase-4klb</link>
      <guid>https://dev.to/fynio/tutorial-android-studio-agregar-notificaciones-de-firebase-4klb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#bienvenidos-a-un-nuevo-tutorial"&gt;
  &lt;/a&gt;
  Bienvenidos a un nuevo tutorial
&lt;/h1&gt;

&lt;p&gt;En esta ocasión les enseñare a agregar notificaciones utilizando firebase en android studio paso a paso:&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#firebase"&gt;
  &lt;/a&gt;
  firebase
&lt;/h1&gt;

&lt;p&gt;Primero necesitamos un proyecto en firebase para eso iremos a su página web llamada firebase console &lt;a href="https://console.firebase.google.com/u/0/"&gt;click aquí&lt;/a&gt; y creamos un nuevo proyecto y le asignamos un nombre&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjSM8qOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3egfvd2d56w0azdnunfw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjSM8qOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3egfvd2d56w0azdnunfw.jpg" alt="Creando proyecto" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Después agregaremos una app a nuestro proyecto creado tipo android &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HesDRM11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxoi2817j2sjjg04x9mg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HesDRM11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxoi2817j2sjjg04x9mg.png" alt="Android" width="880" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Después de seleccionar la opción Android debemos de agregar el nombre de nuestro proyecto y si desean pueden poner un nombre a tu proyecto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RhKvqRoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w4bcogwys2ltqp02v61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RhKvqRoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w4bcogwys2ltqp02v61.png" alt="Ingresando un nombre" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Descargamos el archivo google.service.json y lo agregamos en nuestra aplicacion en la carpeta app para eso debemos seleccionar la opcion de ver Project  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiHF8rS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ln4l965zrfh6se6z1os.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiHF8rS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ln4l965zrfh6se6z1os.png" alt="googlse service json" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En la misma carpeta App en el archivo build.gradle agregamos dos apply&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando de la siguiente manera&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v43PJoTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1blumjg9spr66qanctte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v43PJoTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1blumjg9spr66qanctte.png" alt="Agregando Apply Apply" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En la sección de dependencias del mismo archivo build_gradle &lt;br&gt;
agregamos lo siguiente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    implementation platform('com.google.firebase:firebase-bom:29.0.1')
    implementation 'com.google.firebase:firebase-bom:29.0.1'
    implementation 'com.google.firebase:firebase-messaging:23.0.0'
    implementation 'com.google.firebase:firebase-analytics'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando de la siguiente manera&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OulICfld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfo9l9ywf8r49pl9u2qd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OulICfld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfo9l9ywf8r49pl9u2qd.png" alt="implements" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y le damos en sincronizar.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#myfirebasemessagingservice"&gt;
  &lt;/a&gt;
  MyFirebaseMessagingService
&lt;/h1&gt;

&lt;p&gt;Cambiaremos de vista de &lt;strong&gt;Project&lt;/strong&gt; a &lt;strong&gt;Android&lt;/strong&gt; y creamos una Java Class llamada &lt;strong&gt;MyFirebaseMessagingService&lt;/strong&gt; e ingresamos el siguiente código.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.administracionsedecohidalgo;

import com.google.firebase.messaging.FirebaseMessagingService;

public class MyFirebaseMessagingService extends FirebaseMessagingService {

    private static final String TAG = "MyFirebaseMsgService";


}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando de la siguiente manera:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A78n6RaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqaoti745j7cuvayjnr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A78n6RaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqaoti745j7cuvayjnr0.png" alt="MyFirebaseMessagingService" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#androidmanifestxml"&gt;
  &lt;/a&gt;
  AndroidManifest.xml
&lt;/h1&gt;

&lt;p&gt;En este archivo &lt;strong&gt;AndroidManifest.xml&lt;/strong&gt; agregaremos permisos de Internet debajo de donde aparece la etiqueta &lt;strong&gt;package&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;uses-permission android:name="android.permission.INTERNET" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando el código de la siguiente manera:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4uM7CsSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yycjrp7c8hs14dzgl8ar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4uM7CsSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yycjrp7c8hs14dzgl8ar.png" alt="8" width="822" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En la etiqueta &lt;strong&gt;&amp;lt;application&lt;/strong&gt; agregamos 2 etiquetas Meta-data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;meta-data
       android:name="firebase_messaging_auto_init_enabled"
       android:value="false" /&amp;gt;
 &amp;lt;meta-data
       android:name="firebase_analytics_collection_enabled"
       android:value="false" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando de la siguiente manera:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SLPEVT-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymq9gpq7lf9g49vid0d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLPEVT-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymq9gpq7lf9g49vid0d0.png" alt="9" width="844" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Antes de cerrar la etiqueta &lt;strong&gt;&lt;/strong&gt; agregamos el siguiente código el cual manda llamar la clase MyFirebaseMessagingService que creamos anteriormente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        &amp;lt;service
            android:name=".MyFirebaseMessagingService"
            android:exported="false"&amp;gt;
            &amp;lt;intent-filter&amp;gt;
                &amp;lt;action android:name="com.google.firebase.MESSAGING_EVENT" /&amp;gt;
            &amp;lt;/intent-filter&amp;gt;
        &amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1u8aEMOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at1xd4gkd7hzmy95rzsw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1u8aEMOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at1xd4gkd7hzmy95rzsw.png" alt="10" width="880" height="363"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eso es todo lo que tenemos que agregar en nuestra aplicación de Android studio. Solo nos resta ir a firabase en la sección Cloud Messaging  y en la opción &lt;strong&gt;Send your first message&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihoodu-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1l1gns9cny2e367nc9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihoodu-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1l1gns9cny2e367nc9r.png" alt="11" width="880" height="445"&gt;&lt;/a&gt;&lt;br&gt;
Al darle clic nos mostrará una ventana para redactar la notificación&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1cUU7np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wnbyw3s5src7upo27r0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1cUU7np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wnbyw3s5src7upo27r0.png" alt="12" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Entonces escribimos un titulo y texto que queramos agregar y le damos en siguiente.&lt;/p&gt;

&lt;p&gt;Posteriormente selecciona la aplicación que hemos creado en firabase y le damos en siguiente&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-bLkamM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9cg2dxd3uibf0eweye4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-bLkamM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9cg2dxd3uibf0eweye4.png" alt="13" width="880" height="592"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Todos los demás campos de los siguientes pasos los dejaremos como están solo daremos siguiente, siguiente, hasta llegar al ultimo paso &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8PpQ8ED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6pbl3agqomlxaib55gc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8PpQ8ED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6pbl3agqomlxaib55gc.png" alt="14" width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Damos clic en revisar &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZewqpK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/487kblequgtrtuo84aau.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZewqpK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/487kblequgtrtuo84aau.png" alt="15" width="880" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y en publicar&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phl60zJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6w77d00i87dzthn96gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phl60zJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6w77d00i87dzthn96gh.png" alt="16" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#eso-es-todo"&gt;
  &lt;/a&gt;
  ESO ES TODO!!
&lt;/h1&gt;

&lt;p&gt;Nos tiene que llegar una notificación en nuestro celular.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AI8t7B5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d233agpexu45ze1quqwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AI8t7B5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d233agpexu45ze1quqwg.png" alt="17" width="540" height="1170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#si-todo-te-sali%C3%B3-bien-reg%C3%A1lame-un-like"&gt;
  &lt;/a&gt;
  Si todo te salió bien regálame un like
&lt;/h2&gt;

</description>
      <category>firebase</category>
      <category>android</category>
      <category>minitutorial</category>
      <category>espanol</category>
    </item>
    <item>
      <title>100 días de código: 49, mongoDB university como meta intermedia.</title>
      <author>Daro</author>
      <pubDate>Wed, 22 Dec 2021 00:31:27 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-49-mongodb-university-como-meta-intermedia-57c7</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-49-mongodb-university-como-meta-intermedia-57c7</guid>
      <description>&lt;p&gt;Foto de &lt;a href="https://unsplash.com/@morgane_lb?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Morgane Le Breton&lt;/a&gt; en &lt;a href="https://unsplash.com/s/photos/chrismas?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¡Hey hey hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a este día 49 del reto en el cual me siento muy cerca del numero 50 y como diría patricio, casi puedo saborearlo.&lt;/p&gt;

&lt;p&gt;Al aspirar a convertirte en un desarrollador full stack un tema que es bastante recurrente es el manejo de las bases de datos. Creo que es un pilar fundamental de cualquier desarrollador ya que te permite crear, leer, actualizar y borrar datos en tus aplicaciones  de manera persistente.&lt;/p&gt;

&lt;p&gt;Cuando comienzas a entrar en el mundo de bases de datos te das cuenta de un gran poder conlleva una gran responsabilidad como diría nuestro querido amigo Spiderman (que por cierto, la película nueva es muy buena &lt;br&gt;
¿ustedes que opinan?). &lt;/p&gt;

&lt;p&gt;Volviendo al tema, existen dos tipos principales de bases de datos: SQL y NoSQL, estas te permiten administrar datos para tus aplicaciones. De las SQL destacamos que son bases de datos organizadas en tablas con campos específicos que te permiten definir desde el primer momento que tipo de datos tendra cada una de las entradas. &lt;/p&gt;

&lt;p&gt;Por otro lado tenemos las NoSQL que, aunque lo niegan en el nombre, tienen similitudes con las anteriormente mencionadas, son bases de datos basadas en documentos y, aunque una buena recomendación es decidir una estructura en la que estarán basadas las entradas, se puede omitir y crear documentos totalmente distintos (que obviamente no es algo muy recomendado). &lt;br&gt;
Muchas personas las comparan con un libro donde cada pagina de este seria un registro que puede tener la misma estructura o no y se encuentran enlazados entre ellos.&lt;/p&gt;

&lt;p&gt;De estas ultimas existe un tipo de bases de datos llamado MongoDB la cual es muy usada y que recomiendo si comienzas en el mundo de bases de datos sobre todo porque ofrece una guia o &lt;a href="https://university.mongodb.com/"&gt;universidad&lt;/a&gt; que te permite aprender de una forma mas sencilla.&lt;/p&gt;

&lt;p&gt;Yo la he tomado hace poco tiempo y puedo decirte que en unos cuantos días puedes dominar MongoDB bastante bien. Sin embargo, hacen mucho uso de la terminal en el curso por lo que no te preocupes si te toma mas tiempo al no estar acostumbrado/a ello.&lt;/p&gt;

&lt;p&gt;Ahora si sigamos con la sección regular del reto:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C3%BAltimos-d%C3%ADas"&gt;
  &lt;/a&gt;
  Últimos días:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Como estaba aprendiendo cosas que ya había consultado anteriormente decidí saltarme a la sección de Nodejs en The Odin Project aunque se que tarde que temprano volveré a las lecciones anteriores. &lt;/li&gt;
&lt;li&gt;Practique 20 min de Touch Typing todos los días.&lt;/li&gt;
&lt;li&gt;Comencé a diseñar algunas secciones nuevas de mi pagina personal porque no terminaba de convencerme.&lt;/li&gt;
&lt;li&gt;Hice algunos ejercicios en Hacker rank.&lt;/li&gt;
&lt;li&gt;Y sobre todo aprendí un montón en la universidad de MongoDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Complete el capitulo 5 de la universidad de MongoDB.&lt;/li&gt;
&lt;li&gt;Practique 30 min de Touch Typing.&lt;/li&gt;
&lt;li&gt;Avance con el diseño de mi pagina.&lt;/li&gt;
&lt;li&gt;Planifique la semana.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Siento que me estoy apresurando demasiado al adquirir conocimientos ya que me llevo solo 2 días y casi termino el curso de la universidad de MongoDB. Debo bajar el ritmo y ademas se vienen las fiestas navideñas asi que a lo mejor me tomo un par de días de descanso. &lt;/p&gt;

&lt;p&gt;Espero que tengan mucho éxito con sus proyectos. Sonrían y no olviden tomarse algo de tiempo libre para si mismos.&lt;/p&gt;

&lt;p&gt;Adiós mundo!&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to apply filters to images with Python</title>
      <author>Juan Benitez </author>
      <pubDate>Wed, 22 Dec 2021 00:01:44 +0000</pubDate>
      <link>https://dev.to/juanbenitezdev/how-to-apply-filters-to-images-with-python-3p8e</link>
      <guid>https://dev.to/juanbenitezdev/how-to-apply-filters-to-images-with-python-3p8e</guid>
      <description>&lt;p&gt;A few weeks ago, we received a new ticket: &lt;em&gt;“Users want to be able to apply filters to their pictures”&lt;/em&gt;, yes, something like Instagram does. We immediately thought about the Lightroom API, but after some research, we came to the conclusion that it doesn’t quite meet our needs. We were searching for something like a library, where we can just load the image, apply the filters and then save the new image with the filters applied, since we couldn’t find it we decided to build one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fimage"&gt;
  &lt;/a&gt;
  FImage
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/jordandjp/fimage"&gt;FImage&lt;/a&gt;&lt;/strong&gt; is a Python module to apply and create multiple filters to images, it exposes an API that you can use for applying the different color transformations to the images. It works by converting the image to an RGB matrix and applying different math formulas to it. We used &lt;a href="https://numpy.org/"&gt;NumPy&lt;/a&gt; for all the matrix operations since it is faster and optimized, and &lt;a href="https://pillow.readthedocs.io/en/stable/"&gt;Pillow&lt;/a&gt; for handling the loading and saving of the images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h2&gt;

&lt;p&gt;First, we need to install it, for this you need to be using Python 3.6 or greater to be able to use &lt;strong&gt;FImage&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;fimage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for these examples, I’m gonna use this picture to apply it filters:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zeWRvnBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjk44oa9ycowudgaf6fb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zeWRvnBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjk44oa9ycowudgaf6fb.jpg" alt="my_picture.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applying-a-simple-filter"&gt;
  &lt;/a&gt;
  Applying a simple filter
&lt;/h3&gt;

&lt;p&gt;Create a file &lt;code&gt;app.py&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.filters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sepia&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# replace 'my_picture.jpg' with the path to your image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# apply the Sepia filter to the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sepia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# save the image with the applied filter
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture_sepia.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, just run it :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how the new image &lt;code&gt;my_picture_sepia.jpg&lt;/code&gt; looks like after the filter was applied.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9K_GOZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjf09bxcipgbbjwuw9jv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9K_GOZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjf09bxcipgbbjwuw9jv.jpg" alt="my_picture_sepia.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#applying-multiple-filters"&gt;
  &lt;/a&gt;
  Applying multiple filters
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;FImage&lt;/strong&gt; offers more filters besides the Sepia one, even you can combine multiples filters to give a better look to your picture.&lt;/p&gt;

&lt;p&gt;Modify the file &lt;code&gt;app.py&lt;/code&gt; to import more filters from FImage&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.filters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Contrast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Brightness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Saturation&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# apply the mutiple filters to the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Saturation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Contrast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# save the image with the applied filter
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture_mixed.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We run it by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our new &lt;code&gt;my_picture_mixed.jpg&lt;/code&gt; looks like&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jUllRXdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5i3tn210bvuyf8z7lqff.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUllRXdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5i3tn210bvuyf8z7lqff.jpg" alt="my_picture_mixed.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The order in which the filters are passed to the &lt;code&gt;apply&lt;/code&gt; function matters, this is because the filters are applied sequentially, so the next filter will be applied over the resultant image from the previous one.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#presets"&gt;
  &lt;/a&gt;
  Presets
&lt;/h3&gt;

&lt;p&gt;Presets are just the combinations of multiple filters with already defined adjustment values.&lt;/p&gt;

&lt;p&gt;Let’s change our &lt;code&gt;app.py&lt;/code&gt; one more time to use the Presets&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.presets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SinCity&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# replace 'my_picture.jpg' with the path to your image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# apply the SinCity preset to the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SinCity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# save the image with the applied preset
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture_sincity.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we run it, we get our new &lt;code&gt;my_picture_sincity.jpg&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnU18-ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7e1azi4djosxguuq4r3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnU18-ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7e1azi4djosxguuq4r3.jpg" alt="my_picture_sincity.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#custom-presets"&gt;
  &lt;/a&gt;
  Custom Presets
&lt;/h3&gt;

&lt;p&gt;If you like the look your picture got after testing different filters and want to store this combination for applying it to more pictures, you can create your own Preset by just extending the &lt;code&gt;Preset&lt;/code&gt; Class and specifying these filters and their adjust values in it.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;app.py&lt;/code&gt; let’s do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.presets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Preset&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.filters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Contrast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Brightness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Saturation&lt;/span&gt;


&lt;span class="c1"&gt;# Create my custom preset and specify the filters to apply
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyOwnPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Preset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;transformations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Contrast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Saturation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# replace 'my_picture.jpg' with the path to your image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# apply MyOwnPreset to the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyOwnPreset&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# save the image with the applied preset
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture_custom.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new &lt;code&gt;my_picture_custom.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayIbxTji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mus16gejayn3a4i4ev1o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayIbxTji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mus16gejayn3a4i4ev1o.jpg" alt="my_picture_custom.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is basic usage of &lt;strong&gt;FImage&lt;/strong&gt;, we are still developing it, and it would be really great any feedback or contribution you have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jordandjp/fimage"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title> Histograma de frequência para a aquicultura.</title>
      <author>Danilo</author>
      <pubDate>Tue, 21 Dec 2021 22:41:54 +0000</pubDate>
      <link>https://dev.to/danilologic/histograma-de-frequencia-para-a-aquicultura-3hgl</link>
      <guid>https://dev.to/danilologic/histograma-de-frequencia-para-a-aquicultura-3hgl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5Ca1VNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gisa7vuro9dlgi5v6bjg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5Ca1VNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gisa7vuro9dlgi5v6bjg.jpg" alt="Image description" width="880" height="684"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ol%C3%A1-neste-tutorial-vou-ensinar-de-forma-r%C3%A1pida-e-completa-tudo-que-voc%C3%AA-precisa-saber-para-criar-um-histograma-de-frequ%C3%AAncias-utilizando-a-linguagem-de-programa%C3%A7%C3%A3o-python-e-a-biblioteca-matplotlib"&gt;
  &lt;/a&gt;
  Olá! Neste tutorial vou ensinar de forma rápida e completa tudo que você precisa saber para criar um histograma de frequências utilizando a linguagem de programação Python e a biblioteca matplotlib.
&lt;/h4&gt;

&lt;p&gt;Lembrando que precisa ter a biblioteca matplotlib instalada juntamente com o python:&lt;br&gt;
&lt;a href="https://www.delftstack.com/pt/tutorial/matplotlib/introduction-and-installation/"&gt;install-matplotlib&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-quando-usar-um-histograma-de-frequ%C3%AAncia"&gt;
  &lt;/a&gt;
  1. quando usar um histograma de frequência?
&lt;/h3&gt;

&lt;p&gt;Se você assim como eu trabalho diretamente com peixes e em algum momento precisou interpretar um grande número de dados como, peso, comprimento ou tempo de cultivo, sabe que apenas olhando pode ficar difícil extrair algum tipo de informação relevante.&lt;/p&gt;

&lt;p&gt;Imaginemos um grupo de informações sobre o peso(g) de um conjunto de 100 peixes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          peso = [100, 435, 420, 850, 420, 900, 862, 730, 50, 235,
                782, 163, 686, 658, 357, 233, 398, 622, 567, 611,
                 747, 864, 941, 836, 533, 566, 681, 537, 694, 644,
                 973, 764, 864, 551, 511, 558, 596, 870, 783, 863,
                 618, 591, 784, 635, 522, 652, 955, 767, 729, 526,
                 708, 894, 179, 713, 686, 213, 342, 455, 552, 356,
                 610, 816, 382, 872, 629, 33, 365, 785, 562, 212,
                 600, 731, 309, 459, 399, 293, 408, 524, 430, 267,
                528, 849, 765, 653, 767, 539, 716, 137, 793, 775,
                530, 540, 367, 721, 703, 491, 551, 576, 403, 632]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;copie e cole este código no seu editor de preferência.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#e-se-nos-fosse-solicitado-as-seguintes-informa%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  E se nos fosse solicitado as seguintes informações:
&lt;/h4&gt;

&lt;p&gt;A -   Quantos peixes possuem peso acima de 500g? (peso ≥ 500g)&lt;br&gt;
B -   Quantos estão com peso abaixo de 250g? (peso ≥ 250g)&lt;br&gt;
C -   Quantos estão entre 300g e 800g?&lt;/p&gt;

&lt;p&gt;Como um bom estudante/profissional você conseguiria responder estas perguntas apenas olhando para a lista, porem não seria nada produtivo!&lt;/p&gt;

&lt;p&gt;Vamos então criar um histograma para a nossa lista de peso:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import matplotlib.pyplot as plt  

peso = [100, 435, 420, 850, 420, 900, 862, 730, 50, 235,  
 782, 163, 686, 658, 357, 233, 398, 622, 567, 611,  
 747, 864, 941, 836, 533, 566, 681, 537, 694, 644,  
 973, 764, 864, 551, 511, 558, 596, 870, 783, 863,  
 618, 591, 784, 635, 522, 652, 955, 767, 729, 526,  
 708, 894, 179, 713, 686, 213, 342, 455, 552, 356,  
 610, 816, 382, 872, 629, 33, 365, 785, 562, 212,  
 600, 731, 309, 459, 399, 293, 408, 524, 430, 267,  
 528, 849, 765, 653, 767, 539, 716, 137, 793, 775,  
 530, 540, 367, 721, 703, 491, 551, 576, 403, 632]  

plt.hist(peso, 5, rwidth=0.9)  
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Teremos o restado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--me-om2H8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ga0wrjfvrv7s7nycy4gi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--me-om2H8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ga0wrjfvrv7s7nycy4gi.png" alt="Image description" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfeito, Chegamos a algumas das respostas:&lt;/p&gt;

&lt;p&gt;A  - Pelo menos 20 animais possuem o peso acima de 500:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2gpHzXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf6qvriidvnxlb7s0bbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2gpHzXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf6qvriidvnxlb7s0bbp.png" alt="Image description" width="515" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;B - 22,5 Estão com o peso inferior a 250 gramas&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbWcaAJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rsf6rlzsjzov0l9tkja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbWcaAJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rsf6rlzsjzov0l9tkja.png" alt="Image description" width="519" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;C - Aproximadamente 68,5 possuem peso entre 300g e 800g&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eNWvkapM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg4l5crfd3jyqkz1cw1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eNWvkapM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg4l5crfd3jyqkz1cw1n.png" alt="Image description" width="515" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Porem precisamos entender cada parâmetro utilizado para este gráfico:&lt;/p&gt;

&lt;p&gt;Peso: é a nossa lista com os cem pesos dos peixes&lt;/p&gt;

&lt;p&gt;5: numero de barras ou classes que queremos que nosso histograma mostre.&lt;/p&gt;

&lt;p&gt;rwidth: O tamanho relativo que queremos que a barra tenha no nosso caso rwidth=0.9; &lt;br&gt;
Caso fique curioso, pode mudar o valor de 0.9 para 0.5 e tera um resultado parecido com o da imagem:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7N4iIU45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gzhii44zqqwj95fr1vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7N4iIU45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0gzhii44zqqwj95fr1vr.png" alt="Image description" width="566" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2 - Agora podemos formatar, adicionar títulos e etiquetas.&lt;/p&gt;

&lt;p&gt;Perceba que nosso histograma está completo, porem como outras pessoas vão saber do que se trata esse gráfico?&lt;br&gt;
para isso vamos adicionar as informações de título e etiquetas para os eixos x e y:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import matplotlib.pyplot as plt  

peso = [100, 435, 420, 850, 420, 900, 862, 730, 50, 235,  
 782, 163, 686, 658, 357, 233, 398, 622, 567, 611,  
 747, 864, 941, 836, 533, 566, 681, 537, 694, 644,  
 973, 764, 864, 551, 511, 558, 596, 870, 783, 863,  
 618, 591, 784, 635, 522, 652, 955, 767, 729, 526,  
 708, 894, 179, 713, 686, 213, 342, 455, 552, 356,  
 610, 816, 382, 872, 629, 33, 365, 785, 562, 212,  
 600, 731, 309, 459, 399, 293, 408, 524, 430, 267,  
 528, 849, 765, 653, 767, 539, 716, 137, 793, 775,  
 530, 540, 367, 721, 703, 491, 551, 576, 403, 632]  

plt.title('Lote de 100 peixes')  
plt.xlabel('PESOg')  
plt.ylabel('Frequência Absoluta')  
plt.hist(peso, 10, rwidth=0.9)  
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72T9lxOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84nrizrhfmlfw5hyhxc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72T9lxOA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84nrizrhfmlfw5hyhxc8.png" alt="Image description" width="520" height="392"&gt;&lt;/a&gt;&lt;br&gt;
Caso queira aumentar a fonte do título e das etiquetas, basta adicionar em &lt;code&gt;plt.title('Lote de 100 peixes')&lt;/code&gt; uma vírgula &lt;code&gt;,&lt;/code&gt; e escrever &lt;code&gt;fontsize=15&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ficando então:&lt;br&gt;
&lt;code&gt;&lt;br&gt;
plt.title('Lote de 100 peixes', fontsize=20)&lt;br&gt;
plt.xlabel('PESOg',fontsize=15)  &lt;br&gt;
plt.ylabel('Frequência Absoluta',fontsize=15)  &lt;br&gt;
plt.tick_params(labelsize=12)&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Este ultimo muda o tamanho da fonte dos números(parâmetros) &lt;/p&gt;

&lt;p&gt;Agora temos um histograma bonito e legível.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oA81MWps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwcf5b9quir2pfhj6bfp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oA81MWps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwcf5b9quir2pfhj6bfp.png" alt="Image description" width="519" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com isso, podemos afirmar que o gráfico em histograma é um forte aliado para agilizar a interpretação e visualização da distribuição do peso dos nossos peixes. Porem saiba que esta é somente a forma introdutória do gráfico e existem muitas outras possibilidades de construção de gráficos.&lt;/p&gt;

&lt;p&gt;Versão final do nosso código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import matplotlib.pyplot as plt  

peso = [100, 435, 420, 850, 420, 900, 862, 730, 50, 235,  
 782, 163, 686, 658, 357, 233, 398, 622, 567, 611,  
 747, 864, 941, 836, 533, 566, 681, 537, 694, 644,  
 973, 764, 864, 551, 511, 558, 596, 870, 783, 863,  
 618, 591, 784, 635, 522, 652, 955, 767, 729, 526,  
 708, 894, 179, 713, 686, 213, 342, 455, 552, 356,  
 610, 816, 382, 872, 629, 33, 365, 785, 562, 212,  
 600, 731, 309, 459, 399, 293, 408, 524, 430, 267,  
 528, 849, 765, 653, 767, 539, 716, 137, 793, 775,  
 530, 540, 367, 721, 703, 491, 551, 576, 403, 632]  

plt.title('Lote de 100 peixes', fontsize=20)  
plt.xlabel('PESOg', fontsize=15)  
plt.ylabel('Frequência Absoluta', fontsize=15)  
plt.tick_params(labelsize=12)  
plt.hist(peso, 10, rwidth=0.9)  
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                     Muito Obrigado!!!!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
    </item>
    <item>
      <title>Log4j Exploit Pattern Detection Using ColdFusion\CFML</title>
      <author>James Moberg</author>
      <pubDate>Tue, 21 Dec 2021 22:16:16 +0000</pubDate>
      <link>https://dev.to/gamesover/log4j-exploit-pattern-detection-using-coldfusioncfml-4l17</link>
      <guid>https://dev.to/gamesover/log4j-exploit-pattern-detection-using-coldfusioncfml-4l17</guid>
      <description>&lt;p&gt;Here are my initial attempts at trying to detect Log4j exploit attempts that may make it past our WAF/service provider protections. While our WAF stopped requests from Trend Micro's &lt;a href="https://log4j-tester.trendmicro.com/"&gt;Log4j Tester&lt;/a&gt;, obfuscated requests made it through. At time of testing, Azure wasn't blocking requests. I had to be a little careful with the script as Windows kept instantly quarantining the CFM files and prevented ColdFusion from executing the template.&lt;/p&gt;

&lt;p&gt;Sample CFML code available at &lt;a href="https://gist.github.com/JamoCA/6a8c612645b1b7c47eba8e317ad51d23"&gt;https://gist.github.com/JamoCA/6a8c612645b1b7c47eba8e317ad51d23&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


</description>
      <category>log4j</category>
      <category>java</category>
      <category>cfml</category>
      <category>coldfusion</category>
    </item>
    <item>
      <title>Beginner-friendy guide to error handling in TypeScript, Node.js, Express.js API design</title>
      <author>Valentin Kuharic</author>
      <pubDate>Tue, 21 Dec 2021 22:10:37 +0000</pubDate>
      <link>https://dev.to/valentinkuharic/beginner-friendy-guide-to-error-handling-in-typescript-nodejs-expressjs-api-design-432i</link>
      <guid>https://dev.to/valentinkuharic/beginner-friendy-guide-to-error-handling-in-typescript-nodejs-expressjs-api-design-432i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-introduction-to-the-topic"&gt;
  &lt;/a&gt;
  1. Introduction to the topic
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#11-overview"&gt;
  &lt;/a&gt;
  1.1. Overview
&lt;/h3&gt;

&lt;p&gt;Error handling is pain. You can get pretty far without handling errors correctly, but the bigger the application, the bigger the problems you’re going to face. To really take your API building to the next level, you should tackle the challenge head-on. Error handling is a broad subject, and it can be done in many ways, depending on the application, technologies and more. It’s one of those things that are easy to understand, but hard to fully grasp.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-what-well-be-doing"&gt;
  &lt;/a&gt;
  1.2. What we’ll be doing
&lt;/h3&gt;

&lt;p&gt;In this article, we’re going to explain a beginner-friendly way of handling errors in Node.js + Express.js API with TypeScript. We are going to explain what an error is, different types of errors that can crop up and how to handle them in our application. Here are some of the things we’ll be doing in the next chapters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;learning what “error handling” really is and the types of errors that you’ll encounter&lt;/li&gt;
&lt;li&gt;learning about the Node.js &lt;code&gt;Error&lt;/code&gt; object and how can we use it&lt;/li&gt;
&lt;li&gt;learning how to create custom error classes and how they can help us develop better APIs and Node applications&lt;/li&gt;
&lt;li&gt;learning about Express middleware and how to use them to handle our errors&lt;/li&gt;
&lt;li&gt;learning how to structure the error information and present it to the consumer and developer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#13-prerequisites"&gt;
  &lt;/a&gt;
  1.3. Prerequisites
&lt;/h3&gt;

&lt;p&gt;DISCLAMER! &lt;strong&gt;This article assumes you already know some stuff.&lt;/strong&gt; Even though this is beginner-friendly, here’s what you should know to get the most out of this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;working knowledge of Node.js&lt;/li&gt;
&lt;li&gt;working knowledge of Express.js (routes, middleware and such)&lt;/li&gt;
&lt;li&gt;basics of TypeScript (and classes!)&lt;/li&gt;
&lt;li&gt;basics of how an API works and is written using Express.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay. We can begin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-what-is-error-handling-and-why-do-you-need-it"&gt;
  &lt;/a&gt;
  2. What is error handling and why do you need it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;So what exactly is “error handling” really?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Error handling (or exception handling) is the process of responding to the occurrence of errors (anomalous/unwanted behaviour) during the execution of a program. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we need error handling?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because we want to make bug fixing less painful. It also helps us write cleaner code since all error handling code is centralized, instead of handling errors wherever we think they might crop up. In the end - the code is more organized, you repeat yourself less and it reduces development and maintenance time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-types-of-errors"&gt;
  &lt;/a&gt;
  3. Types of errors
&lt;/h2&gt;

&lt;p&gt;There are &lt;strong&gt;two main types&lt;/strong&gt; of errors that we need to differentiate and handle accordingly. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-operational-errors"&gt;
  &lt;/a&gt;
  3.1. &lt;strong&gt;Operational Errors&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Operational errors represent runtime problems. They are not necessarily “bugs”, but are external circumstances that can disrupt the flow of program execution. Even though they're not errors in your code, these situations can (and inevitably will) happen and they need to be handled. Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An API request fails for some reason (e.g., the server is down or the rate limit is exceeded)&lt;/li&gt;
&lt;li&gt;A database connection cannot be established&lt;/li&gt;
&lt;li&gt;The user sends invalid input data&lt;/li&gt;
&lt;li&gt;system ran out of memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#32-programmer-errors"&gt;
  &lt;/a&gt;
  3.2. &lt;strong&gt;Programmer errors&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Programmer errors are the real “bugs” and so, they represent issues in the code itself. As mistakes in the syntax or logic of the program, they can be only resolved by changing the source code. Here are some examples of programmer errors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trying to read a property on an object that is not defined&lt;/li&gt;
&lt;li&gt;passing incorrect parameters in a function&lt;/li&gt;
&lt;li&gt;not catching a rejected promise&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-what-is-a-node-error"&gt;
  &lt;/a&gt;
  4. What is a Node error?
&lt;/h2&gt;

&lt;p&gt;Node.js has a built-in object called &lt;code&gt;Error&lt;/code&gt; that we will use as our base to throw errors. When thrown, it has a set of information that will tell us where the error happened, the type of error and what is the problem. The &lt;a href="https://nodejs.org/en/knowledge/errors/what-is-the-error-object/"&gt;Node.js documentation&lt;/a&gt; has a more in-depth explanation.&lt;/p&gt;

&lt;p&gt;We can create an error like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, so we gave it a string parameter which will be the error message. But what else does this &lt;code&gt;Error&lt;/code&gt; have? Since we’re using typescript, we can check its definition, which will lead us to a typescript &lt;code&gt;interface&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; are self-explanatory, while &lt;code&gt;stack&lt;/code&gt; contains the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; and a string describing the point in the code at which the &lt;code&gt;Error&lt;/code&gt; was instantiated. This stack is actually a series of stack frames (learn more about it &lt;a href="https://www.wikiwand.com/en/Call_stack"&gt;here&lt;/a&gt;). Each frame describes a call site within the code that lead to the error being generated. We can &lt;code&gt;console.log()&lt;/code&gt; the stack,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and see what it can tell us. Here’s an example of an error we get when passing a string as an argument to the &lt;code&gt;JSON.parse()&lt;/code&gt; function (which will fail, since &lt;code&gt;JSON.parse()&lt;/code&gt; only takes in JSON data in a string format):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZIin72X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ch0wazex0x7489t2gca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZIin72X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ch0wazex0x7489t2gca.png" alt="Image description" width="880" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we can see, this error is of type &lt;em&gt;SyntaxError,&lt;/em&gt; with the message “&lt;em&gt;Unexpected token A in JSON at position 0&lt;/em&gt;”. Underneath, we can see the stack frames. This is valuable information we as a developer can use to debug our code and figure out where the problem is - and fix it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-writing-custom-error-classes"&gt;
  &lt;/a&gt;
  5. Writing custom error classes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#51-custom-error-classes"&gt;
  &lt;/a&gt;
  5.1. Custom error classes
&lt;/h3&gt;

&lt;p&gt;As I mentioned before, we can use the built-in &lt;code&gt;Error&lt;/code&gt; object, as it gives us valuable information.&lt;/p&gt;

&lt;p&gt;However, when writing our API we often need to give our developers and consumers of the API a bit more information, so we can make their (and our) life easier.&lt;/p&gt;

&lt;p&gt;To do that, we can write a class that will extend the &lt;code&gt;Error&lt;/code&gt; class with a bit more data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BaseError&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureStackTrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we’re creating a &lt;code&gt;BaseError&lt;/code&gt; class that extends the &lt;code&gt;Error&lt;/code&gt; class. The object takes a &lt;code&gt;statusCode&lt;/code&gt; (HTTP status code we will return to the user) and a &lt;code&gt;message&lt;/code&gt; (error message, just like when creating Node’s built-in &lt;code&gt;Error&lt;/code&gt; object).&lt;/p&gt;

&lt;p&gt;Now we can use the &lt;code&gt;BaseError&lt;/code&gt; instead of Node’s &lt;code&gt;Error&lt;/code&gt; class to add the HTTP status code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import the class&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BaseError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extendedError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BaseError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use this &lt;code&gt;BaseError&lt;/code&gt; class as our base for all our custom errors.&lt;/p&gt;

&lt;p&gt;Now we can use the &lt;code&gt;BaseError&lt;/code&gt; class to extend it and create all our custom errors. These depend on our application needs. For example, if we’re going to have authentication endpoints in our API, we can extend the &lt;code&gt;BaseError&lt;/code&gt; class and create an &lt;code&gt;AuthenticationError&lt;/code&gt; class like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthenticationError&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;BaseError&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will use the same constructor as our &lt;code&gt;BaseError&lt;/code&gt;, but once we use it in our code it will make reading and debugging code much easier.&lt;/p&gt;

&lt;p&gt;Now that we know how to extend the &lt;code&gt;Error&lt;/code&gt; object, we can go a step further. &lt;/p&gt;

&lt;p&gt;A common error we might need is a “&lt;em&gt;not found&lt;/em&gt;” error. Let’s say we have an endpoint where the user specifies a product ID and we try to fetch it from a database. In case we get no results back for that ID, we want to tell the user that the product was not found.&lt;/p&gt;

&lt;p&gt;Since we’re probably going to use the same logic for more than just Products (for example Users, Carts, Locations), let’s make this error reusable. &lt;/p&gt;

&lt;p&gt;Let’s extend the &lt;code&gt;BaseError&lt;/code&gt; class but now, let’s make the status code default to 404 and put a “property” argument in the constructor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NotFoundError&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;BaseError&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Property '&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' not found.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propertyName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;propertyName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when using the &lt;code&gt;NotFoundError&lt;/code&gt; class, we can just give it the property name, and the object will construct the full message for us (statusCode will default to 404 as you can see from the code).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This is how we can use the error&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notFoundError&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NotFoundError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how it looks when it’s thrown:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6heal4jA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ria07evpc71zkotnofyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6heal4jA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ria07evpc71zkotnofyw.png" alt="Image description" width="880" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can create different errors that suit our needs. Some of the most common examples for an API would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ValidationError (errors you can use when handling incoming user data)&lt;/li&gt;
&lt;li&gt;DatabaseError (errors you can use to inform the user that there’s a problem with communicating with the database)&lt;/li&gt;
&lt;li&gt;AuthenticationError (error you can use to signal to the user there’s an authentication error)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#52-going-a-step-further"&gt;
  &lt;/a&gt;
  5.2. Going a step further
&lt;/h3&gt;

&lt;p&gt;Armed with this knowledge, you can go a step further. Depending on your needs, you can add an &lt;code&gt;errorCode&lt;/code&gt; to the &lt;code&gt;BaseError&lt;/code&gt; class, and then use it in some of your custom error classes to make the errors more readable to the consumer.&lt;/p&gt;

&lt;p&gt;For example, you can use the error codes in the &lt;code&gt;AuthenticationError&lt;/code&gt; to tell the consumer the type of auth error. &lt;code&gt;A01&lt;/code&gt; can mean the user is not verified, while &lt;code&gt;A02&lt;/code&gt; can mean that the reset password link has expired. &lt;/p&gt;

&lt;p&gt;Think about your application’s needs, and try to make it as simple as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-creating-and-catching-errors-in-controllers"&gt;
  &lt;/a&gt;
  5.3. Creating and catching errors in controllers
&lt;/h3&gt;

&lt;p&gt;Now let’s take a look at a sample controller (route function) in Express.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampleController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;successfull&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s try to use our custom error class &lt;code&gt;NotFoundError&lt;/code&gt;.  Let’s use the next() function to pass our custom error object to the next middleware function that will catch the error and take care of it (don’t worry about it, I’ll explain how to catch errors in a minute).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampleController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NotFoundError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Product&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;successfull&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will successfully stop the execution of this function and pass the error to the next middleware function. So, this is it?&lt;/p&gt;

&lt;p&gt;Not quite. We still need to handle errors we don’t handle through our custom errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-unhandled-mistakes"&gt;
  &lt;/a&gt;
  5.4. Unhandled mistakes
&lt;/h3&gt;

&lt;p&gt;For example, let’s say you write a piece of code that passes all syntax checks, but will throw an error at runtime. These mistakes can happen, and they will. How do we handle them?&lt;/p&gt;

&lt;p&gt;Let’s say you want to use the &lt;code&gt;JSON.parse()&lt;/code&gt; function. This function takes in JSON data formated as a string, but you give it a random string. Giving this promise-based function a string will cause it to throw an error! If not handled, it will throw an &lt;code&gt;UnhandledPromiseRejectionWarning&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vgiw6srN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr4h4e8br9eyex4scd6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vgiw6srN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kr4h4e8br9eyex4scd6u.png" alt="Image description" width="880" height="172"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, just wrap your code inside a try/catch block, and pass any errors down the middleware line using &lt;code&gt;next()&lt;/code&gt; (again, I will explain this soon)!&lt;/p&gt;

&lt;p&gt;And this really will work. This is not a bad practice, since all errors resulting from promise-based code will be caught inside the &lt;code&gt;.catch()&lt;/code&gt; block. This has a downside though, and it’s the fact that your controller files will be full of repeated try/catch blocks, and we don’t want to repeat ourselves. Luckily, we do have another ace up our sleeve.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#55-handleasync-wrapper"&gt;
  &lt;/a&gt;
  5.5. handleAsync wrapper
&lt;/h3&gt;

&lt;p&gt;Since we don’t want to write our try/catch blocks in every controller (route function), we can write a middleware function that does that once, and then apply it on every controller.&lt;/p&gt;

&lt;p&gt;Here’s how it looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asyncHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It may look complicated at first, but it’s just a middleware function that acts as a try/catch block with &lt;code&gt;next(err)&lt;/code&gt; inside the &lt;code&gt;catch()&lt;/code&gt;. Now, we can just wrap it around our controllers and that’s it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampleController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;asyncHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;successfull&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;something&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if the same error is thrown, we won’t get an &lt;code&gt;UnhandledPromiseRejectionWarning&lt;/code&gt;, instead, our error handling code will successfully respond and log the error (once we finish writing it, of course. Here’s how it will look like):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eu-Fz6-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kzxx0x2r7wmaztijurm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eu-Fz6-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kzxx0x2r7wmaztijurm.png" alt="Image description" width="587" height="276"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eG099fKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywqbdh0mmi87a1eu5r77.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eG099fKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywqbdh0mmi87a1eu5r77.png" alt="Image description" width="880" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-how-do-i-handle-errors"&gt;
  &lt;/a&gt;
  6. How do I handle errors?
&lt;/h2&gt;

&lt;p&gt;Okay, we learned how to create errors. Now what?&lt;/p&gt;

&lt;p&gt;Now we need to figure out how to actually &lt;em&gt;handle&lt;/em&gt; them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#61-express-middlewares"&gt;
  &lt;/a&gt;
  6.1. Express middlewares
&lt;/h3&gt;

&lt;p&gt;An express application is essentially a series of middleware function calls. A middleware function has access to the &lt;code&gt;request&lt;/code&gt; object, the &lt;code&gt;response&lt;/code&gt; object, and the &lt;code&gt;next&lt;/code&gt; middleware function.&lt;/p&gt;

&lt;p&gt;Express with route each incoming request through these middlewares, from the first down the chain, until the response is sent to the client. Each middleware function can either pass the request to the next middleware with the next() function, or it can respond to the client and resolve the request.&lt;/p&gt;

&lt;p&gt;Learn more about Express middleware &lt;a href="https://expressjs.com/en/guide/using-middleware.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#62-catching-errors-in-express"&gt;
  &lt;/a&gt;
  6.2. Catching errors in Express
&lt;/h3&gt;

&lt;p&gt;Express has a special type of middleware function called “Error-handling middleware”. These functions have an extra argument &lt;code&gt;err&lt;/code&gt;. Every time an error is passed in a &lt;code&gt;next()&lt;/code&gt; middleware function, Express skips all middleware functions and goes straight to the error-handling ones.&lt;/p&gt;

&lt;p&gt;Here’s an example on how to write one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with the error&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// pass it to the next function&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#63-what-to-do-with-errors"&gt;
  &lt;/a&gt;
  6.3. What to do with errors
&lt;/h3&gt;

&lt;p&gt;Now that we know how to catch errors, we have to do something with them. In APIs, there are generally two things you should do: respond to the client and log the error.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#631-errorreponse-middleware-responding-to-the-client"&gt;
  &lt;/a&gt;
  6.3.1. errorReponse middleware (responding to the client)
&lt;/h4&gt;

&lt;p&gt;Personally, when writing APIs I follow a consistent JSON response structure for successful and failed requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;successfull&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;some message if required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type of error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/path/on/which/it/happened&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;statusCode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Message that describes the situation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we’re going to write a middleware that handles the failure part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;customError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NodeError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SyntaxError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;customError&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UnhandledError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s examine the function. We first create the &lt;code&gt;customError&lt;/code&gt; boolean. We check the &lt;a href="http://error.constructor.name"&gt;&lt;code&gt;error.constructor.name&lt;/code&gt;&lt;/a&gt; property which tells us what type of error we’re dealing with. If &lt;code&gt;error.constructor.name&lt;/code&gt; is &lt;code&gt;NodeError&lt;/code&gt; (or some other error we didn’t personally create), we set the boolean to false, otherwise we set it to true. This way we can handle known and unknown errors differently.&lt;/p&gt;

&lt;p&gt;Next, we can respond to the client. We use the &lt;code&gt;res.status()&lt;/code&gt; function to set the HTTP status code and we use the &lt;code&gt;res.json()&lt;/code&gt; function to send the JSON data to the client. When writing the JSON data, we can use the &lt;code&gt;customError&lt;/code&gt; boolean to set certain properties. For instance, if the &lt;code&gt;customError&lt;/code&gt; boolean is false, we will set the error type to ‘UnhandledError’, telling the user we didn’t anticipate this situation, otherwise, we set it to &lt;code&gt;error.constructor.name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;statusCode&lt;/code&gt; property is only available in our custom error objects, we can just return 500 if it’s not available (meaning it’s an unhandled error).&lt;/p&gt;

&lt;p&gt;In the end, we use the &lt;code&gt;next()&lt;/code&gt; function to pass the error to the next middleware.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#632-errorlog-middleware-logging-the-error"&gt;
  &lt;/a&gt;
  6.3.2. errorLog middleware (logging the error)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;errorLogging&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;customError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NodeError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SyntaxError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Type: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NodeError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UnhandledError&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Path: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Status code: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function follows the same logic as the one before, with a small difference. Since this logging is intended for developers of the API, we also log the stack.&lt;/p&gt;

&lt;p&gt;As you can see, this will just &lt;code&gt;console.log()&lt;/code&gt; the error data to the system console. In most production APIs logging is a bit more advanced, logging to a file, or logging to an API. Since this part of the API building is very application-specific, I didn’t want to dive in too much. Now that you have the data, choose what approach works best for your application and implement your version of logging. If you’re deploying to a cloud-based deploying service like AWS, you will be able to download log files by just using the middleware function above (AWS saves all the &lt;code&gt;console.log()&lt;/code&gt;s).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-you-can-handle-errors-now"&gt;
  &lt;/a&gt;
  7. You can handle errors now.
&lt;/h2&gt;

&lt;p&gt;There you go! That should be enough to get you started with handling errors in a TypeScript + Node.js + Express.js API workflow. Note, there’s a lot of room for improvement here. This approach is not the best, nor the fastest, but is pretty straightforward and most importantly, &lt;strong&gt;forgiving&lt;/strong&gt;, and quick to iterate and improve as your API project progresses and demands more from your skills. These concepts are crucial and easy to get started with, and I hope you’ve enjoyed my article and learned something new.&lt;/p&gt;

&lt;p&gt;Here's a GitHub repository I made so you can get the full picture: (&lt;em&gt;coming soon&lt;/em&gt;) &lt;/p&gt;

&lt;p&gt;Think I could’ve done something better? Is something not clear? Write it down in the comments.&lt;/p&gt;

&lt;p&gt;Anyone else you think would benefit from this? Share it!&lt;/p&gt;

&lt;p&gt;Get in touch: &lt;a href="https://t.me/valentinkuharic"&gt;Telegram&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/valentin-kuharic-4468a81a4/"&gt;Linkedin&lt;/a&gt;, &lt;a href="https://www.valentinkuharic.com/"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you 🙂&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>node</category>
    </item>
    <item>
      <title>Create a Real-Time digital clock with node and socket.io..</title>
      <author>sadiul hakim</author>
      <pubDate>Tue, 21 Dec 2021 22:09:39 +0000</pubDate>
      <link>https://dev.to/suhakim/create-a-real-time-digital-clock-with-node-and-socketio-53dm</link>
      <guid>https://dev.to/suhakim/create-a-real-time-digital-clock-with-node-and-socketio-53dm</guid>
      <description>&lt;p&gt;At first setup your nodejs project.Then install &lt;code&gt;socket.io and express&lt;/code&gt;.&lt;br&gt;
This is going to be our folder structure...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EEZ7j-h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzmuyuyuzc6ra00vzus5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EEZ7j-h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kzmuyuyuzc6ra00vzus5.png" alt="folder structure" width="325" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;index.js&lt;/code&gt; our &lt;code&gt;nodejs+socket.io+express&lt;/code&gt; code is going to be ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expressServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expressServer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a user is connected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user disconnected.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;expressServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;server is listening.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in &lt;code&gt;index.html&lt;/code&gt; html code is going to be..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Socket&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"time"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/socket.io/socket.io.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now use should see your rea-time running clock in browser..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IHXQDnfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wha3av6wk694al77jpr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IHXQDnfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wha3av6wk694al77jpr8.png" alt="clock" width="325" height="184"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!❤&lt;/p&gt;

</description>
      <category>node</category>
      <category>socketio</category>
      <category>html</category>
      <category>clock</category>
    </item>
    <item>
      <title>A Beginners Introduction to Making API Requests (Unsplash API)</title>
      <author>Patrick</author>
      <pubDate>Tue, 21 Dec 2021 22:01:30 +0000</pubDate>
      <link>https://dev.to/mod5ied/a-beginners-introduction-to-making-api-requests-unsplash-api-2lfk</link>
      <guid>https://dev.to/mod5ied/a-beginners-introduction-to-making-api-requests-unsplash-api-2lfk</guid>
      <description>&lt;p&gt;So if you’ve followed upon the previous post where we discussed about Response, then this article about how to implement request and handle response with the &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt; API would prove very useful in understanding the two concepts. This article by the way assumes you have a basic knowledge of JavaScript and its core concepts such as: Functions and the JavaScript fetch API. But if you don’t know, just read on, I’ll try to explain the steps as much as possible&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ykzGKnv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjiav1nblw0dh3h3td1u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ykzGKnv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjiav1nblw0dh3h3td1u.jpg" alt="requests" width="880" height="587"&gt;&lt;/a&gt;&lt;br&gt;
Now, to make a request in JavaScript, we have a lot of options, we could do an XHR request, or we could use a package called &lt;strong&gt;&lt;em&gt;Axios&lt;/em&gt;&lt;/strong&gt; to make a Promise-based request to a web server if you working with a node-generated project. But for the sake of simplicity in this article, we would be using the JavaScript &lt;code&gt;fetch&lt;/code&gt; API. The Fetch API basically allows us to make HTTP requests to web servers. We could use Fetch on its own to make a request to our API and then tackle on the response using a &lt;code&gt;.then()&lt;/code&gt; function, or we could use a cleaner method of wrapping our Fetch in an &lt;code&gt;async&lt;/code&gt; function. Nevertheless, this article is not focused on teaching you how to write &lt;code&gt;async&lt;/code&gt; functions, rather how to use it to make our requests easier with Fetch.&lt;/p&gt;

&lt;p&gt;Having talked at length about making requests to an &lt;strong&gt;API&lt;/strong&gt; using Fetch, you may wonder what an API exactly is: In short an API (Application Programming Interface) is any standard interface or endpoint that facilitates connection to a web server. In this article we would be making a simple request to &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt; API. Unsplash is a web platform that acts as a repository of high quality free images, hence, their API enables us to make requests to their central server for an image, which would in turn make a response to us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Making a Request:&lt;/strong&gt;&lt;br&gt;
To get started, quickly scaffold a simple index.html project on your PC. It should look something similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1XWLZvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzogmg3pttxj5wto2whs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1XWLZvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzogmg3pttxj5wto2whs.png" alt="scaffold image" width="880" height="452"&gt;&lt;/a&gt;&lt;br&gt;
So at the script section of our project we are going to create two things: a fetch request without the async function as a wrapper and also a fetch request with the wrapper. This way we can get a knowledge of both worlds:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I_bGL3jF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w0b46yijpijrw2sc86a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I_bGL3jF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w0b46yijpijrw2sc86a.png" alt="request" width="880" height="530"&gt;&lt;/a&gt;&lt;br&gt;
Now looking closely, the &lt;em&gt;searchTerm&lt;/em&gt; and the &lt;em&gt;accessKeys&lt;/em&gt; are two variables that would help our API below them function optimally. &lt;strong&gt;Access Keys are private hence endeavor to keep them hidden!&lt;/strong&gt;&lt;br&gt;
In fetch without async wrapper above, we use the fetch to make a GET request to a server(Unsplash) via an API, this request is then tackled on using the &lt;code&gt;.then()&lt;/code&gt; methods. The first one parses the response gotten from the server (res), converting it to a more usable “JSON” format; This enables us to access the response the same way we would with a JavaScript objects. Also, the second &lt;code&gt;.then()&lt;/code&gt; method grabs the parsed data and outputs it on our browsers console.&lt;br&gt;
The &lt;code&gt;async&lt;/code&gt; function too also helps in making asynchronous requests, how so: a response is expected and upon getting the response the data is stored in a constant called – res. Next we await the response to be parsed into a &lt;strong&gt;JSON&lt;/strong&gt; format, after resolving it is passed to a constant – data.&lt;br&gt;
One thing to note is that these operations occur in a non-blocking manner, they execute sequentially such that the fetch must run/execute and get a response before the response is then parsed, after which we then output or use the parsed data. Such is the nature of asynchronous JavaScript.&lt;br&gt;
If you’ve followed this article properly, you should come to the understanding of not the syntax for making a GET request to an API using fetch, but rather of how making requests asynchronously works in JavaScript. Handling Responses and using them on our page is also vital to understand. &lt;em&gt;The part2&lt;/em&gt; of this article series would explain not only how to handle and use responses but also how to structure our requests to catch and handle errors too, should they occur. Happy Learning!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
