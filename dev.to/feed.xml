<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Scope in Modern JavaScript</title>
      <author>Nmurgor</author>
      <pubDate>Mon, 13 Dec 2021 14:31:56 +0000</pubDate>
      <link>https://dev.to/nmurgor/scope-in-modern-javascript-4f0l</link>
      <guid>https://dev.to/nmurgor/scope-in-modern-javascript-4f0l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Scope is the visibility of a variable within a &lt;code&gt;{ }&lt;/code&gt; delimited block of code and where it is initially declared. .&lt;/p&gt;

&lt;p&gt;Scope determines the accessibility (and visibility) of variables.&lt;/p&gt;

&lt;p&gt;Modern JavaScript has 3 types of scope:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Block scope&lt;/li&gt;
&lt;li&gt;Function scope&lt;/li&gt;
&lt;li&gt;Global scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short  variable(s) declared inside a block of code delimited by curly braces &lt;code&gt;{}&lt;/code&gt; are not visible outside that "scope" as from ES6.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-scope"&gt;
  &lt;/a&gt;
  Global Scope
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-var-endraw-keyword-and-global-scope-pollution"&gt;
  &lt;/a&gt;
  The &lt;code&gt;var&lt;/code&gt; keyword and global scope pollution
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword (used alot in pre-ES6 days) introduces a global scope when used to declare a variable.&lt;/p&gt;

&lt;p&gt;so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myDub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dubstep on bike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myDub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints 'dubstep on bike'&lt;/span&gt;
&lt;span class="c1"&gt;// myDub can be accessed and used here!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Variable &lt;code&gt;myDub&lt;/code&gt; "leaks" to the outerscope (global scope) and can be accessed outside the scope declared in. This pollutes the global scope since it is accessible outside, other parts of the program can still have access to read and modify the variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#block-scope"&gt;
  &lt;/a&gt;
  Block Scope
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-let-endraw-and-raw-const-endraw-keywords"&gt;
  &lt;/a&gt;
  &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords
&lt;/h3&gt;

&lt;p&gt;ES6 introduced &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords for declaring variables in a manner that does not introduce global scope.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt; keyword introduces a block scope variable. This means the variable can be accessed within the &lt;code&gt;{}&lt;/code&gt; they are declared in an nowhere else, kinda great right?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt; does something similar but useful when variable needs not to change within the block scope it was declared in, hence can not be reassigned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myDub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dubstep on bike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myDub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints "undefined"&lt;/span&gt;
&lt;span class="c1"&gt;// myDub can not be used here!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#function-scope"&gt;
  &lt;/a&gt;
  Function scope
&lt;/h2&gt;

&lt;p&gt;Function scope limits visibility/accessibility of a variable to the function&lt;br&gt;
expression declared in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myDubDetails&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dubVersion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v2020&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="c1"&gt;// dubVersion is visible inside this function body and not anywhere else&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#introduce-global-scope-using-either-raw-let-endraw-raw-const-endraw-"&gt;
  &lt;/a&gt;
  Introduce global Scope using either &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#intentionally-introducing-a-global-scope"&gt;
  &lt;/a&gt;
  Intentionally introducing a global scope
&lt;/h3&gt;

&lt;p&gt;A global scope can be used to introduced to create global variables. For example declaring the variables at top level of program makes the accessible anywhere inside the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myDub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dubstep on bike&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dubEdition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2020 Edition&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;printDubEdition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// myDub and dubEdition are accessible here and anywhere else!&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;myDub&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; edition: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dubEdition&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// prints dubstep on bike edition: 2020 Edition&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// myDub, dubEdition accessibe and modifiable anywhere&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, if a function modifies &lt;code&gt;myDub&lt;/code&gt;, somewhere down the program could &lt;code&gt;myDub&lt;/code&gt; end up with a different value than causing different behavior and bugs that are hard to hunt down and fix.&lt;/p&gt;




&lt;p&gt;Never introduce global variables anywhere inside your code unless you intentionally want to. &lt;code&gt;var&lt;/code&gt; is deprecated and you would rarely see it in modern code bases. Strive to use &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; whenever possible when working with modern JavaScript and beyond. It's ideal to introduce a variable close to where it's used.&lt;/p&gt;




&lt;p&gt;Follow me on twitter &lt;a href="https://twitter.com/nkmurgor"&gt;@nkmurgor&lt;/a&gt; where I tweet about interesting topics and Web Development.&lt;/p&gt;

&lt;p&gt;This article was orignally published at naftalimurgor.netlify.com&lt;/p&gt;

&lt;p&gt;Do you feel stuck with learning modern JavaScript? You may preorder  &lt;a href="https://naftalimurgor.gumroad.com/l/modern-javascript-primer-for-beginners"&gt;Modern JavaScript Primer for Beginners&lt;/a&gt; where I explain everything in a clear and straight-forward fashion with code examples and  project examples.&lt;/p&gt;

&lt;p&gt;Thanks for stopping by!&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Let vs Var in JS</title>
      <author>Manu Martinez</author>
      <pubDate>Mon, 13 Dec 2021 14:23:28 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/let-vs-var-in-js-1bhc</link>
      <guid>https://dev.to/whitehatdevv/let-vs-var-in-js-1bhc</guid>
      <description>&lt;p&gt;Yeah 🤓. Today we &lt;strong&gt;must&lt;/strong&gt; starting learning more about how really &lt;em&gt;JS&lt;/em&gt; works. It should be really strange but don't worry about that, I will try to make it really clear and understandable to make sure that you have just understood it 🥰&lt;/p&gt;

&lt;p&gt;First of all, we should &lt;strong&gt;understand&lt;/strong&gt; 🙀 what is exactly a variable, a &lt;em&gt;variable&lt;/em&gt; is a container when you can save whichever data you need, think in a &lt;strong&gt;container&lt;/strong&gt;, you can save a data inside it and make sure that it will be safe 🤓. The main point is that it will be safe until your program die, let's doing an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Manu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, we have just made a &lt;em&gt;brief&lt;/em&gt; example where we have saved up my name into a value 🤝, but &lt;strong&gt;STOP&lt;/strong&gt;, saving data inside &lt;code&gt;var&lt;/code&gt; is really dangerous, it hasn't had any scope, the data can change whenever you want, imagine that this data need to be always the same, it means isn't able to change it, then I introduce you &lt;code&gt;constants&lt;/code&gt;, let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Antonio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is exactly what a constant looks like, his value will never change, you can be sure of that. But then, 😵‍💫&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-different-between-raw-var-endraw-and-raw-const-endraw-"&gt;
  &lt;/a&gt;
  What are the different between &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;?.
&lt;/h2&gt;

&lt;p&gt;The const will never &lt;strong&gt;mutate&lt;/strong&gt; 😇. This is the key.&lt;/p&gt;

&lt;p&gt;Nevertheless, there are another way to get a &lt;code&gt;variable&lt;/code&gt; in JS, and it's the best approach to make your &lt;code&gt;vars&lt;/code&gt; more secure, it's a pleasure to meet you &lt;code&gt;let&lt;/code&gt;, let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myAge&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-exactly-that-"&gt;
  &lt;/a&gt;
  What is exactly that 🤓?
&lt;/h2&gt;

&lt;p&gt;Apparently it's the same meaning that &lt;code&gt;var&lt;/code&gt;, it's able to mutate and re-asign a new value, but &lt;code&gt;let&lt;/code&gt; understand what is exactly a scope, then if you declare it inside an if it won't never mutate 🤕, let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Manu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Antonio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code, we can mutate the value from the &lt;code&gt;var&lt;/code&gt; because &lt;code&gt;var&lt;/code&gt; doesn't understand why it shouldn't mutate, however look at the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Manu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Antonio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oh &lt;strong&gt;shit&lt;/strong&gt; 💩!!!, it gets an error because &lt;code&gt;let&lt;/code&gt; understand that you have just declared inside an &lt;code&gt;if&lt;/code&gt; scope, then why did you want to mutate this value? Here, you can see clearly which is the difference between &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;vars&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope you have just &lt;em&gt;understood&lt;/em&gt; ☺️ why using a var is a good practise when you are writing your code. If you have any question please don't hesitate to write a comment 😙, it will be a pleasure to help you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Accessing unique queryClients in Storybook-based  Jest tests</title>
      <author>Mike Schutte</author>
      <pubDate>Mon, 13 Dec 2021 14:22:28 +0000</pubDate>
      <link>https://dev.to/tmikeschu/accessing-unique-queryclients-in-storybook-based-jest-tests-4ibg</link>
      <guid>https://dev.to/tmikeschu/accessing-unique-queryclients-in-storybook-based-jest-tests-4ibg</guid>
      <description>&lt;p&gt;tl;dr&lt;/p&gt;

&lt;p&gt;I recently came up with a pattern for accessing unique &lt;a href="https://react-query.tanstack.com/"&gt;React Query&lt;/a&gt; clients on a per-render basis in &lt;a href="https://storybook.js.org"&gt;Storybook&lt;/a&gt; stories and tests (using &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; and &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt;). This enables the following kind of API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// composeStories from `@storybook/testing-react`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;composeStories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderStory&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FancyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// ...wait for query client state, assert state, etc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(If this sounds like a fun stack to you, &lt;a href="https://www.process.st/jobs/"&gt;we're hiring&lt;/a&gt; at &lt;a href="https://www.process.st/"&gt;Process Street&lt;/a&gt;!)&lt;/p&gt;

&lt;p&gt;Keep reading for more of the story, or just jump into the code in this template:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/168r5"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;I prefer to &lt;strong&gt;give each test its own QueryClientProvider&lt;/strong&gt; and create a &lt;strong&gt;new QueryClient for each test&lt;/strong&gt;. That way, &lt;em&gt;tests are completely isolated&lt;/em&gt; from each other. A different approach might be to clear the cache after each test, but I like to keep shared state between tests as minimal as possible. Otherwise, you might get &lt;strong&gt;unexpected and flaky results if you run your tests in parallel&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;- TkDodo on &lt;a href="https://tkdodo.eu/blog/testing-react-query"&gt;Testing React Query&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;...But what if I need access to the query client in my tests!?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At we use the lovely &lt;a href="https://github.com/storybookjs/testing-react"&gt;@storybook/testing-react&lt;/a&gt; package to use Storybook stories as our components under test. This is a great pattern because you can effectively automate the manual QA you do in the Storybook browser.&lt;/p&gt;

&lt;p&gt;Let's say you just added a toast alert for an API exception case. You finish your code changes and switch to your browser to test the toast in the story. It works! Now you can keep your user hat and use &lt;a href="https://testing-library.com/"&gt;Testing Library&lt;/a&gt; fundamentals to write a Jest spec matching what you did in the browser. &lt;/p&gt;

&lt;p&gt;An example (pseudo code):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// local util module to wrap test utils like React Testing &lt;/span&gt;
&lt;span class="c1"&gt;// Library (RTL) and @storybook/testing-react&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;stories&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.stories&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composeStories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FancyButton shows an alert for failures&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderStory&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/do stuff/i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/uh oh!/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yep. That's it. For the past few months our &lt;code&gt;*.spec.tsx&lt;/code&gt; files have been &lt;em&gt;very&lt;/em&gt; concise and declarative. This is because all the setup is in &lt;code&gt;*.stories.tsx&lt;/code&gt; files. Tests just become expressions of how I'm testing the stories, as a user, in the browser.&lt;/p&gt;

&lt;p&gt;Along with testing "integrated" components powered by React Query, we've been using a global &lt;code&gt;queryClient&lt;/code&gt; instance to leverage patterns like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitFor&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;toEq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can't follow TkDodo's advice very easily because if each story sets up it's own query client, how do we get access to it? We &lt;em&gt;could&lt;/em&gt; instantiate a new query client for each test, but that's the kind of boilerplate that makes testing feel terrible. &lt;strong&gt;My goal is always to make testing feel as good as possible (maybe even fun?!).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The code I &lt;em&gt;wish&lt;/em&gt; I had has the following characteristics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All stories and tests have a unique &lt;code&gt;queryClient&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;The unique &lt;code&gt;queryClient&lt;/code&gt; instance is easily accessible in each test.&lt;/li&gt;
&lt;li&gt;The pattern for accessing the &lt;code&gt;queryClient&lt;/code&gt; &lt;em&gt;feels&lt;/em&gt; like "The Testing Library Way".&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By #3, I refer to how Testing Library has normalized our eyes to the pattern of rendering something and destructuring results from that render call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;rerender&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FancyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would feel awfully nice to be able to do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FancyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right? It's quite clear that the &lt;code&gt;queryClient&lt;/code&gt; is unique to this particular invocation of &lt;code&gt;Test.render&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So the big question is, how do we implement this?&lt;/p&gt;

&lt;p&gt;I know right away that I won't instantiate the &lt;code&gt;queryClient&lt;/code&gt; nor the &lt;code&gt;QueryClientProvider&lt;/code&gt; at the individual story level for the same reasons I wouldn't instantiate it in each test: too much annoying boilerplate that makes writing stories less fun. So that's out. We need some kind of "do this for every test" lever.&lt;/p&gt;

&lt;p&gt;It's &lt;a href="https://testing-library.com/docs/react-testing-library/setup/#custom-render"&gt;recommended&lt;/a&gt; to have a custom &lt;code&gt;render&lt;/code&gt; function that wraps the component under test the same way your app is globally wrapped by some combination of providers. We'll borrow this notion of "all the providers" but skip the custom render wrapper and instead use it for a Storybook &lt;a href="https://storybook.js.org/docs/react/writing-stories/decorators"&gt;decorator&lt;/a&gt;. Since we'll want control of our &lt;code&gt;queryClient&lt;/code&gt;, we'll parameterize it for a root provider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./test/index.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RenderOptions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeQueryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AllTheProviders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeQueryClient&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll jump straight to decorating all stories with &lt;code&gt;AllTheProviders&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .storybook/main-decorator.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AllTheProviders&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MainDecorator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DecoratorFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AllTheProviders&lt;/span&gt; &lt;span class="na"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AllTheProviders&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that &lt;code&gt;options.args.queryClient&lt;/code&gt; is still nullable, but allows us to pass a query client to the component results of &lt;code&gt;composeStories&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we just export that decorator for Storybook's browser configuration in &lt;code&gt;preview.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .storybook/preview.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MainDecorator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./main-decorator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decorators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AllTheProviders&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have "decorated" stories for testing with &lt;code&gt;composeStories&lt;/code&gt; from &lt;code&gt;@storybook/testing-react&lt;/code&gt;, but we need a custom render function that adds &lt;code&gt;queryClient&lt;/code&gt; to the return value of &lt;code&gt;render&lt;/code&gt; from React Testing Library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderStory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReactElement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RenderOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;makeQueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clonedUi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cloneElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clonedUi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boom! We use &lt;code&gt;React.cloneElement&lt;/code&gt; to modify the already-invoked component function so we can pass a &lt;code&gt;queryClient&lt;/code&gt; from a different scope. If the &lt;code&gt;ui&lt;/code&gt; component was already called with a &lt;code&gt;queryClient&lt;/code&gt;, that will be reused thanks to our nullish coalescing operator &lt;code&gt;??&lt;/code&gt;. Now in our tests we can access the &lt;code&gt;queryClient&lt;/code&gt; as a &lt;em&gt;result&lt;/em&gt; of our &lt;code&gt;render&lt;/code&gt; call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderStory&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FancyButton&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do need to test implementation details (which, face it, sometimes you Just Do), you can do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeQueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invalidateQueriesSpy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;invalidateQueries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Success&lt;/span&gt; &lt;span class="na"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/do stuff/i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user-profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's where the &lt;code&gt;ui.props.queryClient&lt;/code&gt; check comes into play.&lt;/p&gt;

&lt;p&gt;And that's it! Check out the &lt;a href="https://codesandbox.io/s/react-query-storybook-based-testing-168r5"&gt;sandbox&lt;/a&gt; for more implementation details. Happy testing!&lt;/p&gt;

</description>
      <category>react</category>
      <category>storybook</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Do You Know Where Haskell Is Used?
</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 13 Dec 2021 14:08:35 +0000</pubDate>
      <link>https://dev.to/typeable/do-you-know-where-haskell-is-used-8ml</link>
      <guid>https://dev.to/typeable/do-you-know-where-haskell-is-used-8ml</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hi there! We’re getting on with our series of posts on "where all those strange programming languages of yours are used". &lt;a href="https://dev.to/typeable/do-you-know-where-lisp-is-used-nowadays-4pbn"&gt;Last time&lt;/a&gt; we told you about Lisp, and now we’re going to pick up the talk about functional languages and turn our eyes to Haskell.  It’s the main development language at Typeable and, surely, we couldn’t ignore this topic.&lt;/p&gt;

&lt;p&gt;Haskell is a general-purpose purely functional programming language. Its distinctive features include strict static typing, lazy evaluations, algebraic data types, and a serious theoretical background. This language is relatively young, it emerged in 1990 but has already produced a big impact on other languages and programming language theory on the whole.&lt;/p&gt;

&lt;p&gt;One of our recent posts described &lt;a href="https://dev.to/typeable/7-useful-tools-written-in-haskell-560d"&gt;useful Haskell-based utilities&lt;/a&gt;, but all of them are intended to be used by tech-savvy people. Today we’re going to give some examples of practical use in various industries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gl2Du9l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/industry.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gl2Du9l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/industry.jpg" alt="Industrial Haskell" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-and-how-is-haskell-used"&gt;
  &lt;/a&gt;
  Where and how is Haskell used?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Probably, the most googled and well-known example of Haskell application in major companies is the &lt;del&gt;Facebook&lt;/del&gt; &lt;strong&gt;Meta&lt;/strong&gt; spam filters. Messages containing spam, links to potential malware and phishing attacks are filtered by Sigma, the system that was rewritten in Haskell in 2015. The choice of language was based, among other things, on performance requirements, the need for pure functions and static typing, as well as the possibility of interactive development. The &lt;a href="https://github.com/facebook/Haxl"&gt;Haxl framework&lt;/a&gt; is used under the bonnet, which the company has open-sourced. You can find more details about the development process and technical aspects in the &lt;a href="https://engineering.fb.com/2015/06/26/security/fighting-spam-with-haskell/"&gt;company’s blog post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.eaton.com"&gt;&lt;strong&gt;Eaton&lt;/strong&gt;&lt;/a&gt; is a manufacturer of electrical and hydraulic equipment, as well as components for the aviation and automotive sectors. The company is using Haskell for day-to-day tasks such as scripting, hardware simulation, remote control tools for vehicle systems, etc. However, the most interesting thing is that they have entrusted hydraulic elements to the control of code written in Atom DSL, which is also implemented in Haskell. Atom is used to develop hard real-time systems and allows describing declaratively the system state transition rules. During compilation, the tasks are scheduled, which is why the resulting code has a deterministic execution time and constant memory consumption. This makes verification of the obtained code much easier and generally increases the system security, which is, of course, very important in this subject domain. You can read about all this in more detail on the &lt;a href="https://www.slideserve.com/kin/controlling-hybrid-vehicles-with-haskell"&gt;slides&lt;/a&gt; and in the &lt;a href="https://github.com/tomahawkins/atom"&gt;Atom repository&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now let’s jump to an entirely different sphere, that is, the world of music. The service called &lt;a href="https://chordify.net/"&gt;&lt;strong&gt;Chordify&lt;/strong&gt;&lt;/a&gt; allows converting music from YouTube, SoundCloud, etc. into chords so that you could learn to play your favorite songs. Haskell is mostly used during the tracing process; to this end, developers use the &lt;a href="https://github.com/haas/harmtrace"&gt;HarmTrace library&lt;/a&gt; that analyses the sequences of musical harmonics.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJLHFwrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/chord.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJLHFwrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/chord.jpg" alt="Use chords generated by Haskell library to play your favorite music" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.kaspersky.com/"&gt;&lt;strong&gt;Kaspersky Lab&lt;/strong&gt;&lt;/a&gt; is developing its own secure operating system &lt;a href="https://os.kaspersky.com/"&gt;KasperskyOS&lt;/a&gt; for IoT systems. Surely, this OS sets forth specific requirements for reliability and cyber security. The KasperskyOS team is actively using Haskell in the security system compiler and to create auxiliary development tools. The security configuration is described in a special DSL which is then compiled to C. As you can see, Haskell again demonstrates its usefulness when it comes to security.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some of in-house tools for automotive development in &lt;strong&gt;Tesla&lt;/strong&gt; are written in Haskell, which can be seen from the regularly published &lt;a href="https://www.tesla.com/careers/search/job/haskell-engineerdatatools-82891"&gt;vacancies&lt;/a&gt;. As far as I could understand from the vacancy descriptions, Haskell is used for the intermediate high-level representation of internal systems which is used to generate C code, documentation, and probably something more.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s3Hu-ajA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/tesla.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s3Hu-ajA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/tesla.jpeg" alt="Tesla's using Haskell too!" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://biocadglobal.com/"&gt;&lt;strong&gt;BIOCAD&lt;/strong&gt;&lt;/a&gt; is one of the major biotech companies based in Russia. The company carries out the complete cycle of medicine development all the way through to mass production and marketing. In the course of medicine development BIOCAD develops its own internal services for data processing and storage. The backend of these services is written in Haskell; it uses the graph database Neo4j, for which the company has developed and published the driver called &lt;a href="https://neo4j.com/blog/hasbolt-haskell-neo4j-bolt-driver/"&gt;Hasbolt&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Haskell has filled its niche in the development of &lt;strong&gt;blockchains and cryptocurrency&lt;/strong&gt;. It seems to me, the majority of Haskell-related vacancies I’ve ever seen were in this field. &lt;a href="https://medium.com/@cardano.foundation/why-cardano-chose-haskell-and-why-you-should-care-why-cardano-chose-haskell-and-why-you-should-f97052db2951"&gt;&lt;strong&gt;Cardano&lt;/strong&gt;&lt;/a&gt; should be mentioned as one of the most famous. The main cause of Haskell’s popularity in this sphere is security again. For more details see the &lt;a href="https://www.fpcomplete.com/blog/why-haskell-is-hot-for-cryptocurrencies/"&gt;post by FPComplete&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you find blockchains to be too dull, serious or "inhuman", I can tell you about &lt;a href="https://www.costarastrology.com/"&gt;&lt;strong&gt;Co-Star&lt;/strong&gt;&lt;/a&gt;, an astrological application for personalized horoscopes. Their backend is written in Haskell, and the developers explained their choice of language on the &lt;a href="https://www.costarastrology.com/why-haskell/"&gt;application website&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBFw1Sns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/astrology.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBFw1Sns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://typeable.io/images/haskell/astrology.jpeg" alt="Haskell has even something to do with astrology" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The backend of &lt;a href="https://wire.com/en/"&gt;&lt;strong&gt;Wire messenger&lt;/strong&gt;&lt;/a&gt;, with the server code publicly available in the &lt;a href="https://github.com/wireapp/wire-server"&gt;company’s repository&lt;/a&gt; and detailed documentation, also written in Haskell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.amnh.org/research/computational-sciences"&gt;&lt;strong&gt;The American Museum of Natural History&lt;/strong&gt;&lt;/a&gt; uses Haskell to study the phylogenetic graphs reflecting the evolutionary relationships between different species. The code of this project is also &lt;a href="https://github.com/amnh/pcg"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The list of examples for this post was compiled to demonstrate the variety of applications and, surely, many of them have remained offscreen. Here you can find more details on the companies and industries using Haskell:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/erkmos/haskell-companies"&gt;https://github.com/erkmos/haskell-companies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.haskell.org/Haskell_in_industry"&gt;https://wiki.haskell.org/Haskell_in_industry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here at Typeable we are using Haskell to develop projects for health care, tourism, fintech and many other sectors.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
      <category>haskell</category>
    </item>
    <item>
      <title>6 tips to avoid headaches in SCSS</title>
      <author>Charlie Joel</author>
      <pubDate>Mon, 13 Dec 2021 14:03:23 +0000</pubDate>
      <link>https://dev.to/charliejoel/6-tips-to-avoid-headaches-in-scss-jp0</link>
      <guid>https://dev.to/charliejoel/6-tips-to-avoid-headaches-in-scss-jp0</guid>
      <description>&lt;h2&gt;1. Never style elements&lt;/h2&gt;

&lt;p&gt;This is probably the biggest cause of headaches, at least in my experience. It seems innocent enough to style a button or a heading - they're buttons and headings, of course they should look like buttons and headings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// don't do this!
button {
  background-color: $color-btn;
  border-radius: 4px;
}

// nooooo!
h2 {
  font-size: 40px;
  font-weight: bold;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But!&lt;/p&gt;

&lt;p&gt;What if you have an element that should look like a link, but is really a button? Or if you have a button which needs to look different from all the others, such as with hamburger/pancake menus (there's a lot of debate on exactly which food item these look like, I think it's a pancake).&lt;/p&gt;

&lt;p&gt;What if your headings need a different size or style in a particular context?&lt;/p&gt;

&lt;p&gt;In all these cases, you would have to manually un-style these elements in their own class. And because element styling wins specificity wars over classes, you would often need to use the &lt;code&gt;!important&lt;/code&gt; rule - a huge no-no.&lt;/p&gt;

&lt;p&gt;Instead, assign classes to your elements. This is much more expressive than styling raw elements as you can state the intention of the element through it's class. You can also reuse the class on different elements, such as with buttons and links.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// better
.button {}
.heading-2 {}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// now you can reuse the classes!
&amp;lt;button class="button"&amp;gt;I am a button&amp;lt;/&amp;gt;
&amp;lt;a class="button"&amp;gt;I am link, but I look like a button&amp;lt;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to style elements for a Rich Text Editor or WYSIWYG section, or anywhere else you might not be able to add classes directly, you can do so by nesting. By putting a &lt;code&gt;.rte&lt;/code&gt; class on the container for these sections, you can scope your element styles to only target what you need to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// _rte.scss

.rte {
  &amp;amp; h2 {
    font-size: 28px;
    font-family: $font-headings;
    font-weight: bold;
    line-height: 1.3;
  }

  &amp;amp; p {
    font-size: 16px;
    margin-bottom: 16px;
  }

  &amp;amp; ul {
    // etc...
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// article template

&amp;lt;article class="rte"&amp;gt;
  &amp;lt;!-- content added by cms --&amp;gt;
&amp;lt;/article&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;2. Strive to never use !important&lt;/h2&gt;

&lt;p&gt;Your CSS should follow rules, and your classes shouldn't overstep each other. The more tangled up in the web of specificity and nested selectors your code becomes, the harder your codebase will be to work with. You'll end up adding &lt;code&gt;!important&lt;/code&gt; to properties that really have no need to be, and the more of these rules you have in the first place the more you'll have to use it again to override these rules. It's a downward spiral of manually forcing specificity, and it has rippling consequences for your CSS.&lt;/p&gt;

&lt;p&gt;There are a few ways to avoid using !important[]: For one, keeping your CSS structure as flat as possible can avoid any specificity wars that could crop up. Nesting CSS, and using complex selectors to target classes in specific situations, are things many developers do without realising they are lining up headaches and delays for themselves in future.&lt;/p&gt;

&lt;h2&gt;3. Use reset.css&lt;/h2&gt;

&lt;p&gt;Cross-browser consistency is one of the major problems surrounding not only CSS, but also JS and even accessibility with ARIA. In CSS, we can lay out a level playing field using a reset.css file. This will remove any browser-specified styles, such as margins, font sizes, button styles etc. so every browser will show the same thing.&lt;/p&gt;

&lt;p&gt;reset.css is also great because we don't need to waste time overwriting default styles: If your &amp;lt;button /&amp;gt; needs to have a transparent background and no borders, we would normally need to specify these in our own CSS. This way, we know any CSS we are writing is &lt;em&gt;additive&lt;/em&gt; instead of being &lt;em&gt;subtractive&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.button {
  // these properties wouldn't be necessary with reset.css
  background-color: transparent;
  border: none;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subtractive CSS, where we write styles to overwrite other styles, is generally a big no-no as it adds a level of confusion to what a class is doing. CSS classes, as with anything in programming, should be concise and to the point. If you find yourself writing subtractive or overwriting CSS, it may be worth tracing back to find what it's overwriting, and breaking down the original styles further using placeholders[link] or mixins[link].&lt;/p&gt;

&lt;p&gt;You could also use normalize.css. This will maintain a set of default page margins and other element-level styles across browsers. Personally, I prefer reset.css due to the fact that I want to control everything on a page without being interrupted by default styles - I don't want any page to have a margin on the body, for example, and writing code to undo these margins makes my code confusing. However, this might work better for you if you want some defaults.&lt;/p&gt;

&lt;h2&gt;4. Use variables to stay DRY&lt;/h2&gt;

&lt;p&gt;DRY, meaning Don't Repeat Yourself, is a key concept to understand for any kind of programming. In SCSS, the best place to start with this is in using variables, placeholders and mixins. The most common of these you'll be using is variables.&lt;/p&gt;

&lt;p&gt;Let's say you're looking at a design you need to create, and it has many colours across it. You can make your life much easier by assigning these colours to variables, perhaps with a kind of hierarchy which relates to the brand you're working with. There are lots of different ways to name variables, &lt;a href="https://css-tricks.com/what-do-you-name-color-variables/"&gt;as outlined in this CSS Tricks article.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another great use of SCSS variables is naming the top level of components. Here, I use &lt;code&gt;$module&lt;/code&gt; to store the name of the component and am then free to reuse it in other places, without needing to worry if I want to change the name of that component for some reason.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// we can change $module at any time in one place
$module: 'nav';

.#{$module} {
  &amp;amp;__dropdown-link {
    position: relative;
  }

  &amp;amp;__dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    display: hidden;
    
    .#{$module}__dropdown-link:hover &amp;amp; {
      display: block;
    }
  }&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// above css applied to html, for reference

&amp;lt;li class="nav__dropdown-link&amp;gt;
  &amp;lt;a&amp;gt;Link title&amp;lt;/a&amp;gt;
  &amp;lt;ul class="nav__dropdown"&amp;gt;
    ...
  &amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;5. Use placeholders&lt;/h2&gt;

&lt;p&gt;Placeholders are a great way to save time and file size with SCSS. They are essentially groups of properties which you can apply in a similar way to variables, and further build on top of them.&lt;/p&gt;

&lt;p&gt;I've used placeholders on &lt;a href="https://charliejoel.dev/"&gt;my own site&lt;/a&gt; to help generate a set of paragraph styles using the &lt;a href="https://grtcalculator.com/"&gt;Golden Ratio Typography Calculator&lt;/a&gt; (check it out!) which downsize appropriately at different resolutions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// these styles...

%t-1\/2 {
  font-size: 14px;
  line-height: 1.786;
}

%t-1 {
  font-size: 18px;
  line-height: 1.722;
}

%t-2 {
  font-size: 23px;
  line-height: 1.652;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// ...can be easily reused for different breakpoints
.t {
  &amp;amp;-1 {
    @extend %t-1\/2;
    @screen lg { // @screen is a tailwind directive - these are just desktop-first breakpoints!
      @extend %t-1;
    }
  }
  &amp;amp;-2 {
    @extend %t-1;
    @screen lg {
      @extend %t-2;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well as needing to write less code, we are also building a sensible design system with our CSS to ensure consistency between elements and enforce a single source of truth.&lt;/p&gt;

&lt;h2&gt;6. Don't set a max-width on &amp;lt;main&amp;gt;&lt;/h2&gt;

&lt;p&gt;More often than not, any content on a webpage has a certain &lt;code&gt;max-width&lt;/code&gt; which it cannot exceed. This helps with readability and keeps the page content flush all the way down.&lt;/p&gt;

&lt;p&gt;If you're a beginner, it may be instinctive to set this &lt;code&gt;max-width&lt;/code&gt; on an element that's quite high up in the hierarchy - the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element for instance, or even the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. On a page that has the same background color all the way down, this might be perfectly fine. Most webpages, however, are broken up by different sections that have a background color spanning the entire width of the page. &lt;/p&gt;

&lt;p&gt;The issue you will run into by setting a max-width on the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;, is that this background color will be limited by the max-width. Beyond this &lt;code&gt;max-width&lt;/code&gt;, the background color will be white (or whatever color the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; is set to).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cjJQq4tv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.charliejoel.dev/wp-content/uploads/2021/12/image-3-1024x449-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cjJQq4tv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.charliejoel.dev/wp-content/uploads/2021/12/image-3-1024x449-1.png" alt="" width="880" height="386"&gt;&lt;/a&gt;Ugly whitespace!&lt;/p&gt;

&lt;p&gt;You can avoid this by segregating this max-width effect into sections. To do so, you will need a parent element which takes on the background color you want, and a child element inside it that applies the max-width effect. Repeat for each section of the page, and you will end up with the desired effect.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// index.html

&amp;lt;main&amp;gt;
  &amp;lt;section class="section section--bg-primary"&amp;gt;
    &amp;lt;div class="section__inner"&amp;gt;
      &amp;lt;h2&amp;gt;Hello world!&amp;lt;/h2&amp;gt;
      &amp;lt;p class="paragraph"&amp;gt;
        Lorem ipsum dolor sit amet...
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/section&amp;gt;
  &amp;lt;section class="section section--bg-secondary"&amp;gt;
    &amp;lt;div class="section__inner"&amp;gt;
      &amp;lt;h2&amp;gt;Hello again world!&amp;lt;/h2&amp;gt;
      &amp;lt;p class="paragraph"&amp;gt;
        Lorem ipsum dolor sit amet...
      &amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/section&amp;gt;
&amp;lt;/main&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;// layout/_section.scss

.section {
  // use the parent element to add padding
  padding: 48px 16px;

  &amp;amp;--bg-primary {
    background-color: $color-primary;
    color: white;
  }
  
  &amp;amp;--bg-secondary {
    background-color: $color-secondary;
    color: black;
  }

  &amp;amp;__inner {
    // set the max-width on the inner element
    max-width: $max-w-page;
    margin: 0 auto;
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here it is - a layout with full-width background colors, padding and a max-width. You might want to set some of these values as variables or placeholders so you can repeat in other areas - for instance, a nav bar will often need the same effect, as will a footer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVJhLV9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.charliejoel.dev/wp-content/uploads/2021/12/image-4-1024x452.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVJhLV9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.charliejoel.dev/wp-content/uploads/2021/12/image-4-1024x452.png" alt="" width="880" height="388"&gt;&lt;/a&gt;Lovely full-width background color&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Web3 with Refine</title>
      <author>Melih Ekinci</author>
      <pubDate>Mon, 13 Dec 2021 13:41:40 +0000</pubDate>
      <link>https://dev.to/pankod/web3-with-refine-4oa7</link>
      <guid>https://dev.to/pankod/web3-with-refine-4oa7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-web3"&gt;
  &lt;/a&gt;
  What is Web3
&lt;/h2&gt;

&lt;p&gt;Web 3.0 eliminates intermediates. There’s no centralized database that stores the application state.&lt;/p&gt;

&lt;p&gt;In web3, developers don't usually build and deploy applications that run on a single server or that store their data in a single database.&lt;br&gt;
Instead of, Web3 applications run on blockchains, decentralized networks of many peer to peer nodes&lt;/p&gt;

&lt;p&gt;Features provided by Web3:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verifiable&lt;/li&gt;
&lt;li&gt;Self-governing&lt;/li&gt;
&lt;li&gt;Permissionless&lt;/li&gt;
&lt;li&gt;Stateful&lt;/li&gt;
&lt;li&gt;Trustless&lt;/li&gt;
&lt;li&gt;Native built-in payments&lt;/li&gt;
&lt;li&gt;Anonymity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-dappsdapps"&gt;
  &lt;/a&gt;
  What is dApps(Dapps)?
&lt;/h2&gt;

&lt;p&gt;Dapps is short for "Decentralized Applications" and refers to any application that is decentralized in nature, built on a blockchain, and may use tokens for transactions.&lt;/p&gt;

&lt;p&gt;Dapps is just like any other software application you use. It could be a website or an app on your phone. What makes a Dapp different than a traditional app is that it's built on a decentralized network, like Ethereum.&lt;/p&gt;

&lt;p&gt;Many applications on the logic of dApp have been developed and continue to be developed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ethereum.org/en/dapps/"&gt;Here you can browse some dapps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have developed a simple app where you can login with ethereum and send ethereum over the network using Metamask Wallet and &lt;strong&gt;refine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This application allows you to login with your web3 wallet and you can also send ethereum over the ethereum network.&lt;/p&gt;

&lt;p&gt;This example is simple intro to dApps development  built with web3 and &lt;strong&gt;refine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4CUtg0_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipsay1k4rfk4o4a8d94o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CUtg0_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipsay1k4rfk4o4a8d94o.gif" alt="Login" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f032ZTsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5s61v7squ5fbfy7pxjv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f032ZTsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5s61v7squ5fbfy7pxjv.gif" alt="Overview" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can develop many fast and functional dApps using web3 and &lt;strong&gt;refine&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pankod/refine/tree/master/examples/web3/ethereumLogin"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://refine.dev/docs/guides-and-concepts/web3/ethereum-signin/"&gt;Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/signin-with-ethereum-umho3"&gt;Live Code Example&lt;/a&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>dapps</category>
      <category>refine</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How To Make A Extension For Edge or Chrome</title>
      <author>Grant McNamara</author>
      <pubDate>Mon, 13 Dec 2021 13:38:37 +0000</pubDate>
      <link>https://dev.to/grantrocks/how-to-make-a-extension-for-edge-or-chrome-35ok</link>
      <guid>https://dev.to/grantrocks/how-to-make-a-extension-for-edge-or-chrome-35ok</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LY59qJMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ya12bhvuf5cuse95nsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LY59qJMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ya12bhvuf5cuse95nsx.png" alt="Image description" width="575" height="228"&gt;&lt;/a&gt;&lt;br&gt;
Ever install a extension on your web browser. A ad blocker, a game, a tool? Its almost guaranteed that you have installed a extension for your web browser sometime in your life. Extensions are a great way to add useful features to your browser or personalize it. Sometimes you can't find what you need and you would like to make one yourself but you don't know how. That's what we are going to be going over.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-should-you-make-one"&gt;
  &lt;/a&gt;
  Why Should You Make One?
&lt;/h2&gt;

&lt;p&gt;Making a extension is a great idea as it can grow to be a great source of income. Extensions also can act as previous work proof that you can use to get into a good college or job that you would like. While making a extension you may learn a new programming language and it may be something to do on the side if you dont have something already. And to be honest, it's pretty easy to do.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Before you make a extension you need to have a IDE or some file editor. That will be used to edit the files for your extension. You will also need a idea of what to do with your extension such as making it a game or weather app. Once you are ready to start making it read the following.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#manifestjson"&gt;
  &lt;/a&gt;
  Manifest.json
&lt;/h2&gt;

&lt;p&gt;Before you start to make your extension you need a file to specify details about your extension. In the manifest file you need to declare the name of your app, the description, the version, needed permissions(if used), needed external sources(if used), etc. Making the manifest file is the easiest step of making your extension. The format for your manifest.json file is below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "Current Weather",
  "description": "Get the current weather from this small extension. This extension needs your location to get the weather for your area.",
  "version": "1.0",
  "manifest_version": 3,
  "action": {
    "default_popup": "index.html",
    "default_icon": "cwlogo.png"
  },
  "options_ui": {
    "page": "settings.html"
  },
  "permissions": [
          "geolocation",
          "notifications"
  ],
  "host_permissions": [
  "https://api.openweathermap.org/",
  "https://translate.google.com/"
  ],
  "commands": {
    "_execute_action": {
      "suggested_key": {
        "default": "Ctrl+Shift+F",
        "mac": "MacCtrl+Shift+F"
      },
      "description": "Opens index.html"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the manifest.json file for one of my extensions Current Weather which you can download on &lt;a href="https://microsoftedge.microsoft.com/addons/detail/current-weather/idnopmbgjahabdlbihbjeinagcldodbg"&gt;Edge here&lt;/a&gt;. As you can see, it uses the external source api.openweathermap.org and it uses services such as geolocation. It also has a settings page, which is not needed. &lt;/p&gt;

&lt;p&gt;Looking at the manifest.json you can see that it has a icon and a action page. The icon is the small little picture that you see when you have a extension installed. The action page is the little page that pops up when you click on the extension. Those are the pages that are the actual extension itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-ui"&gt;
  &lt;/a&gt;
  Making The UI
&lt;/h2&gt;

&lt;p&gt;This step is pretty easy. The popup page uses HTML and HTML can use other sources. My extension uses HTML and the HTML uses javascript. If you are unfamiliar with HTML than view my &lt;a href="https://dev.to/grantrocks/how-to-start-a-website-from-scratch-using-html-2pj7"&gt;other article about HTML.&lt;/a&gt; You first need to make the layout for a HTML page and then you need to make sure that the name of the HTML file is in the manifest.json file so that way it works when you click on it. The layout for my HTML page is below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width"&amp;gt;
    &amp;lt;title&amp;gt;Current Weather&amp;lt;/title&amp;gt;
    &amp;lt;link href="style.css" rel="stylesheet" type="text/css" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id="body"&amp;gt;
    &amp;lt;table&amp;gt;
    &amp;lt;thead&amp;gt;
      &amp;lt;th&amp;gt;Tempature&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Humidity&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Description&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Icon&amp;lt;/th&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody&amp;gt;
      &amp;lt;tr&amp;gt;
        &amp;lt;td id="temp"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="humidity"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="description"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="icon" style="background-color: gray;"&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
    &amp;lt;/tbody&amp;gt;  
    &amp;lt;/table&amp;gt;
    &amp;lt;table&amp;gt;
      &amp;lt;thead&amp;gt;
        &amp;lt;th&amp;gt;Min Temp&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Max Temp&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Windspeed | Degree&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;Pressure&amp;lt;/th&amp;gt;
      &amp;lt;/thead&amp;gt;
      &amp;lt;tbody&amp;gt;
        &amp;lt;tr&amp;gt;
        &amp;lt;td id="mintemp"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="maxtemp"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;td id="wspdg"&amp;gt;&amp;lt;/td&amp;gt;  
        &amp;lt;td id="pressure"&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;center&amp;gt;&amp;lt;div id="result" style="font-size: 20px;"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div id="google_translate_element"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/center&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see I use a javascript file to get the weather from api.openweathermap.org. The HTML page that I have set up has a table for the weather data. The javascript file uses the resources from the HTML page. Which brings us to the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-backend"&gt;
  &lt;/a&gt;
  The Backend
&lt;/h2&gt;

&lt;p&gt;Now that you got a nice and fancy UI you now need to make a less appealing file for the fancy UI. Make a file named script.js and make sure that it is in the same directory with the rest of the files. Now make your js file the way you want your app to work and then you should link it to your HTML file and you should be good to go with the html. The backend for my extension is below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; function googleTranslateElementInit() {
  new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL}, 'google_translate_element');
}
  navigator.geolocation.getCurrentPosition(function(position) {

        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;
        const altitude = position.coords.altitude;
        const accuracy = position.coords.accuracy;
        const altitudeAccuracy = position.coords.altitudeAccuracy;
        const heading = position.coords.height;
        const speed = position.coords.speed;
        const timestamp = position.timestamp;

        // work with this information however you'd like!
    });
   function locationSuccess(position) {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;
        const altitude = position.coords.altitude;
        const accuracy = position.coords.accuracy;
        const altitudeAccuracy = position.coords.altitudeAccuracy;
        const heading = position.coords.height;
        const speed = position.coords.speed;
        const timestamp = position.timestamp;
        getweather(latitude, longitude);
        // work with this information however you'd like!
    }

    function locationError(error) {
        const code = error.code;
        const message = error.message;
        // read the code and message and decide how you want to handle this!
        document.getElementById('result').innerHTML = message;
    }

    navigator.geolocation.getCurrentPosition(locationSuccess, locationError);
function getweather(latitude, longitude){
const key = "6ea81243e055f1218d43cb862f1da44c";
const link = "https://api.openweathermap.org/data/2.5/weather?lat="+latitude+"&amp;amp;lon="+longitude+"&amp;amp;units=imperial&amp;amp;apikey="+key+"&amp;amp;lang="+localStorage.lang;
let request = new XMLHttpRequest();
request.open('GET', link);
request.responseType = 'json';
request.send();
request.onload = function() {
  const data = request.response;
  showweather(data)
}};
function showweather(obj) {
  var date = new Date(obj.dt * 1000);
// Hours part from the timestamp
var hours = date.getHours();
// Minutes part from the timestamp
var minutes = "0" + date.getMinutes();
// Seconds part from the timestamp
var seconds = "0" + date.getSeconds();
var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);

  const weather = obj['weather'];
  var mt = obj.main.temp_min;
  for (let i = 0; i &amp;lt; weather.length; i++) {
    var icon = weather[i].icon;
    document.getElementById("temp").innerHTML = obj.main.temp+"&amp;amp;deg;F";
    document.getElementById("humidity").innerHTML = obj.main.humidity+"%";
    document.getElementById("description").innerHTML = weather[i].description;
    iconshow(icon,mt)
    document.getElementById("mintemp").innerHTML = mt+"&amp;amp;deg;F";
    document.getElementById("maxtemp").innerHTML = obj.main.temp_max+"&amp;amp;deg;F";
    document.getElementById("wspdg").innerHTML = obj.wind.speed+"MPH | "+obj.wind.deg+"&amp;amp;deg;";
    document.getElementById("pressure").innerHTML = obj.main.pressure;
  }
};
function iconshow(icon, mt) {
            var img = new Image();
            img.src = 
'https://openweathermap.org/img/wn/'+icon+'@2x.png';
            img.style.width = "20px";
            img.style.height = "20px";
            document.getElementById('icon').appendChild(img);
            if (mt&amp;gt;=85){
              document.getElementById("result").innerHTML="Its gonna be hot today. Bring some water wherever you go outside.";
              chrome.notifications.create('hotoutside', {
              type: 'basic',
              iconUrl: 'images/1.png',
              title: 'Test Message',
              message: 'You are awesome!',
              priority: 2
              });
            }else if(mt&amp;lt;=50){
              document.getElementById("result").innerHTML="Its going to be chilly today. Wear some warm clothes.";
            }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It uses the service geolocation which is a permission, to get the users location to get the weather in their area. Then using the html file it displays it in the table for the user to read. If you would like to make a settings page for your extension too than keep reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-settings-page"&gt;
  &lt;/a&gt;
  Making A Settings Page
&lt;/h2&gt;

&lt;p&gt;Want your user to have some options? Make another HTML page and js file and declare it in your manifest. You can give the user the option to change colors, language, etc. You can see mine below.&lt;br&gt;
HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width"&amp;gt;
    &amp;lt;title&amp;gt;Current Weather&amp;lt;/title&amp;gt;
    &amp;lt;link href="style.css" rel="stylesheet" type="text/css" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id="body"&amp;gt;
      &amp;lt;center&amp;gt;
        &amp;lt;h1&amp;gt;Settings&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;View and set the settings for the current weather app.&amp;lt;/p&amp;gt;
        &amp;lt;h2&amp;gt;Language&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;Set the extensions language to your preferance.&amp;lt;/p&amp;gt;
        &amp;lt;select name="language" id="language"&amp;gt;
          &amp;lt;option value="en" selected&amp;gt;English&amp;lt;/option&amp;gt;
          &amp;lt;option value="de"&amp;gt;German&amp;lt;/option&amp;gt;
          &amp;lt;option value="sp"&amp;gt;Spanish&amp;lt;/option&amp;gt;
          &amp;lt;option value="ja"&amp;gt;Japanese&amp;lt;/option&amp;gt;
          &amp;lt;option value="fr"&amp;gt;French&amp;lt;/option&amp;gt;
        &amp;lt;/select&amp;gt;
        &amp;lt;div id="currentlang"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;button id="submitlang"&amp;gt;Set Language&amp;lt;/button&amp;gt;
        &amp;lt;h2&amp;gt;Privacy&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;I will never share/sell you location or information to anybody because it is your information and only you shall decide what you would like to do with your privacy. If you decide that you do not want the extension to see your location anymore go to the three dots in the upper right corner, click more tools, click on details for the extension, disable location access. Please note that the extension does not work without location access.&amp;lt;/p&amp;gt;
        &amp;lt;h3&amp;gt;Help/Support&amp;lt;/h3&amp;gt;
        &amp;lt;p&amp;gt;If you are having problems with the extension then please go to the following site as it contains a forum with help and support. &amp;lt;a href="https://github.com/Grantrocks/Current-Weather/discussions" target="_blank"&amp;gt;https://github.com/Grantrocks/Current-Weather/discussions&amp;lt;/a&amp;gt;. That is the github discussion page contatining the files for the project and help and support for anyone that needs it.&amp;lt;/p&amp;gt;
      &amp;lt;/center&amp;gt;
      &amp;lt;div id="google_translate_element"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script type="text/javascript" src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="settings.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function googleTranslateElementInit() {
  new google.translate.TranslateElement({pageLanguage: 'en', layout: google.translate.TranslateElement.InlineLayout.HORIZONTAL}, 'google_translate_element');
}
document.getElementById("submitlang").addEventListener("click", function(){
  var sellang = document.getElementById("language").value;
  var curl = document.getElementById("currentlang");
  if (sellang=="en"){
    curl.innerHTML = "English";
    localStorage.lang = "en";
  }else if(sellang=="de"){
    curl.innerHTML = "German";
    localStorage.lang = "de";
  }else if(sellang=="sp"){
    curl.innerHTML = "Spanish";
  }else if(sellang=="ja"){
    curl.innerHTML="Japanese";
  }else if(sellang=="fr"){
    curl.innerHTML="French";
  }else{
    curl.innerHTML="None Selected!";
  }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#your-done"&gt;
  &lt;/a&gt;
  Your Done
&lt;/h2&gt;

&lt;p&gt;Now that your extension is made you can publish it where you would like to publish it. Google's chrome web store needs a $5 fee, Microsoft edge is free to publish and so is firefox but if you publish here you will need to change the manifest.json a little bit as it uses version 2.&lt;br&gt;
Donations are nice.&lt;/p&gt;

&lt;p&gt;Can't load widget &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Criar uma Exception personalizada no Magento 2</title>
      <author>Lucas Teixeira dos Santos Santana</author>
      <pubDate>Mon, 13 Dec 2021 13:26:22 +0000</pubDate>
      <link>https://dev.to/santanaluc94/criar-uma-exception-personalizada-no-magento-2-20fo</link>
      <guid>https://dev.to/santanaluc94/criar-uma-exception-personalizada-no-magento-2-20fo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contextualizando"&gt;
  &lt;/a&gt;
  Contextualizando
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#o-que-%C3%A9-uma-exception"&gt;
  &lt;/a&gt;
  O que é uma Exception?
&lt;/h3&gt;

&lt;p&gt;É um mecanismo que sinaliza um evento excepcional, significa algo que não é comum. A exceção ocorre quando acontece algo fora da regra de negócio prevista.&lt;br&gt;
O tratamento de exceção é o mecanismo responsável pelo tratamento da ocorrência de condições que alteram o fluxo normal da execução de programas de computadores.&lt;br&gt;
Exceção são usadas para fazer tratamentos no código, ou seja, podemos fazer um controle de exceção em determinada parte de um código fonte para saber qual foi o erro que levou ao problema.&lt;br&gt;
Uma exceção pode ser lançada através da palavra reservada &lt;code&gt;throw&lt;/code&gt; quando o trecho de código estiver envolvido na palavra reservada &lt;code&gt;try&lt;/code&gt;, e capturada através da palavra reservada &lt;code&gt;catch&lt;/code&gt;. Cada bloco &lt;code&gt;try&lt;/code&gt; precisa ter ao menos um &lt;code&gt;catch&lt;/code&gt; ou &lt;code&gt;finally&lt;/code&gt; correspondente.&lt;br&gt;
Uma classe de exceção definida pelo usuário pode ser criada herdando a classe &lt;code&gt;\Exception&lt;/code&gt;, consequentemente, o objeto lançado precisa ser uma instância da classe &lt;code&gt;\Exception&lt;/code&gt; ou uma subclasse de &lt;code&gt;\Exception&lt;/code&gt;. Tentar lançar um objeto sem essa ascendência resultará em um erro fatal. Para saber mais, consulte a &lt;a href="https://www.php.net/manual/pt_BR/language.exceptions.php"&gt;documentação oficial do PHP sobre as exceptions&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#c%C3%B3digo-para-criar-uma-exception"&gt;
  &lt;/a&gt;
  Código para criar uma Exception
&lt;/h2&gt;

&lt;p&gt;Este tipo de arquivo deve seguir a estruturas de pastas &lt;code&gt;\{Vendor}\{Module}\Exception\{Name}Exception.php&lt;/code&gt;. Cada arquivo de &lt;em&gt;Exception&lt;/em&gt; deve estender a classe &lt;code&gt;\Magento\Framework\Exception\LocalizedException&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Exception\LocalizedException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Phrase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;LocalizedException&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;Phrase&lt;/span&gt; &lt;span class="nv"&gt;$phrase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;$cause&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="nv"&gt;$code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$phrase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$cause&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A classe &lt;code&gt;\Magento\Framework\Exception\LocalizedException&lt;/code&gt; estende da classe &lt;code&gt;\Exception&lt;/code&gt; do PHP e é estendida por um conjunto de classes que o próprio Magento já disponibiliza para o uso, estas classes de excessão estão disponíveis no caminho &lt;code&gt;\Magento\Framework\Exception&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disparando-uma-excess%C3%A3o"&gt;
  &lt;/a&gt;
  Disparando uma excessão
&lt;/h3&gt;

&lt;p&gt;Ao disparar uma excessão, o código será interrompido e será "capturado" pelo primeiro &lt;code&gt;catch&lt;/code&gt; que envolverá o código (podendo ser de outra função ou método. Para disparar uma excessão personalizada no Magento, é igual a lançar qualquer outra excessão.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nf"&gt;__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{Message exception}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#finaliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Finalização
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Valores entre chaves (&lt;code&gt;{test}&lt;/code&gt;) devem ser alterados na implementação do código.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#habilitando-as-altera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Habilitando as alterações
&lt;/h3&gt;

&lt;p&gt;Execute o comando PHP para limpar todos os caches de armazenamento em cache do processos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php bin/magento cache:clean
php bin/magento flush
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#diret%C3%B3rios-e-arquivos"&gt;
  &lt;/a&gt;
  Diretórios e Arquivos
&lt;/h3&gt;

&lt;p&gt;Segue a a lista de diretórios e arquivos que devem ser criados.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- app/
  - code/
    - {Vendor}/
      - {Module}/
        - etc/
          - module.xml
        - Exception/
          - {Name}Exception.php
        - registration.php
        - composer.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>magento2</category>
      <category>tutorial</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Understanding Docker in a visual way (in 🎥 video): part 3 – Build images</title>
      <author>Aurélie Vache</author>
      <pubDate>Mon, 13 Dec 2021 13:22:34 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-docker-in-a-visual-way-in-video-part-2-build-images-4n9f</link>
      <guid>https://dev.to/aurelievache/understanding-docker-in-a-visual-way-in-video-part-2-build-images-4n9f</guid>
      <description>&lt;p&gt;Understanding Docker can be difficult or time-consuming. In order to spread knowledge about Cloud technologies I started to create sketchnotes about Docker, then I've auto-published a book and since now I've started a new serie of video! :-)&lt;/p&gt;

&lt;p&gt;I imagined a serie of short videos with a mix of sketchnotes and speech.&lt;/p&gt;

&lt;p&gt;I think it could be a good way, more visual, with audio &amp;amp; video to explain Docker (and others technologies).&lt;/p&gt;

&lt;p&gt;The second episode is focused on another very important Docker object: Build images.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3IFixKo9b5I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The video is in French BUT I done the subtitles in english (and french too).&lt;/p&gt;

&lt;p&gt;If you liked the video and are interested to watch another ones, please give me some feedbacks (and you can also subscribe to &lt;a href="https://www.youtube.com/c/AurelieVache"&gt;my Youtube channel&lt;/a&gt;, if you want to ❤️).&lt;/p&gt;

&lt;p&gt;I can also give you, in an article, the full english transcript and sketchnotes in high quality, about this video, if you are interested.&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Docker (and new ones!) to make a "book" of 120 pages: &lt;a href="https://aurelievache.gumroad.com/l/understanding-docker-visual-way"&gt;"Understanding Docker in a visual way"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like theses sketchnotes, you can follow me, I will publish others sketchs shortly :-).&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>containers</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hosting and Scaling Applications</title>
      <author>Mike Levan</author>
      <pubDate>Mon, 13 Dec 2021 13:21:42 +0000</pubDate>
      <link>https://dev.to/thenjdevopsguy/hosting-and-scaling-applications-3287</link>
      <guid>https://dev.to/thenjdevopsguy/hosting-and-scaling-applications-3287</guid>
      <description>&lt;p&gt;In last week's blog post, which you can find &lt;a href="https://dev.to/thenjdevopsguy/hosting-and-scaling-systems-1nj8"&gt;here&lt;/a&gt;, you learned about hosting and scaling systems. Although you learned a little bit about why you'd want to scale an application, there wasn't a ton of information around it. In this blog post, that'll change.&lt;/p&gt;

&lt;p&gt;Figuring out where to host an app and how to properly scale it based on where it's hosted is crucial, especially since you can't tell the future, so you have no idea how large the application will grow and many other unknown factors. In this blog post, you'll learn about how to scale, host, and think about application reliability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apps-change-over-time"&gt;
  &lt;/a&gt;
  Apps Change Over Time
&lt;/h2&gt;

&lt;p&gt;Many organizations find themselves in a tech-debt-driven scenario where they do a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get an MVP of an application ready&lt;/li&gt;
&lt;li&gt;Build on top of that app&lt;/li&gt;
&lt;li&gt;Put duct tape around it to make it work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And poof! Just like that, you have an application that when it needs to change over time, it can't. &lt;/p&gt;

&lt;p&gt;The goal for any application is to understand that it will change over time. It will need to run in one place and then run in another place because systems and environments change. It will need to have the ability to take on more load as the user base grows. It'll need the ability to fail over and scale.&lt;/p&gt;

&lt;p&gt;When thinking about building an application, or managing it, the question must be &lt;em&gt;What happens if everything changes? Will the app still run?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is, of course, a very vague question. However, it must be because you never know. Do you think that applications running 10 years ago knew that the option for serverless would be available? Maybe not. However, if an application is built properly, it can run anywhere, so not knowing about serverless wouldn't have mattered. &lt;/p&gt;

&lt;p&gt;Build applications with the mindset of &lt;em&gt;this thing will change&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#containers-vms-serverless"&gt;
  &lt;/a&gt;
  Containers? VMs? Serverless?
&lt;/h2&gt;

&lt;p&gt;Where to host an application has many variables, but the primary ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do we have enough people to manage the scalability and maintenance?&lt;/li&gt;
&lt;li&gt;Do we have a data center or a rack somewhere to host servers?&lt;/li&gt;
&lt;li&gt;Do we want the overhead of hosting on VMs or bare metal?&lt;/li&gt;
&lt;li&gt;Do we have knowledgeable engineers that understand the latest systems (containers, serverless, etc.)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regardless of the size of the organization, these questions will always make sense. Let's go over two different scenarios.&lt;/p&gt;

&lt;p&gt;The first scenario is the startup. They have just enough money in the bank to get by, and everyone is working 18 hours per day, which means they probably don't have the funds to hire a cloud engineer or systems engineer to scale and manage a system that an application is running on. Because of that, serverless would probably make sense. Take the code, throw it up into AWS Lambda, and it runs. No server maintenance. No operating system maintenance. Just maintenance of the code. Of course, there are pros and cons, but it'll depend on the environment.&lt;/p&gt;

&lt;p&gt;The second scenario is the organization that's been around for a while and they have the money in the bank/budget to hire engineers. At that point, maybe they'll want to utilize servers on-prem and take the time to learn the cloud, containers, and serverless. Maybe they'll set up AWS Outposts or Azure Stack to get a feel for the cloud, run their apps in a hybrid scenario, and eventually, move the workload to containers or serverless. &lt;/p&gt;

&lt;p&gt;There's not a once-size-fits-all model here, which is one of the reasons that there are so many different solutions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-and-reliability-testing"&gt;
  &lt;/a&gt;
  Performance and Reliability Testing
&lt;/h2&gt;

&lt;p&gt;Once you understand how to properly build an application, run the application, and figure out where you want to host it, then the real fun begins. It's time to figure out the reliability of the application.&lt;/p&gt;

&lt;p&gt;Why is this important? Simply put; everything is all well and good when the shiny app is running in a demo environment until users start interacting with it. Before you know it, there's a new bug here, a new feature request there, the server in the corner is on fire... fun fun fun.&lt;/p&gt;

&lt;p&gt;There will always be a level of unknown, but you can still work towards mitigating that as much as possible. With platforms and tools like Apache JMeter, AWS RUM, LoadNinja, and many others, you have the opportunity to see what'll happen before an application is being used by real users.&lt;/p&gt;

&lt;p&gt;If you're building a new application, or you're adding to an existing application, definitely check out performance and reliability testing tools. It can save you a ton of headache down the road.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>sre</category>
      <category>engineeringmanagement</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 5 Visual Studio Code Extensions for Flutter</title>
      <author>Pankaj Das</author>
      <pubDate>Mon, 13 Dec 2021 13:07:24 +0000</pubDate>
      <link>https://dev.to/pankajdas0909/top-5-visual-studio-code-extensions-for-flutter-5082</link>
      <guid>https://dev.to/pankajdas0909/top-5-visual-studio-code-extensions-for-flutter-5082</guid>
      <description>&lt;p&gt;Visual Studio Code is an IDE used for Flutter App development. So, in this article, we will see the top 5 V.S. code extensions for Flutter. There are many extensions you can use to improve productivity in Flutter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-5-vs-code-extensions-for-flutter"&gt;
  &lt;/a&gt;
  Top 5 VS Code extensions for Flutter
&lt;/h2&gt;

&lt;p&gt;As a developer, you need productive tools and extensions to improve workplace productivity and efficiency. As Flutter users grow significantly, there is a huge collection of plugins and extensions on the market that can help developers be more productive. Now let’s take a look at some extensions that you can use to improve your productivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-pubspec-assist"&gt;
  &lt;/a&gt;
  1) Pubspec Assist:
&lt;/h3&gt;

&lt;p&gt;Every Flutter project has a pubspec.yaml file. This file contains the dependencies needed to develop your project or app. The Pubspec.yaml file contains the package version, fonts, assets or images. The Pubspec.yaml file is a very important file. Even one wrong interval will result in an error and the package will not install properly. Pubspec Assist is a very useful Visual Studio Code extension. It allows developers to add dependencies &amp;amp; development dependencies to Dart and Flutter project’s pubspec.yaml easily without leaving the editor. Starting from Dart version&amp;gt; 2.5, this feature is available by default.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-error-lens"&gt;
  &lt;/a&gt;
  2) Error lens
&lt;/h3&gt;

&lt;p&gt;Error lenses are an important addition to VS Code. When developing an app or project, I get errors that need to be fixed, such as missing semicolons or brackets. Errors are usually displayed at the bottom of the console. The console lists many errors in the console. Therefore, the task of ascertaining which particular line failure is occurring and fixing the problem can be difficult and time-consuming.&lt;/p&gt;

&lt;p&gt;To make troubleshooting easier and save more time, there is an extension called Error Lens. If an error occurs, the error lens immediately highlights the error in red at the end of that particular line. This helps us know what mistakes we made and can fix them at the moment, saving us a lot of time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-gitlens-git-supercharged"&gt;
  &lt;/a&gt;
  3) GitLens — Git supercharged
&lt;/h3&gt;

&lt;p&gt;GitLens is an open-source extension for Visual Studio Code that you can use in App development. It will help you in understanding the code better. You can quickly see who changed a line or block of code, why, and when. Go back in history and learn how and why your code has evolved. Take a quick look at the history and evolution of the codebase.&lt;/p&gt;

&lt;p&gt;GitLens is powerful, feature-rich and highly customizable to your needs. If the cord lens is annoying, or if the current conviction is annoying, that’s okay. Turn it off immediately or use GitLens’s interactive settings editor to change its behaviour.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-awesome-flutter-snippets"&gt;
  &lt;/a&gt;
  4) Awesome Flutter Snippets
&lt;/h3&gt;

&lt;p&gt;Awesome Flutter Snippets is a collection of Flutter classes and methods that are used commonly. Developers can increase their speed of development by terminating the boilerplate code associated with the widget creation. For example, you can type the shortcut streamBldr and singleChildSV instead of using Widgets such as StreamBuilder and SingleChildScrollView. The features of Awesome Flutter Snippets are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It will speed up development the development process.&lt;/li&gt;
&lt;li&gt;Also, it eliminates the boilerplate code.&lt;/li&gt;
&lt;li&gt;It supports complex widgets such as Custom Clipper and Custom Paint.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#5-bloc"&gt;
  &lt;/a&gt;
  5) bloc
&lt;/h3&gt;

&lt;p&gt;VS Code supports the Bloc library. Also, it provides tools to effectively create blocks and cubits for Flutter and Angular Dart apps. You can install bloc from the VS Code Marketplace or you can perform a search in VS Code. To activate a command, launch the Command Palette (View&amp;gt; Command Palette) and enter the command name or right-click the directory where you want to create the block/cubit and select the command from the context menu.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bloc: New Bloc – This command will generate a new Bloc.&lt;/li&gt;
&lt;li&gt;Cubit: New Cubit – This command will generate a new Cubit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;Thanks for remaining till the end of the article. We hope you have enjoyed reading this article. To summarize, in this article, we have discussed the top 5 V.S. code extensions for Flutter. Do let us know your feedback/comments on the same.&lt;/p&gt;

&lt;p&gt;Flutter agency is the &lt;a href="https://flutteragency.com/"&gt;best Flutter App development company&lt;/a&gt; with a highly experienced team of Flutter developers. We promise to deliver the best application developed in Flutter, which will excel in the market. Also, Flutter Agency is a portal full of excellent resources like Flutter Widget Guide, Flutter Projects, Code libs, etc. So, contact us for your next project.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>javascript</category>
      <category>vscode</category>
      <category>extension</category>
    </item>
    <item>
      <title>⚠️ CRITICAL update for ParseJS/ParseTS! ⚠️</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 13 Dec 2021 12:46:12 +0000</pubDate>
      <link>https://dev.to/baenencalin/critical-update-for-parsejsparsets-4mpf</link>
      <guid>https://dev.to/baenencalin/critical-update-for-parsejsparsets-4mpf</guid>
      <description>&lt;p&gt;A &lt;a href="https://github.com/CalinZBaenen/ParseJS/commit/78ec5f7e7addeab9d9eca7c64be6b54025360d57"&gt;new commit&lt;/a&gt; to the &lt;a href="https://github.com/CalinZBaenen/ParseJS"&gt;ParseJS GitHub repository&lt;/a&gt; was made.&lt;/p&gt;

&lt;p&gt;It fixes a critical bug related to the output the function returned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-intended-behavior"&gt;
  &lt;/a&gt;
  The intended behavior.
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;parse_string&lt;/code&gt; usually returns an array that contains either a length-one-&lt;code&gt;string&lt;/code&gt; (&lt;code&gt;char&lt;/code&gt;) or &lt;code&gt;symbol&lt;/code&gt;.&lt;br&gt;
A symbol is inserted into the returned array IF a symbol is found. - I.e. if you pass the arguments: &lt;code&gt;"test + test", ["test"]&lt;/code&gt; two &lt;code&gt;symbol&lt;/code&gt;s containing the description &lt;code&gt;test&lt;/code&gt; will be inserted.&lt;br&gt;
Otherwise, if a valid token isn't found, it will insert the current character&lt;/p&gt;

&lt;p&gt;So, all together, if you pass in &lt;code&gt;"test + test", ["test"]&lt;/code&gt;, you should (and WILL) get &lt;code&gt;[Symbol(test), ' ', '+', ' ', Symbol(test)]&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bug"&gt;
  &lt;/a&gt;
  The bug.
&lt;/h2&gt;

&lt;p&gt;The bug is that "ghost" characters would be inserted into the output array if a token candidate didn't match the potential token in the string.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-visual-demonstration-of-the-bug"&gt;
  &lt;/a&gt;
  A visual demonstration of the bug.
&lt;/h2&gt;

&lt;p&gt;This is a before and after of the bug fix:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ojYyMGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvimn31jn9qvtozusbzn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ojYyMGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvimn31jn9qvtozusbzn.png" alt="Before update." width="880" height="306"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Xl6-a3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pz26ksz0g60d2lejev9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Xl6-a3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pz26ksz0g60d2lejev9.png" alt="After update." width="880" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;b&gt;&lt;/b&gt;&lt;center&gt;Thanks for your attention!&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>watercooler</category>
      <category>bugfix</category>
    </item>
  </channel>
</rss>
