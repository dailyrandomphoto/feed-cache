<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AWS open source news and updates #66</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Tue, 04 May 2021 07:07:35 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-66-1bhj</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-66-1bhj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#may-4th-2021-instalment-66"&gt;
  &lt;/a&gt;
  May 4th, 2021 - Instalment #66
&lt;/h2&gt;

&lt;p&gt;Newsletter #66. &lt;/p&gt;

&lt;p&gt;This week we have a really outstanding collection of new open source projects, including eventbridge-atlas, ecsk, spotinfo, pecos and more, so make sure you spend some time checking those out. Following on from CDK Day, we have plenty of great posts for CDK fans. As always, there are lots of great community and AWS blog posts covering event driven architectures, containers, big data, and so happy to see the AWS DeepRacer open source announcements last week. Finally, we have a couple of great videos, a podcast and events you should check out and put in your diary.&lt;/p&gt;

&lt;p&gt;Before you dive in, make sure you are aware of the following important updates from last week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NodeJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using NodeJS then last week we had an important post that you should read and check out the recommendations. Trivikram Kamat writes in, &lt;a href="https://aws-oss.beachgeek.co.uk/fw"&gt;Announcing the end of support for Node.js &amp;lt;10.x in the AWS SDK for JavaScript (v2)&lt;/a&gt; the timelines, versions as well as the motivation behind this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Neuron&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aws/aws-neuron-sdk"&gt;AWS Neuron&lt;/a&gt; is the SDK for running machine learning inference using AWS Inferentia chips, and last week we announced an important change in how you install and update this SDK. To find out more, read &lt;a href="https://aws-oss.beachgeek.co.uk/go"&gt;End of support for Neuron Conda packages in Deep Learning AMI&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Matt Hansen, Eric Johnson, Al MS, Michele Sancricca, Hari Rajaram, Jeremy Ber, Kumar Abhinav, David Duncan, Tracy Pierce, Trivikram Kamat, Zachary Whitford, Richa Prajapati, Aldo Piddiu, Christian Weber, Mark Richman, Jason Gudalis, Baichuan Sun, Eden Duthie, Charles Frenzel, Thom Lane, David Smith, Camilo Buscaron, Eddie Calleja, Siddalingesha Devarmani Shivakumar, Jayadev Vadakkanmarveettil, Bob Wise, Peder Ulander, Willy Tarreau, Jaana Dogan, Jarrod Watts, Jason Umiker, Alexei Ledenev, yukiarrr, OlegA, David Boyne, Teadeveloper, Hsiang-Fu Yu, Inderjit S. Dhillon, Chris Fife, Eric Beard, Rico Huijbers, Sundeep Kumar, Rahul Sonawane, Jasper Wang and Van Vo Thanh.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;eventbridge-atlas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gg"&gt;eventbridge-atlas&lt;/a&gt; this is a great open source project from David Boyne, that allows you to document, discover and share your EventBridge schemas. Great documentation that shows you the motivation behind the project as well as how to get started, David also put together this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/gh"&gt;Introducing EventBridge Atlas&lt;/a&gt; which is a must read this week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDBw6--S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.boyney.io/static/images/blogs/eventbridge-atlas/how-it-works.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDBw6--S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.boyney.io/static/images/blogs/eventbridge-atlas/how-it-works.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ecsk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/ge"&gt;ecsk&lt;/a&gt; this open source tool from yukiarrr is a CLI tool that you can interactively call Amazon ECS APIs (run-task, execute-command, stop-task), copy files between ECS and local, and view logs. Clear documentation to help you install and get started, check out this demo to see it in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rms4kOtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/yukiarrr/ecsk/main/docs/images/ecsk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rms4kOtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/yukiarrr/ecsk/main/docs/images/ecsk.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;spotinfo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gf"&gt;spotinfo&lt;/a&gt; this open source project from Alexei Ledenev is a command-line tool that helps you determine AWS Spot instance types with the least chance of interruption and provides the savings you get over on-demand rates. Awesome little tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pecos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gj"&gt;pecos&lt;/a&gt; PECOS is a versatile and modular open source machine learning (ML) framework for fast learning and inference on problems with large output spaces, such as extreme multi-label ranking (XMR) and large-scale retrieval. PECOS' design is intentionally agnostic to the specific nature of the inputs and outputs as it is envisioned to be a general-purpose framework for multiple distinct applications. You can read more about this project in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/gk"&gt;Amazon open-sources library for prediction over large output spaces&lt;/a&gt; from Hsiang-Fu Yu and Inderjit S. Dhillon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y4zgLQDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.amazon.science/dims4/default/f395830/2147483647/strip/true/crop/2346x1228%2B0%2B0/resize/1200x628%21/quality/90/%3Furl%3Dhttp%253A%252F%252Famazon-topics-brightspot.s3.amazonaws.com%252Fscience%252F44%252F70%252F4c683029463da1022b8b582635e3%252Frecursive-matcher.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4zgLQDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.amazon.science/dims4/default/f395830/2147483647/strip/true/crop/2346x1228%2B0%2B0/resize/1200x628%21/quality/90/%3Furl%3Dhttp%253A%252F%252Famazon-topics-brightspot.s3.amazonaws.com%252Fscience%252F44%252F70%252F4c683029463da1022b8b582635e3%252Frecursive-matcher.png" alt="pecos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-mwaa-local-runner&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gd"&gt;aws-mwaa-local-runner&lt;/a&gt; this is a project I have been waiting to be released for a while, and this provides you with a local environment that replicates an Amazon Managed Workflows for Apache Airflow (MWAA) environment. Check out the docs for details on how to get this up and running, but I have been running it for a while and find it super useful for doing local development and testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-ec2-dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gc"&gt;aws-ec2-dashboard&lt;/a&gt; this open source project from OlegA is a Node.js/JavaScript application that displays list of EC2 instances in a compact and simple way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;yake&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gi"&gt;yake&lt;/a&gt; Alexander Mancevice has put this open source project together that is a Rake like DSL for writing AWS Lambda handlers. Rake is a software task management and build automation tool, so this project might appeal to those Ruby developers looking to explore writing functions and deploying them on AWS Lambda.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;awscloudexplorer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gl"&gt;awscloudexplorer&lt;/a&gt; this open source tool from Teadeveloper for TUI (terminal user interface) lovers to explore the resources in AWS Cloud using a TUI  instead a GUI or AWS web console. tmux and nc fans will love this tool, currently checking it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://asciinema.org/a/1IkBGa3DB0xKuhCmWtOjeoYSx"&gt;https://asciinema.org/a/1IkBGa3DB0xKuhCmWtOjeoYSx&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Direktiv&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/g8"&gt;Direktiv v0.2.1: deploying on AWS EKS or Docker and new UI!&lt;/a&gt; I covered this project last week, and Wilhelm Wonigkeit from Direktiv has a new post this time showing you how you can deploy this open source project (an event driven, container based workflow engine) on AWS, as well as covering some of the latest new features they have added. This is a really interesting project, so check it out if you missed this last week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwLu2x6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2AsAHvteh5UOXZyqjEGdxxRg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwLu2x6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2AsAHvteh5UOXZyqjEGdxxRg.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/g7"&gt;Get Started With AWS Amplify, Next.JS &amp;amp; Typescript. Full Stack with GraphQL + Authentication in 10 minutes!&lt;/a&gt; Jarrod Watts puts himself in the leaderboard for blog post with the longest title this week, and what a great post it is - 10 minutes you will not regret. Easy to follow with video backup incase you prefer that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HAProxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/g6"&gt;HAProxy Forwards Over 2 Million HTTP Requests per Second on a Single Arm-based AWS Graviton2 Instance&lt;/a&gt; Willy Tarreau takes an in depth look at how HAProxy scales when running on AWS Graviton2 instance types. This is a great post, covering the methodology, results and analysis. As with all benchmark posts, I don't want to spoil the conclusion so make sure you read this post to find out more. I will leave you with this tantalising graph though...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7usmhG5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.haproxy.com/wp-content/uploads/2021/04/7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7usmhG5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.haproxy.com/wp-content/uploads/2021/04/7.png" alt="haproxy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon EKS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are looking to expand upon the core Amazon EKS cluster, perhaps been inspired or manually deploying a number of add-ons that you might have seen as part of the &lt;a href="https://aws-oss.beachgeek.co.uk/ga"&gt;Amazon EKS Workshop&lt;/a&gt;, then this post from Jason Umiker,&lt;a href="https://aws-oss.beachgeek.co.uk/g9"&gt;Automating the provisioning of a production-ready Kubernetes cluster with AWS EKS &amp;amp; CDK&lt;/a&gt; will show you how to automate the configuration of those add-ons. Very nice indeed. What is even better is that Jason has written his CDK app in Python, and that makes me very happy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/aws/using-aws-cdk-to-deploy-your-amazon-managed-workflows-for-apache-airflow-environment-12cf"&gt;Using AWS CDK to deploy your Amazon Managed Workflows for Apache Airflow environment&lt;/a&gt; to celebrate CDK Day last week I put together this post showing you how you can use AWS CDK to configure and deploy an Amazon Managed Workflows for Apache Airflow environment. I hope it is useful, and builds upon earlier posts where I showed you how you can do this via CloudFormation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-open-source-posts"&gt;
  &lt;/a&gt;
  AWS open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS DeepRacer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It has been a while since I have done anything with AWS DeepRacer, but the DeepRacer community are very close to my heart and they have some amazing folks doing some really great things. I am very happy therefore, that last week we published a couple of blog posts announcing the open sourcing of AWS DeepRacer.&lt;/p&gt;

&lt;p&gt;First up we had my good friend (and follower of DeepRacer cars!) David Smith who post, &lt;a href="https://aws-oss.beachgeek.co.uk/g2"&gt;AWS DeepRacer device software now open source&lt;/a&gt; dives into more details about this announcement including a look at some of the sample projects that have been compiled by the AWS DeepRacer team and members of that awesome DeepRacer community, before walking you through some of those samples. David also shares details about discounts you can get yourself which are not to be sniffed at, so make sure you check this post out.&lt;/p&gt;

&lt;p&gt;Following that we have a collaboration between Camilo Buscaron, Eddie Calleja, Siddalingesha Devarmani Shivakumar, and Jayadev Vadakkanmarveettil on the post, &lt;a href="https://aws-oss.beachgeek.co.uk/g3"&gt;AWS DeepRacer is now open source and ready to hit the road with ROS 2&lt;/a&gt; looks at this announcement from the Robotics perspective, taking a look at some of the ROS packages that are being open sourced and how you can use these to start building projects. They also cover the sample projects, taking a look at the Follow the Leader, Off Road and Mapping projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alB_FweY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/27/deepracer-mapping_1000.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alB_FweY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/27/deepracer-mapping_1000.gif" alt="deep racer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Really excited as to the possibilities and look forward to sharing future projects in this newsletter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ROS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are into Robotics, this post from Matt Hansen, &lt;a href="https://aws-oss.beachgeek.co.uk/gt"&gt;AWS announces a new developer desktop feature within the AWS RoboMaker IDE&lt;/a&gt;, will be right up your street, showing you a really cool new way we are making it easier for roboticists to develop their robot applications by extending the developer tooling beyond the RoboMaker IDE to now include a full virtual Ubuntu desktop. You can run your favourite ROS tools, Gazebo, RViz, and other tools directly as if it were a local Ubuntu desktop. I can see my Ubuntu machine next to me getting nervous.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3Y8c9vP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/04/30/fig5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3Y8c9vP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/a9334987ece78b6fe8bf130ef00b74847c1d3da6/2021/04/30/fig5.jpg" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Streamlit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/g1"&gt;Using Streamlit to build an interactive dashboard for data analysis on AWS&lt;/a&gt; Baichuan Sun, Eden Duthie, Charles Frenzel, and Thom Lane collaborate on this tutorial that show how to stand up an Exploratory Data Analysis (EDA) dashboard for business users using Streamlit. Streamlit is an open source framework for data scientists to efficiently create interactive web-based data applications in pure Python. This walkthrough will show you how you can easily deploy this into your AWS environment with the least effort - always a good thing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CUVW2mpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/27/tholane_arch_1000.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CUVW2mpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/27/tholane_arch_1000.png" alt="arch"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grafana&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fz"&gt;Using Amazon Managed Service for Grafana to troubleshoot a serverless application&lt;/a&gt; Mark Richman builds upon an earlier blog post to show you how you can integrate Amazon CloudWatch logs and metrics with Amazon Managed Service for Grafana (AMG), using it to see how you might troubleshoot a serverless application built using Amazon API Gateway and AWS Lambda. The post covers how to visualise, analyze, alarm, and notify on metrics and logs across multiple data sources, all from within Grafana and Mark provides a link to the source code so you can try it yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmQ6q-8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/12/Richman-Grafana_F1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmQ6q-8s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/12/Richman-Grafana_F1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the dust settles after another amazing CDK Day event, what better way to celebrate that to catch up on the latest AWS CDK news.&lt;/p&gt;

&lt;p&gt;Christian Weber dropped his latest post in his regular &lt;a href="https://aws-oss.beachgeek.co.uk/fy"&gt;CDK Corner – April 2021&lt;/a&gt; series. Plenty of updates and news from around the world, so make sure you check out this post. As always, love the community acknowledgements so well done folks who have successfully had their first PRs merged.&lt;/p&gt;

&lt;p&gt;Jasper Wang and Van Vo Thanh put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/gs"&gt;Building and deploying Fargate with EKS in an enterprise context using the AWS Cloud Development Kit and cdk8s+&lt;/a&gt; that shows you how you can deploy a sample Kubernetes workload on an Amazon EKS cluster running Kubernetes pods on AWS Fargate using cdk8s/cdk8s+, an open-source software development framework for defining Kubernetes applications a la CDK.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lTmaWki9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/03/12/CDK8s-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lTmaWki9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/03/12/CDK8s-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Announced the evening before CDK Day, Eric Johnson's post &lt;a href="https://aws-oss.beachgeek.co.uk/gp"&gt;Better together: AWS SAM and AWS CDK&lt;/a&gt; announced the public preview of AWS Serverless Application Model CLI (AWS SAM CLI) support for local development and testing of AWS CDK projects. If you are not familiar with AWS SAM/SAM CLI, it is a developer tool that makes it easier to build, locally test, package, and deploy serverless applications. This new capability extends the previous ability to test/package using CloudFormation to now be able to build/test with AWS CDK. If you want to know more check out the videos from CDK Day (I will post when they are uploaded in future newsletters) where Eric showed you this in action. This new capability generated a lot of love at CDK Day, so make sure you check this post out.&lt;/p&gt;

&lt;p&gt;Finally, it was great to see AWS CDKv2 announced last week, in the post &lt;a href="https://aws-oss.beachgeek.co.uk/gq"&gt;Announcing AWS Cloud Development Kit v2 Developer Preview&lt;/a&gt; Chris Fife, Eric Z. Beard, and Rico Huijbers talk you through the changes between CDK v1 and v2. They talk about the AWS Constructs Library, the constructs compatibility layer, the new lifecycle for experimental APIs and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RedHat Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fv"&gt;Announcing availability of Red Hat Enterprise Linux with High Availability on Amazon EC2&lt;/a&gt; this post from Kumar Abhinav and David Duncan provides a quick walk through of deploying Red Hat Enterprise Linux with High Availability and combining this with the scale, performance and elasticity of AWS to provide an operating system for your highly available compute clusters. I was not aware of Corosync before reading this post, so I am sure you will learn something new too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0wi31jZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/19/kabhinaa_Red-Hat-Enterprise-Linux_f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0wi31jZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/19/kabhinaa_Red-Hat-Enterprise-Linux_f1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gr"&gt;Orchestrate AWS Glue DataBrew jobs using Amazon Managed Workflows for Apache Airflow&lt;/a&gt; Sundeep Kumar and Rahul Sonawane show you how you can use to orchestrate and schedule DataBrew jobs with Amazon Managed Workflows for Apache Airflow (MWAA). In this particular post they create a simple transformation logic pipeline, using DataBrew jobs to join two datasets, rename a column, and add a new column and then use Amazon Athena to verify the results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kwx9ouZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/04/27/bdb1364-databrew-mwaa-orchestration-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kwx9ouZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/04/27/bdb1364-databrew-mwaa-orchestration-1.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Flink&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/gm"&gt;Enrich your data stream asynchronously using Amazon Kinesis Data Analytics for Apache Flink&lt;/a&gt; from Hari Rajaram and Jeremy Ber show you how you can approach asynchronous enrichment of a data stream through the Apache Flink API for asynchronous I/O with external data sources. Why does this matter? Well, you might need this if you have use cases such as  enriching a streaming payload with additional elements, to passing data elements to an API for a machine learning (ML) prediction, or loading data streams into a data lake for near-real-time analytics. Read the post to find out more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Presto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have spent some time recently working with Presto on Amazon EMR, so I enjoyed reading this new post,&lt;a href="https://aws-oss.beachgeek.co.uk/gn"&gt;Amazon EMR introduces EMR runtime for Presto, providing a 2.6 times speedup&lt;/a&gt; from Al MS and Michele Sancricca. Running Presto on Amazon EMR is a popular choice because Amazon EMR provides the latest, stable, open-source community Presto innovations and Amazon EMR platform-level optimisations for Presto workloads - and this posts takes a look at some of those optimisations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/fx"&gt;How Goldman Sachs migrated from their on-premises Apache Kafka cluster to Amazon MSK&lt;/a&gt; this guest post from Zachary Whitford, Richa Prajapati, and Aldo Piddiu from the Global Investment Research engineering team at Goldman Sachs takes a look at their migration journey as they moved from self hosted Apache Kakfa to using Amazon Managed Streaming for Apache Kafka (or Amazon MSK). The post covers the rational and thinking behind the move, the options they considered as well as the lessons learned. If you are using/running Apache Kafka workloads, make sure you read this post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F41zFdCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/04/22/bdb1229-gir-msk-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F41zFdCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/04/22/bdb1229-gir-msk-2.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance Dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/g0"&gt;New Performance Dashboard on AWS makes delivering open, responsive government simple&lt;/a&gt; Jason Gudalis writes about a newly open sourced solution that aims to help manage and showcase the data you have. The post focuses specifically on doing this with data at the heart of how public services are working, but you could adapt it to your own needs. If you want to see it in action, there is a very short video that shows you what you can expect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwHU48yc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/9e6a55b6b4563e652a23be9d623ca5055c356940/2021/04/28/Performance-Dashboard-on-AWS-Figure-1-architecture.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwHU48yc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/9e6a55b6b4563e652a23be9d623ca5055c356940/2021/04/28/Performance-Dashboard-on-AWS-Figure-1-architecture.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Node 14.x&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now use the Node.js 14.x runtime to develop functions in AWS &lt;a href="mailto:Lambda@Edge"&gt;Lambda@Edge&lt;/a&gt;. This runtime is in addition to the currently supported Node.js 10.x and Node.js 12.x runtimes. Node.js 14.x, the current Long Term Support (LTS) version of Node.js, uses the new V8 8.1 engine and provides better performance than the previous LTS version, 12.x. In addition, Node.js 14.x supports new features such as nullish coalescing (?? operator), options chaining (?. operator), and diagnostic reporting&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Managed Streaming for Apache Kafka (Amazon MSK) now supports Apache Kafka version 2.8.0 for new and existing clusters. Apache Kafka 2.8.0 includes several bug fixes and new features that improve performance. Some of the key features include connection rate limiting to avoid problems with misconfigured clients (KIP-612) and topic identifiers which provides performance benefits (KIP-516). There is also an early access feature to replace zookeeper with a self-managed metadata quorum (KIP-500), however this is not recommended for use in production. For a complete list of improvements and bug fixes, see the Apache Kafka &lt;a href="https://downloads.apache.org/kafka/2.8.0/RELEASE_NOTES.html"&gt;release notes for 2.8.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Secrets Manager launched the AWS Secrets and Configuration Provider (ASCP), a plugin for the industry-standard Kubernetes’ Secrets Store CSI driver. ASCP enables applications running in Kubernetes pods to retrieve secrets from AWS Secrets Manager easily, without the need for custom code. Once installed, ASCP ensures your applications always receive the most recent version of your secrets as these are rotated. As a result, you automatically benefit from the rotation and lifecycle management features that Secrets Manager provides, without added coding effort. ASCP also enables convenient and secure access to your configurations in AWS SSM Parameter Store. You can read more about this in the blog post from Tracy Pierce, &lt;a href="https://aws-oss.beachgeek.co.uk/fu"&gt;How to use AWS Secrets &amp;amp; Configuration Provider with your Kubernetes Secrets Store CSI driver&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ROSA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of must view videos this week, starting off with Bob Wise and Peder Ulander sharing some insights into how Red Hat OpenShift on AWS (ROSA) is helping enterprises simplify, scale cloud projects as they move toward the edge. This was recorded during the Red Hat Summit, and is well worth watching as it covers more than just ROSA but open source at AWS too. Check out the original coverage &lt;a href="https://aws-oss.beachgeek.co.uk/g4"&gt;here&lt;/a&gt;, or watch the video below from the Cube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sqqg1tOyjtk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Copilot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The final video is a recording from the Containers from the Couch crew of the Amazon ECS Workshop, where you will learn how to deploy your application to Amazon ECS using AWS Copilot.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/o8o9Ea9o0aI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#podcast-of-the-week"&gt;
  &lt;/a&gt;
  Podcast of the week
&lt;/h3&gt;

&lt;p&gt;Jaana Dogan (&lt;a class="mentioned-user" href="https://dev.to/rakyll"&gt;@rakyll&lt;/a&gt;
) explains which problems the industry, and especially cloud vendors, try to solve with their investment in open source standards such as OpenTelemetry and gives an update where OpenTelemetry is, the next upcoming milestones and what a bright future with OpenTelemetry being widely adopted could bring.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/g5"&gt;The State of OpenTelemetry with Jaana Dogan&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Rust Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 3rd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rust is a language empowering everyone to build secure, reliable, and efficient software. Rust is becoming more widely used in cloud native, powering everything from lightning-fast service meshes and powerful developer tools to internet-scale distributed databases.&lt;/p&gt;

&lt;p&gt;Come explore what makes Rust a fantastic choice for new cloud native development, and learn about how the community uses Rust today. Find out &lt;a href="https://aws-oss.beachgeek.co.uk/5y"&gt;more and register here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Container Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 4, 2021 | 10:00AM - 6:00PM CEST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Container Day x KubeCon is a fully live, virtual day of sessions all about Amazon EKS and Kubernetes at AWS, hosted by Brent Langston and Adam Keller of Containers from the Couch. At this Day Zero KubeCon event, the AWS Kubernetes team will be revealing new launches, demoing products and features, covering best practices, and answering your questions live on Twitch! If you have a question before the event, you can email the team at &lt;a href="mailto:awscontainerday@amazon.com"&gt;awscontainerday@amazon.com&lt;/a&gt; and maybe get them answered.&lt;/p&gt;

&lt;p&gt;Find out more and to register, &lt;a href="https://aws-oss.beachgeek.co.uk/cr"&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An Introduction to Amazon Managed Blockchain&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;5th May&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Managed Blockchain (AMB) is a fully managed service that makes it easier to build scalable blockchain networks using popular open source frameworks, including Hyperledger Fabric and Ethereum. AMB includes several features and enhancements beyond those provided by the open-source projects on which it is based. It supports public and private blockchain options, each of which favors different use cases. We review reference architectures outlining example applications on both Hyperledger Fabric and Ethereum. In this lecture, you will also hear several customer success stories building solutions on Amazon Managed Blockchain.&lt;/p&gt;

&lt;p&gt;Find out more and register &lt;a href="https://aws-oss.beachgeek.co.uk/dx"&gt;via this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building And Maintaining Your Own Secure Container OS&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 13th 9am PST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Curtis Rissi, a Principal Partner SA at AWS will walk attendees through the Bottlerocket (an open-source Linux-based operating system meant for hosting containers) build process, and provide some key use cases for customisation: how to add new configuration options; how to add new packages; how to configure your own update repositories; how to add security policy; and other common customisations. &lt;/p&gt;

&lt;p&gt;Find out more and to register, click &lt;a href="https://aws-oss.beachgeek.co.uk/ed"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile and Front-End Live&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 9:00 - 15:00 PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a LIVE streamed event on Twitch  focused on accelerating full-stack mobile and web development. Learn about AWS Amplify, a set of purpose-built tools and services for front-end web and mobile developers that simplify app development. Deep dive into GraphQL and AWS AppSync, a fully-managed GraphQL service that improves app performance and developer productivity.&lt;/p&gt;

&lt;p&gt;You can read more about what you can expect in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/f4"&gt;Mobile and Front-End Live, May 25&lt;/a&gt; and &lt;a href="https://aws-oss.beachgeek.co.uk/f3"&gt;register via this link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>How to Get Your First Job in Developer Relations</title>
      <author>Alex Lakatos 🥑</author>
      <pubDate>Tue, 04 May 2021 06:34:19 +0000</pubDate>
      <link>https://dev.to/lakatos88/how-to-get-your-first-job-in-developer-relations-2bgn</link>
      <guid>https://dev.to/lakatos88/how-to-get-your-first-job-in-developer-relations-2bgn</guid>
      <description>&lt;p&gt;Hi, my name is Alex, and I’m an… Advocate. A Developer Advocate. With Developer Advocates being one of the most sought out commodities on the market this year, I thought I’d write up the answer to one of the questions that I answer frequently in my DMs - mostly because I &lt;a href="https://www.swyx.io/three-strikes/"&gt;read this thing&lt;/a&gt; from &lt;a href="https://twitter.com/swyx"&gt;@swyx&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How did you break into Developer Relations?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If I knew what I did exactly to end up here, it would probably be an easy answer. But it isn’t because I didn’t wake up one day and decided this was what I wanted to be when I grew up. My idols and role models were Developer Advocates, and I didn’t think I was good enough to be the same. On top of that, I was a Senior Developer with quite a few years of experience under my belt. I didn’t feel like giving that up to be a “&lt;em&gt;Junior&lt;/em&gt;” anything again.&lt;/p&gt;

&lt;p&gt;If you ask other people in the industry - and I asked quite a few of them in a survey - everybody has a different story. Because &lt;strong&gt;Developer Relations is such a new industry&lt;/strong&gt;. Even defining it is tricky because it depends on which side of the aisle you’re asking. &lt;a href="https://www.leggetter.co.uk/2016/02/03/defining-developer-relations.html"&gt;Phil tried to define Developer Relations&lt;/a&gt; a while back, and when you look at it, it’s got so many roles that overlap. &lt;strong&gt;Evangelism versus Advocacy, Marketing versus Community, Technical Writing versus Developer Experience&lt;/strong&gt;. And they’re all a part of DevRel, but &lt;strong&gt;the skills required for the role depend from company to company&lt;/strong&gt; , not necessarily from role to role.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@dzello/how-i-got-into-developer-advocacy-93bad1678a67"&gt;Josh said that not all journeys are the same&lt;/a&gt;, and I tended to agree with him. But then I got the chance to meet and interview many other Developer Advocates, Community Managers and Technical Writers, and some patterns emerged. Turns out, &lt;a href="https://www.youtube.com/watch?v=Frt_fvEfROU"&gt;while not all journeys were the same, all roads lead to Rome&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve spent some time identifying a set of skills each of us in DevRel had before joining the industry. Here’s a list that also tells you how you can acquire them now, outside of DevRel. Because it turns out &lt;strong&gt;you don’t have to give up your career progression&lt;/strong&gt; and start all over, &lt;strong&gt;you can break in&lt;/strong&gt;. Not a single one of us had all the skills we use today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We’ve all started out with only one or two of the required skills and learned the rest on the job. So don’t worry, you can make do with picking up only a few of these skills!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#community-building"&gt;
  &lt;/a&gt;
  Community Building
&lt;/h2&gt;

&lt;p&gt;There are open-source programs explicitly designed for building community. I’ll share a list of my favourites, but I’m pretty sure most open-source projects won’t say no if you start helping out. It doesn’t have to be something as minor as code. It can be something truly helpful, like commenting on old issues to see if people still care about them. Or getting together with some people to test a project. For example, the Reps program even sponsored pizza or coffee for people to get together and help out around the Mozilla mission. Fedora does the same for its Ambassadors. I’m pretty sure I missed a few, &lt;a href="https://twitter.com/lakatos88"&gt;so let me know on Twitter, and I’ll add more&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://wiki.mozilla.org/Reps"&gt;Mozilla Reps&lt;/a&gt; are passionate Mozillians who mobilize and develop functional and local/regional Mozilla communities. They are committed to educate and empower people to support Mozilla’s mission and contribute to the project based on Mozilla’s leadership agreements.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fedoraproject.org/wiki/Ambassadors"&gt;Fedora Ambassadors&lt;/a&gt; are responsible for helping to grow the contributor base and act as a liaison between other FLOSS projects and the Fedora community.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#public-speaking"&gt;
  &lt;/a&gt;
  Public Speaking
&lt;/h2&gt;

&lt;p&gt;With a pandemic, travel bans and no in-person events, public speaking is a different beast than when I started. There are different challenges involved in speaking in front of a live audience as opposed to a camera. Most learning communities there haven’t yet adapted to online speaking, so if you find yourself stuck while picking this one up, &lt;a href="https://twitter.com/lakatos88"&gt;please reach out&lt;/a&gt;. I’m more than happy to have learning sessions. We’ve been training people online to speak in public for a few years with Mozilla Tech Speakers, happy to pick it up again.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.globaldiversitycfpday.com/"&gt;Global Diversity CFP Day&lt;/a&gt; is a tech-wide cross-community event based on the successful workshops held in advance of ScotlandCSS and ScotlandJS in 2016. Over the years it has evolved into a focused 1-day event designed to help you go from an idea to skills and a talk ready to submit to a conference.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.toastmasters.org/"&gt;Toastmasters&lt;/a&gt; is a nonprofit educational organization that teaches public speaking and leadership skills through a worldwide network of clubs. While they focus more on improvised topics, it will get you comfortable to step up in front of strangers and try to keep a straight face while you’re talking about a random topic. This will later evolve into not being afraid of the Q&amp;amp;A session of your talks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://wiki.mozilla.org/TechSpeakers"&gt;Mozilla Tech Speakers&lt;/a&gt; started as an experiment in 2015 designed by &lt;a href="https://twitter.com/freshelectrons"&gt;Havi Hoffman&lt;/a&gt; and &lt;a href="https://twitter.com/dietrich"&gt;Dietrich Ayala&lt;/a&gt; from the Mozilla Developer Relations team. They invited a handful of volunteers who were passionate about giving talks at conferences on Mozilla-related technologies and the Open Web in general to trial a program that would support their conference speaking activities and amplify their impact. It scaled to 100 people, &lt;a href="https://discourse.mozilla.org/t/pausing-tech-speaker-program-support/66157/8"&gt;but sadly in 2020, it was axed&lt;/a&gt; when &lt;a href="https://blog.mozilla.org/blog/2020/08/11/changing-world-changing-mozilla/"&gt;Mozilla did their second round of layoffs&lt;/a&gt;. However, the resources developed for the program are still some of the best around, so check them out.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#technical-writing"&gt;
  &lt;/a&gt;
  Technical Writing
&lt;/h2&gt;

&lt;p&gt;I must admit, writing, in general, was something I struggled with. But new resources and communities for technical writing keep popping up. It’s getting easier to get started. What helped me was &lt;strong&gt;transforming the writing bit from a skill into a habit&lt;/strong&gt;. I’ve struggled with writing consistently for 3 years, tried various things, but I think I’ve finally figured it out. For the past 189 days, I’ve challenged myself to write at least 100 words every day. And you (and me both) would think that’s not a lot. It seemed like a manageable quantity when I started. Turns out those 100 words add up when you do it every day. So far, it’s been 42687 words and 19 articles published in those 189 days. I’ve &lt;a href="https://twitter.com/lakatos88/status/1321423080095469568"&gt;used Twitter as a way to hold myself publicly accountable&lt;/a&gt;, but there are other communities to help you be accountable while you learn or to help improve your writing style.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.writethedocs.org/"&gt;Write the Docs&lt;/a&gt; is a global community of people who care about documentation. They consider everyone who cares about communication, documentation, and their users to be a member of their community. This can be programmers, tech writers, developer advocates, customer support, marketers, and anyone else who wants people to have great experiences with software.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bloggingfordevs.com/"&gt;Blogging for Devs&lt;/a&gt; is both a free email course and a paid community. Whether you’re just starting out, trying to revive an existing blog, or want to get past a plateau, this course and newsletter is going to help.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/tech-writing/overview"&gt;Google has a collection of courses&lt;/a&gt; and learning resources that aims to help you improve your technical documentation. Learn how to plan and author technical documents. You can also learn about the role of technical writers at Google.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#event-organizing"&gt;
  &lt;/a&gt;
  Event Organizing
&lt;/h2&gt;

&lt;p&gt;The barrier to start organizing events has considerably lowered with the onset of the pandemic. Before, it involved finding a physical space, a speaker, an audience and a sponsor for the refreshments. It was a lot easier to find an established group and help out instead of starting your own. I went at it the hard way, starting a London JavaScript meetup with &lt;a href="https://twitter.com/chris_noring"&gt;Chris&lt;/a&gt; and &lt;a href="https://twitter.com/simona_cotin"&gt;Simona&lt;/a&gt;. Chris and I convinced our employer to let us use the office during the weekend, and we asked our friends, like Simona, to come in and do free Angular workshops for people. After the meetup group got enough people, sponsors and venues started contacting us, so we didn’t have to run around looking for them. But with our attendee numbers multiplying fast, the three of us weren’t enough to get everything done, so we were always on the lookout for people to help us out. Be those people for other groups! I highly doubt anyone is going to turn you down.&lt;/p&gt;

&lt;p&gt;If helping out a group isn’t your thing, you can always put on a show of your own. In the age of online events, you don’t need a space or a sponsor. You can do it with a Zoom call, a speaker, and an audience. If you’re looking for groups or a place to find your audience, here’s a list.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://techtalks.io/"&gt;techtalks.io&lt;/a&gt; is a new tool for community building that evolved from the need for a better Meetup. I honestly think it’s the natural progression of Meetup. You can join a community of engineering, design, product and UX experts, organize, watch and discuss talks, get involved with a community and share your ideas.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.meetup.com"&gt;Meetup&lt;/a&gt; is a platform for finding and building local communities. People use Meetup to organize events, meet new people, learn new things, find support, get out of their comfort zones, and pursue their passions, together.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#builders"&gt;
  &lt;/a&gt;
  Builders
&lt;/h2&gt;

&lt;p&gt;I’m afraid I don’t have a lot of options here. &lt;strong&gt;The only thing I can tell you is to build things&lt;/strong&gt;. What things? It doesn’t really matter. The goal is to &lt;strong&gt;pick up something new&lt;/strong&gt; , &lt;strong&gt;experiment with it&lt;/strong&gt; for a few days, and then &lt;strong&gt;tell other people what you did&lt;/strong&gt;. It doesn’t have to be a next career move, it doesn’t have to be useful to anyone but yourself, and it doesn’t have to be maintained for years to come. Build things, and that’s it.&lt;/p&gt;

&lt;p&gt;If you’ve stumbled upon my &lt;a href="https://github.com/AlexLakatos/"&gt;GitHub profile&lt;/a&gt;, you’ll see I’m part of a dozen organizations, most of them abandoned, and that’s ok. I’ve also got almost 100 repositories that are just there, with only a handful actively maintained. Some of them are so cringe-worthy, with hacked-together code, that I still haven’t made public. And that’s ok.&lt;/p&gt;

&lt;p&gt;All these got me a valuable skill: I can build something with a clearly defined scope and throw it away as soon as it served its purpose. I don’t get overly attached to a piece of code or a project just because. And it doesn’t have to be perfect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-you-be-a-junior-developer-advocate"&gt;
  &lt;/a&gt;
  Can You Be a Junior Developer Advocate?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, definitely, of course!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know this might sound controversial. A lot of the Developer Advocates out there will tell you to be a Solution Architect before thinking about being a Developer Advocate. I’d like to formally and unequivocally call “BullShit!” here. Just because it took some people forever to get here (me included), it doesn’t mean it was right or that you should suffer. No! There are Junior Developer Advocates, Junior Community Managers. I’m not sure about Junior Technical Writers, but surely there are some, so let me know in the comments section below!&lt;/p&gt;

&lt;p&gt;The quality that makes a successful &lt;em&gt;devrella&lt;/em&gt; is being able to &lt;strong&gt;understand developers pain points&lt;/strong&gt;. Sure, some slower people like me need to suffer first before we can understand the problems, so we can fix them. Some smarter people, like &lt;a href="https://twitter.com/mary_grace/"&gt;Mary&lt;/a&gt;, could figure out this one without going through the grind. That means anyone can get there, so Junior Developer Advocates are a thing! Next time you see an opening, don’t let the fact that you haven’t suffered in the industry for the past ten years discourage you from applying. &lt;strong&gt;This field needs a fresh perspective&lt;/strong&gt; a lot more than it needs dinosaurs like me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-round"&gt;
  &lt;/a&gt;
  Bonus Round
&lt;/h2&gt;

&lt;p&gt;As Shawn put it, “&lt;strong&gt;DevRel is a not generalizable skill&lt;/strong&gt;, or rather, there’s such a thing as &lt;strong&gt;devrel-company fit&lt;/strong&gt;”. You might have noticed this blog post was technology agnostic. And that’s because it requires a great deal of passion and empathy. Those skills are not as easy to acquire as functional skills. Try to find a product or community you’re passionate about or something you’ve used or been part of before. It’s easier to get your first job in Developer Relations for a company when you’ve already got some domain knowledge. There’s also some degree of credibility involved. I couldn’t get a job advocating for an iOS company, for example. You should try to &lt;strong&gt;get some experience in your space&lt;/strong&gt;, really understand the domain you’re trying to break in as a &lt;em&gt;devrella&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I also co-curate alongside &lt;a href="https://twitter.com/iza_biro"&gt;Julia&lt;/a&gt;, a weekly email roundup of Developer Avocados 🥑 Call-For-Papers, resources and articles. If you want to learn more about DevRel, you &lt;strong&gt;should definitely subscribe&lt;/strong&gt; to &lt;a href="https://developeravocados.net/"&gt;Developer Avocados 🥑 Weekly&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If you’ve read this far, or you’re considering getting into Developer Relations, &lt;a href="https://twitter.com/lakatos88"&gt;reach out on Twitter&lt;/a&gt;! I’m always happy to answer your questions or help you land your first role in DevRel.&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>speaking</category>
      <category>writing</category>
      <category>career</category>
    </item>
    <item>
      <title>A LinkedIn For Newbies (Updated)</title>
      <author>Rotimi</author>
      <pubDate>Tue, 04 May 2021 04:54:16 +0000</pubDate>
      <link>https://dev.to/rotimi_je_suis/a-linkedin-for-newbies-updated-104a</link>
      <guid>https://dev.to/rotimi_je_suis/a-linkedin-for-newbies-updated-104a</guid>
      <description>&lt;p&gt;KwickBox, &lt;a href="https://kwickbox.cloud"&gt;https://kwickbox.cloud&lt;/a&gt; is a new innovative career platform developed specifically for newbies and job seekers with little or no working experience.&lt;/p&gt;

&lt;p&gt;Over the years, LinkedIn has largely favored job seekers with considerably amount of working experience (4+). A job seeker not having work experience does not mean they aren't capable or talented. There are many job seekers with amazing talents that an overlooked. The talent industry needs change.&lt;/p&gt;

&lt;p&gt;It also provides a public platform to showcase the profiles and front pages of job seekers with little or no working experience to recruiters and employers. The platform provides a dead simple user interface where users can easily invite friends and colleagues to review their C.V online&lt;/p&gt;

&lt;p&gt;KwickBox provides a simple user interface which makes setting up a professional C.V site easy as pie. Another interesting feature in the platform is the online C.V review feature. With this feature, users are able to collect diverse feedback from friends and colleagues by simply sharing their C.V site link.&lt;/p&gt;

&lt;p&gt;The project started as a side project. Currently it has 1K+ daily active users and is growing rapidly.&lt;/p&gt;

&lt;p&gt;I am giving out free premium coupon codes to the next 200 people to register on the platform. With premium, you'll be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Invite people to review your CV online in a simple manner. Said people will be able to rate each section of your CV and add feedback for improvement.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access a geographical map to view locations where your CV has been accessed from.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get featured on the platform's website to lots of recruiters and startup companies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send out requests to referees to provide valid references.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>career</category>
      <category>saas</category>
    </item>
    <item>
      <title>jsf - Faking JSON data from a schema </title>
      <author>Andy Challis</author>
      <pubDate>Tue, 04 May 2021 04:47:08 +0000</pubDate>
      <link>https://dev.to/ghandic/jsf-faking-json-data-from-a-schema-5bj0</link>
      <guid>https://dev.to/ghandic/jsf-faking-json-data-from-a-schema-5bj0</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/ghandic/jsf"&gt;https://github.com/ghandic/jsf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;strong&gt;jsf&lt;/strong&gt; along with fake data generators to provide consistent and meaningful fake data for your system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Provides out of the box data generation from any JSON schema 📦 &lt;/li&gt;
&lt;li&gt;Extendable custom data providers using any lambda functions 🔗&lt;/li&gt;
&lt;li&gt;Multi level state for dependant data (eg multiple objects sharing value, such as children with same surname) 🤓 &lt;/li&gt;
&lt;li&gt;Inbuilt validation of fake JSON produced ✅&lt;/li&gt;
&lt;li&gt;In memory conversion from JSON Schema to Pydantic Models with generated examples 🤯&lt;/li&gt;
&lt;li&gt;Seamless integration with &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt; 🚀&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;jsf
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;---&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;100%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic"&gt;
  &lt;/a&gt;
  Basic 😊
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jsf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSF&lt;/span&gt;

&lt;span class="n"&gt;faker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"$provider"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"faker.name"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"$provider"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"faker.email"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;"required"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fake_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Results in ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Jesse Phillips'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'xroberson@hotmail.com'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#from-json-file"&gt;
  &lt;/a&gt;
  From JSON file 📁
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jsf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSF&lt;/span&gt;

&lt;span class="n"&gt;faker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSF&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"demo-schema.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fake_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or run stright from the &lt;code&gt;commandline&lt;/code&gt;...&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#native-install" class="anchor"&gt;
  &lt;/a&gt;
  Native install
&lt;/h4&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;jsf &lt;span class="nt"&gt;--schema&lt;/span&gt; src/tests/data/custom.json &lt;span class="nt"&gt;--instance&lt;/span&gt; wow.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#docker" class="anchor"&gt;
  &lt;/a&gt;
  Docker
&lt;/h4&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;:/data challisa/jsf jsf &lt;span class="nt"&gt;--schema&lt;/span&gt; /data/custom.json &lt;span class="nt"&gt;--instance&lt;/span&gt; /data/example.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#fastapi-integration"&gt;
  &lt;/a&gt;
  FastAPI Integration 🚀
&lt;/h3&gt;

&lt;p&gt;Create a file main.py with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jsf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSF&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docs_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSF&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"custom.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/generate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pydantic&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_root&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the server with:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;uvicorn main:app &lt;span class="nt"&gt;--reload&lt;/span&gt;
&lt;span class="go"&gt;
INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [28720]
INFO:     Started server process [28722]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Navigate to &lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; and check out your endpoint. Notice the following are all automatically created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Schema with descriptions and examples&lt;/li&gt;
&lt;li&gt;Example response&lt;/li&gt;
&lt;li&gt;Data generation by clicking "try it out"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XwvoaBgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kli4ipus7thnm1ia86zr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XwvoaBgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kli4ipus7thnm1ia86zr.png" alt="Example Swagger UI - Page 1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TT-fVKAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoony7l0jkdttf4v11lg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TT-fVKAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoony7l0jkdttf4v11lg.png" alt="Example Swagger UI - Page 2"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XviRJLM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uex78wxjmsh3bovkbro9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XviRJLM_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uex78wxjmsh3bovkbro9.png" alt="Example Swagger UI - Page 3"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJadl7eZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grxjocvh8dojvn000pj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJadl7eZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/grxjocvh8dojvn000pj4.png" alt="Example Swagger UI - Page 4"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>json</category>
      <category>faker</category>
      <category>fastapi</category>
    </item>
    <item>
      <title>Crash course in Asynchronous JavaScript (Part 1)</title>
      <author>Chinmay Mhatre</author>
      <pubDate>Tue, 04 May 2021 04:12:21 +0000</pubDate>
      <link>https://dev.to/chinmaymhatre/crash-course-in-asynchronous-javascript-part-1-4g2o</link>
      <guid>https://dev.to/chinmaymhatre/crash-course-in-asynchronous-javascript-part-1-4g2o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Asynchronous JavaScript can be a daunting concept to learn. However, it is a essential tool in the toolkit of a JavaScript programmer. It can be used to improve the user experience. We'll understand more about the importance of Asynchronous code as we go along further in the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-that-well-look-into-"&gt;
  &lt;/a&gt;
  Topics that we'll look into :
&lt;/h2&gt;

&lt;p&gt;Part 1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript Call Stack&lt;/li&gt;
&lt;li&gt;What Does Asynchronous Mean&lt;/li&gt;
&lt;li&gt;AJAX&lt;/li&gt;
&lt;li&gt;APIs and WebAPIs&lt;/li&gt;
&lt;li&gt;CallBacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part 2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Async and Await&lt;/li&gt;
&lt;li&gt;Making Http Request&lt;/li&gt;
&lt;li&gt;API Project&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Basic knowledge of JavaScript is required.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;The goal here is to have an understanding about how all the puzzle pieces fit into the bigger picture.&lt;/p&gt;

&lt;p&gt;Let us begin by understanding how JavaScript works .&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-call-stack"&gt;
  &lt;/a&gt;
  JavaScript call stack
&lt;/h1&gt;

&lt;p&gt;JavaScript is a single threaded language. It means that JavaScript can only run one piece of code at a time. It does so using something called as the &lt;strong&gt;Call Stack&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Call stack is how the JavaScript engine keeps track of its place in the script and also manages the different function calls. Stack is a data structure which operates on the LIFO(Last in first out) principle .&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lDux3VMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/51131670/116772550-7a016100-aa6d-11eb-90d3-d5848092fb0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lDux3VMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/51131670/116772550-7a016100-aa6d-11eb-90d3-d5848092fb0b.png" alt="stack"&gt;&lt;/a&gt;&lt;br&gt;
Here we can see "3" comes last in the stack so it will be the first one to be executed and after it is executed it will be popped off the stack.&lt;br&gt;
We can visualize this using a tool called &lt;a href="http://latentflip.com/loupe/?code=Y29uc29sZS5sb2coInN0YXJ0IikKc2V0VGltZW91dChmdW5jdGlvbigpeyBjb25zb2xlLmxvZygid2l0aGluIHRoZSBmdW5jdGlvbiIpfSwxMDAwKQpjb25zb2xlLmxvZygiZW5kIik%3D!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D"&gt;loupe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;End&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Egjao9Mm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/51131670/116772686-64d90200-aa6e-11eb-8c13-53f05a3fbfa5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Egjao9Mm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/51131670/116772686-64d90200-aa6e-11eb-8c13-53f05a3fbfa5.png" alt="flow 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we run this code the first log goes into the call stack.&lt;/li&gt;
&lt;li&gt;After execution, it is popped off the call stack &lt;/li&gt;
&lt;li&gt;Then the second log is pushed into the stack. &lt;/li&gt;
&lt;li&gt;After execution it is popped off and the program ends &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what we call synchronous flow (One after the other).&lt;br&gt;
Whenever we search anything on google, we see that the page refreshes and waits for the response. This is the default synchronous behavior. The programs waits for the response.  &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-does-asynchronous-mean"&gt;
  &lt;/a&gt;
  What does Asynchronous mean
&lt;/h1&gt;

&lt;p&gt;Let us understand Asynchronous with an example :-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N97JIs6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jfhz7lpww5lfwuc1igz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N97JIs6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jfhz7lpww5lfwuc1igz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whenever we are searching something on the YouTube search bar, we can see suggestions as soon as we start typing .&lt;br&gt;
This basically means that requests are being made to the server behind the scenes to get the suggestion after each letter you type. &lt;br&gt;
This however, doesn't block the UI of the website improving the experience of the user. This is called as an Asynchronous request.&lt;/p&gt;

&lt;p&gt;Let us take an example of the setTimeout function :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;middle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What do you think is the output of this code ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start
middle 
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since JavaScript as we saw is single threaded, the above output should be correct right? But the output is different from what we might expect .&lt;/p&gt;

&lt;p&gt;This is the actual output of the script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start
end
middle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems JavaScript moved ahead by printing start and end first, then the setTimeout ran asynchronously, waited for 1sec and returned the result. So why does this work? How can JavaScript hold the variable and continue executing the code simultaneously?&lt;/p&gt;

&lt;p&gt;So the thing is the setTimeout is actually not part of javascript. It is what we call a browser API . We will understand more about APIs in the next section but hang with me for a bit.&lt;/p&gt;

&lt;p&gt;Web Browser APIs are like super powers provided to us by the browser. For example it can do something like holding a value with setTimeout for a specific amount of time and then returning the value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-of-the-settimeout-function"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;working of the setTimeout function&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--biUT07pb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vle9epegc5h4n9hn1l76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--biUT07pb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vle9epegc5h4n9hn1l76.png" alt="setTimeout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Line one is pushed into the stack and 'start' is printed in the console.&lt;/li&gt;
&lt;li&gt;setTimeout is pushed into the stack.&lt;/li&gt;
&lt;li&gt;The call stack pops the function then asks the browser API that "Hey Browser ! Hold the value in the function for 1 sec and remind me to run it after the time is up" &lt;/li&gt;
&lt;li&gt;The call stack moves ahead with the next line of code and prints 'end' in the console&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the time is completed the browser API then tell the call stack that "Hey remember the function I was holding, you can execute it now".&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GS_xZUCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772561-8f768b00-aa6d-11eb-9991-7701e9ab8552.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GS_xZUCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772561-8f768b00-aa6d-11eb-9991-7701e9ab8552.gif" alt="loki-Trim"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally "middle" is printed in the console.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Asynchronous however is not limited to setTimeout function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-asynchronous-code"&gt;
  &lt;/a&gt;
  why do we need asynchronous code
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Although some requests may not take much time, some requests like getting data from a database or an API may take a few seconds .&lt;/li&gt;
&lt;li&gt;If we make these requests synchronously it will block the UI while getting the data, since JavaScript can perform only one task at a time. This will degrade the user experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some things that may need an Asynchronous request include :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting data from a database.&lt;/li&gt;
&lt;li&gt;Verify user while login and signup.&lt;/li&gt;
&lt;li&gt;Getting JSON data from an external Web API. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#ajax"&gt;
  &lt;/a&gt;
  AJAX
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;AJAX stands for &lt;strong&gt;Asynchronous JavaScript and XML&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;AJAX is not a technology or tool, it is a concept .&lt;/li&gt;
&lt;li&gt;It is just a terminology used for describing asynchronous code.&lt;/li&gt;
&lt;li&gt;When we asynchronously exchange data with the server it is called as an AJAX request.&lt;/li&gt;
&lt;li&gt;We can also update the page without reloading the web page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what does the xml part in ajax means?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we talk about exchanging data with different servers running different technology, there has to be a single format of data that can be understood by all the servers .&lt;/li&gt;
&lt;li&gt;XML and JSON provide us these interfaces which let us transfer data in a format understood by all. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#xml"&gt;
  &lt;/a&gt;
  XML
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;XML stands for  &lt;strong&gt;eXtensible Markup Language&lt;/strong&gt; .&lt;/li&gt;
&lt;li&gt;It is similar to html in the sense that it also uses tags like HTML.&lt;/li&gt;
&lt;li&gt;However the key difference is that, HTML is used for displaying data and XML is used for storing and transferring the data. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  SYNTAX
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;note&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;date&amp;gt;&lt;/span&gt;2015-09-01&lt;span class="nt"&gt;&amp;lt;/date&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;hour&amp;gt;&lt;/span&gt;08:30&lt;span class="nt"&gt;&amp;lt;/hour&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;to&amp;gt;&lt;/span&gt;Tove&lt;span class="nt"&gt;&amp;lt;/to&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;from&amp;gt;&lt;/span&gt;Jani&lt;span class="nt"&gt;&amp;lt;/from&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;This is a reminder&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/note&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  JSON
&lt;/h2&gt;

&lt;p&gt;JSON stands for JavaScript Object Notation. It also is a format for transferring data. It is an alternative to xml. JSON is really easy to read and understand. Even though it looks like JavaScript objects JSON can be used independent of JavaScript to transfer data . Many programming languages have ability to parse and read JSON.&lt;/p&gt;

&lt;p&gt;The two primary parts that make up JSON are keys and values. Together they make a key/value pair.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Key : A key is always a string enclosed in quotation marks.&lt;/li&gt;
&lt;li&gt;Value : A value can be a string, number, Boolean expression, array, or object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSON is a more popular format than XML.&lt;/p&gt;

&lt;p&gt;Anyone who is familiar with JavaScript objects will understand JSON very easily.&lt;br&gt;
modern APIs mostly use JSON to transfer and store data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"squadName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Super hero squad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homeTown"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Metro City"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"formed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"secretBase"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Super tower"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"members"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Molecule Man"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"secretIdentity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Dan Jukes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Madame Uppercut"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"secretIdentity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jane Wilson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;   
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#what-is-an-api"&gt;
  &lt;/a&gt;
  What is an API?
&lt;/h1&gt;

&lt;p&gt;API is the acronym for &lt;strong&gt;Application Programming Interface&lt;/strong&gt;.&lt;br&gt;
 API is an interface which has a set of functions that allow programmers to access specific features or data of an application, operating system or other services.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#web-apis"&gt;
  &lt;/a&gt;
  Web APIs
&lt;/h3&gt;

&lt;p&gt;Often when we talk about APIs in terms of web development the APIs refer to 'Web APIs'. &lt;/p&gt;

&lt;p&gt;Web API as the name suggests, is an API over the web which can be accessed using HTTP protocol.&lt;/p&gt;

&lt;p&gt;Typically when we make a request to a webpage we get all sorts of data like html, CSS, JavaScript. On the contrary when we make asynchronous request through JavaScript we might want a particular part of the data.&lt;/p&gt;

&lt;p&gt;Web API takes requests from the different type of client devices like mobile, laptop, etc. and sends them to the web-server to process it and returns the desired data to the client.&lt;/p&gt;

&lt;p&gt;For example: Twitter's APIs provide access to read and write data using which we can integrate twitter's capabilities into our own application. We could for instance, get data about the users tweets and use it in our own application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RMZqRp7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/51131670/116772555-85548c80-aa6d-11eb-8265-b0333694083b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RMZqRp7S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/51131670/116772555-85548c80-aa6d-11eb-8265-b0333694083b.png" alt="api"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The data given by the API can be anything for example : images, JSON objects etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We'll understand these APIs HTTP requests in detail a little later but stick with me for a while .&lt;/li&gt;
&lt;li&gt;API requests are like any other HTTP request you make to different websites in the search bar like google, Facebook etc. but response from the API is without the unwanted data (html, css etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take an example to understand this better &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/%24%7Bid%7D.png"&gt;https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a Pokémon API .It returns an image of a Pokémon when we send it a request. we have to replace the id with the id of the Pokémon we want . 1 is Bulbasaur etc.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfkBEa60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jrg4a733q2qlf4szhsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfkBEa60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jrg4a733q2qlf4szhsx.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This is what we get when we send a request to  &lt;a href="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png"&gt;https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png&lt;/a&gt;  .&lt;/p&gt;

&lt;p&gt;You all can also give it a try! Just put the above link in the browser and you'll get back the image. You can also try changing the id to see what different results you get.&lt;br&gt;
It is just like any other http request but only with the data(image).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#query-strings"&gt;
  &lt;/a&gt;
  Query Strings
&lt;/h2&gt;

&lt;p&gt;In the URL of the API we had to replace the id of the image according to what we want.&lt;br&gt;
That is basically a query string. It request the data according to the value we pass in the query string .&lt;/p&gt;

&lt;p&gt;Let take another example &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://api.tvmaze.com/search/shows?q=:query"&gt;http://api.tvmaze.com/search/shows?q=:query&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is another API that we will be using later. &lt;/p&gt;

&lt;p&gt;In the url, &lt;code&gt;?q=:query&lt;/code&gt; is called as the query string and &lt;code&gt;:query&lt;/code&gt; is a variable. The response changes according to the value of the query variable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://api.tvmaze.com/search/shows?q=flash"&gt;http://api.tvmaze.com/search/shows?q=flash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://api.tvmaze.com/search/shows?q=brooklyn99"&gt;http://api.tvmaze.com/search/shows?q=brooklyn99&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the Pokémon API, we took a simple example which returns the data instantaneously. However, some actions like retrieval of information from a database may take some more time or might even get rejected. Thus we have to take into consideration handling the errors that we might get.&lt;/p&gt;

&lt;p&gt;We will discuss the various ways to make async request in a few sections.&lt;br&gt;
But before that we'll have to see how to handle the failure of the asynchronous request.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#callback-function"&gt;
  &lt;/a&gt;
  Callback function
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.&lt;/p&gt;

&lt;h2&gt;Whatttttt!!!!&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hFTuOI9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772565-92717b80-aa6d-11eb-8b3d-732c5602c916.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFTuOI9O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772565-92717b80-aa6d-11eb-8b3d-732c5602c916.gif" alt="neville"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; 
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let us assume there are 2 functions &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We pass these two function as arguments to a third function called &lt;code&gt;check&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;check&lt;/code&gt; is executed it calls the &lt;code&gt;success&lt;/code&gt; function if the variable 'a' is equal to 2 else it calls the &lt;code&gt;fail&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt; function are called as callback functions since they are passed as arguments and invoked within a &lt;code&gt;check&lt;/code&gt; function after something happens.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alright! Let's bring out our friendly neighborhood &lt;code&gt;setTimeout&lt;/code&gt; function again.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As we know there are 2 parameters to the setTimeout function . First is a function and second is a delay .
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us make a function and pass it to setTimeout&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I Have been waiting for 3 sec !!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;setTimeout&lt;/code&gt; which is like an outer function calls the "message" function which is an argument. Here, &lt;code&gt;message&lt;/code&gt; function is a callback function. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let us see how the setTimeout is defined.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="cm"&gt;/*
some code which will hold the value for 3 secs 
*/&lt;/span&gt;
&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We see that the function(message) which was passed to &lt;code&gt;setTimeout&lt;/code&gt; as an argument was called within setTimeout.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#passing-callbacks-may-not-be-the-best-way"&gt;
  &lt;/a&gt;
  Passing callbacks may not be the best way
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Suppose we want to write a script in which we have to execute multiple async operations but only after the previous operation completes . In this scenario callbacks may not be our best option. Let us see why.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's say we are writing a function to change the background colour of the body to the different colors of the rainbow. However, each colour should appear 1 sec apart from each other. For example red appears after 1 sec, orange appears after 2, yellow appears after 3 and so on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFLdqqlv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772534-5dfdbf80-aa6d-11eb-9de0-62ebc01052f6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFLdqqlv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772534-5dfdbf80-aa6d-11eb-9de0-62ebc01052f6.gif" alt="rainbow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We understand that we can use the setTimeout to delay the colours. However, we cannot just use them independent of each other, since we will have to calculate the delay.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* assume that red , orange , yellow are
 the functions to change the bg color to the respective colour.*/&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We could pass a callback to a function which basically runs the next setTimeout only after the previous &lt;code&gt;setTimeout&lt;/code&gt; finishes. &lt;/li&gt;
&lt;li&gt;It'll look something like this :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delayedColorChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doNext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;doNext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;So, how will we go about calling this function?&lt;/li&gt;
&lt;li&gt;let's say we want to change the colour to red then to orange.&lt;/li&gt;
&lt;li&gt;The "doNext" argument will contain a callback that again calls the delayedColorChange function but now with the colour as orange. something like this
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;delayedColorChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,()&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;delayedColorChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;//This function will be empty since we want to end the &lt;/span&gt;
&lt;span class="c1"&gt;//color change &lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now lets say we want to change the colour to yellow after orange.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;delayedColorChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,()&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;delayedColorChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;delayedColorChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//This function will be empty since we want to end the &lt;/span&gt;
      &lt;span class="c1"&gt;//color change &lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's now make a full rainbow.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;delayedColorChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;delayedColorChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;delayedColorChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;delayedColorChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;delayedColorChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;delayedColorChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;indigo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;delayedColorChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;violet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                             &lt;span class="c1"&gt;//This function will be empty since &lt;/span&gt;
                             &lt;span class="c1"&gt;//we want to end the &lt;/span&gt;
                            &lt;span class="c1"&gt;//color change&lt;/span&gt;
                        &lt;span class="p"&gt;})&lt;/span&gt;
                    &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It gets a little confusing as we go on nesting more callbacks.&lt;/li&gt;
&lt;li&gt;Even though we just used one callback function here it got pretty crazy. APIs or any kind of async request will have two of them, success and failure. In that case, there will be a lot of nesting .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGac5qZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772563-91d8e500-aa6d-11eb-89be-f893e68c7249.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGac5qZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772563-91d8e500-aa6d-11eb-89be-f893e68c7249.gif" alt="nesting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let us assume &lt;code&gt;fakeRequestCallback(url,success,failure)&lt;/code&gt; is a fake function that will request the URL for data.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; are two callback functions.&lt;/li&gt;
&lt;li&gt;If no error, &lt;code&gt;success&lt;/code&gt; is called, else the &lt;code&gt;failure&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;Here is what happens when we make requests to multiple pages but only after the previous request is successful, similar to the rainbow function.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fakeRequestCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;books.com/page1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;fakeRequestCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;books.com/page2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;fakeRequestCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;books.com/page3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ERROR (3rd req)!!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ERROR (2nd req)!!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ERROR!!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIKkpn55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772533-5ccc9280-aa6d-11eb-9ed3-5fb00ba2c259.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZIKkpn55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/51131670/116772533-5ccc9280-aa6d-11eb-9ed3-5fb00ba2c259.gif" alt="sigh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#welcome-to-callback-hell-"&gt;
  &lt;/a&gt;
  Welcome to callback hell .
&lt;/h4&gt;

&lt;p&gt;If there are multiple async operations to be performed and we try to use our good-old callbacks , we’ll find ourselves in the callback hell .&lt;/p&gt;

&lt;p&gt;Let us see if there is a better way in &lt;a href="https://dev.to/chinmaymhatre/crash-course-in-asynchronous-javascript-part-2-29jn"&gt;part 2&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>MySwiftUI Notes 3.1</title>
      <author>4-in-1 Telecommunications</author>
      <pubDate>Tue, 04 May 2021 03:30:01 +0000</pubDate>
      <link>https://dev.to/tookooltech/myswiftui-notes-3-1-3gi6</link>
      <guid>https://dev.to/tookooltech/myswiftui-notes-3-1-3gi6</guid>
      <description></description>
      <category>swiftui</category>
      <category>xcode</category>
      <category>ios</category>
      <category>github</category>
    </item>
    <item>
      <title>My Very First Post</title>
      <author>Lucas Kelly</author>
      <pubDate>Tue, 04 May 2021 03:09:05 +0000</pubDate>
      <link>https://dev.to/lucaskelly113/my-very-first-post-a4j</link>
      <guid>https://dev.to/lucaskelly113/my-very-first-post-a4j</guid>
      <description>&lt;p&gt;Hi everyone! I have been coding now for about 6 months and I recently took some time away to prepare for camping season :). I'm ready to get back to coding and have a friend inspiring me to start writing about my journey into tech. I figured, why not get my first post out there so I have a starting point to look back on. So here it is... My first post... My first intro. I now have my starting point. &lt;/p&gt;

&lt;p&gt;Talk to you all soon!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>coderdads</category>
      <category>python</category>
    </item>
    <item>
      <title>Azure App Service Authentication (Ez Auth) with Azure AD B2C</title>
      <author>Christos Matskas</author>
      <pubDate>Tue, 04 May 2021 01:29:46 +0000</pubDate>
      <link>https://dev.to/425show/azure-app-service-authentication-ez-auth-with-azure-ad-b2c-30k4</link>
      <guid>https://dev.to/425show/azure-app-service-authentication-ez-auth-with-azure-ad-b2c-30k4</guid>
      <description>&lt;p&gt;The new version of the Azure App Service Authentication (aka EZ Auth) was announced a couple months back and we recently had one of the PMs, Yafet Woldegabriel, as a guest on the &lt;a href="https://aka.ms/425show"&gt;425 Show&lt;/a&gt; to talk to us about it. You can catch the recording here:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EmaHxGOzwS8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But we wanted to take things one step further and configure Ez Auth to work with Azure AD B2C. Since this is not as straightforward as configuring Azure AD, this blog shows you how to do it step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-the-app-registration-in-b2c"&gt;
  &lt;/a&gt;
  Configure the App Registration in B2C
&lt;/h2&gt;

&lt;p&gt;In Azure AD B2C, create a new App Registration. Give it a name and press &lt;strong&gt;Register&lt;/strong&gt;. Make a note of the &lt;code&gt;Client ID&lt;/code&gt; in the overview tab. Next, open the &lt;strong&gt;Secrets and certificates&lt;/strong&gt; tab and create a new secret. Make a note of it. Last step, navigate to the &lt;strong&gt;Authentication&lt;/strong&gt; tab and add a new &lt;strong&gt;Platform&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I chose Web App since I'm running a .NET Core Web App using Razor Pages. The &lt;strong&gt;Redirect URI&lt;/strong&gt; needs to have the following format:&lt;br&gt;
&lt;code&gt;&amp;lt;your webapp url&amp;gt;/.auth/login/aad/callback&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You also need to, unfortunately, configure Implicit Flow by checking both the ID and Access Tokens:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEAT4p5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg0lndt21et2qwfm3ufc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEAT4p5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg0lndt21et2qwfm3ufc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're all done with the App Registration&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-the-user-flow-in-b2c"&gt;
  &lt;/a&gt;
  Update the User Flow in B2C
&lt;/h2&gt;

&lt;p&gt;Select the sign in/sign up user flow you wish to use with your application. Navigate to the &lt;strong&gt;Properties&lt;/strong&gt; and search for the &lt;strong&gt;Token Compatibility settings&lt;/strong&gt; section. In the &lt;strong&gt;Issuer&lt;/strong&gt; dropdown, update it to use the one with the user flow name in the URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GX-miK2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf8qqinkpehn815ixrlr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GX-miK2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf8qqinkpehn815ixrlr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to press &lt;strong&gt;Save&lt;/strong&gt; to persist the changes... Finally, you want to press the &lt;strong&gt;Run user flow&lt;/strong&gt; so that we can copy the issuer URL. Copy the value, leaving out everything after &lt;code&gt;v2.0/&lt;/code&gt; as per the picture below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pNz8hfjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/barukf6vmluu9qs3v8b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pNz8hfjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/barukf6vmluu9qs3v8b5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-the-authentication-in-the-azure-web-app"&gt;
  &lt;/a&gt;
  Configure the Authentication in the Azure Web App
&lt;/h2&gt;

&lt;p&gt;Navigate to your Web App in the Azure Portal and select the new Authentication tab (the old once has &lt;code&gt;classic&lt;/code&gt; next to it).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkyLuqj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqtlb921u5rr003812wz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkyLuqj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqtlb921u5rr003812wz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press &lt;strong&gt;Add identity provider&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the next tab, select Microsoft and configure the necessary settings based on the information we collected in the previous steps&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FzYEGP8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oemw0vy6n9n9m59wwgrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FzYEGP8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oemw0vy6n9n9m59wwgrt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client ID: the Azure AD B2C App Registration Client ID&lt;/li&gt;
&lt;li&gt;Client Secret: the secret we created earlier&lt;/li&gt;
&lt;li&gt;Issuer URL: should look like this &lt;code&gt;https://&amp;lt;your B2C Name&amp;gt;.b2clogin.com/tfp/&amp;lt;your B2C Name&amp;gt;.onmicrosoft.com/&amp;lt;your user flow name, e.g B2C_1_susi&amp;gt;/v2.0/&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leave everything else as default&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgcwX4EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmfwt9ml2ucurtj7erjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgcwX4EB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmfwt9ml2ucurtj7erjv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Restart your web app and try to navigate to it. You should be presented with the sign in page of your user flow, as per the gif below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkPniVdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e8zh7rzj6drj7fi6jh8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkPniVdu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e8zh7rzj6drj7fi6jh8.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-user-claims"&gt;
  &lt;/a&gt;
  Accessing User Claims
&lt;/h2&gt;

&lt;p&gt;Although Ez Auth is fairly rudimental (an on/off switch for auth), you can still access the user claims via a special URL. This is all documented &lt;a href="https://docs.microsoft.com/en-us/azure/app-service/overview-authentication-authorization"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Principal ID&lt;/code&gt; and &lt;code&gt;Principal Name&lt;/code&gt; values are available as headers in the HTTP Request so your app can look into these. You can also use a specially crafted URL to get the full user claims. the URL is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;your azure web app URL&amp;gt;/.auth/me&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJfmF2Ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phlixljjnbb76xm9x7e0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJfmF2Ya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phlixljjnbb76xm9x7e0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is also documented &lt;a href="https://docs.microsoft.com/en-us/azure/app-service/app-service-authentication-how-to#access-user-claims"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Ez Auth is a great solution for certain scenarios. And now, there is a way to authenticate users to your Azure Web Apps and Azure Functions using B2C and Ez Auth.&lt;/p&gt;

&lt;p&gt;Give it a go and let us know if you have any feedback or questions in the comments.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Configurar EsLint, Prettier junto con VScode</title>
      <author>mrLuisFer</author>
      <pubDate>Tue, 04 May 2021 00:19:06 +0000</pubDate>
      <link>https://dev.to/mrluisfer/configurar-eslint-prettier-junto-con-vscode-3h00</link>
      <guid>https://dev.to/mrluisfer/configurar-eslint-prettier-junto-con-vscode-3h00</guid>
      <description>&lt;h2&gt;
  &lt;a href="#que-es-eslint"&gt;
  &lt;/a&gt;
  ¿Que es EsLint?
&lt;/h2&gt;

&lt;p&gt;ESLint es una herramienta de código abierto enfocada en el proceso de "lintig" para javascript (o más correctamente para ECMAScript)&lt;br&gt;
ESLint es la herramienta predominante para la tarea de "limpiar" código javascript tanto en el servidor (node.js) como en el navegador&lt;/p&gt;

&lt;p&gt;Bueno, ESLint es una herramienta de "linting", por lo que te puede ayudar a:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mostrarte errores de sintaxis.&lt;/li&gt;
&lt;li&gt;Mostrarte errores cuando no se siguen buenas prácticas.&lt;/li&gt;
&lt;li&gt;Proveer sugerencias para mejorar tu código.&lt;/li&gt;
&lt;li&gt;Mantener un estilo consistente en tu código o reforzar reglas internas de tu propio equipo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#que-es-prettier"&gt;
  &lt;/a&gt;
  ¿Que es Prettier?
&lt;/h2&gt;

&lt;p&gt;Es una herramienta para formatear el código, tiene soporte para HMTL, CSS, JavaScript, JSX, TypeScript, GraphQL, etc.&lt;/p&gt;

&lt;p&gt;Se encarga de garantizar que el código se ajuste a un estilo consistente de manera automática. Para ello, analiza el código y lo re-escribe cada vez que se ejecuta.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#que-es-vscode"&gt;
  &lt;/a&gt;
  ¿Que es VScode?
&lt;/h2&gt;

&lt;p&gt;Es un editor de código multiplataforma, totalmente gratis desarrollado por Microsoft&lt;/p&gt;

&lt;p&gt;Incluye soporte para la depuración, control integrado de Git, resaltado de sintaxis, finalización inteligente de código, fragmentos y refactorización de código. &lt;/p&gt;

&lt;p&gt;También es personalizable, por lo que los usuarios pueden cambiar el tema del editor, los atajos de teclado y las preferencias.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#configuraci%C3%B3n"&gt;
  &lt;/a&gt;
  Configuración:
&lt;/h1&gt;

&lt;p&gt;Ahora configuraremos las dependencias que necesitaremos, lo primero es crear nuestro proyecto utilizando&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Inicializa un proyecto utilizando npm para instalar paquetes&lt;/span&gt;
npm init &lt;span class="nt"&gt;--yes&lt;/span&gt;
&lt;span class="c"&gt;# ó&lt;/span&gt;
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Después de eso instalaremos las dependencias necesarias para empezar a configurar Eslint y Prettier&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# --sabe-dev Guarda las dependencia en forma de desarrollo&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; eslint prettier eslint-config-prettier 
eslint-plugin-prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  EsLint
&lt;/h3&gt;

&lt;p&gt;La forma de configurar esLint es creando un archivo de configuración el cual podemos crear o podemos utilizar un comando para crear este archivo según nuestras necesidades:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .eslintrc.js&lt;/span&gt;
module.exports &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  extends: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'eslint:recommended'&lt;/span&gt;,
    &lt;span class="s1"&gt;'plugin:prettier/recommended'&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;,
  rules: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'prettier/prettier'&lt;/span&gt;: &lt;span class="s1"&gt;'warn'&lt;/span&gt;,
  &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;De esta manera será ESLint el que se encargará de ejecutar Prettier.&lt;/p&gt;

&lt;p&gt;O podemos utilizar el siguiente comando que nos mostrara unos pasos para tener pre configurado nuestro archivo de EsLint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Crea el archivo eslint&lt;/span&gt;
npx eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nos mostrara una pequeña serie de pasos para crear nuestro archivo de EsLint:&lt;/p&gt;

&lt;p&gt;Primero seleccionaremos como queremos usar EsLint, si solo para revisar la sintaxis, encontrar problemas o forzar un estilo del codigo&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8e325nmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtelav1z4a6napajyd9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8e325nmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtelav1z4a6napajyd9t.png" alt="Forzar estilo de codigo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora seleccionaremos el tipo de módulos queremos usar, si utilizar &lt;code&gt;import&lt;/code&gt; o &lt;code&gt;require&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9YYHRJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fevafw8pd690184vjl0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9YYHRJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fevafw8pd690184vjl0.png" alt="Modulos en eslint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora podemos seleccionar el Framework que utilizaremos en nuestro proyecto, si &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;VueJs&lt;/strong&gt; o &lt;strong&gt;Vanilla Javascript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fiMJziWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0njafakbtkpetfqx0jbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fiMJziWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0njafakbtkpetfqx0jbf.png" alt="FrameWork para eslint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;También podemos seleccionar si queremos o estamos utilizando TypeScript&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYTxE3yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaafdmxbiqu8awa5pp8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYTxE3yS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaafdmxbiqu8awa5pp8d.png" alt="Typescript con Eslint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y ahora podemos seleccionar el tipo de &lt;strong&gt;Enviroment&lt;/strong&gt; o &lt;strong&gt;Entorno&lt;/strong&gt; para la ejecución de nuestro proyecto si en el Navegador o entorno de NodeJs&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGIMeC_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8gatyjvzp2ipcbxk4yj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGIMeC_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8gatyjvzp2ipcbxk4yj.png" alt="Entorno de web o nodejs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y ahora una parte un tanto importante.&lt;/p&gt;

&lt;p&gt;Podemos utilizar una guía de estilo ya definida, inspeccionar nuestros archivos JavaScript, etc&lt;/p&gt;

&lt;p&gt;En este caso utilizaremos una style guide ya definida&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8oVNOXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jupehqqlhwsmu30x0ghf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8oVNOXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jupehqqlhwsmu30x0ghf.png" alt="Styled Guide de eslint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ahora puedes seleccionar que guía de estilo quieres utilizar en tu proyecto, siendo estas las mas populares, están muy bien construidas y con buenas configuraciones&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;p&gt;Si estas utilizando React, una recomendación es utilizar la guía de Airbnb&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9UgvqNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/murvm23j84jpkj3n3aay.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9UgvqNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/murvm23j84jpkj3n3aay.png" alt="Airbnb guide"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seleccionaremos el formato que queremos utilizar para nuestro archivo de configuración.&lt;/p&gt;

&lt;p&gt;Esto es basado en gustos o preferencias de cada proyecto, en este caso utilizaremos &lt;strong&gt;JSON&lt;/strong&gt; pero cualquier otro formato funciona de la misma manera&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O31Wl_cZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/henxdusoi5f6cuf00n70.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O31Wl_cZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/henxdusoi5f6cuf00n70.png" alt="formato JSON"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Después de estas opciones comprobara las dependencias necesarias, y si no están te mostrara que puedes instalar las dependencias necesarias dependiendo de la configuración antes hecha, y las colocara como dependencia de desarrollo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plkpGxOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0sdcuu99zqtw864ik6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plkpGxOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0sdcuu99zqtw864ik6f.png" alt="Devdependencies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Con esto tendremos nuestro archivo &lt;strong&gt;.eslintrc.json&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h3&gt;

&lt;p&gt;Ahora configuremos Prettier, en la misma documentacion se ha recomendado usar un diferentes formatos como JSON, YAML, TOML y JS&lt;br&gt;
En este ejemplo usaremos JSON que es lo mas sencillo para empezar a configurar&lt;/p&gt;

&lt;p&gt;Entonces crearemos un archivo &lt;strong&gt;.prettierrc&lt;/strong&gt; y dentro del archivo colocaremos las opciones que necesitamos en nuestro proyecto&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"trailingComma"&lt;/span&gt;: &lt;span class="s2"&gt;"es5"&lt;/span&gt;,
  &lt;span class="s2"&gt;"tabWidth"&lt;/span&gt;: 2,
  &lt;span class="s2"&gt;"semi"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"singleQuote"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si tenemos un archivo especifico que queremos o no formatear, por ejemplo los archivos de &lt;strong&gt;Test&lt;/strong&gt;&lt;br&gt;
Podemos colocar en expresiones regulares, que se ignore todos los archivos con cierta extensión&lt;/p&gt;

&lt;p&gt;Inclusive dentro de cada cierto archivo puedes colocar ciertas opciones especificas&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"semi"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"overrides"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"files"&lt;/span&gt;: &lt;span class="s2"&gt;"*.test.js"&lt;/span&gt;,
      &lt;span class="s2"&gt;"options"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"semi"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,&lt;span class="s2"&gt;"tabWidth"&lt;/span&gt;: 2
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;"files"&lt;/span&gt;: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"*.html"&lt;/span&gt;, &lt;span class="s2"&gt;"legacy/**/*.js"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;,
      &lt;span class="s2"&gt;"options"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"tabWidth"&lt;/span&gt;: 4
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora dentro de nuestro archivo de configuración podemos crear diferentes reglas las cuales ayudaran a dar un mejor estilo a nuestro código o para seguir buenas practicas&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KYbyZtOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usd48w5jr5k522adl16t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KYbyZtOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usd48w5jr5k522adl16t.png" alt="Buenas practicas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scripts"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h3&gt;

&lt;p&gt;Con todo listo podemos crear &lt;strong&gt;scripts&lt;/strong&gt; lo cual nos ayudara a automatizar el "linteo" o formatear nuestros archivos simplemente con un comando&lt;/p&gt;

&lt;p&gt;Dentro de nuestro package.json vamos a la sección de scripts, tendremos uno llamado "test" que no utilizaremos por el momento, o si ya tienes mas scripts en tu proyecto, simplemente agrega una coma y puedes colocar estas 3 opciones que explicaremos cada una de sus funciones&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_hE3jyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sugeajc1g8pk0fkp3vjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_hE3jyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sugeajc1g8pk0fkp3vjt.png" alt="Scripts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lint&lt;/strong&gt;&lt;br&gt;
Ejecuta eslint para "lintear" y revisar la sintaxis de &lt;strong&gt;todos&lt;/strong&gt; nuestros archivos en nuestro proyecto&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lint-fix&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ejecuta eslint con el flag &lt;strong&gt;—fix&lt;/strong&gt; que hace que si encuentra un estilo que no se sigue una regla la cual causa un conflicto con eslint, la corrige&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Format&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ejecuta Prettier para formatear todos nuestros archivos&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora solo ejecuta &lt;strong&gt;npm nombreDelComando&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run lint
npm run lint-fix
npm run format
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vscode"&gt;
  &lt;/a&gt;
  VScode
&lt;/h3&gt;

&lt;p&gt;Si estas utilizando el editor de código Visual Studio Code o VScode&lt;/p&gt;

&lt;p&gt;Puedes integrar &lt;strong&gt;EsLint y Prettier&lt;/strong&gt; dentro del mismo editor utilizando las extensiones con el mismo nombre:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDiWaaC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3el8c9mnf7nba9i4hhw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDiWaaC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3el8c9mnf7nba9i4hhw.png" alt="Eslint extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u8paGKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7per4r0yfui73qofigz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8paGKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7per4r0yfui73qofigz.png" alt="Prettier"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Probablemente te aparezca con la palabra &lt;strong&gt;Install&lt;/strong&gt; le darás click ahí para instalarlas&lt;/p&gt;

&lt;p&gt;Después de que estén instaladas, nos iremos a la configuración de Visual Studio Code&lt;/p&gt;

&lt;p&gt;Puedes presionar el shortcut &lt;strong&gt;ctrl + ,&lt;/strong&gt; o en la esquina inferior donde hay un símbolo de una tuerca, darás click y darás en settings&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nx9VT9oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/727pyp0v6v2j8iywpnnh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nx9VT9oD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/727pyp0v6v2j8iywpnnh.png" alt="Ajustes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Te saldrá una ventana nueva, y arriba a la derecha estará un símbolo o icono el cual debes presionar para abrir la configuración en formato JSON ya que así es como se configura VScode&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZkn6Yiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu62n0jm1g2rjbcc08qn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZkn6Yiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eu62n0jm1g2rjbcc08qn.png" alt="Ajustes de VsCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y agregaremos estas configuraciones &lt;strong&gt;básicas&lt;/strong&gt; para tener funcionando las extensiones de Eslint y Prettier en nuestro editor sin necesidad de crear los archivos, lo cual es mas recomendable utilizar en proyectos con mas personas ya que cada desarrollador y desarrolladora tiene su propia configuración&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"editor.defaultFormatter"&lt;/span&gt;: &lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;,
&lt;span class="s2"&gt;"editor.formatOnSave"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
&lt;span class="s2"&gt;"editor.formatOnPaste"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
&lt;span class="s2"&gt;"editor.codeActionsOnSave"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="s2"&gt;"source.fixAll.eslint"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
 &lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;También podemos definir estilos en nuestra configuración para un lenguaje especifico:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"[javascript]"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"editor.defaultFormatter"&lt;/span&gt;: &lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;,
    &lt;span class="s2"&gt;"editor.formatOnSave"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
    &lt;span class="s2"&gt;"editor.tabSize"&lt;/span&gt;: 2
&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;span class="s2"&gt;"[python]"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"editor.tabSize"&lt;/span&gt;: 4
&lt;span class="o"&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y con esto tendremos listo nuestra integración de eslint y prettier en vscode :D&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>javascript</category>
      <category>prettier</category>
    </item>
    <item>
      <title>"Web Developer Basics"</title>
      <author>Cale Cabrera</author>
      <pubDate>Tue, 04 May 2021 00:17:48 +0000</pubDate>
      <link>https://dev.to/caledev/web-developer-basics-4hei</link>
      <guid>https://dev.to/caledev/web-developer-basics-4hei</guid>
      <description>&lt;h1&gt;
  &lt;a href="#web-developers-abc"&gt;
  &lt;/a&gt;
  Web Developers ABC 👶🏻
&lt;/h1&gt;

&lt;p&gt;Every single developer in the world or at least every developer I've met on my journey, when you ask them "Where should I start if I want to become a web developer?" They all will tell you "HTML, CSS and JavaScript". So, let's break it down! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML 1️⃣ 🧡
&lt;/h2&gt;

&lt;p&gt;First, our dear friend HTML. Most people say HTML is the "skeleton" of your website and I agree. HTML allows you to structure and give a shape to your page, like the skeleton of your body. It is really important to learn and absorb it completely, you must be able to understand how it works and how to manipulate it for sure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS 2️⃣ 💙
&lt;/h2&gt;

&lt;p&gt;Beautiful and stylish CSS, the perfect words to define CSS. If you have a skeleton, so, you need a skin on it, a tool to beautify this hollow and empty skeleton. Once you master it, once you are able to apply content box, animations, flexbox, grid, etc. Probably, you think you're a master of CSS, let me broke your little heart and tell you that there's a wonderful world beyond CSS, from preprocessors such as sass, stylus and less to frameworks such as bootstrap, materialize, tailwind and so much more to learn. Don't worry, I promise you it's really cool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript 3️⃣ 💛
&lt;/h2&gt;

&lt;p&gt;Last but not least, JavaScript. If HTML is the skeleton and CSS the skin, what is JavaScript? JavaScript my friend is the essence of the body for me. It's what brings life to your static and boring website. JavaScript has the power of adding more fun and dynamism to any website. Simply beautiful.&lt;br&gt;
After a while using JavaScript and doing some dynamic pages, you'll ask yourself if there's a way to create more complex websites such as Facebook, YouTube, Netflix and even Only Fans 🙀 Just kidding, but yes. Here's where frameworks come out! React, Angular and Vue are the most popular and probably one of the frameworks you'll use sooner than later. Front-end frameworks are a really helpful and valuable tool for web developers and I'm pretty sure I'll be writing a post about in the future. For now, JavaScript is more than enough and a MUST for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-it-is-it"&gt;
  &lt;/a&gt;
  That's it, is it? 🤔
&lt;/h3&gt;

&lt;p&gt;To sum up, do not be scared of technologies, love them indeed. Doing your own research and find out what's your favorite and what you'll be using to grow as a web developer. Master the basics and go further. 🚀&lt;/p&gt;

&lt;p&gt;What about you? Do you start learning HTML, CSS and JavaScript? 👀&lt;/p&gt;

&lt;p&gt;Your buddy,&lt;br&gt;
Cale ⌨🖱&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Everything you need to know about Styled Components
</title>
      <author>Paul Ccari</author>
      <pubDate>Tue, 04 May 2021 00:12:08 +0000</pubDate>
      <link>https://dev.to/paulclindo/everything-you-need-to-know-about-styled-components-2a6a</link>
      <guid>https://dev.to/paulclindo/everything-you-need-to-know-about-styled-components-2a6a</guid>
      <description>&lt;p&gt;When I started learning CSS, it seems pretty straightforward to play with some selectors and apply styles to any elements but as bigger, as my projects get, my style sheets look more chaotic and you've probably experienced it for yourself. At some point, it gets hard to figure out a good way to organize your styles.&lt;/p&gt;

&lt;p&gt;Then you probably jump to use some preprocessors like SASS, LESS which add a lot of useful features but they don't do much to control CSS specificity unless you start using some methodologies like BEM (Block, Element, Modifier) which allows reuse of existing code without duplications and divide UI into independent blocks.&lt;/p&gt;

&lt;p&gt;After a couple of years, a new paradigm of CSS-in-JS appears and tries to solve these problems to construct and manage our styles in a component-specific manner to allows us to create custom, exportable components.&lt;/p&gt;

&lt;p&gt;One of them is Styled Components, it provides us many cool features to style our React components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It generates unique class names for your styles which means that you won't have any issues with duplication, overlap, or misspellings.&lt;/li&gt;
&lt;li&gt;You can adapt styles of a component based on its props which makes dynamic styling.&lt;/li&gt;
&lt;li&gt;Easier to maintain styles no matter how big is your application while still writing CSS you know&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Styled components are available both for React and React Native&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;You can install it running a single command and you're ready to roll:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#style-an-html-element"&gt;
  &lt;/a&gt;
  Style an HTML element
&lt;/h3&gt;

&lt;p&gt;We are going to create a Title component based in an HTML element like &lt;code&gt;h1&lt;/code&gt; to give some styles like giving a purple color and align it to center to use is it in Blog Page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
    color: purple;
    text-align: center;
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BlogPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Personal Blog &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BlogPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#style-a-react-component"&gt;
  &lt;/a&gt;
  Style a React Component
&lt;/h3&gt;

&lt;p&gt;What if we already have a set of custom React components and we want to extend styles? It's almost similar, when you want to style an HTML element, you put a dot. If you want to style the components, you put parentheses and pass the actual component. In this case, we are gonna style a button from &lt;code&gt;material-ui&lt;/code&gt; and adjust his size with css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@material-ui/core/Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FullWidthButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
    width: 300px;
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that you can style pseudo-selectors and classes inside of the styled component if needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    ...

    :hover {
        color: blue;
    }

    ::before {
        content: ' ';
        ...
    }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Styled components works with Tagged template literal under the hood. If you don't know much about it, you can find more info here &lt;a href="https://www.freecodecamp.org/news/a-quick-introduction-to-tagged-template-literals-2a07fd54bc1d/"&gt;FreeCodeCamp&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-global-styles"&gt;
  &lt;/a&gt;
  Creating Global Styles
&lt;/h3&gt;

&lt;p&gt;To give global style, we need to use &lt;code&gt;createGlobalStyle&lt;/code&gt; and create a constant from it and anything inside of here will be styled in our entire application. This will be a component that needs to be called at the Root component and make sure it starts with an uppercase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GlobalStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGlobalStyle&lt;/span&gt;&lt;span class="s2"&gt;`
    body {
        font-family: Roboto;
    }
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GlobalStyles&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adjust-style-based-on-props"&gt;
  &lt;/a&gt;
  Adjust Style based on props
&lt;/h3&gt;

&lt;p&gt;We can set dynamic styles according to props that can be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; based on conditionals.&lt;/p&gt;

&lt;p&gt;A simple case would be to give some styles to stand out recent blog posts we published from all the list. I'm gonna give a gradient color to the background of card.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BlogCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
    ...
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNewPost&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="s2"&gt;`
                background: linear-gradient(to right, red, orange);
            `&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogList&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BlogCard&lt;/span&gt; 
                &lt;span class="na"&gt;isNewPost&lt;/span&gt;
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Everything you need to know about Styled Components"&lt;/span&gt;
                &lt;span class="err"&gt;...&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BlogCard&lt;/span&gt; 
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Learning Tips from my experience as developer"&lt;/span&gt;
                &lt;span class="err"&gt;...&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#style-a-component-based-on-complex-props"&gt;
  &lt;/a&gt;
  Style a component based on complex props
&lt;/h3&gt;

&lt;p&gt;In some scenarios, we will have a prop that can be a string and not only a boolean value which means we will have more conditionals. &lt;/p&gt;

&lt;p&gt;Eg. I have a list of blog post cards and I would love to change the color of its category according to its value. If it's &lt;code&gt;personal&lt;/code&gt; we'll set it to purple color, if it's &lt;code&gt;react&lt;/code&gt; should be orange and if it's &lt;code&gt;git&lt;/code&gt; let's change it to red.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CategoryName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="s2"&gt;`
    font-size: 0.875rem;
    color: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;personal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;purple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;git&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogCard&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            ...
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CategoryName&lt;/span&gt; &lt;span class="na"&gt;category&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CategoryName&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#animations"&gt;
  &lt;/a&gt;
  Animations
&lt;/h3&gt;

&lt;p&gt;To create animations in styled components, we need to import &lt;code&gt;keyframes&lt;/code&gt; and start writing our css animation code. Then we need to reuse that variable where we needed.&lt;/p&gt;

&lt;p&gt;In this case, we'll animate the position of an &lt;code&gt;h1&lt;/code&gt; to go from left ro right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;move&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;keyframes&lt;/span&gt;&lt;span class="s2"&gt;`
    from {
        transform: translateX(0);
    }
    to {
        transform: translateX(100%)
    }
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
    animation: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; 2s ease infinite;
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-and-use-a-theme"&gt;
  &lt;/a&gt;
  Create and use a Theme
&lt;/h3&gt;

&lt;p&gt;To ingrate a theme on our application, we need to use the &lt;code&gt;ThemeProvider&lt;/code&gt;  and pass an object to it's &lt;code&gt;theme&lt;/code&gt; prop. We will use this theme to set colors and fonts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// create Theme object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#123123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#2563eb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Roboto, sans-serif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Montserrat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// how to use it in a styled component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Heading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="s2"&gt;`
    text-align: center;
    color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
    font-family: &lt;/span&gt;&lt;span class="p"&gt;${({&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; // destructuring props
`&lt;/span&gt;

&lt;span class="c1"&gt;// Call ThemeProvider in your Root Component&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt; &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello its from the theme&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Heading&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-css-endraw-prop-to-define-styles"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;css&lt;/code&gt; prop to define styles
&lt;/h3&gt;

&lt;p&gt;Sometimes we don't want to create an extra component to just apply a bit of styling and there it comes &lt;code&gt;css&lt;/code&gt; prop. It works on HTML tags as well as components and supports everything styled components support including props, theme and custom components.&lt;/p&gt;

&lt;p&gt;To enable support for the css prop you have to use a babel plugin or macro.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage with the &lt;a href="https://styled-components.com/docs/tooling#babel-plugin"&gt;babel plugin&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Babel plugin does that automatically!&lt;/span&gt;

&lt;span class="c1"&gt;// HTML element&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
  &lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
    background: papayawhip;
    color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  `&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Custom component&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Title&lt;/span&gt;
  &lt;span class="na"&gt;css&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"padding: 0.5em 1em;"&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Usage with Babel macro&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// You need to import it manually&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styled-components/macro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Custom component&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
  &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
    background: papayawhip;
    color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
  `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that Babel plugin or macro turns any elements with a css prop into a styled components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-as-endraw-prop-to-reassign-the-html-tag"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;as&lt;/code&gt; prop to reassign the HTML tag
&lt;/h3&gt;

&lt;p&gt;In some instances, we want to keep all styling we've applied to a component but just change what element/component is rendering. &lt;/p&gt;

&lt;p&gt;I usually use it when it comes about anchor tags and buttons. We don't need to rewrite the css rules and create a component for our anchor tag when it has the same look and feel with our buttons. Instead, we can use &lt;code&gt;as&lt;/code&gt; and then pass the attributes the anchor needs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="s2"&gt;`
    ...
`&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.google.com.pe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Go&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-attrs-endraw-method-to-add-html-attributes"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;attrs&lt;/code&gt; method to add HTML attributes
&lt;/h3&gt;

&lt;p&gt;It allows us to change and add attributes to our styled elements. The &lt;code&gt;attrs&lt;/code&gt; object accepts either any type of attributes that belongs to HTML tags or a function that receives props to finally merged them into existing component props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// In this case, type `button` is going to override whatever is in component&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="s2"&gt;`
    display: inline-block;
    ...
`&lt;/span&gt;

&lt;span class="c1"&gt;// We can use props&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;&lt;span class="s2"&gt;`
    display: inline-block;
    ...
`&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-styled-components-with-the-object-syntax"&gt;
  &lt;/a&gt;
  Use Styled Components with the Object Syntax
&lt;/h3&gt;

&lt;p&gt;There is also another way that we can style components, we can use object-based styling. Let's see how different that is. At the end, both ways do exactly the same thing and they are just different ways of writing styled components&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;small&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// by default its pixel&lt;/span&gt;
    &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sans-serif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h2&gt;

&lt;p&gt;As you can see, it's actually pretty easy to understand and start using styled-components in your React applications. There are cool features that can help us to custom our component the way we want, make some dynamic styling using props, creating a theme and so on. So I would encourage you to dive into &lt;a href="https://github.com/styled-components/styled-components"&gt;the documentation&lt;/a&gt; and try it out on your projects. &lt;/p&gt;

&lt;p&gt;Here are a few miscellaneous link related that help me to understand more about styled components &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/build-your-own-styled-components-library/"&gt;Build your own styled-components library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/a-quick-introduction-to-tagged-template-literals-2a07fd54bc1d/"&gt;A quick introduction to Tagged Template Literals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/styled-components/announcing-native-support-for-the-css-prop-in-styled-components-245ca5252feb"&gt;Enabling support for the css prop in Styled components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you enjoyed it. Thanks for reading! &lt;/p&gt;

&lt;p&gt;... As always, enjoy your own process of learning 🚀&lt;/p&gt;

&lt;p&gt;Feel free to &lt;a href="https://paulccari.com"&gt;reach out&lt;/a&gt; if you wanna chat about anything.&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>20 JavaScript Job Interview Questions to Know with Answers</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 03 May 2021 22:50:03 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/20-javascript-job-interview-questions-to-know-with-answers-1cmc</link>
      <guid>https://dev.to/ubahthebuilder/20-javascript-job-interview-questions-to-know-with-answers-1cmc</guid>
      <description>&lt;p&gt;You applied for a job as a web developer few days back. An interview was scheduled and you're worried that your knowledge of JavaScript is sub-par. &lt;/p&gt;

&lt;p&gt;If that is the case, well you're in luck! If not, you are still going to gain some information for any future interviews you are part of.&lt;/p&gt;

&lt;p&gt;Below are 20 common job interview questions on JavaScript, along with their respective answers:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-javascript"&gt;
  &lt;/a&gt;
  What is JavaScript
&lt;/h3&gt;

&lt;p&gt;Well let's be honest, You probably will be thinking this is such an easy question. But you may be surprised at how bad you'll fumble when trying to explain what JavaScript is to your potential boss. JavaScript is  the language used to write programs on websites and web apps. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-dom"&gt;
  &lt;/a&gt;
  What is the DOM
&lt;/h3&gt;

&lt;p&gt;The Document Object Model (DOM) is a tree-like, top down representation of your web page and all it's elements. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TLiKmCVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwqm3v7nwavmni35za6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TLiKmCVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwqm3v7nwavmni35za6j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mention-5-javascript-methods-for-dom-manipulation-and-explain-their-uses"&gt;
  &lt;/a&gt;
  Mention 5 JavaScript methods for DOM manipulation and explain their uses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;createElement()&lt;/strong&gt;: This method creates a new HTML element in the web page. It takes a single parameter, which is the name of the element to be created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;querySelector()&lt;/strong&gt;: this method is used to target elements based on any CSS selector. It always returns the first element that matches one or more CSS selectors. It takes the selector as parameter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;querySelectorAll()&lt;/strong&gt;: while querySelector returns only the first instance that matches, this method returns all the elements that matches one or more CSS selectors. The elements are returned in a nodelist, which is similar to a JavaScript object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;getElementById()&lt;/strong&gt;: as it's name suggests, this method gets an element based on it's unique id attribute.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;addEventListener()&lt;/strong&gt;: This method attaches an event listener to an element in the DOM. It takes a function as an additional parameter. When that element gets triggered by the set event, the callback function will run.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-are-variables"&gt;
  &lt;/a&gt;
  What are Variables
&lt;/h3&gt;

&lt;p&gt;All programming languages work with data and variables are simply containers for that data. When assigned to a variable, that data becomes the 'value'&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#define-and-explain-the-variable-declarations-in-javascript"&gt;
  &lt;/a&gt;
  Define and explain the variable declarations in JavaScript
&lt;/h3&gt;

&lt;p&gt;The difference between var, let, and const in JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Var&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is globally scoped&lt;/li&gt;
&lt;li&gt;When used to define a variable within a function, that variable is inaccessible outside that function&lt;/li&gt;
&lt;li&gt;It is reassignable&lt;/li&gt;
&lt;li&gt;It's not block scoped&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Const&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is used to store immutable/unchanging values.&lt;/li&gt;
&lt;li&gt;It is not globally scoped&lt;/li&gt;
&lt;li&gt;When used to define a variable within a function, that variable is inaccessible outside that function&lt;/li&gt;
&lt;li&gt;It is block scoped. That is, it's inaccessible outside blocks like if conditionals and for loops.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is not globally scoped&lt;/li&gt;
&lt;li&gt;It is reassignable&lt;/li&gt;
&lt;li&gt;When used to define a variable within a function, that variable is inaccessible outside that function&lt;/li&gt;
&lt;li&gt;It is block scoped.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;N/B: If you're interested in learning more about modern JavaScript, I'll recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React,: The Ultimate Guide by Sleepless Yogi&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-is-asynchronous-programming"&gt;
  &lt;/a&gt;
  What is Asynchronous programming
&lt;/h3&gt;

&lt;p&gt;Asynchronous programming is the principle of making code run later and not immediately/sequentially. This is achieved with Callbacks, Promises and other Async patterns.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explain-global-scoping-and-local-scoping"&gt;
  &lt;/a&gt;
  Explain Global scoping and local scoping
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global variables can be accessed from anywhere in the script.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Local variables, on the other hand, have function scoping. This means that a variable define in a function is not accessible outside that function. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-nodejs-and-what-does-it-do"&gt;
  &lt;/a&gt;
  What is Node.js and what does it do
&lt;/h3&gt;

&lt;p&gt;Node.js is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine for executing JavaScript code. Remember that before JavaScript used to run only on browsers. You couldn't run JavaScript in any other environments. However, with the coming of Node.js, you could now run JavaScript on web servers independent of a web browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-all-the-data-types-in-javascript"&gt;
  &lt;/a&gt;
  List all the data types in JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt; Symbol (ES6)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-currying"&gt;
  &lt;/a&gt;
  What is Currying
&lt;/h3&gt;

&lt;p&gt;Currying is a technique which happens when you take a function that would require multiple arguments and return a series of functions that take exactly one argument&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Presenting Research&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;415&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3 - 6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exhibit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Emerging Scholarship&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dyan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setStrongHallProgram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="na"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6 a.m. - 6 p.m.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jally Ave&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;555-555-5555&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;programs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setStrongHallProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exhibit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setStrongHallProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exhibit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list-and-explain-all-array-iterator-methods"&gt;
  &lt;/a&gt;
  List and explain all array iterator methods
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Map()&lt;/strong&gt;: This method loops through an array and always returns an array. You can then define some action which will be applied to all items in the array. For example, you could say that all numbers in an array be divided by two.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;filter ()&lt;/strong&gt;: This method loops through an array collection and returns another array based on the filter condition. For example, you say that it should filter only ages which is below 50 and all numbers above 50 will not be included.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;find ()&lt;/strong&gt;: This is quite similar to filter(). The main difference is that this method returns only the first instance that matches the condition. Every subsequent match will be ignored.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sort()&lt;/strong&gt;: This method loops through an array and returns another re-ordered array. The new order is based on the condition stipulated. For example, you can sort all names alphabetically, either in an ascending or descending order.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;forEach()&lt;/strong&gt;: This method loops through an array and performs a consistent action on all items in it. It doesn't return a new array. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reduce()&lt;/strong&gt;: This method is used to  transform an array into a completely new one, making radical changes to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-any-5-new-features-you-know-in-es6"&gt;
  &lt;/a&gt;
  List any 5 new features you know in ES6
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript Classes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arrow functions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Introduction of let and const keywords for variable declarations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The for/of loop. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default Parameter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rest and Spread Operators&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What is React
&lt;/h3&gt;

&lt;p&gt;React is a modern, u opinionated JavaScript library used to build modular and resusable UI Components like buttons as well as single-page applications. React utilitizes the virtual DOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-virtual-dom"&gt;
  &lt;/a&gt;
  What is the virtual DOM
&lt;/h3&gt;

&lt;p&gt;A virtual DOM is a lightweight JavaScript representation of the DOM used in declarative web frameworks such as React and Vue.js, . Updating the virtual DOM is comparatively faster than updating the real DOM, since nothing has to be rendered onto the screen. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-classes-write-a-typical-syntax-for-defining-a-class"&gt;
  &lt;/a&gt;
  What are classes. Write a typical syntax for defining a class
&lt;/h3&gt;

&lt;p&gt;Classes are blueprints for objects.  To illustrate, you can think of an architectural plan for a building as a class, and the final building gotten from that plan as an object. The architectural plan won't have properties such as its color, kind of furniture to be used etc. All of those properties will be supplied when "constructing" the building, which is the object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Getter&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calcArea&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Method&lt;/span&gt;
  &lt;span class="nx"&gt;calcArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-are-objects"&gt;
  &lt;/a&gt;
  What are Objects
&lt;/h3&gt;

&lt;p&gt;When a class gets "instantiated", an object is constructed. Objects are data structures which have attributes that came in name: value pairs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distinguish-arrow-function-from-named-function"&gt;
  &lt;/a&gt;
  Distinguish arrow function from named function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;namedFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is a named function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is an arrow function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-are-libraries"&gt;
  &lt;/a&gt;
  What are Libraries
&lt;/h3&gt;

&lt;p&gt;Libraries are already-made packages of code/modules which can be imported into another program to perform a specific task.&lt;/p&gt;

&lt;p&gt;Example of this is lodash, which contains a set of utility functions for some common tasks in programming like sorting etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-typescript-and-when-should-i-use-it"&gt;
  &lt;/a&gt;
  What is Typescript and when should I use it
&lt;/h3&gt;

&lt;p&gt;Typescript is a superset of JavaScript; it contains all of JavaScript's syntax plus some additional functionality. It is used to write strongly typed JavaScript with type checking mechanisms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#buy-me-a-pineapple"&gt;
  &lt;/a&gt;
  Buy me a pineapple 😋
&lt;/h3&gt;

&lt;p&gt;Yep! If you liked this article, I'll appreciate you buying me my favorite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
