<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Most Common Git Mistakes</title>
      <author>Animesh Dhanuk</author>
      <pubDate>Wed, 19 May 2021 13:31:33 +0000</pubDate>
      <link>https://dev.to/animeshdhanuk/most-common-git-mistakes-4f8</link>
      <guid>https://dev.to/animeshdhanuk/most-common-git-mistakes-4f8</guid>
      <description>&lt;p&gt;Many newbies tend to make mistakes, especially at the beginning. This is completely normal, as Git can get very complex, depending on the project's size. I want to accelerate your learning success with Git in this article by showing you the 7 most common Git errors, more specifically Git problems, and how you can easily solve them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-discard-changes-to-local-files"&gt;
  &lt;/a&gt;
  1. Discard changes to local files
&lt;/h1&gt;

&lt;p&gt;As a programmer, it happens every day that unexpected errors occur. To solve the errors quickly, we fumble wildly with the code. Unfortunately, these code changes are not always optimal. It is, therefore, helpful to quickly undo the changes you have made.&lt;br&gt;
With the command “git checkout” you can reset the files to their original state:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# Reset directory "myCode"&lt;br&gt;
git checkout - myCode&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-undo-local-commits"&gt;
  &lt;/a&gt;
  2. Undo local commits
&lt;/h1&gt;

&lt;p&gt;You have already created four new commits and only now realize that one of these commits contains a major error. Oops!&lt;/p&gt;

&lt;p&gt;No panic. If you want to undo one or more commits, you can use the “git reset” command. The command knows three different modes (soft, hard, mixed):&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# Undo the last four commits, keep changes&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;git reset HEAD ~ 4&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;# Undo the last four commits, discard changes&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;git reset --hard HEAD ~ 4&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-remove-the-file-from-git-without-deleting-it-completely"&gt;
  &lt;/a&gt;
  3. Remove the file from Git without deleting it completely
&lt;/h1&gt;

&lt;p&gt;You often add a file to the staging area ( git add ) that doesn’t belong there. You can use the command “ git rm “ here. However, this also removes the file from your file system.&lt;/p&gt;

&lt;p&gt;However, if you want to keep the file in the filesystem, you can better remove it from the staging area with “git reset ”. Then add the file to the .gitignore so that you do not mistakenly pack it back into the staging index in the future. That’s how it’s done:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset Dateiname&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;echo Dateiname &amp;gt;&amp;gt; .gitignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-subsequently-edit-the-commit-message"&gt;
  &lt;/a&gt;
  4. Subsequently edit the commit message
&lt;/h1&gt;

&lt;p&gt;Every programmer makes a typo on a commit. Fortunately, commit messages are very easy to correct using the “git commit — amend” command. That’s how it’s done:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# Start the standard text editor to edit the commit message&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;git commit --amend&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;# Sets the new message directly&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;git commit --amend -m "My new commit message&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-change-local-commits-before-a-push"&gt;
  &lt;/a&gt;
  5. Change local commits before a push
&lt;/h1&gt;

&lt;p&gt;In the last point, you got to know the option “ — amend”. This is useful if you want to change the last commit. But what if the commit to be corrected wasn’t the last? You can use “git rebase-interactive” for this.&lt;/p&gt;

&lt;p&gt;You must enter your remote (usually “origin”) and the branch name here.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rebase --interactive origin branchName&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/05/7-most-common-git-mistakes.html"&gt;Read Some More Mistakes here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How To View And Configure Apache Access &amp; Error Logs</title>
      <author>Better Uptime</author>
      <pubDate>Wed, 19 May 2021 13:29:26 +0000</pubDate>
      <link>https://dev.to/betteruptime/how-to-view-and-configure-apache-access-error-logs-4fbl</link>
      <guid>https://dev.to/betteruptime/how-to-view-and-configure-apache-access-error-logs-4fbl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you will learn everything you need to know about Apache logging to help you troubleshoot and quickly resolve any problem you may encounter on your server. Logging is a very powerful tool that will give you valuable data about all the operations of your servers. You will learn where logs are stored, how to access them, and how to customize log output to fit your needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Apache web server.&lt;br&gt;
Sudo privileges.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-getting-to-know-apache-log-types"&gt;
  &lt;/a&gt;
  Step 1 — Getting To Know Apache Log Types
&lt;/h2&gt;

&lt;p&gt;Apache writes logs of its events in two different log files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Access Log&lt;/strong&gt; - In this file, Apache stores information about incoming requests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error Log&lt;/strong&gt; - This file contains information about errors that the web server encountered while processing requests.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-locating-apache-log-files"&gt;
  &lt;/a&gt;
  Step 2 — Locating Apache Log Files
&lt;/h2&gt;

&lt;p&gt;The location of the access log file is dependent upon the operating system on which is Apache web server running.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#location-of-the-access-log"&gt;
  &lt;/a&gt;
  Location Of The Access Log
&lt;/h4&gt;

&lt;p&gt;On &lt;strong&gt;Debian-based&lt;/strong&gt; operating systems like Ubuntu, the access log file is located /var/log/apache2/access.log&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;CentOS&lt;/strong&gt;, the access log file is stored in /var/log/httpd/access.log&lt;br&gt;
A typical access log entry might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
::1 - - [13/Nov/2020:11:32:22 +0100] "GET / HTTP/1.1" 200 327 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#location-of-the-error-log"&gt;
  &lt;/a&gt;
  Location Of The Error Log
&lt;/h4&gt;

&lt;p&gt;On &lt;strong&gt;Debian-based&lt;/strong&gt; operating systems like Ubuntu, the access log file is located /var/log/apache2/error.log&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;CentOS&lt;/strong&gt;, the access log file is stored in /var/log/httpd/error.log&lt;br&gt;
A typical error log entry might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
[Thu May 06 12:03:28.470305 2021] [php7:error] [pid 731] [client ::1:51092] script '/var/www/html/missing.php' not found or unable to stat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-viewing-apache-logs"&gt;
  &lt;/a&gt;
  Step 3 — Viewing Apache Logs
&lt;/h2&gt;

&lt;p&gt;If you are working from an operating system with the UI, the easiest way to view stored logs is by opening files in the text editor. However, sometimes you need to view the content of the files directly in the terminal. In this case, there are few ways to do it.&lt;/p&gt;

&lt;p&gt;You can tail command to view logs in real time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail -f /var/log/apache2/access.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tail command is used to print the last 10 lines from the selected file. With the -f option, the tail command will be viewing the content of the file in real-time.&lt;/p&gt;

&lt;p&gt;To view the full content of the file, you can use the cat command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat /var/log/apache2/access.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may also want to find a specific term in the file. In that case, you can use the grep command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grep GET /var/log/apache2/access.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, specify the term you want to search for, then specify the actual log file. In this case, we are looking for lines in the access log file where GET therm is present.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-configuring-apache-access-logs"&gt;
  &lt;/a&gt;
  Step 4 — Configuring Apache Access Logs
&lt;/h2&gt;

&lt;p&gt;In the access log, you can see what pages are users visiting, the status of their requests, and how long it took to process their requests.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#log-formats"&gt;
  &lt;/a&gt;
  Log Formats
&lt;/h4&gt;

&lt;p&gt;As was mentioned earlier, logs are a powerful tool. To be able to use this tool you need to understand the format in which are logs stored. The format of the access logs and the log file location is defined in the CustomLog directive. This directive can be used in the server configuration file (/etc/apache2/apache2.conf) or your virtual host entry. Be aware that defining the same CustomLog directive in both files may cause problems.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#common-log-format"&gt;
  &lt;/a&gt;
  Common Log Format
&lt;/h4&gt;

&lt;p&gt;The common log format is the standardized text file format used by many web servers. It's popular as it is easy to read and contains just the necessary information. Its defined in the /etc/apache2/apache2.conf configuration file and its format look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LogFormat "%h %l %u %t \\"%r\\" %&amp;gt;s %O" common
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The entry in the log file will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
127.0.0.1 alice Alice [06/May/2021:11:26:42 +0200] "GET / HTTP/1.1" 200 3477
This is the information that the log message contains:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;%h - 127.0.0.1 - Hostname or IP address of the client that made the request&lt;br&gt;
%l - alice  - Remote log name (Name used to log in a user). If not set, the default value will be used -&lt;br&gt;
%u - Alice - Remote username (Username of logged-in user). If not set, the default value will be used -&lt;br&gt;
%t - [06/May/2021:11:26:42 +0200] - Day and time of the request&lt;br&gt;
\"%r\" - "GET / HTTP/1.1" - Actual request&lt;br&gt;
%&amp;gt;s - 200 - Response code&lt;br&gt;
%O - 3477 - Size of the response in bytes&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#combined-log-format"&gt;
  &lt;/a&gt;
  Combined Log Format
&lt;/h4&gt;

&lt;p&gt;The combined log format is very similar to the common log format but contains few extra pieces of information.&lt;/p&gt;

&lt;p&gt;Its defined in the /etc/apache2/apache2.conf configuration file and its format look like this:&lt;/p&gt;

&lt;p&gt;LogFormat "%h %l %u %t \"%r\" %&amp;gt;s %O \"%{Referer}i\" \"%{User-Agent}i\"" combined&lt;br&gt;
The entry in the log file will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
127.0.0.1 alice Alice [06/May/2021:11:18:36 +0200] "GET / HTTP/1.1" 200 3477 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the extra pieces of information (aside from those present in the common format):&lt;/p&gt;

&lt;p&gt;\"%{Referer}i\" - "-" - URL of the referer&lt;br&gt;
\"%{User-Agent}i\" - "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36" - Detailed information about he browser of the user that made the request.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#custom-log-format"&gt;
  &lt;/a&gt;
  Custom Log Format
&lt;/h4&gt;

&lt;p&gt;You can define your custom log format in the /etc/apache2/apache2.conf using LogFormat directive followed by the actual format of the output and nickname that will be used as format identifier.&lt;/p&gt;

&lt;p&gt;For this example, we will create a custom log format named custom that will only print the user's browser information. The format will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LogFormat "%{User-agent}i" custom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the virtual host file, we will use the CustomLog directive to set the format of the log messages to the custom and log file to the default access log.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CustomLog ${APACHE_LOG_DIR}/access.log custom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we make a request and the Apache server will log the information about the browser that made the request into the access.log file. The log message will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logging Into Multiple Files&lt;br&gt;
You can also write multiple messages into multiple files. This can be done by using the CustomLog directive more than once. Note that when logging into the custom log file, the log file has to be manually created before you can log into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CustomLog ${APACHE_LOG_DIR}/custom.log custom
CustomLog ${APACHE_LOG_DIR}/access.log common
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-configuring-apache-error-logs"&gt;
  &lt;/a&gt;
  Step 5 — Configuring Apache Error Logs
&lt;/h2&gt;

&lt;p&gt;The error log contains information about the errors the web server encountered while processing the request. A common error while processing the request is a request for a missing file.&lt;/p&gt;

&lt;p&gt;You can choose to which file the error messages will be stored using the ErrorLog directive in your virtual host configuration file. This directive takes one argument - path to the log file. Here is an example from default virtual host configuration file /etc/apache2/sites-available/000-default.conf&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ErrorLog ${APACHE_LOG_DIR}/error.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can choose a custom file but be aware as the file has to be manually created before you can log into it.&lt;/p&gt;

&lt;p&gt;In the virtual host configuration file, you can also specify the level of errors that will be logged using the LogLevel directive. Setting this option to a specific value, the server will ignore errors with lover severity then set in the LogLevel directive. It is not recommended to change it to higher values than error.&lt;/p&gt;

&lt;p&gt;These are the possible values:&lt;/p&gt;

&lt;p&gt;trace1 - trace8 - Trace messages (LOWEST)&lt;br&gt;
debug - messages used for debugging&lt;br&gt;
info - informational messages&lt;br&gt;
notice - notices&lt;br&gt;
warn - warnings&lt;br&gt;
error - errors while processing the request (doesn't require immediate action)&lt;br&gt;
crit - Critical error that requires prompt action&lt;br&gt;
alert - Error that requires immediate action&lt;br&gt;
emerg - System is unusable&lt;br&gt;
You can set the log level using the LogLevel directive like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LogLevel info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the log level is not set, the server will set the log level to warn by default.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you learned what types of log Apache web server stores, where you can find those logs, how to understand the formatting, and how to create your custom log formats. Now, you can log into multiple files and set the level of errors to which the server will react. At this point, you know everything you need to efficiently debug your web application.&lt;/p&gt;

&lt;p&gt;You can explore more on linux logging in &lt;a href="https://logtail.com/tutorials/tag/linux/"&gt;logtail tutorial library&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>linux</category>
      <category>logging</category>
      <category>apache</category>
    </item>
    <item>
      <title>#30DaysofAppwrite : Appwrite Storage API</title>
      <author>Damodar Lohani</author>
      <pubDate>Wed, 19 May 2021 13:02:35 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-appwrite-storage-api-hgm</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-appwrite-storage-api-hgm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that makes app development &lt;strong&gt;easier&lt;/strong&gt; with a suite of SDKs and APIs to accelerate app development. &lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focused on giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like cloud functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appwrite-storage-api"&gt;
  &lt;/a&gt;
  Appwrite Storage API
&lt;/h2&gt;

&lt;p&gt;Every application needs more than just a database, it needs &lt;strong&gt;Storage&lt;/strong&gt;. Appwrite comes bundled with an extensive Storage API which allows you to manage your projects' files. Appwrite's Storage service provides us with a sleek API to upload, download, preview and manipulate images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-storage-implemented"&gt;
  &lt;/a&gt;
  How Is Storage Implemented
&lt;/h2&gt;

&lt;p&gt;As of now, Appwrite mounts a Docker volume using the host machine's storage to provide the Storage service. So, it's using the local filesystem to store all the files that you upload to Appwrite. We are working on adding support for external object storage like AWS S3, DigitalOcean Spaces or other similar services. You can check the progress regarding this in our &lt;a href="https://github.com/utopia-php/storage"&gt;utopia-php/storage&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-storage-using-appwrite-console"&gt;
  &lt;/a&gt;
  Managing Storage using Appwrite Console
&lt;/h2&gt;

&lt;p&gt;Appwrite's console supports easy management of files in storage. From here you can create files, update metadata of files, view or download files, and also delete files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQJqKDgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/citu4j1drwmx3m7zljxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQJqKDgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/citu4j1drwmx3m7zljxg.png" alt="Storage"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can create a new file easily by clicking on the circular &lt;strong&gt;+&lt;/strong&gt; button at the bottom right corner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uT2fEQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njdjgz9wenw4p1980t2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uT2fEQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njdjgz9wenw4p1980t2u.png" alt="Create File"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each file in the service is granted with read and write permissions to manage who has access to view or edit it. These permissions work in the same way the database permissions work, which is already covered in &lt;a href="https://dev.to/appwrite/30daysofappwrite-appwrite-database-22an"&gt;Day 15&lt;/a&gt; for you to review.&lt;/p&gt;

&lt;p&gt;For existing files in storage, you can see a preview and update permissions right from the console. You can also view the original file in new window or download the file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsc-9KlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co9g9o2cwlb23v1a8fyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsc-9KlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/co9g9o2cwlb23v1a8fyg.png" alt="Update File"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#services"&gt;
  &lt;/a&gt;
  Services
&lt;/h2&gt;

&lt;p&gt;The Storage API provides us with few different endpoints to manipulate our files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-file"&gt;
  &lt;/a&gt;
  Create File
&lt;/h3&gt;

&lt;p&gt;We can make a &lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;&amp;lt;ENDPOINT&amp;gt;/storage/files&lt;/code&gt; request to upload a file. In SDKs this endpoint is exposed as &lt;code&gt;storage.createFile()&lt;/code&gt;. It requires three parameters: the binary &lt;code&gt;file&lt;/code&gt;, an array of strings to define the &lt;code&gt;read&lt;/code&gt; permissions, and the same for &lt;code&gt;write&lt;/code&gt; permissions.&lt;/p&gt;

&lt;p&gt;We can use the below code to create file from our Web SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://demo.appwrite.io/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uploader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;role:member&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or in Flutter we could use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Init SDK&lt;/span&gt;
  &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://demo.appwrite.io/v1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5df5acd0d48c2'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
  &lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;file:&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;MultipartFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./path-to-files/image.jpg'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'image.jpg'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;read:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="nl"&gt;write:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'role:member'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;catchError&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list-files"&gt;
  &lt;/a&gt;
  List Files
&lt;/h3&gt;

&lt;p&gt;We can make a &lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;&amp;lt;ENDPOINT&amp;gt;/storage/files&lt;/code&gt; request in order to list files. In SDKs this is exposed as &lt;code&gt;storage.listFiles()&lt;/code&gt;. We can also use the &lt;code&gt;search&lt;/code&gt; parameter to filter results. You can also include &lt;code&gt;limit&lt;/code&gt;, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;orderType&lt;/code&gt; parameters to further customize the returned results.&lt;/p&gt;

&lt;p&gt;With the Web SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://demo.appwrite.io/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listFiles&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with Flutter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Init SDK&lt;/span&gt;
  &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://demo.appwrite.io/v1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5df5acd0d48c2'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
  &lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;listFiles&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;catchError&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-file"&gt;
  &lt;/a&gt;
  Get File
&lt;/h3&gt;

&lt;p&gt;We can make a &lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;&amp;lt;ENDPOINT&amp;gt;/storage/files/{fileid}&lt;/code&gt; request to an individual file by its id. It returns a JSON object with the file metadata. In SDKs this endpoint is exposed as &lt;code&gt;storage.getFiles()&lt;/code&gt; which requires the &lt;code&gt;fileId&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;With the Web SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[FILE_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Flutter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Init SDK&lt;/span&gt;
  &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://[HOSTNAME_OR_IP]/v1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5df5acd0d48c2'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
  &lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Future&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;fileId:&lt;/span&gt; &lt;span class="s"&gt;'[FILE_ID]'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}).&lt;/span&gt;&lt;span class="na"&gt;catchError&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#file-preview"&gt;
  &lt;/a&gt;
  File Preview
&lt;/h3&gt;

&lt;p&gt;The preview endpoint allows you to generate preview images for your files. Using the preview endpoint, you can also manipulate the resulting image so that it will fit perfectly inside your app in terms of dimensions, file size, and style. Additionally, the preview endpoint allows you to change the resulting image file format for better compression or change the image quality for better delivery over the network.&lt;/p&gt;

&lt;p&gt;We can make a &lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;&amp;lt;ENDPOINT&amp;gt;/storage/files/{fileId}/preview&lt;/code&gt; request to get a preview for image files. It supports parameters like &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;quality&lt;/code&gt;, &lt;code&gt;background&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; format to manipulate the preview image. This method is exposed as &lt;code&gt;storage.getFilePreview()&lt;/code&gt; and requires a &lt;code&gt;fileId&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We have even more awesome features like border, border radius, and opacity support for the preview endpoint in the upcoming Appwrite 0.8 release.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the Web SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFilePreview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[FILE_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//crops the image into 100x100&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Resource URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with Flutter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Init SDK&lt;/span&gt;
  &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://[HOSTNAME_OR_IP]/v1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5df5acd0d48c2'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
  &lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//displaying image&lt;/span&gt;
&lt;span class="n"&gt;FutureBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;future:&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFilePreview&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;fileId:&lt;/span&gt; &lt;span class="s"&gt;'[FILE_ID]'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
  &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasData&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CircularProgressIndicator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;},&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#file-download"&gt;
  &lt;/a&gt;
  File Download
&lt;/h3&gt;

&lt;p&gt;We can make a &lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;&amp;lt;ENDPOINT&amp;gt;/storage/files/{fileId}/download&lt;/code&gt; request to get the contents of a file by its unique ID. The endpoint response includes a &lt;code&gt;Content-Disposition: attachment&lt;/code&gt; header that tells the browser to start downloading the file to user downloads directory. This method is exposed as &lt;code&gt;storage.getFileDownload()&lt;/code&gt;, and a &lt;code&gt;fileId&lt;/code&gt; is required.&lt;/p&gt;

&lt;p&gt;With the Web SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFileDownload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[FILE_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Resource URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Flutter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Init SDK&lt;/span&gt;
  &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://[HOSTNAME_OR_IP]/v1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5df5acd0d48c2'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
  &lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//displaying image&lt;/span&gt;
&lt;span class="n"&gt;FutureBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;future:&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFileDownload&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;fileId:&lt;/span&gt; &lt;span class="s"&gt;'[FILE_ID]'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasData&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CircularProgressIndicator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;},&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#file-view"&gt;
  &lt;/a&gt;
  File View
&lt;/h3&gt;

&lt;p&gt;We can make a &lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;&amp;lt;ENDPOINT&amp;gt;/storage/files/{fileId}/view&lt;/code&gt; request to get the contents of a file by its unique ID. This endpoint is similar to the download method but returns with no &lt;code&gt;Content-Disposition: attachment&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;With the Web SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;sdk&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://[HOSTNAME_OR_IP]/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFileView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[FILE_ID]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Resource URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Flutter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Init SDK&lt;/span&gt;
  &lt;span class="n"&gt;Client&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;Storage&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Storage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'https://[HOSTNAME_OR_IP]/v1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'5df5acd0d48c2'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;
  &lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//displaying image&lt;/span&gt;
&lt;span class="n"&gt;FutureBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;future:&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFileView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;fileId:&lt;/span&gt; &lt;span class="s"&gt;'[FILE_ID]'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasData&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;snapshot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CircularProgressIndicator&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;},&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More detailed information about the Storage service can be found in &lt;a href="https://appwrite.io/docs/client/storage"&gt;our docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
      <category>30daysofappwrite</category>
      <category>flutter</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Slack: boost your team's productivity</title>
      <author>Lucas Otaño</author>
      <pubDate>Wed, 19 May 2021 12:54:23 +0000</pubDate>
      <link>https://dev.to/cloudx/slack-boost-your-team-s-productivity-1ibc</link>
      <guid>https://dev.to/cloudx/slack-boost-your-team-s-productivity-1ibc</guid>
      <description>&lt;p&gt;Let’s suppose the following scenario: you started working in a five person startup; Slack was a bit messy, but it worked for you. After a while the company grows up, now there are 90 employees and the chat is full with random conversations, pets' pics, the important information is somewhere in there.&lt;br&gt;
If you are in a similar situation, or you just have an OCD with management like me, you must fix that.&lt;br&gt;
Slack can be funny (and it should, we are no robots), but primarily it’s a work tool meant to improve the productivity and the communication.&lt;br&gt;
In this post I want to propose some tips that improved the workflow in the different companies and teams where we've used it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Don’t be afraid of creating channels&lt;/li&gt;
&lt;li&gt;Prioritize information at first glance&lt;/li&gt;
&lt;li&gt;An emoji is worth a thousand words&lt;/li&gt;
&lt;li&gt;We are not tailors, but please, let's use more threads&lt;/li&gt;
&lt;li&gt;@channel vs &lt;a class="mentioned-user" href="https://dev.to/here"&gt;@here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Custom status&lt;/li&gt;
&lt;li&gt;Standardize message formats&lt;/li&gt;
&lt;li&gt;Remove previews&lt;/li&gt;
&lt;li&gt;One Single Message&lt;/li&gt;
&lt;li&gt;Avoid Direct Messages when talking about the project&lt;/li&gt;
&lt;li&gt;Adopting these practices is a team work&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-afraid-of-creating-channels"&gt;
  &lt;/a&gt;
  Don’t be afraid of creating channels
&lt;/h2&gt;

&lt;p&gt;In a company there are a lot of different people (thank god!), with different interests, hobbies, tolerance to other human beings, and so on. It’s very probable that not everyone in the company wants to see a picture of your new puppy or your brand new custom mechanical keyboard full of RGB magic for more FPS, but there are for sure a lot of people that would love to see those things. Go and create new channels &lt;code&gt;#puppies_lovers&lt;/code&gt; &lt;code&gt;#hardware_fans&lt;/code&gt; &lt;code&gt;#music&lt;/code&gt; &lt;code&gt;#coffee&lt;/code&gt; (you can be a little more creative than me with the names).&lt;br&gt;
This way you can create little communities of people with similar interests without disturbing/spamming general channels.&lt;/p&gt;

&lt;p&gt;Another useful proposal I have for you is to have a side channel for your current team. Sometimes there are roles that work on several teams at the same time, so they might not want to scroll over memes or conversations about the Snyderverse to look for useful information (or maybe they do, in that case they can join your side channel).  And as I love consistency, you could use the same notation for every side channel. Example: &lt;code&gt;#cms_team&lt;/code&gt; (main channel) and &lt;code&gt;#cms_team_theFunSide&lt;/code&gt; (side channel to make memes competitions and to spoil your teammates).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prioritize-information-at-first-glance"&gt;
  &lt;/a&gt;
  Prioritize information at first glance
&lt;/h2&gt;

&lt;p&gt;Let’s come back to that role that works with different teams, or that developer immersed on &lt;a href="https://lifehacker.com/what-is-the-zone-anyway-5920484"&gt;“The Zone”&lt;/a&gt;. They might want to see only the important information, and leave the rest for "later" (yes, like that bugfix 🤫).&lt;br&gt;
Overcoming this situation is very simple, just use custom emojis at the beginning of the message:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🟢 Green circle: represents information that won’t change anyone’s responsibilities, priorities or tasks.
E.g, if you are writing an update on a thread about a task, or if you are going to the bank for a couple of hours.&lt;/li&gt;
&lt;li&gt;⚠️ Yellow triangle:  you need someone else’s attention, or action, help, etc.
E.g., a code review, a mail review, a cry for help inside a task thread, a concern about something.&lt;/li&gt;
&lt;li&gt;🟥 Red square: requires urgent attention, something must be done immediately. 
E.g, the production server is down, a high priority email from a client, a client meeting being moved or cancelled, or maybe even a PR/mail that needs to be ready ASAP. Whenever you see this, please, go to read the message. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: it’s important to use those colors to quickly distinguish  between them, but it is also necessary to use different shapes for color-blind people.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/drive/folders/1cp-F9m-01zCvjOpGkzXfN0AdjoSgZ5wN?usp=sharing"&gt;Here&lt;/a&gt; you have some emojis I've created and others that I've downloaded from &lt;a href="https://slackmojis.com/"&gt;slackmojis.com&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#an-emoji-is-worth-a-thousand-words"&gt;
  &lt;/a&gt;
  An emoji is worth a thousand words
&lt;/h2&gt;

&lt;p&gt;We are seeking productivity increases here, let’s use emojis to achieve this! How?&lt;br&gt;
Scenario: let’s suppose that you are the Scrum Master and you ask the following question to your team, what would you prefer?&lt;br&gt;
&lt;em&gt;Option A&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HW8VeQn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vunokg39mhofvhvl2h4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HW8VeQn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vunokg39mhofvhvl2h4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Option B&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LxQkoyKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dktyh8oz854f3umyvj0a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LxQkoyKc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dktyh8oz854f3umyvj0a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think the answer is quite obvious, there can also be a discussion on a thread, but having the emojis as the final answer. Also, if there are only :no: emojis, you can use a :cancelled: emoji on the thread to let everyone know that it has been cancelled.&lt;/p&gt;

&lt;p&gt;Short answers are very likely to be replaced with an emoji: yes, no, I don’t know (IDK), thanks, solved, merged, done. It might sound quite robotic or impersonal for you, but remember, this is a work tool that seeks for productivity increases, you can still do funny things on the side channel that I proposed earlier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-are-not-tailors-but-please-lets-use-more-threads"&gt;
  &lt;/a&gt;
  We are not tailors, but please, let's use more threads 🧵
&lt;/h2&gt;

&lt;p&gt;Following the idea of finding relevant information at first glance, imagine a message starts a long conversation and you don't use a tread. If you need to find a message sent before that conversation, you'll have to scroll a lot. Apart from that, the channel would turn into a mess. Wouldn't it be better to have a thread that only people involved on that matter will open?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--incwA_Yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg2ahpohluut0fxas5j0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--incwA_Yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg2ahpohluut0fxas5j0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides, it’s not only about having a nice and well organized chat, but also not to disturb team members not involved in the conversation. Just imagine a conversation of 30 messages between 2 persons on the team channel (or even worse, on a general channel), there  will be a lot of people being disturbed  with 30 notifications unnecessarily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#channel-vs-here"&gt;
  &lt;/a&gt;
  @channel vs &lt;a class="mentioned-user" href="https://dev.to/here"&gt;@here&lt;/a&gt;

&lt;/h2&gt;

&lt;p&gt;Keeping in mind the idea of not disturbing people when it’s needless, we have to explain the difference between these two tags. It’s very simple, @channel will notify all channel’s members whether they are active or not, &lt;a class="mentioned-user" href="https://dev.to/here"&gt;@here&lt;/a&gt;
 will notify only the active members. You can work with people in different time zones, so you don’t  want to bother them (or at least you shouldn’t) on their non-working hours, or to disturb the ones on holidays or on a day off, unless it’s critical to let them know. You can learn more about this &lt;a href="https://slack.com/intl/en-ar/help/articles/202009646-Notify-a-channel-or-workspace#:~:text=%40everyone%20notifies%20every%20person%20in,they're%20used%20in%20threads"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sorry &lt;a class="mentioned-user" href="https://dev.to/here"&gt;@here&lt;/a&gt;
 I didn't mean to tag you 😬 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#custom-status"&gt;
  &lt;/a&gt;
  Custom status
&lt;/h2&gt;

&lt;p&gt;The idea behind this point is not to micromanage your company but to let your colleagues know whether you are available or not. You may need to go to the grocery store, help your kid with something, cook lunch, go to the bathroom (💩), etc. If a teammate needs your help when you are active and you don’t answer within 10/30 minutes or more, he might think you are ignoring him, or that he is bothering you,  or he might infer that you are doing something else. Anyways, we can’t know what the others may think, for that reason  with two clicks we can set our custom status as “AFK” (Away From Keyword), “Lunch”,  “Coffee break”. This way you can avoid misunderstandings or hard feelings!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#standardize-message-formats"&gt;
  &lt;/a&gt;
  Standardize message formats
&lt;/h2&gt;

&lt;p&gt;This can be a little too much for some of you, but remember that we are trying to boost our team performance by adopting some habits on Slack. Look at the following example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iAUy16tI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj69588p7dbfdxxyp5a2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iAUy16tI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj69588p7dbfdxxyp5a2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3PobM6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bupi02twq2srsxpjugh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3PobM6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bupi02twq2srsxpjugh9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the first image some colleagues may ask for the ticket link, or story number, also they don't know whether you're blocked or not. On the other hand, in the second image we already provide information that’s very likely to be useful for our teammates. This way, by investing some clicks and seconds beforehand , we can save time to our partners and get a response quicker.&lt;br&gt;
This might seem like a waste of time, but I consider that it helps to have a very clean and well organized chat, and also, as I mentioned, save time in the mid term (once everyone gets acquainted with that message format).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remove-previews"&gt;
  &lt;/a&gt;
  Remove previews
&lt;/h2&gt;

&lt;p&gt;Unless you have a Jira bot integration (for example) that adds value to a link preview, I consider that a preview is just a waste of space and it interferes with a clean chat. I’ll leave an example below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9reiH5YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pt2opxa208582o9aza45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9reiH5YK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pt2opxa208582o9aza45.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Also, regarding links, by avoiding pasting an entire link on the message will help having a clean message, just add the link to a word that references it, or just simply write  “Link here” and put the link in those words.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkLHPaJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4t4p8bme4ke8c6ffpw3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkLHPaJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4t4p8bme4ke8c6ffpw3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ByqGFDKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkxvg3vfdz4r4pridozn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ByqGFDKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkxvg3vfdz4r4pridozn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-single-message"&gt;
  &lt;/a&gt;
  One Single Message
&lt;/h2&gt;

&lt;p&gt;There are a couple advantages on writing a single message:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Less notifications to your colleagues: not much to explain here, one message is equal to one notification; information spread on four separate messages means four notifications for each one on the channel.&lt;/li&gt;
&lt;li&gt;Also talking about notifications, if the whole information is reduced to a single message your partners can read it from the notification pop-up. If you split the information you are forcing them to open the chat to know what you are talking about.&lt;/li&gt;
&lt;li&gt;Organization and readability: if you write down and send messages as you are thinking of an idea, you are very likely to forget something, or maybe that information makes nonsense all spread out. If you take some more seconds and read the message before sending it, it’ll guarantee you that you’re not sending loose thoughts.&lt;/li&gt;
&lt;li&gt;If you send several messages to express an idea, where should your teammates start the thread in order not to lose relevant information. It might not seem that serious, but imagine someone tags you on a thread created three days ago and you only have partial information on the initial message, you’ll be forced to scroll the chat to find some messages from a couple days ago. Pretty annoying, isn’t it?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#avoid-direct-messages-when-talking-about-the-project"&gt;
  &lt;/a&gt;
  Avoid Direct Messages when talking about the project
&lt;/h2&gt;

&lt;p&gt;This is a very common practice (or at least it was in the companies I worked on so far), to start a DM conversation between a few members of the team, or just to DM a partner to talk about something you don’t understand about the project or to make a decision.&lt;br&gt;
Avoiding this practice by starting a conversation on the team channel (you can also tag the people you consider relevant for that matter) brings several advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The team knows what you are dealing with / working on.&lt;/li&gt;
&lt;li&gt;Maybe people that you thought were not relevant can help you, or can bring an interesting solution to the problem, give their opinion, etc. (You are a team! This is a key aspect)&lt;/li&gt;
&lt;li&gt;Maybe you are working on something that overlaps with a task that a teammate is working on and you didn’t know.&lt;/li&gt;
&lt;li&gt;Even if you are talking about something very technical that you think is just a matter of the frontend dev team, you might not know the whole team and some  from QA or backend knows about the framework you are working on. DO NOT underestimate anyone on the team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#adopting-these-practices-is-a-team-work"&gt;
  &lt;/a&gt;
  Adopting these practices is a team work
&lt;/h2&gt;

&lt;p&gt;Before adopting one of the tips written in this article on your team or organization, you might want to discuss it with the rest of your team. After that, it will be a process to fully adopt it: some colleagues will forget to start a thread or to use a :yes: emoji reaction instead of writing the answer. In those cases you can use the :start_a_thread: emoji, or :use_emojis: , or :thats_a_paddlin: to help your partners to get used to it.&lt;br&gt;
It is useless if only a few people do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It's possible that some of this tips don't apply to your company. You might need to ignore some of them, change others or simply create new ones to match your use cases.&lt;br&gt;
I really want to know what you think, and if you adopt one these I want to hear about the results it provided to your organization.&lt;br&gt;
Here you have some useful resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://slackmojis.com/"&gt;Slackmojis&lt;/a&gt;: this is a very long compilation of useful and funny Slack Emojis.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://maketext.io/"&gt;Cool Text Generator&lt;/a&gt;: when I need to create a text emoji I use this very simple, yet useful, website.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/drive/folders/1cp-F9m-01zCvjOpGkzXfN0AdjoSgZ5wN?usp=sharing"&gt;Emojis named through this post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks &lt;a class="mentioned-user" href="https://dev.to/navarroaxel"&gt;@navarroaxel&lt;/a&gt;
 for providing the images and &lt;a class="mentioned-user" href="https://dev.to/nachosource"&gt;@nachosource&lt;/a&gt;
 for the corrections of the writing. Please go to check their very interesting blogs!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>productivity</category>
      <category>startup</category>
      <category>todayilearned</category>
      <category>functional</category>
    </item>
    <item>
      <title>Criando temas com custom hook + variáveis CSS 👨‍💻</title>
      <author>Cleyson Leal Braga</author>
      <pubDate>Wed, 19 May 2021 12:32:30 +0000</pubDate>
      <link>https://dev.to/cleysonlb/criando-temas-com-custom-hook-variaveis-css-581l</link>
      <guid>https://dev.to/cleysonlb/criando-temas-com-custom-hook-variaveis-css-581l</guid>
      <description>&lt;p&gt;Hoje em dia, uma funcionalidade muito requisitada em sites e apps é a aplicação de temas - normalmente usando o tão aclamado “Dark mode”. Com um clique, podemos mudar toda a cor do app/site para um tema escuro. Seus usuários dizem ser mais agradável aos olhos, e até mesmo trazer mais produtividade.&lt;/p&gt;

&lt;p&gt;A aplicação de um tema pode ser algo ainda maior, se pensarmos no estilo do site como um tema, trazendo mais flexibilidade e padronização. Mesmo que ainda não exista um modo escuro, por exemplo. Também podemos aplicar técnicas que estão muito em alta, como o design token.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iniciando-o-projeto"&gt;
  &lt;/a&gt;
  Iniciando o projeto 🚀
&lt;/h3&gt;

&lt;p&gt;Vamos começar iniciando o projeto instalando e criando nossa aplicação usando o create-react-app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-react-app theme-app
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;theme-app
&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso, teremos uma estrutura assim:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79XYoZGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bapr9u1xqekuhkx5rd1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79XYoZGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bapr9u1xqekuhkx5rd1e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Podemos excluir os arquivos &lt;code&gt;logo.svg&lt;/code&gt;, &lt;code&gt;App.test.js&lt;/code&gt; e o &lt;code&gt;App.css&lt;/code&gt;. Não precisaremos deles nesse tutorial.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#criando-nosso-tema"&gt;
  &lt;/a&gt;
  Criando nosso tema ✨
&lt;/h3&gt;

&lt;p&gt;Vamos criar nosso CSS com o tema primeiro, pois vamos precisar dele dentro do custom hook.&lt;br&gt;
Vamos criar o arquivo theme.module.css no caminho&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./src/styles/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inicialmente, vamos criar somente duas variáveis que serão usadas para aplicar as cores que desejamos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.defaultTheme&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Format: --theme + type + color + variant */&lt;/span&gt;

  &lt;span class="c"&gt;/* Colors */&lt;/span&gt;
  &lt;span class="py"&gt;--theme-background-color-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--theme-text-color--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.darkTheme&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Colors */&lt;/span&gt;
  &lt;span class="py"&gt;--theme-background-color-primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--theme-text-color--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A lógica aqui, é usar o custom hook para trocar a classe do tema - e com isso, os valores das variáveis, aplicando como um todo na aplicação.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#criando-nosso-custom-hook"&gt;
  &lt;/a&gt;
  Criando nosso custom hook 👨‍💻
&lt;/h3&gt;

&lt;p&gt;Para criar nosso custom hook, vamos usar as API’s de context e useState, arquitetando todas as funcionalidades dentro dele, e exportando somente o que vamos utilizar para controlar a troca de tema.&lt;/p&gt;

&lt;p&gt;Vamos criar o nosso arquivo themeContext.js no caminho&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./src/contexts/themeContext
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nosso themeContext.js será assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../styles/theme.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// exportamos o useTheme com as funções que controlam a troca de tema&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;themeContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isDarkmode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsDarkmode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setDarkmodeOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsDarkmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setDarkmodeOff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsDarkmode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsDarkmode&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isDarkmode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDarkmodeOn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDarkmodeOff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// exportamos o ThemeProvider que aplica a classe do tema na div que vai englobar toda a aplicação&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isDarkmode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsDarkmode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isDarkmode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;darkTheme&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultTheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;themeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isDarkmode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsDarkmode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;themeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#aplicando-nosso-tema"&gt;
  &lt;/a&gt;
  Aplicando nosso tema ✅
&lt;/h3&gt;

&lt;p&gt;Para usar nosso useTheme, vamos criar uma funcionalidade básica só para entender o fluxo de como as coisas funcionam.&lt;/p&gt;

&lt;p&gt;Vamos criar um arquivo chamado &lt;code&gt;Home.js&lt;/code&gt; dentro de &lt;code&gt;./src&lt;/code&gt; e também um arquivo chamado &lt;code&gt;styles.module.css&lt;/code&gt; dentro de &lt;code&gt;./src/styles&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;No &lt;code&gt;Home.js&lt;/code&gt; importamos o &lt;code&gt;useTheme&lt;/code&gt; para poder usar nossa função de toggle que troca os temas e nossa variável isDarkMode para saber se o dark mode está ligado ou não.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Home.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./contexts/themeContext/themeContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles/styles.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isDarkmode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`Dark mode on? &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isDarkmode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Trocar tema&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No &lt;code&gt;styles.module.css&lt;/code&gt; aplicamos nossas variáveis (design tokens) que aplicam os valores do tema selecionado.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;styles.module.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--theme-background-color-primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--theme-text-color--primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora podemos usar o provider no nosso App.js e chamar nosso componente Home.js&lt;/p&gt;

&lt;p&gt;&lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ThemeProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./contexts/themeContext/themeContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ThemeProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#resultado"&gt;
  &lt;/a&gt;
  Resultado 🤩
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/usetheme-context-hzjet"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h3&gt;

&lt;p&gt;Usando o context + custom hook fica simples controlar e compartilhar em todo o nosso app os controles de tema, podemos ir além do dark mode e criar outros temas para personalizar nossas aplicações.&lt;br&gt;
Espero que tenham gostado do post e&lt;br&gt;
até a próxima&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>css</category>
      <category>reacthooks</category>
    </item>
    <item>
      <title>Keeping your dependencies updated automatically with Dependabot</title>
      <author>Jonah Lawrence</author>
      <pubDate>Wed, 19 May 2021 12:28:39 +0000</pubDate>
      <link>https://dev.to/denvercoder1/keeping-your-dependencies-updated-automatically-with-dependabot-299g</link>
      <guid>https://dev.to/denvercoder1/keeping-your-dependencies-updated-automatically-with-dependabot-299g</guid>
      <description>&lt;p&gt;In this tutorial, you will learn how to use the GitHub dependency bot to make sure your packages stay up to date without breaking your code.&lt;/p&gt;

&lt;p&gt;I will be showing you how to add versions to Python dependencies and how to set up Dependabot to run on your GitHub repository to make sure you always have the latest version in your requirements.txt. Dependabot will send Pull Requests to your repo whenever a package is out of date so you can easily check the changelog, test the new version, and update your requirements file with a single click.&lt;/p&gt;

&lt;p&gt;The Dependabot configuration steps can be applied to dependencies of many types and in many languages including &lt;code&gt;github-actions&lt;/code&gt;, &lt;code&gt;docker&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt; (Python), &lt;code&gt;npm&lt;/code&gt; (JavaScript), &lt;code&gt;composer&lt;/code&gt; (PHP), and &lt;a href="https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#package-ecosystem"&gt;many others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article was originally a video tutorial, which you can check out here:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/22XrqdIe8oQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-sure-your-packages-have-version-numbers"&gt;
  &lt;/a&gt;
  Make sure your packages have version numbers
&lt;/h2&gt;

&lt;p&gt;When using a &lt;code&gt;requirements.txt&lt;/code&gt; in a Python project, version numbers are optional. If they are not provided, running the command to install the packages will always get the latest version of the package.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So why should we add version numbers?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is very risky to install dependencies without specifying version numbers. Often times packages will receive updates that break or alter existing functionality and require the dependent to update their code to continue using the package. In the case of a new major release, your code may all of a sudden break just because you wrote it for a different version of a package you are using.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How do you add version numbers?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In your &lt;code&gt;requirements.txt&lt;/code&gt;, you can specify version numbers by appending &lt;code&gt;==&lt;/code&gt; followed by the version to the package name. To find out what version of each package your are using, you can run &lt;code&gt;pip freeze&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3F9UgVAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n57rr8iihgar0uaixjut.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3F9UgVAn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n57rr8iihgar0uaixjut.gif" alt="pip freeze"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is an example &lt;code&gt;requirements.txt&lt;/code&gt; with version numbers included:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24Vd4XO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmvq6fv0yguea70s83op.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24Vd4XO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmvq6fv0yguea70s83op.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-updates-with-dependabot"&gt;
  &lt;/a&gt;
  Automatic updates with Dependabot
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-click-on-insights"&gt;
  &lt;/a&gt;
  Step 1 - Click on Insights
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRf1NFrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohlse9tl3jujtmhru7cq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRf1NFrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohlse9tl3jujtmhru7cq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-click-dependency-graph-then-dependabot"&gt;
  &lt;/a&gt;
  Step 2 - Click "Dependency graph", then "Dependabot"
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lW0cUjXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73uy9ju56boi9g195c94.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lW0cUjXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73uy9ju56boi9g195c94.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-enable-dependabot-and-create-a-config-file"&gt;
  &lt;/a&gt;
  Step 3 - Enable Dependabot and create a config file
&lt;/h3&gt;

&lt;p&gt;Make sure to insert the name of your package ecosystem on the line that is highlighted below. See &lt;a href="https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#package-ecosystem"&gt;this link&lt;/a&gt; for the list of possible options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PpSUVPg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdgjmrnrir1dyt8kv949.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PpSUVPg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdgjmrnrir1dyt8kv949.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-push-the-configuration-file-to-your-main-branch-and-wait-for-pull-requests"&gt;
  &lt;/a&gt;
  Step 4 - Push the configuration file to your main branch and wait for pull requests
&lt;/h3&gt;

&lt;p&gt;Within a few minutes, you should start receiving PRs (possibly longer if you already have everything up to date 😄)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reviewing-dependabot-prs"&gt;
  &lt;/a&gt;
  Reviewing Dependabot PRs
&lt;/h2&gt;

&lt;p&gt;Here's what a Dependabot PR looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3R3pRl8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg2e2f5essero76172xq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3R3pRl8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg2e2f5essero76172xq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will give you details about the changes to the package and allow you run tests if that is applicable to your repo.&lt;/p&gt;

&lt;p&gt;Once your code is tested and seems to be working with the new version, you can update your requirements by simply clicking "Merge Pull Request".&lt;/p&gt;

&lt;p&gt;Whenever a change is made to the requirements, Dependabot will automatically rebase all of it's open PRs to ensure there are never any merge conflicts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you found this tutorial useful.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://www.youtube.com/watch?v=22XrqdIe8oQ"&gt;the full video&lt;/a&gt; for further explanations and be sure to like and subscribe!&lt;/p&gt;

&lt;p&gt;- Jonah Lawrence&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/DenverCoder1"&gt;@DenverCoder1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;YouTube: &lt;a href="https://youtube.com/c/DevProTips"&gt;Jonah Lawrence - Dev Pro Tips&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Discord server: &lt;a href="https://discord.gg/fPrdqh3Zfu"&gt;https://discord.gg/fPrdqh3Zfu&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>productivity</category>
      <category>github</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Advanced CSS Animation Using cubic-bezier()</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 19 May 2021 12:14:36 +0000</pubDate>
      <link>https://dev.to/afif/advanced-css-animation-using-cubic-bezier-nho</link>
      <guid>https://dev.to/afif/advanced-css-animation-using-cubic-bezier-nho</guid>
      <description>&lt;p&gt;When dealing with complex CSS animations, there is a tendency to create expansive &lt;code&gt;@keyframes&lt;/code&gt; with lots of declarations. There are a couple of tricks though that I want to talk about that might help make things easier, while staying in vanilla CSS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Multiple animations&lt;/li&gt;
&lt;li&gt;Timing functions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first one is more widely used and familiar but the second one is less common. There could be good reasons for that — chaining animations with commas is relatively easier than grokking the various timing functions that are available to us and what they do. There's one especially neat timing function that gives us total control to create custom timing functions. That would be &lt;code&gt;cubic-bezier()&lt;/code&gt; and in this post I will show you the power of it and how it can be used to create fancy animation without too much complexity.&lt;/p&gt;

&lt;p&gt;Let's start with a basic example showing how we can move a ball around in interesting directions, like an infinity (∞) shape:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/eYvmOxR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, there is no complex code — only two keyframes and a "strange" &lt;code&gt;cubic-bezier()&lt;/code&gt; function. And yet, a pretty complex-looking final infinity-shape animation is what we get.&lt;/p&gt;

&lt;p&gt;Cool, right? Let's dig into this!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cubicbezier-function"&gt;
  &lt;/a&gt;
  The cubic-bezier() function
&lt;/h2&gt;

&lt;p&gt;Let's start with &lt;a href="https://www.w3.org/TR/css-easing-1/#cubic-bezier-easing-functions"&gt;the official definition&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A cubic Bézier easing function is a type of easing function defined by four real numbers that specify the two control points, P1 and P2, of a cubic Bézier curve whose end points P0 and P3 are fixed at (0, 0) and (1, 1) respectively. The x coordinates of P1 and P2 are restricted to the range [0, 1].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swZvbeY2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xr5l3ky4bwjdj17sqwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swZvbeY2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xr5l3ky4bwjdj17sqwv.png" alt="cubic bezier"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above curve defines how the output (y-axis) will behave based on the time (x-axis). Each axis has a range of &lt;code&gt;[0, 1]&lt;/code&gt; (or &lt;code&gt;[0% 100%]&lt;/code&gt; ). If we have an animation that lasts two-second (&lt;code&gt;2s&lt;/code&gt;), then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0 (0%) = 0s 
1 (100%) = 2s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to animate left from &lt;code&gt;5px&lt;/code&gt; to &lt;code&gt;20px&lt;/code&gt;, then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0 (0%) = 5px 
1 (100%) = 20px
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;X, the time, is always restricted to &lt;code&gt;[0 1]&lt;/code&gt;; however, Y, the output, can go beyond &lt;code&gt;[0 1]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My goal is to adjust P1 and P2 in order to create the following curves:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kPt0M5jS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzvyiub3yhvariwjs165.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kPt0M5jS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzvyiub3yhvariwjs165.png" alt="CSS cubic bezier"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may think this is impossible to achieve because, as stated in the definition, P0 and P3 are fixed at &lt;code&gt;(0,0)&lt;/code&gt; and &lt;code&gt;(1,1)&lt;/code&gt; meaning they cannot be on the same axis. That's true, and we will use some math tricks to "approximate" them.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#parabolic-curve"&gt;
  &lt;/a&gt;
  Parabolic curve
&lt;/h2&gt;

&lt;p&gt;Let's start with the following definition: &lt;code&gt;cubic-bezier(0,1.5,1,1.5)&lt;/code&gt;. That gives us the following curve:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4s0YMOKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/jf8tjkqa6t5zqcybcv08.png%3Fw%3D648%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4s0YMOKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/jf8tjkqa6t5zqcybcv08.png%3Fw%3D648%26ssl%3D1" alt="cubic-bezier(0,1.5,1,1.5)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our goal is to move &lt;code&gt;(1,1)&lt;/code&gt; and make it at &lt;code&gt;(0,1)&lt;/code&gt; which isn’t technically possible. So we will try to fake it.&lt;/p&gt;

&lt;p&gt;We previously said that our range is &lt;code&gt;[0 1]&lt;/code&gt; (or &lt;code&gt;[0% 100%]&lt;/code&gt;) so let's imagine the case when &lt;code&gt;0%&lt;/code&gt; is very close to &lt;code&gt;100%&lt;/code&gt;. If, for example, we want to animate top from &lt;code&gt;20px&lt;/code&gt; (&lt;code&gt;0%&lt;/code&gt;) to &lt;code&gt;20.1px&lt;/code&gt; (&lt;code&gt;100%&lt;/code&gt;) then we can say that both the initial and final states are equal.&lt;/p&gt;

&lt;p&gt;Hm, but our element will not move at all, right?&lt;/p&gt;

&lt;p&gt;Well, it will move a little because the Y value exceeds &lt;code&gt;20.1px&lt;/code&gt; (&lt;code&gt;100%&lt;/code&gt;). But that's not enough to give us perceptible movement:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abJzoMq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's update the curve and use &lt;code&gt;cubic-bezier(0,4,1,4)&lt;/code&gt; instead. Notice how our curve is way taller than before:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Curve&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHt-htyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/ws9k5wiplk5xu00iaj13.png%3Fw%3D385%26ssl%3D1" alt=""&gt;&lt;/td&gt;
&lt;td&gt;
&lt;iframe height="600" src="https://codepen.io/t_afif/embed/eYvmOoR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;But yet, still no movement — even if the top value is crossing &lt;code&gt;3&lt;/code&gt; (or &lt;code&gt;300%&lt;/code&gt;). Let's try &lt;code&gt;cubic-bezier(0,20,1,20)&lt;/code&gt;:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Curve&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKjZf13L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/r3ytyx91ra931q6iitop.png%3Fw%3D358%26ssl%3D1" alt=""&gt;&lt;/td&gt;
&lt;td&gt;
&lt;iframe height="600" src="https://codepen.io/t_afif/embed/VwpYZNV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Yes! it started to move a little. Did you notice the evolution of the curve each time we increase the value? It's making our point &lt;code&gt;(1,1)&lt;/code&gt; "visually" closer to &lt;code&gt;(0,1)&lt;/code&gt; when we zoom out to see the full curve and this is the trick.&lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;cubic-bezier(0,V,1,V)&lt;/code&gt; where &lt;code&gt;V&lt;/code&gt; is some very big value and both the initial and final states are very close together (or almost equal), we can simulate the parabolic curve.&lt;/p&gt;

&lt;p&gt;An example is worth a thousand words:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ZEeYzNy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I applied the "magic" cubic-bezier function in there to the top animation, plus a linear one applied to left. This gives us the curve we want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#digging-into-the-math"&gt;
  &lt;/a&gt;
  Digging into the math
&lt;/h3&gt;

&lt;p&gt;For those of you math-minded folks out there, we can break that explanation down further. A cubic bezier can be defined using the following formula:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;P = (1−t)³P0 + 3(1−t)²tP1 + 3(1−t)t²P2 + t³P3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each point is defined as follows: &lt;code&gt;P0 = (0,0)&lt;/code&gt;, &lt;code&gt;P1 = (0,V)&lt;/code&gt;, &lt;code&gt;P2 = (1,V)&lt;/code&gt;, and &lt;code&gt;P3 = (1,1)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This gives us the two functions for x and y coordinates:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X(t) = 3(1−t)t² + t³ = 3t² - 2t³
Y(t) = 3(1−t)²tV +3(1−t)t²V + t³ = t³ - 3Vt² + 3Vt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;V&lt;/code&gt; is our big value and &lt;code&gt;t&lt;/code&gt; is within the range &lt;code&gt;[0 1]&lt;/code&gt;. If we consider our previous example, &lt;code&gt;Y(t)&lt;/code&gt; will give us the value of &lt;code&gt;top&lt;/code&gt; while &lt;code&gt;X(t)&lt;/code&gt; is the time progress. The points &lt;code&gt;(X(t),Y(t))&lt;/code&gt; will then define our curve.&lt;/p&gt;

&lt;p&gt;Let's find the maximum value of &lt;code&gt;Y(t)&lt;/code&gt;. For this, we need to find the value of &lt;code&gt;t&lt;/code&gt; that will give us &lt;code&gt;Y'(t) = 0&lt;/code&gt; (when the derivative is equal to &lt;code&gt;0&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Y'(t) = 3t² - 6Vt + 3V
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Y'(t) = 0&lt;/code&gt; is a quadratic equation. I will skip the boring part and will give you the result, which is &lt;code&gt;t = V - sqrt(V² - V)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;V&lt;/code&gt; is a large value, &lt;code&gt;t&lt;/code&gt; will be equal to &lt;code&gt;0.5&lt;/code&gt;. So, &lt;code&gt;Y(0.5) = Max&lt;/code&gt; and &lt;code&gt;X(0.5)&lt;/code&gt; will be equal to &lt;code&gt;0.5&lt;/code&gt;. That means we reach the maximum value at the halfway point in the animation, which conforms to the parabolic curve we want.&lt;/p&gt;

&lt;p&gt;Also, &lt;code&gt;Y(0.5)&lt;/code&gt; will give us &lt;code&gt;(1 + 6V)/8&lt;/code&gt; and this will allow us to find the max value based on &lt;code&gt;V&lt;/code&gt;. And since we will always use a big value for &lt;code&gt;V&lt;/code&gt;, we can simplify to &lt;code&gt;6V/8 = 0.75V&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We used &lt;code&gt;V = 500&lt;/code&gt; in the last example, so the max value there would come out to &lt;code&gt;375&lt;/code&gt; (or &lt;code&gt;37500%&lt;/code&gt;) and we get the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial state (&lt;code&gt;0&lt;/code&gt;): &lt;code&gt;top: 200px&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Final state (&lt;code&gt;1&lt;/code&gt;): &lt;code&gt;top: 199.5px&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's a difference of &lt;code&gt;-0.5px&lt;/code&gt; between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. Let's call it the increment. For &lt;code&gt;375&lt;/code&gt; (or &lt;code&gt;37500%&lt;/code&gt;) we have an equation of &lt;code&gt;375*-0.5px = -187.5px&lt;/code&gt;. Our animated element is reaching &lt;code&gt;top: 12.5px&lt;/code&gt; (&lt;code&gt;200px - 187.5px&lt;/code&gt;) and gives us the following animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;top: 200px (at 0% of the time ) → top: 12.5px (at 50% of the time) → top: 199.5px (at 100% of the time) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, expressed another way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;top: 200px (at 0%) → top: 12.5px (at 50%) → top: 200px (at 100%)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's do the opposite logic. What value of &lt;code&gt;V&lt;/code&gt; should we use to make our element reach &lt;code&gt;top: 0px&lt;/code&gt;? The animation will be &lt;code&gt;200px → 0px → 199.5px&lt;/code&gt;, so we need &lt;code&gt;-200px&lt;/code&gt; to reach &lt;code&gt;0px&lt;/code&gt;. Our increment is always equal to &lt;code&gt;-0.5px&lt;/code&gt;. The max value will be equal to &lt;code&gt;200/0.5 = 400&lt;/code&gt;, so &lt;code&gt;0.75V = 400&lt;/code&gt; which means &lt;code&gt;V = 533.33&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/mdWybYY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Our element is touching the top!&lt;/p&gt;

&lt;p&gt;Here is a figure that sums up that math we just did:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSjOLuTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/sum-up-parabolic.png%3Fresize%3D1000%252C560%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSjOLuTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/sum-up-parabolic.png%3Fresize%3D1000%252C560%26ssl%3D1" alt="CSS Parobilic curve"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sinusoidal-curve"&gt;
  &lt;/a&gt;
  Sinusoidal curve
&lt;/h2&gt;

&lt;p&gt;We will use almost the exact same trick to create a sinusoidal curve but with a different formula. This time we will use &lt;code&gt;cubic-bezier(0.5,V,0.5,-V)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Like we did before, let's see how the curve will evolve when we increase the value:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qF3iaSrl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k1bc2cq87wfthl6c6au.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qF3iaSrl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5k1bc2cq87wfthl6c6au.png" alt="CSS sinusoidal curve"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think you probably get the idea by now. Using a big value for &lt;code&gt;V&lt;/code&gt; gets us close to a sinusoidal curve.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWpwWwK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's another one with a continuous animation — a real sinusoidal animation!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/qBrEBEM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-math"&gt;
  &lt;/a&gt;
  The math
&lt;/h3&gt;

&lt;p&gt;Let's get in the math for this one! Folllowing the same formula as before, we will get the following functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X(t) = 3/2(1−t)²t + 3/2(1−t)t² + t³ = (3/2)t - (3/2)t² + t³
Y(t) = 3(1−t)²tV - 3(1−t)t²V + t³ = (6V + 1)t³ - 9Vt² + 3Vt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time we need to find the minimum and maximum values for &lt;code&gt;Y(t)&lt;/code&gt;. &lt;code&gt;Y'(t) = 0&lt;/code&gt; will give us two solutions. After solving for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Y'(t) = 3(6V + 1)t² - 18Vt + 3V = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;…we get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t' = (3V + sqrt(3V² - V))/(6V + 1)
t''= (3V - sqrt(3V² - V))/(6V + 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a big value of &lt;code&gt;V&lt;/code&gt;, we have &lt;code&gt;t'=0.211&lt;/code&gt; and &lt;code&gt;t"=0.789&lt;/code&gt;. That means that &lt;code&gt;Y(0.211) = Max&lt;/code&gt; and &lt;code&gt;Y(0.789) = Min&lt;/code&gt;. That also means that &lt;code&gt;X(0.211)= 0.26&lt;/code&gt; and &lt;code&gt;X(0.789) = 0.74&lt;/code&gt;. In other words, we reach the Max at &lt;code&gt;26%&lt;/code&gt; of the time and Min at &lt;code&gt;74%&lt;/code&gt; of the time.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Y(0.211)&lt;/code&gt; is equal to &lt;code&gt;0.289V&lt;/code&gt; and &lt;code&gt;Y(0.789)&lt;/code&gt; to &lt;code&gt;-0.289V&lt;/code&gt;. We got those values with some rounding considering that &lt;code&gt;V&lt;/code&gt; is very big.&lt;/p&gt;

&lt;p&gt;Our sinusoidal curve should also cross the x-axis (or &lt;code&gt;Y(t) = 0&lt;/code&gt;) at half the time (or &lt;code&gt;X(t) = 0.5&lt;/code&gt;). In order to prove this, we use the second derivate of &lt;code&gt;Y(t)&lt;/code&gt; — which should be equal to &lt;code&gt;0&lt;/code&gt; — so &lt;code&gt;Y''(t) = 0&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Y''(t) = 6(6V + 1)t - 18V = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The solution is &lt;code&gt;3V/(6V + 1)&lt;/code&gt;, and for a big &lt;code&gt;V&lt;/code&gt; value, the solution is &lt;code&gt;0.5&lt;/code&gt;. That give us &lt;code&gt;Y(0.5) = 0&lt;/code&gt; and &lt;code&gt;X(0.5) = 0.5&lt;/code&gt; which confirms that our curve crosses the &lt;code&gt;(0.5,0)&lt;/code&gt; point.&lt;/p&gt;

&lt;p&gt;Now let's consider the previous example and try to find the value of &lt;code&gt;V&lt;/code&gt; that gets us back to &lt;code&gt;top: 0%&lt;/code&gt;. We have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initial state (&lt;code&gt;0&lt;/code&gt;): &lt;code&gt;top: 50%&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Final state (&lt;code&gt;1&lt;/code&gt;): &lt;code&gt;top: 49.9%&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Increment: &lt;code&gt;-0.1%&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need &lt;code&gt;-50%&lt;/code&gt; to reach &lt;code&gt;top: 0%&lt;/code&gt;, so &lt;code&gt;0.289V*-0.1% = -50%&lt;/code&gt; which gives us &lt;code&gt;V = 1730.10&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKWwKpa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, our element is touching the top and disappearing at the bottom because we have the following animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;top: 50% → top: 0% → top: 50% → top: 100% → top: 50% → and so on ... 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A figure to sum up the calculation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snmrmnD4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/sum-up-sinusoidal-1.png%3Fresize%3D1000%252C583%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--snmrmnD4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/sum-up-sinusoidal-1.png%3Fresize%3D1000%252C583%26ssl%3D1" alt="CSS sinusoidal curve"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And an example to illustrate all curves together:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwpNwWz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Yes, you see four curves! If you look closely, you will notice that I am using two different animations, one going to &lt;code&gt;49.9%&lt;/code&gt; (an increment of &lt;code&gt;-0.01%&lt;/code&gt;) and another going to &lt;code&gt;50.1%&lt;/code&gt; (an increment of &lt;code&gt;+0.01%&lt;/code&gt;). By changing the sign of the increment, we control the direction of the curve. We can also control the other parameters of the cubic bezier (not the &lt;code&gt;V&lt;/code&gt; one that should remain a big value) to create more variations from the same curves.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/qBrEBbJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And below, an interactive demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJpPJNV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-back-to-our-example"&gt;
  &lt;/a&gt;
  Getting back to our example
&lt;/h2&gt;

&lt;p&gt;Let's get back to our initial example of a ball moving around in the shape of an infinity symbol. I simply combined two sinusoidal animations to make it work.&lt;/p&gt;

&lt;p&gt;If we combine what we did previously with the concept of multiple animations, we can get astonishing results. Here again is the initial example, this time as an interactive demo. Change the values and see the magic:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/rNyaNMJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's go further and add a little CSS Houdini to the mix. We can animate a complex transform declaration thanks to &lt;code&gt;@property&lt;/code&gt; (but CSS Houdini is limited to Chrome and Edge support at the moment).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWpYWbO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;What kind of drawings can you make with that? Here is a few that I was able to make:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xi6-3LDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/cubic-bezier-spirographs.jpg%3Fresize%3D1000%252C550%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xi6-3LDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/cubic-bezier-spirographs.jpg%3Fresize%3D1000%252C550%26ssl%3D1" alt="CSS alien drawing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here is a spirograph animation:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwpNwKb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And a version without CSS Houdini:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRWgRWg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;There's a few things to take away from these examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each keyframe is defined using only one declaration that contain the increment.&lt;/li&gt;
&lt;li&gt;The position of the element and the animation are independent. We can easily place the element anywhere without the need to adjust the animation.&lt;/li&gt;
&lt;li&gt;We made no calculations. There isn't a ton of angles or pixel values. We only need a tiny value within the keyframe and a big value within the &lt;code&gt;cubic-bezier()&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;The whole animation can be controlled just by adjusting the duration value.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-about-transition"&gt;
  &lt;/a&gt;
  What about transition?
&lt;/h2&gt;

&lt;p&gt;The same technique can also be used with the CSS transition property since it follows the same logic when it comes to timing functions. This is great because we're able to avoid keyframes when creating some complex hover effect.&lt;/p&gt;

&lt;p&gt;Here's what I made without keyframes. If you were following me you will remember that they are a part of &lt;a href="https://dev.to/afif/series/12016"&gt;my underline/overlay animation collection&lt;/a&gt; 😉&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/mdWydmd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Mario is jumping thanks to the parabolic curve. We needed no keyframes at all to create that shake animation on hover. The sinusoidal curve is perfectly capable of doing all the work.&lt;/p&gt;

&lt;p&gt;Here is another version of Mario, this time using CSS Houdini. And, yep, he's still jumping thanks to the parabolic curve:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abJzbWR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For good measure, here are more fancy hover effects without keyframes (again, Chrome and Edge only). Spoiler for my next collection 😜&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/poevowW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;Now you have some magic &lt;code&gt;cubic-bezier()&lt;/code&gt; curves and the math behind them. The benefit, of course, is that custom timing functions like this let us do fancy animations without the complex keyframes we generally reach for.&lt;/p&gt;

&lt;p&gt;I understand that not everyone is math-minded and that’s okay. There are tools to help, like Matthew Lein's &lt;a href="https://matthewlein.com/tools/ceaser"&gt;Ceaser&lt;/a&gt;, which lets you drag the curve points around to get what you need. And, if you don't already have it bookmarked, &lt;a href="https://cubic-bezier.com/"&gt;cubic-bezier.com&lt;/a&gt; is another one. If you want to play with cubic-bezier outside the CSS world, I recommend &lt;a href="https://www.desmos.com/calculator/ebdtbxgbq0?lang=fr"&gt;desmos&lt;/a&gt; where you can see some math formulas.&lt;/p&gt;

&lt;p&gt;Regardless of how you get your &lt;code&gt;cubic-bezier()&lt;/code&gt; values, hopefully now you have a sense of their powers and how they can help make for nicer code in the process.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Top Open-Source Status Page Tools for 2021</title>
      <author>Better Uptime</author>
      <pubDate>Wed, 19 May 2021 11:47:43 +0000</pubDate>
      <link>https://dev.to/betteruptime/top-open-source-status-page-tools-for-2021-2dd0</link>
      <guid>https://dev.to/betteruptime/top-open-source-status-page-tools-for-2021-2dd0</guid>
      <description>&lt;p&gt;&lt;strong&gt;Status pages are a must for any online business today&lt;/strong&gt;. In case of incidents or downtime, status pages provide a modern platform for communication with users.&lt;/p&gt;

&lt;p&gt;Now let's have a look at some open source status page tools you can use to build, publish, and maintain your status page and start communicating your downtime in a proper way.&lt;/p&gt;

&lt;p&gt;Want to host your status page for free? Read our article on &lt;a href="https://betterstack.com/community/top-7-free-status-page-tools-for-2021-community-picked/"&gt;best free and paid hosted status page tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u-4L-ih0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ewnfd5xotw7zhv8rgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-4L-ih0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ewnfd5xotw7zhv8rgr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#no-1-open-source-status-page"&gt;
  &lt;/a&gt;
  No. 1 Open Source Status Page:
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#upptime"&gt;
  &lt;/a&gt;
  &lt;a href="https://upptime.js.org/"&gt;Upptime&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Upptime allows users to use GitHub Actions to schedule workflows to run automatically in pre-set time intervals. The shortest interval that is allowed is 5 minutes. This means that Upptime checks your website automatically every 5 minutes and reflects your website status on the status page.&lt;/p&gt;

&lt;p&gt;Once in a day Upptime generates graphs of the site's response times. With this you can easily see and broadcast your long-term stats. Lastly Upptime website also offers some customization options. Those include option to change logo, copy, graphs, and more.&lt;/p&gt;

&lt;p&gt;Overall Upptime is a very nicely designed tool, with plenty of functionality, customization options, and well-maintained documentation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-benefits"&gt;
  &lt;/a&gt;
  Main benefits:
&lt;/h4&gt;

&lt;p&gt;Runs reliably with GitHub Actions&lt;br&gt;
Neat design and loads of customisation options&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explore-more-on-your-own"&gt;
  &lt;/a&gt;
  Explore more on your own:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://demo.upptime.js.org/"&gt;Upptime demo page&lt;/a&gt;&lt;br&gt;
&lt;a href="https://upptime.js.org/docs/get-started/"&gt;Upptime installation docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUIZkUob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tje9bxw9nmwglh8sml46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUIZkUob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tje9bxw9nmwglh8sml46.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#no-2-open-source-status-page"&gt;
  &lt;/a&gt;
  No. 2 Open Source Status Page:
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#cachet"&gt;
  &lt;/a&gt;
  &lt;a href="https://cachethq.io/"&gt;Cachet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Cachet uses Bootstrap 3 to deliver responsive status pages that work well on any device. They offer basic uptime monitors and a great chart dashboard. With their API you can easily set up any metrics you want; be it uptime, error rates, or response times.&lt;/p&gt;

&lt;p&gt;There is also an option to schedule maintenance and communicate it easily to users or other stakeholders.&lt;/p&gt;

&lt;p&gt;A great benefit to anyone looking for extra security is that Cachet offers two-factor authentication, which is compatible with the Google Authenticator app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-benefits"&gt;
  &lt;/a&gt;
  Main benefits:
&lt;/h4&gt;

&lt;p&gt;Ability to show any metric in a chart&lt;br&gt;
Offers two-factor authentication&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explore-more-on-your-own"&gt;
  &lt;/a&gt;
  Explore more on your own:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://demo.cachethq.io/"&gt;Cachet demo page&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.cachethq.io/docs/installing-cachet"&gt;Cachet installation docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gHWhV8Ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kljfznhcwedbtospukkq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHWhV8Ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kljfznhcwedbtospukkq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#no-3-open-source-status-page"&gt;
  &lt;/a&gt;
  No. 3 Open Source Status Page:
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#statping"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/statping/statping"&gt;Statping&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Statping has slightly more features included in their dashboard compared to Cachet and Upptime. The main benefit of Statping is that it offers status announcements, which come in different color schemes to quickly inform users of the current situation. The 3 main announcements are downtime, update, and resolved messages.&lt;/p&gt;

&lt;p&gt;Visually is Statping also slightly better as it offers a dedicated chart for each monitored site. These charts include average response time, uptime, and a time picker to allow for detailed exploration of the historical data.&lt;/p&gt;

&lt;p&gt;However the main benefit of Statping is the notifiers, which are built-in. Those include Slack, Discord, Telegram, Webhooks, and email.&lt;/p&gt;

&lt;p&gt;For those that don't want to host and maintain your statuspage there is a hosted option as well, which costs $6/month.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-benefits"&gt;
  &lt;/a&gt;
  Main benefits:
&lt;/h4&gt;

&lt;p&gt;Notification options integrated&lt;br&gt;
Option to go for a hosted version as well&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explore-more-on-your-own"&gt;
  &lt;/a&gt;
  Explore more on your own:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://demo.statping.com/"&gt;Statping demo page&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/statping/statping"&gt;Statping installation docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pz-mx6_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbw68gd7reqb4adqhx7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pz-mx6_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbw68gd7reqb4adqhx7e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#no-4-open-source-status-page"&gt;
  &lt;/a&gt;
  No. 4 Open Source Status Page:
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#statusfy"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/juliomrqz/statusfy"&gt;Statusfy&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Statustify is another tool to consider, especially when looking for advanced announcement options. Compared to other tools on this list, Statustify offers tagging, timestamps, categorization, and timelines, of different incident and status update announcements. This comes in handy when you need to communicate with your users and want to use status page as the main way to do so.&lt;/p&gt;

&lt;p&gt;On the other hand, Statustify doesn't have charts which is a significant downside for anyone looking to broadcast uptime or incident times data.&lt;/p&gt;

&lt;p&gt;The notification options are also quite limited with only basic subscription options via Web Push, iCalendar, and Twitter available.&lt;/p&gt;

&lt;p&gt;Main benefits:&lt;br&gt;
Advanced announcement options&lt;/p&gt;

&lt;p&gt;Explore more on your own:&lt;br&gt;
&lt;a href="https://demo.statusfy.co/"&gt;Statusfy demo page&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.statusfy.co/guide/#how-it-works"&gt;Statusfy installation docs&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-open-source-tools-to-consider"&gt;
  &lt;/a&gt;
  Other open source tools to consider:
&lt;/h3&gt;

&lt;p&gt;If you want to explore more tools feel free to check this list from &lt;a href="https://awesomeopensource.com/projects/statuspage"&gt;awecomeopensource&lt;/a&gt;. Note that some of the status page tools on this list are no longer maintained and might not be suitable for commercial use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-sure-about-open-source-options"&gt;
  &lt;/a&gt;
  Not sure about open source options?
&lt;/h3&gt;

&lt;p&gt;There are many open source options to get a nice status page. However there are also a few completely free and sufficient hosted solutions that are worth exploring. Let's have a look at 3 status page providers that offer a status page on their free plans:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmOYchWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xdf53mc6twv74mrazsh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmOYchWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xdf53mc6twv74mrazsh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-uptime"&gt;
  &lt;/a&gt;
  &lt;a href="https://betteruptime.com"&gt;Better Uptime&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Better Uptime combines status pages, uptime monitoring, and incident management into a single beautifully designed product.&lt;/p&gt;

&lt;p&gt;Their status page is available for all free users and can be even published on a custom sub-domain with HTTP(s).&lt;/p&gt;

&lt;p&gt;The free plan also offers uptime monitoring with e-mail, Slack, Microsoft teams alerts as well as a basic incident management tool. The paid plans start at $30/month and offer customizable design, e-mail &amp;amp; API subscriptions, and password-protected status pages.&lt;/p&gt;

&lt;p&gt;A great feature about Better Uptime is also the embeddable system status notice, which can be used to communicate any incidents directly on the website, without the need to redirect users to the status page.&lt;/p&gt;

&lt;p&gt;Overall Better Uptime offers a great way of getting a status page quickly and for free. The uptime monitoring and incident management then comes as a plus, which comes handy, especially if you want to save money on expensive dedicated uptime monitoring solutions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-benefits"&gt;
  &lt;/a&gt;
  Main benefits:
&lt;/h4&gt;

&lt;p&gt;Free status page for all users on custom domain&lt;br&gt;
Uptime monitoring built-in&lt;br&gt;
Embeddable system status notice&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explore-more-on-your-own"&gt;
  &lt;/a&gt;
  Explore more on your own:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://betteruptime.com/pricing"&gt;Better Uptime pricing&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.betteruptime.com/"&gt;Better Uptime docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----FXvC8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4fgoisgqupqjuueqnwm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----FXvC8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4fgoisgqupqjuueqnwm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instatus"&gt;
  &lt;/a&gt;
  &lt;a href="https://instatus.com/"&gt;Instatus&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Instatus is a new alternative to Atlassian's Statuspage. They offer a free status page with unlimited subscribers and unlimited teams, but the catch is that it is not on a custom domain.&lt;/p&gt;

&lt;p&gt;Their paid plan then starts at $20/month and offers the same product but with the option to get it on a custom domain.&lt;br&gt;
Instatus is a very well designed tool that is quite similar to Status page and focuses on distinguishing itself mainly with reasonable pricing for smaller teams.&lt;/p&gt;

&lt;p&gt;The feature list includes things you would expect like email subscriptions, scheduled maintenance, or incident templates. Instatus also has an API and integrates with incident management tools like Pagerduty.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-benefits"&gt;
  &lt;/a&gt;
  Main benefits:
&lt;/h4&gt;

&lt;p&gt;Free status page with unlimited team members on instatus domain&lt;br&gt;
Clean and simple design&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explore-more-on-your-own"&gt;
  &lt;/a&gt;
  Explore more on your own:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://instatus.com/pricing"&gt;Instatus pricing&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instatus.com/help/get-started"&gt;Instatus docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q1HjbF0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g227yd0l9tz3df77equ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q1HjbF0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g227yd0l9tz3df77equ.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#atlassian-statuspage"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.atlassian.com/software/statuspage"&gt;Atlassian Statuspage&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Statuspage made by Atlassian is the main player on the status page market. Statuspage's free plan offers 100 subscribers, 2 team members, email &amp;amp; Slack notifications, and limited access to their API.&lt;/p&gt;

&lt;p&gt;The main limitation of the free plan is that it doesn't offer the ability to have it on a custom domain. For such functionality the hobby plan starting at $29/month is necessary. However, this plan also has severe limitations, when it comes to customization as CSS and HTML can't be changed. With Statuspage this is only possible at the business plan that comes at a staggering $399/month.&lt;/p&gt;

&lt;p&gt;Overall Statuspage provides a great tool, but with a very high price tag. Considering other free, paid, and open source alternatives it is up to consideration of each team to justify whether it's really worth it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-benefits"&gt;
  &lt;/a&gt;
  Main benefits:
&lt;/h4&gt;

&lt;p&gt;Established tool made for enterprise&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#explore-more-on-your-own"&gt;
  &lt;/a&gt;
  Explore more on your own:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.atlassian.com/software/statuspage/pricing"&gt;Atlassian statuspage pricing&lt;/a&gt;&lt;br&gt;
&lt;a href="https://support.atlassian.com/statuspage/resources/"&gt;Atlassian statuspage docs&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-open-source-and-paid-solutions"&gt;
  &lt;/a&gt;
  What is the difference between open source and paid solutions?
&lt;/h3&gt;

&lt;p&gt;There are two main differences between the open source and paid status pages. The first one is that &lt;strong&gt;open source pages are not hosted&lt;/strong&gt;, while the paid are. The second one is that &lt;strong&gt;paid pages provide subscription abilities for both users as well as admins&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are of course plenty of other differences like customisability, team access, or integration availability, which are usually provided by the paid solutions, but not by the open source once.&lt;/p&gt;

&lt;p&gt;When considering what solution to pick, the hosting and update subscription questions should be answered first. The hosting vs not hosted question really depends on your technical capabilities and willingness to set it up.&lt;/p&gt;

&lt;p&gt;When it comes to subscription capabilities it is slightly more complicated. As a rule of thumb if you have users and/or customers that rely heavily on your service with their day-to-day operations you should opt for subscriptions. The reason behind this is that once you set up the status page you can either subscribe or ask them to subscribe for status updates. When there is an incident they will all receive a notification about it and you don't have to worry about getting your support channels overwhelmed.&lt;/p&gt;

&lt;p&gt;If you have a e-commerce site or a hobby project you can go with open source tool as subscriptions are probably not necessary for you. However please be careful. With hosted solution (especially when providing reasonable SLA uptime) you can stay calm that it will work all the time, but with open source one, all the responsibility lies on you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-benefits-of-having-a-status-page"&gt;
  &lt;/a&gt;
  What are the benefits of having a status page?
&lt;/h3&gt;

&lt;p&gt;There are two main benefits of having a status page: &lt;strong&gt;Lower support cost&lt;/strong&gt; and &lt;strong&gt;higher customer trust&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The lower support costs will come as a result of users and customers checking your status page and reading your system announcements instead of just directly going on your support page and submitting a ticket.&lt;/p&gt;

&lt;p&gt;In order to achieve this you will firstly need to have a reachable and easily rememberable URL for your page. The best practise is to go for status.yourdomain.com format. Since it's used by major companies many people often try to check this URL by default.&lt;/p&gt;

&lt;p&gt;For less tech-savvy people it's recommended to also include a link to your status page on your website or in your product to make sure they can easily reach it. Of course, in case of downtime, this won't be an option and because of that, it's recommended to have a subscription option for your status page users.&lt;/p&gt;

&lt;p&gt;What status page subscription does is that it allows everyone to receive a notification (usually an email) whenever your website goes down.&lt;/p&gt;

&lt;p&gt;Once a status page is setup and its existence communicated to users, one can start building trust by being transparent about incidents and communicating them before they are even noticed by users. When this becomes a standard, users will know that if something goes wrong you will be the first one to let them know, which marks a first step towards building trust with your users.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>monitoring</category>
      <category>news</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to make an interactive in-chat questionnaire with TalkJS HTML Panels</title>
      <author>Aswin Rajeev</author>
      <pubDate>Wed, 19 May 2021 11:43:43 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-make-an-interactive-in-chat-questionnaire-with-talkjs-html-panels-4moi</link>
      <guid>https://dev.to/talkjs/how-to-make-an-interactive-in-chat-questionnaire-with-talkjs-html-panels-4moi</guid>
      <description>&lt;p&gt;Today’s article will be a quick introduction to using HTML panels with the &lt;a href="https://talkjs.com/"&gt;TalkJS Chat API&lt;/a&gt; and how you can create your very own interactive questionnaire.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Below is the end product that we will be building today. The project is available on &lt;a href="https://github.com/aswinrajeevofficial/TalkJS-Questionnaire"&gt;GitHub&lt;/a&gt; and you can use the folder structure there to structure your own project and code along.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SD6UZ0YC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtmoxjuh5yd4cy1ra462.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SD6UZ0YC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtmoxjuh5yd4cy1ra462.gif" alt="Simple TalkJS Questionnaire"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-basic-chatbox"&gt;
  &lt;/a&gt;
  Setting up a basic chatbox
&lt;/h2&gt;

&lt;p&gt;Setting up a basic popup is very easy with TalkJS. If you’ve already signed up, you will have your APP_ID. Follow the steps mentioned on the &lt;a href="https://talkjs.com/docs/Getting_Started/index.html"&gt;getting started guide&lt;/a&gt; here to set up a basic popup  chatbox. If everything is set up right, you should see a basic inbox on the webpage, but we need to change up the position and the type of it. Inside the script.js file, make the following changes to replace the inbox with a chatbox in the popup mode.&lt;/p&gt;

&lt;p&gt;Replace this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createInbox&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;inbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;talkjs-container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chatboxPopup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;keepOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;chatboxPopup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because our use case is more intended for one-on-one conversations and we don’t require an inbox. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OPTIONAL&lt;/strong&gt;&lt;br&gt;
Since the users didn’t have profile pictures, the &lt;code&gt;photoUrl&lt;/code&gt; property of each user was replaced with an image from &lt;a href="https://randomuser.me/"&gt;Random User Generator&lt;/a&gt; to give it a more realistic look and feel. Ideally, this should be retrieved from your system’s database for the user.&lt;/p&gt;

&lt;p&gt;With that, you should have a basic chatbox up and running, placed at the bottom right corner of your webpage with two imaginary users Alice and Sebastian. I have added an additional property called questionnaireAnswered inside the custom field for the user Alice, to check whether they’ve answered the questionnaire or not. In a real application, this would be set and retrieved from the database.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-quick-refresher"&gt;
  &lt;/a&gt;
  A quick refresher
&lt;/h2&gt;

&lt;p&gt;Before we get into adding an HTML panel, here are the basic steps that happened till now. We wait until the TalkJS script is loaded from the CDN. Once this is complete, we will initiate a &lt;a href="https://talkjs.com/docs/Reference/JavaScript_Chat_SDK/Session.html"&gt;Session&lt;/a&gt; for the current user using the appID (from your dashboard) and the currently logged in user (Alice, in this case). We create another user, to whom Alice will talk to, and then create a conversation between the two using a unique ID. Once the conversation is created, we set the participants and then create the chatbox for that conversation. After the chatbox has been created, we mount it inside the div with the id ‘talkjs-container’.&lt;/p&gt;

&lt;p&gt;In this scenario, Sebastian is the person to whom we are talking to. Ideally, he would be a user from the system backend, whom we can refer to as the operator. Sebastian’s welcome message is “Hi, Do you mind answering a short questionnaire?”. If Alice responds “Yes”, the chatbox won’t display anything. But if she responds “No”, it will start the questionnaire.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#html-panels-and-listening-for-events"&gt;
  &lt;/a&gt;
  HTML Panels and Listening for Events
&lt;/h2&gt;

&lt;p&gt;To listen to what the user types into the chatbox, we need to create an event listener. In our case, it will be the ‘sendMessage’ event that will execute an anonymous function every time the user sends a message. The function takes in an optional object that consists of the entire information about the conversation. We need this to check what the user actually typed into the message box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;chatboxPopup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sendMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We initialize a variable called count to keep track of the questions. We perform the following check first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;questionnaireAnswered&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This says if the user replied ‘No’ and if the count is equal to one and the user hasn’t answered the questionnaire before, then execute a piece of code. Inside that block, we will be creating an HTML panel to display the questionnaire. Below is the file structure we will be using. There will be three questions in the questionnaire, followed by a thank you note. These are 4 separate HTML panels, with their own styling. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mjqt95d_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl2i8ldsy6tvo061odo7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mjqt95d_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tl2i8ldsy6tvo061odo7.JPG" alt="File Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The HTML Panels that are loaded just above the message field and it can be used to render almost any type of content giving you all the functionality of an actual webpage. To create an HTML Panel for your chatbox, we use the following code snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;chatboxPopup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHtmlPanel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`questionnaire_panels/question_1.html`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has three fields that are fed as input. One is the URL of the webpage. This is a relative path, but it can be replaced with an absolute path as well. The height of the panel and whether to show it or not. If you see the file structure above, you can see that we have three HTML files for the three questions and we display them one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-questions-in-the-html-panel"&gt;
  &lt;/a&gt;
  Show questions in the HTML Panel
&lt;/h2&gt;

&lt;p&gt;For now, the questions inside the HTML Panel are displayed inside a simple span class. We have a stylesheet for all the questions that are referenced in the file as shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"questionnaire_style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class = &lt;/span&gt;&lt;span class="s"&gt;"question-div"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;    
    &lt;span class="nt"&gt;&amp;lt;h4&lt;/span&gt; &lt;span class="na"&gt;class = &lt;/span&gt;&lt;span class="s"&gt;"questionnaire-heading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;#128525;&lt;/span&gt; Customer Experience Questionnaire &lt;span class="ni"&gt;&amp;amp;#128525;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class = &lt;/span&gt;&lt;span class="s"&gt;"question"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1. Is this site helpful?&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since each HTML Panel is rendered inside an iframe, it can be controlled independently. You can mess around with the heading and contents of the question, but this is the skeleton of the HTML panel used for our questionnaire. Do note that the HTML Panel can be used for almost any kind of content. This can be radio buttons, input fields, forms, and much more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;questionnaireAnswered&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;chatboxPopup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHtmlPanel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`questionnaire_panels/question_1.html`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="c1"&gt;//After displaying the panel, we set the flag to true and increment count&lt;/span&gt;
            &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;questionnaireAnswered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;chatboxPopup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHtmlPanel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`questionnaire_panels/question_2.html`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;chatboxPopup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHtmlPanel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`questionnaire_panels/question_3.html`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see in the above code snippet that for a new user who has not answered the questionnaire yet, the HTML panel will be displayed. As soon as they answer the first question, count will increment to 2. This will display the second question and set the questionnaireAnswered flag to true. Once the second question has also been answered, count is incremented to 3, and this will display the third question. The questionnaireAnswered flag will ensure that the questionnaire is not displayed to the user multiple times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#completing-the-questionnaire"&gt;
  &lt;/a&gt;
  Completing the questionnaire
&lt;/h2&gt;

&lt;p&gt;We have now set up our HTML Panels for the questionnaire. But what happens when the user completes it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;chatboxPopup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHtmlPanel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;questionnaire_panels/thank_you.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="c1"&gt;//Once loaded, it will hide itself after a span of 1.5 seconds. Once this is done,&lt;/span&gt;
            &lt;span class="c1"&gt;//the user can chat as usual with the operator&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlPanel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;htmlPanel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hide&lt;/span&gt;&lt;span class="p"&gt;();},&lt;/span&gt; &lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                
            &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code snippet shows when the count has been incremented to 3 (starting from 0), it means that the user has responded to all questions and now we display a simple thank you note. This is again, another HTML Panel, that will show for 1.5 seconds and hide itself. Once this is done the user can continue chatting to the operator or navigate away. With that, you should have a simple questionnaire set up with TalkJS and vanilla JavaScript. We hope you enjoyed this how-to and can’t wait to see what you come up with.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Diagramming distributed architectures with the C4 model</title>
      <author>Simon Brown</author>
      <pubDate>Wed, 19 May 2021 11:38:25 +0000</pubDate>
      <link>https://dev.to/simonbrown/diagramming-distributed-architectures-with-the-c4-model-51cm</link>
      <guid>https://dev.to/simonbrown/diagramming-distributed-architectures-with-the-c4-model-51cm</guid>
      <description>&lt;p&gt;"I read that C4 is best suited for monolithic architectures and less suited to distributed architectures" ... this is a statement I see frequently, and it isn't true. The &lt;a href="https://c4model.com"&gt;C4 model&lt;/a&gt; is a hierarchical collection of diagrams based upon a small set of abstractions. There's nothing here that makes it more or less suitable for distributed architectures than UML, ArchiMate, or ad hoc whiteboard sketches. The problem is really one of tooling, and our inability to think past static PNG files.&lt;/p&gt;

&lt;p&gt;If you're following Conway's Law, and have different teams owning different parts of your distributed architecture, this post likely isn't for you. This post is really aimed at teams building a distributed monolith - one team, lots of separately deployable microservices and/or lambdas, lockstep deployment, etc. These architectures tend to have lots of elements and relationships at the C4 model &lt;em&gt;container&lt;/em&gt; level, making it difficult to create a comprehensive container diagram that's not cluttered, and easy to understand. &lt;a href="https://twitter.com/peibolsang/status/1393468838822481921"&gt;This tweet&lt;/a&gt; sums up the situation well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"with serverless, you are deploying your UML collaboration diagram!"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Any diagram with 20+ elements (perhaps fewer) starts to get complicated quickly, making it harder to tell the story you want to tell. A complicated architecture will lead to a complicated diagram.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An example
&lt;/h2&gt;

&lt;p&gt;This is an oversimplified example, (and please don't create a distributed architecture that's really just a fragile chain of synchronous services communicating with each other!), but I want to use this example to illustrate some points about diagramming. Many teams would initially approach this by drawing a diagram showing the entirety of their architecture - perhaps showing all of the containers that make up the software system, plus their external dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYKSgbf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oexr9e9din2zem9c4opy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYKSgbf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oexr9e9din2zem9c4opy.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Granted this diagram isn't too bad, and this approach will work fine for smaller software systems. It falls apart very quickly once you start getting to 10 services, or 20 services, or 100 services. Although we'd ideally like to create a single diagram that shows everything, it's just not feasible in many cases. That approach to diagramming doesn't scale. You do have some options though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#option-1-create-a-number-of-smaller-diagrams"&gt;
  &lt;/a&gt;
  Option 1: Create a number of smaller diagrams
&lt;/h2&gt;

&lt;p&gt;One of those options is to create multiple diagrams showing a subset of the overall story. You could create diagrams to show a single domain, a bounded context, a business capability, a feature, and so on. Alternatively, you could create diagrams to focus on a single service plus its direct afferent/efferent couplings. Here's an example that focusses on "Service 1" rather than showing all containers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9oDcgYpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1eciygoq4342pnzb5c3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9oDcgYpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1eciygoq4342pnzb5c3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We do lose some of the "big picture" by doing this, but this diagram is much easier to understand because it has a much more confined scope. A problem with this approach is the same one I outlined in &lt;a href="https://dev.to/simonbrown/diagrams-as-code-2-0-82k"&gt;Diagrams as code 2.0&lt;/a&gt; ... we're going to need to repeat elements/relationships across multiple diagrams, and we need a strategy for keeping them all in sync when things change.&lt;/p&gt;

&lt;p&gt;And that leads to tooling, and diagramming vs modelling. I've said this before: we need to &lt;a href="https://dev.to/simonbrown/visio-draw-io-lucidchart-gliffy-etc-not-recommended-for-software-architecture-diagrams-4bmm"&gt;stop using general purpose diagramming tools for software architecture diagrams&lt;/a&gt; (Visio, etc), and we should think carefully before &lt;em&gt;handcrafting&lt;/em&gt; diagrams with PlantUML, C4-PlantUML, Mermaid, etc too.&lt;/p&gt;

&lt;p&gt;The above diagram that focusses on "Service 1" is trivial to create with any "model + views" tooling. For example, with the Structurizr DSL, once you've defined your overall model, you can create the above diagram like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;views {
  container softwareSystem {
    include user -&amp;gt;service1-&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This says, "create a container view showing the user, service 1, and anything directly connected to service 1". It's compatible with a number of diagramming formats too via the &lt;a href="https://github.com/structurizr/cli/blob/master/docs/export.md"&gt;Structurizr CLI export command&lt;/a&gt;. Here's a PlantUML version of the above diagram, created from the same Structurizr DSL code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0MqKBk---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fmtid113hrrkjuqhi1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0MqKBk---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fmtid113hrrkjuqhi1s.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A "model + views" tool provides a quick and easy way to tell different stories from the model, while keeping all resulting diagrams in sync. The Structurizr DSL and CLI are free and open source, plus any good UML tool from the past 20+ years should offer this functionality too, albeit with a very different user experience. Modelling is not new, and we really shouldn't have thrown it away in our haste to become "agile".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#option-2-use-a-different-visualisation-format"&gt;
  &lt;/a&gt;
  Option 2: Use a different visualisation format
&lt;/h2&gt;

&lt;p&gt;With all the computing power available to us, it still amazes me that teams "just want a PNG image to embed in Confluence". Other documentation tools are available, of course.&lt;/p&gt;

&lt;p&gt;Traditional static diagrams are fabulous for communication, but they should not be the only tools in your toolbox. Once you relinquish your obsession with static PNG images and jump across the chasm, you might find there are other visualisation formats that are more suited to helping you tell a story.&lt;/p&gt;

&lt;p&gt;For example, an interactive force-directed graph is better suited to showing and exploring larger quantities of data. Something like &lt;a href="https://d3js.org"&gt;D3.js&lt;/a&gt; admittedly has a steep learning curve, but makes this relatively straightforward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBoKCXOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puhc4q0i8fewgsa63wyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBoKCXOn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puhc4q0i8fewgsa63wyu.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(yes, the irony of posting a static screenshot of an interactive graph is not lost on me, so &lt;a href="https://structurizr.com/dsl?src=https://gist.githubusercontent.com/simonbrowndotje/25a2ee86acf57969c01196f6c41389a2/raw/2bfa5c9df4ff113416b9cf34c6cbc2cf00932676/gistfile1.txt&amp;amp;view=Containers_All&amp;amp;renderer=graph"&gt;here's a link to the interactive version&lt;/a&gt;) &lt;/p&gt;

&lt;p&gt;Alternatively, there are tools like &lt;a href="https://www.ilograph.com"&gt;Ilograph&lt;/a&gt;, which provides a way to navigate a model using an interactive UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--np-DXobc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jp5ymivglkm31b6enhdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--np-DXobc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jp5ymivglkm31b6enhdy.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZFft6Zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm02csvqvlben1pyuw3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZFft6Zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm02csvqvlben1pyuw3v.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://structurizr.com/dsl?src=https://gist.githubusercontent.com/simonbrowndotje/25a2ee86acf57969c01196f6c41389a2/raw/2bfa5c9df4ff113416b9cf34c6cbc2cf00932676/gistfile1.txt&amp;amp;renderer=ilograph"&gt;a Structurizr DSL to Ilograph export is available&lt;/a&gt; if you don't like writing Ilograph's YAML definition by hand)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In summary, the C4 model is not less suitable than any of the other alternatives for diagramming distributed architectures. And you have the same set of problems diagramming the components inside a larger monolithic application too. Those problems are related to the size and complexity of the diagram. If a diagram with a dozen boxes is hard to understand, don't draw a diagram with a dozen boxes!&lt;/p&gt;

&lt;p&gt;Instead, switch from diagramming to modelling, think about what the story is you're trying to tell, and look at how technology can help you achieve that goal. &lt;a href="https://dev.to/simonbrown/diagrams-as-code-2-0-82k"&gt;Diagrams as code 2.0&lt;/a&gt; is a very powerful approach if you're willing to jump across the chasm away from diagramming.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>productivity</category>
      <category>c4model</category>
      <category>microservices</category>
    </item>
    <item>
      <title>How to use Python Break &amp; Continue statements? </title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 19 May 2021 11:19:03 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-use-python-break-continue-statements-1jo1</link>
      <guid>https://dev.to/hrishikesh1990/how-to-use-python-break-continue-statements-1jo1</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how the python break and python continue statements affect the flow of a loop and how you could effectively in your programs.  &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-do-we-use-python-break-and-other-loop-control-statements"&gt;Why do we use python break and other loop control statements?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-break-statement"&gt;Python break statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-continue-statement"&gt;Python continue statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#closing-thoughts"&gt;Closing thoughts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-use-python-break-and-other-loop-control-statements"&gt;
  &lt;/a&gt;
  Why do we use python break and other loop control statements?
&lt;/h2&gt;

&lt;p&gt;Loops in python are used to iterate or repeat a command multiple times. Python further provides few more statements to help us control the flow of the loop.  Say you would want to skip a particular iteration or exit the loop when a particular condition is met python lets us perform these operations using the set of inbuilt loop control statements.&lt;/p&gt;

&lt;p&gt;In this tutorial, we look at the two most commonly used control statements. Python &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-break-statement"&gt;
  &lt;/a&gt;
  Python break statement
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;for&lt;/code&gt; loop runs for a set number of iterations and &lt;code&gt;while&lt;/code&gt; runs until a condition is true. However, say you need to exit the loop before it ends, this is where the python break statements are used. The &lt;code&gt;break&lt;/code&gt; statements are your methods of asking the loop to stop right now and execute the next statement. And almost all such instances are done when a condition is triggered and that is why python &lt;code&gt;break&lt;/code&gt; is generally placed inside an &lt;code&gt;if&lt;/code&gt; statement. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Although python break exits the loops, it only exits the loop it is placed in, so while using nested loop only the loop containing the &lt;code&gt;break&lt;/code&gt; statement would be exited. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Syntax:&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;"flexiple"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The loop runs 5 times and when &lt;code&gt;if&lt;/code&gt; is true, the python break statement runs and exits the loop. &lt;/p&gt;

&lt;p&gt;Although we used a &lt;code&gt;for&lt;/code&gt; loop for our code example it can be used in a &lt;code&gt;while&lt;/code&gt; as well. One of the most common use cases of the python break is to look for and exit the loop when the word "exit" is entered.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-continue-statement"&gt;
  &lt;/a&gt;
  Python Continue Statement
&lt;/h2&gt;

&lt;p&gt;Unlike the python break, the &lt;code&gt;continue&lt;/code&gt; statement stops the flow and returns the control to the beginning of the loop. Essentially it does not process the rest of the code for a particular iteration and returns the flow to the start of the code. And similar to the python &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt; is also mostly used inside an &lt;code&gt;if&lt;/code&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Syntax:&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;"flexiple"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'p'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;
&lt;span class="n"&gt;e&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the output the python continues to skip the iteration for "p" and executes the rest of the code. And similar to the break statement &lt;code&gt;continue&lt;/code&gt; can also be used with both &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loops.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts:
&lt;/h3&gt;

&lt;p&gt;Although the python break and continue statements may seem quite straightforward it may require some practice to get the hang of it. Practicing them using a &lt;code&gt;while true:&lt;/code&gt; loop would help you get a better understanding of how the flow can be changed but remember to insert a &lt;code&gt;break&lt;/code&gt; before running it or you would create an infinity loop. Once you have properly understood this you can have a look at the Python pass statement which is another loop control statement.&lt;/p&gt;

&lt;p&gt;Do let me know your thought in the comment section below :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A simple way to reduce complexity of Information Systems </title>
      <author>Yehonathan Sharvit</author>
      <pubDate>Wed, 19 May 2021 11:12:01 +0000</pubDate>
      <link>https://dev.to/viebel/a-simple-way-to-reducing-complexity-of-information-systems-2d22</link>
      <guid>https://dev.to/viebel/a-simple-way-to-reducing-complexity-of-information-systems-2d22</guid>
      <description>&lt;p&gt;When it comes to information systems, things can get pretty complex, to say the least. A typical information system like a web service, at the most basic level, is just one process in a massive, integrated data pipeline. It deals mostly with data processing: fetching data, transforming it and passing it on to another system. But as other systems pile up on top of it, the complexity builds up quickly. Managing and mitigating that complexity then becomes a major challenge for developer teams.&lt;/p&gt;

&lt;p&gt;Traditionally, information systems have been implemented using software programming paradigms like Object-Oriented Programming, based on the concept of “objects”, which can contain data and code. Information systems that follow Object-Oriented Programming with no constraints tend to be complex, in the sense that they are hard to understand and hard to maintain.&lt;/p&gt;

&lt;p&gt;The increase of system complexity tends to reduce the velocity of the development team as it takes more time to add new features to the system. Hard-to-diagnose issues occur more frequently in production. Issues that cause either user frustration when the system doesn’t behave as expected or even worse, system down time.&lt;/p&gt;

&lt;p&gt;Three aspects of Object-Oriented programming are a source of complexity:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data encapsulation in objects&lt;/li&gt;
&lt;li&gt;Non-flexible data layout in classes&lt;/li&gt;
&lt;li&gt;State mutation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Data encapsulation inside objects is beneficial in many cases. However, in the context of modern information systems, data encapsulation tends to create complex class hierarchies where objects are involved in many relations with other objects. &lt;/p&gt;

&lt;p&gt;Over the years, this complexity has been alleviated by the invention of advanced design patterns and software frameworks. But information systems built with Object-Oriented programming still tend to be complex. &lt;/p&gt;

&lt;p&gt;Representing every piece of data through a class is helpful for tooling (e.g. autocompletion in the editor) and errors like accessing non-existing fields are detected at compile time. However, the rigidity of class layout makes data access not flexible. In the context of information systems, it’s painful: Each and every variation of data is represented by a different class. For instance, in a system that deals with customers, there is a class that represents a customer as seen by the database and a different class that represents a customer as seen by the data manipulation logic. Similar data with different field names, but the proliferation of classes is unavoidable. The reason is that data is “locked” in classes. &lt;/p&gt;

&lt;p&gt;In multi-threaded information systems, the fact that the state of the object’s is allowed to be mutated is another source of complexity. The introduction of various lock mechanisms in order to prevent data from being modified concurrently and to ensure the state of our objects remain valid makes the code harder to write and to maintain. Sometimes, before passing data to a method form third-party libraries, we use a defensive copy strategy to make sure our data is not modified. The addition of lock mechanisms or defensive copy strategy makes our code more complex and less performant. &lt;br&gt;
Data-Oriented Programming (DOP) is a set of best practices that have been followed by developers in order to reduce complexity of information systems. &lt;/p&gt;

&lt;p&gt;The idea behind DOP is to simplify the design and implementation of information systems by treating data as a “first-class citizen”. Instead of designing information systems around objects that combine data and code, DOP guides us to separate code from data and to represent data with immutable generic data structures. As a consequence, in DOP developers manipulate data with the same flexibility and serenity as they manipulate numbers or strings in any program.&lt;br&gt;
DOP reduces system complexity by following three core principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Separating code from data&lt;/li&gt;
&lt;li&gt;Representing data with generic data structures&lt;/li&gt;
&lt;li&gt;Keeping data immutable&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mJZaWeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sd9ej1czsrc13mrml10l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mJZaWeA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sd9ej1czsrc13mrml10l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One possible way to adhere to DOP in an Object-Oriented programming language is to write code in static class methods that receive data they manipulate as an explicting argument.&lt;br&gt;
The separation of concerns achieved by separating code from data tends to make the class hierarchy less complex: instead of designing a system with a class diagram made of entities involved in many relationships, the system is made of two disjoint simpler subsystems: a code subsystem and a data subsystem.&lt;/p&gt;

&lt;p&gt;When we represent data with generic data structures (like hash maps and lists), data access is flexible and it tends to reduce the number of classes in our system.&lt;br&gt;
Keeping data immutable brings serenity to the developer when they need to write a piece of code in a multi-threaded environment. Data validity is ensured without the need to protect the code with lock mechanisms or defensive copy. &lt;br&gt;
DOP principles are applicable both to Object-Oriented and to functional programming languages. However, for Object-Oriented developers, the transition to DOP might require more of a mind shift than for functional programming developers, as DOP guides us to get rid of the habit of encapsulating data in stateful classes.&lt;/p&gt;

&lt;p&gt;Yehonathan Sharvit has been working as a software engineer since 2000, programming with C++, Java, Ruby, JavaScript, Clojure and ClojureScript. He currently works as a software architect at CyCognito, building software infrastructures for high scale data pipelines. He shares insights about software at his tech blog. Yehonathan recently published the book &lt;a href="https://www.manning.com/books/data-oriented-programming?utm_source=viebel&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=book_sharvit2_data_1_29_21&amp;amp;a_aid=viebel&amp;amp;a_bid=d5b546b7"&gt;Data-Oriented Programming&lt;/a&gt; available from Manning.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>javascript</category>
      <category>java</category>
      <category>cpp</category>
    </item>
  </channel>
</rss>
