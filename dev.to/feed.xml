<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Redis:  Exploring Redis as Serverless Database to solve idempotence in APIs</title>
      <author>Ibrahim Cesar</author>
      <pubDate>Fri, 14 May 2021 12:53:12 +0000</pubDate>
      <link>https://dev.to/aws-builders/redis-exploring-redis-as-serverless-database-to-solve-idempotence-in-apis-2gma</link>
      <guid>https://dev.to/aws-builders/redis-exploring-redis-as-serverless-database-to-solve-idempotence-in-apis-2gma</guid>
      <description>&lt;p&gt;&lt;strong&gt;Redis means fast.&lt;/strong&gt; This was the  impression I always had. But, at the same time, for me, Redis was “just” (as if this wasn't  enough) a cache store. To my surprise, Redis is much more versatile than this.&lt;/p&gt;

&lt;p&gt;This will be the first in a series exploring &lt;a href="https://dev.to/aws-builders/the-state-of-serverless-databases-in-aws-part-0-162c"&gt;The State of Serverless Databases in AWS&lt;/a&gt; and for it I picked Redis , you know, just to try something other than the usual suspect (DynamoDB) (and to give  a third-party offering a try). In the following weeks, my plan is to explore some database offerings used along with serverless at AWS and explore their particular tradeoffs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-redis"&gt;
  &lt;/a&gt;
  Serverless Redis
&lt;/h2&gt;

&lt;p&gt;As &lt;a href="https://redis.io/"&gt;self-defined, Redis is&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;...an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can take &lt;a href="https://redislabs.com/redis-enterprise/data-structures/"&gt;a look in several in-depth papers&lt;/a&gt; describing each data structure in order to make a better informed decision. Since it's open source we could theoretically implement it in a server but it would be a strange, if not wrong turn, in keeping in the Serverless lane. Here enters &lt;a href="https://upstash.com/"&gt;Uptash, a Serverless database&lt;/a&gt; offering for Redis. In &lt;a href="https://dev.to/fllstck/microblogging-with-serverless-redis-2nl3"&gt;Microblogging with Serverless Redis&lt;/a&gt; you can take a look how CRUD works and more framework-oriented, you could checkout &lt;a href="https://twitter.com/leeerob"&gt;Lee Robinson&lt;/a&gt; has a great video on how to use it with Next.js:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FytxaSVQROc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As I promised in the opening article, I want to do in-depth explorations. Not just our run-of-the-mill &lt;code&gt;foo&lt;/code&gt; / &lt;code&gt;bar&lt;/code&gt; examples (for which the official docs of Upstash is guilty, BTW). For Redis, I almost stuck at the key/value store type, but there are several use cases you can unlock with this solution since it gives you access to a GraphQL API, for which you can have an explorer for you, documented. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Lq63c02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6l30fgh7caphace4j6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Lq63c02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6l30fgh7caphace4j6p.png" alt="Upstash offering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before jumping in: for me, the argument of having a &lt;strong&gt;price cap&lt;/strong&gt; and no surprises in a bill is always a &lt;em&gt;feature&lt;/em&gt;, and in this case you don't even need to give your credit card details. I have spoken about this issue in a previous post, &lt;a href="https://dev.to/aws-builders/open-letter-to-aws-please-give-us-price-cap-4ge6"&gt;Open letter to AWS: Please, give us a price cap&lt;/a&gt;,  and for me at least, as a developer and living in Brazil, it is an extremely overlooked matter by AWS.&lt;/p&gt;

&lt;p&gt;My objective is to try to take use-cases with some value and at the same time explores a deep more about dealing with the data and I want to tackle a very important one, at least, for me: &lt;em&gt;idempotence&lt;/em&gt;. So there will be nothing fancy than a &lt;code&gt;key&lt;/code&gt;/&lt;code&gt;value&lt;/code&gt; store but I think explore an important feature for any production-grade function. Also, please note that while this is a feature in &lt;code&gt;NodeJS&lt;/code&gt;, I'm following the steps of the official &lt;code&gt;Python&lt;/code&gt; Powertools library. I hope if you are not from the &lt;code&gt;Node&lt;/code&gt; ecosystem could get some value as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#idempotence-doing-by-myself"&gt;
  &lt;/a&gt;
  Idempotence: doing by myself
&lt;/h2&gt;

&lt;p&gt;An idempotent operation can repeat an arbitrary number of times, and the result will always be the same. In arithmetic, adding zero to a number is idempotent. Some kinds of requests into AWS lambda should run more than once, generating inconsistency problems when your function isn’t idempotent. AWS has a &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/lambda-function-idempotent/"&gt;page in how to address this much needed feature&lt;/a&gt;. And, yes, it is canon, there is a really important reason to &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-retries.html"&gt;make your API idempotent&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Making an API idempotent is not as &lt;a href="https://awslabs.github.io/aws-lambda-powertools-python/develop/utilities/idempotency/"&gt;trivial as many people think&lt;/a&gt;. You could start out by looking at &lt;em&gt;Lambda Powertools for Python&lt;/em&gt; from AWS that does a magnificent job of explaining this use case and a concrete way to implement. There’s also this great article from &lt;a href="https://twitter.com/mfeatonby"&gt;Malcolm Featonby&lt;/a&gt;, &lt;a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/"&gt;Making retries safe with idempotent APIs&lt;/a&gt; featured in the Amazon Builder’s Library as &lt;a href="https://aws.amazon.com/blogs/architecture/category/learning-levels/advanced-300/"&gt;Architecture level 300&lt;/a&gt; which falls in the &lt;em&gt;advanced&lt;/em&gt; classification.&lt;/p&gt;

&lt;p&gt;Let’s start with our scope from the &lt;em&gt;Lambda Powertools&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Idempotency key&lt;/strong&gt; is a hash representation of either the entire event or a specific configured subset of the event, and invocation results are JSON serialized and stored in your persistence storage layer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, I create a new database. I’m from the famous ‘5 minutes install’ from WordPress. Upstash claims a 30-second installation, and they are not joking):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---qGItALP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rq8ela06752l03a1rhp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---qGItALP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rq8ela06752l03a1rhp.png" alt="Creating a Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see I chose to enable the &lt;strong&gt;Strong Consistency Mode&lt;/strong&gt;. &lt;strong&gt;strong consistence&lt;/strong&gt;. Strong Consistency offers up-to-date data but at the cost of high latency. Eventual consistency offers low latency but may reply to read requests with stale data since all nodes of the database may not have the updated data. Since this is a highly complex topic, and this brief explanation only very briefly begins to scratch at its surface, I recommend you read the book &lt;a href="https://amzn.to/3f2LKTS"&gt;&lt;strong&gt;Designing Data-Intensive Applications&lt;/strong&gt;: &lt;em&gt;The Big Ideas Behind Reliable, Scalable, and Maintainable Systems&lt;/em&gt;&lt;/a&gt; by &lt;a href="https://twitter.com/martinkl"&gt;Martin Kleppmann&lt;/a&gt;. I usually work with eventual consistency &lt;em&gt;most of the time&lt;/em&gt;. I’m picking strong here because I want to make the best effort to be as idempotent as possible, because otherwise we could get false negatives.&lt;/p&gt;

&lt;p&gt;Each Lambda receives an &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/3c5d54b997a28dba42c10b01dfb7c0d8d30231e8/types/aws-lambda/trigger/api-gateway-proxy.d.ts#L186"&gt;&lt;code&gt;event&lt;/code&gt;&lt;/a&gt; as part of their request.&lt;/p&gt;

&lt;p&gt;So, the first thing we are going to do on our lambda function is to create a hash representation of the whole object &lt;code&gt;event&lt;/code&gt;. I'll use the Node native &lt;a href="https://nodejs.org/api/crypto.html"&gt;&lt;code&gt;crypto&lt;/code&gt;&lt;/a&gt; lib.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;sha256&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will generate a unique identifier for that given event and this is going to be used as our unique key in the Redis database.&lt;/p&gt;

&lt;p&gt;I’ll leverage &lt;a href="https://middy.js.org/"&gt;&lt;strong&gt;Middy&lt;/strong&gt;&lt;/a&gt;, a lightweight middleware for Lambda in Node, which has a particularly cool feature (and a really helpful one for the task at hand) that is its &lt;em&gt;onion-like&lt;/em&gt; middleware pattern implementation and the ability to create a middleware that can read the function &lt;em&gt;after&lt;/em&gt; and &lt;em&gt;before&lt;/em&gt; the handler, which is essential for idempotent APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--luRMfSId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmwmjxqpw3tjzgpx7ucn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--luRMfSId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmwmjxqpw3tjzgpx7ucn.png" alt="Middy Middlewares"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;before&lt;/em&gt; we had to turn the &lt;code&gt;event&lt;/code&gt; into a hash;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createHash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;crypto&lt;/span&gt;
           &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;sha256&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;base64&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note that there’s an &lt;strong&gt;explicit any&lt;/strong&gt; there—the mythical, non-existent in production &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, check at the Redis database if that hash already exists in the table. We’ll do this using the lib &lt;a href="https://github.com/luin/ioredis"&gt;&lt;code&gt;ioredis&lt;/code&gt;&lt;/a&gt;. That we’ll pass an option to the middleware we are creating.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//in the handler&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;ioredis&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// handler code&lt;/span&gt;
&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonBodyParser&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="nx"&gt;idempotent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UPSTASH_REDISS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Redis instance is receiving the &lt;code&gt;rediss://&lt;/code&gt; string with your user and password credentials through the environment. This is &lt;strong&gt;not&lt;/strong&gt;  the most secure way to do so, you can store this URL in &lt;a href="https://docs.aws.amazon.com/systems-manager/index.html"&gt;AWS Systems Manager&lt;/a&gt; and then import in a secure way that will even let you rotate the credentials if needed. I’m taking this shortcut here for the purpose of this test, but I'm sure you'd &lt;em&gt;never&lt;/em&gt; do this in production, right?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/6ra84Uso2hoir3YCgb/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/6ra84Uso2hoir3YCgb/giphy.gif" alt="Wink"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, we then need to parse the result since we’ll save them as string in the next stage of execution.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in the middleware&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getByHash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getByHash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getByHash&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In case of a miss, we get a &lt;code&gt;null&lt;/code&gt; response, which is great to a really simple check. If we get &lt;code&gt;null&lt;/code&gt;, we don’t need to do anything, the function will then proceed to other middlewares, the handler and then to the &lt;em&gt;after&lt;/em&gt; execution order. If this get is not &lt;em&gt;null&lt;/em&gt;, we have to return the response stored by our &lt;em&gt;after&lt;/em&gt; function.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;statusCode:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;body:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\n&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;“data”:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;\n&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;“message”:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;“Hello&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;other&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Side!”\n&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\n&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then we’ll invoke &lt;code&gt;return response&lt;/code&gt; in your middleware.This will halt the execution early and it will not pass for any other part of the lambda, so this middleware needs to be one of the first, if not the first to avail. &lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;after&lt;/em&gt; we had to save the response from that event hash.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;responseStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And nothing more. Pay attention that this phase and execution happens after the handler send the response through the handler.&lt;/p&gt;

&lt;p&gt;And that's that. Pay attention that this phase and execution happens after the handler sends the response through the handler.&lt;/p&gt;

&lt;p&gt;And yes, &lt;em&gt;it is fast&lt;/em&gt;. There’s a post from Upstash’s own blog, &lt;a href="https://blog.upstash.com/latency-comparison"&gt;Latency Comparison Among Serverless Databases&lt;/a&gt; followed by a &lt;a href="https://news.ycombinator.com/item?id=26799074"&gt;discussion on Hacker News&lt;/a&gt;. I did not make a benchmark or even plan to do so, but as a user, I felt it was as instantaneous as could be. And this is certainly a feature that meets my purposes.&lt;/p&gt;

&lt;p&gt;And well folks, “that’s all”.&lt;/p&gt;

&lt;p&gt;Just kidding, of course it's not. But it is a start. Since the chance of collision is nearly impossible (i.e., two hash being equal) only exact the same request will get the same response, but if we want to check some keys like a &lt;code&gt;x-idempotence&lt;/code&gt; key in the header or even a field in the body of the request, we could target it as well.&lt;/p&gt;

&lt;p&gt;If you wanna that a look at this implementation and help, I wrapped this code and made available for your use in NodeJS Lambdas, as a middleware for &lt;strong&gt;Middy&lt;/strong&gt;. The lib accepts options to target headers, keys in the body and path:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ibrahimcesar"&gt;
        ibrahimcesar
      &lt;/a&gt; / &lt;a href="https://github.com/ibrahimcesar/middy-idempotent"&gt;
        middy-idempotent
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🛵 📬  Idempotence Middy middleware for yours AWS Lambdas
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;h1&gt;
🛵 📬  Idempotent Middleware for Middy&lt;/h1&gt;
  &lt;blockquote&gt;An Idempotent Middy middleware for your AWS Lambdas&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/ellerbrock/typescript-badges/"&gt;&lt;img src="https://camo.githubusercontent.com/1d1f56c37cf5dfd1b9c3782a8d1d6fe07f8764e8c35f53ec90460e5b38cd8f7d/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f747970657363726970742f636f64652f747970657363726970742e7376673f763d313031" alt="TypeScript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.npmjs.com/package/middy-idempotent" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5521f6897c23f45d705b93de8db313ac85eb9cca29efb8e16f631bfb80be0355/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f6d696464792d6964656d706f74656e743f6c6162656c3d6c617465737425323076657273696f6e" alt="Version"&gt;&lt;/a&gt;   &lt;a href="https://raw.githubusercontent.com/ibrahimcesar/middy-idempotent/main/./LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/dca6ec83d124b54d28a6fa5b10654f1b16dffd605256c5a612cef8a005dd5115/68747470733a2f2f62616467656e2e6e65742f6769746875622f6c6963656e73652f6962726168696d63657361722f6d696464792d6964656d706f74656e74" alt="License"&gt;&lt;/a&gt;   &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/15afcb69901659112f63b7e6f7579ca5392089b821fdf8b1778995bc7c58907e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6962726168696d63657361722f6d696464792d6964656d706f74656e742f627567"&gt;&lt;img src="https://camo.githubusercontent.com/15afcb69901659112f63b7e6f7579ca5392089b821fdf8b1778995bc7c58907e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6962726168696d63657361722f6d696464792d6964656d706f74656e742f627567" alt="GitHub issues by-label"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Developed in 🇧🇷 &lt;span&gt;Brazil&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;
🛵 What is does&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://middy.js.org/" rel="nofollow"&gt;Middy&lt;/a&gt; is a very simple middleware engine that allows you to simplify your AWS Lambda code when using Node.js. This middleware aims to simplify the implementations of a idempotent API.&lt;/p&gt;

&lt;p&gt;Making an API idempotent is &lt;a href="https://awslabs.github.io/aws-lambda-powertools-python/develop/utilities/idempotency/" rel="nofollow"&gt;not trivial as much people think&lt;/a&gt;, and you could take a look at &lt;em&gt;Lambda Powertools for Python&lt;/em&gt; from AWS that does a great job to explain this use case and a concrete way to implement. There's also this great article from &lt;a href="https://twitter.com/mfeatonby" rel="nofollow"&gt;Malcolm Featonby&lt;/a&gt;, &lt;a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/" rel="nofollow"&gt;Making retries safe with idempotent APIs&lt;/a&gt; featured in the Amazon Builder's Library as &lt;a href="https://aws.amazon.com/blogs/architecture/category/learning-levels/advanced-300/" rel="nofollow"&gt;Architecture level 300&lt;/a&gt; which falls ins the &lt;em&gt;advanced&lt;/em&gt; classification.&lt;/p&gt;

&lt;h2&gt;
🚀 Install&lt;/h2&gt;

&lt;p&gt;Use your favorite package manager:&lt;/p&gt;

&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn add middy-idempotent&lt;/pre&gt;
&lt;div class="zeroclipboard-container position-absolute right-0 top-0"&gt;
  
    

    

  
&lt;/div&gt;



&lt;/div&gt;

&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install middy-idempotent -S&lt;/pre&gt;
&lt;div class="zeroclipboard-container position-absolute right-0 top-0"&gt;
  
    

    
    

  
&lt;/div&gt;



&lt;/div&gt;

&lt;h2&gt;
Usage&lt;/h2&gt;

&lt;p&gt;Besides &lt;code&gt;@middy/core&lt;/code&gt;, you must also use &lt;code&gt;@middy/http-json-body-parser&lt;/code&gt; since this middleware…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ibrahimcesar/middy-idempotent"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;p&gt;As for the lib above, you can implement the SSM so it won't  place your secret string in the environment for your infrastructure, but I plan to add another storage provider, DynamoDB at least in the next days.&lt;/p&gt;

&lt;p&gt;Following that I’ll test another serverless database offering in a not so “Hello World” example but with practical and more valuable use cases -  or at least, this is my hope!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ibrahimcesar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfkWRBf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0zkQIbKi--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/189167/695f3dd9-b865-4c57-a097-5cfe07cca488.jpg" alt="ibrahimcesar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/the-state-of-serverless-databases-in-aws-part-0-162c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The State of Serverless Databases in AWS&lt;/h2&gt;
      &lt;h3&gt;Ibrahim Cesar ・ Apr 29 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>serverless</category>
      <category>redis</category>
      <category>aws</category>
      <category>upstash</category>
    </item>
    <item>
      <title>What is TypeScript and why should you use it?</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Fri, 14 May 2021 12:49:52 +0000</pubDate>
      <link>https://dev.to/coderslang/what-is-typescript-and-why-should-you-use-it-3mfd</link>
      <guid>https://dev.to/coderslang/what-is-typescript-and-why-should-you-use-it-3mfd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is &lt;strong&gt;TypeScript&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; is a programming language developed and maintained by &lt;strong&gt;Microsoft&lt;/strong&gt;. It introduces additional features like strict type binding (variables are bound to specific data types) to &lt;strong&gt;JavaScript&lt;/strong&gt; and can also be compiled down to &lt;strong&gt;JavaScript&lt;/strong&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; is an Open Source Project, and the source code for it is available on GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-additional-features-does-typescript-introduce"&gt;
  &lt;/a&gt;
  What additional features does &lt;strong&gt;TypeScript&lt;/strong&gt; introduce?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; adds several additional features to JavaScript. The most important one is strict typing (it is turned on by default, but can be turned off in case the developer doesn't want to use it).&lt;/p&gt;

&lt;p&gt;Apart from strict typing, &lt;strong&gt;TypeScript&lt;/strong&gt; introduces a plethora of features like &lt;em&gt;Interfaces&lt;/em&gt;, &lt;em&gt;Mixin classes&lt;/em&gt;, &lt;em&gt;Enums&lt;/em&gt; and much more, as discussed later in the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-use-typescript"&gt;
  &lt;/a&gt;
  Why should you use &lt;strong&gt;TypeScript&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;If the features mentioned above weren't enough to convince you to use &lt;strong&gt;TypeScript&lt;/strong&gt;, the following reason would definitely do so. &lt;strong&gt;TypeScript&lt;/strong&gt; overcomes the largest issue with &lt;strong&gt;JavaScript&lt;/strong&gt;; which is: a problem can only be detected during runtime in &lt;strong&gt;JavaScript&lt;/strong&gt;, which may result in applications with bugs being shipped to the end-user. This will affect any business negatively by hampering the &lt;em&gt;user experience&lt;/em&gt;. &lt;strong&gt;TypeScript&lt;/strong&gt; removes this problem by checking for any issue at compile time.&lt;/p&gt;

&lt;p&gt;The following script will not raise any errors when using &lt;strong&gt;JavaScript&lt;/strong&gt;, but if you use &lt;strong&gt;TypeScript&lt;/strong&gt;, the compiler will point out that &lt;code&gt;nonExistentProperty&lt;/code&gt; doesn't exist on object &lt;code&gt;obj&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nonExistentProperty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even if you are using an editor, using &lt;strong&gt;TypeScript&lt;/strong&gt; provides you with better suggestions and linting as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ICLD3YuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/ts-debug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ICLD3YuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/ts-debug.png" alt="TypeScript Debug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDcWlHzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-debug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDcWlHzG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-debug.png" alt="JavaScript Debug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getWeatherDetails()&lt;/code&gt; will accept a boolean value which &lt;strong&gt;TypeScript&lt;/strong&gt; points out, but &lt;strong&gt;JavaScript&lt;/strong&gt; fails to do so.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-typescript"&gt;
  &lt;/a&gt;
  Getting Started with &lt;strong&gt;TypeScript&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Enough theoretical stuff. Now let's get our hands dirty writing our first &lt;strong&gt;TypeScript&lt;/strong&gt; script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You will need a &lt;strong&gt;Node.js&lt;/strong&gt; and a package manager (&lt;strong&gt;npm&lt;/strong&gt; or &lt;strong&gt;yarn&lt;/strong&gt;, in this article, we will be using &lt;strong&gt;npm&lt;/strong&gt;) installed to use &lt;strong&gt;TypeScript&lt;/strong&gt; locally. You may use an online compiler like typescript playground for compiling, but it is not a good idea in the case of a large project.&lt;/p&gt;

&lt;p&gt;To install &lt;strong&gt;TypeScript&lt;/strong&gt; globally (replace the &lt;code&gt;-g&lt;/code&gt; tag with &lt;code&gt;-D&lt;/code&gt; to add it as a &lt;em&gt;dev dependency&lt;/em&gt; in a &lt;strong&gt;Node&lt;/strong&gt; package), use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you will be able to compile any &lt;strong&gt;TypeScript&lt;/strong&gt; code to &lt;strong&gt;JavaScript&lt;/strong&gt;. Let's test it using a basic snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To compile the file use (you can also use the commands without installing &lt;strong&gt;TypeScript&lt;/strong&gt; by adding &lt;code&gt;npx&lt;/code&gt; before every command):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &amp;lt;filename&amp;gt;.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will find a new file &lt;code&gt;&amp;lt;filename&amp;gt;.js&lt;/code&gt; created in the same folder, which can be run like any &lt;strong&gt;JavaScript&lt;/strong&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-vs-javascript-dilemma"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TypeScript&lt;/strong&gt; vs &lt;strong&gt;JavaScript&lt;/strong&gt; dilemma
&lt;/h2&gt;

&lt;p&gt;Now you might come up with 2 questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why does the &lt;strong&gt;TypeScript&lt;/strong&gt; code have to be compiled to &lt;strong&gt;JavaScript&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;If the code compiles down to &lt;strong&gt;JavaScript&lt;/strong&gt;, why would we bother writing it in &lt;strong&gt;TypeScript&lt;/strong&gt;?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The answer to the first question is &lt;strong&gt;TypeScript&lt;/strong&gt; isn't understood by any browser, so it has to be converted to &lt;strong&gt;JavaScript&lt;/strong&gt; so that browsers can execute the code.&lt;/p&gt;

&lt;p&gt;The answer to the second question would be, same as why you should use &lt;strong&gt;TypeScript&lt;/strong&gt; over &lt;strong&gt;JavaScript&lt;/strong&gt;, it offers type check at compile time as opposed to runtime. If you try to compile the &lt;code&gt;test.ts&lt;/code&gt; with the error (as shown in &lt;em&gt;Why should you use &lt;strong&gt;TypeScript&lt;/strong&gt;?&lt;/em&gt; section) the compiler would throw an error and warn you about the incorrect code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-features"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TypeScript&lt;/strong&gt; features
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, &lt;strong&gt;TypeScript&lt;/strong&gt; has several additional features compared to &lt;strong&gt;JavaScript&lt;/strong&gt;, we will be going over a few of them in this section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-system"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Type System&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The default types available in &lt;strong&gt;TypeScript&lt;/strong&gt; are given below:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Keyword Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;number&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Double-precision 64-bit floating-point values. It can be used to represent both, integers and fractions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Represents a sequence of Unicode characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Represents logical values, true and false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Void&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;void&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Used on function return types to represent non-returning functions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Represents an intentional absence of an object value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Undefined&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;undefined&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Denotes value given to all uninitialized variables&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; also allows you to combine 2 or more data types to create a &lt;strong&gt;Union&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;union&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;union&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;union&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// union = true // ERROR!!! `union` can only be a number or a string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the case of &lt;strong&gt;JavaScript&lt;/strong&gt;, an error would have not been pointed out and might lead to bugs down the line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Interfaces&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; &lt;strong&gt;Interface&lt;/strong&gt; allows you to describe how an object would look like, something that is not possible in &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Interfaces for Objects&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IObjectDefination&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// foo is a number array&lt;/span&gt;
    &lt;span class="nl"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// baz is a date&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// any other key (only numbers) can contain a string as its value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IObjectDefination&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Interfaces for Classes&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IClassDefination&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Class&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;IClassDefination&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#enums"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Enums&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Enums&lt;/strong&gt; allow a developer to define a set of named constants, making it easier to document intent or create a set of distinct cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Direction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Up&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Down&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Direction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Up&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Direction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Down&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Achieving a &lt;em&gt;similar&lt;/em&gt; result with &lt;strong&gt;JavaScript&lt;/strong&gt; would require you to create an object with the respective keys. Even then we would not be able to specify the data type of &lt;code&gt;direction&lt;/code&gt; in &lt;code&gt;move()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Up&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Down&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Down&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Right&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#streamlining-typescript-compilation"&gt;
  &lt;/a&gt;
  Streamlining &lt;strong&gt;TypeScript&lt;/strong&gt; compilation
&lt;/h2&gt;

&lt;p&gt;Earlier we used &lt;code&gt;tsc&lt;/code&gt; to compile a single &lt;strong&gt;TypeScript&lt;/strong&gt; file. This may become a problem in the case of a large project with thousands of files. In that case, you can set up a listener to watch for changes.&lt;/p&gt;

&lt;p&gt;For watching for changes, you need to create a &lt;code&gt;tsconfig.json&lt;/code&gt; file in the root directory of your project and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"exclude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"node_modules"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternately, you may use &lt;code&gt;tsc --init&lt;/code&gt; to create the file (it is generated pre-configured and with all options, the unnecessary ones commented out).&lt;/p&gt;

&lt;p&gt;Now you can set up the listener&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="nt"&gt;-w&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, any &lt;strong&gt;TypeScript&lt;/strong&gt; file you create or modify in the &lt;code&gt;src&lt;/code&gt; (&lt;em&gt;tsconfig.include&lt;/em&gt;) folder will be compiled to &lt;strong&gt;JavaScript&lt;/strong&gt; file in the &lt;code&gt;dist&lt;/code&gt; (&lt;em&gt;tsconfig.compilerOptions.outDir&lt;/em&gt;) folder whenever you make any changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You can add the &lt;code&gt;tsconfig.json&lt;/code&gt; to any of your &lt;strong&gt;Node&lt;/strong&gt; packages and convert it from a &lt;strong&gt;JavaScript&lt;/strong&gt; project to a &lt;strong&gt;TypeScript&lt;/strong&gt; one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we went through what &lt;strong&gt;TypeScript&lt;/strong&gt; is and how it can help you write better code. We saw some features it offers and how certain features like &lt;em&gt;Enums&lt;/em&gt; and &lt;em&gt;Interfaces&lt;/em&gt; can make your life a little easier. Now it's time for you to add &lt;strong&gt;TypeScript&lt;/strong&gt; to your very own project!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack Web Development&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What is Jaro-Winkler Similarity?</title>
      <author>Dave Saunders</author>
      <pubDate>Fri, 14 May 2021 12:20:30 +0000</pubDate>
      <link>https://dev.to/davejsaunders/what-is-jaro-winkler-similarity-pdp</link>
      <guid>https://dev.to/davejsaunders/what-is-jaro-winkler-similarity-pdp</guid>
      <description>&lt;p&gt;Jaro-Winkler similarity is a way of measuring how similar two strings are. It is fairly easy to understand and quick &lt;br&gt;
to implement.&lt;/p&gt;

&lt;p&gt;(this was originally sent to my &lt;a href="https://www.baseclass.io/newsletter"&gt;newsletter&lt;/a&gt; subscribers)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-should-i-care"&gt;
  &lt;/a&gt;
  Why should I care?
&lt;/h2&gt;

&lt;p&gt;String similarity metrics have various uses; from user-facing search functionality to spell checkers.&lt;/p&gt;

&lt;p&gt;There are a few common string similarity metrics. Knowing a little about each will help you to choose the right one, &lt;br&gt;
should you ever need to implement something like this yourself.&lt;/p&gt;

&lt;p&gt;Jaro Similarity, and the modified version - Jaro-Winkler - are two common ones.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#in-5-minutes-or-less"&gt;
  &lt;/a&gt;
  In 5 minutes or less:
&lt;/h2&gt;

&lt;p&gt;Imagine we're building the search functionality for an app store. &lt;/p&gt;

&lt;p&gt;If a user misspells their search, we'd like to be able to suggest the app we &lt;em&gt;think&lt;/em&gt; they were looking for.&lt;/p&gt;

&lt;p&gt;For example; the user is searching for the 2009 viral hit &lt;code&gt;farmville&lt;/code&gt;, but badly mistypes it as:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RwXnSNct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/search.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwXnSNct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/search.png" alt="'faremviel' in search box"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we could compare this search string to all of the titles in our app store, we could show the user the apps that &lt;br&gt;
most closely match what they typed.&lt;/p&gt;

&lt;p&gt;This is where the Jaro Similarity metric comes in...&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#jaro-similarity"&gt;
  &lt;/a&gt;
  Jaro Similarity
&lt;/h3&gt;

&lt;p&gt;Let's calculate the similarity between the user's search string and the correct app title:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eY4Gevod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/both_strings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eY4Gevod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/both_strings.png" alt="farmville vs farmville"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Created by Matthew A. Jaro in 1989, the Jaro Similarity metric compares two strings and gives us a score that &lt;br&gt;
represents how similar they are.&lt;/p&gt;

&lt;p&gt;The result is a number between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, where &lt;code&gt;0&lt;/code&gt; means the strings are completely different and &lt;code&gt;1&lt;/code&gt; means they match exactly.&lt;/p&gt;

&lt;p&gt;The first step to calculating the Jaro similarity is to &lt;strong&gt;count the characters that match between the two strings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But, &lt;strong&gt;to be considered a 'match', the characters do not need to be in the same place in both strings - &lt;br&gt;
they just need to be &lt;em&gt;near&lt;/em&gt; to each other&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This accounts for the common typing mistake where you accidentally enter some characters in the wrong order.&lt;/p&gt;

&lt;p&gt;How near those characters need to be before we consider them a match is calculated as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gXHzFNiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/window.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXHzFNiv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/window.png" alt="(length of longest string/2)-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both of our strings are &lt;code&gt;9&lt;/code&gt; characters long. That gives us a result of &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That means that any two characters in our strings 'match' if they are either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the same place in both strings&lt;/li&gt;
&lt;li&gt;No further than &lt;code&gt;3&lt;/code&gt; characters away from each other&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's what it looks like if we draw these matches:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z48Ms8Ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/matches.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z48Ms8Ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/matches.png" alt="matching characters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If there were no matches, we wouldn't need to go any further - the Jaro Similarity would simply be &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have &lt;code&gt;8&lt;/code&gt; matching characters though, so the next step is to calculate the number of 'transpositions'.&lt;/p&gt;

&lt;p&gt;Transpositions are  &lt;strong&gt;the characters that match, but are in the wrong order&lt;/strong&gt;. We count them, and then we &lt;strong&gt;half that number&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Our strings have &lt;code&gt;2&lt;/code&gt; matching characters that are in a different order (the final &lt;code&gt;e&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; are backwards in the user's search term). &lt;br&gt;
Halving this gives us  &lt;code&gt;1&lt;/code&gt; 'transposition'.&lt;/p&gt;

&lt;p&gt;Now all we have to do is plug these numbers into the following formula &lt;br&gt;
(we use the term &lt;code&gt;simj&lt;/code&gt; to mean 'Jaro Similarity' - the thing we're calculating):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6va2cAbd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/jaro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6va2cAbd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/jaro.png" alt="jaro formula"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This looks complex, but we really only need a few values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;|S1|&lt;/code&gt; and &lt;code&gt;|S2|&lt;/code&gt; are the lengths of the two strings we are comparing (ours are both &lt;code&gt;9&lt;/code&gt; characters long)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;m&lt;/code&gt; is the number of matches - we have &lt;code&gt;8&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;t&lt;/code&gt; is the number of 'transpositions' - we have &lt;code&gt;1&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given those values, this is the Jaro Similarity for &lt;code&gt;faremviel&lt;/code&gt; vs &lt;code&gt;farmville&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBwbWfD4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/our_result.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBwbWfD4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/our_result.png" alt="jaro formula with our values = 0.88"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our strings have a similarity of &lt;code&gt;0.88&lt;/code&gt;, which means that they are very similar. &lt;/p&gt;

&lt;p&gt;If we calculate the Jaro Similarity of the user's search term against other games in our app store, &lt;br&gt;
it becomes clear what the user was intending to search for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;'faremviel' vs 'farmville': &lt;code&gt;0.88&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;'faremviel' vs 'farmville 2': &lt;code&gt;0.83&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;'faremviel' vs 'clash of clans': &lt;code&gt;0.46&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;'faremviel' vs 'minecraft': &lt;code&gt;0.31&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#jarowinkler-similarity"&gt;
  &lt;/a&gt;
  Jaro-Winkler Similarity
&lt;/h3&gt;

&lt;p&gt;This modification of Jaro Similarity was proposed in 1990 by William E. Winkler.&lt;/p&gt;

&lt;p&gt;The 'Jaro-Winkler' metric takes the Jaro Similarity above, and increases the score if the characters at the start of both strings are the same.&lt;/p&gt;

&lt;p&gt;In other words, &lt;strong&gt;Jaro-Winkler favours two strings that have the same beginning&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is the formula for the 'Jaro-Winkler Similarity':&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8746W0yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/jaro_winkler.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8746W0yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/jaro_winkler.png" alt="jaro winkler formula"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need the following values to use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;simj&lt;/code&gt; is the Jaro Similarity of our comparison above (&lt;code&gt;0.88&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;l&lt;/code&gt; is the number of characters that are the same at the start of both strings (up to a maximum of 4). 
Our strings both start with &lt;code&gt;f&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;r&lt;/code&gt;, so we use a value of &lt;code&gt;3&lt;/code&gt; for this.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;p&lt;/code&gt; is the 'scaling factor'. &lt;code&gt;0.1&lt;/code&gt; is usually used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the Jaro-Winkler calculation for &lt;code&gt;faremviel&lt;/code&gt; vs &lt;code&gt;farmville&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yp6ea1Sf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/our_result_jaro_winkler.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yp6ea1Sf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.baseclass.io/newsletter/jaro-winkler/our_result_jaro_winkler.png" alt="our jaro winkler calculation = 0.92"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two strings with &lt;em&gt;no&lt;/em&gt; matching characters at the start would keep the same score, but because our &lt;br&gt;
strings have letters in common at the beginning, this version of the metric has boosted our score &lt;br&gt;
from &lt;code&gt;0.88&lt;/code&gt; up to &lt;code&gt;0.92&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Whether Jaro or Jaro-Winkler is the right choice depends on your specific use case. Try both (and other string similarity algorithms), and see what &lt;br&gt;
works best for your data.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#want-to-know-more"&gt;
  &lt;/a&gt;
  Want to know more?
&lt;/h3&gt;

&lt;p&gt;Check out these links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rosettacode.org/wiki/Jaro_distance"&gt;Examples of these two metrics implemented in common programming languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@appaloosastore/string-similarity-algorithms-compared-3f7b4d12f0ff"&gt;An interesting Medium post comparing string similarity algorithms for app store search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://asecuritysite.com/forensics/simstring"&gt;An online strings similarity comparison, using various metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>computerscience</category>
      <category>algorithms</category>
      <category>programming</category>
    </item>
    <item>
      <title>Create a circular gradient in CSS</title>
      <author>Maxime Guilbert</author>
      <pubDate>Fri, 14 May 2021 11:55:38 +0000</pubDate>
      <link>https://dev.to/adaendra/create-a-circular-gradient-in-css-k6p</link>
      <guid>https://dev.to/adaendra/create-a-circular-gradient-in-css-k6p</guid>
      <description>&lt;p&gt;After searching during hours, with people saying &lt;em&gt;"it's impossible to do it with CSS or SVG"&lt;/em&gt;, I found it!&lt;/p&gt;

&lt;p&gt;With the following property, you will be able to define a circular gradient in CSS!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="nd"&gt;:conic-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#f00&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#f0f&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#00&lt;/span&gt;&lt;span class="nt"&gt;f&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#0&lt;/span&gt;&lt;span class="nt"&gt;ff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#0&lt;/span&gt;&lt;span class="nt"&gt;f0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#ff0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#f00&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/adaendra-the-decoder/embed/poeJaqv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;I hope it will help you!&lt;/p&gt;

</description>
      <category>css</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Git Guide</title>
      <author>Shadab Majid Shaikh</author>
      <pubDate>Fri, 14 May 2021 11:52:09 +0000</pubDate>
      <link>https://dev.to/shadabshaikh0/git-guide-4p9b</link>
      <guid>https://dev.to/shadabshaikh0/git-guide-4p9b</guid>
      <description>&lt;p&gt;I found this GitHub repository. Once you gone through basic git commands, you can read this. This repository contains some advanced commands very useful in day-to-day tasks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a&gt;git.io/git-tips&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>programming</category>
    </item>
    <item>
      <title>Clean code &amp; programming principles – The ultimate beginner’s guide</title>
      <author>Spyros Argalias</author>
      <pubDate>Fri, 14 May 2021 11:18:14 +0000</pubDate>
      <link>https://dev.to/sargalias/clean-code-programming-principles-the-ultimate-beginner-s-guide-5605</link>
      <guid>https://dev.to/sargalias/clean-code-programming-principles-the-ultimate-beginner-s-guide-5605</guid>
      <description>&lt;p&gt;This article is the beginner's introductory guide to programming principles.&lt;/p&gt;

&lt;p&gt;First we're going to examine what good code is. The qualities of good code. That's because those qualities come before programming principles. Programming principles are just guidelines to help us apply those qualities to code.&lt;/p&gt;

&lt;p&gt;Afterwards, we'll examine the most important programming principles, one-by-one, at an introductory level.&lt;/p&gt;

&lt;p&gt;Hopefully, this article will feel less like "have small functions" and more like "these are the qualities you want in code, for reasons 1, 2 and 3. So as you can see, small functions help you achieve those in ways X, Y and Z".&lt;/p&gt;

&lt;p&gt;I believe that this kind of understanding is more beneficial than just knowing some arbitrary rules. They're especially helpful if you've been stuck on how to apply certain programming principles in the past. Knowing how they help and what they're trying to achieve should help you apply them even in unfamiliar situations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#target-audience"&gt;
  &lt;/a&gt;
  Target audience
&lt;/h2&gt;

&lt;p&gt;I believe that this article is suitable for all audiences.&lt;/p&gt;

&lt;p&gt;If you're a beginner developer, some of the things mentioned in this article may be too abstract. But, some others should be useful immediately. Nevertheless, this article will give you an understanding that will help you very much in the future, even if you don't understand all of it now.&lt;/p&gt;

&lt;p&gt;If you're an intermediate-level developer, you'll probably gain the most benefit. You are probably writing medium to large programs. You've got the hang of the basics. Now, you need to learn how to write code that scales (in size). This is what programming principles help you with.&lt;/p&gt;

&lt;p&gt;If you're an advanced-level developer, you'll probably (hopefully) know most of these things already. However, you might enjoy this article nonetheless.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#qualities-of-good-code"&gt;
  &lt;/a&gt;
  Qualities of good code
&lt;/h2&gt;

&lt;p&gt;What is good code?&lt;/p&gt;

&lt;p&gt;To answer that question, first we need to examine the requirements of code. Then, the qualities that we (people) need for something to be easy to work with. After that, the qualities of good code become obvious.&lt;/p&gt;

&lt;p&gt;If you want to skip the discussion, here are the conclusions:&lt;/p&gt;

&lt;p&gt;The requirements of code are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it should work as intended, without bugs&lt;/li&gt;
&lt;li&gt;it should be built as quickly and efficiently as possible (without sacrificing quality) (just like all products)&lt;/li&gt;
&lt;li&gt;it should be easy and fast to work with and modify (for the next time you need to work with it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of our limitations are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can't remember too much at any one time. This means that we won't remember that modifying X will break Y and Z.&lt;/li&gt;
&lt;li&gt;we find complicated things disproportionally more difficult than simple things&lt;/li&gt;
&lt;li&gt;making multiple similar changes is very error-prone for us&lt;/li&gt;
&lt;li&gt;we have bad days where we are bored, can't focus and don't pay too much attention&lt;/li&gt;
&lt;li&gt;we always make mistakes, no matter what. This means that we need tests (manual or automated) and other error-catching things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From those two, after a bit of reasoning, we conclude that code should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be simple (because we're bad with complicated things)&lt;/li&gt;
&lt;li&gt;be immediately understandable (so we can understand it quickly and make changes faster. Also so we don't misunderstand it and create bugs, especially if we're not really focusing that day)&lt;/li&gt;
&lt;li&gt;be organised (so we can understand the project structure easier and find the files we need to modify faster)&lt;/li&gt;
&lt;li&gt;be independent (so we can make reasonable changes to X without breaking 1,000 other things in the project)&lt;/li&gt;
&lt;li&gt;have minimal duplication (because we're bad with repetitive changes. They're also slower)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details and explanations are below. If you're not interested, please skip to the next section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements-of-code"&gt;
  &lt;/a&gt;
  Requirements of code
&lt;/h3&gt;

&lt;p&gt;Software is a product. Businesses hire programmers to build software products. It's not abstract art (usually). It's something built for a specific purpose.&lt;/p&gt;

&lt;p&gt;From a business perspective, products:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have to be fit for purpose and work as intended&lt;/li&gt;
&lt;li&gt;should be as cheap and efficient as possible to create (without sacrificing quality)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The same applies to software.&lt;/p&gt;

&lt;p&gt;But software has some unique aspects. It needs constant modification. That's because software is often never "finished". Companies may be requesting new features for decades after initial release. Also, there may be bugs that need fixing at any time. Finally, during development, programmers constantly modify the code.&lt;/p&gt;

&lt;p&gt;Therefore, for the software product to be as efficient and cheap as possible to create and maintain, the code needs to be easy and fast to work with and modify.&lt;/p&gt;

&lt;p&gt;Not to mention that being easy to work with means less bugs due to changes.&lt;/p&gt;

&lt;p&gt;So, the requirements of code are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it should work as intended, without bugs&lt;/li&gt;
&lt;li&gt;it should be built as quickly and efficiently as possible (without sacrificing quality)&lt;/li&gt;
&lt;li&gt;it should be easy and fast to work with and modify (for the next time you need to work with it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For even more detail on this, please see the post &lt;a href="https://programmingduck.com/articles/requirements-of-software"&gt;requirements of software&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#human-limitations-and-bad-code"&gt;
  &lt;/a&gt;
  Human limitations and bad code
&lt;/h3&gt;

&lt;p&gt;Code can be difficult to work with because of our limitations.&lt;/p&gt;

&lt;p&gt;Here are some of our limitations and what we can do to counter them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#memory"&gt;
  &lt;/a&gt;
  Memory
&lt;/h4&gt;

&lt;p&gt;We can't remember too much at any one time.  The quote about short term memory and &lt;a href="https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two"&gt;the magical number 7 plus or minus 2&lt;/a&gt; comes to mind.&lt;/p&gt;

&lt;p&gt;To counter that, we need code to be sufficiently independent (decoupled) and without hidden dependencies. That way, when we're modifying code, we won't accidentally break it due to forgetting to also update a dependency that we didn't remember existed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-like-things-simple"&gt;
  &lt;/a&gt;
  We like things simple
&lt;/h4&gt;

&lt;p&gt;Complicated things are disproportionally more difficult for us. This is partly because we need to keep in mind many things about them at once. Therefore, we should make code simple and easy to work with.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-are-impatient"&gt;
  &lt;/a&gt;
  We are impatient
&lt;/h4&gt;

&lt;p&gt;We get impatient, skim things often, have bad days and get bored.&lt;/p&gt;

&lt;p&gt;To counter that, we should make code simple, easy to understand and easy to work with.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-are-bad-with-repetitive-work"&gt;
  &lt;/a&gt;
  We are bad with repetitive work
&lt;/h4&gt;

&lt;p&gt;Repetition is error-prone for us, particularly if every repetition is slightly different.&lt;/p&gt;

&lt;p&gt;Repetitive work means more chances to make an error. Also, probably due to impatience and lack of focus, we're more likely to rush this type of work. We don't usually provide the necessary care and attention to every single change. To help, we should minimise repetitive work.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#we-make-mistakes"&gt;
  &lt;/a&gt;
  We make mistakes
&lt;/h4&gt;

&lt;p&gt;We make mistakes often and in all areas of life. This includes programming, mathematics, engineering, art, design and everything else.&lt;/p&gt;

&lt;p&gt;Therefore, we always need to double check our work. As a result, we use practices like code reviews and automated testing. We also use tools to statically analyse our code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-we-should-work-on-software"&gt;
  &lt;/a&gt;
  How we should work on software
&lt;/h3&gt;

&lt;p&gt;We should work on software deliberately. We should know and understand as much as possible about the code we're currently working on. This means that we'll be as certain as possible that we're doing the right thing and that we won't break anything.&lt;/p&gt;

&lt;p&gt;In comparison, if we're just trying things at random, we're not certain that they'll work. Most of the things we try won't work, except the last one (at which point we'll stop). Also, we'll only know whether they work or not because of our tests. We'll probably manually test everything we try.&lt;/p&gt;

&lt;p&gt;This is problematic, because, since we're not really sure what we're doing, we might have broken other things that we won't think to test.&lt;/p&gt;

&lt;p&gt;So, to minimize the chance of error, it's important to understand as much as possible about what we're doing.&lt;/p&gt;

&lt;p&gt;The best way to do that is to make code simple, easy to understand and easy to work with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-code-should-be"&gt;
  &lt;/a&gt;
  How code should be
&lt;/h3&gt;

&lt;p&gt;Everything we've examined so far points to a certain way for how code should be. Code should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be simple (because we're bad with complicated things)&lt;/li&gt;
&lt;li&gt;be immediately understandable (so we can understand it quickly and make changes faster. Also so we don't misunderstand it and create bugs, especially if we're not really focusing that day)&lt;/li&gt;
&lt;li&gt;be organised (so we can understand the project structure easier and find the files we need to modify faster)&lt;/li&gt;
&lt;li&gt;be independent (so we can make reasonable changes to X without breaking 1,000 other things in the project)&lt;/li&gt;
&lt;li&gt;have minimal duplication (because we're bad with repetitive changes. They're also slower)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, let's examine the programming principles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7gs4KTRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqny8u6qkxvto5jtl4dt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7gs4KTRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqny8u6qkxvto5jtl4dt.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-pragmatic-the-most-important-principle"&gt;
  &lt;/a&gt;
  Be pragmatic - The most important principle
&lt;/h2&gt;

&lt;p&gt;Not just in programming, but pretty much everything in life, being pragmatic is essential.&lt;/p&gt;

&lt;p&gt;It means to remember the true goal of what you're trying to accomplish, maximise that, and not get side-tracked.&lt;/p&gt;

&lt;p&gt;In programming, your aims are to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have code that works correctly&lt;/li&gt;
&lt;li&gt;make your changes as quickly and efficiently as possible&lt;/li&gt;
&lt;li&gt;make the code easy and fast to work with for the next time someone works on it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The programming principles are guidelines to help you do that. But, your aims come first. If a programming principle will be detrimental to your aims, you shouldn't apply it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-apply-principles-to-the-extreme"&gt;
  &lt;/a&gt;
  Don't apply principles to the extreme
&lt;/h3&gt;

&lt;p&gt;For example, having code that's short is commonly considered a good thing. It has many benefits which we'll examine later. But you should never make your code shorter if it will make it more difficult to understand and work with.&lt;/p&gt;

&lt;p&gt;Don't play "code golf", where you use complicated syntax and mathematical tricks to make the code as short as possible. That makes the code more complicated and more difficult to understand.&lt;/p&gt;

&lt;p&gt;In other words, have code that's short (the guideline), but only if it makes the code simpler and easier to understand (your aims).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#balance-time-spent-refactoring"&gt;
  &lt;/a&gt;
  Balance time spent refactoring
&lt;/h3&gt;

&lt;p&gt;Additionally, you need to make your changes in a reasonable timeframe. You've got to balance how much time you spend refactoring code against how much benefit it will provide.&lt;/p&gt;

&lt;p&gt;For example, if you have some code that's very difficult to understand, you absolutely should refactor it. It might take a few hours, but it's probably worth it. It will make your project easier to work with in the long-term. You'll reclaim the time you spent refactoring through higher efficiency in the future.&lt;/p&gt;

&lt;p&gt;But, if you have some code that's almost perfect, don't spend 3 days refactoring it only to make it slightly better. You would have spent 3 days for almost no benefit. Instead, you could have used that time in better ways. You could have written a new feature, or refactored a more suitable part of the codebase.&lt;/p&gt;

&lt;p&gt;The point here is: You need to prioritise based on value. That usually means keeping code pretty clean and refactoring when needed. But it probably doesn't mean spending an unreasonable amount of time refactoring for almost no benefit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yagni"&gt;
  &lt;/a&gt;
  YAGNI
&lt;/h3&gt;

&lt;p&gt;Another important thing to talk about is YAGNI. It stands for "you ain't gonna need it".&lt;/p&gt;

&lt;p&gt;It warns you against coding things in anticipation of features you might need in the future. For a simple contrived example, you may create a function &lt;code&gt;foo&lt;/code&gt;, which has the parameter &lt;code&gt;bar&lt;/code&gt;. But you might think "feature X might be added in the future, which will need a parameter &lt;code&gt;baz&lt;/code&gt;, so let me add it to the function now".&lt;/p&gt;

&lt;p&gt;In general, you want to be wary of doing that. Firstly, that feature is probably never going to be needed. Secondly, you increase the complexity of the code today, making it harder to work with. Thirdly, if that feature is needed in the future, you might code it differently to how you anticipate today.&lt;/p&gt;

&lt;p&gt;Instead, code the simplest solution for what you need today. Then, make the changes needed for that feature when it's needed (if ever).&lt;/p&gt;

&lt;p&gt;This is optimal, because you won't needlessly waste your time or make the codebase more complicated. Even if you did predict a feature correctly, it will be much faster to code it when you need it compared to all of the time you would have spent coding everything prematurely.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-recommendations"&gt;
  &lt;/a&gt;
  Personal recommendations
&lt;/h3&gt;

&lt;p&gt;Create a fairly simple solution for what you need today, that is simple to understand and work with.&lt;/p&gt;

&lt;p&gt;Write clean code and maintain your code so it's fairly clean. Refactoring may take time upfront, but it pays off in the long-term because the code is easier to work with.&lt;/p&gt;

&lt;p&gt;Only apply programming principles if they'll make your code better and easier to work with.&lt;/p&gt;

&lt;p&gt;If you're newer to programming principles, consider applying them more heavily than necessary when you practice. You'll get practice applying them and you'll get a feel for when you've taken them too far.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLGAvDyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4p6okeex1phlw5xotpv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLGAvDyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4p6okeex1phlw5xotpv.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kiss-keep-it-simple-stupid-and-the-principle-of-least-astonishment"&gt;
  &lt;/a&gt;
  KISS (keep it simple stupid) and the principle of least astonishment
&lt;/h2&gt;

&lt;p&gt;KISS (keep it simple stupid) is another principle that's universal to most things in life. It means that your code should be simple and easy to understand.&lt;/p&gt;

&lt;p&gt;The principle of least astonishment is also important. It means that things should work exactly as you expect them to, they shouldn't be surprising. It's a cousin to KISS.&lt;/p&gt;

&lt;p&gt;If you don't keep things simple and easy to understand, then:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;everything takes longer to understand&lt;/li&gt;
&lt;li&gt;sometimes you might not understand how things work, even after spending a lot of time on them&lt;/li&gt;
&lt;li&gt;you might &lt;strong&gt;misunderstand&lt;/strong&gt; how things work. Then, if you modify the software, you could easily create bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-apply-kiss-and-the-principle-of-least-astonishment"&gt;
  &lt;/a&gt;
  How to apply KISS and the principle of least astonishment
&lt;/h3&gt;

&lt;p&gt;Here are some guidelines for making your code simple and easy to understand.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#default-to-writing-dumb-code-avoid-writing-clever-code"&gt;
  &lt;/a&gt;
  Default to writing dumb code, avoid writing clever code
&lt;/h4&gt;

&lt;p&gt;Dumb code is simple code. Clever code is probably not simple code.&lt;/p&gt;

&lt;p&gt;Really clever code is not simple, it's difficult to understand and it's tricky. People will &lt;strong&gt;misunderstand&lt;/strong&gt; it and create bugs as a result.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#keep-code-short-and-concise"&gt;
  &lt;/a&gt;
  Keep code short and concise
&lt;/h4&gt;

&lt;p&gt;Shorter code is more likely to be simple.&lt;/p&gt;

&lt;p&gt;Short code means that units, such as functions and classes, do less things. That means they're simpler and easier to understand.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-good-names"&gt;
  &lt;/a&gt;
  Use good names
&lt;/h4&gt;

&lt;p&gt;If you have a well-named function, you can understand what it does from the name, without reading the function body. The same applies to all code. This makes your work faster and easier.&lt;/p&gt;

&lt;p&gt;The name also provides meaning, which helps you decipher code faster.&lt;/p&gt;

&lt;p&gt;For example, if you see the code &lt;code&gt;2 * Math.PI * radius&lt;/code&gt;, you may not understand what it's doing and why, even after reading it. You may look at it and be like "what? PI, radius?? What is this???".&lt;/p&gt;

&lt;p&gt;But, if you see &lt;code&gt;const circleArea = 2 * Math.PI * radius&lt;/code&gt;, straight away you're like "oh I get it. It's calculating the area of the circle, of courseeeee. No wonder PI and radius are there...".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#always-consider-the-programmer-reading-the-code-for-the-first-time"&gt;
  &lt;/a&gt;
  Always consider the programmer reading the code for the first time
&lt;/h4&gt;

&lt;p&gt;This is the person you're trying to optimise the code for. The colleague who has never worked on this code before, or even yourself, 6 months from now, when you've forgotten what this code does and how it works.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Any code of your own that you haven't looked at for six or more months might as well have been written by someone else." - Eagleson's law&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Consider that when you're writing the code, you know what the code needs to do and you just code it. But the person reading the code for the first time, has to parse what the code is doing &lt;strong&gt;and also has to understand why it's doing it&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consider-immutability-never-reassigning-the-values-of-variables"&gt;
  &lt;/a&gt;
  Consider immutability (never reassigning the values of variables)
&lt;/h4&gt;

&lt;p&gt;Immutability provides a guarantee that a value will never change.&lt;/p&gt;

&lt;p&gt;This makes the code simpler to understand, because you don't have to trace through the code for the history of the variable, just in case it happened to change anywhere in your codebase.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#follow-existing-conventions"&gt;
  &lt;/a&gt;
  Follow existing conventions
&lt;/h4&gt;

&lt;p&gt;Code that follows existing conventions is unsurprising. Code that breaks conventions can be very unexpected. Someone who skims the code may not realise that it doesn't follow the convention, so they may misunderstand how it works.&lt;/p&gt;

&lt;p&gt;Try to follow conventions which already exist in your codebase. Conventions which exist in your language or framework are less essential to follow, but also recommended.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EOL-0G1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1vskcn0a3p3r2pu2361.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EOL-0G1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h1vskcn0a3p3r2pu2361.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separation-of-concerns"&gt;
  &lt;/a&gt;
  Separation of concerns
&lt;/h2&gt;

&lt;p&gt;Separation of concerns means to organise functionality well in code.&lt;/p&gt;

&lt;p&gt;Code should be separated into sensible units (modules, classes, functions and methods). Someone looking at the code should immediately understand what the particular unit does.&lt;/p&gt;

&lt;p&gt;For example, if you have a &lt;code&gt;Circle&lt;/code&gt; class, an &lt;code&gt;Enumerable&lt;/code&gt; interface or a &lt;code&gt;Math&lt;/code&gt; object or module, you tend to have a pretty good idea of what each does and contains. You would expect to find &lt;code&gt;Math.PI&lt;/code&gt;, or &lt;code&gt;Math.pow(base, exponent)&lt;/code&gt; (these methods exist in the JavaScript &lt;code&gt;Math&lt;/code&gt; object). However, you wouldn't expect to find &lt;code&gt;Math.printHelloToTheScreen()&lt;/code&gt; or &lt;code&gt;Math.produceAccountingReport()&lt;/code&gt;. The methods in the latter example would be unexpected, which would break the principles of KISS and least astonishment.&lt;/p&gt;

&lt;p&gt;In addition, units should be small and only do one thing (also known as the &lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;single responsibility principle&lt;/a&gt;). Another way of thinking about this is that different concerns should be separated at a granular level.&lt;/p&gt;

&lt;p&gt;For example, you shouldn't have a god-class called &lt;code&gt;Shape&lt;/code&gt; that has functionality for all possible shapes within it. Instead, you should have a small class for each shape.&lt;/p&gt;

&lt;p&gt;This code is the bad version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Bad god class&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;typeOfShape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// length2 is an optional parameter&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;typeOfShape&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// And so on for many more shapes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// And so on for many more shapes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the good version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Good small and simple classes&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is another example.&lt;/p&gt;

&lt;p&gt;This code is the bad version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function does too many things&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formattedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLessThan1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// code to submit error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is the better version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Functionality is separated well over multiple functions&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formattedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formattedData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sendError&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;square&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isGreaterThan5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLessThan1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code to submit error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea that you should have small, specific units applies to all code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-small-units"&gt;
  &lt;/a&gt;
  Advantages of small units
&lt;/h3&gt;

&lt;p&gt;Smaller, more specific units, have multiple advantages.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#better-code-organisation"&gt;
  &lt;/a&gt;
  Better code organisation
&lt;/h4&gt;

&lt;p&gt;Technically, with the god-class &lt;code&gt;Shape&lt;/code&gt;, you know where to go to find the circle functionality, so the organisation is not too bad.&lt;/p&gt;

&lt;p&gt;But, with the more specific units of &lt;code&gt;Circle&lt;/code&gt; and &lt;code&gt;Rectangle&lt;/code&gt;, you can find functionality faster and easier.&lt;/p&gt;

&lt;p&gt;It's less obvious with the &lt;code&gt;sendData&lt;/code&gt; example, but the same thing applies. Say you want to find the functionality for validating the data. You can find that instantly in the second version. There is a function clearly named &lt;code&gt;isValid&lt;/code&gt;. &lt;code&gt;sendData&lt;/code&gt; also calls &lt;code&gt;isValid(formattedData)&lt;/code&gt;, which labels where the data is validated.&lt;/p&gt;

&lt;p&gt;However, in the first version of &lt;code&gt;sendData&lt;/code&gt;, you'll have to spend more time reading through the details of &lt;code&gt;sendData&lt;/code&gt; to find it. Also, the part where the data is validated isn't labelled. You'll have to both parse the code and &lt;strong&gt;recognise&lt;/strong&gt; the line which does the data validation. If you're not familiar with the code, this may be difficult.&lt;/p&gt;

&lt;p&gt;In summary, smaller units provide better organisation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simplicity-and-understandability"&gt;
  &lt;/a&gt;
  Simplicity and understandability
&lt;/h4&gt;

&lt;p&gt;If you examine the &lt;code&gt;Shape&lt;/code&gt; example, you'll see that the code there is quite long and complex. It's difficult to follow. In comparison, the classes &lt;code&gt;Circle&lt;/code&gt; and &lt;code&gt;Rectangle&lt;/code&gt; are super simple. As a result, they're much easier to understand.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;sendData&lt;/code&gt; example, understanding what &lt;code&gt;sendData&lt;/code&gt; does is easier in the second version. It almost reads like English:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Format data&lt;/li&gt;
&lt;li&gt;If the data is valid: fetch&lt;/li&gt;
&lt;li&gt;Else: sendError&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You also don't have to read the implementation of the separate functions, such as &lt;code&gt;isValid&lt;/code&gt;, because their names tell you what they do.&lt;/p&gt;

&lt;p&gt;All of the smaller functions are simpler too. They are clearly labelled (which helps you understand them even if the implementation is complicated) and they only do a small thing.&lt;/p&gt;

&lt;p&gt;In general, smaller units have less code and do less things. This applies the KISS principle, which makes code easier to read and understand.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#easier-changes"&gt;
  &lt;/a&gt;
  Easier changes
&lt;/h4&gt;

&lt;p&gt;Code that does fewer things is easier to change than code which does many things.&lt;/p&gt;

&lt;p&gt;At the very least, the code you need to change isn't surrounded by other code that you need to carefully avoid changing. Also, you need to understand the code before changing it, which is easier with small units.&lt;/p&gt;

&lt;p&gt;Consider the god-class &lt;code&gt;Shape&lt;/code&gt; example. The code for the functionality of all the shapes is entangled together. If you try to change the code for the circle, you could accidentally modify something else and create a bug. Also, the functionality for circle exists in multiple different methods inside &lt;code&gt;Shape&lt;/code&gt;. You'll have to jump around and change multiple different things.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;code&gt;Circle&lt;/code&gt; and &lt;code&gt;Rectangle&lt;/code&gt; are very easy to change. Unrelated code is nowhere to be found. You can't break any other shape by accident.&lt;/p&gt;

&lt;p&gt;The same applies to the &lt;code&gt;sendData&lt;/code&gt; example.&lt;/p&gt;

&lt;p&gt;In the second version, if you want to change the data validation, you change the code in &lt;code&gt;isValid&lt;/code&gt; and you're finished. You can't break any unrelated code, because there isn't any.&lt;/p&gt;

&lt;p&gt;However, in the first version, since a lot of unrelated code is placed together, you might accidentally change something else by accident.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#easier-to-test"&gt;
  &lt;/a&gt;
  Easier to test
&lt;/h4&gt;

&lt;p&gt;In general, if a unit does less stuff, it's easier to test than if it does more stuff.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#easier-to-reuse"&gt;
  &lt;/a&gt;
  Easier to reuse
&lt;/h4&gt;

&lt;p&gt;If a unit does one specific thing, it's immediately reusable any time you need that one thing. However, if a unit does 10 things, or even 2 things, it's generally not reusable unless you need all of those things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-apply-separation-of-concerns"&gt;
  &lt;/a&gt;
  How to apply separation of concerns
&lt;/h3&gt;

&lt;p&gt;To apply separation of concerns, you extract functionality.&lt;/p&gt;

&lt;p&gt;For example, with &lt;code&gt;Shape&lt;/code&gt;, if you extract all of the relevant code for the circle functionality into its own class, you end up with &lt;code&gt;Circle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a more step-by-step process.&lt;/p&gt;

&lt;p&gt;Here is &lt;code&gt;Shape&lt;/code&gt; again for reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;typeOfShape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;length2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// length2 is an optional parameter&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;typeOfShape&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;length2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// And so on for many more shapes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rectangle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// And so on for many more shapes&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's define a class called &lt;code&gt;Circle&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From &lt;code&gt;Shape&lt;/code&gt;, let's extract only the constructor functionality that's relevant to circle. That's the part inside the &lt;code&gt;constructor&lt;/code&gt; method and inside the &lt;code&gt;if (this.type === 'circle')&lt;/code&gt; conditional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repeat for the &lt;code&gt;getArea&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And so on for all the other methods which might be in &lt;code&gt;Shape&lt;/code&gt;. Afterwards, repeat for the other shapes.&lt;/p&gt;

&lt;p&gt;The same process applies for &lt;code&gt;sendData&lt;/code&gt;, although in this case we're not completely replacing &lt;code&gt;sendData&lt;/code&gt; like we did with &lt;code&gt;Shape&lt;/code&gt; and &lt;code&gt;Circle&lt;/code&gt;. Instead, we're extracting functionality into separate functions and calling them inside &lt;code&gt;sendData&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, the code to format data was moved into the &lt;code&gt;formatData&lt;/code&gt; function and the code to check if the data is valid was moved into the &lt;code&gt;isValid&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-apply-separation-of-concerns"&gt;
  &lt;/a&gt;
  When to apply separation of concerns
&lt;/h3&gt;

&lt;p&gt;Now that you understand the "why" and "how" of separation of concerns, when should you apply it?&lt;/p&gt;

&lt;p&gt;Generally, you want "small, specific units that only do one thing".&lt;/p&gt;

&lt;p&gt;However, the definition of "one thing" varies, it depends on context.&lt;/p&gt;

&lt;p&gt;If you were to show the god-class &lt;code&gt;Shape&lt;/code&gt; to someone, they might rightfully say that it only does one thing. "It handles shapes".&lt;/p&gt;

&lt;p&gt;Someone else may say that &lt;code&gt;Shape&lt;/code&gt; does a lot of things. "It handles circles, rectangles and so on. That's multiple things".&lt;/p&gt;

&lt;p&gt;Both claims are correct. It all depends on what level of abstraction you consider.&lt;/p&gt;

&lt;p&gt;In general, it's good to consider small levels of abstraction. You want units that do small, specific things.&lt;/p&gt;

&lt;p&gt;That's because, as already examined, smaller units have more benefits than larger units.&lt;/p&gt;

&lt;p&gt;So, here are some guidelines.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-code-feels-large-and-complicated"&gt;
  &lt;/a&gt;
  When code feels large and complicated
&lt;/h4&gt;

&lt;p&gt;If you feel that some code is difficult to understand, or too large, try extracting some units out of it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#can-you-keep-extracting"&gt;
  &lt;/a&gt;
  Can you keep extracting?
&lt;/h4&gt;

&lt;p&gt;Robert Martin has a technique that he calls &lt;a href="https://sites.google.com/site/unclebobconsultingllc/one-thing-extract-till-you-drop"&gt;"extract till you drop"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In short, you keep extracting functionality until there is no reasonable way of extracting any more.&lt;/p&gt;

&lt;p&gt;As you write code, consider: "Can I extract some more functionality from this unit, into a separate unit?"&lt;/p&gt;

&lt;p&gt;If it's possible to extract further, then consider doing so.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://sites.google.com/site/unclebobconsultingllc/one-thing-extract-till-you-drop"&gt;Robert Martin's blog post on extract till you drop&lt;/a&gt; for more information on this technique.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reasons-to-change"&gt;
  &lt;/a&gt;
  Reasons to change
&lt;/h4&gt;

&lt;p&gt;Consider, what reasons does this code have to change?&lt;/p&gt;

&lt;p&gt;Code which is placed together, which has different reasons to change (different parts may change at different times), is bad, as we've already examined.&lt;/p&gt;

&lt;p&gt;The solution is to move code with different reasons to change into separate units.&lt;/p&gt;

&lt;p&gt;Consider the &lt;code&gt;Shape&lt;/code&gt; example. &lt;code&gt;Shape&lt;/code&gt; will change when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;anything needs changing for circles&lt;/li&gt;
&lt;li&gt;anything needs changing for rectangles&lt;/li&gt;
&lt;li&gt;anything needs changing on any other shape&lt;/li&gt;
&lt;li&gt;a new shape needs to be added or removed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;sendData&lt;/code&gt; example, &lt;code&gt;sendData&lt;/code&gt; could change if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the formatting of the data needs to change&lt;/li&gt;
&lt;li&gt;the validation of the data needs to change&lt;/li&gt;
&lt;li&gt;the data in the error request needs to change&lt;/li&gt;
&lt;li&gt;the endpoint (URL) of the error request needs to change&lt;/li&gt;
&lt;li&gt;the data in the &lt;code&gt;sendData&lt;/code&gt; request needs to change&lt;/li&gt;
&lt;li&gt;the endpoint (URL) of the &lt;code&gt;sendData&lt;/code&gt; request needs to change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these reasons are indicators that you may want to separate that functionality.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#who-which-role-in-the-company-may-want-to-change-this-code"&gt;
  &lt;/a&gt;
  Who (which role in the company) may want to change this code
&lt;/h4&gt;

&lt;p&gt;This is another flavour of "what reasons does this code have to change".&lt;/p&gt;

&lt;p&gt;It asks who (which role in the company) may want to change the code.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;sendData&lt;/code&gt; example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;developers may want to change something about the URL endpoints of the requests or the bodies of the requests&lt;/li&gt;
&lt;li&gt;accountants may want to change the data validation in the future&lt;/li&gt;
&lt;li&gt;a product owner who uses the submitted data to generate reports could want to format the data differently in the future&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of these questions (what could change and who may want changes) try to point out different concerns in the code, that may benefit from separation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#be-pragmatic"&gt;
  &lt;/a&gt;
  Be pragmatic
&lt;/h4&gt;

&lt;p&gt;The final point is to be pragmatic.&lt;/p&gt;

&lt;p&gt;You don't have to separate everything to the extreme. The goal is to have code that's easy to work with.&lt;/p&gt;

&lt;p&gt;For example, you don't need to enforce every function in your codebase to be at maximum 4 lines long (which is possible to do). You would end up with hundreds of miniscule functions. They may be harder to work with than more reasonably sized functions, that are an average of 4 to 8 lines long.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dycw6v5g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muj76yszugvl5223efu1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dycw6v5g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muj76yszugvl5223efu1.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#principle-of-least-knowledge"&gt;
  &lt;/a&gt;
  Principle of least knowledge
&lt;/h2&gt;

&lt;p&gt;In software, it's beneficial to minimise knowledge. This includes the knowledge that code has of other code (dependencies), as well as the knowledge you need to work with particular areas of code.&lt;/p&gt;

&lt;p&gt;In other words, you want software to be decoupled and easy to work with. Making changes shouldn't break seemingly unrelated code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knowledge-in-code"&gt;
  &lt;/a&gt;
  Knowledge in code
&lt;/h3&gt;

&lt;p&gt;In programming, knowledge means dependencies.&lt;/p&gt;

&lt;p&gt;If some code (call it module A), &lt;strong&gt;knows&lt;/strong&gt; about some other code (call it module B), it means that it &lt;strong&gt;uses&lt;/strong&gt; that other code. It depends on it.&lt;/p&gt;

&lt;p&gt;If some code is being used elsewhere, that means that there are &lt;strong&gt;limitations on how you can change it&lt;/strong&gt;, otherwise you would break the code that uses it.&lt;/p&gt;

&lt;p&gt;Without discipline and control, this is where you can get into a chain reaction of propagating changes. The situation where you just wanted to make a small change and had to modify every file in the system to do so. You changed A, which was used by B and C so you had to change both of those to accommodate your changes to A. In turn B and C were used in other places which you also had to change. And so on.&lt;/p&gt;

&lt;p&gt;Every change is error-prone, multiple cascading changes are much worse.&lt;/p&gt;

&lt;p&gt;Additionally, you need to actually remember or know that these dependencies exist. This is quite difficult to do, especially when dependencies propagate far and wide throughout your code. But if you don't remember, you won't make all of the required changes and you'll immediately introduce bugs.&lt;/p&gt;

&lt;p&gt;That's why you need to minimise knowledge in your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modifications-to-code"&gt;
  &lt;/a&gt;
  Modifications to code
&lt;/h3&gt;

&lt;p&gt;Here are the possible changes you can make to already-existing code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#no-change-to-contract"&gt;
  &lt;/a&gt;
  No change to contract
&lt;/h4&gt;

&lt;p&gt;The only change you can make with no propagating changes, is a change that doesn't affect anything else in the codebase.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Original&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// After change&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two functions are equivalent from a caller's point of view. They have the same contract. If you change from one version to the other, nothing else in the codebase needs to change, because nothing could possibly be affected by this change.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#changing-the-contract-of-a-private-function"&gt;
  &lt;/a&gt;
  Changing the contract of a "private" function
&lt;/h4&gt;

&lt;p&gt;The next best case is when you change the contract of a private function. Something that's not public to the majority of the codebase. In this case, if you change the contract, the code that is affected is very small.&lt;/p&gt;

&lt;p&gt;For example, consider this Circle class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Circle.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_privateCalculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_privateCalculation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, consider that we want to delete &lt;code&gt;_privateCalculation&lt;/code&gt;. Here is the code after the change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Circle.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getArea&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we deleted &lt;code&gt;_privateCalculation&lt;/code&gt;, &lt;code&gt;getArea&lt;/code&gt; was affected. As a result, we also had to modify &lt;code&gt;getArea&lt;/code&gt; to accommodate the changes. However, since &lt;code&gt;_privateCalculation&lt;/code&gt; wasn't used anywhere else in the codebase and since &lt;code&gt;getArea&lt;/code&gt; didn't change its contract, we're finished. Nothing else in the codebase needs to be modified.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#changing-the-contract-of-a-public-function"&gt;
  &lt;/a&gt;
  Changing the contract of a public function
&lt;/h4&gt;

&lt;p&gt;The pattern continues in the same way. If you change the contract of anything, you'll have to modify &lt;strong&gt;everything&lt;/strong&gt; that uses it to accommodate. If you change more contracts as a result, you'll have to modify even more things. And so on.&lt;/p&gt;

&lt;p&gt;For example, if you delete &lt;code&gt;getArea&lt;/code&gt;, you'll have to update all of the code in the codebase that uses it. Since &lt;code&gt;getArea&lt;/code&gt; is a public function, many things could be using it.&lt;/p&gt;

&lt;p&gt;In general, you want to prevent these situations.&lt;/p&gt;

&lt;p&gt;The only real way to prevent them is to separate concerns properly. You need to organise your code into sensible units that make sense for your project. If done well, that minimises the chance that you'll need to change the contract of those units in the future.&lt;/p&gt;

&lt;p&gt;For example, what is the chance that the &lt;code&gt;Circle&lt;/code&gt; class needs to change its contract? It's very low.&lt;/p&gt;

&lt;p&gt;Other than that, keep everything you can private, so that very little is affected when you need to change code.&lt;/p&gt;

&lt;p&gt;Now, changes to public things are necessary sometimes. That's life. It could be due to new requirements, or due to large refactors. You'll deal with them when you need to, but hopefully it won't be too often.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-tips"&gt;
  &lt;/a&gt;
  More tips
&lt;/h3&gt;

&lt;p&gt;The principle of least knowledge has many more applications. They all deal with making code independent to changes and with minimizing the mental knowledge you need to work with code.&lt;/p&gt;

&lt;p&gt;Other applications of this principle include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the interface segregation principle. This keeps interfaces small. It means that code which uses an interface depends on less things. It allows for easier future changes such as splitting a class based on its interfaces or creating a smaller separate class for an interface.&lt;/li&gt;
&lt;li&gt;the law of Demeter. This prevents functions / methods from depending on long chains of object compositions.&lt;/li&gt;
&lt;li&gt;immutability. This eliminates changes to variables. It means that you don't need to track how the variable has changed over time. It reduces the knowledge you need to work.&lt;/li&gt;
&lt;li&gt;only accessing things in the local scope (or maybe instance scope). Global things are accessible by many things in the codebase. Changing them may break many things. It's also difficult to track how they change over time, because many things can change them. However, local things are more "private". This makes tracking changes easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9P2EfoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sr57hh1cs4unum5lh1x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9P2EfoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sr57hh1cs4unum5lh1x.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstraction-and-dont-repeat-yourself-dry"&gt;
  &lt;/a&gt;
  Abstraction and don't repeat yourself (DRY)
&lt;/h2&gt;

&lt;p&gt;DRY (don't repeat yourself) is a core principle in programming.&lt;/p&gt;

&lt;p&gt;It says that if you have multiple instances of similar code, you should refactor them into a single abstraction. That way you'll end up with just one instance of the code, rather than multiple.&lt;/p&gt;

&lt;p&gt;To accommodate the differences, the resulting abstraction accepts arguments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#motivation-for-dry"&gt;
  &lt;/a&gt;
  Motivation for DRY
&lt;/h3&gt;

&lt;p&gt;One of the reasons for DRY is to cut down the time you need to write code. If you already have an abstraction for X functionality, then you can import it and use it, rather than re-code it from scratch every time you need it.&lt;/p&gt;

&lt;p&gt;Another reason is to make changes easier. As already mentioned, we're bad with repetitive work. If code is DRY, then you only have to make a specific change in one place. If code isn't DRY then you have to make a similar change in multiple places. Making a single change is safer and faster than making multiple similar changes.&lt;/p&gt;

&lt;p&gt;Additionally, keeping code DRY applies separation of concerns. The abstraction will have to be placed in a sensible place in the codebase (good for code organisation). Also, the implementation of the abstraction is separated from the caller.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-apply-abstraction-and-dry"&gt;
  &lt;/a&gt;
  How to apply abstraction and DRY
&lt;/h3&gt;

&lt;p&gt;Here are some guidelines for applying DRY.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#combine-similar-code-into-a-single-abstraction"&gt;
  &lt;/a&gt;
  Combine similar code into a single abstraction
&lt;/h4&gt;

&lt;p&gt;Whenever you find multiple instances of the same or similar code, combine them into a single abstraction. If there are slight differences between the instances, accept arguments to handle them.&lt;/p&gt;

&lt;p&gt;You've probably done this a vast number of times throughout your career.&lt;/p&gt;

&lt;p&gt;To illustrate the point, let's use the function &lt;code&gt;map&lt;/code&gt; as an example. &lt;code&gt;map&lt;/code&gt; is a function that handles this common process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new, empty, array&lt;/li&gt;
&lt;li&gt;Iterate over an array with a for-loop&lt;/li&gt;
&lt;li&gt;Run some functionality on every value&lt;/li&gt;
&lt;li&gt;Push the resulting value to the new array&lt;/li&gt;
&lt;li&gt;After the for-loop ends, return the new array&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This process is very common. It appears all the time in many codebases.&lt;/p&gt;

&lt;p&gt;Here is what it normally looks like using a for-loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transformedElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transformedElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the function &lt;code&gt;doubleArray&lt;/code&gt;, there would be many other functions that are almost exactly the same, except for the transformation they make on each element.&lt;/p&gt;

&lt;p&gt;So, take the common parts from those functions and put them into a separate function called &lt;code&gt;map&lt;/code&gt;. Accept an argument for the thing that's different every time, the transformation to run on each element.&lt;/p&gt;

&lt;p&gt;Here is the resulting code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transformationFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transformedElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transformationFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transformedElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in every function in your codebase similar to &lt;code&gt;doubleArray&lt;/code&gt;, use &lt;code&gt;map&lt;/code&gt; instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Of course, arrays in JavaScript already have a built-in method for &lt;code&gt;map&lt;/code&gt;, so you wouldn't need to create a standalone &lt;code&gt;map&lt;/code&gt; function. This was just for illustrative purposes.)&lt;/p&gt;

&lt;p&gt;You can do the same with any other code. Any time you encounter similar code, combine it into a single abstraction and accept arguments for any differences.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rule-of-three"&gt;
  &lt;/a&gt;
  Rule of three
&lt;/h4&gt;

&lt;p&gt;The rule of three is a precaution against combining functionality too early.&lt;/p&gt;

&lt;p&gt;It states that you should combine functionality into a single abstraction if there are three occurrences of it. Don't combine if there are only two occurrences.&lt;/p&gt;

&lt;p&gt;That's because the instances of code you might combine, may diverge (each may change differently) in the future.&lt;/p&gt;

&lt;p&gt;For example, consider this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validatePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would probably be a mistake to combine the duplicate functionality into its own abstraction, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// combined too early&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validateUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validatePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem is that, in the future, &lt;code&gt;validateUsername&lt;/code&gt; and &lt;code&gt;validatePassword&lt;/code&gt; may change differently. It's not difficult to see how that may happen.&lt;/p&gt;

&lt;p&gt;For example, in the future, &lt;code&gt;validateUsername&lt;/code&gt; may need to check that there are no special characters, while the password may require special characters.&lt;/p&gt;

&lt;p&gt;Obviously you could make both scenarios work in the &lt;code&gt;validate&lt;/code&gt; function using conditionals, but it would be messier than if you had kept the functionality separate.&lt;/p&gt;

&lt;p&gt;This is why we use the rule of three. Waiting until the third occurrence makes it more likely that the similar functionality is significant rather than coincidental. It means that things are less likely to diverge in the future.&lt;/p&gt;

&lt;p&gt;It also makes it so that if one of the three instances of similar code diverges, you can separate it and still keep the abstraction for the other two. On the other hand, if you combined functionality on the second occurrence, then had to separate them out again, you would have to revert both of them.&lt;/p&gt;

&lt;p&gt;In summary, refactoring on the second occurrence is more likely to be a waste of time.&lt;/p&gt;

&lt;p&gt;Of course, the rule of three is just a guideline. Remember to be pragmatic and do what's best for your project. Some similar instances of code may be changing in the same way every time. Or maybe they are each quite complicated to change, and you have to make a similar change to both every time. In that case, it may be more beneficial for your project to combine them into a single abstraction, even if you have to ignore the rule of three.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bqHChfYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp1mw771wt4wncc6zdjv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bqHChfYB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp1mw771wt4wncc6zdjv.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#side-effects"&gt;
  &lt;/a&gt;
  Side effects
&lt;/h2&gt;

&lt;p&gt;The last thing we're going to look at is side effects. These aren't a single principle, but a combination of many principles + being pragmatic.&lt;/p&gt;

&lt;p&gt;(And no, they're not just the domain of functional programming. It's essential for all code to handle side effects properly.)&lt;/p&gt;

&lt;p&gt;In programming, the general definition of a side effect is anything that changes the state of the system. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;changing the value of a variable&lt;/li&gt;
&lt;li&gt;logging to the console&lt;/li&gt;
&lt;li&gt;modifying the DOM&lt;/li&gt;
&lt;li&gt;modifying the database&lt;/li&gt;
&lt;li&gt;any mutation whatsoever&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also includes "actions" that may not be viewed as mutations, such as sending data over the network.&lt;/p&gt;

&lt;p&gt;I also say that accessing non-local scope is a side effect. It may not be in the official definition, but it's as unsafe as other side effects, especially if the variable you're trying to access is mutable. After all, if you access a global variable whose value isn't what you expect, you have a bug, even if the code in question doesn't modify it.&lt;/p&gt;

&lt;p&gt;All code needs "side effects" to be useful. For example, you have to modify the database or the DOM at some point.&lt;/p&gt;

&lt;p&gt;But side effects can be dangerous. They need to be handled carefully.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-danger-of-side-effects"&gt;
  &lt;/a&gt;
  The danger of side effects
&lt;/h3&gt;

&lt;p&gt;Side effects are not directly harmful, but they can be indirectly harmful.&lt;/p&gt;

&lt;p&gt;For example, code A and B might both depend on the value of a global variable. You might change the value of the global variable, because you want to influence code A. But, you don't remember that code B will be affected as well. As a result, you now have a bug.&lt;/p&gt;

&lt;p&gt;These hidden dependencies, where you change one thing and something else breaks, can be very difficult to remember, track and manage.&lt;/p&gt;

&lt;p&gt;Another example is changing the DOM. The DOM can be thought of as just a global object with state. The problem is that, if different pieces of code affect the DOM at different times, in non-compatible ways, there can be bugs. Maybe code A depends on element X to be there, but code B deleted that entire section altogether just before code A ran.&lt;/p&gt;

&lt;p&gt;Perhaps you've encountered bugs like these in your work as well.&lt;/p&gt;

&lt;p&gt;Additionally, side effects break most of the principles we've covered so far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;KISS and the principle of least astonishment&lt;/li&gt;
&lt;li&gt;principle of least knowledge (because code affects other, seemingly unrelated code)&lt;/li&gt;
&lt;li&gt;separation of concerns (because concerns are not necessarily self-contained or well-organised)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One important thing to understand however, is that side effects are not inherently harmful. They only cause bugs if we code them incorrectly. They are code we write which happens to be incompatible with other code we write. We write code A and then we write code B which breaks code A under certain circumstances.&lt;/p&gt;

&lt;p&gt;The main danger of side effects is that they're generally very difficult to track. The reason for that is because tracking global state, which anything can modify at any time, is very difficult. If uncontrolled, how could you possibly track changes made to the DOM over time? You may have to track so many things that it just wouldn't be feasible.&lt;/p&gt;

&lt;p&gt;Asynchronicity and race conditions also add to the complexity and difficulty of tracking side effects.&lt;/p&gt;

&lt;p&gt;Another downside of side effects is that code with side effects is generally harder to test.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-side-effects"&gt;
  &lt;/a&gt;
  Handling side effects
&lt;/h3&gt;

&lt;p&gt;Even though side effects are dangerous, they can be handled effectively.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#be-pragmatic"&gt;
  &lt;/a&gt;
  Be pragmatic
&lt;/h4&gt;

&lt;p&gt;The most important point, as always, is to be pragmatic.&lt;/p&gt;

&lt;p&gt;You don't have to avoid all side effects to the extreme. You are only required to be careful with potentially incompatible code.&lt;/p&gt;

&lt;p&gt;For example, immutability is a good way to avoid many types of side effects. However, immutability makes little difference in the local scope of functions.&lt;/p&gt;

&lt;p&gt;For example, here are two functions that do the same thing. One uses immutability and the other doesn't.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;factorial2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;factorial2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example, &lt;code&gt;factorial1&lt;/code&gt; uses mutation. The values of &lt;code&gt;result&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; both change during execution.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;factorial2&lt;/code&gt; uses immutability. The values of the variables inside it never change during function execution.&lt;/p&gt;

&lt;p&gt;But it makes no difference. Other than some language limitations of recursion (which we'll ignore for this example), for all intents and purposes, &lt;code&gt;factorial1&lt;/code&gt; and &lt;code&gt;factorial2&lt;/code&gt; are exactly the same from the perspective of the caller.&lt;/p&gt;

&lt;p&gt;In fact, people tend to be less comfortable with recursion, so &lt;code&gt;factorial2&lt;/code&gt; could actually be the worse choice depending on your team.&lt;/p&gt;

&lt;p&gt;So be pragmatic and do what's best for your project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#immutability"&gt;
  &lt;/a&gt;
  Immutability
&lt;/h4&gt;

&lt;p&gt;Having said that, immutability is an easy way to avoid a large portion of side effects.&lt;/p&gt;

&lt;p&gt;By never modifying variables in your code unnecessarily, you remove a large problem. You won't have things changing unexpectedly. You also won't have to track the lifecycle of variables to know what values they contain.&lt;/p&gt;

&lt;p&gt;When starting with immutability, start simple. Then, over time, try to make as many things immutable in your work as possible.&lt;/p&gt;

&lt;p&gt;Instead of modifying a variable, create a new variable for the new value. Instead of modifying an object, create a new object with the new values you want.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 1 - Don't do this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// mutates the original array&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 2 - Do this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns a new array, without modifying the original&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In example 1, the original array is modified.&lt;/p&gt;

&lt;p&gt;In example 2 the original array is not modified. &lt;code&gt;doubleArray&lt;/code&gt; creates and returns a new array with the doubled values. Outside of the function, we create the new variable &lt;code&gt;result&lt;/code&gt; to hold the new array.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#immutability-performance-concerns"&gt;
  &lt;/a&gt;
  Immutability performance concerns
&lt;/h5&gt;

&lt;p&gt;Immutability may be slightly worse for performance. However, you probably shouldn't worry about that, because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you shouldn't do premature optimisation for performance. Don't worry about performance except for the bottlenecks in your code.&lt;/li&gt;
&lt;li&gt;in most cases, immutability won't have a significant impact on performance&lt;/li&gt;
&lt;li&gt;you can use a performant immutable data structures library, such as Immer for JavaScript. It converts some operations from Big-O(n) time (such as copying an entire object) to Big-O(1) time.&lt;/li&gt;
&lt;li&gt;you can be pragmatic. You don't have to apply immutability in places where it would bottleneck performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, in some cases, immutability can improve performance by making things easier to run in parallel.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#avoid-nonlocal-scope"&gt;
  &lt;/a&gt;
  Avoid non-local scope
&lt;/h4&gt;

&lt;p&gt;Avoid accessing or modifying things that are not &lt;strong&gt;exclusively&lt;/strong&gt; in the local scope of your functions or methods. This means that it's probably okay to modify variables that originated in your local scope, but not variables which were passed in as arguments (originated outside of the local scope).&lt;/p&gt;

&lt;p&gt;If necessary, it's alright to mutate things up to instance or module scope.&lt;/p&gt;

&lt;p&gt;The further away from local scope you go, the more dangerous it gets, because things become more global. This makes things harder to track and introduces far-reaching dependencies in your code.&lt;/p&gt;

&lt;p&gt;Wherever possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pass things in explicitly as arguments&lt;/li&gt;
&lt;li&gt;stick as close to local-scope as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 1 - Don't do this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleResult&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Accesses and mutates a variable outside of the local scope&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;doubleResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 2 - Do this&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Accesses parameter which is in local scope. Doesn't mutate anything&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In example 1, &lt;code&gt;doubleResult&lt;/code&gt; accesses &lt;code&gt;result&lt;/code&gt;, which is a variable outside of its local scope. It also mutates it, changing its value. Now, if any other code in the codebase accesses &lt;code&gt;result&lt;/code&gt;, it will see the new value.&lt;/p&gt;

&lt;p&gt;In example 2, &lt;code&gt;double&lt;/code&gt; only accesses its parameter, which is part of its local scope. It doesn't mutate any values outside of its local scope.&lt;/p&gt;

&lt;p&gt;In a real codebase, something resembling example 1 could be very difficult to track. The &lt;code&gt;result&lt;/code&gt; variable may be defined much further away from both the &lt;code&gt;doubleResult&lt;/code&gt; function as well as the function call. This makes it harder to track the value of &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, if &lt;code&gt;result&lt;/code&gt; isn't what you expect, you have a bug. For example, you may have already called &lt;code&gt;doubleResult&lt;/code&gt; 3 times but you may not remember.&lt;/p&gt;

&lt;p&gt;Overall, in example 1, you can't predict what a function that uses &lt;code&gt;result&lt;/code&gt; will do unless you know the exact value of &lt;code&gt;result&lt;/code&gt; at that time. To do this, you'll need to search and trace through the entire codebase to keep track of &lt;code&gt;result&lt;/code&gt; at all times.&lt;/p&gt;

&lt;p&gt;In the second example, &lt;code&gt;initialValue&lt;/code&gt; is always 5, so there are never any surprises. Also you can see what the function is doing immediately and can easily predict what will happen.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#be-extremely-careful"&gt;
  &lt;/a&gt;
  Be extremely careful
&lt;/h4&gt;

&lt;p&gt;Sometimes you can't just rely on immutability. For example, at some point, you must mutate the DOM or the database, or make a call to a third party API, or run some sort of side effect. As already mentioned, asynchronicity only adds to the problem.&lt;/p&gt;

&lt;p&gt;In this case, you just have to be extremely careful.&lt;/p&gt;

&lt;p&gt;Side effects are probably where the majority of the bugs in your codebase exist. They're the hardest code to understand and track.&lt;/p&gt;

&lt;p&gt;Regardless of what you do to try and manage them, you must always invest the required time and attention to them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#separate-pure-and-impure-functionality"&gt;
  &lt;/a&gt;
  Separate pure and impure functionality
&lt;/h4&gt;

&lt;p&gt;For the most part, try to separate code with side effects and code without side effects. Your functions shouldn't both perform side effects and have "pure" code. They should do one or the other (within reason).&lt;/p&gt;

&lt;p&gt;This is also known as the &lt;a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation"&gt;command-query separation principle&lt;/a&gt;. It's also an application of separation of concerns.&lt;/p&gt;

&lt;p&gt;For starters, something like writing to the database is very different to calculating what to write to the database. Those two concerns can change independently and for different reasons. As we examined in separation of concerns, they should be separated.&lt;/p&gt;

&lt;p&gt;Further, pure functions are generally easy to understand, reuse and test. Functions with side effects are not. Therefore, for your codebase to be easy to work with, you probably want as many functions as possible to be pure. This means that you should separate your pure functionality from your side effects.&lt;/p&gt;

&lt;p&gt;For example, instead of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArrayAndDisplayInDOM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// this function does a non-trivial calculation / operation and performs a side effect&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// (pretend this is a non-trivial calculation / operation)&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// writing to the DOM is a side effect&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doubleArrayAndDisplayInDOM&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// this function only does a calculation / operation&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayInDom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// this function only performs a side effect&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doubleArray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;displayInDom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doubled&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#clear-areas-of-responsibility"&gt;
  &lt;/a&gt;
  Clear areas of responsibility
&lt;/h4&gt;

&lt;p&gt;As much as possible, you need to make sure that your code doesn't have conflicts. Code which performs side effects shouldn't conflict with other code performing other side effects at different times.&lt;/p&gt;

&lt;p&gt;A good way to do this is to have distinct areas of responsibility in your code.&lt;/p&gt;

&lt;p&gt;For example, if code A modifies element X in the DOM, then it should ideally be the only code which modifies that part of the DOM. All other code that needs to influence X should talk to code A to do so. That way tracking changes to element X is as easy as possible.&lt;/p&gt;

&lt;p&gt;Additionally, try to organise code dependencies well. For example, code A shouldn't run if any other code runs which would conflict with it. Also, code A shouldn't run if the state that it depends on isn't there or isn't what code A expects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#side-effects-in-pairs"&gt;
  &lt;/a&gt;
  Side effects in pairs
&lt;/h4&gt;

&lt;p&gt;For side effects which come in pairs (e.g. open / close file), the function that started the side effect should also finish it.&lt;/p&gt;

&lt;p&gt;For example, instead of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Note, this is pseudocode */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;openFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;openFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* Lots of other code in-between */&lt;/span&gt;

&lt;span class="nx"&gt;doStuffToFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Note, this is pseudocode */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;useFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doStuffToFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Robert Martin calls this technique "passing a block". The function &lt;code&gt;useFile&lt;/code&gt; both opens and closes the file, so it doesn't leave an open file pointer in the system.&lt;/p&gt;

&lt;p&gt;This ensures that the file will be closed when it's no longer needed.&lt;/p&gt;

&lt;p&gt;As for the functionality to perform on the file, that's passed into the function. It's the parameter &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This ensures that you won't forget to finish the side effect later. It also provides good code organisation and makes the code easy to understand and track. The entire side effect is fully handled in one place.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consider-using-a-framework-or-functional-programming-language"&gt;
  &lt;/a&gt;
  Consider using a framework or functional programming language
&lt;/h4&gt;

&lt;p&gt;As with immutability, the best option might be to avoid side effects as much as possible.&lt;/p&gt;

&lt;p&gt;To help with this, you can consider delegating some of them to a framework, library, or functional programming language.&lt;/p&gt;

&lt;p&gt;For example, for working with the DOM, you can use a library such as &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; (or one of the many alternatives).&lt;/p&gt;

&lt;p&gt;Something like React handles all of the DOM-related side effects. Then, in your application, you just write pure functions. You don't modify the DOM directly. Instead, your functions generate an object that represents what the DOM should look like.&lt;/p&gt;

&lt;p&gt;This is good for you, because working with pure functions is much easier than working with side effects.&lt;/p&gt;

&lt;p&gt;As for actually modifying the DOM, those side effects still occur, but they're React's problem now.&lt;/p&gt;

&lt;p&gt;Additionally, the parent / child hierarchy of React ensures that your DOM manipulations won't conflict with each other and cause problems. For example, React code involving element X won't run if element X won't actually exist. This is an example of good organisation and structure in your code to prevent conflicts with other side effects.&lt;/p&gt;

&lt;p&gt;Of course, there are many more pros and cons to using something like this. But it's just an option for you to consider.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;That was a high-level overview of what I consider to be the most important concepts for writing good code. I hope that this article helped you understand the reasoning, motivation and overview behind clean code and programming principles. Hopefully, this knowledge will help you when you go on to learn more programming principles, or find more practical examples of them.&lt;/p&gt;

&lt;p&gt;For the next step, I recommend learning clean code and programming principles more practically. Use a resource that explains the concepts with many examples and applications in code.&lt;/p&gt;

&lt;p&gt;I highly recommend looking into content created by &lt;a href="https://twitter.com/unclebobmartin"&gt;Robert Martin&lt;/a&gt;. For the "quick", free version, I found his lectures &lt;a href="https://www.youtube.com/watch?v=SVRiktFlWxI"&gt;Coding a better world together part 1&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=qnq9syXUuFE"&gt;Coding a better world together part 2&lt;/a&gt; to be some of the best programming videos I've ever watched. For more detail you might want to check out his book &lt;a href="https://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/"&gt;Clean Code&lt;/a&gt; or his videos &lt;a href="https://cleancoders.com/"&gt;Clean Coders&lt;/a&gt; (start with the fundamentals series and the SOLID principles). I've learned a lot from Robert Martin's resources. I especially like that he explains the principles very practically, giving many practical examples of each and a lot of information in general.&lt;/p&gt;

&lt;p&gt;I also found the book &lt;a href="https://www.amazon.co.uk/Pragmatic-Programmer-Andrew-Hunt/dp/020161622X"&gt;The Pragmatic Programmer&lt;/a&gt; very good. Some of the details are outdated, but the concepts are not. That book truly hammers in the concept of being pragmatic. If anyone reads the &lt;a href="https://www.amazon.co.uk/Pragmatic-Programmer-journey-mastery-Anniversary/dp/0135957052/"&gt;20th anniversary edition of The Pragmatic Programmer&lt;/a&gt; please let me know what you thought. It's on my list but I haven't read it yet.&lt;/p&gt;

&lt;p&gt;I'm sure there are other amazing resources as well, but these are the ones I'm familiar with and can personally recommend.&lt;/p&gt;

&lt;p&gt;Finally, I recommend thinking about the programming principles yourself. Challenge them, consider where they might be useful or not be. Spend time on your own and consider everything that this article discussed.&lt;/p&gt;

&lt;p&gt;Alright, if you have any comments, feedback, or even counter-arguments to what this article discussed, please let me know in the comments. I'm always happy for a discussion. See you next time.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Setup a Minimal Node.js Server</title>
      <author>Abel Lifaefi Mbula</author>
      <pubDate>Fri, 14 May 2021 11:03:19 +0000</pubDate>
      <link>https://dev.to/bam92/how-to-setup-a-minimal-node-js-server-5479</link>
      <guid>https://dev.to/bam92/how-to-setup-a-minimal-node-js-server-5479</guid>
      <description>&lt;p&gt;Node.js is a JavaScript engine that let us use JS language in the backend. You can say goodbye to Apache, Ngix servers or something similar for your backend needs. Thanks to Node.js, your JS knowledge is enough to work in the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Bam92/node-starter"&gt;TL;DR–Explore the example repository&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;bootstrap a Node.js server&lt;/li&gt;
&lt;li&gt;serve up an HTML file&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;have Node.js installed in your local machine (at least version 10)&lt;/li&gt;
&lt;li&gt;have a basic knowledge of CLI (command-line interface)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To check your Node.js installation, open your terminal and type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mine is &lt;code&gt;v14.4.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check also the packet manager that comes with Node.js &lt;code&gt;npm&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;mine is &lt;code&gt;6.14.7&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In case you don't have &lt;code&gt;Node.js&lt;/code&gt;, go &lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt; to download it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-project-initialization"&gt;
  &lt;/a&gt;
  The project initialization
&lt;/h1&gt;

&lt;p&gt;We need a folder to locate our project. Create one and name it as you want and move to it. In this tutorial, I'm using the CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;node-server
&lt;span class="nb"&gt;cd &lt;/span&gt;node-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The folder name is &lt;code&gt;node-server&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once in our project folder, from the CLI, we can now initialize the &lt;code&gt;npm&lt;/code&gt; project like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing tricky here, we're initializing an npm project with default values (&lt;code&gt;-y&lt;/code&gt; flag). If you leave &lt;code&gt;-y&lt;/code&gt; flag you'll be answering questions interactively. Maybe you should try it :).&lt;/p&gt;

&lt;p&gt;Did you notice it? npm has created a file (&lt;code&gt;ls&lt;/code&gt; to see it) called:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  package.json
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;package.json&lt;/em&gt; is an important file in any Node.js project as it keeps all info (values) for the projet: author, licence, packages...&lt;/p&gt;

&lt;p&gt;If you want to see defaults info in &lt;em&gt;package.json&lt;/em&gt;, use this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm config list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you want to change defaults, use &lt;code&gt;npm set &amp;lt;key&amp;gt;&amp;lt;value&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;set &lt;/span&gt;init.author.name &lt;span class="s2"&gt;"&amp;lt;Your Name&amp;gt;"&lt;/span&gt;
npm &lt;span class="nb"&gt;set &lt;/span&gt;init.author.email &lt;span class="s2"&gt;"you@example.com"&lt;/span&gt;
npm &lt;span class="nb"&gt;set &lt;/span&gt;init.author.url &lt;span class="s2"&gt;"example.com"&lt;/span&gt;
npm &lt;span class="nb"&gt;set &lt;/span&gt;init.license &lt;span class="s2"&gt;"MIT"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's much to say about the &lt;em&gt;package.json&lt;/em&gt; file, but I think we can stop by there for now.&lt;/p&gt;

&lt;p&gt;Now is the time to discuss the file organization.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-file-structure"&gt;
  &lt;/a&gt;
  The file structure
&lt;/h1&gt;

&lt;p&gt;There are many file organizations out there. You should feel free to go with one that works fine for you. In this section, I'm showing you one of the ways I do.&lt;/p&gt;

&lt;p&gt;Make sure you're in our initial project folder (&lt;code&gt;node-server&lt;/code&gt;). From there create an &lt;code&gt;src&lt;/code&gt; folder and within it create &lt;code&gt;server.js&lt;/code&gt; and &lt;code&gt;app.js&lt;/code&gt; and &lt;code&gt;views&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;src &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;src
&lt;span class="nb"&gt;touch &lt;/span&gt;server.js app.js
&lt;span class="nb"&gt;mkdir &lt;/span&gt;views public
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I find it better to separate API declarations (&lt;code&gt;app.js&lt;/code&gt;) from network concerns (&lt;code&gt;server.js&lt;/code&gt;), but I see many friends using just one file either server.js or app.js. The &lt;code&gt;views&lt;/code&gt; folder is about the screen (html files or template like &lt;code&gt;pug&lt;/code&gt;). In &lt;code&gt;public&lt;/code&gt; folder I put images, styles and scripts.&lt;/p&gt;

&lt;p&gt;In final, my file structure looks like this&lt;/p&gt;

&lt;p&gt;Now, we can start coding.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bootstrapping-a-nodejs-server-with-expressjs"&gt;
  &lt;/a&gt;
  Bootstrapping a Node.js server with Express.js
&lt;/h1&gt;

&lt;p&gt;To create a Node.js server, it's easy and recommended to use a framework like Express.js. To add a JS package as a dependency in your project, you use this syntax: &lt;code&gt;npm install --save &amp;lt;package name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's install Express.js package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the installation is successful, you'll see a &lt;code&gt;node_modules&lt;/code&gt; folder created in your project directory. Also, in the &lt;em&gt;package.json&lt;/em&gt; under &lt;code&gt;dependencies&lt;/code&gt; property &lt;code&gt;express&lt;/code&gt; is added with its version (&lt;code&gt;"express": "^4.17.1"&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
If you're using &lt;strong&gt;git&lt;/strong&gt;, do add &lt;code&gt;node_modules&lt;/code&gt; in &lt;strong&gt;.gitignore&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can now make use of &lt;code&gt;express&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;app.js&lt;/code&gt; and add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing tricky here. We require &lt;code&gt;express&lt;/code&gt;, we create an instance of it so that we can use it in the project and at the end we export the file.&lt;/p&gt;

&lt;p&gt;We can now start the server in &lt;code&gt;server.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The server is listening on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;app.listen()&lt;/code&gt; function that binds and listens the connections on the specified host and port. To see if everything is OK we can start the server like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get this message on the console &lt;code&gt;The server is listening on port 4000&lt;/code&gt;. But if you go on &lt;code&gt;localhost:4000&lt;/code&gt; you'll get an error (&lt;code&gt;Cannot GET /&lt;/code&gt;) because we did not define any route yet. We can add a simple route like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="c1"&gt;// previous code here...&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For productivity purposes, we can add color to our console messages and a logger to get the log on the console. Install these packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;chalk morgan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once done, we can configure them like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// server.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chalk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The server is listning on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using &lt;code&gt;chalk&lt;/code&gt; green color here. You can use the one you want. Check the &lt;a href="https://www.npmjs.com/package/chalk"&gt;doc&lt;/a&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;morgan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tiny&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;morgan&lt;/code&gt; is a logger middleware. You can log anything you want on the console. You can log as much info as you want. Here I only want some basic info, so I use &lt;code&gt;tiny&lt;/code&gt;. Other options are &lt;code&gt;combined&lt;/code&gt;, &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;common&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;. Try them yourself and see the output or read the &lt;a href="https://www.npmjs.com/package/morgan"&gt;doc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Run the server (&lt;code&gt;node src/server.js&lt;/code&gt;) and see the result. On the browser you have &lt;code&gt;Hello&lt;/code&gt;, on the console 4000 is in green color and some other info printed there.&lt;/p&gt;

&lt;p&gt;Just one more thing before we jump to serving up an html file. Instead of typing everytime &lt;code&gt;node src/server.js&lt;/code&gt;, we can add it to our &lt;em&gt;package.json&lt;/em&gt; so that we can use the automated tools out there like &lt;code&gt;npm start&lt;/code&gt;. So, under &lt;code&gt;scripts&lt;/code&gt; property add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node src/server.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even better, add &lt;code&gt;src/server.js&lt;/code&gt; as the value of &lt;code&gt;main&lt;/code&gt; property and modify the "start" script like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node .&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To start the server, you simply have to do &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To finish this section, add the string "world" after after "Hello" and go to the browser to see the result. Do you see "world"? No, sorry :(. The reason is that, the server did not restart to serve up new modifications. Stop the server (&lt;code&gt;Ctrl + C&lt;/code&gt;) and restart it. Now you can see "Hello world" on the browser.&lt;/p&gt;

&lt;p&gt;To allow the automatic restart of the server, we can use &lt;code&gt;nodemon&lt;/code&gt; package. Install it and modify the "start" script as so: &lt;code&gt;"start": "nodemon ."&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Congratulations! Your server is up and listening fine on port &lt;code&gt;4000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now is the time to serve up HTML file.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#serving-files"&gt;
  &lt;/a&gt;
  Serving files
&lt;/h1&gt;

&lt;p&gt;In the &lt;code&gt;views&lt;/code&gt; forlder, create a file called &lt;code&gt;index.html&lt;/code&gt; and add this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--views/index.html--&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Node.js Starter&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;If you can see this text, your server is running properly.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;How can we see the content of the file above on the browser?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's learn how to:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deal-with-files-and-directories"&gt;
  &lt;/a&gt;
  Deal with files and directories
&lt;/h2&gt;

&lt;p&gt;To work with files and directories in a Node.js app, we need these elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;sendFile()&lt;/strong&gt;: an Express.js method available on the response object (&lt;strong&gt;res&lt;/strong&gt;) that is used to render a file &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;path&lt;/strong&gt;: a buit-in module that gives us all of the tools we need to handle cross-platform paths.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;__dirname&lt;/strong&gt;: a global object that return the absolute path of the directory containing the currently executing file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's put all into practice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path we want want send is this &lt;code&gt;views/index.html&lt;/code&gt;. We could just do this to define our path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;views/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above will just work fine if you are on a UNIX-like system. If you're developing in a Windows machine you'll encounter some problems as paths do not work the same on Windows OS and MacOSX or GNU/Linux. To avoid having troubles, we can let Node.js handle this for us. Welcome &lt;code&gt;path&lt;/code&gt; module!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I include the &lt;code&gt;path&lt;/code&gt; module in the project and use its &lt;code&gt;.join()&lt;/code&gt; method to join (concatenate) all paths into a string. The final path after I run the server will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/home/abelmbula/Documents/dev/educative-courses/node-starter/src/views/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h1&gt;

&lt;p&gt;In this lesson, we learned how to create a simple Node.js server with Express framework and how to render an html file. You can find the full code &lt;a href="https://github.com/Bam92/node-starter"&gt;here&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>node</category>
      <category>express</category>
      <category>javascript</category>
      <category>server</category>
    </item>
    <item>
      <title>The Accidental Public Speaker or How I Got Over My Fear of Public Speaking</title>
      <author>Alex Lakatos 🥑</author>
      <pubDate>Fri, 14 May 2021 10:34:23 +0000</pubDate>
      <link>https://dev.to/lakatos88/the-accidental-public-speaker-or-how-i-got-over-my-fear-of-public-speaking-48c9</link>
      <guid>https://dev.to/lakatos88/the-accidental-public-speaker-or-how-i-got-over-my-fear-of-public-speaking-48c9</guid>
      <description>&lt;p&gt;&lt;strong&gt;I’ve given over a hundred talks in the past few years&lt;/strong&gt;. Why? Because I think it’s perfectly OK for me to be terrified, but it’s not OK for me to stay that way. My biggest fear? Same as you, same as everybody else. I was afraid to speak in front of people. &lt;/p&gt;

&lt;p&gt;A hundred talks later, &lt;strong&gt;I’m still terrified every time I go on stage&lt;/strong&gt;. How did I ever get on stage, though? Well, here’s a little trip down memory lane, the series of unfortunate events that got me up on stage. I entirely blame &lt;a href="https://twitter.com/ioana_cis"&gt;Ioana&lt;/a&gt; and &lt;a href="https://twitter.com/pensacolla"&gt;Marcela&lt;/a&gt; for this btw, if you want the tl;dr. 😅&lt;/p&gt;

&lt;p&gt;Why did I do over a hundred talks, you might ask? Well, I do a bunch of things in this world. In my free time, I’m a Mozilla Tech Speaker. I also volunteer for the Mozilla Reps program, and I’m a Mentor in that program. Both of those programs are geared towards speaking to tech audiences and building communities. But I do like the idea of a paycheck and getting paid, so I work for Fidel as a Developer Relations Manager. And speaking in public is part of the job. I know, I must be a masochist. There’s no other explanation. 🤦&lt;/p&gt;

&lt;p&gt;With Mozilla or work, I’ve met a lot of great people, Developer Advocates, Community Builders, and Developers getting over their fear of speaking so they could share their knowledge. Because there is not a lot to do in the “Speakers Room” at conferences, and because misery loves company, the question I always asked was: “How did you get here”. Everybody I’ve asked has a different origin story. There’s no common denominator, really. I will tell you a bit of my story, how I started out.&lt;/p&gt;

&lt;p&gt;It all started about 10 years ago, there was an event called Open Source Open Mind in Romania, and I was working for Mozilla at the time. They asked our team to talk about Mozilla. Still, I was terrified of public speaking, so it definitely wasn’t going to be me. Ioana said she’d do it, but she was travelling to the US and didn’t have time to do the slides. I volunteered to do slides; that was the easy part; I didn’t actually have to go in front of 100 something people. So I did the slides. &lt;strong&gt;This was my first mistake&lt;/strong&gt;. 😅&lt;/p&gt;

&lt;p&gt;On the morning of the event, I was waiting at the airport for Ioana to land when she calls me to tell me her flight got delayed, so I should go to the event and stall; she’ll get there on the next flight. I get to the event. &lt;strong&gt;This was my second mistake&lt;/strong&gt;. Marcela, the organizer, is a friend and a really nice person; she kept pushing our time slot later and later in the day. It came to the last time slot of the day. Someone had to go up on stage.&lt;/p&gt;

&lt;p&gt;Marcela goes up on stage, looks for Ioana in the audience, but Ioana isn’t there yet. She then utters the words that sealed my fate: “And now, from Mozilla… Alex! Alex is going to come and speak about it!". It took me a while to process. I went up on stage, I put my hands in my pockets, I kept bouncing from one foot to the other, and it took a good minute until I started speaking. It was horrible. I couldn’t face my audience. I was looking halfway at my slides, halfway at the sidewall. &lt;/p&gt;

&lt;p&gt;Sadly, the experience is recorded and &lt;a href="https://www.youtube.com/watch?v=pMnwjpy_3J0&amp;amp;t=5s"&gt;still up on YouTube&lt;/a&gt;. I still use it as an example of what not to do when I try to help other people get over their fear of public speaking. Luckily, the experience isn’t in English, so you can’t really understand how bad it was unless you speak Romanian. 😅&lt;/p&gt;

&lt;p&gt;The problem was, &lt;strong&gt;once I started speaking, I couldn’t stop&lt;/strong&gt; —no questions from the audience, no nothing. After I finished my presentation, there was a Q&amp;amp;A part. For every question I got, I kept stepping further and further into the audience space. At a certain point, when the Q&amp;amp;A portion was finished, I was literally in the middle of the room.&lt;/p&gt;

&lt;p&gt;By the time I finished my talk, Ioana actually showed up at the conference. But the damage was already done. &lt;strong&gt;I had spoken in public without dying in the process&lt;/strong&gt;. After that first experience, I was horrified, nervous and &lt;strong&gt;vowed never to do it again&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Two weeks later, I was doing it again, speaking in front of 50 other people. That’s how I got started into all this. Turns out, peer pressure is a strong motivating force, especially if done live in front of hundreds of strangers. I’m being sarcastic here. Please don’t do this to your friends. I highly doubt it’s going to work a second time. You might call me the “Accidental Public Speaker”.&lt;/p&gt;

&lt;p&gt;The other hundred or so talks that followed, I have no excuse for those. 😅 In the meantime, I’ve learned a lot about things that help me get on stage and power through fear. I do some embarrassing things before I go on stage now. But they work for me, so I’ve &lt;strong&gt;learned to accept the process&lt;/strong&gt; and don’t fix it if it’s not broken.&lt;/p&gt;

&lt;p&gt;One of the things that work for me has to do with the “Psychology of Winning”. If I make myself believe I’ve “won” this talk before it even starts, there no pressure to hype my fear levels. It sort of takes the edge off enough for me to start. And once I start, and get through the first 2 minutes of it, practice and a lot of other things kick in, and it’s all the better from there.&lt;/p&gt;

&lt;p&gt;How do I trick myself into believing I “won” something before it happened? Well, this is where the embarrassing things happen. The “Psychology of Winning” says winning is a state of mind that correlates to physical reactions to winning. The reverse is also true to some extent, so mimicking those physical reactions will induce a mild “winning” mental state. You see where I’m going with this.&lt;/p&gt;

&lt;p&gt;Before my talks, I find a quiet corner at the conference or an empty bathroom stall 😳. And I do winning gestures, like pumping my chest forward, raising my fists in the air, jumping up and down, and screaming my lungs out. In case you’ve been at a conference with me before and you’ve “experienced” the ritual, I’d like to profusely apologize. 😅 &lt;strong&gt;I hope we can still be friends&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If this all inspired or convinced you to try speaking in front of people, &lt;a href="https://twitter.com/lakatos88"&gt;reach out on Twitter&lt;/a&gt;. I’m putting together a list of other things I tried to get over my fear of public speaking, some of which actually worked.&lt;/p&gt;

</description>
      <category>speaking</category>
      <category>devrel</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>How to Use Vim</title>
      <author>jones268</author>
      <pubDate>Fri, 14 May 2021 10:24:45 +0000</pubDate>
      <link>https://dev.to/jones268/how-to-use-vim-g1o</link>
      <guid>https://dev.to/jones268/how-to-use-vim-g1o</guid>
      <description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Vim_(text_editor)"&gt;Vim&lt;/a&gt; is a powerful text editor used by programmers and system administrators as a command line interface. Vim is widely used by Linux users. It is also available in Windows, Mac OS X and every other Unix system.&lt;/p&gt;

&lt;p&gt;The reason why it is that popular is that vim allows the programmer to code efficiently without leaving the editor. When coding, you don't need to use your mouse. This sounds simple, but this is exactly what any programmer wants from an editor.&lt;/p&gt;

&lt;p&gt;Most of its commands are robust and cryptic enough to be typed in blindly, which makes it a good choice for operating on remote servers without a GUI interface. But you can also use vim mode in your favorite IDE to increase productivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a16yyT1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5do19b8g8evk8jjd0w5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a16yyT1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5do19b8g8evk8jjd0w5.gif" alt="vim productivity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For beginners vim can be confusing, but it can boost your coding productivity. If you are new to vim, I recommend &lt;a href="https://vim.is/"&gt;these exercises&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-computer"&gt;
  &lt;/a&gt;
  Installation 💻
&lt;/h2&gt;

&lt;p&gt;The following is a very simple and quick installation of Vim on any Unix-like system. These instructions are geared towards systems with GNU coreutils, but it should work equally well on other systems with minor modifications.&lt;/p&gt;

&lt;p&gt;Most likely vim or vi is already installed on your comptuer. But if not, you want to install Vim, so run:&lt;/p&gt;

&lt;p&gt;Ubuntu:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OpenSUSE:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo zypper install vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fedora:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo yum install vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use-vim-fire"&gt;
  &lt;/a&gt;
  How to use vim 🔥
&lt;/h2&gt;

&lt;p&gt;Here are some basic commands that will help you navigate the text files using Vim. To enter commands press &lt;code&gt;ESC&lt;/code&gt; first, to write press &lt;code&gt;i&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Open file&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To open a file in Vim, you can type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vim filename.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Save file&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To save a file in Vim, you can type &lt;code&gt;:w&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Quit&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To quit from vim, you can type &lt;code&gt;:q&lt;/code&gt;. This command will also save the changes of the file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Open another file&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To open a new file, you can type &lt;code&gt;:e&lt;/code&gt; filename. This command will open the file and move the cursor to line number one of the file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TI-2ncnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izvqvbpn9szcflygymia.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TI-2ncnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izvqvbpn9szcflygymia.gif" alt="power"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commands-penguin"&gt;
  &lt;/a&gt;
  Commands 🐧
&lt;/h2&gt;

&lt;p&gt;Vim is a modal text editor. It's a tool with a long pedigree, and is to computer text editors what Microsoft Word is to word processors. It has two modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;command mode&lt;/li&gt;
&lt;li&gt;insert mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In command mode (&lt;code&gt;ESC&lt;/code&gt;), you'll type a series of commands to perform edits, such as typing text or searching the file system. &lt;/p&gt;

&lt;p&gt;In insert mode (&lt;code&gt;i&lt;/code&gt; or &lt;code&gt;Insert&lt;/code&gt;), you'll type text like you would in any other text editor. Vim has many features that make it popular, but its most distinctive feature is probably its modal design. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yAa7RCzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacvktwjelm9nz0r5cki.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yAa7RCzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lacvktwjelm9nz0r5cki.gif" alt="vim commands"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugins-whale2"&gt;
  &lt;/a&gt;
  Plugins 🐋
&lt;/h2&gt;

&lt;p&gt;Vim is also an extensible editor - a programmer can change the editor just by writing a new plugin. There are already hundreds of &lt;a href="https://github.com/topics/vim-plugins"&gt;plugins&lt;/a&gt; for vim. &lt;/p&gt;

&lt;p&gt;Some plugins make vim behave like an IDE (integrated development environment). Do note that IDEs often have vim emulation mode plugins themselves.&lt;/p&gt;

&lt;p&gt;Others provide syntax highlight for hundreds of programming languages. For example, there are more than 20 syntax-highlight plugins for javascript (including CoffeeScript, LESS, Sass, and Stylus).&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>vim</category>
      <category>linux</category>
    </item>
    <item>
      <title>Easily Test Mixins With Jest</title>
      <author>Deepjyoti Barman</author>
      <pubDate>Fri, 14 May 2021 10:23:16 +0000</pubDate>
      <link>https://dev.to/deepjyoti30/easily-test-mixins-with-jest-5e49</link>
      <guid>https://dev.to/deepjyoti30/easily-test-mixins-with-jest-5e49</guid>
      <description>&lt;p&gt;So recently I decided to add tests to one of my &lt;a href="https://github.com/deepjyoti30/ytmdl-web-v2"&gt;repos&lt;/a&gt;. Since I am new to JS to some extent, I started looking for what the best ways were to add tests to a frontend project. Well, as it turns out there are many libraries (duhh, it's JS afterall). However, there are various types of testing as well like &lt;strong&gt;Unit Testing&lt;/strong&gt; or &lt;strong&gt;Component Testing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This post is not about those tests though. After looking a bit for the best library to use with VueJS, I decided on using &lt;a href="https://jestjs.io/"&gt;jest&lt;/a&gt;. I am not an expert but it doesn't take an expert to know that Jest was built for &lt;strong&gt;ReactJS&lt;/strong&gt;. Well, for starter, Jest is built by Facebook and &lt;code&gt;has a great integration with React. js&lt;/code&gt;. So yeah, Jest might not be the first choice of Vue users.&lt;/p&gt;

&lt;p&gt;I loved the fact that it was so easy to setup and as I started writing tests I understood that it's actually very easy to use as well. So all in all, I ended up using Jest as the testing framework for my project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-mixins"&gt;
  &lt;/a&gt;
  Testing Mixins
&lt;/h2&gt;

&lt;p&gt;After I had written tests for most of my components, I finally decided to write tests for my mixins. This is when I came to a stop. I started looking at the docs in order to know what the best way to test mixins would be. However, there wasn't much documentation regarding that.&lt;/p&gt;

&lt;p&gt;This is when I realized something.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-mixins"&gt;
  &lt;/a&gt;
  What are mixins?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A mixin is a class containing methods that can be used by other classes without a need to inherit from it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As &lt;a href="https://en.wikipedia.org/wiki/Mixin"&gt;stated on Wikipedia&lt;/a&gt;, &lt;em&gt;a mixin is a class containing methods that can be used by other classes without a need to inherit from it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In case you are not familiar to mixins (why are you even reading this article about writing tests for mixins then?), mixins are functions that developers can &lt;em&gt;inherit&lt;/em&gt; in some other code and use them.&lt;/p&gt;

&lt;p&gt;This also means that &lt;strong&gt;mixins cannot be used independently&lt;/strong&gt;. What I mean is, let's say you have a mixin defined in VueJS. Now you want to use this mixin. You can easily import it and use. However, in your source code is there any use of the mixin without it getting imported? No.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mock-component"&gt;
  &lt;/a&gt;
  Mock Component
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We will create a mock component, a bare bones component basically, to inherit the mixin to that and test it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that our doubt about mixins is out of the way. It is clear, we will &lt;strong&gt;need&lt;/strong&gt; a component that can import the Mixin in order to test it. So what should we do?&lt;/p&gt;

&lt;p&gt;We can just make a simple Mock Component. In my case, I went with a simple Mock Component written in Vue in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Return a component to be used as dummy in order
 * to mock things like mixins.
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MockComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have a component, we can easily use it to use our mixins and use it accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-mock-component-with-mixin"&gt;
  &lt;/a&gt;
  Using mock component with Mixin
&lt;/h2&gt;

&lt;p&gt;Let's say we have a mixin with a function &lt;code&gt;getBoolFromValue()&lt;/code&gt;, we can easily write a jest test for that now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test mixin function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallowMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MockComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;mixins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mixinName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should return proper value from bool&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getBoolFromValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeTruthy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-not-use-a-component-from-the-code"&gt;
  &lt;/a&gt;
  Why not use a component from the code?
&lt;/h2&gt;

&lt;p&gt;Well, using a component already defined in the code would work too. However, why add all the bulk while testing a mixin. We want the mixin to be tested as easily as possible. As well, adding a component might add some bulky imports etc, so it is way easier to just keep a &lt;code&gt;MockComponent&lt;/code&gt; that is just basically an empty template to test Mixins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/deepjyoti30/ytmdl-web-v2/blob/master/tests/__tests__/mixins.settings.test.js"&gt;You can check the tests on my repo as well&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-post-was-initally-posted-on-my-personal-blog"&gt;
  &lt;/a&gt;
  This post was initally posted on my &lt;a href="https://blog.deepjyoti30.dev/mixins-test-jest"&gt;personal blog&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>vue</category>
      <category>mixin</category>
    </item>
    <item>
      <title>I think there is too much to learn in programming</title>
      <author>91sameer</author>
      <pubDate>Fri, 14 May 2021 10:01:33 +0000</pubDate>
      <link>https://dev.to/91sameer/i-think-there-is-too-much-to-learn-in-programming-16l6</link>
      <guid>https://dev.to/91sameer/i-think-there-is-too-much-to-learn-in-programming-16l6</guid>
      <description>&lt;p&gt;I am confused there is soo many things to learn. I don't think I can learn enough to become a good programmer&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>🚀 Flutter CI/CD using Git Tags in 5 minutes</title>
      <author>Julien</author>
      <pubDate>Fri, 14 May 2021 09:50:20 +0000</pubDate>
      <link>https://dev.to/monisnap/flutter-ci-cd-using-git-tags-in-5-minutes-5bb1</link>
      <guid>https://dev.to/monisnap/flutter-ci-cd-using-git-tags-in-5-minutes-5bb1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-you-need"&gt;What you will need&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#what-you-do"&gt;What you will do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1"&gt;Step 1: Deployment script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2"&gt;Step 2: Git push with tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-need"&gt;
  &lt;/a&gt;
  What you will need &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;📲 A Flutter app (obviously)&lt;/li&gt;
&lt;li&gt;📦 A Github, Gitlab or Bitbucket account&lt;/li&gt;
&lt;li&gt;✨ A &lt;a href="https://codemagic.io/start/"&gt;Codemagic&lt;/a&gt; account (linked to your app repository)&lt;/li&gt;
&lt;li&gt;😁 Your best smile&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-do"&gt;
  &lt;/a&gt;
  What you will do &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcJWMguN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a378jsuikoj6q03ilil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcJWMguN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a378jsuikoj6q03ilil.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You will create a git tag containing your new app version, then push it to your repository. It will automatically trigger a Codemagic build, and release your app on the Play Store 🚀&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-deployment-script-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Step 1: Create a deployment script 🛠 &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Below you'll find code to configure the CI/CD. You just have to add it to the root of your repository in a file named &lt;strong&gt;codemagic.yaml&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;I've used a script instead of the workflow editor (Codemagic GUI) for multiple reasons (versioned, faster...) but mainly because the version handling isn't possible using the editor.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# codemagic.yaml&lt;/span&gt;

&lt;span class="c1"&gt;# ... &amp;lt;- Here you will include the "reusable" parts that are described afterward&lt;/span&gt;

&lt;span class="na"&gt;workflows&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;play-store&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Play Store Release&lt;/span&gt;
    &lt;span class="na"&gt;max_build_duration&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
    &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*caching&lt;/span&gt;

    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;flutter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*flutter_version&lt;/span&gt;
      &lt;span class="na"&gt;xcode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
      &lt;span class="na"&gt;cocoapods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
      &lt;span class="na"&gt;vars&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*gcp_service_credentials&lt;/span&gt;
        &lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*keystore_release&lt;/span&gt;

    &lt;span class="c1"&gt;# ! THE IMPORTANT PART IS HERE !&lt;/span&gt;
    &lt;span class="na"&gt;triggering&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;tag&lt;/span&gt;
      &lt;span class="na"&gt;branch_patterns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;master"&lt;/span&gt;
          &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;tag_patterns&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
          &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

    &lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*android_key_properties_setup&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_android_properties_setup&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_pub_get&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;*flutter_build_play_store_release&lt;/span&gt;

    &lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;      
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;build/**/outputs/**/*.aab&lt;/span&gt;

    &lt;span class="na"&gt;publishing&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;google_play&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;*play_console_credentials&lt;/span&gt;
        &lt;span class="na"&gt;track&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alpha&lt;/span&gt;
        &lt;span class="na"&gt;in_app_update_priority&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next are the reusable parts, to be clean and not repeat yourself ✨. Replace the encrypted variables using your credentials and the &lt;a href="https://docs.codemagic.io/building/encrypting/"&gt;Codemagic encrypting tool&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# codemagic.yaml&lt;/span&gt;

&lt;span class="na"&gt;reusable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;flutter_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_version&lt;/span&gt; &lt;span class="s"&gt;1.22.6&lt;/span&gt;

  &lt;span class="na"&gt;environment-variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;keystore_release&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEYSTORE_PATH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/tmp/keystore.keystore&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEYSTORE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEYSTORE_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEY_PASSWORD&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;
      &lt;span class="na"&gt;FCI_KEY_ALIAS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;gcp_service_credentials&lt;/span&gt;
      &lt;span class="na"&gt;GCLOUD_SERVICE_ACCOUNT_CREDENTIALS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;      

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;play_console_credentials&lt;/span&gt; &lt;span class="s"&gt;Encrypted(...)&lt;/span&gt;

  &lt;span class="na"&gt;scripts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;android_key_properties_setup&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Android - Setup key.properties&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;echo $FCI_KEYSTORE | base64 --decode &amp;gt; $FCI_KEYSTORE_PATH&lt;/span&gt;
        &lt;span class="s"&gt;cat &amp;gt;&amp;gt; "$FCI_BUILD_DIR/android/key.properties" &amp;lt;&amp;lt;EOF&lt;/span&gt;
        &lt;span class="s"&gt;storePassword=$FCI_KEYSTORE_PASSWORD&lt;/span&gt;
        &lt;span class="s"&gt;keyPassword=$FCI_KEY_PASSWORD&lt;/span&gt;
        &lt;span class="s"&gt;keyAlias=$FCI_KEY_ALIAS&lt;/span&gt;
        &lt;span class="s"&gt;storeFile=/tmp/keystore.keystore&lt;/span&gt;
        &lt;span class="s"&gt;EOF&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_android_properties_setup&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flutter x Android - Setup local.properties&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "flutter.sdk=$HOME/programs/flutter" &amp;gt; "$FCI_BUILD_DIR/android/local.properties"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_pub_get&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flutter - Get dependencies&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;flutter packages pub get&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_test&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Flutter - Run tests&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;flutter test --machine&lt;/span&gt;

    &lt;span class="c1"&gt;# ! THE IMPORTANT PART IS HERE !&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;flutter_build_play_store_release&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build AAB for Play Store release&lt;/span&gt;
      &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;GCLOUD_SERVICE_ACCOUNT_CREDENTIALS=$(echo $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS | base64 --decode)&lt;/span&gt;
        &lt;span class="s"&gt;NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name 'com.company.example') + 1))&lt;/span&gt;
        &lt;span class="s"&gt;NEW_VERSION_NAME=$(git describe --tags)&lt;/span&gt;

        &lt;span class="s"&gt;echo $NEW_VERSION_NAME&lt;/span&gt;
        &lt;span class="s"&gt;echo $NEW_BUILD_NUMBER&lt;/span&gt;

        &lt;span class="s"&gt;flutter build appbundle --build-name=$NEW_VERSION_NAME --build-number=$NEW_BUILD_NUMBER  --obfuscate --split-debug-info=$FCI_BUILD_DIR/debug_files&lt;/span&gt;

  &lt;span class="na"&gt;caching&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nl"&gt;&amp;amp;caching&lt;/span&gt;
    &lt;span class="na"&gt;cache_paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$HOME/.gradle/caches&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$FLUTTER_ROOT/.pub-cache&lt;/span&gt;

&lt;span class="c1"&gt;# ... &amp;lt;- The workflow part described before should be here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the previous script, the &lt;strong&gt;"flutter_build_play_store_release"&lt;/strong&gt; script handle the versioning :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Version&lt;/strong&gt; is retrieved from the tag.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build number&lt;/strong&gt; is retrieved from the play console (fetching the highest build number, and incrementing it for this release).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Don't forget to replace &lt;strong&gt;com.company.example&lt;/strong&gt; with your app package name&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can now push this script onto your repository. It should then be visible from Codemagic and you should be able to trigger it manually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-git-tag-gt-push-it"&gt;
  &lt;/a&gt;
  Step 2: Add git tag 🔖 -&amp;gt; push it 🚀 &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Creating a git tag is very easy. We will use 1.0.0 as our version, and tag.&lt;br&gt;
You just have to run the following commands :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git tag &lt;span class="nt"&gt;-a&lt;/span&gt; 1.0.0 &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Release 1.0.0"&lt;/span&gt;
git push origin 1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! You should see a build running in Codemagic 🏄‍♂️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;You can add as many workflows as you want using Codemagic! You can use the GUI editor, and then extract to code to have more control over the code. &lt;/p&gt;

&lt;p&gt;Here we deploy on Alpha, so you can change to Production when you feel ready. And then, you can add an iOS workflow with mostly the same code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leave a comment, a like or even a unicorn 🦄 if you've achieved this tutorial! 🚀🔖&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>git</category>
      <category>codemagic</category>
      <category>android</category>
    </item>
  </channel>
</rss>
