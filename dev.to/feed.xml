<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How do you build your static site?</title>
      <author>Glenn Tippett</author>
      <pubDate>Wed, 14 Apr 2021 20:54:51 +0000</pubDate>
      <link>https://dev.to/glenntippett/how-do-you-build-your-static-site-58lc</link>
      <guid>https://dev.to/glenntippett/how-do-you-build-your-static-site-58lc</guid>
      <description>&lt;p&gt;Hey all, &lt;/p&gt;

&lt;p&gt;I am curious to hear how other people build their static sites. &lt;/p&gt;

&lt;p&gt;What I mean is, say you need to build a basic landing page - with maybe only 3 pages max. &lt;br&gt;
The site has the usual markup, styling maybe some JS for effects. &lt;/p&gt;

&lt;p&gt;Are you always reaching for a framework or library such as React or Angular? &lt;br&gt;
Or are you just creating some .html, .css and .js files and deploying that folder to a host? &lt;/p&gt;

&lt;p&gt;Curious to hear how others approach this.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Documentando minha API #1 ‚Äî API Blueprint + Aglio</title>
      <author>Allan Ramos</author>
      <pubDate>Wed, 14 Apr 2021 20:46:13 +0000</pubDate>
      <link>https://dev.to/allangrds/documentando-minha-api-1-api-blueprint-aglio-48h2</link>
      <guid>https://dev.to/allangrds/documentando-minha-api-1-api-blueprint-aglio-48h2</guid>
      <description>&lt;p&gt;Mexer num projeto cuja API n√£o tem documenta√ß√£o √© um sofrimento‚Ä¶ ter que vasculhar no c√≥digo do projetos os endpoints e entender o que √© poss√≠vel fazer com cada um deles √© um trabalho desnecess√°rio, e seria resolvido de forma simples com uma bendita documenta√ß√£o :(.&lt;/p&gt;

&lt;p&gt;J√° diz a frase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Uma API documentada √© uma API feliz&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eis que chega a minha hora de fazer um projeto novo, e n√£o posso cair na mesma mancada de deixar o c√≥digo ser a fonte de entendimento da API.&lt;/p&gt;

&lt;p&gt;Como especifica√ß√£o para a constru√ß√£o dessa documenta√ß√£o, optei pela &lt;strong&gt;&lt;a href="https://apiblueprint.org/"&gt;API Blueprint&lt;/a&gt;.&lt;/strong&gt; Criada pela &lt;a href="https://apiary.io/"&gt;Apiary&lt;/a&gt;(Oracle), tem a vantagem de ser escrita utilizando Markdown, facilitando a leitura.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#come%C3%A7ando"&gt;
  &lt;/a&gt;
  Come√ßando
&lt;/h2&gt;

&lt;p&gt;Seguindo o padr√£o da API Blueprint, podemos escrever nossa documenta√ß√£o em &lt;strong&gt;Markdown&lt;/strong&gt; ou com a extens√£o &lt;strong&gt;.apib&lt;/strong&gt;. Optei pela segunda, j√° que √© poss√≠vel encontrar extens√µes para meu editor de texto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;FORMAT: 1A
HOST: http://api.meninogaimeiro.com.br

&lt;span class="gh"&gt;# API do Menino Gaimeiro&lt;/span&gt;

Uma API pra voc√™ gerenciar a sua carteirinha xD.

&lt;span class="gh"&gt;# Group Games&lt;/span&gt;

&lt;span class="gu"&gt;## Games [/games]&lt;/span&gt;

&lt;span class="gu"&gt;### Criar games [POST]&lt;/span&gt;
&lt;span class="p"&gt;
+&lt;/span&gt; Request Criar um game
&lt;span class="p"&gt;    +&lt;/span&gt; Headers&lt;span class="sb"&gt;

            Accept: application/json
            Content-Type: application/json

    + Attributes

        + name (required)

&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; Response 201 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes&lt;span class="sb"&gt;

        + id: 1 (number) - ID do game
        + name: Desperados 3 (string) - Nome do game

&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; Response 400 (application/json)
&lt;span class="p"&gt;    +&lt;/span&gt; Attributes&lt;span class="sb"&gt;

        + status_code: 400 (number) - Status code da Request
        + errors (array) - Objeto de erros
            + (object)
                + parameter_name: name (string) - Nome do par√¢metro
                + message: field is required (string) - Tipo do erro
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O exemplo acima faz o seguinte:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seta a url da api para&lt;a href="http://api.meninogaimeiro.com.br%3B/"&gt;http://api.meninogaimeiro.com.br;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Cria um grupo de rotas chamada*games*;&lt;/li&gt;
&lt;li&gt;Cria um grupo de rotas*Games /games.&lt;em&gt;Nesse meu exemplo ficou repetido, mas poderia existir junto com essa rota o*Platforms /games/platforms&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Crio uma request informando seus headers e seus atributos;&lt;/li&gt;
&lt;li&gt;Crio uma response informando seus status codes e seus payloads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para ver como essa documenta√ß√£o √© renderizada usando o Apiary,&lt;a href="https://gamer1.docs.apiary.io/"&gt;clique aqui&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gerando-a-documenta%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Gerando a documenta√ß√£o
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;API Blueprint&lt;/strong&gt; √© apenas uma especifica√ß√£o, n√£o uma tecnologia. Para gerar uma documenta√ß√£o em meu projeto Node, acabei por utilizar a engine &lt;a href="https://github.com/danielgtaylor/aglio"&gt;Aglio&lt;/a&gt;, que ser√° respons√°vel por interpretar os arquivos nesse formato e renderizar a documenta√ß√£o formatada.&lt;/p&gt;

&lt;p&gt;Para isso, fa√ßa:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;npm install -g aglio&lt;/li&gt;
&lt;li&gt;aglio -i api.apib ‚Äî theme-template triple -s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esse √∫ltimo comando ler√° o arquivo*&lt;em&gt;api.apib&lt;/em&gt;*, gerando um template de 3 colunas em um servidor.&lt;/p&gt;

&lt;p&gt;Eis que o resultado ser√° algo como mostrado na imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cDUYjGYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9pgybf83klc0lvppnyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cDUYjGYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9pgybf83klc0lvppnyr.png" alt="alt text"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Pronto! Com isso j√° posso dar continuidade na documenta√ß√£o da API :).&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Writing blogs on DEV - A complete guide! üöÄ</title>
      <author>Fahad Imran</author>
      <pubDate>Wed, 14 Apr 2021 20:40:23 +0000</pubDate>
      <link>https://dev.to/fahadimran28/writing-blogs-on-dev-a-complete-guide-3hk</link>
      <guid>https://dev.to/fahadimran28/writing-blogs-on-dev-a-complete-guide-3hk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@anhdung?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Dung Anh&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/writing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;New to DEV? Not sure where to get started? &lt;strong&gt;No worries!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog, I will share &lt;strong&gt;tips&lt;/strong&gt;, &lt;strong&gt;tricks&lt;/strong&gt;, and &lt;strong&gt;resources&lt;/strong&gt; that you can use to write amazing articles in no time. This will apply whether you have never written a blog on DEV or you're just looking to improve your workflow.&lt;/p&gt;

&lt;p&gt;I will cover quite a lot of information in this post so it might be a bit lengthy, but I'll try my best to not bore you.&lt;/p&gt;

&lt;p&gt;So, take a deep breath, grab some coffee and let's get started! ‚òï&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5zf2M4HgjjWszLd4a5/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5zf2M4HgjjWszLd4a5/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choosing-a-title-for-your-blog"&gt;
  &lt;/a&gt;
  Choosing a title for your blog üí°
&lt;/h3&gt;

&lt;p&gt;The first thing you have to choose is the &lt;strong&gt;blog title&lt;/strong&gt;. It is important to have a title that describes what your blog is about. A good title can be the difference between people viewing your blog or skipping over it. Think of your blog title as a one-line summary of your blog.&lt;/p&gt;

&lt;p&gt;What I try to do is find &lt;strong&gt;keywords&lt;/strong&gt; that describe my blog content and include them in the blog title. This ensures that the title is relevant and to the point.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tags-tags-tags"&gt;
  &lt;/a&gt;
  Tags, Tags, Tags... üîñ
&lt;/h3&gt;

&lt;p&gt;On DEV, you can add up to &lt;strong&gt;4&lt;/strong&gt; tags on your blogs to help people find them. It is better to use existing tags whenever possible instead of making your own. You can view the existing tags on DEV &lt;a href="https://dev.to/tags"&gt;here&lt;/a&gt;. It must be noted that some tags have special guidelines that your blog must fulfill before you can include them in your blogs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cover-images-are-important"&gt;
  &lt;/a&gt;
  Cover images are important! üé®
&lt;/h3&gt;

&lt;p&gt;Cover images make your blog &lt;strong&gt;standout&lt;/strong&gt;. Blogs with cover images are more likely to be featured in the home feed of the website. Therefore, you must include one in your articles. For finding cover images you can use sites like &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;, and &lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt; or if you want to design one from scratch, you can try &lt;a href="https://www.canva.com/"&gt;Canva&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All these sources have worked great for me so far. Just try to keep your cover image relevant and fun and you'll be fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; If you want to add a GIF as a cover image (like in this blog), just copy the GIF link and add it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
cover_image: your_gif_link
---
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#you-have-to-learn-markdown"&gt;
  &lt;/a&gt;
  You HAVE to learn markdown! ‚ö°
&lt;/h3&gt;

&lt;p&gt;Before writing your blog you must be familiar with the &lt;strong&gt;basics of markdown&lt;/strong&gt; as you'll be using it to write your blogs on DEV. Markdown allows you to format your text, images, lists, etc. very easily. It is super easy to learn too. You can find dozens of cheat sheets floating around the web. I would recommend you give &lt;a href="https://www.markdownguide.org/cheat-sheet/"&gt;this one&lt;/a&gt; a look to get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choose-where-to-write-drafts-for-your-blogs"&gt;
  &lt;/a&gt;
  Choose where to write drafts for your blogs üìú
&lt;/h3&gt;

&lt;p&gt;Once you've got the hang of markdown, the next thing is to write the draft for your blog. Although you can use the built-in editor that DEV provides, most people prefer to write their blogs on &lt;a href="https://docs.google.com/"&gt;Google Docs&lt;/a&gt; or &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;. You can also use dedicated note-taking apps like &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; which supports markdown as well.&lt;/p&gt;

&lt;p&gt;Whatever medium you use, I would highly recommend that you install a browser extension called &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt;. It is super helpful and will correct most of your grammatical and punctuation errors if not all of them. If you prefer VS Code, use an extension called &lt;a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"&gt;Markdown All in One&lt;/a&gt; as it allows you to preview markdown files and provides various editing options as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-add-youtube-videos"&gt;
  &lt;/a&gt;
  Let's add YouTube videos! üé•
&lt;/h3&gt;

&lt;p&gt;If you want to embed &lt;strong&gt;YouTube videos&lt;/strong&gt; in your blogs, you can easily do so using Liquid tags that DEV provides. To embed videos, copy the video id from the URL and add it to the blog as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% youtube your_video_id %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to learn more about Liquid tags check out the &lt;a href="https://dev.to/p/editor_guide"&gt;editor guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-series"&gt;
  &lt;/a&gt;
  Making a series! üìå
&lt;/h3&gt;

&lt;p&gt;For topics that require more explaining, you can also &lt;strong&gt;make a series&lt;/strong&gt; on DEV. Series are great for topics that have different parts. Instead of cramming all the information in a single article, you can split it up into multiple smaller posts.&lt;/p&gt;

&lt;p&gt;In order to make a series, just give it a name and your blog will automatically be added to that series. Dev will also show a series list at the top of the blogs in that series for navigation (excellent üôå).&lt;/p&gt;

&lt;p&gt;It must be noted that the series will only appear if it has at least &lt;strong&gt;2&lt;/strong&gt; blog posts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dos-and-donts-of-writing"&gt;
  &lt;/a&gt;
  Dos and Dont's of writing! üö®
&lt;/h3&gt;

&lt;p&gt;While writing your blogs on DEV, here are some general writing tips to improve the flow of your blog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Use short and simple sentences&lt;/strong&gt; as to not overwhelm the reader.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Break up your content&lt;/strong&gt; into smaller paragraphs and add sub-headings to them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Use relevant images&lt;/strong&gt; in your blogs to explain a topic and make the blog more engaging (And Yes, memes count too! üòÖ).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Add code snippets&lt;/strong&gt; to your blogs to explain programming concepts.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Include useful links and references&lt;/strong&gt; to provide additional information in your articles.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't spam your social media&lt;/strong&gt; links in your blog. No one wants to follow such a person. Try to provide value to others. If you want, just plug one or two social links at the end of the blog post.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#simple-gtgt-complex"&gt;
  &lt;/a&gt;
  Simple &amp;gt;&amp;gt; Complex üòµ
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"Genius is making complex ideas simple, not making simple ideas complex" &lt;strong&gt;~ Albert Einstein&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;KISS&lt;/strong&gt; (Keep It Simple Stupid) principle applies here as well. Keep your blog posts short and simple. No one has the time to read blogs that look like research papers. I am guilty of this habit as well. But you should keep your blogs concise and limited to &lt;strong&gt;5-7 min max&lt;/strong&gt; in most cases (although there can be some exceptions).&lt;/p&gt;

&lt;p&gt;Additionally, try to explain the concept in the easiest way possible so people with little to no background knowledge can also understand the concept without pulling their hair out. üò´&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canonical-urls-are-no-joke"&gt;
  &lt;/a&gt;
  Canonical URLs are no joke! üîó
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;If you're just writing blogs on DEV and not republishing from elsewhere, feel free to skip this section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, if you're republishing your blogs from elsewhere whether it be Medium, Hashnode, or your personal website, &lt;strong&gt;read carefully&lt;/strong&gt;. It is important that you add a &lt;strong&gt;Canonical URL&lt;/strong&gt; to your articles published elsewhere on the web.&lt;/p&gt;

&lt;p&gt;A Canonical URL tells the search engines like &lt;strong&gt;Google&lt;/strong&gt;, where the original source of the content/article is. If you don't add a canonical article to your blog, the search engine will consider it as duplicate content. And there is a high chance that the republished version on DEV will &lt;strong&gt;rank higher&lt;/strong&gt; on search results as compared to the one originally published on your personal blog. Consequently, you'll get less traffic on your website which is no fun. üò•&lt;/p&gt;

&lt;p&gt;Thankfully, DEV allows you to easily add a Canonical URL to your blog posts and also displays an &lt;strong&gt;" Originally published on XYZ.com "&lt;/strong&gt; message at the top.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lq2fzyd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mbrf0cudl0tppkiesb2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lq2fzyd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mbrf0cudl0tppkiesb2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about republishing and Canonical URLs check out this &lt;a href="https://medium.com/@edithyeghiazaryan/republish-your-content-using-a-canonical-tag-3eb47b68ee2f"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finallypublishing-your-amazing-work"&gt;
  &lt;/a&gt;
  Finally...Publishing your amazing work! üöÄ
&lt;/h3&gt;

&lt;p&gt;After you've finished writing the blog post, you can &lt;strong&gt;save the draft&lt;/strong&gt; of the post. This will allow you to share the URL of the article with your friends, family, editor, etc. for proofreading.&lt;/p&gt;

&lt;p&gt;Once you're satisfied with the final result, you can then &lt;strong&gt;publish&lt;/strong&gt; it for everyone to see. The stats on your blog (view, likes, and comments) can be viewed in the &lt;strong&gt;Profile Dashboard&lt;/strong&gt;. You can edit the blog anytime after publishing it, so don't worry if you find any mistake in your blog. Just edit it out! üòâ&lt;/p&gt;

&lt;p&gt;Congratulations! You've published your first blog on DEV. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Srf1W4nnQIb0k/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Srf1W4nnQIb0k/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy, wasn't it?&lt;/strong&gt; After you've done this process a couple of times, it'll become easier and you'll get the hang of it, trust me.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sharing-your-blogs-on-social-media"&gt;
  &lt;/a&gt;
  Sharing your blogs on social media! üêπ
&lt;/h3&gt;

&lt;p&gt;After publishing your article on DEV, you can then share the link on social media accounts like Twitter, Facebook, and Linkedin, etc. The official Twitter account of DEV &lt;a href="https://twitter.com/ThePracticalDev?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor"&gt;@ThePracticalDev&lt;/a&gt; also shares blog posts that are good and get featured. This is a very nice gesture, as you can get a &lt;strong&gt;far greater reach&lt;/strong&gt; in this way, especially if you're just starting out and don't have a huge audience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's all folks! üôè
&lt;/h2&gt;

&lt;p&gt;If you have any questions feel free to ask me in the comments üëáand I will do my best to answer them. Feel free to read some of my other blogs on DEV &lt;a class="mentioned-user" href="https://dev.to/fahadimran28"&gt;@fahadimran28&lt;/a&gt;
. Till then, thanks for reading, and happy coding! üòÑ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/HJ8NsNtn9VswE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/HJ8NsNtn9VswE/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-enjoyed-reading-this-article-please-give-it-a-or"&gt;
  &lt;/a&gt;
  If you enjoyed reading this article, please give it a ‚ù§Ô∏è, ü¶Ñ, or üîñ
&lt;/h4&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>writing</category>
    </item>
    <item>
      <title>10 useful VS Code shortcuts you should know  ()</title>
      <author>Mariana Simon Paixao</author>
      <pubDate>Wed, 14 Apr 2021 20:36:39 +0000</pubDate>
      <link>https://dev.to/simonpaix/10-useful-vs-code-shortcuts-you-should-know-42m</link>
      <guid>https://dev.to/simonpaix/10-useful-vs-code-shortcuts-you-should-know-42m</guid>
      <description>&lt;p&gt;This is a curated list of the shortcuts you should learn as soon as possible. I really wish I knew them when I started coding. It would have saved me hours of manual typing.  &lt;/p&gt;

&lt;p&gt;Default shortcuts for Linux. Mac and Windows shortcuts are displayed below if different. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ctrlp-displays-the-search-bar-to-search-for-files"&gt;
  &lt;/a&gt;
  1. Ctrl+P : Displays the search bar to search for files
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + P)&lt;br&gt;
You will be navigate between files the entire time. You can type the file name and open it by pressing enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---efJ3L1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/QuickOpen.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---efJ3L1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/QuickOpen.gif%3Fraw%3Dtrue" alt="search bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-ctrl-shift-p-displays-the-command-pallete"&gt;
  &lt;/a&gt;
  2. Ctrl + Shift + P: Displays the command pallete
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + Shift + P)&lt;br&gt;
Displays the command pallete where you can search for an action&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YTUQi0k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/OpenCommandPalatte.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YTUQi0k3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/OpenCommandPalatte.gif%3Fraw%3Dtrue" alt="command palete"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-crtl-b-toggle-the-sidebar"&gt;
  &lt;/a&gt;
  3. Crtl + B : Toggle the sidebar
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + B)&lt;br&gt;
Show or hide the side bar where you can navigate through the explorer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xDLIelRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/toggle_side_bar.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xDLIelRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/toggle_side_bar.gif%3Fraw%3Dtrue" alt="toggle sidebar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-ctrlshifte-move-to-explorer-window"&gt;
  &lt;/a&gt;
  4. Ctrl+Shift+E : Move to Explorer window
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + Shift + E)&lt;br&gt;
Move to Explorer window where you have your file tree and can navigate using the arrow keys.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y4W_Xbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/ctrl%2520shift%2520E.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y4W_Xbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/ctrl%2520shift%2520E.gif%3Fraw%3Dtrue" alt="move to explorer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-ctrl-shift-m-quickly-shows-errors-and-warnings"&gt;
  &lt;/a&gt;
  5. Ctrl + Shift + M : Quickly shows errors and warnings
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + Shift + M)&lt;br&gt;
Everybody likes bug-free code. Shows up the problems panel where you can see identified errors and warnings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yys4DO3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/Errors_Warnings.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yys4DO3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/Errors_Warnings.gif%3Fraw%3Dtrue" alt="errors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-ctrl-shift-l-multi-cursor-selection"&gt;
  &lt;/a&gt;
  6. Ctrl + Shift + L: Multi cursor selection
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd + Shift + L)&lt;br&gt;
Add additional cursors to edit all occurrences of the current selection. Usually less error-prone than doing search and replace all.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7LhlnRyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/add_cursor_current_selection.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7LhlnRyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/add_cursor_current_selection.gif%3Fraw%3Dtrue" alt="multiselect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-ctrl-d-one-by-one-selection"&gt;
  &lt;/a&gt;
  7. Ctrl + D : One by one selection
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd+D)&lt;br&gt;
Similar to the previous one, but use Ctrl + D if you want to add the occurrences of the current selection one by one. Each time you press the key combination it adds a new occurrence to the selection.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ed0pzjX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/add_cursor_current_selection_one_by_one.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ed0pzjX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/add_cursor_current_selection_one_by_one.gif%3Fraw%3Dtrue" alt="one-select"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-ctrl-toggle-line-comment"&gt;
  &lt;/a&gt;
  8.  Ctrl+/ : Toggle line comment
&lt;/h2&gt;

&lt;p&gt;(Mac: Cmd+/)&lt;br&gt;
Toggle between commented and uncommented line behavior.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDSUn6tE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/toggle.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDSUn6tE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/toggle.gif%3Fraw%3Dtrue" alt="toggle comment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-ctrl-shift-i-formats-the-entire-file"&gt;
  &lt;/a&gt;
  9. Ctrl + Shift + I: Formats the entire file
&lt;/h2&gt;

&lt;p&gt;(Mac: Shift + Option + F, Windows: Windows Shift + Alt + F)&lt;br&gt;
Formats the entire active file or prompts you to install a Formatter extension. I use Prettier extension to format JS code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--19micMiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/code_formatting.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--19micMiH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/code_formatting.gif%3Fraw%3Dtrue" alt="format"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-alt-up-or-alt-down-move-line"&gt;
  &lt;/a&gt;
  10.  Alt + Up or Alt + Down: Move line
&lt;/h2&gt;

&lt;p&gt;(Mac: Opt+Down or Opt+Up)&lt;br&gt;
Pretty straightforward. Move line up and down.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y4W_Xbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/ctrl%2520shift%2520E.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Y4W_Xbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/ctrl%2520shift%2520E.gif%3Fraw%3Dtrue" alt="move"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-wrap-with-abbreviation"&gt;
  &lt;/a&gt;
  Bonus: Wrap with Abbreviation.
&lt;/h2&gt;

&lt;p&gt;Helps you add that missing div tag to an HTML block for example. It is not enabled by default, you need to do it in keyboard shortcuts preferences. Use shortcut 2 listed here (yeah \0/) -&amp;gt; type Preferences:Open Keyboard Shortcuts -&amp;gt; search for Emmet: Wrap with Abbreviation -&amp;gt; choose a key to bind it. I use Alt + M.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hxBtAbIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/Wrap-abbreviation.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hxBtAbIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/Wrap-abbreviation.gif%3Fraw%3Dtrue" alt="wrap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honarable-mention"&gt;
  &lt;/a&gt;
  Honarable mention:
&lt;/h2&gt;

&lt;p&gt;Ctrl + Space :  Show Suggestions&lt;br&gt;
Shows suggestions to quickly fill properties and other stuff.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GGFjUlTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/show%2520suggestions.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GGFjUlTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/simonpaix/images/blob/main/show%2520suggestions.gif%3Fraw%3Dtrue" alt="suggest"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-me-lets-connect"&gt;
  &lt;/a&gt;
  About me, let's connect! üëãüë©‚Äçüíª
&lt;/h1&gt;

&lt;p&gt;¬†&lt;br&gt;
I'm an avid learner and I love sharing what I know. I teach coding on live streams üëâ &lt;a href="https://learnpine.com"&gt;here&lt;/a&gt;. If you want to, come visit and say hi in the chat üòÅ&lt;br&gt;
¬†&lt;br&gt;
¬†&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>10+ CSS BORDER ANIMATION EXAMPLE</title>
      <author>mike</author>
      <pubDate>Wed, 14 Apr 2021 20:27:30 +0000</pubDate>
      <link>https://dev.to/mike37/10-css-border-animation-example-4jjf</link>
      <guid>https://dev.to/mike37/10-css-border-animation-example-4jjf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpO3hLjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14ykfkcth85rqm74gla6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpO3hLjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14ykfkcth85rqm74gla6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/css-border-animation/"&gt;25+ Best CSS Border Animation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        1. Title:-CSS Border transitions
           Author:-Giana
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/giana/embed/yYBpVY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        2.Title:-Button Hover States
          Author:-James Power
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Snazzy CSS hover states for a button.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thejamespower/embed/OVNYLL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  3.Title:-Colorful CSS Buttons
          Author:-Chris Deacy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;A collection of various types of CSS buttons in various colors.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/chrisdothtml/embed/waKBdM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         4.Title:-Animated CSS Gradient Border
           Author:-Mike Schultz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mike-schultz/embed/NgQvGO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         5.Title:-Imperfect Buttons
           Author:-Tiffany Rayside
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/tmrDevelops/embed/VeRvKX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         6. Title:-Sass button border hover effect mixin
            Author:-Giana
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/giana/embed/xdXpJB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         7. Title:-border-animation-css
            Author:-Swarup Kumar Kuila
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;border-animation-css is create only in use of css.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/uiswarup/embed/RBByzW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         8. Title:-SVG Border Animation 1
            Author:-Zach Saucier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ZachSaucier/embed/kyGqm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         9. Title:-[PURE CSS] border animation without svg
            Author:-Rplus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;single element animation icon~&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Rplus/embed/lEDBj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          10.Title:-Border animation
             Author:-Inderpreet Singh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Border animation&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Inderpreet23/embed/rLzbLk?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         11.Title:-Button Border Hover Effects
            Author:-Sarath AR
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sarath-ar/embed/dMKxxM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         12.Title:- CSS-only border animation
            Author:-Danny Joris
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;CSS-only border animation on hover. It needs a solid background in order to work.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/DannyJoris/embed/BrMgza?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IF YOU LIKE AIRTICLE THEN CHECK MORE &lt;a href="https://frontendin.com/css-border-animation/"&gt;25+ Best CSS Border Animation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Random numbers in CSS? Really? üé≤ü§î</title>
      <author>Pascal Thormeier</author>
      <pubDate>Wed, 14 Apr 2021 20:26:05 +0000</pubDate>
      <link>https://dev.to/thormeier/random-numbers-in-css-really-569o</link>
      <guid>https://dev.to/thormeier/random-numbers-in-css-really-569o</guid>
      <description>&lt;p&gt;I just read &lt;a href="https://dev.to/inhuofficial/a-pure-css-password-generator-they-said-it-can-t-be-done-4pla"&gt;this awesome post by inhuofficial&lt;/a&gt; about a random password generator written in pure CSS. It follows a similar approach as some other pure CSS random number generators out there. Most of them use differently timed animations to "shuffle" the state. The user interacts with it by pausing the animations and voila: A seemingly random number. A really clever approach.&lt;/p&gt;

&lt;p&gt;And it got me thinking.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-even-is-random"&gt;
  &lt;/a&gt;
  What even &lt;em&gt;is&lt;/em&gt; "random"?
&lt;/h1&gt;

&lt;p&gt;"Random", as I would define it, describes an action with a non-determinable result. That doesn't necessarily mean that the result is not deterministic (think, it could be determined in theory, but nobody can). Let's have a look at a simple way to generate a random result: A coin flip.&lt;/p&gt;

&lt;p&gt;If you flip a coin a gazillion times, the result will be roughly 50% heads and 50% tails. That seems random. But is it really? Seemingly so, we can't possibly measure all the variables that influence if it's heads or tails, right? But what if we could? If we knew all the preconditions, like, &lt;em&gt;all&lt;/em&gt; of them? Position and velocity of every single air molecule in the room, the body temperature of the person flipping the coin, size and weight of the coin, fluctuations in Earth's gravity, whatever you can think of. Would we be able to predict the outcome? I think: Most likely, yes.&lt;/p&gt;

&lt;p&gt;And there's the problem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#classical-computers-and-electricity"&gt;
  &lt;/a&gt;
  Classical computers and electricity
&lt;/h1&gt;

&lt;p&gt;At their very foundation, computers work with electricity. Electricity either flows (&lt;code&gt;1&lt;/code&gt;) or it doesn't (&lt;code&gt;0&lt;/code&gt;). When you wire a few billion transistors together the right way, they can do mathematics and other amazing things, but they still represent this logic of 0 and 1. If you apply the same current to the same parts, the result will be the same.&lt;/p&gt;

&lt;p&gt;So, how can this construct generate random numbers? Unless there's a special physical part wired in as well, it can't. That's why the "random" numbers generated by computers, are either &lt;a href="https://hackaday.com/2019/12/09/generating-random-numbers-with-a-fish-tank/"&gt;generated with a fish tank&lt;/a&gt; or they're so-called "pseudo-random" numbers: They only seem to be random, but are actually deterministic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pseudorandom-numbers"&gt;
  &lt;/a&gt;
  "Pseudo-random" numbers
&lt;/h1&gt;

&lt;p&gt;So, essentially, the people coming up with pure CSS random number generators ran into the same problems a lot of people did before them when implementing random number generators like &lt;code&gt;/dev/random&lt;/code&gt; or &lt;code&gt;Math.random()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that's no surprise: Generating pseudo-random numbers is its own field of research, actually. According to Wikipedia, there's four different criteria that measure the quality of a pseudo-random number generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Probability of two randomly generated sequences to be different.&lt;/li&gt;
&lt;li&gt;Being indistinguishable from actual random numbers. This is tested with some predefined statistical tests.&lt;/li&gt;
&lt;li&gt;Being impossible for an attacker to calculate or otherwise guess a random number in advance from any previously generated number.&lt;/li&gt;
&lt;li&gt;Being impossible for an attacker to calculate or otherwise guess a random number in advance from any internal state of the generator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some pseudo-random number generators rely on the unix timestamp, some may rely on CPU temperature, a hash of the current state of the memory and some constant. They function much like the coin flip: They add dozens of variables to make the result look more and more random, even though it never truly becomes random.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In summary
&lt;/h1&gt;

&lt;p&gt;When I looked for CSS-only random number generators, I often read the sentence "they're not real random numbers" or I even saw references to the &lt;a href="https://xkcd.com/221/"&gt;XKCD comic about random number generators&lt;/a&gt;, but I think those people are a bit unfair to their own achievements. Those generators are as good as it gets with the tools CSS offers. We're dealing with machines that need to be deterministic. Unless there's a possibility to measure quantum weirdness, take photos of fish tanks or measure the light of distant stars flickering in the atmosphere with pure CSS, the numbers that can be generated with CSS will remain pseudo-random. &lt;/p&gt;

&lt;p&gt;And that's OK.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ‚ù§Ô∏è &lt;em&gt;or a&lt;/em&gt; ü¶Ñ&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;buy me a coffee&lt;/em&gt; ‚òï&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; üê¶&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>computerscience</category>
      <category>webdev</category>
      <category>random</category>
    </item>
    <item>
      <title>My First Personal Site! üì£</title>
      <author>fentybit</author>
      <pubDate>Wed, 14 Apr 2021 20:23:29 +0000</pubDate>
      <link>https://dev.to/fentybit/my-first-personal-site-4m20</link>
      <guid>https://dev.to/fentybit/my-first-personal-site-4m20</guid>
      <description>&lt;p&gt;I can not believe that I have 2 months left with Flatiron School, and hopefully by then I can officially call myself a Full-Stack Software Engineer. üë©üèª‚Äçüíª&lt;/p&gt;

&lt;p&gt;Aside from revamping my resume, I have been working on building my personal site. After weeks of debating if I should be building from scratch or not, I decided to deploy my first portfolio site from a ready-made HTML5 template. I can always refine my portfolio site later as I develop more skills, and eventually design my own UI components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Point&lt;/strong&gt;&lt;br&gt;
Not sure where to start, I looked for advice from &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;. I found this tutorial of &lt;a href="https://www.freecodecamp.org/news/how-to-put-a-website-online-guide-to-website-creation-custom-domain-and-hosting/"&gt;How to Put a Website Online&lt;/a&gt;, and it was extremely useful in providing guidance for someone (like me) who has no knowledge on buying a custom domain, hosting and outsourcing a template. I had fun perusing through &lt;a href="https://pixelarity.com/"&gt;Pixelarity&lt;/a&gt; where you can browse HTML responsive template designs. Basic skills required include HTML, CSS and JavaScript. The next step was trying to figure out my custom domain. Funny thing, this effort frustrates me the most, and I could not make up my mind. Long story short, I ended up re-branding myself to &lt;code&gt;@fentybit&lt;/code&gt;, and settled on &lt;code&gt;fentybit.me&lt;/code&gt;. I love numbers, and hence, &lt;code&gt;bit&lt;/code&gt; or binary digit. Then, I mulled over &lt;code&gt;.dev&lt;/code&gt; and &lt;code&gt;.me&lt;/code&gt; for quite some time. I learned from &lt;a href="https://medium.engineering/use-a-dev-domain-not-anymore-95219778e6fd"&gt;other developers and their thoughts on &lt;code&gt;.dev&lt;/code&gt; domain&lt;/a&gt;, and I settled on &lt;code&gt;.me&lt;/code&gt;. I want my site to personally share who I am and what I am, in the most minimalistic way. I am glad the custom domain was still available. Thank you &lt;a href="https://www.namecheap.com/"&gt;Namecheap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personalize your Site&lt;/strong&gt;&lt;br&gt;
Personalizing HTML/CSS attributes and content delivery took most of my time, but Pixelarity made it so effortless! If there is anything new, it would be trying to link my &lt;em&gt;contact&lt;/em&gt; page so other devs can communicate back to me. &lt;a href="https://formspree.io/"&gt;Formspree&lt;/a&gt; provides this service. I only need to submit their API to my front-end code, and they take care of the rest. üìù&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYZRiuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6oc4rpamiruhamt97i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYZRiuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6oc4rpamiruhamt97i.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Namecheap &amp;amp;&amp;amp; Netlify&lt;/strong&gt;&lt;br&gt;
While there are a lot of hosting providers such as Bluehost, GoDaddy, Hostinger, DreamHost and so on, you can always get free ones from either &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; or &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt;. I had success initially deploying with GitHub pages, though my site resulted being &lt;em&gt;"Not Secure"&lt;/em&gt; on Chrome. I made another attempt on setting up my domain with Namecheap and Netlify. Starting with Namecheap to configure the DNS settings &amp;gt; &lt;strong&gt;Manage&lt;/strong&gt;. Under &lt;strong&gt;Nameservers&lt;/strong&gt; category, I had to update from &lt;strong&gt;Namecheap Basic DNS&lt;/strong&gt; to &lt;strong&gt;Custom DNS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0L-_OtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbasafc7bgbiyv96h7u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0L-_OtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbasafc7bgbiyv96h7u0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reroute to my Netlify &lt;strong&gt;Domain Settings&lt;/strong&gt; real quick to add my custom domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ssqp2aO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgf0yapfw5jd1dzwousp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ssqp2aO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgf0yapfw5jd1dzwousp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step would be to select &lt;strong&gt;Set Up Netlify DNS&lt;/strong&gt;. I would need to acquire &lt;em&gt;a list of Nameservers&lt;/em&gt; from Netlify and propagate on Namecheap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvMeD0pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8x96iw8bteezclbka10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvMeD0pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8x96iw8bteezclbka10.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy all of &lt;em&gt;Netlify's DNS servers&lt;/em&gt; to &lt;em&gt;Namecheap Nameservers&lt;/em&gt;, and click the green check button to save this setting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3siIoix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tj4o3183cdp9kbnf8it.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3siIoix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tj4o3183cdp9kbnf8it.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I was not able to figure out the SSL/TLS certificate with GitHub pages, I learned Netlify will provision &lt;em&gt;Let's Encrypt&lt;/em&gt; certificate automatically once the DNS configuration on the custom domain pointing to Netlify's servers. Namecheap suggests revisiting your site in 24 - 48 hours once Netlify's DNS fully propagated.&lt;/p&gt;




&lt;p&gt;It's official. Now I have a personal site! üí•&lt;br&gt;
Check out &lt;a href="https://fentybit.me/"&gt;https://fentybit.me/&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFx91a2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmk0orhrf4jcdap26s9x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFx91a2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmk0orhrf4jcdap26s9x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Talk Notes: "Implicit to Explicit: Decoding Ruby's Magical Syntax" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 20:12:26 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-implicit-to-explicit-decoding-ruby-s-magical-syntax-railsconf-2021-51ge</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-implicit-to-explicit-decoding-ruby-s-magical-syntax-railsconf-2021-51ge</guid>
      <description>&lt;p&gt;‚ú® &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Talk:&lt;/strong&gt; 'Implicit to Explicit: Decoding Ruby's Magical Syntax' by &lt;a href="https://twitter.com/railsonmaui"&gt;Justin Gordon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: Ruby's implicitness makes it great for readability and DSLs. But that also gives Ruby a "magical" syntax compared to JavaScript. In this talk, let's convert the implicit to explicit in some familiar Rails code. What was "magic" will become simple, understandable code.&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Impression&lt;/strong&gt;:  I feel this talk was much more about pry and I am blown away by Justin's üî• &lt;code&gt;~/.pryrc&lt;/code&gt; üî• (see &lt;a href="#read-more"&gt;below&lt;/a&gt; ) and the ease it introduces into debugging üíï I loved this talk, and Justin's way of calm and kind explaining complex concepts.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DSL: Domain-Specific Language&lt;/li&gt;
&lt;li&gt;Rails leverages Ruby's implicitness:

&lt;ul&gt;
&lt;li&gt;self&lt;/li&gt;
&lt;li&gt;variable declarations&lt;/li&gt;
&lt;li&gt;parentheses&lt;/li&gt;
&lt;li&gt;much more&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Can we learn to read Ruby code like the Ruby interpreter?

&lt;ul&gt;
&lt;li&gt;ideally, you should understand the code, not just copy-paste&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;üî• üî• üî• OMG Justin's pry demo is a must-watch! I need to re-watch it and code along üî• üî• üî• &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#js-vs-ruby"&gt;
  &lt;/a&gt;
  JS vs Ruby
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JS is very explicit: 

&lt;ul&gt;
&lt;li&gt;you need the parentheses for function invocations; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; is rarely implicit;&lt;/li&gt;
&lt;li&gt;explicit return in standard functions;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ruby is &lt;em&gt;often&lt;/em&gt; implicit: 

&lt;ul&gt;
&lt;li&gt;parentheses are optional and so zero arg method calls are the same as object values (&lt;code&gt;user.first&lt;/code&gt; can be a method invocation or just a call for the attribute);&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self&lt;/code&gt; can be implicit or explicit (it's explicit for writer methods because otherwise, Ruby's trying to declare a new local var)&lt;/li&gt;
&lt;li&gt;implicit returns;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shakacode.com/talks"&gt;Justin's resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/1UUePkLINNN-Gpm5x5kPGBjNafrn29DdK/view?usp=sharing"&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/justin808/1fe1dfbecc00a18e7f2a"&gt;Justin's &lt;code&gt;~/.pryrc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.shakacode.com/search?q=pry"&gt;ShakaCode Forum Pry Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.shakacode.com/t/running-puma-for-debugging-with-pry/2018"&gt;Running puma for debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>How to Automatically Execute Python Code Based on Datadog DevOps Alerts</title>
      <author>Derrick Sherrill</author>
      <pubDate>Wed, 14 Apr 2021 20:11:26 +0000</pubDate>
      <link>https://dev.to/wayscript/how-to-automatically-execute-python-code-based-on-datadog-devops-alerts-3f44</link>
      <guid>https://dev.to/wayscript/how-to-automatically-execute-python-code-based-on-datadog-devops-alerts-3f44</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In today‚Äôs video, we‚Äôre going to take a look at how to setup the Datadog Trigger in WayScript and how to use it. Datadog is a powerful monitoring program that can be utilized in many different ways through WayScript, including triggering code executions and more. Keep reading to learn more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-script"&gt;
  &lt;/a&gt;
  Building our Script
&lt;/h2&gt;

&lt;p&gt;For this tutorial we‚Äôll simply explore how to set up and connect a Datadog account to WayScript. First, we‚Äôll add the Datadog Trigger module to our program tree. We‚Äôll need to authenticate the account using an API key. To do this, navigate to the toolbar at right and select the button with three bars; from here, click ‚ÄúAdd Account.‚Äù  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kydWlc0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kydWlc0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/1.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, you will need a nickname, and API key, and an Application key.  &lt;/p&gt;

&lt;p&gt;To get the API and Application keys, visit the Datadog HQ and access your API key. The Application key can also be found here. You can create a new Application key to use solely for this program. Remember to keep both of these keys hidden and don‚Äôt share them with others. Paste both of these keys in the right toolbar in WayScript. Now, WayScript has access to your Datadog account.  &lt;/p&gt;

&lt;p&gt;After clicking ‚ÄúUpdate‚Äù and the refresh button in the toolbar, select your preferred organization. Next, turn on events in the toolbar by activating the toggle switch. To activate the trigger, switch the toggle within the Trigger module in the tree. Now, we‚Äôve activated the Datadog Trigger module within WayScript. However, we need to visit the Datadog HQ website to take care of a few more things before we can start using it.  &lt;/p&gt;

&lt;p&gt;First, we‚Äôll go to the Monitors tab on the website. For our account, we already have one running titled Demo Events. Clicking on this we see that we‚Äôre sending notifications to @webhook-wayscript-datadog-trigger. We can then copy this, go back to the Monitors tab, and create a new monitor. There are many different things we can monitor using various monitor types, like Events, Custom Checks, and Networks. We‚Äôll monitor an event for this tutorial.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl57Ukvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl57Ukvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/3.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For our new event monitor, we‚Äôre just sending an event when a user uses an application built through Heroku and hosted on GitHub. We have a default string that says ‚Äúsomething big has happened,‚Äù so we‚Äôll type ‚Äúsomething big‚Äù in the ‚ÄúMatch events containing‚Äù text box to match our string. Next, we‚Äôll set alert conditions above zero, and then in the text box at the bottom we‚Äôll type ‚ÄúNotify‚Äù and pass in the @webhook-wayscript-datadog-trigger from earlier.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXTz-imt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXTz-imt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/2.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now add a title and click save, and the new monitor will be found in the monitors tab. We‚Äôre now ready to start using Datadog for a number of other applications within WayScript.  &lt;/p&gt;

&lt;p&gt;Having the ability to use Datadog within WayScript adds even more usability to the program. We can use Datadog to monitor our program and automatically trigger code executions to solve any issues that may arise, along with many other potential uses. Stay tuned for future tutorials using the Datadog trigger!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Questions about this script or anything else? Join our &lt;a href="https://discord.gg/VWbXSbj"&gt;discord&lt;/a&gt;. We're always around to help.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A year of strife</title>
      <author>Leon Timmermans</author>
      <pubDate>Wed, 14 Apr 2021 19:59:48 +0000</pubDate>
      <link>https://dev.to/leontimmermans/a-year-of-strife-16o9</link>
      <guid>https://dev.to/leontimmermans/a-year-of-strife-16o9</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclaimer: this is based on my own personal experience and perception. It's not The Truth, but it is my truth.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year, in early May, I got an email that got me worried. Really really worried. Not because of disagreement (though I did disagree with it), but because I knew this would be the most controversial thing I've seen in my more than decade on perl5-porters (the mailing list where core contributors discuss the development of perl). If I was wrong it was only because controversial turned out not to be quite strong enough a word for what would happen.&lt;/p&gt;

&lt;p&gt;In it, a radical change was proposed. Radical in technology, but I'm not going to focus on that today. Radical in &lt;a href="http://blogs.perl.org/users/leon_timmermans/2020/08/perl7-is-a-fork-of-values.html"&gt;values&lt;/a&gt;, which really means it's radical for the community as well. It immediately divided both core contributors and much of the community into many factions with two main contingents.&lt;/p&gt;

&lt;p&gt;What may seem like a simple technical disagreement was everything but. It was a fight for the soul of the language and the community that we love. While there were a lot of (mostly silent) people in the middle, in the discourse there were two sides and both (or at least enough people on both sides) were entirely convinced that the language and community that we all love only has a future if their side wins, and that the other will drive it to ruin.&lt;/p&gt;

&lt;p&gt;If that doesn't sound like the prologue of a Greek tragedy, then I don't know what does.&lt;/p&gt;

&lt;p&gt;It led to vigorous discussion; initially behind the scenes, and after the Conference-in-the-Cloud also on &lt;a href="https://www.nntp.perl.org/group/perl.perl5.porters/2020/06/msg257565.html"&gt;perl5-porters&lt;/a&gt; and elsewhere. And quite frankly, this only stopped when people mostly stopped talking to each other after 2 weeks because there was little point to it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The alarm bells really should have gone off here.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Soon enough the conflict moved to github. The unfortunate thing is that there were two groups of people: one with the will to make this happen but not quite the knowledge, and they started writing code. And one group that didn't want this to happen that did have the knowledge, who started reviewing said code. As you can probably guess, this soon became a mutually aggravating situation. After a few weeks of stepping on each other's toes, it became an open conflict.&lt;/p&gt;

&lt;p&gt;The stakes were astronomical. I've heard several people say (in private) that they felt they would be needing to look for a different career and community over this. Combine this with a pandemic that has all of us stressed out, this led to a situation which I can only summarize as &lt;em&gt;both sides kept pushing until the other side would give up&lt;/em&gt;. Given the sheer stubbornness of the average perl contributor this could only end when a sufficient number of people have burned out that neither side is capable of doing pretty much anything. It was a dynamic that was quite frankly burning me out too, to the point where several of my loved ones told me I should give up on this for sake of my own mental health (and I've heard similar stories from others).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's easy to assume that the things that happened were a few abusive assholes, but in my experience it was mostly a vicious cycle of previously reasonable and kind people lashing out at the people that were burning them out&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And that's where the alarm bells became cold-war style air sirens, the kind you can hear from miles away (sorry gen-z, you probably have no idea what I'm talking about).&lt;/p&gt;

&lt;p&gt;This was the moment when we (or actually a bunch of community elders) started up a process to set up a new governance, because any decision making process that can generate this amount of strife is in need of repairs. Many people saw it as a diversion, but I don't agree. I think it was the only way to restart this conversation, and to get to a point (currently still in the future) where we can heal again.&lt;/p&gt;

&lt;p&gt;But when hell broke loose, another thing was finally spoken out, though it was easily missed in between all the unpleasantness, is a simple truth that there is a third option that had been unthinkable a year ago: forking. This changes everything about the equation, literally everything.&lt;/p&gt;

&lt;p&gt;Ultimately I believe that is what ended the discussion. It ended with the simple knowledge that the opposition was able and willing to fork if that's what it takes to prevent their worst-case scenario. In a way it was a Solomon's judgement for the steering committee. It ended the discussion not just because almost no one wants to fork the community, but because perl7 as announced last summer wouldn't be viable given a competitor that actually supports all of CPAN today and will continue to do so for the foreseeable future (just look at how long it took the python3 transition to take over, and that's without people wanting to keep supporting python2).&lt;/p&gt;

&lt;p&gt;It is a pyrrhic victory. Pyrrhic not just because "we" haven't really won anything. Everyone lost because friendships were damaged (and perhaps lost) over this. We lost because a bunch of the people who matter for moving perl forward are currently effectively burned out (a few loudly so, but many in painful silence). We lost because people stopped contributing over this (most prominently but not limited to former project lead Sawyer).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-can-we-learn-from-this-and-how-can-we-move-forward"&gt;
  &lt;/a&gt;
  So what can we learn from this, and how can we move forward?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We needed different governance, for a multitude of reasons. The old pumpking model had a tendency to burn people out, that was not sustainable (to be honest, Sawyer seemed burned out to me even before any of this happened, I can only imagine where he is now). Having more people in our executive, and having them there for bound terms (it's easier to stop when it takes effort to continue) will hopefully prevent that in the future. But also because it will lead to more diverse points of view. I suspect we'll be tweaking our governance for a while we gain more experience with it, but at least we have a foundation to do that with now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Going through this during a pandemic really didn't help. I honestly believe this situation would not have gotten so badly out of hand if we could meet up face to face and talk to each other with a beverage in our hands; if we weren't all so tense because we haven't seen many of our loved ones in ages. We should remember that. Some discussions should be done in real life; sometimes the right response to a conflict is "Ooh, I get the impression this may be a Chartreuse-level discussion. Are you up for that?"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We should have more attention for our contributors' mental health; we need to remember the human on the other side of the conversation. It's perhaps cliche to say we should act with more empathy for each other, but frankly we collectively also acted with too little empathy for ourselves.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It seems that the proponents initially mistook a lot of the grievances as mere bike-shedding, when they actually were meaningful concerns that wouldn't go away by themselves. They didn't seem to realize that they were &lt;a href="https://www.dictionary.com/browse/cross--the--rubicon"&gt;crossing the Rubicon&lt;/a&gt; by actually moving forward with their plans without a consensus. We should not set ourselves up for failure like that, there is no way that could have ended well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One thing we started doing much too late was mediation (Neil in particular has done great work there lately). We need people who can see all perspectives and bring them all back together. This is where we truly miss Larry more than anything, because bringing different needs together was his true talent. I don't think (or hope) we will be needing this often, but it's probably good to be prepared for such an eventuality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We talk a lot about speaking with kindness, but we don't talk nearly enough about listening with kindness. Unlike speaking, listening kindly can't really be enforced, but the speaking without listening can easily become dysfunctional. Achieving this requires a cultural change. I don't know how to get us there, but I do know that it will require leadership.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The other thing that requires leadership is bringing us back together again. Perl is unique in the &lt;a href="https://twitter.com/leon_timmermans/status/1376299679818874880"&gt;breadth&lt;/a&gt; of its user base and that is both Perl's greatest strength as its greatest weakness. These conflicting interests were at the root of this conflict, and finding a path that serves all those interests (including the less loud ones) will be the main challenge for the steering committee.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>perl</category>
      <category>community</category>
    </item>
    <item>
      <title>Creating A Pdf Saver And Print Previewer in React using useImperativeHandle and jspdf</title>
      <author>Dan Hammer</author>
      <pubDate>Wed, 14 Apr 2021 19:11:54 +0000</pubDate>
      <link>https://dev.to/danmhammer/creating-a-pdf-saver-and-print-previewer-in-react-using-useimperativehandle-and-jspdf-3o8m</link>
      <guid>https://dev.to/danmhammer/creating-a-pdf-saver-and-print-previewer-in-react-using-useimperativehandle-and-jspdf-3o8m</guid>
      <description>&lt;p&gt;I recently had need to create documents in a React app with a scrolling previewer and the ability to print or save to PDF. Creating a component that could hold and display multi page documents and make them printable and able to be captured as a pdf. This came with some interesting opportunities to make smart components that can handle some work themselves. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I-dFmd7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rervhr4qhrjthxscjp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I-dFmd7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rervhr4qhrjthxscjp0.png" alt="Image Of A PDF previewer and Printer Page written in React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/eager-hugle-8i40h"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I'll go into further detail in the following sections, but for a quick breakdown:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;App creates an array of documents with a title and an array of pages made up of react components and a ref for each document.&lt;/li&gt;
&lt;li&gt;PrintDocumentScroller creates a scrolling view for all documents and renders a PrintDocument for each and passes the ref down.&lt;/li&gt;
&lt;li&gt;PrintDocument creates a PrintArea for each page and exposes a function to generate a PDF of the entire document. This is referenced in App using the ref that was passed down and useImperativeHandle. &lt;/li&gt;
&lt;li&gt;PrintArea renders the content in a page-like view so that the preview, print, and pdf all look the same.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#refs-and-useref"&gt;
  &lt;/a&gt;
  refs and useRef
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component&lt;/p&gt;

&lt;p&gt;You might be familiar with refs primarily as a way to access the DOM. If you pass a ref object to React with &lt;/p&gt;, React will set its .current property to the corresponding DOM node whenever that node changes.
&lt;/blockquote&gt;

&lt;p&gt;refs are very useful to maintain a stable reference to any value (but especially DOM nodes or components) for the entire life of a component.&lt;/p&gt;

&lt;p&gt;For this project, we will use refs to give access to functions on child components in order to render a canvas of each component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useimperativehandle"&gt;
  &lt;/a&gt;
  useImperativeHandle
&lt;/h3&gt;

&lt;p&gt;What is &lt;a href="https://reactjs.org/docs/hooks-reference.html#useimperativehandle"&gt;&lt;code&gt;useImperativeHandle&lt;/code&gt;&lt;/a&gt;? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;useImperativeHandle customizes the instance value that is exposed to parent components when using ref. As always, imperative code using refs should be avoided in most cases. useImperativeHandle should be used with forwardRef:&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FancyInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;useImperativeHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;inputRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;FancyInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FancyInput&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="s2"&gt;```


&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#make-components-do-some-work"&gt;
  &lt;/a&gt;
  Make components do some work!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#printarea"&gt;
  &lt;/a&gt;
  PrintArea
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrintArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageIndicator&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeStyles&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStyles&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;useImperativeHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;captureCanvas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;html2canvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;printArea&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageIndicator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageIndicator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we create a PrintArea component that will hold each individual page. It applies some styles to show an 11" x 8.5" box with a page number indicator in the bottom right. This component is fairly simple, but it provides us with a function, captureCanvas, to get the canvas just for that specific page.&lt;/p&gt;

&lt;p&gt;Each PrintArea component is passed a ref. forwardRef allows us to take the assigned ref and use it inside the component.&lt;/p&gt;

&lt;p&gt;useImperativeHandle allows us to assign a series of functions to any ref. In this case, the ref passed down through forward ref. We create captureCanvas, a function to digest the page into a canvas directly. This can be called by any parent component with access to the ref with &lt;code&gt;ref.current.captureCanvas()&lt;/code&gt;. This is what we'll take advantage of to gather all of our canvases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#printdocument"&gt;
  &lt;/a&gt;
  PrintDocument
&lt;/h3&gt;

&lt;p&gt;Each PrintArea is a single page. PrintDocument represents an entire document and all of its pages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PrintDocument&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;forwardRef&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numPages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;printAreaRefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numPages&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createRef&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

  &lt;span class="nx"&gt;useImperativeHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;generatePDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrintArea&lt;/span&gt;
            &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;pageIndicator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;numPages&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;printAreaRefs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/PrintArea&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PrintDocument creates a ref for each page and then renders the content within PrintAreas that are passed the correct ref.&lt;/p&gt;

&lt;p&gt;PrintDocument also employs useImperativeRef to give its parent access to generate a PDF.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;useImperativeHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;generatePDF&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;printAreaRefs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captureCanvas&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;canvases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;jsPDF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`portrait`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`in`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`letter`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LETTER_PAPER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INCHES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LETTER_PAPER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;INCHES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Loop over the canvases and add them as new numPages&lt;/span&gt;
        &lt;span class="nx"&gt;canvases&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`image/png`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`PNG`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`FAST`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because it assigns captureCanvas to each ref passed to a PrintArea, it is able to get the canvas for each page and pass it onto jspdf. Then, it returns the generated pdf and title to a parent component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#savepdfs"&gt;
  &lt;/a&gt;
  savePDFs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savePDFs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generatePDF&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;pdfs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pdfs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pdf&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.pdf`&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;savePDFs is passed the array of document refs and is able to call generatePDF() on each document and then save it. &lt;/p&gt;

&lt;p&gt;In my use case, I gather all of the pdfs and upload them each to S3, which I may cover in a future post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-now-a-warning"&gt;
  &lt;/a&gt;
  And now, a warning
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5T7KgjOUmhCmY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5T7KgjOUmhCmY/giphy.gif" alt="A gif of Meryl Streep in Death Becomes Her saying `Now, a warning?!`"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the React docs: &lt;strong&gt;As always, imperative code using refs should be avoided in most cases.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;It is of course possible to approach this without using refs and useImperativeRef.&lt;/p&gt;

&lt;p&gt;We can assign an id to every page and programmatically grab it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;documents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Document1`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;page-1-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;stuff&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;html2canvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`page-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;documentIndex&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pageIndex&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can even make this work with some of the styling. I am not a fan of this approach as it makes it slightly more difficult to generate an arbitrary number of pages and is honestly not very readable, but it is completely valid and will work. I chose not to do this in favor of a more readable and adaptable solution.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Vuex best practices</title>
      <author>timothyokooboh</author>
      <pubDate>Wed, 14 Apr 2021 18:55:20 +0000</pubDate>
      <link>https://dev.to/timothyokooboh/vuex-best-practices-45dd</link>
      <guid>https://dev.to/timothyokooboh/vuex-best-practices-45dd</guid>
      <description>&lt;p&gt;As a Vue.js developer, I have been using Vuex for state management. &lt;/p&gt;

&lt;p&gt;Recently, I completed a course on Frontend Masters titled &lt;strong&gt;&lt;a href="https://frontendmasters.com/courses/vuex/"&gt;Vuex for intermediate developers&lt;/a&gt;&lt;/strong&gt;. I have also read a couple of useful posts on Vuex written by experienced Vue.js developers.&lt;/p&gt;

&lt;p&gt;Therefore, these days when utilizing Vuex in my application, I do my best to follow these patterns/strategies/rules.&lt;/p&gt;

&lt;p&gt;A. &lt;strong&gt;Always use &lt;em&gt;Mutations&lt;/em&gt; to update a value in Vuex state.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's say you have something like this in your state:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const state = {&lt;br&gt;
  age: 20&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To update the value of &lt;strong&gt;age&lt;/strong&gt; inside any of your Vue components, &lt;strong&gt;never do this:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.$store.state.age = 40;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead, write a mutation that will be responsible for updating the state.&lt;/p&gt;

&lt;p&gt;You could write something like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const mutations = {&lt;br&gt;
updateAge(state, payload) {&lt;br&gt;
state.age = payload&lt;br&gt;
}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then in your components, you can do this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.$store.commit("updateAge", 40)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can even extend this example further with the next best practice.&lt;/p&gt;

&lt;p&gt;B. &lt;strong&gt;Let every mutation be associated with an action. Then dispatch these actions inside of your Vue components.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most experienced Vue developers propose that components should not directly commit mutations. Instead, every mutation should be associated with an action. Then components should dispatch these actions instead of directly committing mutations.&lt;/p&gt;

&lt;p&gt;To demonstrate this concept with our previous example, let's create an action:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const actions = {&lt;br&gt;
updateAge({ commit }, payload) {&lt;br&gt;
commit("updateAge", payload)&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then inside our Vue components, we will dispatch the action instead of committing the mutation directly.&lt;br&gt;
&lt;code&gt;this.$store.dispatch("updateAge", 40)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;C. &lt;strong&gt;Keep asynchronous logic inside actions and NEVER inside mutations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Asynchronous logic such as fetching data from an API call should be carried out inside actions and not inside mutations. &lt;/p&gt;

&lt;p&gt;This is because each time a mutation updates the Vuex state, it leaves a &lt;em&gt;before&lt;/em&gt; and &lt;em&gt;after&lt;/em&gt; snapshot of the Vuex state inside of Vue dev tools. This is very useful in debugging because you can always go back in time to check the initial values in the state before the mutation was committed.&lt;/p&gt;

&lt;p&gt;But this unique ability of mutations is lost whenever an asynchronous event is fired inside a mutation. Hence it is best to only perform synchronous tasks inside mutations.&lt;/p&gt;

&lt;p&gt;Usually, these synchronous tasks only involve updating the value of the state just like we did before:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;state.age = payload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;D. &lt;strong&gt;Actions and Mutations should not be used outside of their core responsibilities.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because Vuex actions and mutations are simply javascript functions, sometimes we execute logic that should&lt;br&gt;
not really be done inside either of them.&lt;/p&gt;

&lt;p&gt;Each time you commit a mutation, it should do only ONE thing: &lt;strong&gt;Update the value of the state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each time you dispatch an action, it should do one or more of the following:&lt;br&gt;
(i) Fetch data from an API.&lt;br&gt;
(ii) Commit a mutation.&lt;br&gt;
(iii) Dispatch an action.&lt;/p&gt;

&lt;p&gt;Each time you find yourself executing logic that falls outside of these core responsibilities, you should consider extracting that logic inside a &lt;strong&gt;Vuex plugin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thankfully, Vuex plugins are very easy to write. I will show you how.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt;&lt;br&gt;
Let's say you dispatched an action that fetched data from an API. Then you committed a mutation and passed the API response as a payload to the mutation. Then inside your mutation, you updated the value of the Vuex state with the payload. And in addition, you want to save some values to local storage.&lt;/p&gt;

&lt;p&gt;It's best not to write the logic that saves the values to local storage inside of your mutation or action. Instead, you can write a simple plugin to do just that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to write a plugin&lt;/strong&gt;&lt;br&gt;
Let's create a Vuex plugin to save data in Local storage.&lt;/p&gt;

&lt;p&gt;Create a folder called &lt;strong&gt;plugins&lt;/strong&gt;, preferably inside of your Vuex store folder. Then create a file called &lt;strong&gt;webStorage.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export default function saveToLocalStorage(store) {&lt;br&gt;
 store.subscribe((mutation, state) =&amp;gt; {&lt;br&gt;
if(mutation.type === 'updateState' ) {&lt;br&gt;
const payload = mutation.payload;&lt;br&gt;
localStorage.setItem("userId", payload.userId)&lt;br&gt;
localStorage.setItem("username", payload.username)&lt;br&gt;
}&lt;br&gt;
})&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A Vuex plugin is just a normal javascript function that receives the Vuex store as its only argument.&lt;/p&gt;

&lt;p&gt;In the code above, I check if the mutation that was committed is called "updateState". Then I access the payload from the mutation and save the username and userId to local storage.&lt;/p&gt;

&lt;p&gt;This logic does not update the Vuex state. Therefore, it's not best practice to place it inside of a mutation.&lt;/p&gt;

&lt;p&gt;To use this plugin, we will import it into the Vuex store (index.js file)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;store/index.js&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;import saveToLocalStorage from "plugins/webStorage";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const Store = new Vuex.Store({&lt;br&gt;
plugins: [saveToLocalStorage],&lt;br&gt;
state: {},&lt;br&gt;
mutations: {},&lt;br&gt;
actions: {},&lt;br&gt;
getters: {}&lt;br&gt;
})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Vuex plugins are really powerful and easy to write. You can use them to create powerful notification systems such as notifying a slack channel whenever a particular mutation or action is executed.&lt;/p&gt;

&lt;p&gt;E. &lt;strong&gt;Don't write redundant code inside Vuex getters.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The below Vuex getter is not really useful and should not have been written in the first place:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const getters: {&lt;br&gt;
getAge(state){&lt;br&gt;
return state.age;&lt;br&gt;
}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is only returning the value of age. In our components, we can conveniently access the value of age without the help of this getter.&lt;br&gt;
&lt;code&gt;this.$store.state.age&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use getters to compute derived values of the state&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But let's say we want to check if age is less than 18. Using a getter to &lt;strong&gt;compute&lt;/strong&gt; this value will be very useful.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const getters: {&lt;br&gt;
isUnderAge(state){&lt;br&gt;
return state.age &amp;lt; 18&lt;br&gt;
}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then inside of our components, we can conveniently determine if a user is under age by accessing the value of the getter:&lt;br&gt;
&lt;code&gt;this.$store.getters.isUnderAge&lt;/code&gt; instead of writing &lt;code&gt;return this.$store.state.age &amp;lt; 18&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That's it, guys! ‚ò∫Ô∏è.&lt;br&gt;
Let me know what you think about these tips. And share the best practices you have been applying inside of your Vuex codebase too.&lt;/p&gt;

&lt;p&gt;I must add that these best practices will not be complete without a properly organized Vuex folder structure. But that's a topic for another time.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
