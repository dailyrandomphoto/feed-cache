<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5chan - The 4chan clone with NextJs</title>
      <author>Navin Kodag</author>
      <pubDate>Sat, 18 Sep 2021 14:35:42 +0000</pubDate>
      <link>https://dev.to/100lvlmaster/5chan-the-4chan-clone-with-nextjs-3969</link>
      <guid>https://dev.to/100lvlmaster/5chan-the-4chan-clone-with-nextjs-3969</guid>
      <description>&lt;p&gt;This the continuation of the 5chan project : we've already discussed the Design and API&lt;br&gt;
So for the final step I'll create the frontend.&lt;/p&gt;

&lt;p&gt;The flow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New user opens homepage / app&lt;/li&gt;
&lt;li&gt;Gets assigned a random user id until clears data&lt;/li&gt;
&lt;li&gt;Generate random Avatars using @dicebar/avatars&lt;/li&gt;
&lt;li&gt;Can create posts / delete own posts&lt;/li&gt;
&lt;li&gt;Look through posts timeline&lt;/li&gt;
&lt;li&gt;Reply to posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we'll init a nextjs app and install the dependencies we'll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chakra-UI - Components&lt;/li&gt;
&lt;li&gt;swr - Data fetching&lt;/li&gt;
&lt;li&gt;zustand - state management&lt;/li&gt;
&lt;li&gt;@dicebear/avatars - generating avatars

&lt;ul&gt;
&lt;li&gt;formik - manage, validate post create form
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Get the nextjs app template&lt;/span&gt;
npx create-next-app 5chan &lt;span class="nt"&gt;--typescript&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;5chan
pnpm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="c"&gt;# The chakra-ui UI library, icons for chakra-ui &amp;amp; swr &lt;/span&gt;
pnpm add @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4 @chakra-ui/icons swr zustand @dicebear/avatars @dicebear/micah formik
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8a1lzp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/WN7mXLD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8a1lzp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/WN7mXLD.png" alt="setup-project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To setup chakra-ui, you'll have to wrap the app with ChakraProvider like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChakraProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@chakra-ui/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ChakraProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The types.ts for consistent structures:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// types.ts&lt;/span&gt;
&lt;span class="c1"&gt;//User State&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UserStore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// User Object&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Posts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;UpdatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;DeletedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Post Reply&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;CreatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;UpdatedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;DeletedAt&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Generating random user and avatar data then storing them in LocalStorage for later use :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//user.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;customAlphabet&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nanoid/async&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createAvatar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@dicebear/avatars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@dicebear/micah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;currentUid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;customAlphabet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0123456789&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nanoid&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAvatar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;dataUri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The great thing about zustand is that you don't have the wrap the entire app inside a context to use it. It can stay away from the UI code as small stores. So it's easy to use.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//stores.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zustand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserStore&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now the API requests to &lt;code&gt;POST&lt;/code&gt;&amp;amp; &lt;code&gt;GET&lt;/code&gt; replies:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//replies.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchReplies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postReply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Reply&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_URL&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/v1/replies`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`POST`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The API calls for &lt;code&gt;POST&lt;/code&gt;ing, &lt;code&gt;GET&lt;/code&gt; ing &amp;amp; &lt;code&gt;DELETE&lt;/code&gt;ing  posts:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPostById&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_URL&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/v1/posts`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`POST`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletePost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RequestInit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`DELETE`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I6G-wrbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/jIv6pfqKiIvHPYZO6y/giphy.gif%3Fcid%3Decf05e47j5ul5m7839tdh6yoq8eex6vruvzvwij1xryb0ky7%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I6G-wrbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/jIv6pfqKiIvHPYZO6y/giphy.gif%3Fcid%3Decf05e47j5ul5m7839tdh6yoq8eex6vruvzvwij1xryb0ky7%26rid%3Dgiphy.gif%26ct%3Dg" alt="phew.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK now comes the final boring part, designing the UI. but it's ok we only have three pages to code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Index page - intro, how to use.&lt;/li&gt;
&lt;li&gt;Home page  - timeline of posts, discussions.&lt;/li&gt;
&lt;li&gt;Posts page : dynamic page according to post id.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may design them however you want but if you still want to look over the code you can find the source code at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; layout

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/100lvlmaster/5chan/blob/master/layout/container.tsx"&gt;container.tsx&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; components

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/100lvlmaster/5chan/blob/master/components/post_form_button.tsx"&gt;post_form_button.tsx&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;pages

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/100lvlmaster/5chan/blob/master/pages/index.tsx"&gt;index.tsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/100lvlmaster/5chan/blob/master/pages/home.tsx"&gt;home.tsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;posts

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/100lvlmaster/5chan/blob/master/pages/posts/%5Bid%5D.tsx"&gt;[id].tsx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's about all we need right now.&lt;br&gt;
After running the project and deploying it. &lt;br&gt;
Here are the screenshots ✨✨&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AmMEPdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/qWE4dkN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AmMEPdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/qWE4dkN.png" alt="homepage.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4wCOSz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/wF8Qxmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4wCOSz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/wF8Qxmb.png" alt="timelinepage.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEYQbdHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/6luHMRA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEYQbdHm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/6luHMRA.png" alt="postpage.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-source-code-of-this-project-lies-at-httpsgithubcom100lvlmaster5chango"&gt;
  &lt;/a&gt;
  The source code of this project lies at: &lt;a href="https://github.com/100lvlmaster/5chan-go"&gt;https://github.com/100lvlmaster/5chan-go&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can find me at:&lt;br&gt;
Website &lt;br&gt;
&lt;a href="https://100lvlmaster.in"&gt;https://100lvlmaster.in&lt;/a&gt;&lt;br&gt;
Github&lt;br&gt;
&lt;a href="https://github.com/100lvlmaster"&gt;https://github.com/100lvlmaster&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>4chan</category>
      <category>react</category>
    </item>
    <item>
      <title>5chan API - Golang, GORM, Go-fiber</title>
      <author>Navin Kodag</author>
      <pubDate>Sat, 18 Sep 2021 14:27:26 +0000</pubDate>
      <link>https://dev.to/100lvlmaster/5chan-api-golang-gorm-go-fiber-10gi</link>
      <guid>https://dev.to/100lvlmaster/5chan-api-golang-gorm-go-fiber-10gi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#this-is-the-continuation-of-the-5chan-project"&gt;
  &lt;/a&gt;
  This is the continuation of the 5chan project.
&lt;/h2&gt;

&lt;p&gt;Creating the backend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Setup project and download dependencies in one Ctrl+v-Ctrl-v :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="c"&gt;# Create the 5chan directory&lt;/span&gt;
 &lt;span class="nb"&gt;mkdir &lt;/span&gt;5chan-go
 &lt;span class="c"&gt;# Create main.go&lt;/span&gt;
 &lt;span class="nb"&gt;touch &lt;/span&gt;main.go
 &lt;span class="c"&gt;# Init the go project &lt;/span&gt;
 go mod init github.com/100lvlmaster/5chan-go
 &lt;span class="c"&gt;# Get go-fiber&lt;/span&gt;
 go get github.com/gofiber/fiber/v2
 &lt;span class="c"&gt;# Get GORM&lt;/span&gt;
 go get github.com/gofiber/fiber/v2 
 &lt;span class="c"&gt;# Get air&lt;/span&gt;
 curl &lt;span class="nt"&gt;-sSfL&lt;/span&gt; https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;-b&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;go &lt;span class="nb"&gt;env &lt;/span&gt;GOPATH&lt;span class="si"&gt;)&lt;/span&gt;/bin
 &lt;span class="c"&gt;# Setup air&lt;/span&gt;
 air &lt;span class="nt"&gt;-c&lt;/span&gt; .air.toml
 &lt;span class="c"&gt;# Get godotenv to read env vars [optional]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a directory structure like so:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; controllers 

&lt;ul&gt;
&lt;li&gt; posts.go&lt;/li&gt;
&lt;li&gt; replies.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; database

&lt;ul&gt;
&lt;li&gt; database.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; middleware

&lt;ul&gt;
&lt;li&gt; middleware.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; models

&lt;ul&gt;
&lt;li&gt; post.go&lt;/li&gt;
&lt;li&gt; reply.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; routes

&lt;ul&gt;
&lt;li&gt; routes.go&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;main.go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YFXZtOEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/q85U73P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YFXZtOEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/q85U73P.png" alt="dir-struct.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#da-code"&gt;
  &lt;/a&gt;
  Da Code:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Creating structs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;models/post.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// models/post.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;
&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`gorm:"primaryKey"`&lt;/span&gt;
&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"title"`&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"author"`&lt;/span&gt;
&lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"body"`&lt;/span&gt;
&lt;span class="n"&gt;Reply&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt; &lt;span class="s"&gt;`json:"replies" gorm:"constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;models/reply.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// models/reply.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Reply&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;
&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`gorm:"primaryKey"`&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"author"`&lt;/span&gt;
&lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"body"`&lt;/span&gt;
&lt;span class="n"&gt;PostID&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"postId"`&lt;/span&gt;
&lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="s"&gt;`json:"post" gorm:"constraint:OnUpdate:CASCADE,OnDelete:SET NULL;"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Connecting the databse and creating a singleton of the instance so we can use it everywhere.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// database/database.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="s"&gt;"os"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/models"&lt;/span&gt;
&lt;span class="s"&gt;"gorm.io/driver/postgres"&lt;/span&gt;
&lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="c"&gt;// DBConn is a database connection singleton&lt;/span&gt;
&lt;span class="n"&gt;DBConn&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;InitDb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;dsn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LookupEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DB_DSN"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not connect to the database"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dsn&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not initialize database"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoMigrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not init database"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Database migrated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Creating Controllers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;controllers/posts.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// controllers/posts.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/database"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/models"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="n"&gt;gonanoid&lt;/span&gt; &lt;span class="s"&gt;"github.com/matoous/go-nanoid/v2"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetPostById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Preload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Reply"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CreatePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BodyParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gonanoid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0123456789"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;DeletePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Post deleted successfully"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;controllers/replies.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"errors"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/database"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/models"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="n"&gt;gonanoid&lt;/span&gt; &lt;span class="s"&gt;"github.com/matoous/go-nanoid/v2"&lt;/span&gt;
&lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetReplies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;replies&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetRepliesByPostId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;replies&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PostID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;replies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;///&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CreateReply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BodyParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Incorrect input body, please chcek input convention and try again"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/// DB contains post&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;
&lt;span class="n"&gt;hasRecord&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrRecordNotFound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;hasRecord&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Post does not exist"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;///&lt;/span&gt;
&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gonanoid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0123456789"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;201&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Setup routes:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// routes/routes.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// routes/routes.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/controllers"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;RoutesInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hellso, World 👋!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPosts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreatePost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPostById&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/posts/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeletePost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/replies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetReplies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/replies/:id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRepliesByPostId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/replies"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateReply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A middleware to limit other methods like &lt;code&gt;POST&lt;/code&gt; &amp;amp; &lt;code&gt;DELETE&lt;/code&gt; to our Frontend. But you're using this you may change them to your liking in the &lt;code&gt;.env&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;middleware/middleware.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;middleware&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"os"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;/// Limit post requests to the official client&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;CustomeMiddleware&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"DELETE"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LookupEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Could not fetch env vars, call 100lvlmaster"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;apiKey&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SendString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Your keys are incorrect peasant ✨✨"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And then tie everything together in the main.go file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;main.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// main.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s"&gt;"os"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/database"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/middleware"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/100lvlmaster/5chan-go/routes"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/gofiber/fiber/v2/middleware/cors"&lt;/span&gt;
&lt;span class="s"&gt;"github.com/joho/godotenv"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;godotenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c"&gt;// app.Use(cache.New())&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CustomeMiddleware&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DBConn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitDb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RoutesInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LookupEnv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PORT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;envExists&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"8080"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And then run the project using:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;air
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEQ-M4Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/KNtG8BH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEQ-M4Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/KNtG8BH.png" alt="air.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After making some test requests there are the screenshots:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HbLnfXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/q6HJxj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HbLnfXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/q6HJxj5.png" alt="test-1.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69xR8s-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/mfCWt0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69xR8s-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/mfCWt0h.png" alt="test-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code of this project lies at:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httpsgithubcom100lvlmaster5chango"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/100lvlmaster/5chan-go"&gt;https://github.com/100lvlmaster/5chan-go&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;You can find me at:&lt;br&gt;
Website &lt;br&gt;
&lt;a href="https://100lvlmaster.in"&gt;https://100lvlmaster.in&lt;/a&gt;&lt;br&gt;
Github&lt;br&gt;
&lt;a href="https://github.com/100lvlmaster"&gt;https://github.com/100lvlmaster&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>gofiber</category>
      <category>gorm</category>
      <category>5chan</category>
    </item>
    <item>
      <title>5chan - The 4chan clone</title>
      <author>Navin Kodag</author>
      <pubDate>Sat, 18 Sep 2021 14:14:15 +0000</pubDate>
      <link>https://dev.to/100lvlmaster/5chan-the-4chan-clone-1n7p</link>
      <guid>https://dev.to/100lvlmaster/5chan-the-4chan-clone-1n7p</guid>
      <description>&lt;p&gt;This weekend I want to make a clone of 4 chan. It won't be as big as 4chan lol.&lt;br&gt;
But still I'll use this post to design and decide the stack to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-4-chan"&gt;
  &lt;/a&gt;
  What is 4 chan
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;4chan is a simple image-based bulletin board where anyone can post comments and share images. There are boards dedicated to a variety of topics, from Japanese animation and culture to videogames, music, and photography. Users do not need to register an account before participating in the community.  ~ &lt;em&gt;4chan Homepage&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-we-want-5chan-to-be"&gt;
  &lt;/a&gt;
  What we want 5chan to be
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Text based&lt;/li&gt;
&lt;li&gt;Anonymous [ no registration ]&lt;/li&gt;
&lt;li&gt;Posts&lt;/li&gt;
&lt;li&gt;Replies to posts&lt;/li&gt;
&lt;li&gt;Timeline of posts on homepage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-tech-stack-"&gt;
  &lt;/a&gt;
  The tech stack :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Backend

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gofiber.io/"&gt;Go-fiber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cosmtrek/air"&gt;Air - live reload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gorm.io/"&gt;GORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Frontend 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/"&gt;NextJs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://chakra-ui.com/"&gt;Chakra UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://formik.org/"&gt;Formik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zustand.surge.sh/"&gt;Zustand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Hosting
    - &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hmmm. Thats something I can work out in a day or two for sure.&lt;/p&gt;

&lt;p&gt;So ... LESGOOOO&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fcDMHe1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif%3Fcid%3Decf05e47kq1h576i6japfzxpjvqixjrl4rihalyop04ipgsf%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fcDMHe1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif%3Fcid%3Decf05e47kq1h576i6japfzxpjvqixjrl4rihalyop04ipgsf%26rid%3Dgiphy.gif%26ct%3Dg" alt="cat-ready.gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You can find me at:&lt;/p&gt;

&lt;p&gt;Website : &lt;a href="https://100lvlmaster.in"&gt;https://100lvlmaster.in&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Github : &lt;a href="https://github.com/100lvlmaster"&gt;https://github.com/100lvlmaster&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>typescript</category>
      <category>go</category>
      <category>gofiber</category>
    </item>
    <item>
      <title>How to Install Kali Linux on VirtualBox: A Step-by-Step Guide</title>
      <author>Piyush Shrivastava</author>
      <pubDate>Sat, 18 Sep 2021 13:01:53 +0000</pubDate>
      <link>https://dev.to/b1tsh3ll/how-to-install-kali-linux-on-virtualbox-a-step-by-step-guide-2fi6</link>
      <guid>https://dev.to/b1tsh3ll/how-to-install-kali-linux-on-virtualbox-a-step-by-step-guide-2fi6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X98LqVwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jdz1ov1tey29xhjj7hk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X98LqVwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jdz1ov1tey29xhjj7hk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Kali Linux is a Debian-based Linux system that was created for penetration testing and is particularly beneficial for security professionals and amateurs. Kali Linux, formerly known as BackTrack Linux, comes with a number of network auditing tools and apps. Kali can be used as a Live DVD or installed as a host operating system (OS) on a computer like any other Linux.However, using Kali as a general-purpose desktop operating system is not recommended. At the same time, settings are not saved after a system reboot when using Kali Live DVD. Virtual machines can be extremely useful in this case. In today's blog post, we'll look at how to set up Kali Linux as a virtual machine in VirtualBox (VM).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software Required To Download&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kali.org/get-kali/#kali-bare-metal"&gt;Kali Linux ISO Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://download.virtualbox.org/virtualbox/6.1.26/VirtualBox-6.1.26-145957-Win.exe"&gt;Virtual Box 6.1.26&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://download.virtualbox.org/virtualbox/6.1.26/Oracle_VM_VirtualBox_Extension_Pack-6.1.26.vbox-extpack"&gt;Virtual Box Extension Pack 6.1.26&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download This All Tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kali Linux Installation Image Download&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PvUoA9xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h9de9xhx9aerdja4em7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PvUoA9xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h9de9xhx9aerdja4em7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cdimage.kali.org/kali-2021.3/kali-linux-2021.3-installer-amd64.iso"&gt;Click Here To Download&lt;/a&gt;&lt;br&gt;
Now, After Downloading Let's Move Ahead!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a New Virtual Machine&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwLzFt1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6qs8decqhngwg2vfv0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwLzFt1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6qs8decqhngwg2vfv0b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Set the following VM parameters:&lt;br&gt;
&lt;strong&gt;Name: Kali Linux&lt;/strong&gt;&lt;br&gt;
Note: You Can Enter Any Name You Want Here I Am Going With Default Name.&lt;br&gt;
&lt;strong&gt;Machine Folder: Default&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Type: Linux&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Version: Debian (64-bit)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Memory size: 4096 MB&lt;/strong&gt;&lt;br&gt;
Note: Here I Have Given 4GB As Ram Size You Can Set As Per Your System Requirements.&lt;br&gt;
Although you should allow enough unallocated memory to operate your host OS, the VM memory capacity must be large enough to run a guest OS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hard disk: Create a virtual hard disk now&lt;/strong&gt;&lt;br&gt;
Hit Create to continue and configure a new virtual hard disk.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQXB1puJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti5cquijei0cwcig5ifb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQXB1puJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti5cquijei0cwcig5ifb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The VM folder is intended for storing virtual disc files (such folder is selected by default).&lt;br&gt;
Set the size of the virtual disc file. It must be at least 20 GB in size.&lt;br&gt;
After creating a new VM, some additional settings must be configured. Select your recently created virtual machine and open the VM settings.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E1Y2Yy-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge8uiqqtpgv9kottaa40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1Y2Yy-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge8uiqqtpgv9kottaa40.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Display options&lt;/strong&gt;&lt;br&gt;
Go to Display &amp;gt; Screen and set Video Memory to 128 MB. It will prevent installer hanging.&lt;br&gt;
Then, select Enable 3D acceleration from the drop-down menu (optional). It'll come in handy for applications that require 3D acceleration.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7PIDOUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhh976q5ezvh2ywvtga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7PIDOUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhh976q5ezvh2ywvtga.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network options&lt;/strong&gt;&lt;br&gt;
Next, navigate to the network settings and pick the virtual network adapter's networking mode. To use the VM network adapter as if it were a physical network adapter on the host machine, select the Bridged mode. The VM network adapter is linked to the same physical network as the host system in this scenario. Additional settings, such as network adapter name and type, can be configured.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dY6BfUSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfp8vn67eui4ik51ukma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dY6BfUSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfp8vn67eui4ik51ukma.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Boot options&lt;/strong&gt;&lt;br&gt;
You must first insert your virtual ISO DVD image into the VM's virtual DVD drive, and then boot from that ISO disc. Go to Storage in the VM settings and select an IDE controller for your virtual optical drive (it is empty by default). Click the empty status, then the disc symbol near IDE Secondary Master, and then Choose Virtual Optical Disk File from the menu that appears.&lt;br&gt;
Look through the Kali Linux installation ISO image you previously downloaded from the official site (kali-linux-2021.3-amd64.iso). To save your settings, click OK.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yIDTpVhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z8l5lthwy0vcy2fi31a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yIDTpVhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z8l5lthwy0vcy2fi31a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You may now start your new VM and begin installing Kali. By Pressing Start Button On The Main Menu Of Virtual Box.&lt;br&gt;
You'll get a boot menu after booting from a virtual DVD, where you can choose from Kali Linux boot choices like Boot from Live DVD, Install, Graphical Install, and so on. Let's go with the Graphical Install option. To continue, press Enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1r8JFE0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evv5krb7d4hlh6plqh0b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1r8JFE0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evv5krb7d4hlh6plqh0b.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose a language.&lt;/strong&gt; Select the language for both the installation procedure and the installed system. For the current installation, English has been chosen. To proceed, click the Continue button on each screen. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmVU9F5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1732yuysdpd9ziwt0pei.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmVU9F5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1732yuysdpd9ziwt0pei.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose a location.&lt;/strong&gt; This option allows you to change your time zone, time format, and other settings. In this case, the United States has been chosen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xe6TSktp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbayhmxopz54ppxsfu1n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xe6TSktp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbayhmxopz54ppxsfu1n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up the keyboard.&lt;/strong&gt; Choose a keyboard layout. The current installation makes use of American English.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T00NUvS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5lthuzxuyjs0wkyis83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T00NUvS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5lthuzxuyjs0wkyis83.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up the network.&lt;/strong&gt; Enter your Linux system's hostname, for example, kali-virtualbox.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xyjM1Thi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc524g29s7uw1tmqv58q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xyjM1Thi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc524g29s7uw1tmqv58q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set up the domain name.&lt;/strong&gt; If your network doesn't use a domain, you can leave this box blank.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuFHbjLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sf3vq2m1a8w5amncad33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuFHbjLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sf3vq2m1a8w5amncad33.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create user accounts and passwords.&lt;/strong&gt; Read the helpful hints on this screen before entering the root password.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0A_sKSI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vvjheck6bg4swq9dpdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0A_sKSI8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vvjheck6bg4swq9dpdh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disks for partitioning.&lt;/strong&gt; Disk partitioning can be done manually or with the help of a programme. You can choose Guided – use whole disc for the first time. To create one large partition, the entire drive will be utilised.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qh_Lu9j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2do5014zq5jhas1uyou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qh_Lu9j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2do5014zq5jhas1uyou.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now,&lt;br&gt;
&lt;strong&gt;After This Set EveryThings As Default And Press Continue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Select Finish partitioning and write changes to disc from the overview.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-mc-z9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vf3bcjibx4gpv1rawu6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-mc-z9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vf3bcjibx4gpv1rawu6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Select Yes and confirm that you would like to write changes to the disk.&lt;br&gt;
Now,&lt;br&gt;
System Will Install Linux For You If &lt;strong&gt;Any Things Are Asked Keep It Default.&lt;/strong&gt;&lt;br&gt;
ENJOY!!!&lt;/p&gt;

</description>
      <category>linux</category>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
    <item>
      <title>WebdriverIO - Complete Beginner Course 2021</title>
      <author>Dilpreet Johal</author>
      <pubDate>Sat, 18 Sep 2021 12:58:11 +0000</pubDate>
      <link>https://dev.to/automationbro/webdriverio-complete-beginner-course-2021-218b</link>
      <guid>https://dev.to/automationbro/webdriverio-complete-beginner-course-2021-218b</guid>
      <description>&lt;p&gt;&lt;strong&gt;WebdriverIO&lt;/strong&gt; is one of the most popular JavaScript test automation frameworks in the industry. It is being used by major companies around the world such Google, Netflix, Microsoft, Mozilla and many more...&lt;/p&gt;

&lt;p&gt;It is extremely &lt;strong&gt;beginner-friendly&lt;/strong&gt;, it has &lt;strong&gt;huge community support&lt;/strong&gt; &amp;amp; is &lt;strong&gt;actively maintained&lt;/strong&gt; by the community. Best of all, it is &lt;strong&gt;free to use&lt;/strong&gt; for anyone (startups to enterprise).&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://www.udemy.com/course/webdriverio-complete-beginner-course/?couponCode=AUTOMATIONBRO-CODE"&gt;course&lt;/a&gt; will take you from the very basics where I will teach you about what WebdriverIO is and how to setup your first test with WebdriverIO, to all the way to teaching how to build a fully functional framework with WebdriverIO. Along the way, I will teach you all the best practices that will put on the path of becoming one of the Top Automation Engineers. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#click-on-the-link-below-to-get-85-off-on-this-course-expires-soon"&gt;
  &lt;/a&gt;
  Click on the link below to get &lt;strong&gt;85% off&lt;/strong&gt; on this course (expires soon...)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/webdriverio-complete-beginner-course/?couponCode=AUTOMATIONBRO-CODE"&gt;https://www.udemy.com/course/webdriverio-complete-beginner-course/?couponCode=AUTOMATIONBRO-CODE&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#heres-what-we-will-be-covering-in-this-course"&gt;
  &lt;/a&gt;
  Here's what we will be covering in this course:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript &amp;amp; HTML/CSS Basics&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;What&lt;/strong&gt; is WebdriverIO &amp;amp; &lt;strong&gt;Why&lt;/strong&gt; to use it?&lt;/li&gt;
&lt;li&gt;Setting up your machine for &lt;strong&gt;perfect automation experience&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Installation &amp;amp; Setup&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Step by step guide&lt;/strong&gt; on how to write tests&lt;/li&gt;
&lt;li&gt;Working with &lt;strong&gt;different types of elements&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Learning about how &lt;strong&gt;wait commands&lt;/strong&gt; work&lt;/li&gt;
&lt;li&gt;How to use &lt;strong&gt;assertions&lt;/strong&gt; &amp;amp; advantages of using them&lt;/li&gt;
&lt;li&gt;How to &lt;strong&gt;debug your tests&lt;/strong&gt; when it fails&lt;/li&gt;
&lt;li&gt;Setting up a &lt;strong&gt;fully functional framework&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Page Object Model&lt;/strong&gt; - What is it &amp;amp; how to set it up?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Optimizing&lt;/strong&gt; your framework&lt;/li&gt;
&lt;li&gt;Building beautiful &lt;strong&gt;reports&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Running tests in &lt;strong&gt;BrowserStack&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Running tests in &lt;strong&gt;Jenkins&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;And much more...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the topics are taught with real examples. The course will include exercises &amp;amp; quizzes that will challenge you &amp;amp; allow you to practice what you learned.&lt;/p&gt;

&lt;p&gt;This course will get &lt;strong&gt;constantly updated&lt;/strong&gt; so that you no longer have to worry about outdated content.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Become a Pro on WebdriverIO!&lt;/strong&gt; ⬇️&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xgDDYeoxQlI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;See you inside!&lt;br&gt;
Dilpreet&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>testing</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Making a pixel art editor</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Sat, 18 Sep 2021 12:50:33 +0000</pubDate>
      <link>https://dev.to/abhirajb/making-a-pixel-art-editor-36lb</link>
      <guid>https://dev.to/abhirajb/making-a-pixel-art-editor-36lb</guid>
      <description>&lt;p&gt;Recently, I came across my elder brother's designing course homework about making pixel art and this idea led me to build Pixellate.&lt;/p&gt;

&lt;p&gt;So what exactly is Pixellate?&lt;/p&gt;

&lt;p&gt;It is a pixel art editor and creator built on HTML canvas, CSS and Javascript. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;before you comment about me not using any frameworks&lt;/em&gt;&lt;br&gt;
I would like to say that I wanted to save time and enhance my core skills.&lt;/p&gt;

&lt;p&gt;It is a Progressive Web App (PWA) with offline compatibility.&lt;br&gt;
It is mobile-friendly and is very easy to use.&lt;/p&gt;

&lt;p&gt;Hosting:&lt;br&gt;
Vercel for app&lt;br&gt;
Netlify for landing page&lt;/p&gt;

&lt;p&gt;I released the app on ProductHunt too some time back and I am happy at the results.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8aRu84X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/featured.svg%3Fpost_id%3D312102%26theme%3Dlight" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8aRu84X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/featured.svg%3Fpost_id%3D312102%26theme%3Dlight" alt="Pixellate - A simple and easy-to-use pixel art creator with offline mode | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So head on over to &lt;a href="https://pixellate.netlify.app"&gt;pixellate.netlify.app&lt;/a&gt; to check out my app.&lt;/p&gt;

&lt;p&gt;If you like the app, maybe star the github &lt;a href="https://github.com/RainboeStrykr/Pixellate"&gt;repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or buy me a coffee maybe?&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/rainboestrykr"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also don't forget to leave a review on Product Hunt&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/pixellate?utm_source=badge-review&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-pixellate#discussion-body"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zL00lZ5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/review.svg%3Fpost_id%3D312102%26theme%3Dlight" alt="Pixellate - A simple and easy-to-use pixel art creator with offline mode | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Integrate to Disrupt</title>
      <author>nirala-mehul</author>
      <pubDate>Sat, 18 Sep 2021 12:47:19 +0000</pubDate>
      <link>https://dev.to/niralamehul/integrate-to-disrupt-2c1k</link>
      <guid>https://dev.to/niralamehul/integrate-to-disrupt-2c1k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOqyIGH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8pi89al611xn0hzt4x2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOqyIGH_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8pi89al611xn0hzt4x2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey everyone! 👋 This post is about the awesome experience I had during Integrate to Disrupt Hackathon with Symbl.ai.&lt;/p&gt;

&lt;p&gt;It was a two staged hackathon with Ideation and Prototype phase based on the theme Disrupt Using Conversation Intelligence i.e. Integrate Symbl.ai’s Conversation Intelligence with some of your favorite tools and platforms to create new functionality and/or workflows you think may be disruptive. &lt;/p&gt;

&lt;p&gt;Let's start with with Symbl.ai.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-symblai"&gt;
  &lt;/a&gt;
  What's Symbl.ai?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp9QvuFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619700691318/ahvQ6J8Ip.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp9QvuFu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619700691318/ahvQ6J8Ip.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="symbl-ai-social.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Symbl.ai is a Conversation Intelligence platform enabling developers to easily build and extend apps to understand and extract contextual insights from natural human conversations at scale. Symbl.ai’s suite of conversation AI APIs can capture natural human conversations in any format and channel (audio, video, email, chat, social) in real-time or asynchronously and analyze conversations using proprietary machine learning algorithms to highlight intents, sentiments, insights, action items and more - bringing developers a plug and play approach to build powerful contextual conversation intelligence experiences.&lt;br&gt;
🔮The best part is - It’s without the use of upfront training data, wake words or custom classifiers; hence saving a lot of time. ⏰&lt;/p&gt;

&lt;p&gt;The entire journey was packed with lots of learning about conversation intelligence. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea 💡
&lt;/h2&gt;

&lt;p&gt;The project idea the Desk is an office utility service built on the comprehensive suite of APIs provided by symbl.ai. It manages the task/action items discussed over meetings/conversations, maps them to appropriate assignees, and presents a summary table with interactive visualizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prototype"&gt;
  &lt;/a&gt;
  Prototype
&lt;/h2&gt;

&lt;p&gt;The idea passed the first stage to proceed to the Prototype phase. The prototype was as challenging as it was exciting. The Hackathon Session by symbl.ai team were a life saver 😇.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-we-did"&gt;
  &lt;/a&gt;
  What we did! 🧑‍💻
&lt;/h3&gt;

&lt;p&gt;The desk backend consist of a node.js app that connects to symbl.ai to get conversations data from meetings/ telephony sessions.&lt;/p&gt;

&lt;p&gt;The data was stored in MongoDB wrapped under GraphQL for efficient query and transformation.&lt;/p&gt;

&lt;p&gt;Finally the front end acquired info regarding the meetings and presented as a dashboard to aid productivity.&lt;/p&gt;

&lt;p&gt;A submission involved a integration of capabilities from the backend, database &amp;amp; front end.&lt;/p&gt;

&lt;p&gt;And then only one thing was left, waiting for results.&lt;/p&gt;

&lt;p&gt;Our team was declared Winner 🥳 at the event and won Swags besides Beta tester and Community Ambassador Opportunities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repo"&gt;
  &lt;/a&gt;
  Repo
&lt;/h2&gt;

&lt;p&gt;UI: &lt;a href="https://github.com/mehulnirala/desk-ui.git"&gt;https://github.com/mehulnirala/desk-ui.git&lt;/a&gt;&lt;br&gt;
Backend: &lt;a href="https://github.com/mehulnirala/desk-backend.git"&gt;https://github.com/mehulnirala/desk-backend.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the post, A special thanks to Symbl.ai and HackerEarth and Congratulations 🎉 to all the teams.&lt;/p&gt;

</description>
      <category>symblai</category>
      <category>conversationintelligence</category>
      <category>hackerearth</category>
      <category>buildwithsymbl</category>
    </item>
    <item>
      <title>⚡ Must read Tech news/tools of the day - Digest #17</title>
      <author>Hackertab 🖥️</author>
      <pubDate>Sat, 18 Sep 2021 12:00:12 +0000</pubDate>
      <link>https://dev.to/hackertab/must-read-tech-news-tools-of-the-day-digest-17-2eod</link>
      <guid>https://dev.to/hackertab/must-read-tech-news-tools-of-the-day-digest-17-2eod</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" alt="articleImg"&gt;&lt;/a&gt;Each day we handpick the best web content across different websites eg: Hackernews, Github, Reddit... to help you stay updated with the hottest trends!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#level-up-your-skills-with-these-github-repositories"&gt;
  &lt;/a&gt;
  Level up your 🚀 skills with these Github repositories:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" alt="Github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calendso"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/calendso/calendso"&gt;calendso&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 calendso | ⭐ +7,028 stars Scheduling infrastructure for absolutely everyone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evobot"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/eritislami/evobot"&gt;evobot&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 eritislami | ⭐ +939 stars 🤖 EvoBot is a Discord Music Bot built with discord.js &amp;amp; uses Command Handler from discordjs.guide&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#freeprogrammingbooks"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;free-programming-books&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 EbookFoundation | ⭐ +205,218 stars 📚 Freely available programming books&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hottest-devto-posts-"&gt;
  &lt;/a&gt;
  🎉 🔥 Hottest Devto posts :
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#hypertext-transfer"&gt;
  &lt;/a&gt;
  📝 [Hyper-Text Transfer
&lt;/h3&gt;

&lt;p&gt;Protocol - HTTP 101](&lt;a href="https://dev.to/uzairali10/hyper-text-transfer-protocol-http-101-4jp4"&gt;https://dev.to/uzairali10/hyper-text-transfer-protocol-http-101-4jp4&lt;/a&gt;) 👤 Uzair | 👍 +30 reactions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrHniaMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.hackertab.dev/null" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrHniaMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.hackertab.dev/null" alt=""&gt;&lt;/a&gt;What On Earth is HTTP 🤔 HTTP is a request response protocol that define some sets of rules...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unlimited-javascript-or-where-can-i-use-javascript"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/patik123/unlimited-javascript-or-where-can-i-use-javascript-3l4c"&gt;Unlimited JavaScript (or where can I use JavaScript)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 Patrick | 👍 +32 reactions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4L3U25NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--t4EqpzAk--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wqtdlw41ezd85qa2csh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4L3U25NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--t4EqpzAk--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wqtdlw41ezd85qa2csh.png" alt=""&gt;&lt;/a&gt;JavaScript is a 25-year-old programming language (it appeared in late 1995) as a language for...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-best-css-border-effect-examples"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/stackfindover/25-best-css-border-effect-examples-2i4i"&gt;25+ Best CSS Border Effect Examples&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 Stackfindover | 👍 +25 reactions &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ROBofMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Q69vqpCH--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srblghz3nviz98mc9da5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ROBofMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Q69vqpCH--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srblghz3nviz98mc9da5.jpg" alt=""&gt;&lt;/a&gt;Hello Friends, in this article I have listed 25+ Awesome CSS Border Animation Examples. Check out...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#keep-an-eye-on-these-cool-products-too"&gt;
  &lt;/a&gt;
  👀 Keep an eye on these cool products too:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#kbar"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/kbar?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;kbar&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +119 | 💬 +13 Add a beautiful &amp;amp; extensible cmd+k interface to your site &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_GwnBX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/866056b4-e9a7-4d67-9102-943b9873f785.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_GwnBX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/866056b4-e9a7-4d67-9102-943b9873f785.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="kbar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#messer"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/messer?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;Messer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +30 | 💬 +12 Native drag n' drop image resizer for social media and web &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DaFEwSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/0ae6a357-6abc-4e5a-a253-676c03716a4f.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DaFEwSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/0ae6a357-6abc-4e5a-a253-676c03716a4f.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="Messer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shortcut-keeper"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/shortcut-keeper?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;Shortcut Keeper&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +18 | 💬 +6 Save the keyboard shortcuts you want to remember &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lo6qfXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/159911af-ec5e-4d15-b462-f65cf9287ab7.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lo6qfXjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/159911af-ec5e-4d15-b462-f65cf9287ab7.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="Shortcut Keeper"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;🙌 Wrap Up! That was all for this week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-hackertab-on-twitter-for-more-tips-hackertabdev"&gt;
  &lt;/a&gt;
  Follow Hackertab on Twitter for more tips: &lt;a href="https://twitter.com/hackertabdev"&gt;@hackertabdev&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" alt="Hackertab"&gt;&lt;/a&gt;&lt;a href="https://hackertab.dev"&gt;Hackertab&lt;/a&gt; turns your New Tab page into a geeky one that keeps you as a developer updated with the best tools, news, jobs and events.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>hackertab</category>
    </item>
    <item>
      <title>Cloud native - I Beginner guide
</title>
      <author>Ornelio-Chauque</author>
      <pubDate>Sat, 18 Sep 2021 11:58:17 +0000</pubDate>
      <link>https://dev.to/orneliochauque/cloud-native-i-beginner-guide-1bgl</link>
      <guid>https://dev.to/orneliochauque/cloud-native-i-beginner-guide-1bgl</guid>
      <description>&lt;p&gt;If you are the type of person who likes to be updated on the current technology industry and watch video conferences about software development and follow IT gurus on social media like twitter you certainly have heard about cloud native application, cloud native architecture and cloud native infrastructure.&lt;/p&gt;

&lt;p&gt;Nowadays there is a lot of data and information about cloud native ones that are more clear and understandable than others, with this post,  I want to contribute with some useful information (I hope so) about the subject here in discussion. &lt;/p&gt;

&lt;p&gt;Before all other aspects, like  what cloud native are and how to implement it, we must answer what I think is  the genesis, root or basic question: the &lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is crucial and  important to understand the motivation behind the implementation and development of cloud native applications. Although there might exist many other motivations and reasons for implementation and development, &lt;strong&gt;the need to develop applications that take advantage and inherit  the cloud computing feature and capabilities&lt;/strong&gt; was the key factor. &lt;/p&gt;

&lt;p&gt;Those features and capabilities are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Fault tolerance &lt;/li&gt;
&lt;li&gt;Portability &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other features and capabilities that cloud provides to us but the one listed above might be the ones which were the key.&lt;/p&gt;

&lt;p&gt;The cloud gives us infrastructure and resources that allow good scalability, availability, security, portability, fault tolerance, etc. Why not create an architecture and infrastructure that will allow us to take full advantage of all those features and capabilities? So, simply saying, the main reason behind the implementation and adoption of cloud native applications was to create applications with an architecture that takes advantage and inherits those cloud features and capabilities. &lt;/p&gt;

&lt;p&gt;After talking about the why? is important to understand  what cloud native applications are. &lt;/p&gt;

&lt;p&gt;Before we dive deep into cloud native itself, let's have a brief understanding of what native applications are. &lt;/p&gt;

&lt;p&gt;When we talk about native applications we look to applications that are designed to a specific environment or infrastructure. The native applications are the ones that capitalize and take the advantage of the component and resources of the underline environment or infrastructure. This happens when we talk about developing native mobile applications with java, kotlin or developing desktop applications for example with C++ or C. As those tools are designed for those environments, they take full advantage of the existence resources like processing hardware, network and storage. &lt;/p&gt;

&lt;p&gt;On other hand, non native applications mostly known as hybrid applications are those developed to run in more than one specific environment or infrastructure and they are developed with tools and technologies that are not designed with the goal to run on some specific environment or infrastructure. Most of the time, hybrid applications don’t take full advantage of the available resource and component and suffer with performance issues because of the need of some middleware component that stands in between the application itself and the environment or infrastructure and this indirection has a cost (performance). &lt;/p&gt;

&lt;p&gt;As we said before, we can create desktop and mobile applications that are not desktop or mobile native, so the same happens on cloud, meaning, we can develop cloud applications that are not cloud native applications.&lt;/p&gt;

&lt;p&gt;There is two main aspect  to note in the explanation above about  native applications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;The main aspect is, to be considered native application, the application must be developed with tools and technologies designed to that environment&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The application must take the advantage of the resources and components of that specific environment and infrastructure&lt;/strong&gt;. This second aspect is deeply dependent on the first aspect.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With all that said, is far to conclude that:&lt;/p&gt;

&lt;p&gt;Cloud native applications are those applications designed to run specifically in cloud native infrastructure, developed using tools and technologies that are designed specifically  to develop those types of  applications and must take full advantage of cloud resources and infrastructure features.&lt;/p&gt;

&lt;p&gt;Now we know Why and what cloud native applications are, it is time to understand and to know How they can be implemented.&lt;/p&gt;

&lt;p&gt;For Cloud native applications it is important to understand that it is not only about how we develop the applications, it is about how we deploy  it too.&lt;br&gt;
When we talk about how we develop it, we are talking about cloud native architecture, which specifies  the way the applications are designed and by how we deploy it, we are talking about Cloud native infrastructure, which specifies how the applications should be deployed, a how the components talk and communicate with each other.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloud-native-architecture"&gt;
  &lt;/a&gt;
  Cloud native architecture
&lt;/h3&gt;

&lt;p&gt;Before cloud native architecture and all aspects related to cloud native applications, we used to develop cloud applications using “legacy architecture” like monolithic. In monolithic when a component on the application crashes, the entire application crashes. Another aspect that monolithic applications don’t capitalize very well is the scalability features. Suppose we have monolithic application with many modules, its possible to happen that some module have many request than others and for performance reason we take the action to scale, in monolithic we will have  scale the entire application instead of only the modules really need to scale the one that create need for that scale action.  With those and other reasons,  the need  of creation and implementation of a  new way and architecture to develop cloud applications  had a relevance and importance.  &lt;/p&gt;

&lt;p&gt;To develop cloud native applications that take advantage of the cloud feature and capabilities, we must take another approach and take a new way of thinking and developing cloud applications, like the former  &lt;strong&gt;service oriented applications (SOA)&lt;/strong&gt; and the new one, more robust and more granular implementation of SOA known as &lt;strong&gt;Microservice architecture&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;In service oriented architecture, the applications are segmented in small components called service, which work together to accomplish a specific goal, the communication between them are made by API or message bus solutions implementations. This architecture allows isolated scaling, isolated failure which makes them better than monolithics. &lt;/p&gt;

&lt;p&gt;Cloud native applications are developed using microservice architecture which is a more granular implementation of SOA and another important aspect is that in microservice architecture each micro service is self contained, meaning that these services hold all needed resources to work in isolation which may include on database. By self contained we are not saying that all the application runs in a single container, we are saying that the micro service holds all needed resources to their task without sharing that with other microservice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloud-native-infrastructure"&gt;
  &lt;/a&gt;
  Cloud native infrastructure
&lt;/h3&gt;

&lt;p&gt;As we say before, to take advantage and inherit the cloud native features and capabilities is not only about defining a new way of developing and architecting cloud applications, it's about creating and implementing an environment and infrastructure to deploy and run cloud native applications. We will not have much gain in developing cloud applications and run a legacy infrastructure, that is way cloud native infrastructure is important in cloud native world.&lt;/p&gt;

&lt;p&gt;Nowaday, cloud native infrastructure provides lots of resources that allow  pack and distribute cloud native applications(containerization like Docker), deployment and management/orchestration (Kubernete), communication (Consul), monitoring (prometheus), logging (fluentd)etc. For each type of resource you will find more than one option. Choose which use is up to you.&lt;br&gt;
The Cloud Native Computing Foundation is the entity that manages all those cloud native infrastructure components. I really advise you to take a look at their website to have more information about. &lt;/p&gt;

&lt;p&gt;To finish this article, it is important to note that although the best way to develop cloud native applications is by implementing microservices architecture, it is still possible to use legacy architecture like monolithic to develop cloud application and deploy then in a cloud native infrastructure, but there's a price to pay, for example the scalability and failure or crashes issues that we mention early.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://searchcloudcomputing.techtarget.com/definition/cloud-native-application"&gt;https://searchcloudcomputing.techtarget.com/definition/cloud-native-application&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.redhat.com/en/topics/cloud-native-apps"&gt;https://www.redhat.com/en/topics/cloud-native-apps&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.cncf.io/"&gt;https://www.cncf.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>native</category>
      <category>microservices</category>
      <category>applications</category>
    </item>
    <item>
      <title>Mindfully Commit with a Descriptive Message</title>
      <author>Theodorus Clarence</author>
      <pubDate>Sat, 18 Sep 2021 11:41:23 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/mindfully-commit-with-a-descriptive-message-4e8k</link>
      <guid>https://dev.to/theodorusclarence/mindfully-commit-with-a-descriptive-message-4e8k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Do you do this?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_YxcZZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lubk2wn3jzb5tvm4nmbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_YxcZZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lubk2wn3jzb5tvm4nmbn.png" alt="0-bad-example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stop. Even if you are working alone and nobody reads your commit, you're eventually going to forget your 3-month-old project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Was the X feature added?", "Did I fixed the hamburger menu bug?".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can't really know what feature you are adding, or what bug you are fixing not until you jump into the code to check what changed. Imagine you work as a team, and you have to review 10 commits that are not descriptive, so you need to read the code and the logic on that PR.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-descriptive-commit-message"&gt;
  &lt;/a&gt;
  Step 1: Descriptive Commit Message
&lt;/h2&gt;

&lt;p&gt;The guideline of a descriptive commit message is you should at least know what were you working with just by reading the commit message. The convention is usually using imperative sentences, and present tense.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;change aspect ratio for company profile video&lt;/li&gt;
&lt;li&gt;add hamburger menu for mobile&lt;/li&gt;
&lt;li&gt;remove unused imports&lt;/li&gt;
&lt;li&gt;fix hamburger menu not opening on mobile&lt;/li&gt;
&lt;li&gt;add test for helper functions&lt;/li&gt;
&lt;li&gt;refactor remove todo logic&lt;/li&gt;
&lt;li&gt;add documentation on hamburger menu&lt;/li&gt;
&lt;li&gt;install react-icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even without looking at the code changes, you can generally know what is going on.&lt;/p&gt;

&lt;p&gt;By spending 10 seconds to decide what descriptive commit message that we should use, we can save up minutes of looking up code changes in the future.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-2-grouping"&gt;
  &lt;/a&gt;
  Step 2: Grouping
&lt;/h2&gt;

&lt;p&gt;We've learned that using a descriptive commit message helps a lot during code review or revisiting old projects.&lt;/p&gt;

&lt;p&gt;At the first step, we can infer what is going on by looking at the commit message. But, we have to read the full sentence to know if it was a feature that is added or removed, a bug that was fixed, or a package that was installed. Isn't it nicer if we can recognize the function of the commit just by the first word? Also, there are some people that like to use emojis to differentiate. You can if you like, but I'm trying to minimize mental mapping.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a lot of conventions out there, and I usually use Conventional Commit. I will spare you the details—should we use capital or not, should we use past tense or present tense, should we add a full stop—on the later step. But this grouping step roughly follows Conventional Commit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's say that we have these categories—only a small example, you can add more categories if you need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;feat&lt;/strong&gt;, for addition or removal of a feature.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fix&lt;/strong&gt;, for squashing bugs&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;chore&lt;/strong&gt;, for installing npm packages&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;test&lt;/strong&gt;, for adding test suites&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;refactor&lt;/strong&gt;, for refactoring code flow but not changing the feature itself&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;style&lt;/strong&gt;, for styling code structure like spacing, reorder or remove unused imports, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our last commit can improve into this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;feat&lt;/strong&gt; change aspect ratio for company profile video&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;feat&lt;/strong&gt; add hamburger menu for mobile&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;style&lt;/strong&gt; remove unused imports&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fix&lt;/strong&gt; hamburger menu not opening on mobile&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;test&lt;/strong&gt; add test for helper functions&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;refactor&lt;/strong&gt; remove todo logic&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;docs&lt;/strong&gt; add documentation on hamburger menu&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;chore&lt;/strong&gt; install react-icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this step, we can be more effective when differentiating commit. We can skim commits and find what category we are looking for.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-3-generating-changelog"&gt;
  &lt;/a&gt;
  Step 3: Generating Changelog
&lt;/h2&gt;

&lt;p&gt;Let's say you are creating an NPM package, and you need to generate a Changelog for your users so they are aware of the changes. For instance, you can look up your git log, and copy all commit message that is in &lt;strong&gt;feat&lt;/strong&gt; and &lt;strong&gt;fix&lt;/strong&gt; category. This 2 category is the most used when creating a changelog because your user doesn't really need to know that you remove unused import, or adding a semicolon to code because you forgot.&lt;/p&gt;

&lt;p&gt;ps: when doing a normal project, you can add more categories to the changelog if you want.&lt;/p&gt;

&lt;p&gt;Handpicking those is grunt work, and nobody wants to do it if you have a bunch of commits. That is why we can use &lt;code&gt;standard-version&lt;/code&gt; to generate the report.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xtiRUMs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx51le6e0gbwd81p1t6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xtiRUMs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tx51le6e0gbwd81p1t6k.png" alt="1-standard-version"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can easily run a command, and it will automatically bump the version, generate changelog, commit, and add a tag to our project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nzEWFCTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrctkltfxhnd63lhttps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nzEWFCTj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrctkltfxhnd63lhttps.png" alt="2-changelog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the report that is generated only using our commit, we can also specify what categories we want to include.&lt;/p&gt;

&lt;p&gt;But, there is a catch when we are using an auto-generate package like &lt;code&gt;standard-version&lt;/code&gt;. We need to follow certain rules so the &lt;code&gt;standard-version&lt;/code&gt; program is not confused. Let's proceed to step 4.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-4-conventional-commits"&gt;
  &lt;/a&gt;
  Step 4: Conventional Commits
&lt;/h2&gt;

&lt;p&gt;Conventional Commits is a specification for adding human and machine-readable meaning to commit messages.&lt;/p&gt;

&lt;p&gt;Do read up the guide on &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;their website.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This set of rules will help us create a good commit message that we can easily read, and can be auto-generated into a changelog. I usually put up this markdown in the readme file, so others can follow it too. Feel free to read up my summary and copy it to your projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Still, read the &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;guide&lt;/a&gt; on their website, it is more comprehensive there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#commit-message-convention-readme"&gt;
  &lt;/a&gt;
  Commit Message Convention Readme
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## Commit Message Convention&lt;/span&gt;

This website follows &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Conventional Commits&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://www.conventionalcommits.org/en/v1.0.0/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

Commit message will be checked using &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;husky and commit lint&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://theodorusclarence.com/library/husky-commitlint-prettier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;, you can't commit if not using the proper convention below.

&lt;span class="gu"&gt;### Format&lt;/span&gt;

@@@text
&lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;[optional scope]: &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;

[optional body]

[optional footer(s)]
@@@

&lt;span class="err"&gt;*&lt;/span&gt;change the @ to &lt;span class="se"&gt;\`&lt;/span&gt;, devto won't allow nested backticks for some reason

Example: &lt;span class="sb"&gt;`feat(pre-event): add speakers section`&lt;/span&gt;

&lt;span class="gu"&gt;### 1. Type&lt;/span&gt;

Available types are:
&lt;span class="p"&gt;
-&lt;/span&gt; feat → Changes about addition or removal of a feature. Ex: &lt;span class="sb"&gt;`feat: add table on landing page`&lt;/span&gt;, &lt;span class="sb"&gt;`feat: remove table from landing page`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; fix → Bug fixing, followed by the issue (not what you do to fix that bug). Ex: &lt;span class="sb"&gt;`fix: illustration overflows in mobile view`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; chore → Installing new dependencies, or bumping deps
&lt;span class="p"&gt;-&lt;/span&gt; docs → Update documentation (README.md)
&lt;span class="p"&gt;-&lt;/span&gt; style → Updating style, and not changing any logic in the code (reorder imports, fix whitespace, remove comments)
&lt;span class="p"&gt;-&lt;/span&gt; refactor → Changes in code, same output, but different approach
&lt;span class="p"&gt;-&lt;/span&gt; ci → Update github workflows, husky
&lt;span class="p"&gt;-&lt;/span&gt; test → Update testing suite, cypress files
&lt;span class="p"&gt;-&lt;/span&gt; revert → when reverting commits
&lt;span class="p"&gt;-&lt;/span&gt; perf → Fixing something regarding performance (deriving state, using memo, callback)
&lt;span class="p"&gt;-&lt;/span&gt; vercel → Blank commit to trigger vercel deployment. Ex: &lt;span class="sb"&gt;`vercel: trigger deployment`&lt;/span&gt;

For breaking change, add (!) after the types. Ex: &lt;span class="sb"&gt;`feat!: drop support for internet explorer`&lt;/span&gt;

&lt;span class="gu"&gt;### 2. Optional Scope&lt;/span&gt;

Labels per page Ex: &lt;span class="sb"&gt;`feat(pre-event): add date label`&lt;/span&gt;

&lt;span class="se"&gt;\*&lt;/span&gt;If there is no scope needed, you don't need to write it

&lt;span class="gu"&gt;### 3. Description&lt;/span&gt;

Description must fully explain what is being done.

&lt;span class="gu"&gt;### Important Rules&lt;/span&gt;

&lt;span class="gs"&gt;**If there are multiple changes, then commit one by one**&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; After colon, there is a single space. Ex: &lt;span class="sb"&gt;`feat: add something`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; When using &lt;span class="sb"&gt;`fix`&lt;/span&gt; type, state the issue. Ex: &lt;span class="sb"&gt;`fix: file size limiter not working`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; Use imperative, and present tense: "change" not "changed" or "changes"
&lt;span class="p"&gt;-&lt;/span&gt; Don't use capitals in front of the sentence
&lt;span class="p"&gt;-&lt;/span&gt; Don't add full stop (.) at the end of the sentence
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using that set of rules will guarantee a working changelog. But still, whether the commit message is going to be meaningful, it is on you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-add-commitlint"&gt;
  &lt;/a&gt;
  Step 5: Add Commitlint
&lt;/h2&gt;

&lt;p&gt;If you are working with some new developers in your team, they might not fully know this convention. While you can give this blog to them 😉, it is a great practice to add a linter for your project, so no one can mess up the commit message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw6r2YGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqsm84gkq1e2vc5i6goj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw6r2YGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqsm84gkq1e2vc5i6goj.png" alt="3-commitlint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will enforce the use of conventional commit for your commit message.&lt;/p&gt;

&lt;p&gt;Check out this &lt;a href="https://theodorusclarence.com/library/husky-commitlint-prettier#2-add-commitlint"&gt;post&lt;/a&gt; to add Commitlint using Husky&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;We learn that we should use a more descriptive commit message, add some category to it, use Conventional Commits rules as a guide so we can generate changelog, and add Commitlint so we can't mess it up.&lt;/p&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>PHP explode: Splitting strings into arrays</title>
      <author>hrishikesh1990</author>
      <pubDate>Sat, 18 Sep 2021 11:39:44 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/php-explode-splitting-strings-into-arrays-1e2a</link>
      <guid>https://dev.to/hrishikesh1990/php-explode-splitting-strings-into-arrays-1e2a</guid>
      <description>&lt;p&gt;In this tutorial, we look at the PHP explode function. We take a close look at its parameters, return values and it’s limitations.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents-php-foreach"&gt;
  &lt;/a&gt;
  Table of Contents - PHP foreach:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#php-explode-what-is-explode-in-php"&gt;PHP explode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-amp-explanation"&gt;Code and Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitation-and-caveats-php-explode"&gt;Limitation and Caveats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#php-explode-what-is-explode-in-php"&gt;
  &lt;/a&gt;
  PHP explode - What is explode in PHP?
&lt;/h2&gt;

&lt;p&gt;PHP explode() is a built-in function that is used to split a string into a string array. It splits a string based on a specified separator that we pass as an argument. Apart from this functionality, the explode method also has a third parameter, “limit” that can be used to manipulate the number of elements in the array. We take a closer look at this below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-php-explode"&gt;
  &lt;/a&gt;
  Syntax of PHP explode:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Separator - Required, used to specify where the string should be split&lt;/li&gt;
&lt;li&gt;String - Required, the string that you want to split&lt;/li&gt;
&lt;li&gt;Limit - Optional, used to specify the number of elements in the string array.

&lt;ul&gt;
&lt;li&gt;Positive Value - If a positive value is passed as a parameter, it denotes the number of elements the string array should contain. In case the value is lesser than the number of elements in the array, the N-1th element of the string array would contain all the remaining elements.&lt;/li&gt;
&lt;li&gt;Negative Value - If a negative value is passed the last element will be trimmed off and the and the remaining part of elements would be returned as an array.&lt;/li&gt;
&lt;li&gt;Zero - If zero is passed the element will contain only elements which would be the entire string.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#return-value"&gt;
  &lt;/a&gt;
  Return Value:
&lt;/h3&gt;

&lt;p&gt;If no limit argument is passed the string array would contain all the elements split by the separator. If a limit value is passed, the return values would be based on that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-amp-explanation"&gt;
  &lt;/a&gt;
  Code &amp;amp; Explanation:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

    &lt;span class="c1"&gt;// string&lt;/span&gt;
    &lt;span class="nv"&gt;$string_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hire Freelance Developer"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// using explode without a limit&lt;/span&gt;
    &lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$string_1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above code snippet would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;Array&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Hire&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Freelance&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Developers&lt;/span&gt;

&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code block, since a limit was not passed the returned array contains a string with all the elements.&lt;/p&gt;

&lt;p&gt;Now let’s look at an example using the limit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

    &lt;span class="c1"&gt;// string&lt;/span&gt;
    &lt;span class="nv"&gt;$string_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hire the top Freelance Developer"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// a positive limit&lt;/span&gt;
    &lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$string_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// a negative limit&lt;/span&gt;
    &lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$string_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of the above code snippet would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;Array&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Hire&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="nc"&gt;Freelance&lt;/span&gt; &lt;span class="nc"&gt;Developer&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;Array&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Hire&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;freelance&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first array, since the limit value was less than the number of elements all the remaining elements were passed in the last element. In the last array, since a negative value was passed the last element was removed and all the other values were passed as an array.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitation-and-caveats-php-explode"&gt;
  &lt;/a&gt;
  Limitation and Caveats - PHP Explode
&lt;/h2&gt;

&lt;p&gt;Note that Explode will throw a Valueerror if the separator parameter is an empty string. Other than this, there are no major constraints in the explode function.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ethereum mining in simple language; How to extract the second most important cryptocurrencies in the world?</title>
      <author>arman mohammadi</author>
      <pubDate>Sat, 18 Sep 2021 10:51:09 +0000</pubDate>
      <link>https://dev.to/armantech/ethereum-extraction-in-simple-language-how-to-extract-the-second-most-important-cryptocurrencies-in-the-world-35g2</link>
      <guid>https://dev.to/armantech/ethereum-extraction-in-simple-language-how-to-extract-the-second-most-important-cryptocurrencies-in-the-world-35g2</guid>
      <description>&lt;p&gt;ethereum is the second largest currency in the world and one of the most important extractable currencies in the cryptocurrency market. Many digital currency market players consider ethereum mining to be an important and reliable source of income. If you are also interested in ethereum extraction, this article is a comprehensive but simple guide to ethereum extraction. Please stay with us until the end of the article.&lt;/p&gt;

&lt;p&gt;In this article, we will assume that you know what an ethereum is and how it works by default. So we will only give a brief explanation about this.&lt;/p&gt;

&lt;p&gt;What is an ethereum?&lt;br&gt;
ethereum extraction&lt;br&gt;
ethereum creator Vitalik Butrin became acquainted with Bitcoin at the age of 17 and has since started writing for Bitcoin magazine and offering suggestions for improving it. But since these proposals did not materialize, he decided to build his own digital currency. In 2015, ethereum was introduced to the market.&lt;/p&gt;

&lt;p&gt;ethereum is actually a blockchain and its native cryptocurrency is called ETH. ethereum has its own browser and language and payment system. This blockchain also has no single and central controller and thousands of users voluntarily control it with their computer systems around the world. These users are called nodes or node networks. Nodes perform ethereum transaction verification and smart contracts on the network.&lt;/p&gt;

&lt;p&gt;What is extraction?&lt;br&gt;
In simple terms, extraction is the process of solving complex mathematical equations. Miners are network nodes that use their computer's processing time and power to solve these equations. ethereum extraction algorithm is proof of work that confirms ether or ethereum transactions. In addition, miners are responsible for creating new tokens and blocks in the process. In the end, every miner will be rewarded for their successful activity.&lt;/p&gt;

&lt;p&gt;Poof of work algorithm is the most popular consensus algorithm in blockchain cryptocurrencies. The consensus algorithm allows the user to use the same source of information as other users and ensures that all users on the network use the same source. The purpose of this algorithm is to prevent the entire system from being harmed when one or more users leave the network. The proof of work algorithm was first used in Bitcoin, but its concept and application is not limited to Bitcoin.&lt;/p&gt;

&lt;p&gt;Why is it necessary to extract ethereum?&lt;br&gt;
ethereum extraction&lt;br&gt;
The ethereum network, as we said, has its own blockchain. Any transaction in this blockchain must be approved by the miners. That's why transactions take time. This time is spent approving ethereum miners.&lt;/p&gt;

&lt;p&gt;ethereum transactions enter the ethereum blockchain after confirmation. So the blockchain needs to have enough space to store transactions. In addition to confirming transactions, miners add new blocks to the blockchain. In general, the task of a miner is to make sure that no transactions are made twice by mistake and that no errors occur in the network.&lt;/p&gt;

&lt;p&gt;When a miner can solve one of the equations, he adds the corresponding block to the blockchain and receives his reward. By doing this, the three goals of the extraction work are:&lt;/p&gt;

&lt;p&gt;Confirm correct transactions&lt;br&gt;
Add new blocks and create new storage space&lt;br&gt;
Receive rewards by miners and add new coins to the network&lt;br&gt;
will be done.&lt;/p&gt;

&lt;p&gt;Who is Miner? What is a Miner?&lt;br&gt;
ethereum extraction&lt;br&gt;
Miner is a person who provides his / her computer processing power to the network to approve transactions and record new transactions. Miner actually does this in the hope of receiving a reward from the network (new block extraction bonus, transaction registration fee).&lt;/p&gt;

&lt;p&gt;But it is not possible to extract ethereum with GPUs from home computers. ethereum extraction is actually done with the help of extraction pebbles, which is a collection of powerful graphics cards. These pebbles are also called miners.&lt;/p&gt;

&lt;p&gt;What is GPU Mining?&lt;br&gt;
GPU mining or mining with graphics cards is a popular way to extract cryptocurrencies, especially ethereum. This method was formed because bitcoin mining with CPUs (CPUs) was increasing day by day and on the other hand, it had created a kind of monopoly among ISIC manufacturers.&lt;/p&gt;

&lt;p&gt;GPU (GPU) extraction tools were much cheaper, and this method was able to find its place among important cryptocurrencies such as ethereum and Monroe. These cryptographers have written their algorithms based on the presence of small extractors and their persistence in the network and want to take care of them.&lt;/p&gt;

&lt;p&gt;What is the ethereum Extraction Algorithm?&lt;br&gt;
Digital currencies use different consensus algorithms for their operations. Consensus algorithms help the network to tolerate error. The two most important consensus algorithms are the Proof of Work algorithm and the Proof of Stake algorithm. Bitcoin and ethereum both use proof-of-work algorithms as market leaders in digital currencies. In the proof-of-work algorithm, the user must provide the network with the processing power of his computer to participate in the network and make a profit.&lt;/p&gt;

&lt;p&gt;In this algorithm, validation nodes (hereinafter referred to as miners or miners) perform the hashing of information. Hashing means creating a unique solution (function) to add information to the blockchain. A hash is a seemingly random string of letters and numbers that is created when solving a hash function. This string of letters and numbers is actually encrypted transaction information that is to be stored in the blockchain.&lt;br&gt;
1-2. Important points before choosing an extraction pool&lt;/p&gt;

&lt;p&gt;Currently, several small and large extraction ponds are active in the ethereum extraction process and have very different characteristics. But each miner can only join one pool. So before you make your final decision, you can experience membership in different pools and read about them well. Important points to consider when choosing a pool:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The size of the pool&lt;br&gt;
The more people who are members of the pool and the more devices that share their processing power with others, the better the chances of solving a block for all members. However, if the number of pool members is too large, the reward received by each member will decrease. For this reason, the size of the pool can be very effective in the profitability of its membership.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Currency payment method in the pool&lt;br&gt;
Another point to keep in mind when choosing a pool is the minimum withdrawal of currency from the account. If the minimum withdrawal is very high, for example 1 ethereum, you have to wait a long time for the currency you mined to reach this amount. So you will need a lot of time to make a profit or change the pool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pool fee&lt;br&gt;
Extraction pools, like any other service center, receive a fee for managing and organizing extraction and distribution of rewards among users. When you join the pool and use its services, you also have to pay some of your income to the pool as a fee. This fee is usually between 1% and 3%. It is better not to look for pools with 0% fee, because it is not right to trust them.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Method 3: Subscribe to cloud mining services&lt;br&gt;
Cloud extraction services are services in which a person does not need to share the processing power of a computer or extraction rig with others to subscribe, but can only extract ethereum for a fee or, in fact, rent an extraction machine.&lt;/p&gt;

&lt;p&gt;These services are actually a very large mining farm where people actually pay to participate in the mining farm costs and receive ethereum in return. This method is much easier than the other two methods and does not require much time or technical knowledge. But before joining a cloud mining service, ask yourself the following questions:&lt;/p&gt;

&lt;p&gt;Why should one lease one's mining machine to others when one can make a profit with it?&lt;br&gt;
Why not buy ethereum with the same membership fee to save in your account?&lt;br&gt;
Try to answer these questions carefully and thoroughly. Membership in these services is usually not cost-effective. In fact, cloud mining services are guaranteed to be more profitable for its operators than for its users.&lt;/p&gt;

&lt;p&gt;What are the problems of ethereum extraction?&lt;br&gt;
ethereum extraction&lt;br&gt;
ethereum mining, like most digital currency mining, has many challenges and opportunities. Although mining is still a lucrative business given ethereum price growth, you should be aware of its problems before starting any business. ethereum and bitcoin mining is no exception. The high cost of electricity and mining equipment, exposure to hacker attacks, and decentralization are some of the problems that we will address below.&lt;/p&gt;

&lt;p&gt;1- High costs of electricity and extraction equipment&lt;br&gt;
Mining cryptocurrencies is generally costly. If you want to extract ethereum legally and at the electricity rate, you have to pay approximately 900 tomans per kilowatt hour. This cost is usually calculated during the month and of course it varies depending on the model of your device. But keep in mind that the more powerful and profitable the device you buy, the higher its electricity costs will be.&lt;/p&gt;

&lt;p&gt;ethereum extraction devices are another part of your costs. Graphic ethereum extraction graphs are not cheap and are out of competition, especially with the constant advancement of technology. So if you want to upgrade your device by increasing the network hash rate, the extraction costs will also increase.&lt;/p&gt;

&lt;p&gt;2- The risk of hackers attacking your property&lt;br&gt;
Avoid ransomware&lt;br&gt;
Hackers are always one step ahead of security technologies. If you do not take good care of your assets and computer system, you may be exposed to cryptocurrencies and your passwords may be stolen. In 2017 alone, attacks on computer browsers increased by 31%. So if you set up only one mining node and do not secure it, you are actually doing an important service to hackers.&lt;/p&gt;

&lt;p&gt;3- Centralization&lt;br&gt;
The initial idea of ​​cryptocurrencies was to decentralize and take the power of money management out of the hands of a specific source such as a bank. But as time went on and many people turned to mining, it became necessary to design more powerful and better mining machines. Of course, the technology of making these devices and pebbles was given to certain companies. This is practically the opposite of the concept of decentralization of digital currencies. Although ethereum has entered the process using fewer graphic pebbles, it is still at risk.&lt;/p&gt;

&lt;p&gt;So before entering the ethereum extraction process, please know all the challenges you and the network face. Start buying and selling with full awareness to help both yourself and the network and ultimately have a healthy and secure income (source).&lt;br&gt;
Is ethereum extraction cost effective?&lt;br&gt;
For now, yes, as long as you follow the tips in the previous section of this article. ethereum reached $ 4,000 in 2021 and reached its highest ceiling. This shows that the approach of the people to the ethereum market is very positive and the extraction will be very profitable if the details are observed. For example, mining with the Pandaminer B5 Plus device will currently generate about 6 million Tomans per month for Miner.&lt;/p&gt;

&lt;p&gt;In the future, the conditions for making money from the ethereum network will probably change. ethereum is planning to move to the ethereum 2 network. This blockchain network will continue to operate with a stock proof algorithm. If this happens, the ethereum extraction process will be obsolete. But at the time of writing, ethereum extraction is still cost-effective.&lt;/p&gt;

&lt;p&gt;Know more:&lt;br&gt;
How long does ethereum extraction last? What percentage of ethereum has been extracted so far?&lt;br&gt;
ethereum, like Bitcoin, has no limit on the number of tokens it can offer. At the time of writing, 116,870,559 ethereums have been extracted, and will continue to be extracted until ethereum migrates to the blockchain network with the stock proof algorithm. Of course, to protect the network from inflation, only 18 million ethereums are extracted annually. This means two ethereums approximately every 14 seconds.&lt;/p&gt;

&lt;p&gt;How to extract ethereum 2.0?&lt;br&gt;
ethereum 2.0&lt;br&gt;
ethereum 2.0 is not actually extracted. ethereum 2 uses a stock proof algorithm. In this algorithm, instead of the need for processing power, it is necessary to register participation in the network with your assets. Having 32 ethereums, for example, will qualify you to participate in the network and decide whether to make changes or approve transactions. By providing these 32 ethereums to the network for approval, you will receive a reward (source).&lt;/p&gt;

&lt;p&gt;Is ethereum extraction legal in Iran?&lt;br&gt;
According to a government decree, the extraction of bitcoins, ethereum and other cryptocurrencies is possible only with the permission of the Ministry of Industry, Mines and Trade; Of course, in free trade zones, the ministry has delegated the responsibility of issuing licenses to the Free Zones Organization. Also, in some cities, there are restrictions on the establishment of Ramzarz mining units: it includes a limit of 120 km in Tehran, 50 km in Isfahan and 30 km in the centers of other provinces.&lt;/p&gt;

&lt;p&gt;Electricity supply is also possible by receiving a branch from the national grid or the construction of a power plant outside the national grid. . But according to the same law, the extraction of ciphers during peak hours is prohibited. Another important point of this decree is that the production centers of cryptocurrencies are considered as an industrial production unit and will be subject to the tax law, but if they issue their cryptocurrencies and return the resulting currency to Iran, their tax will be zero ( Source).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-free-ethereum-extraction-possible"&gt;
  &lt;/a&gt;
  Is free ethereum extraction possible?
&lt;/h2&gt;

&lt;p&gt;We keep emphasizing on the Wallx blog that "nothing is completely free", and so does ethereum Free! The least you can ask for when extracting ethereum for free is the internet, computer or mobile processing, and of course your time. However, there are tools that you can use to get ethereum without paying directly.&lt;/p&gt;

&lt;p&gt;Of course, these tools have little profitability, and in many cases the profit is so low that even its harvest is not economical. But the choice is yours anyway. The Idle-Empire website is one of the sites where you can get ethereum by subscribing and choosing from a variety of activities. For example, filling out questionnaires, watching promotional videos, and playing games are some of these methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-the-best-ethereum-extraction-software"&gt;
  &lt;/a&gt;
  Introducing the best ethereum extraction software
&lt;/h2&gt;

&lt;p&gt;ethereum extraction software, like other cryptocurrencies, covers a very wide range. In fact, there is a long list of ethereum extraction software that you can not excel at until you have used them. This makes it difficult to choose better software. But relying on the experience gained in this area and analyzing hundreds of user feedback and critiques can provide a limited but strong list of ethereum extraction software.&lt;/p&gt;

&lt;p&gt;1- ETHminer software&lt;br&gt;
The first recommended software is ETHminer software. As the name implies, this software is designed solely for ethereum Extraction and now supports Linux, Mac and Windows operating systems. When downloading this software, pay attention to select the version related to your operating system. With this software, in addition to ethereum, you can extract other cryptocurrencies that use the Ethash algorithm; Including Expansion, Elysmus, Metavars, Myosquin, Pearl, Classical ethereum, etc.&lt;/p&gt;

&lt;p&gt;2- CGMiner software&lt;br&gt;
The next software is CGMiner, which was released in 2011 and is still one of the most popular mining software. The main reason for the popularity and ubiquity of CGMiner is its excellent compatibility with three different hardware ASIC, FPGA, GPU. CG software is an open source software written in C language. The advantages of this software include measuring the desired hash rate with zero delay as well as advanced detection of new blocks. This software is also available for Linux, Mac and Windows operating systems.&lt;br&gt;
3- BitMinter software&lt;br&gt;
The third application is BitMinter, which offers great features to its users; These include a clear graphical interface as well as a very high connection speed to the Bitminter mining pool. This software entered the market in 2011 and it can be said that it has the most experienced mining pools in the field of cryptocurrency mining, so that it now has 450,000 registered user accounts. Another advantage of this software is that unlike CGMiner, it does not need to be installed, because it is based on the Java Network Launch Protocol (JNLP). You can easily run it on ASIC, FPGA, GPU hardware. The software is also compatible with Linux, Mac and Windows operating systems (source).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding remarks
&lt;/h2&gt;

&lt;p&gt;ethereum mining, like bitcoin mining, is an opportunity for digital currency market enthusiasts to both contribute to and benefit from network stability and security. In this Walx article, we tried to explain what is needed for ethereum mining. From now on, start the extraction rig with you to start extracting this amazing cryptocurrency.&lt;/p&gt;

&lt;p&gt;If you have questions about Bitcoin or ethereum mining, ask us in the comments section.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>cryptocurrency</category>
    </item>
  </channel>
</rss>
