<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Challenge: Write a true quine</title>
      <author>Siddharth</author>
      <pubDate>Sat, 08 May 2021 10:16:12 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/challenge-write-a-true-quine-4pme</link>
      <guid>https://dev.to/siddharthshyniben/challenge-write-a-true-quine-4pme</guid>
      <description>&lt;p&gt;By a true quine I mean a real true quine. Maybe the wikipedia article of quine will help:&lt;/p&gt;


&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/Quine_(computing)" rel="noopener noreferrer"&gt;Quine (computing)&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;&lt;p&gt;A &lt;b&gt;quine&lt;/b&gt; is a computer program which takes no input and produces a copy of its own source code as its only output. The standard terms for these programs in the computability theory and computer science literature are "self-replicating programs", "self-reproducing programs", and "self-copying programs".&lt;/p&gt;&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/Quine_(computing)" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;So no evals or reading the source like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;quine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;quine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; quine();&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;quine&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you do it? &lt;/p&gt;

&lt;p&gt;
  If you need a hint
  &lt;p&gt;The wikipedia article contains a Java Quine &lt;/p&gt;

&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Cool syntax #1 | Optional chaining</title>
      <author>Dalibor Belic</author>
      <pubDate>Sat, 08 May 2021 10:12:36 +0000</pubDate>
      <link>https://dev.to/daliboru/cool-syntax-1-optional-chaining-3410</link>
      <guid>https://dev.to/daliboru/cool-syntax-1-optional-chaining-3410</guid>
      <description>&lt;p&gt;Welcome to the first post of the &lt;em&gt;Cool Syntax&lt;/em&gt; series! I intend to publish a post, from time to time, on how to write clean JavaScript code like a pro!&lt;/p&gt;

&lt;p&gt;The first text is about &lt;strong&gt;optional chaining&lt;/strong&gt;. A syntactic sugar that makes reading content of an object much shorter and simpler. Let me show it to you. &lt;/p&gt;

&lt;p&gt;Take a look at this array of objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;art&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;paining&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;about&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The starry night&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vincent van Gogh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1889&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oil on canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;92.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;73.7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sculpture&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;about&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;David&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Michelangelo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;517&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;199&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;photography&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;about&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pillars of Creation (Eagle Nebula)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hubble Space Telescope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine we fetched some data, and now we have the &lt;code&gt;art&lt;/code&gt; array of objects. Then, let's say we want to log &lt;code&gt;type&lt;/code&gt; of each object in the &lt;code&gt;art&lt;/code&gt; array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;art&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;artPiece&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;artPiece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's log each &lt;code&gt;height&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;art&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;artPiece&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;artPiece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And... Yes, it will display the error message -&amp;gt; TypeError: Cannot read property 'height' of undefined. It's because we don't have the &lt;code&gt;dimensions&lt;/code&gt; (on each object), and we're trying to get a property from it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-1-ampamp-operator"&gt;
  &lt;/a&gt;
  SOLUTION 1 - &amp;amp;&amp;amp; operator
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;art&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;artPiece&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;artPiece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dimensions&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;artPiece&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution-2-optional-chaining"&gt;
  &lt;/a&gt;
  SOLUTION 2 - optional chaining
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;art&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;artPiece&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;artPiece&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine you have a complex object with many objects in objects...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;w &amp;amp;&amp;amp; w.x &amp;amp;&amp;amp; w.x.y &amp;amp;&amp;amp; w.x.y.z&lt;/code&gt; &lt;br&gt;
vs&lt;br&gt;
&lt;code&gt;w?.x?.y?.z&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I guess you see why optional chaining is the better solution (in terms of syntax)! &lt;/p&gt;

&lt;p&gt;I hope you enjoyed this short syntax-related post! Check out my previous posts and stay tuned for more cool JavaScript stuff!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Dalibor &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tips</category>
      <category>beginners</category>
      <category>syntax</category>
    </item>
    <item>
      <title>Do computer languages have common sense??</title>
      <author>Likhitha Guntaka</author>
      <pubDate>Sat, 08 May 2021 10:10:05 +0000</pubDate>
      <link>https://dev.to/guntakalikhitha/do-computer-languages-have-common-sense-ike</link>
      <guid>https://dev.to/guntakalikhitha/do-computer-languages-have-common-sense-ike</guid>
      <description>&lt;p&gt;Learning any computer language is one thing. Integrating all that one has learned into professional-level software is a different cup of tea. Many books teach us other concepts in languages that computer understands in their various garbs. With practice, can one quickly master any norms and start how the program’s layout should be? But believe me, putting the whole logic across to the computer is an altogether different story! With all the super-intelligence of the laptop, it still lacks commonsense, which plays a leading role in crucial matters. While our faculties allow us to judge by sight what needs to come where, the same is done on the computer by reading, verifying, counting, comparing, checking, and finally deciding what should be written.&lt;/p&gt;

&lt;p&gt;“Don your starched thinking caps and go head to work out the logic independently.”&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Vue.js Project to help learn English with Youglish API and OwlBot Dictionary API.</title>
      <author>Cihat Salik</author>
      <pubDate>Sat, 08 May 2021 10:02:16 +0000</pubDate>
      <link>https://dev.to/cihat/english-teaching-project-with-vue-js-35b5</link>
      <guid>https://dev.to/cihat/english-teaching-project-with-vue-js-35b5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#helpful-content-when-memorizing-english-words"&gt;
  &lt;/a&gt;
  Helpful content when memorizing English words
&lt;/h2&gt;

&lt;p&gt;I tried to make a project that will help you learn English with Vue.js. It gives you to understand the most common 1000 words in English randomly according to the range you entered and with the examples used on Youtube with Youglish API. I hope it will be useful content when studying English, memorizing words.&lt;/p&gt;

&lt;p&gt;My purpose of doing this project was when I realized that I had a hard time memorizing English words. I did this project to get a little more familiar with the words. I think hard work can be overcome with simple solutions. My english is not perfect at the moment, but I am working on it. I hope it becomes a little easier for me to learn English with this project. I did this project in English-Turkish. But you can do this project in your native language by forking.&lt;/p&gt;

&lt;p&gt;I will share the source code url of the project. You can see how he does it from there. I used two APIs in the project. One of them is OWLBOT DICTIONARY API and the other is Youglish API. These APIs helped me a lot in the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project-is-as-follows"&gt;
  &lt;/a&gt;
  The project is as follows;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There is the most common 1000-word json in English, and the key values in this json correspond to English-Turkish words. &lt;br&gt;
You can change the most commonly used 1000 words in your language to JSON by forking the repo.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwHD0uRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay6hg4wn51rgbpvnzn7y.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwHD0uRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay6hg4wn51rgbpvnzn7y.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the project, there are two input ranges from 0 to 1000, the user selects the desired value in these ranges and comes across the user randomly in the desired range.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kxad16XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szbng1fvodhacm4wt163.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kxad16XT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szbng1fvodhacm4wt163.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It sends the APIs we use with this word, bringing the meaning of the word, an example sentence, the place where it is used in these APIs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oNor5-w5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quqc76wn0hay5b4wivxm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oNor5-w5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quqc76wn0hay5b4wivxm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpwe11So--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88rtf4gozp8vf3qvtbth.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpwe11So--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88rtf4gozp8vf3qvtbth.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://cihat.github.io/dictionary/"&gt;Project Live&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://github.com/cihat/dictionary"&gt;Source Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project Gif
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R-nsvDwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/57585087/117534885-f3fc9180-affb-11eb-91b5-72734fc07fc4.gif" alt="dictionary"&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 Things you need to know in React.</title>
      <author>Sohrab Hossain</author>
      <pubDate>Sat, 08 May 2021 09:33:33 +0000</pubDate>
      <link>https://dev.to/sohrab09/10-things-you-need-to-know-in-react-1cg7</link>
      <guid>https://dev.to/sohrab09/10-things-you-need-to-know-in-react-1cg7</guid>
      <description>&lt;p&gt;What is react?&lt;/p&gt;

&lt;p&gt;React is an open source, front end, declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Here are just few of the reasons why people choose to program with React.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;React if fast. Apps made in React can handle complex updates and still feet quick and responsive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React is modular. Instead of writing large, dense files of code, you can write many smaller, reusable files. Reacts modularity can be a beautiful solution to JavaScript’s maintainability problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React is scalable. Large programs that display a lot of changing data are where React performs best.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React is flexible. You can use React for interesting projects that have nothing to do with making a web app. People are still figuring out Reacts potential.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React is popular. While this reason has admittedly little to do with Reacts quality, the truth is that understanding React will make you more employable.&lt;br&gt;
What React Components?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML via a render () function.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Components come in two types
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Class Components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function Components&lt;/p&gt;

&lt;p&gt;Class Components: A class component is a more featured way to define a React component. It also acts like a function that receives props, but that function also considers a private internal state as additional input that controls the returned JSX.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When creating a React component, the component’s name must start with an upper-case letter.&lt;/p&gt;

&lt;p&gt;The component has to include the extends React. Component statement, this statement creates an inheritance to React. Component, and gives your component access to React. Component’s functions.&lt;/p&gt;

&lt;p&gt;The component also requires a render () method, this method returns HTML.&lt;/p&gt;

&lt;p&gt;Example: Create a Class components called Car&lt;/p&gt;

&lt;p&gt;class Car extends React. Components {&lt;/p&gt;

&lt;p&gt;render () {&lt;/p&gt;

&lt;p&gt;return &lt;/p&gt;
&lt;h1&gt; Hi, I’m a Rolls Royce Car! &lt;/h1&gt;;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Now React application has a component called Car, which returns a &lt;/p&gt;
&lt;h1&gt; element.

&lt;/h1&gt;
&lt;p&gt;To use this component in your application, use similar syntax as normal HTML: &lt;/p&gt;

&lt;p&gt;Example: Display the Car component in the “root” element:&lt;/p&gt;

&lt;p&gt;ReactDOM.render(, document.getElementById(‘root’));&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Function Components: A functional component is just a plain JavaScript function which accepts props as an argument and returns a React element. … Component and create a render function which returns a React element. This requires more code but will also give you some benefits which you will see later on.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here is the same example as above, but created using a Function component instead.&lt;/p&gt;

&lt;p&gt;A Function component also returns HTML, and behaves pretty much the same way as a Class component, but Class components have some additions, and will be preferred in this tutorial.&lt;/p&gt;

&lt;p&gt;Example: Create a Function component called Car&lt;/p&gt;

&lt;p&gt;function Car () {return &lt;/p&gt;
&lt;h1&gt;Hi, I am also Rolls Royce Car! &lt;/h1&gt;;}

&lt;p&gt;Once again, your React application has a Car component.&lt;/p&gt;

&lt;p&gt;Refer to the Car component as normal HTML (except in React, components must start with an upper-case letter):&lt;/p&gt;

&lt;p&gt;Example: Display the Car component in the "root" element:&lt;/p&gt;

&lt;p&gt;ReactDOM.render(, document.getElementById('root'));&lt;/p&gt;

&lt;p&gt;What are Props?&lt;/p&gt;

&lt;p&gt;React is a component-based library which divides the UI into little reusable pieces. In some cases, those components need to communicate (send data to each other) and the way to pass data between components is by using props.&lt;/p&gt;

&lt;p&gt;“Props” is a special keyword in React, which stands for properties and is being used for passing data from one component to another. But the important part here is that data with props are being passed in a uni-directional flow. (one way from parent to child)&lt;/p&gt;

&lt;p&gt;Here are two important things about Props:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Props are read-only.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Props cannot be modified.&lt;/p&gt;

&lt;p&gt;Using Props in React: I will be explaining how to use Props step by step&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firstly, define an attribute and its value(data).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then pass it to child components by using props.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, render the Props Data.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example, we have a ParentComponent including another component (child):&lt;/p&gt;

&lt;p&gt;class ParentComponent extends Component {&lt;/p&gt;

&lt;p&gt;render () {&lt;/p&gt;

&lt;h1&gt;

I’m the parent components.



&lt;/h1&gt;

&lt;p&gt;);&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;And this is our ChildComponents:&lt;/p&gt;

&lt;p&gt;const ChildComponents = () =&amp;gt; {&lt;/p&gt;

&lt;p&gt;return &lt;/p&gt;
&lt;p&gt; I’m the 1st child! &lt;/p&gt;


&lt;p&gt;};&lt;br&gt;
What is state?&lt;/p&gt;

&lt;p&gt;Answer: React components has a built-in state object. The state object is where you store property values that belongs to the component. When the state object changes, the component re-renders.&lt;/p&gt;

&lt;p&gt;Here are two important things about State:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;State changes can be asynchronous.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;State can be modified using this.setState&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ü Using State in React: I will be explaining how to use State step by step.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We import useState Hook from React. It lets us keep local state in a function component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the example components, we declare a new state variable by calling the useState Hook. It returns a pair of values, to which we give names.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the user clicks, we call setCount with a new value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The State object can contain as many properties as you like:&lt;/p&gt;

&lt;p&gt;Example: Specify all the properties your component need:&lt;/p&gt;

&lt;p&gt;class Car extends React.Component {constructor(props) {super(props);this.state = {brand: "Ford",model: "Mustang",color: "red",year: 1964};}render() {return (&lt;/p&gt;
&lt;h1&gt;My Car&lt;/h1&gt;);}}

&lt;p&gt;What is JSX?&lt;/p&gt;

&lt;p&gt;JSX stands for JavaScript XML. JSX makes it easier to write and add HTML in React.&lt;/p&gt;

&lt;p&gt;JSX allows us to write HTML in React.&lt;/p&gt;

&lt;p&gt;JSX is an inline markup that looks like HTML and gets transformed to JavaScript. A JSX expression starts with an HTML-like open tag, and ends with the corresponding closing tag. JSX tags support the XML self-close syntax so you can optionally leave the closing tag off.&lt;/p&gt;

&lt;p&gt;Coding JSX&lt;/p&gt;

&lt;p&gt;JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement() and/or appendChild() methods.&lt;/p&gt;

&lt;p&gt;JSX converts HTML tags into react elements.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;With JSX:&lt;/p&gt;

&lt;p&gt;const myelement = &lt;/p&gt;
&lt;h1&gt;I Love JSX!&lt;/h1&gt;;

&lt;p&gt;ReactDOM.render(myelement, document.getElementById(‘root’));&lt;/p&gt;

&lt;p&gt;Without JSX:&lt;/p&gt;

&lt;p&gt;const myelement = React.createElement(‘h1’, {}, ‘I do not use JSX!’);&lt;/p&gt;

&lt;p&gt;ReactDOM.render(myelement, document.getElementById(‘root’));&lt;br&gt;
What is virtual DOM?&lt;/p&gt;

&lt;p&gt;Virtual DOM is a virtual representation of the real DOM.&lt;/p&gt;

&lt;p&gt;The virtual DOM then sends a batch update to the real DOM to update the UI. React uses virtual DOM to enhance its performance.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;How does virtual DOM works?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;the Virtual DOM is a node tree that lists elements and their attributes and content as objects and properties. React’s render() method creates a node tree from React components and updates this tree in response to mutations in the data model, caused by actions.&lt;/p&gt;

&lt;p&gt;htmlhead lang="en"bodyul class="list"li class="list__item""List item"&lt;/p&gt;

&lt;p&gt;What is Optimizing performance in React?&lt;/p&gt;

&lt;p&gt;Performance Optimization of a programs and software is the process modifying a software system to make it work more efficiently and execute more rapidly.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;21 Performance Optimization Techniques for React Apps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using Immutable Data Structures&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function/Stateless Components and React.PureComponent&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multiple Chunk Files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using Production Mode Flag in Webpack&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dependency optimization&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use React.Fragments to Avoid Additional HTML Element Wrappers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid Inline Function Definition in the Render Function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Throttling and Debouncing Event Action in JavaScript&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid using Index as Key for map&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoiding Props in Initial States&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spreading props on DOM elements&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Reselect in Redux to Avoid Frequent Re-render&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid Async Initialization in componentWillMount()&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Memoize React Components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS Animations Instead of JS Animations&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using Web Workers for CPU Extensive Tasks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using a CDN&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Virtualize Long Lists&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Analyzing and Optimizing Your Webpack Bundle Bloat&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consider Server-side Rendering&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable Gzip Compression on Web Server&lt;br&gt;
What is React Hook?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It allows you to use state and other React features without writing a class. Hooks are the functions which “hook into” React state and lifecycle features from function components. It does not work inside classes.&lt;/p&gt;

&lt;p&gt;When to use Hook: If you write a function component, and then you want to add some state to it, previously you do this by converting it to a class. But now you can do it by using a Hook inside the existing function component.&lt;/p&gt;

&lt;p&gt;Rules of Hook: Hooks are similar to JavaScript functions, but you need to follow these two rules when using them. Hook’s rule ensures that all the stateful logic in a component is visible in its source code. These rules are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Only call Hooks at the top level&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Do not call Hooks inside loops, conditions, or nested functions. Hooks should always be used at the top level of the React functions. This rule ensures that Hooks are called in the same order each time a component render.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Only call Hooks from React functions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You cannot call Hooks from regular JavaScript functions. Instead, you can call Hooks from React function components. Hooks can also be called from custom Hooks.&lt;/p&gt;

&lt;p&gt;Pre requisites for React Hook&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Node version 6 or above&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NPM version 5.2 or above&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create-react-app tool for running the React App&lt;br&gt;
What is Conditional Rendaring?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conditional rendering is a term to describe the ability to render different user interface (UI) markup if a condition is true or false.&lt;br&gt;
In React, it allows us to render different elements or components based on a condition.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;7 Ways to Implement Conditional Rendering in React Applications
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Using an if…else Statement&lt;/li&gt;
&lt;li&gt;Using a switch Statement&lt;/li&gt;
&lt;li&gt;Using Element Variables&lt;/li&gt;
&lt;li&gt;Using Ternary Operators&lt;/li&gt;
&lt;li&gt;Using Logical &amp;amp;&amp;amp; (Short Circuit Evaluation)&lt;/li&gt;
&lt;li&gt;Using Immediately Invoked Function Expressions (IIFEs)&lt;/li&gt;
&lt;li&gt;Using Enhanced JSX Libraries
Composition is the key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Parent components that own the state are often referred to as container components. They are responsible for state management and rendering children (this sounds so odd). Child components are used to trigger event handlers passed down from parents (like the InputBox component in previous examples) and to display the data.&lt;/p&gt;

&lt;p&gt;Child components that are responsible for displaying the data are called presentational components.&lt;/p&gt;

&lt;p&gt;Container component is often responsible for fetching data, API calls (see componentDidMount() lifecycle method) and so on. You should keep this in one place to avoid side-effects in presentational components. Those should be as dumb as possible about everything other than displaying the data.&lt;/p&gt;

&lt;p&gt;This separation of concerns and terminology were popularized by Dan Abramov, the author of Redux. You can read more about it in his article.&lt;/p&gt;

&lt;p&gt;You can see that it all fits together. When every component follows single responsibility principle it can be composed with others and reused.&lt;/p&gt;

&lt;p&gt;The biggest challenge is to figure out how to divide those responsibilities and where to put the state. If you want to know more about the topic search for “thinking in react” articles.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Why is math needed, when we have HTML+CSS?</title>
      <author>Yuri Filatov</author>
      <pubDate>Sat, 08 May 2021 08:53:16 +0000</pubDate>
      <link>https://dev.to/filatovv/why-is-math-needed-when-we-have-html-css-3c84</link>
      <guid>https://dev.to/filatovv/why-is-math-needed-when-we-have-html-css-3c84</guid>
      <description>&lt;p&gt;Hey! I've decided to make some tutorials about CSS+HTML, something like "website school", so first of all we have to answer all these questions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-really-web-development-the-future"&gt;
  &lt;/a&gt;
  Is really web development the future?
&lt;/h3&gt;

&lt;p&gt;There is no exact answer to this question. Remember, today one programming language is popular, the next day not anymore. &lt;br&gt;
According to &lt;a href="https://www.codingdojo.com/blog/top-7-programming-languages"&gt;Codingdojo&lt;/a&gt;, today the web development direction becomes more and more popular.&lt;/p&gt;

&lt;p&gt;It can't be named as future, as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are other directions that still have value. If all people start coding js, who will be making for example custom software?&lt;/li&gt;
&lt;li&gt;That is not the right question. It can be the most popular direction, but other directions that are not really popular such as ruby have their value. That means that this direction doesn't need a lof of people, but some with strict requirements (expirience, quality of projects and etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#then-what-language-to-start"&gt;
  &lt;/a&gt;
  Then, what language to start?
&lt;/h3&gt;

&lt;p&gt;It is a question for you. You shouldn't start coding on js just because it is popular. One day it becomes not and you have to choose another one. Choose something you like and you are really good in. Why? Because it is your key to have always job - your individuality and your quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-programmers-need-math"&gt;
  &lt;/a&gt;
  Why do programmers need math?
&lt;/h3&gt;

&lt;p&gt;More and more programmers (if I can name them so) think that programming is &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coding&lt;/li&gt;
&lt;li&gt;Language to learn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;logic&lt;/li&gt;
&lt;li&gt;creativity&lt;/li&gt;
&lt;li&gt;MATH&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#why-math"&gt;
  &lt;/a&gt;
  Why math?
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Do you really know fast algorythms to solve some problem without math?&lt;/em&gt;&lt;br&gt;
No. You can find the solution, but do you really understand to make your code faster in future?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have your algorythms same value as a fast one?&lt;/em&gt;&lt;br&gt;
No. Because logic brings shorter algorythms to solve any problem.&lt;/p&gt;

&lt;p&gt;Logic brings faster solution and better quality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can deal with problems faster as you find the solution faster.&lt;/li&gt;
&lt;li&gt;Your code is shorter &lt;/li&gt;
&lt;li&gt;Your code is structured. All variables and methods have max value. So your program works faster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Math brings you logic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You know fast algorythms and you know their foundation&lt;/li&gt;
&lt;li&gt;You know programming definitions as it is in math&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recursive functions - fast function processing&lt;/li&gt;
&lt;li&gt;Binary Trees - Fast Walk Through Data&lt;/li&gt;
&lt;li&gt;Sorting algorithms - a way to save space and time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you study HTML+CSS, where there are no algorythms, remember, that logic is needed everywhere and math still have value even here: you save your time.&lt;/p&gt;

&lt;p&gt;Btw, I want to start real tutorials with tasks about HTML+CSS, moving to JS and databases.&lt;/p&gt;

&lt;p&gt;Follow me, if it is ineresting for you!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>productivity</category>
    </item>
    <item>
      <title>hopOn -  Car Sharing and Rental App</title>
      <author>Shivani Singh</author>
      <pubDate>Sat, 08 May 2021 08:14:01 +0000</pubDate>
      <link>https://dev.to/singhshivani/hopon-car-sharing-and-rental-app-fjb</link>
      <guid>https://dev.to/singhshivani/hopon-car-sharing-and-rental-app-fjb</guid>
      <description>&lt;p&gt; 
 A car sharing &amp;amp; rental app using &lt;a href="https://flutter.dev/"&gt;Flutter, &lt;/a&gt;&lt;a href="https://firebase.google.com/"&gt;Firebase &lt;/a&gt; &amp;amp; &lt;a href="https://cloud.google.com/"&gt;Google Maps APIs&lt;/a&gt; 🔥
&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#about-the-app"&gt;
  &lt;/a&gt;
  About the App 🚘
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;hopOn is flutter based application for car sharing and rental services.&lt;/li&gt;
&lt;li&gt;The two main functions that app includes are -

&lt;ol&gt;
&lt;li&gt;Rent a nearby car &lt;/li&gt;
&lt;li&gt;Give your car on rent&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The app uses 3 Google Maps API

&lt;ol&gt;
&lt;li&gt;Geocoding API (provides geocoding and reverse geocoding of addresses)&lt;/li&gt;
&lt;li&gt;Places API (returns information about places using HTTP requests)&lt;/li&gt;
&lt;li&gt;Directions API (returns JSON or XML-formatted directions between locations)&lt;/li&gt;
&lt;li&gt;This app has been completed with the detail study which includes Wireframe, methods, API study etc. All the information has been provided in the Github repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#wireframe"&gt;
  &lt;/a&gt;
  Wireframe✒️
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/3ALznWfTL7k7nPWyPuMfKT/Vehicle-Sharing-App?node-id=520%3A2"&gt;https://www.figma.com/file/3ALznWfTL7k7nPWyPuMfKT/Vehicle-Sharing-App?node-id=520%3A2&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Feel free to ask your doubts and contribute to this project.&lt;/li&gt;
&lt;li&gt;Find the app video with the detail explaination about methods and resources(Firebase, GCP etc.) on Github - &lt;a href="https://github.com/Singh-Shivani/hopOn/"&gt;https://github.com/Singh-Shivani/hopOn/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Do ⭐ the repo.&lt;/li&gt;
&lt;li&gt;Keep hustling &amp;amp; Stay safe❤️&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flutter</category>
      <category>googlecloud</category>
      <category>firebase</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Top 5 Reasons to Launch P2P Crypto Exchange – You Need to know!</title>
      <author>KatrinKunze</author>
      <pubDate>Sat, 08 May 2021 08:00:39 +0000</pubDate>
      <link>https://dev.to/katrinkunze8/top-5-reasons-to-launch-p2p-crypto-exchange-you-need-to-know-2g3d</link>
      <guid>https://dev.to/katrinkunze8/top-5-reasons-to-launch-p2p-crypto-exchange-you-need-to-know-2g3d</guid>
      <description>&lt;p&gt;Cryptocurrencies have been touching new highs every day as many people are interested in adopting cryptocurrencies for facilitating seamless transactions. It makes the crypto exchanges popular and establishes them as a profitable business. Many crypto traders are utilizing P2P exchanges to make hassle-free transactions by devoiding third parties. The growing demand for  P2P crypto exchange development implies the potency of P2P exchange. In this blog, you will get to know the outline description of P2P crypto exchanges and why their demands are increasing in the crypto space.&lt;/p&gt;

&lt;p&gt;What is P2P Crypto Exchange?&lt;/p&gt;

&lt;p&gt;In the early days of crypto trading before the arrival of crypto exchange platforms, a person interested in selling/receiving cryptocurrencies is required to meet with other people in person to barter their digital assets in exchange for other assets. Then popped up the centralized exchange platforms which incur high transaction charges. Hence, the crypto community evolved with P2P crypto exchanges to promote direct trading and reduced transaction costs. &lt;/p&gt;

&lt;p&gt;P2P crypto exchanges allow buyers and sellers to communicate directly and complete the trading. Escrow system is used to monitor the crypto exchanges and helps to ensure the secured crypto transfers.&lt;/p&gt;

&lt;p&gt;How does P2P Exchange work?&lt;br&gt;
If you want to conduct crypto trading in a P2P exchange, follow the below steps&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        Register details in P2P crypto exchange and create an
              account.

          Based on the requirements, view the orders available in the crypto exchange.
         Select the amount you want to trade and place an order.
         Finally, buy or sell the cryptos with the person directly without any intermediaries.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Top 5 Advantages of P2P Crypto Exchange&lt;br&gt;
Secured business&lt;/p&gt;

&lt;p&gt;P2P Crypto Exchanges have followed high-security mechanisms like 2-factor authentication, Email verification, biometric authentication, SSL to ensure security in crypto transfers. It makes the system reliable, secured and makes it harder for hacking. Hence the P2P exchange launching is a secured business.&lt;/p&gt;

&lt;p&gt;High Profits&lt;/p&gt;

&lt;p&gt;Exchange platforms are earning their major revenues from transaction fees that have been collected from traders. Professional crypto-traders perform crypto trading extensively that will directly raise the transaction revenues and earn the high profits.&lt;/p&gt;

&lt;p&gt;No third parties&lt;/p&gt;

&lt;p&gt;In a P2P Exchange, the seller and buyer interacts directly, while the escrow system monitors the transactions and removes the intermediaries, which could automatically reduce operational costs and boost up your business.&lt;/p&gt;

&lt;p&gt;Quick crypto transfers&lt;/p&gt;

&lt;p&gt;The transaction takes place in a peer-to-peer way with no middlemen intervention, saving time and facilitating the quick transaction. Handling the P2P crypto exchanges is easy, can be processed quickly and hassle-free.&lt;/p&gt;

&lt;p&gt;Future-proofed business&lt;/p&gt;

&lt;p&gt;Cryptocurrencies will reach a high peak in the future. So, advanced P2P crypto exchanges will continue to grow in demand. Launching P2P crypto exchanges will help to occupy a leading position in the crypto space.&lt;/p&gt;

&lt;p&gt;Conclusion&lt;br&gt;
This is all about the explanation of the P2P crypto exchange. Now you have understood the benefits of the P2P crypto exchange business. If you want to know more about P2P exchange, approach Blockchain Firm and leverage the lucrative deals!&lt;/p&gt;

&lt;p&gt;For More: &lt;a href="https://www.blockchainfirm.io/p2p-exchange-development"&gt;https://www.blockchainfirm.io/p2p-exchange-development&lt;/a&gt;&lt;/p&gt;

</description>
      <category>p2pcrypto</category>
      <category>cryptoexchange</category>
    </item>
    <item>
      <title>Do you use subdomains?</title>
      <author>Madza</author>
      <pubDate>Sat, 08 May 2021 07:41:52 +0000</pubDate>
      <link>https://dev.to/madza/do-you-use-subdomains-2go1</link>
      <guid>https://dev.to/madza/do-you-use-subdomains-2go1</guid>
      <description>&lt;p&gt;Subdomains are the part of a domain that comes before the main domain name and domain extension. They are created to organize and navigate to different sections of the website.&lt;/p&gt;

&lt;p&gt;Do you use subdomains for your personal domain like &lt;code&gt;awesomeproject.mydomain.com&lt;/code&gt;? &lt;/p&gt;

&lt;p&gt;If so, could you elaborate on your reasons why do you prefer them over subdirectories like &lt;code&gt;mydomain.com/awesomeproject&lt;/code&gt; or buying a dedicated domain like &lt;code&gt;awesomeproject.com&lt;/code&gt;?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>domain</category>
    </item>
    <item>
      <title>Beautifully encapsulate table related logic using a custom data source + sorting using directives</title>
      <author>Adithya Sreyaj</author>
      <pubDate>Sat, 08 May 2021 07:03:51 +0000</pubDate>
      <link>https://dev.to/angular/beautifully-encapsulate-table-related-logic-into-a-custom-data-source-sorting-using-directives-1pc7</link>
      <guid>https://dev.to/angular/beautifully-encapsulate-table-related-logic-into-a-custom-data-source-sorting-using-directives-1pc7</guid>
      <description>&lt;p&gt;Tables are a fundamental part of the web. It is used in most of the applications out there to present data in a readable and digestible way. Tables can come out as very simple components, but they can be a real pain to work with if things are not organized properly. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;When the table we are dealing with has a lot of columns, rows, and multiple functionalities like sorting, filtering, etc, things can get real complex real fast.&lt;/p&gt;

&lt;p&gt;If we are not very careful in architecting tables for our applications, there can be all sorts of issues that might come into the picture as we start developing. This is the primary reason why we have a lot of table-related libraries available.&lt;/p&gt;

&lt;p&gt;One such great component for Angular is the Table component from Angular Material. It's a very solid table component that can be used without any hassle and is well documented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkeccFRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ce6zmfvkqijuuum8ewec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkeccFRJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ce6zmfvkqijuuum8ewec.png" alt="Table with sorting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-commonly-seen"&gt;
  &lt;/a&gt;
  Features commonly seen
&lt;/h2&gt;

&lt;p&gt;The most common features that can be seen in any table component are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sorting&lt;/li&gt;
&lt;li&gt;Filtering&lt;/li&gt;
&lt;li&gt;Pagination
etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Implementing these from scratch could take time and If you don't know what you are doing, can lead to performance issues when dealing with huge data. In this article, I will be only focusing on managing the data for the table in a nice way and how to implement sorting in the table with the help of directives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-data-source"&gt;
  &lt;/a&gt;
  Creating the Data Source
&lt;/h2&gt;

&lt;p&gt;This approach is seen in the Angular Material table where we have the concept of Data Source. Here is what the official doc says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The DataSource is meant to serve as a place to encapsulate any sorting, filtering, pagination, and data retrieval logic specific to the application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The data source will be the "one place" where we will segregate all the logic related to the table. In this way, our component will not be polluted. Also, another benefit that we get is that the common functionalities can be shared.&lt;/p&gt;

&lt;p&gt;We are going to try and build something similar to the Material DataSource. The whole point of the post is to show you that you could do things this way too. It's like a starting point for someone who would like to explore more on this stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-abstract-class"&gt;
  &lt;/a&gt;
  Creating an abstract class
&lt;/h3&gt;

&lt;p&gt;First, we start by creating a simple abstract class that implements some of the basic stuff that we need for the table to work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SubSink&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;dataSubject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// The exposed observable for the table  to user&lt;/span&gt;
  &lt;span class="nx"&gt;data$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;destory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * The data which drives the table. It will accept
   * either array or an observable.
   * @param data - data for the table
   */&lt;/span&gt;
  &lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me break down the code a bit.&lt;br&gt;
The class &lt;code&gt;DataSource&amp;lt;T&amp;gt;&lt;/code&gt; accepts a generic type that can be provided to have proper typing for the data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;subsink&lt;/code&gt; is a tiny little library that can help you manage your subscriptions with ease. You can initialize it and add subscriptions to it &lt;code&gt;subs.add(subscription)&lt;/code&gt; and then do&lt;br&gt;
&lt;code&gt;subs.unsubscribe()&lt;/code&gt; to unsubscribe from all of the subscriptions.&lt;br&gt;
Check it out here:  &lt;a href="https://www.npmjs.com/package/subsink"&gt;npm&lt;/a&gt;  |  &lt;a href="https://github.com/wardbell/subsink#readme"&gt;github&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Firstly, Initialize a subject that will be used for pushing the data out of the data source. The &lt;code&gt;data$&lt;/code&gt; observable is what our table will be relying on.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;constructor&lt;/code&gt; takes an initial value for the data source which is not mandatory.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;destory&lt;/code&gt; method does the cleanup of subscriptions and should be called in the table component's &lt;code&gt;ngOnDestroy&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;updateData&lt;/code&gt; method accepts either an array or an observable just for some flexibility. This function can be used to update the data in the data source. Say if you are getting data from an API call in the component, you can call this method and pass the data to the data source. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-it-in-the-component"&gt;
  &lt;/a&gt;
  Using it in the component
&lt;/h2&gt;

&lt;p&gt;Now that we have our basic data source ready, we can see how it can be used inside a component.&lt;/p&gt;

&lt;p&gt;Once the component is created, In my case &lt;code&gt;User&lt;/code&gt; component, the first thing we have to do is to create a dedicated data source for the User component. I call it the &lt;code&gt;UserDataSoruce&lt;/code&gt;. We just have to create a class and extend our base &lt;code&gt;DataSoruce&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserDataSoruce&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now, this is all we need. Once we start implementing the sorting functionality, more things will be added to the data source.&lt;/p&gt;

&lt;p&gt;Setting up the component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app-user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./user.component.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./user.component.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;changeDetection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectionStrategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OnPush&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userDataSoruce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserDataSoruce&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt; &lt;span class="c1"&gt;// Create the instance of datasoruce&lt;/span&gt;
  &lt;span class="nx"&gt;users$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// observable used by table&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;userService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;trackBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interesting parts of the code above is creating the instance of our &lt;code&gt;UserDataSoruce&lt;/code&gt; class. And in the &lt;code&gt;ngOnInit&lt;/code&gt; we get the user data from the API and is &lt;br&gt;
and the template file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Last name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Birthday&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt;&lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let user of users$ | async;trackBy:trackBy"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.firstname}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.lastname}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.birthday}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our table should be up and running by now. This would seem overly complicated for just showing some data in a table. Yes, it does! But once we start to implement sorting and other features, it will be clear why this would be a better approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-sorting"&gt;
  &lt;/a&gt;
  Implementing Sorting
&lt;/h2&gt;

&lt;p&gt;Now that we have the table and the data source setup, it's time to implement sorting.&lt;br&gt;
How would you normally implement sorting? Will all the logic for sorting be added inside your component?&lt;/p&gt;

&lt;p&gt;In this approach, we are going to abstract away almost all of the logic related to sorting into our data source and by using directives.&lt;/p&gt;

&lt;p&gt;So what we are trying to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user should be able to sort the column in ascending or descending order&lt;/li&gt;
&lt;li&gt;user will be seeing the default sort data on clicking 3 times:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Default --&amp;gt; Ascending --&amp;gt; Descending --&amp;gt; Default&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user will be shown arrows to mark the current sort direction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The approach that we are going to take is very similar to what is seen in the Angular Material Sort component. You will be able to understand some of the inner workings of it.&lt;/p&gt;

&lt;p&gt;### Creating the necessary directives&lt;/p&gt;

&lt;p&gt;Our directives will be taking care of all the above points. We don't have to maintain any kind of state inside our component, making the component clean.&lt;/p&gt;

&lt;p&gt;We will be needing two directives (one is actually gonna be a component):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Main Sorter Directive&lt;/li&gt;
&lt;li&gt;Sort Header Component&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#main-sorter-directive"&gt;
  &lt;/a&gt;
  Main Sorter Directive
&lt;/h4&gt;

&lt;p&gt;This should be placed on the &lt;code&gt;table&lt;/code&gt; tag and acts as our main parent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[sorter]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- selector&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;sortChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SortChangeEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// If column is not the same as active, reset the direction&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;active&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Default --&amp;gt; Ascending&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="c1"&gt;// Ascending --&amp;gt; Descending&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Descending --&amp;gt; Default&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Emit the current active column and the direction&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;direction&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two variables for managing the currently active column and the direction of sort. Then we have an event that will be emitted when the user clicks on the sort header.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sort&lt;/code&gt; function takes the column id to sort as the input. It just modifies the state according to the column being sorted and the prev state.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sort-header-component"&gt;
  &lt;/a&gt;
  Sort Header component
&lt;/h4&gt;

&lt;p&gt;So we are using a component here as we need to show the arrow mark based on the sort direction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[sortHeader]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;div class="sort-col"&amp;gt;
      &amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;
      &amp;lt;div ngClass]="{
          arrow: true,
          hide: sorter?.active !== ref || sorter?.direction === null,
          asc: sorter?.active === ref &amp;amp;&amp;amp; sorter?.direction === 'asc',
          desc: sorter?.active === ref &amp;amp;&amp;amp; sorter?.direction === 'desc'
        }"&amp;gt;🡡&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- check the source code for styles&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SortHeader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- unique key for the column&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;HostListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- call the sort function in the parent&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- Inject the parent directive&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interesting part of the above code is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are injecting our parent directive in the header component. Angular's DI system will then provide us with access to the parent sorter where we have written our sort function.&lt;br&gt;
Read more: &lt;a href="https://angular.io/guide/hierarchical-dependency-injection#hierarchical-injectors"&gt;https://angular.io/guide/hierarchical-dependency-injection#hierarchical-injectors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have our sort related directives ready, this is how we update the template code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt; &lt;span class="na"&gt;sortHeader&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"lastname"&lt;/span&gt; &lt;span class="na"&gt;sortHeader&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last name&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"birthday"&lt;/span&gt; &lt;span class="na"&gt;sortHeader&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Birthday&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let user of users$ | async;trackBy:trackBy"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.firstname}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.lastname}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{user?.birthday}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See that we have added the &lt;code&gt;sorter&lt;/code&gt; selector to our &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag and &lt;br&gt;
&lt;code&gt;sortHeader&lt;/code&gt; to our &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; along with the unique key for that column &lt;code&gt;ref&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can simple listen to the output and handle the change in your component like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;sorter&lt;/span&gt; &lt;span class="na"&gt;(sortChange)=&lt;/span&gt;&lt;span class="s"&gt;"handleSort($event)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we will be doing something even better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-datasource-to-accommodate-sorting-feature"&gt;
  &lt;/a&gt;
  Updating DataSource to accommodate sorting feature
&lt;/h3&gt;

&lt;p&gt;We are going to make few changes to our &lt;code&gt;DataSoruce&lt;/code&gt; abstract class and add some for stuff so we can handle sorting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SubSink&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// to save the initial sort order&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;inititalDataSubject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;initialData$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inititalDataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;dataSubject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// The exposed observable for the table  to user&lt;/span&gt;
  &lt;span class="nx"&gt;data$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asObservable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Register the sorter with the datasource
   */&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listenToSortChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;destory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isObservable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inititalDataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="nx"&gt;sortLogic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SortChangeEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Update the data when the user sorts
   * @param sorter - sorter instance
   */&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;listenToSortChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortChange&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;withLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initialData$&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- get the data&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;sortEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sortLogic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sortEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;([]))&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataSubject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are the changes we made:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add an abstract method &lt;code&gt;sortLogic&lt;/code&gt; which gets the sort change event and the data. It should return an array.&lt;/li&gt;
&lt;li&gt;Add a setter to register our &lt;code&gt;Sorter&lt;/code&gt; with data source
What it does is that it listens to the sort change events and calls the &lt;code&gt;sortLogic&lt;/code&gt; method which should be implemented by our &lt;code&gt;UserDataSource&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#updating-userdatasource"&gt;
  &lt;/a&gt;
  Updating UserDataSource
&lt;/h4&gt;

&lt;p&gt;Now we have to implement the &lt;code&gt;sortLogic&lt;/code&gt; method in our &lt;code&gt;UserDataSource&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserDataSoruce&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;DataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sortLogic&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SortChangeEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;birthday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- can provide custom sorting logic if needed&lt;/span&gt;
        &lt;span class="nx"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;direction&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So the method &lt;code&gt;sortLogic&lt;/code&gt; receives the &lt;code&gt;SortChangeEvent&lt;/code&gt; and the table &lt;code&gt;data&lt;/code&gt; as params. We can use this info to sort the data and return it. If a particular column needs custom sorting, that can be handled here as well.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#updates-to-usercomponent"&gt;
  &lt;/a&gt;
  Updates to UserComponent
&lt;/h4&gt;

&lt;p&gt;Our component would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userDataSoruce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;UserDataSoruce&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="nx"&gt;users$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sorter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- get the sorter instance&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;userService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngAfterViewInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sorter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sorter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- register it with data source&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;trackBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userDataSoruce&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get hold of the &lt;code&gt;Sorter&lt;/code&gt; instance using &lt;code&gt;ViewChild&lt;/code&gt; ( &lt;a href="https://angular.io/api/core/ViewChild"&gt;ref&lt;/a&gt; ) and then register it with the data source in the &lt;code&gt;ngAfterViewInit&lt;/code&gt; lifecycle hook. &lt;br&gt;
We are done with the sorting implementation. Now that table should be sorted when the user clicks on the header.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;I wanted to write about things like these which are not seen very commonly, we use libraries and never actually try to see how they are implemented. So I just wanted to open up the minds of those who haven't actually understood how powerful Angular can be. &lt;/p&gt;

&lt;p&gt;This won't be a perfect implementation, we can bring in a lot of optimizations to the code. We can extend this to include more functionalities like pagination, filtering, searching, etc. If you would like for me to write a continuation post, please do comment down below.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n5cij"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AdiSreyaj"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adisreyaj"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do add your thoughts in the comments section.&lt;br&gt;
Stay Safe ❤️&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Flutter Install &amp; Setup on Ubuntu 16.04+</title>
      <author>Otavio Monteagudo</author>
      <pubDate>Sat, 08 May 2021 07:03:51 +0000</pubDate>
      <link>https://dev.to/otamm/flutter-install-setup-on-ubuntu-16-04-5394</link>
      <guid>https://dev.to/otamm/flutter-install-setup-on-ubuntu-16-04-5394</guid>
      <description>&lt;h1&gt;
  &lt;a href="#flutter-install-amp-setup-on-ubuntu-1604"&gt;
  &lt;/a&gt;
  Flutter Install &amp;amp; Setup on Ubuntu 16.04+
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#install-amp-configure-flutter"&gt;
  &lt;/a&gt;
  Install &amp;amp; Configure Flutter
&lt;/h2&gt;

&lt;p&gt;First things first: let's install flutter through the snap store. If you are using Ubuntu 16.04 onwards, you likely already have the &lt;code&gt;snap&lt;/code&gt; command installed; if you are not, you can follow the instructions available for your distro at the "Install Snap Store on your Linux distribution" section on &lt;a href="https://snapcraft.io/snap-store"&gt;this&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jUcdBdbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wgxz7mtwcps32vuq3fp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUcdBdbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wgxz7mtwcps32vuq3fp.png" alt="Some of the linux distros snap store is available for." title="Some of the linux distros snap store is available for."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;snap&lt;/code&gt; command available, install flutter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;flutter &lt;span class="nt"&gt;--classic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After flutter has finished installing, run a basic checkup which will also perform some automatic configuring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter doctor &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWu4eEg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12plekbnhxgfqz6u4efn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWu4eEg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12plekbnhxgfqz6u4efn.png" alt="flutter doctor output" title="flutter doctor output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flutter has been installed, nice!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-amp-configure-java"&gt;
  &lt;/a&gt;
  Install &amp;amp; Configure Java
&lt;/h2&gt;

&lt;p&gt;First of all, we need to get the (community-backed) Open Java Development Kit before being able to use Android Studio. To get the latest stable verion of Java 8 (other versions can sometimes show some unpredictable problems while working alongside Flutter as of May 2021, so I recommend installing OpenJDK 8; don't worry, OpenJDK 8 is set to receive support at least until 2024), open your terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;openjdk-8-jdk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a successful installation, it is time to set the &lt;code&gt;$JAVA_HOME&lt;/code&gt; environment variable, used by default by many applications which interact with your local java installation, Android Studio among them. Get a list of the currently installed JDKs in your system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;update-alternatives &lt;span class="nt"&gt;--config&lt;/span&gt; java
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Choose from the list of locally installed versions (remember that Java 8 is the easiest to use with Flutter) the one which you would like to be the system's default and set &lt;code&gt;$JAVA_HOME&lt;/code&gt; to its path, &lt;strong&gt;without including the &lt;code&gt;/bin&lt;/code&gt; portion onwards of the path&lt;/strong&gt; (in my case for instance the correct path was &lt;code&gt;/usr/lib/jvm/java-8-openjdk-amd64&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#JAVA_HOME=&amp;lt;your_java_installation_path&amp;gt;, same as below if you followed instructions&lt;/span&gt;
&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/usr/lib/jvm/java-8-openjdk-amd64"&lt;/span&gt; &lt;span class="c"&gt;# my local path after installing openjdk-8&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"JAVA_HOME=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc &lt;span class="c"&gt;# sets JAVA_HOME env var for current user&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'export PATH=$PATH:$JAVA_HOME/bin'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .zshrc &lt;span class="c"&gt;# adds java's binaries to your path&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/.bashrc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$JAVA_HOME&lt;/span&gt; &lt;span class="c"&gt;# verifies that the variable was perenially set&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-amp-configure-android-studio-to-run-with-flutter"&gt;
  &lt;/a&gt;
  Install &amp;amp; Configure Android Studio to run with Flutter
&lt;/h2&gt;

&lt;p&gt;Download Android Studio &lt;a href="https://developer.android.com/studio"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After your download finishes, extract the Android Studio package into the &lt;code&gt;/usr/local/&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo tar&lt;/span&gt; &lt;span class="nt"&gt;-C&lt;/span&gt; /usr/local &lt;span class="nt"&gt;-zxvf&lt;/span&gt; ~/Downloads/&amp;lt;android_studio_package&amp;gt;.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a successful extraction, run Android Studio's installation script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash /usr/local/android-studio/bin/studio.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should pop up the install wizard. Follow the wizard's instructions for the standard installation and you should eventually arrive at the starter screen. Select Configurations at the lower right corner and click on "Plugins":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAHrXY4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xaxzsat1b2kcksqkypy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAHrXY4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xaxzsat1b2kcksqkypy.png" alt="Android Studio starter screen" title="Android Studio starter screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install the "Flutter" official plugin, published by &lt;strong&gt;flutter.dev&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OT_uWSfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6t1w69ero8xe234idnl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OT_uWSfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6t1w69ero8xe234idnl.png" alt="Flutter Plugin"&gt;&lt;/a&gt; "Flutter Plugin")&lt;/p&gt;

&lt;p&gt;You will be prompted to install the Dart plugin (Flutter's base programming language) before proceeding. Click 'Ok' and restart the Android Studio IDE. The option to start a Flutter project should be visible now; click on it, then select 'Flutter Application' and click on 'Next'.&lt;/p&gt;

&lt;p&gt;You should be greeted by the project configuration screen. Configure your project's name, location and description as you wish, and point the field "Flutter SDK" to &lt;code&gt;/home/&amp;lt;your_user_name&amp;gt;/snap/flutter/common/flutter&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SG5XNpjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4j43px47sc5o9t04jtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SG5XNpjP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4j43px47sc5o9t04jtl.png" alt="Flutter Project Config" title="Flutter Project Config"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case the above path is not available, open a terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter doctor &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should then be greeted with the starter project screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JfI0NRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve413tpxbsn674bqlowx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JfI0NRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve413tpxbsn674bqlowx.png" alt="Flutter Project Starter" title="Flutter Project Starter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost done, now you need to accept the android licenses and double check your flutter installation's ownership in order to avoid future surprise build errors due to resources denied for Android Studio. Open up your terminal and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter doctor &lt;span class="nt"&gt;--android-licenses&lt;/span&gt; &lt;span class="c"&gt;# accept Google's licenses, necessary to build the app&lt;/span&gt;
&lt;span class="nb"&gt;sudo chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; &lt;span class="nv"&gt;$USER&lt;/span&gt;:&lt;span class="nv"&gt;$USER&lt;/span&gt; /home/&lt;span class="nv"&gt;$USER&lt;/span&gt;/snap/flutter &lt;span class="c"&gt;# confirm you are the owner of local flutter&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Android Studio is finally setup to run Flutter projects. Nice!&lt;br&gt;
You should also enable the Desktop Entry for Android Studio. In your project screen, click on "Tools" then "Create Desktop Entry":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRzH7pPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmw2u417r7v8x6ry2n7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRzH7pPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmw2u417r7v8x6ry2n7t.png" alt="AS Desktop Entry" title="AS Desktop Entry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Android Studio shortcut should be available from the "Activities" menu now.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enabling-hardware-virtualization-for-the-android-emulator"&gt;
  &lt;/a&gt;
  Enabling Hardware Virtualization for the Android Emulator
&lt;/h2&gt;

&lt;p&gt;In order to run the emulator, we must first set up your CPU's hardware virtualization capabilities.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;kvm-ok&lt;/code&gt; in your terminal and your output should indicate whether KVM acceleration can be used or not (Kernel Virtual Machine, in a nutshell it is a bridge between the kernel with virtual devices which allows a virtual device to emulate its own hardware directly from the host computer's hardware, take a look &lt;a href="https://www.linux-kvm.org/page/FAQ#Preparing_to_use_KVM"&gt;here&lt;/a&gt; for more detailed information); if you have an AMD or Intel CPU, most likely it can.&lt;/p&gt;

&lt;p&gt;Provided you are indeed able to use KVM acceleration, it is time to setup KVM and authorize the current user for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update &lt;span class="c"&gt;# update repositories&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils &lt;span class="c"&gt;# base packages&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;addgroup kvm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;addgroup libvirtd &lt;span class="c"&gt;# create user authorization groups&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;adduser &lt;span class="nv"&gt;$USER&lt;/span&gt; kvm &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;adduser &lt;span class="nv"&gt;$USER&lt;/span&gt; libvirtd &lt;span class="c"&gt;# add current user to auth groups&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;virsh &lt;span class="nt"&gt;-c&lt;/span&gt; qemu:///system list &lt;span class="c"&gt;# checks if virtualization is ok&lt;/span&gt;
&lt;span class="c"&gt;# if everything went fine, your output will be something like:&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#  Id    Name                           State&lt;/span&gt;
&lt;span class="c"&gt;#----------------------------------------------------&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And restart your user session. In the computer, not only the terminal. Log off the system and then login or reboot the PC already, I'll be waiting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-android-emulator-to-test-apps"&gt;
  &lt;/a&gt;
  Using the Android Emulator to Test Apps
&lt;/h2&gt;

&lt;p&gt;Now, open an Android Studio project and click on the 'AVD Manager' (Android Virtual Device) option located in the window's upper right corner:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ic_JFGWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3hnfp08d78fu8s81qad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ic_JFGWK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3hnfp08d78fu8s81qad.png" alt="AVD Manager" title="AVD Manager"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the "Create Virtual Device" button and a window with a list of devices should pop up, with the 'Phone' category preselected; I recommend you pick a device with Play Store enabled just in case you might want to use it later inside your emulated device. Mine was the Nexus 5.&lt;/p&gt;

&lt;p&gt;Click on the 'Next' button and a list of system images (Android OS Versions) should appear:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--omMizeIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsncydy90yb8wh6yiq1p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--omMizeIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsncydy90yb8wh6yiq1p.png" alt="System Images" title="System Images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, download your target image (by simply clicking on 'Download' right beside the Release Name), select a locally downloaded image and click on 'Next', which should only be highlighted after the image was successfully downloaded.&lt;/p&gt;

&lt;p&gt;A window will then show up, offering you to customize your virtual device's properties such as screen orientation on startup, RAM usage, etc. Tweak the device to your possibilities should you like to do so, otherwise you can safely click on 'Finish'.&lt;/p&gt;

&lt;p&gt;If everything goes well, you should now see your device listed at the Android Virtual Device Manager window:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RbCwZ7b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsyjl24niolby6uh2np7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RbCwZ7b9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsyjl24niolby6uh2np7.png" alt="AVD Manager List" title="System Images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go back to your Android Studio project view; at the same line where the 'AVD Manager' button is located, there is a dropdown list of available devices just to the left of 'main.dart'. Select the emulator you have just set up and click the green 'play' button just to the right of 'main.dart'. In case the emulator is not listed there yet, open the AVD Manager window again and click the green 'play' button under the 'actions' label listed for your virtual device to load and open the emulator before running your Flutter code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zUSPDOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hli5nfnywjr2i5mcf289.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zUSPDOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hli5nfnywjr2i5mcf289.png" alt="Android Virtual Device" title="System Images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that 'debug' ribbon in the upper right corner? In case you wanna get rid of it, add &lt;code&gt;debugShowCheckedModeBanner: false&lt;/code&gt; as a field of &lt;code&gt;MaterialApp&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-a-physical-android-device-to-test-apps"&gt;
  &lt;/a&gt;
  Using a Physical Android Device to Test Apps
&lt;/h2&gt;

&lt;p&gt;You'll need to have a local installation of the Android Debug Bridge in order to enable your computer to trade information (such as APK builds) with any connected Android devices, virtual or otherwise. &lt;/p&gt;

&lt;p&gt;The ADB consists of a client (the interface from which you run commands, which will be the ADB binary installed in your computer for all purposes of this tutorial), a daemon (which executes in the Android device the commands initially sent from the client) and a server (which runs locally in the PC, which has a default listening location at tcp://localhost:5037, and intermediates the communication between the client and the daemon).&lt;/p&gt;

&lt;p&gt;Very conveniently, Android Studio currently ships with an ADB, so if you followed the instructions above to install Android Studio, you already have one at your computer. It is possible to install ADB from the Ubuntu repositories alongside the one in Android Studio, but this invites headaches if your computer eventually confuses the locally installed versions, so instead let's setup our linux user to access Android Studio's ADB and then run ADB:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'export PATH=$PATH:$HOME"/Android/Sdk/platform-tools"'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; .bashrc &lt;span class="c"&gt;# adds adb to path&lt;/span&gt;
adb start-server &lt;span class="c"&gt;# launches adb server&lt;/span&gt;
adb devices &lt;span class="c"&gt;# lists connected devices&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running &lt;code&gt;adb devices&lt;/code&gt;, you most likely got an error. This error has registered the &lt;code&gt;$LOGNAME&lt;/code&gt; variable which contains the current user name, you will use it to insert your user into the &lt;code&gt;plugdev&lt;/code&gt; group, in case you are not there already. You also most likely do not have a set of &lt;code&gt;udev&lt;/code&gt; rules for android devices; UDEV rule files specify Ubuntu interactions with plugged in devices, and Ubuntu will refuse to perform certain interactions with your Android device unless it is previously authorized in an UDEV rules file. So, let's correct there errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# add user to plugdev group&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;usermod &lt;span class="nt"&gt;-aG&lt;/span&gt; plugdev &lt;span class="nv"&gt;$LOGNAME&lt;/span&gt;
&lt;span class="c"&gt;# downloads a very thorough UDEV rules file into the appropriate directory&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;wget &lt;span class="nt"&gt;-O&lt;/span&gt; /etc/udev/rules.d/51-android.rules https://raw.githubusercontent.com/NicolasBernaerts/ubuntu-scripts/master/android/51-android.rules
&lt;span class="c"&gt;# gives reading permission to the UDEV android file&lt;/span&gt;
&lt;span class="nb"&gt;sudo chmod &lt;/span&gt;a+r /etc/udev/rules.d/51-android.rules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reboot your current Linux user session to apply these changes, then open a terminal and run &lt;code&gt;adb devices&lt;/code&gt; again. In case you still have a UDEV-related error, your device's manufacturer ID probably is not listed in &lt;code&gt;/etc/udev/rules.d/51-android.rules&lt;/code&gt;; in this case, look the internet for your device's manufacturer UDEV id and manually add it to the rule list in the same format as the others. Notice how the only field with an unique value amongst the rows is &lt;code&gt;ATTR{idVendor}&lt;/code&gt;. If you do not receive any error, you'll notice that your device is listed as 'unauthorized'. Let's unlock the device for USB debugging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unlocking-developer-mode-amp-usb-debugging"&gt;
  &lt;/a&gt;
  Unlocking Developer Mode &amp;amp; USB Debugging
&lt;/h2&gt;

&lt;p&gt;In your android device, open up 'Settings', then 'About Phone'; tap your 'Build number' 5-6 times until a toast telling that 'You are now a developer!' pops up. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUtl1gvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skib1pnotczz49wo5s4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUtl1gvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skib1pnotczz49wo5s4k.png" alt="You Are Now a Developer" title="You are now a developer!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Back to 'Settings', open System', you should see that 'Developer Options' were unlocked.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HI1vrpHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lovbrm5eg1yg8twi3dft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HI1vrpHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lovbrm5eg1yg8twi3dft.png" alt="Developer Options" title="Developer Options entry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tap this new entry check 'USB debugging' just under the 'Debug' section. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AqiCkhbd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vp2kw9urr2dalqfvorb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AqiCkhbd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vp2kw9urr2dalqfvorb.png" alt="USB Debugging" title="USB Debugging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plug your Android device in your PC via USB, then run &lt;code&gt;adb devices&lt;/code&gt; on your terminal. The output should list your device and also point it is unlocked for debugging. Now, go back to Android Studio, click on the device dropdown list (the one in which you selected your Virtual Device before) and your physical device should now be listed, select it. Click on the 'run' button and you should see the app in your device, ready to be interacted with.&lt;/p&gt;

&lt;p&gt;Congratulations! You are now a Flutter developer. If this article has helped you in any way, please remember to give a heart, comment, etc. Good luck in your developer journey!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>ubuntu</category>
      <category>android</category>
    </item>
    <item>
      <title>Do you code on weekends?</title>
      <author>Madza</author>
      <pubDate>Sat, 08 May 2021 06:56:09 +0000</pubDate>
      <link>https://dev.to/madza/do-you-code-on-weekends-2ooe</link>
      <guid>https://dev.to/madza/do-you-code-on-weekends-2ooe</guid>
      <description>&lt;p&gt;Many devs strictly believe that resting and family time is equally important as work, leaving weekends code-free:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--klHHxshB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3jdwxzvtazghun8nw6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--klHHxshB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3jdwxzvtazghun8nw6w.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you code on weekends?&lt;br&gt;
If so, what type of projects are you working on?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>coding</category>
    </item>
  </channel>
</rss>
