<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Making the most boring website ever with TypeScript, NestJs, React and others. Part 3. </title>
      <author>NordicBeaver</author>
      <pubDate>Sun, 10 Oct 2021 19:34:58 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-3-3i6a</link>
      <guid>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-3-3i6a</guid>
      <description>&lt;p&gt;&lt;em&gt;This series is about making a generic website for a local business with TypeScript, NodeJs, NestJs, Prisma, React and NextJs. I'm trying to make my videos quite short, about 10 minutes each (except for the first one), while putting as much content there as I can. &lt;a href="https://www.youtube.com/playlist?list=PL7b0cPjh8z6K_4qLNu_QdE3RpiU6omViC"&gt;Here&lt;/a&gt; is the full playlist.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this video we will implement file uploading on our server. Then we will add picture setting for the barbers in the admin panel. And finally we'll create a new page for barbers on the client website.&lt;/p&gt;

&lt;p&gt;Enjoy :).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8xuyTxvBQcg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building A Payment Application using Python Flask Framework, Docker and  and the Beyonic API.</title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Sun, 10 Oct 2021 19:12:24 +0000</pubDate>
      <link>https://dev.to/grayhat/building-a-payment-application-using-python-flask-framework-docker-and-and-the-beyonic-api-2284</link>
      <guid>https://dev.to/grayhat/building-a-payment-application-using-python-flask-framework-docker-and-and-the-beyonic-api-2284</guid>
      <description>&lt;p&gt;In this article, we are going to learn how to create a payment application using Python flask framework, Docker and the Beyonic API. &lt;/p&gt;

&lt;p&gt;If you want some basics on how to use Flask to build web applications or APIS, I recommend you to read my previous article on Getting Started with Python Web Development üëáüèª &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/grayhat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkVjs71l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6aap2Bou--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/308943/da7a617c-9287-40bc-b4d6-cf99d762bedf.jpeg" alt="grayhat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/grayhat/getting-started-with-python-web-development-1jl9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting Started with Python Web Development. &lt;/h2&gt;
      &lt;h3&gt;Mwenda Harun Mbaabu „Éª Jul 30 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#beyonic-api"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Beyonic Api&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The Beyonic API is a REST based application programming interface that lets you extend the Beyonic dashboard features into your application and systems, allowing you to build amazing payment experiences.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With the Beyonic API you can:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receive and send money and prepaid airtime.&lt;/li&gt;
&lt;li&gt;List currencies and networks supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;Check whether a bank is supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;View your account transactions history.&lt;/li&gt;
&lt;li&gt;Add, retrieve, list, and update contacts to your Beyonic account.&lt;/li&gt;
&lt;li&gt;Use webhooks to send notifications to URLs on your server that when specific events occur in your Beyonic account (e.g. payments). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Getting Help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For usage, general questions, and discussions about the Beyonic API the best place to go to is &lt;a href="https://beyonic.com/join-community"&gt;Beyhive Slack Community&lt;/a&gt;, also feel free to clone and edit this repository to meet your project, application or system requirements.&lt;/p&gt;

&lt;p&gt;You can download all code snippets used in this article from this GitHub repository üëáüèª&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/HarunMbaabu"&gt;
        HarunMbaabu
      &lt;/a&gt; / &lt;a href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples"&gt;
        BeyonicAPI-Python-Examples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Beyonic API Python official client library simplified examples using Flask, Django and Fast API.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
&lt;strong&gt;Beyonic API Python Examples.&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;The beyonic APIs Doc Reference: &lt;a href="https://apidocs.beyonic.com/" rel="nofollow"&gt;https://apidocs.beyonic.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Beyonic API is a &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer" rel="nofollow"&gt;representational state transfer&lt;/a&gt;, REST based application programming interface that lets you extend the Beyonic dashboard features into your application and systems, allowing you to build amazing payment experiences.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With the Beyonic API you can:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Receive and send money  and prepaid airtime.&lt;/li&gt;
&lt;li&gt;List currencies and networks supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;Check whether a bank is supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;View your account transactions history.&lt;/li&gt;
&lt;li&gt;Add, retrieve, list, and update contacts to your Beyonic account.&lt;/li&gt;
&lt;li&gt;Use webhooks to send notifications to URLs on your server that when specific events occur in your Beyonic account (e.g. payments).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
&lt;strong&gt;Getting Help&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;For usage, general questions, and discussions the best place to go to is &lt;a href="https://beyonic.com/join-community" rel="nofollow"&gt;Beyhive Slack Community&lt;/a&gt;, also feel free to clone and edit this repository to meet your project, application or system requirements.&lt;/p&gt;
&lt;p&gt;To start‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;To start using the Beyonic Python API, you need to start by downloading the Beyonic API official Python client library and setting your secret key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the Beyonic API Python Official client library.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Setting your secret key.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To set the secret key install the python-dotenv modeule, Python-dotenv is a Python module that allows you to specify environment variables in traditional UNIX-like ‚Äú.env‚Äù (dot-env) file within your Python project directory, it helps us work with SECRETS and KEYS without exposing them to the outside world, and keep them safe during development too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing python-dotenv modeule&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dotenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating a .env file to keep our secret keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside your .env file specify the Beyonic API Token .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.env file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;BEYONIC_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"enter your API key here"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get your API Token by clicking your user name on the bottom left of the left sidebar menu in the Beyonic web portal and selecting ‚ÄòManage my account‚Äô from the dropdown menu. The API Token is shown at the very bottom of the page. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;getExamples.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;beyonic&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt; 

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;myapi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'BEYONIC_ACCESS_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myapi&lt;/span&gt; 

&lt;span class="c1"&gt;# Listing account: Working. 
&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#Listing currencies: Not working yet.
&lt;/span&gt;&lt;span class="s"&gt;'''
supported_currencies = beyonic.Currency.list()
print(supported_currencies)

Supported currencies are: USD, UGX, KES, BXC, GHS, TZS, RWF, ZMW, MWK, BIF, EUR, XAF, GNF, XOF, XOF
'''&lt;/span&gt;

&lt;span class="c1"&gt;#Listing networks: Not working yet.
&lt;/span&gt;&lt;span class="s"&gt;"""
networks = beyonic.Network.list()
print(networks)
"""&lt;/span&gt;

&lt;span class="c1"&gt;#Listing transactions: Working. 
&lt;/span&gt;&lt;span class="n"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;#Listing contact: Working. 
&lt;/span&gt;&lt;span class="n"&gt;mycontacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mycontacts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="c1"&gt;#Listing events: Not working yet.
&lt;/span&gt;&lt;span class="s"&gt;'''
events = beyonic.Event.list()
print(events)

Error: AttributeError: module 'beyonic' has no attribute 'Event'
'''&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get these and more examples implemented using flask and Fast API frameworks from the links below: &lt;/p&gt;

&lt;p&gt;1). &lt;a href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples/tree/main/FLASK"&gt;Flask framework examples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2). &lt;a href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples/tree/main/FASTAPI"&gt;Fast API framework examples&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Dockerfile&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;Dockerfile&lt;/strong&gt; is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.8-slim-buster&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./requirements.txt ./requirements.txt&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "python3", "getExamples.py" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build docker image called demo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;bey&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run docker image called demo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;bey&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let create a Docker compose file to build and run a docker container using the Docker image we just created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockercomposeyml"&gt;
  &lt;/a&gt;
  &lt;strong&gt;docker-compose.yml&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;docker-compose.yml&lt;/strong&gt; is a config file for docker-compose. it allows to deploy, combine and configure multiple docker-container at the same time. the Docker "rule" is to outsource every single process to an own docker container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.6"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python getExamples.py&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/pythonBeyonicExamples&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to run the following command from the same directory where the &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file is located. The docker compose up command will start and run the entire app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; docker compose up 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
NB: The screenshot below might differ according to your account deatils and your transcations in deatils. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mj2ZU_NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq80x9uds7w47owi7mu9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mj2ZU_NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq80x9uds7w47owi7mu9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To stop the container running on daemon mode use the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;compose&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ArNRmt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3rfdgh8x0v2cfmj0xjc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ArNRmt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3rfdgh8x0v2cfmj0xjc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributing-to-this-repository"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Contributing to this repository.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;All contributions, bug reports, bug fixes, enhancements, and ideas are welcomed. I hope you enjoy reading the article as much as i enjoyed writing it, you can connect with me on twitter üëâüèª &lt;a href="https://twitter.com/HarunMbaabu"&gt;@HarunMbaabu&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>payment</category>
      <category>flask</category>
      <category>docker</category>
    </item>
    <item>
      <title>Mastering Mutations in React Query</title>
      <author>Dominik D</author>
      <pubDate>Sun, 10 Oct 2021 18:57:02 +0000</pubDate>
      <link>https://dev.to/tkdodo/mastering-mutations-in-react-query-dm6</link>
      <guid>https://dev.to/tkdodo/mastering-mutations-in-react-query-dm6</guid>
      <description>&lt;p&gt;We've covered a lot of ground already when it comes to the features and concepts React Query provides. Most of them are about &lt;em&gt;retrieving&lt;/em&gt; data - via the &lt;em&gt;useQuery&lt;/em&gt; hook. There is however a second, integral part to working with data: updating it.&lt;/p&gt;

&lt;p&gt;For this use-case, React Query offers the &lt;em&gt;useMutation&lt;/em&gt; hook.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-mutations"&gt;
  &lt;/a&gt;
  What are mutations?
&lt;/h1&gt;

&lt;p&gt;Generally speaking, mutations are functions that have a side effect. As an example, have a look at the &lt;em&gt;push&lt;/em&gt; method of Arrays: It has the side effect of &lt;em&gt;changing&lt;/em&gt; the array in place where you're pushing a value to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;immutable&lt;/em&gt; counterpart would be &lt;em&gt;concat&lt;/em&gt;, which can also add values to an array, but it will return a new Array instead of directly manipulating the Array you operate on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  [1]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the name indicates, &lt;em&gt;useMutation&lt;/em&gt; also has some sort of side effect. Since we are in the context of &lt;a href="https://tkdodo.eu/blog/react-query-as-a-state-manager"&gt;managing server state&lt;/a&gt; with React Query, mutations describe a function that performs such a side effect &lt;em&gt;on the server&lt;/em&gt;. Creating a todo in your database would be a mutation. Logging in a user is also a classic mutation, because it performs the side effect of creating a token for the user.&lt;/p&gt;

&lt;p&gt;In some aspects, &lt;em&gt;useMutation&lt;/em&gt; very similar to &lt;em&gt;useQuery&lt;/em&gt;. In others, it is quite different.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#similarities-to-usequery"&gt;
  &lt;/a&gt;
  Similarities to useQuery
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;useMutation&lt;/em&gt; will track the state of a mutation, just like &lt;em&gt;useQuery&lt;/em&gt; does for queries. It'll give you &lt;em&gt;loading&lt;/em&gt;, &lt;em&gt;error&lt;/em&gt; and &lt;em&gt;status&lt;/em&gt; fields to make it easy for you to display what's going on to your users.&lt;/p&gt;

&lt;p&gt;You'll also get the same nice callbacks that &lt;em&gt;useQuery&lt;/em&gt; has: &lt;em&gt;onSuccess&lt;/em&gt;, &lt;em&gt;onError&lt;/em&gt; and _ onSettled_. But that's about where the similarities end.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#differences-to-usequery"&gt;
  &lt;/a&gt;
  Differences to useQuery
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;useQuery&lt;/em&gt; is declarative, &lt;em&gt;useMutation&lt;/em&gt; is imperative.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By that, I mean that queries mostly run automatically. You define the dependencies, but React Query takes care of running the query immediately, and then also performs smart background updates when deemed necessary. That works great for queries because we want to keep what we see on the screen &lt;em&gt;in sync&lt;/em&gt; with the actual data on the backend.&lt;/p&gt;

&lt;p&gt;For mutations, that wouldn't work well. Imagine a new todo would be created every time you focus your browser window ü§®. So instead of running the mutation instantly, React Query gives you a function that you can invoke whenever you want to make the mutation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AddComment&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this doesn't really do anything yet&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addComment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;newComment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/comments`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newComment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;
      &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// ‚úÖ mutation is invoked when the form is submitted&lt;/span&gt;
        &lt;span class="nx"&gt;addComment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"comment"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Comment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another difference is that mutations don't share state like &lt;em&gt;useQuery&lt;/em&gt; does. You can invoke the same &lt;em&gt;useQuery&lt;/em&gt; call multiple times in different components and will get the same, cached result returned to you - but this won't work for mutations.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tying-mutations-to-queries"&gt;
  &lt;/a&gt;
  Tying mutations to queries
&lt;/h1&gt;

&lt;p&gt;Mutations are, per design, not directly coupled to queries. A mutation that likes a blog post has no ties towards the query that fetches that blog post. For that to work, you would need some sort of underlying schema, which React Query doesn't have.&lt;/p&gt;

&lt;p&gt;To have a mutation reflect the changes it made on our queries, React Query primarily offers two ways:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#invalidation"&gt;
  &lt;/a&gt;
  Invalidation
&lt;/h2&gt;

&lt;p&gt;This is conceptually the simplest way to get your screen up-to-date. Remember, with server state, you're only ever displaying a snapshot of data from a given point in time. React Query tries to keep that up-to-date of course, but if you're deliberately changing server state with a mutation, this is a great point in time to tell React Query that some data you have cached is now "invalid". React Query will then go and refetch that data if it's currently in use, and your screen will update automatically for you once the fetch is completed. The only thing you have to tell the library is &lt;em&gt;which&lt;/em&gt; queries you want to invalidate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAddComment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newComment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/comments`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newComment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ‚úÖ refetch the comments list for our blog post&lt;/span&gt;
        &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Query invalidation is pretty smart. Like all &lt;a href="https://react-query.tanstack.com/guides/filters#query-filters"&gt;Query Filters&lt;/a&gt;, it uses fuzzy matching on the query key. So if you have multiple keys for your comments list, they will all be invalidated. However, only the ones that are currently active will be refetched. The rest will be marked as stale, which will cause them to be refetched the next time they are used.&lt;/p&gt;

&lt;p&gt;As an example, let's assume we have the option to sort our comments, and at the time the new comment was added, we have two queries with comments in our cache:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['posts', 5, 'comments', { sortBy: ['date', 'asc'] }
['posts', 5, 'comments', { sortBy: ['author', 'desc'] }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we're only displaying one of them on the screen, &lt;em&gt;invalidateQueries&lt;/em&gt; will refetch that one and mark the other one as stale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#direct-updates"&gt;
  &lt;/a&gt;
  Direct updates
&lt;/h2&gt;

&lt;p&gt;Sometimes, you don't want to refetch data, especially if the mutation already returns everything you need to know. If you have a mutation that updates the title of your blog post, and the backend returns the complete blog post as a response, you can update the query cache directly via &lt;em&gt;setQueryData&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUpdateTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTitle&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// üí° response of the mutation is passed to onSuccess&lt;/span&gt;
      &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ‚úÖ update detail view directly&lt;/span&gt;
        &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setQueryData&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;newPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting data into the cache directly via &lt;em&gt;setQueryData&lt;/em&gt; will act as if this data was returned from the backend, which means that all components using that query will re-render accordingly.&lt;/p&gt;

&lt;p&gt;I'm showing some more examples of direct updates and the combination of both approaches in &lt;a href="https://tkdodo.eu/blog/effective-react-query-keys#structure"&gt;#8: Effective React Query Keys&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;I personally think that most of the time, invalidation should be preferred. Of course, it depends on the use-case, but for direct updates to work reliably, you need more code on the frontend, and to some extent duplicate logic from the backend. Sorted lists are for example pretty hard to update directly, as the position of my entry could've potentially changed because of the update. Invalidating the whole list is the "safer" approach.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optimistic-updates"&gt;
  &lt;/a&gt;
  Optimistic updates
&lt;/h1&gt;

&lt;p&gt;Optimistic updates are one of the key selling points for using React Query mutations. The &lt;em&gt;useQuery&lt;/em&gt; cache give us data instantly when switching between queries, especially when combined with &lt;a href="https://react-query.tanstack.com/guides/prefetching"&gt;prefetching&lt;/a&gt;. Our whole UI feels very snappy because of it, so why not get the same advantage for mutations as well?&lt;/p&gt;

&lt;p&gt;A lot of the time, we are quite certain that an update will go through. Why should the user wait for a couple of seconds until we get the okay from the backend to show the result in the UI? The idea of optimistic updates is to fake the success of a mutation even before we have sent it to the server. Once we get a successful response back, all we have to do is invalidate our view again to see the real data. In case the request fails, we're going to roll back our UI to the state from before the mutation.&lt;/p&gt;

&lt;p&gt;This works great for small mutations where instant user feedback is actually required. There is nothing worse than having a toggle button that performs a request, and it doesn't react at all until the request has completed. Users will double or even triple click that button, and it will just feel "laggy" all over the place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;I've decided to &lt;em&gt;not&lt;/em&gt; show an additional example. The &lt;a href="https://react-query.tanstack.com/guides/optimistic-updates"&gt;official docs&lt;/a&gt; cover that topic very well, and they also have a codesandbox example &lt;a href="https://react-query.tanstack.com/examples/optimistic-updates"&gt;in JavaScript&lt;/a&gt; and &lt;a href="https://react-query.tanstack.com/examples/optimistic-updates-typescript"&gt;in TypeScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I further think that optimistic updates are a bit over-used. Not every mutation needs to be done optimistically. You should really be sure that it rarely fails, because the UX for a rollback is not great. Imagine a Form in a Dialog that closes when you submit it, or a redirect from a detail view to a list view after an update. If those are done prematurely, they are hard to undo.&lt;/p&gt;

&lt;p&gt;Also, be sure that the instant feedback is really required (like in the toggle button example above). The code needed to make optimistic updates work is non-trivial, especially compared to "standard" mutations. You need to mimic what the backend is doing when you're faking the result, which can be as easy as flipping a Boolean or adding an item to an Array, but it might also get more complex really fast:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the todo you're adding needs an id, where do you get it from?&lt;/li&gt;
&lt;li&gt;If the list you're currently viewing is sorted, will you insert the new entry at the right position?&lt;/li&gt;
&lt;li&gt;What if another user has added something else in the meantime - will our optimistically added entry switch positions after a refetch?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these edge cases might make the UX actually worse in some situations, where it might be enough to disable the button and show a loading animation while the mutation is in-flight. As always, choose the right tool for the right job.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#common-gotchas"&gt;
  &lt;/a&gt;
  Common Gotchas
&lt;/h1&gt;

&lt;p&gt;Finally, let's dive into some things that are good to know when dealing with mutations that might not be that obvious initially:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#awaited-promises"&gt;
  &lt;/a&gt;
  awaited Promises
&lt;/h2&gt;

&lt;p&gt;Promises returned from the mutation callbacks are awaited by React Query, and as it so happens, &lt;em&gt;invalidateQueries&lt;/em&gt; returns a Promise. If you want your mutation to stay in &lt;em&gt;loading&lt;/em&gt; state while your related queries update, you have to return the result of &lt;em&gt;invalidateQueries&lt;/em&gt; from the callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// üéâ will wait for query invalidation to finish&lt;/span&gt;
  &lt;span class="nl"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// üöÄ fire and forget - will not wait&lt;/span&gt;
  &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mutate-or-mutateasync"&gt;
  &lt;/a&gt;
  Mutate or MutateAsync
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;useMutation&lt;/em&gt; gives you two functions - &lt;em&gt;mutate&lt;/em&gt; and &lt;em&gt;mutateAsync&lt;/em&gt;. What's the difference, and when should you use which one?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mutate&lt;/em&gt; doesn't return anything, while &lt;em&gt;mutateAsync&lt;/em&gt; returns a Promise containing the result of the mutation. So you might be tempted to use &lt;em&gt;mutateAsync&lt;/em&gt; when you need access to the mutation response, but I would still argue that you should almost always use &lt;em&gt;mutate&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can still get access to the &lt;em&gt;data&lt;/em&gt; or the &lt;em&gt;error&lt;/em&gt; via the callbacks, and you don't have to worry about error handling: Since &lt;em&gt;mutateAsync&lt;/em&gt; gives you control over the Promise, you also have to catch errors manually, or you might get an &lt;a href="https://stackoverflow.com/questions/40500490/what-is-an-unhandled-promise-rejection"&gt;unhandled promise rejection&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ‚úÖ accessing the response via onSuccess&lt;/span&gt;
  &lt;span class="nx"&gt;myMutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// üö® works, but is missing error handling&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;myMutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutateAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// üòï this is okay, but look at the verbosity&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;myMutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutateAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do nothing&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Handling errors is not necessary with &lt;em&gt;mutate&lt;/em&gt;, because React Query catches (and discards) the error for you internally. It is literally implemented with: &lt;em&gt;mutateAsync().catch(noop)&lt;/em&gt;üòé&lt;/p&gt;

&lt;p&gt;The only situations where I've found &lt;em&gt;mutateAsync&lt;/em&gt; to be superior is when you really need the Promise for the sake of having a Promise. This can be necessary if you want to fire off multiple mutations concurrently and want to wait for them all to be finished, or if you have dependent mutations where you'd get into callback hell with the callbacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mutations-only-take-one-argument-for-variables"&gt;
  &lt;/a&gt;
  Mutations only take one argument for variables
&lt;/h2&gt;

&lt;p&gt;Since the last argument to &lt;em&gt;mutate&lt;/em&gt; is the options object, &lt;em&gt;useMutation&lt;/em&gt; can currently only take &lt;em&gt;one&lt;/em&gt; argument for variables. This is certainly a limitation, but it can be easily worked around by using an object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// üö® this is invalid syntax and will NOT work&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;mutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// ‚úÖ use an object for multiple variables&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;mutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'hello', body: 'world' })&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To read more on why that is currently necessary, have a look at &lt;a href="https://github.com/tannerlinsley/react-query/discussions/1226"&gt;this discussion&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-callbacks-might-not-fire"&gt;
  &lt;/a&gt;
  Some callbacks might not fire
&lt;/h2&gt;

&lt;p&gt;You can have callbacks on &lt;em&gt;useMutation&lt;/em&gt; as well as on &lt;em&gt;mutate&lt;/em&gt; itself. It is important to know that the callbacks on &lt;em&gt;useMutation&lt;/em&gt; fire before the callbacks on &lt;em&gt;mutate&lt;/em&gt;. Further, the callbacks on &lt;em&gt;mutate&lt;/em&gt; might not fire &lt;em&gt;at all&lt;/em&gt; if the component unmounts before the mutation has finished.&lt;/p&gt;

&lt;p&gt;That's why I think it's a good practice to separate concerns in your callbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do things that are absolutely necessary and logic related (like query invalidation) in the &lt;em&gt;useMutation&lt;/em&gt; callbacks.&lt;/li&gt;
&lt;li&gt;Do UI related things like redirects or showing toast notifications in &lt;em&gt;mutate&lt;/em&gt; callbacks. If the user navigated away from the current screen before the mutation finished, those will purposefully not fire.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This separation is especially neat if &lt;em&gt;useMutation&lt;/em&gt; comes from a custom hook, as this will keep query related logic in the custom hook while UI related actions are still in the UI. This also makes the custom hook more reusable, because how you interact with the UI might vary on a case by case basis - but the invalidation logic will likely always be the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUpdateTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ‚úÖ always invalidate the todo list&lt;/span&gt;
    &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// in the component&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUpdateTodo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'newTitle' },&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="c1"&gt;// ‚úÖ only redirect if we're still on the detail page&lt;/span&gt;
  &lt;span class="c1"&gt;// when the mutation finishes&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's it for today. Feel free to reach out to me on &lt;a href="https://twitter.com/tkdodo"&gt;twitter&lt;/a&gt;&lt;br&gt;
if you have any questions, or just leave a comment below ‚¨áÔ∏è&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PFX dosyalarƒ± hakkƒ±nda</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Sun, 10 Oct 2021 18:45:43 +0000</pubDate>
      <link>https://dev.to/aciklab/pfx-dosyalari-hakkinda-3f1o</link>
      <guid>https://dev.to/aciklab/pfx-dosyalari-hakkinda-3f1o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pfx-nedir"&gt;
  &lt;/a&gt;
  PFX nedir?
&lt;/h2&gt;

&lt;p&gt;PFX dosya formatƒ± temel olarak "&lt;strong&gt;PKCS #12&lt;/strong&gt;" olarak bilinen standartƒ±n √∂nc√ºl√ºd√ºr. Bu standart, birden fazla kriptografik objenin bir dosyada kullanƒ±lmasƒ±nƒ± saƒülamaktadƒ±r. ƒ∞√ßerisinde tek bir sertfikayƒ± barƒ±ndƒ±ran diƒüer sertifikalardan en b√ºy√ºk farkƒ± tam olarak budur. Bu standartƒ±n genellikle kullanƒ±lan kullanƒ±m ≈üekli bir &lt;em&gt;sertifika zinciri&lt;/em&gt; 'nin sertifikalarƒ± ile birlikte "&lt;em&gt;√∂zel anahtar&lt;/em&gt;" barƒ±ndƒ±rmasƒ±dƒ±r. Bu dosya standartƒ± hakkƒ±nda bilmemiz gereken bir ba≈üka √∂zellik de ≈üifreli ve imzalƒ± olabilmesidir. A√ßƒ±k kaynak kodlu openssl uygulamasƒ±nƒ±n bu standardƒ± kullanarak i≈ülem yapmasƒ± i√ßin &lt;strong&gt;pkcs12&lt;/strong&gt; parametresi kullanƒ±lmaktadƒ±r.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pzl83NDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zxtp0p6lg6hcpnx8bng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pzl83NDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zxtp0p6lg6hcpnx8bng.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#openssl-ile-pfx-i%C5%9Flemleri"&gt;
  &lt;/a&gt;
  OpenSSL ile PFX i≈ülemleri
&lt;/h2&gt;

&lt;p&gt;OpenSSL √ºzerinde PFX i≈ülemleri i√ßerisindeki sertifikalarƒ± ve anahtarlarƒ± ayƒ±rma i≈ülemleridir.&lt;/p&gt;

&lt;p&gt;Bir PFX dosyasƒ± i√ßindeki √∂zel anahtar'ƒ±n √ßƒ±kartƒ±lmasƒ± (sertifikalarƒ±n √ßƒ±kartƒ±lmamasƒ±) i√ßin a≈üaƒüƒ±daki komut kullanƒ±lmaktadƒ±r. Anahtar dosyasƒ± √∂rnekte .key olarak g√∂sterilmi≈ütir fakat bazƒ± durumlarda .pem olarak da kullanƒ±labilmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-nocerts&lt;/span&gt; &lt;span class="nt"&gt;-out&lt;/span&gt; ozelanahtar.key &lt;span class="nt"&gt;-nodes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bir PFX dosyasƒ± i√ßindeki sertifikalarƒ±n √ßƒ±kartƒ±lmasƒ± (anahtarlarƒ±n √ßƒ±kartƒ±lmamasƒ±) i√ßin a≈üaƒüƒ±daki komut kullanƒ±lmaktadƒ±r. Sertifika dosyasƒ± √∂rnekte .crt olarak g√∂sterilmi≈ütir fakat bazƒ± durumlarda .pem olarak da kullanƒ±labilmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-nokeys&lt;/span&gt; &lt;span class="nt"&gt;-out&lt;/span&gt; sertifikalar.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pfxteki-%C3%B6zel-anahtarlar"&gt;
  &lt;/a&gt;
  PFX'teki √∂zel anahtarlar
&lt;/h2&gt;

&lt;p&gt;PFX dosyasƒ±ndan yukarƒ±da anlatƒ±lan y√∂ntem ile √ßƒ±kartƒ±lan √∂zel anahtar PKCS#8 standartƒ±na uygundur. Yani a≈üaƒüƒ±daki gibi ba≈ülayan bir dosya g√∂z√ºkmektedir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-----BEGIN PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-----BEGIN ENCRYPTED PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oysa ki bazƒ± durumlarda elimizde PKCS#1 standartƒ±na uygun RSA ≈üifreleme ile olu≈üturulmu≈ü bir anahtar olmasƒ± gerekebilir. Bu gibi durumda yukarƒ±daki komut yerine a≈üaƒüƒ±daki gibi bir komut √ßalƒ±≈ütƒ±rƒ±lmasƒ± gerekmektedir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-nodes&lt;/span&gt; &lt;span class="nt"&gt;-nocerts&lt;/span&gt; | openssl rsa &lt;span class="nt"&gt;-out&lt;/span&gt; ozelanahtar.key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu ≈üekilde olu≈üturulan √∂zel anahtar PKCS#1 standartƒ±na uygun ve a≈üaƒüƒ±daki gibi ba≈ülayan bir dosya olarak RSA ≈üifreleme y√∂ntemi ile sunulacaktƒ±r.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;----------BEGIN RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#parola-konular%C4%B1"&gt;
  &lt;/a&gt;
  Parola konularƒ±
&lt;/h2&gt;

&lt;p&gt;PFX dosyasƒ±nƒ±n kullanƒ±labilmesi i√ßin √ßoƒüu zaman parola korumasƒ± bulunmaktadƒ±r. Normal ≈üartlarda OpenSSL sizden bu bilgileri talep etmektedir. Fakat tek komut ile yapƒ±lmasƒ± istenirse a≈üaƒüƒ±daki parametreler kullanƒ±labilmektedir. ƒ∞lk parametre ile var olan PFX dosyasƒ±nƒ±n parolasƒ± kullanƒ±lƒ±rken, ikinci parametre ise √ßƒ±ktƒ± dosyasƒ±na da parola koyulup koyulmayacaƒüƒ±nƒ± anlatmaktadƒ±r.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;-passin&lt;/span&gt; pass:&lt;span class="s2"&gt;"parola1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;-passout&lt;/span&gt; pass:&lt;span class="s2"&gt;"parola2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ayrƒ±ca √ßƒ±kan √∂zel anahtardaki parolanƒ±n silinmesi gerektiƒüi zaman a≈üaƒüƒ±daki gibi parolayƒ± kaldƒ±rabilrisiniz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl rsa &lt;span class="nt"&gt;-in&lt;/span&gt; ozelanahtar.key &lt;span class="nt"&gt;-out&lt;/span&gt; parolasizanahtar.key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sertifikalar%C4%B1n-tiplerine-g%C3%B6re-%C3%A7%C4%B1kart%C4%B1lmas%C4%B1"&gt;
  &lt;/a&gt;
  Sertifikalarƒ±n tiplerine g√∂re √ßƒ±kartƒ±lmasƒ±
&lt;/h2&gt;

&lt;p&gt;PFX konusunda en √ßok kullanƒ±lan bir diƒüer √∂zellik ise i√ßerisinde birden fazla sertfiikanƒ±n yer almasƒ±. Ve bu sertifikalar √ßoƒüu zaman sertfiika zincirini olu≈üturmaktadƒ±r. Bu zincirin tepesinde de Sertifika Otoritesi (CA) bulunup altta da ƒ∞stemci (client) bulunmaktadƒ±r. PFX dosyasƒ±nda bu ≈üekilde bir ayrƒ±m yapƒ±lmasƒ± isteniyorsa a≈üaƒüƒ±daki gibi yapƒ±labilmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-clcerts&lt;/span&gt; &lt;span class="nt"&gt;-nokeys&lt;/span&gt; &lt;span class="nt"&gt;-out&lt;/span&gt; clientcert.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-cacerts&lt;/span&gt; &lt;span class="nt"&gt;-nokeys&lt;/span&gt; &lt;span class="nt"&gt;-out&lt;/span&gt; cacert.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#yeni-bir-pfx-dosyas%C4%B1-olu%C5%9Fturmak"&gt;
  &lt;/a&gt;
  Yeni bir PFX dosyasƒ± olu≈üturmak
&lt;/h2&gt;

&lt;p&gt;PFX dosyasƒ± ba≈üta bahsettiƒüim gibi birden fazla sertifika veya √∂zel anahtarƒ± barƒ±ndƒ±rdƒ±ƒüƒ± i√ßin a≈üaƒüƒ±daki formatta bir komut ile yeni pfx dosyalarƒ± olu≈üturulabilmektedir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-export&lt;/span&gt; &lt;span class="nt"&gt;-in&lt;/span&gt; sertifika1.pem &lt;span class="nt"&gt;-inkey&lt;/span&gt; anahtar1.key &lt;span class="nt"&gt;-out&lt;/span&gt; tekdosya1.pfx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>pfx</category>
      <category>sertifika</category>
      <category>openssl</category>
    </item>
    <item>
      <title> Introduction to Data structures and Algorithms in Python</title>
      <author>Phylis Jepchumba</author>
      <pubDate>Sun, 10 Oct 2021 18:44:47 +0000</pubDate>
      <link>https://dev.to/luxacademy/data-structures-and-algorithms-in-python-2i88</link>
      <guid>https://dev.to/luxacademy/data-structures-and-algorithms-in-python-2i88</guid>
      <description>&lt;p&gt;Data structures are a way of organizing and storing data so that they can be accessed and worked with efficiently while Algorithms are sequence of well defined instructions  for solving a problem or a accomplishing a given task.&lt;/p&gt;

&lt;p&gt;This article gives a detailed understanding of the most commonly used data structures that is Stack and queue and their implementation in python.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  STACK
&lt;/h6&gt;

&lt;p&gt;Stack is one of the earliest data structure defined in computer science as a linear data structure which stores items using LIFO( Last In Last Out) principle for insertion and deletion.&lt;/p&gt;

&lt;p&gt;To get a clear understanding of a stack think about a pile/stack of books. You add a book at the top of the stack, so the first one to be picked up will be the last one that was added to the stack.&lt;/p&gt;

&lt;p&gt;Stack has two operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Push- adds an item to the top of the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSTJKdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdfuftiufnmwhcpbbh1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSTJKdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdfuftiufnmwhcpbbh1i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pop- removes an item from the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yx_3jLxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92m8rulj7nn08wry5dkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yx_3jLxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92m8rulj7nn08wry5dkf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#why-do-we-use-stacks"&gt;
  &lt;/a&gt;
  Why do we use stacks?
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Stack are simple to learn and implement.&lt;/li&gt;
&lt;li&gt;Stack allows us store and retrieve data sequentially.&lt;/li&gt;
&lt;li&gt;Stacks take O(1) time for insert and delete operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#real-world-use-cases-of-a-stack"&gt;
  &lt;/a&gt;
  Real world use cases of a stack.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Web browsers use stack to keep track of URL that you have accessed previously. When you visit a new page, it is added to the stack when you hit the back button, stack is popped and previous URL is accessed.&lt;/li&gt;
&lt;li&gt;Undo mechanism in text editor uses stack to keep all changes.&lt;/li&gt;
&lt;li&gt;To implement other data structures- stack is used to implement searches in graphs and trees.&lt;/li&gt;
&lt;li&gt;Compilers and Parsers uses stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://tutorialsbookmarks.com/applications-of-stack-in-data-structure/"&gt;More applications of Stack Data structures&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#stack-methods"&gt;
  &lt;/a&gt;
  Stack Methods
&lt;/h6&gt;

&lt;p&gt;Stack operations are implemented using the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stack.IsEmpty- Returns True if a stack is empty and false otherwise.&lt;/li&gt;
&lt;li&gt;stack.length()- Returns length of stack.&lt;/li&gt;
&lt;li&gt;stack.top()- returns a pointer/reference to top element in stack.&lt;/li&gt;
&lt;li&gt;stack.push(x)- inserts element x to the top of the stack.&lt;/li&gt;
&lt;li&gt;stack.pop()- Removes top element of stack and returns it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#stack-implementation-in-python"&gt;
  &lt;/a&gt;
  Stack implementation in Python.
&lt;/h6&gt;

&lt;p&gt;In python, we can implement stack using the following ways;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using the built-in List data structure. &lt;/li&gt;
&lt;li&gt;Using the deque library which efficiently provides stack operations in one object. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stack Using List.&lt;/p&gt;

&lt;p&gt;To implement stack using list, &lt;strong&gt;append&lt;/strong&gt; and &lt;strong&gt;pop&lt;/strong&gt; methods are used.&lt;br&gt;
append() method in python adds a single item to the existing list&lt;br&gt;
pop() removes the element at the specified position&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'stack'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'queue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'list'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tuple'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['stack', 'queue', 'list', 'tuple']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using pop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1HaKVwd6zhK92vLn45xm1Cim-0fIoD0bu?usp=sharing"&gt;Check this implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.edureka.co/blog/stack-in-python/"&gt; Read More about stacks&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#queues"&gt;
  &lt;/a&gt;
  QUEUES
&lt;/h6&gt;

&lt;p&gt;Just like a stack, a queue is a linear data structure. &lt;br&gt;
Queue stores items using FIFO (First in first out) principle for insertion and deletion.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#operations-associated-with-queue-in-python"&gt;
  &lt;/a&gt;
  Operations Associated with Queue in Python.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enqueue: It adds an element to the end of the queue. When the queue reaches its total capacity, it reaches an overflow condition. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dequeue: Removes an element from the queue.  When the queue becomes empty, it reaches an underflow condition. &lt;/li&gt;
&lt;li&gt;Front: returns the first item from the queue. &lt;/li&gt;
&lt;li&gt;Rare: Returns the last item from the queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#applications-of-a-queue"&gt;
  &lt;/a&gt;
  Applications of a Queue
&lt;/h6&gt;

&lt;p&gt;A queue is useful in the following scenarios;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling interrupts in real-time systems- interrupts are handled in same order as they arrive.&lt;/li&gt;
&lt;li&gt;Handling website traffic.&lt;/li&gt;
&lt;li&gt;Serving request on a single shared resource like a printer or CPU task scheduling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/applications-of-queue-data-structure/"&gt;Applications of Queue Data Structure&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#how-to-implement-queue-in-python"&gt;
  &lt;/a&gt;
  How to implement queue in Python
&lt;/h6&gt;

&lt;p&gt;There are different ways to implement a queue in Python. The &lt;br&gt;
common ways are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using built-in List data structure.&lt;/li&gt;
&lt;li&gt;Using collections.deque library&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#implementing-a-queue-in-python-with-a-list"&gt;
  &lt;/a&gt;
  Implementing a Queue in Python with a List
&lt;/h6&gt;

&lt;p&gt;The list‚Äôs append() and pop() methods are used to insert and delete elements from the queue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Initialize a queue
&lt;/span&gt;
&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="c1"&gt;# Adding elements to the queue
&lt;/span&gt;
&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Javascript'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Typescript'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Python', 'Javascript', 'Typescript']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Removing elements from the queue
&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Python
Javascript
Typescript
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#implementing-a-queue-in-python-with-collectionsdeque"&gt;
  &lt;/a&gt;
  Implementing a Queue in Python with collections.deque
&lt;/h6&gt;

&lt;p&gt;The deque class from the python collections module can also be used to implement a queue. It is more efficient because deque provides faster enqueue and dequeue operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Black'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'White'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Orange'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deque(['Black', 'White', 'Orange'])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you enjoy reading the article as much as I enjoyed writing it, the following are the useful resources and reference materials that i used. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1bd6jJFKrOZLgxMC_ieJYJNe2L48n4Fx1?usp=sharing"&gt;Find the full source code here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.section.io/engineering-education/queue-data-structure-python/"&gt;Using the Queue Data Structure in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/edpresso/how-to-implement-a-queue-in-python?utm_term=&amp;amp;utm_campaign=%5BTest%5D+Dynamic+Verticals&amp;amp;utm_source=adwords&amp;amp;utm_medium=ppc&amp;amp;hsa_acc=5451446008&amp;amp;hsa_cam=14045073269&amp;amp;hsa_grp=128822123241&amp;amp;hsa_ad=535845844735&amp;amp;hsa_src=g&amp;amp;hsa_tgt=aud-597782228546:dsa-1394252596758&amp;amp;hsa_kw=&amp;amp;hsa_mt=b&amp;amp;hsa_net=adwords&amp;amp;hsa_ver=3&amp;amp;gclid=Cj0KCQjwnoqLBhD4ARIsAL5JedKJSQeXV9jwhJBGLrU1JocjSGoeNKUGTkvbmC6EPXogXDL7tKFmaBgaAo2CEALw_wcB"&gt;How to implement a queue in Python&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Creating a simple timer and score keeper in JavaScript.</title>
      <author>davidchedrick</author>
      <pubDate>Sun, 10 Oct 2021 18:40:31 +0000</pubDate>
      <link>https://dev.to/davidchedrick/creating-a-simple-timer-and-score-keeper-in-javascript-394g</link>
      <guid>https://dev.to/davidchedrick/creating-a-simple-timer-and-score-keeper-in-javascript-394g</guid>
      <description>&lt;p&gt;We are going to focus on creating a simple timer and score keeper using just HTML and JavaScript.&lt;/p&gt;

&lt;p&gt;First we will start with creating our index.html with just basic HTML and our script tag that will connect our index.html and index.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Game&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script src="index.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, within the body we will add a div with an ID of "gameDiv". This div will hold the content of our game. Within "gameDiv" we will add two more divs that will hold our Time and Score. Both will contain a span that will hold our counts. These count numbers are what we will be manipulating with our JavaScript. As you see bellow, I named the spans with an ID of "timer" and "score". Remember,all of these ID names are what I chose to call them. You can name them whatever you want, but the name should be something that makes since to you and other people reading your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;div id="gameDiv"&amp;gt;
        &amp;lt;div&amp;gt;Time: &amp;lt;span id="timer"&amp;gt;10&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;Score: &amp;lt;span id="score"&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="index.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all we will put in our HTML file. Everything else will be done with JavaScript.&lt;br&gt;
Start with creating a index.js that we already connected to our index.html. &lt;/p&gt;

&lt;p&gt;First we will start with our global variables. &lt;br&gt;
The .querySelector() makes it easier to write our code buy adding our selections into variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const gameDiv= document.querySelector('#gameDiv');
let timer = document.querySelector('#timer');
let score = document.querySelector('#score');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;startCountDown holds our setInterval() method which calls our function countDown, and we will add a 1000 millisecond delay:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let startCountDown = setInterval(countDown, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Variables timeLeft and totalScore will hold the current values of our timer and score:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let timeLeft = 10;
let totalScore = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next method we will utilize will be .addEventListener()&lt;br&gt;
Once the DOM content is fully loaded it will call our first function renderGame:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.addEventListener('DOMContentLoaded', renderGame())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are into our first function. Inside this function we still have access to our variables set in our global scope, but now we will add some variables that will now only have a function scope and will not be available outside of this function.&lt;br&gt;
First we will create a new DIV using the .createElement() method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function renderGame() {
    const gameCard = document.createElement('div');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will create a button. &lt;br&gt;
Now that we stored that created button into the variable click we can now type click to access our button.&lt;br&gt;
Now we add in some text for our button and then we add on an event listener to our button. Our event listener will be triggered by a click from the mouse and will call on our function pointsClick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const click = document.createElement('button');
    click.textContent = 'CLICK FOR POINTS ';
    click.addEventListener('click', pointsClick);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly in this function we append our click variable to our gamecard. Then we append our gamecard to our gameDiv:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    gameCard.append(click);
    gameDiv.append(gameCard);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next function is pointsClick. It is called by the previous event listener we added in. Every time the button we created is clicked it triggers the event listener. &lt;br&gt;
First in this function totalScore++ adds one to our score and score.innerText changes our score from a 0 to 1 on our webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function pointsClick() {
    totalScore++
    score.innerText = totalScore
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our countDown function was called at the top when we set our variable in global scope for our .setInterval() method. &lt;br&gt;
First timeLeft-- will countdown our timer and timer.innerText will reflect that on our webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function countDown(){
    timeLeft--;
    timer.innerText = timeLeft;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once timeLeft hits 0 we need an if statement to let the program know to go to our gameOver function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    if(timeLeft === 0){
        gameOver();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our last function is gameOver(). &lt;br&gt;
First we clearInterval so that our timer stops at 0.&lt;br&gt;
Next, we have to grab that button we created earlier and tell the event listener to stop. Without taking off the event listener we would be able to continue to click for points even after the timer stopped.&lt;br&gt;
Now we want to tell the player that the game is over and display the finial score.&lt;br&gt;
So we create one more element, an h1 that will display our end game text on the screen.&lt;br&gt;
Lastly we append the gameOver variable to our gameDiv.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function gameOver() {
    clearInterval(startCountDown);

    const button = document.querySelector('button')
    button.removeEventListener('click', pointsClick)

    const gameOver = document.createElement('h1');
    gameOver.innerHTML = 'GAME OVER!' + '&amp;lt;br&amp;gt;' + `Total Score: ${totalScore}`;

    gameDiv.append(gameOver);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all we need to create a timer and score keeper. Try it out for yourself and then add this into a more complicated JavaScript game.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/davidchedrick/pen/GRvRBNZ"&gt;Click to see my example code.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Terminal Animation for your website using Typed.js</title>
      <author>Mr.Shah</author>
      <pubDate>Sun, 10 Oct 2021 18:21:13 +0000</pubDate>
      <link>https://dev.to/shahstavan/terminal-animation-for-your-website-using-typed-js-2hcl</link>
      <guid>https://dev.to/shahstavan/terminal-animation-for-your-website-using-typed-js-2hcl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZI4aT6e2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdni.iconscout.com/illustration/premium/thumb/web-development-2081748-1764588.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZI4aT6e2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdni.iconscout.com/illustration/premium/thumb/web-development-2081748-1764588.png" alt="Web Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many times when we come through some interesting thing such as animations or Transitions we are eager to know how to implement it in real practice.&lt;/p&gt;

&lt;p&gt;I came to know many developers are using Terminal Animations for their website why should I help Beginner Web Developers to implement it for their website.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shahstavan07/embed/ZEJEMYN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Besides, you can also add other stuffs in animations like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;startDelay: 0 - [startDelay time before typing starts in milliseconds]&lt;/li&gt;
&lt;li&gt;shuffle: false - [shuffle the strings]&lt;/li&gt;
&lt;li&gt;loopCount: Infinity - [Amount of loops]

For more you can checkout this GitHub Repo:
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mattboldt"&gt;
        mattboldt
      &lt;/a&gt; / &lt;a href="https://github.com/mattboldt/typed.js"&gt;
        typed.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A JavaScript Typing Animation Library
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/mattboldt/typed.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eb826b5c4cff3ed6a0abe9fbc2c19322bfb07b1b828eec5f3188b876fd419968/68747470733a2f2f7472617669732d63692e6f72672f6d617474626f6c64742f74797065642e6a732e7376673f6272616e63683d74797065642d322e30" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/mattboldt/typed.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d336235b6df4d0a219e09ab2ab560715858488b0b0e1690949293e6dad97ed81/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6d617474626f6c64742f74797065642e6a732f6261646765732f6770612e737667" alt="Code Climate"&gt;&lt;/a&gt;
&lt;a href="https://github.com/mattboldt/typed.js"&gt;&lt;img src="https://camo.githubusercontent.com/cc01525466017233efb51affe79a698366c39ebdbec0f10caa4561c5429d743c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6d617474626f6c64742f74797065642e6a732e737667" alt="GitHub release"&gt;&lt;/a&gt;
&lt;a href="https://img.shields.io/npm/dt/typed.js.svg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/25ef105d22bea464df194ebd3588577423b3c4cbe0a769bcce2be2b0928c9afa/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f74797065642e6a732e737667" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/mattboldt/typed.js/master/LICENSE.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83d3746e5881c1867665223424263d8e604df233d0a11aae0813e0414d433943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="GitHub license"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/mattboldt/typed.js/master/logo-cropped.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHZo11ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mattboldt/typed.js/master/logo-cropped.png" width="450px" title="Typed.js"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="http://www.mattboldt.com/demos/typed-js/" rel="nofollow"&gt;Live Demo&lt;/a&gt; | &lt;a href="http://mattboldt.github.io/typed.js/" rel="nofollow"&gt;View All Demos&lt;/a&gt; | &lt;a href="http://mattboldt.github.io/typed.js/docs" rel="nofollow"&gt;View Full Docs&lt;/a&gt; | &lt;a href="http://www.mattboldt.com" rel="nofollow"&gt;mattboldt.com&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Typed.js is a library that types. Enter in any string, and watch it type at the speed you've set, backspace what it's typed, and begin a new sentence for however many strings you've set.&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;h4&gt;
Choose One&lt;/h4&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm install typed.js
yarn add typed.js
bower install typed.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;
CDN&lt;/h4&gt;
&lt;div class="highlight highlight-text-html-basic position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;https://cdn.jsdelivr.net/npm/typed.js@2.0.12&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
Setup&lt;/h4&gt;
&lt;p&gt;This is really all you need to get going.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// Can also be included with a regular script tag&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;Typed&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'typed.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;options&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;strings&lt;/span&gt;: &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-s"&gt;'&amp;lt;i&amp;gt;First&amp;lt;/i&amp;gt; sentence.'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s"&gt;'&amp;amp;amp; a second sentence.'&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;typeSpeed&lt;/span&gt;: &lt;span class="pl-c1"&gt;40&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;typed&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-v"&gt;Typed&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'.element'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;options&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Use with ReactJS&lt;/h3&gt;
&lt;p&gt;Hook-based function component: &lt;a href="https://jsfiddle.net/mattboldt/60h9an7y/" rel="nofollow"&gt;https://jsfiddle.net/mattboldt/60h9an7y/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Class component: &lt;a href="https://jsfiddle.net/mattboldt/ovat9jmp/" rel="nofollow"&gt;https://jsfiddle.net/mattboldt/ovat9jmp/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Use with Vue.js&lt;/h3&gt;
&lt;p&gt;Check out the Vue.js component: &lt;a href="https://github.com/Orlandster/vue-typed-js"&gt;https://github.com/Orlandster/vue-typed-js&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Use it as WebComponent&lt;/h3&gt;
&lt;p&gt;Check‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mattboldt/typed.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


Hope you guys have gained some Knowledge ‚úåÔ∏è&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>10 Free Cloud Storage</title>
      <author>Beginner Developer</author>
      <pubDate>Sun, 10 Oct 2021 18:08:46 +0000</pubDate>
      <link>https://dev.to/beginnerdeveloper/10-free-cloud-storage-33i6</link>
      <guid>https://dev.to/beginnerdeveloper/10-free-cloud-storage-33i6</guid>
      <description>&lt;p&gt;With cloud storage, all your data is safely stored in a remote database, so you do not need to store it locally on your computer hard drive or other storage device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sync"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.sync.com/"&gt;Sync&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XA3HzYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46i7er9xhi46984yr5az.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XA3HzYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46i7er9xhi46984yr5az.PNG" alt="Sync"&gt;&lt;/a&gt;&lt;br&gt;
Most cloud storage providers differ from Sync because they can access, scan and read your files. Sync's end-to-end encrypted storage platform and apps ensure that only you can access your data in the cloud. Sync can‚Äôt read your files and no one else can either.&lt;br&gt;
&lt;strong&gt;Storage: 5GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-blomp"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.blomp.com/"&gt;Blomp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhWwxaic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfhi9m9b6bs41k8zwj5a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhWwxaic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfhi9m9b6bs41k8zwj5a.PNG" alt="Blomp"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Storage: 20GB&lt;/strong&gt;&lt;br&gt;
Get 20GB of storage for every referral.&lt;br&gt;
Up to 200GB of storage can be added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-degoo"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://degoo.com/"&gt;Degoo&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw5kTI7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqeyzhqxrgjcbg785109.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw5kTI7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqeyzhqxrgjcbg785109.PNG" alt="Degoo"&gt;&lt;/a&gt;&lt;br&gt;
AI based cloud storage that helps you rediscover your best photos.&lt;br&gt;
&lt;strong&gt;Storage: 100GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-icedrive"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://icedrive.net/"&gt;Icedrive&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTeBnJ7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzp1cop856pogny5bqnr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTeBnJ7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzp1cop856pogny5bqnr.PNG" alt="Icedrive"&gt;&lt;/a&gt;&lt;br&gt;
You can easily access, manage, and update your cloud storage with Icedrive, a next-generation cloud service.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-mega"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://mega.io/"&gt;Mega&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkAUZ0ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avv90w9b30fg6el1qyiy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkAUZ0ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avv90w9b30fg6el1qyiy.PNG" alt="Mega"&gt;&lt;/a&gt;&lt;br&gt;
COVID-19 has forever changed the way we work. Working remotely is now a reality and the need to keep your data secure is more important than ever. At MEGA we give millions of users with peace of mind thanks to our no-compromise user-controlled end-to-end encryption. You can rest easy knowing MEGA is a very strong link in your security chain.&lt;br&gt;
&lt;strong&gt;Storage: 20GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-media-fire"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.mediafire.com/"&gt;Media Fire&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3EdTTdit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw5lf8oq8n9bfoqdpwyd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3EdTTdit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw5lf8oq8n9bfoqdpwyd.PNG" alt="Media Fire"&gt;&lt;/a&gt;&lt;br&gt;
File storage made easy ‚Äì including powerful features you won‚Äôt find anywhere else. Whether you‚Äôre sharing photos, videos, audio, or docs, MediaFire can simplify your workflow.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-pcloud"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.pcloud.com/"&gt;pCloud&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zK61vBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoyodxt7l4l2ksymr0ds.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zK61vBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoyodxt7l4l2ksymr0ds.PNG" alt="pCloud"&gt;&lt;/a&gt;&lt;br&gt;
No matter how many files and folders you store in the pCloud, all of your data will be at your fingertips. Regardless of how you use your space in the cloud - via web, desktop or mobile - your files are truly easy to manage.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8internxt"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://internxt.com/"&gt;Internxt&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0EfE8N2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq9yhqy016ots5sde552.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0EfE8N2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq9yhqy016ots5sde552.PNG" alt="Internxt"&gt;&lt;/a&gt;&lt;br&gt;
Transfer all your files to Yandex.Disk to access and edit them as easily as files on your hard drive.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-google-drive"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.google.com/drive/"&gt;Google Drive&lt;/a&gt; üòÅüòÄ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5M6ImHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nngec1ydaeqrr9v38vx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5M6ImHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nngec1ydaeqrr9v38vx.PNG" alt="Google Drive"&gt;&lt;/a&gt;&lt;br&gt;
This one doesn't need a description üòÅ.&lt;br&gt;
&lt;strong&gt;Storage: 15GB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My Blog:- &lt;a href="https://beginners-developer.blogspot.com"&gt;Beginner Developer Blog&lt;/a&gt;&lt;br&gt;
Website:- &lt;a href="https://ejaazrkhan.github.io/portfolio"&gt;https://ejaazrkhan.github.io/portfolio&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>React  useState</title>
      <author>abhisheks-12</author>
      <pubDate>Sun, 10 Oct 2021 18:05:35 +0000</pubDate>
      <link>https://dev.to/abhisheks12/react-usestate-4o71</link>
      <guid>https://dev.to/abhisheks12/react-usestate-4o71</guid>
      <description>&lt;p&gt;Hey guys this is my first blog...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8LFfsrzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnx1f7048a9pik1ujpt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LFfsrzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnx1f7048a9pik1ujpt1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Suppose we have to render name in react app . We can save that name  in simple variable and render that name .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGEzS6lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb840l0texxq5mbbj17b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGEzS6lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb840l0texxq5mbbj17b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
But what if we want to change name to Alfred after clicking Change Name button , so let's pass changeName function . In changeName function if we change value of variable name to Alfred that's not going to work.&lt;/p&gt;

&lt;p&gt;So here we use useState hook .&lt;br&gt;
for using useState hook first we need to import it from react.&lt;br&gt;
Example-&lt;br&gt;
1.import { useState } from "react";&lt;/p&gt;

&lt;p&gt;With help of useState we set two variables like &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Y34dCR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/val54vomp5w5bfjfiatd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Y34dCR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/val54vomp5w5bfjfiatd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here name variable represents Bruce , after that in changeName  function we use setName variable to set name to Alfred.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evYQAXtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnanxubx46drkvk062cw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evYQAXtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnanxubx46drkvk062cw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
now after click name will change to Alfred. We can pass different type of  data in useState hook.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>react</category>
      <category>reacthooks</category>
    </item>
    <item>
      <title>Is "AI" generated music finally useful? [for Indie Game Devs]</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 10 Oct 2021 17:52:10 +0000</pubDate>
      <link>https://dev.to/inhuofficial/is-machine-learning-generated-music-finally-useful-for-indie-game-devs-1flp</link>
      <guid>https://dev.to/inhuofficial/is-machine-learning-generated-music-finally-useful-for-indie-game-devs-1flp</guid>
      <description>&lt;p&gt;A short post about a service I stumbled across called AIVA.&lt;/p&gt;

&lt;p&gt;I have been working on systemising my processes for content creation. &lt;/p&gt;

&lt;p&gt;One thing that I want to do is to create some YouTube shorts (1-2 minute videos, same as TikTok / Instagram stories type videos) and I was looking for some subtle background music that wouldn't be copyrighted.&lt;/p&gt;

&lt;p&gt;While searching I stumbled across &lt;a href="https://aiva.ai/"&gt;https://aiva.ai/&lt;/a&gt; - a service to generate AI music.&lt;/p&gt;

&lt;p&gt;As with anything new and interesting, I had to have a play!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-impressions"&gt;
  &lt;/a&gt;
  First impressions
&lt;/h2&gt;

&lt;p&gt;It was easy to use, even for a dummy like me!&lt;/p&gt;

&lt;p&gt;You just select a few things such as what style of music / instrumentation you want, duration (up to 3 minutes for free tier), tempo, key and time signature and then select how many tracks you want the AI to produce (up to 5 at a time).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UpG_b3aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/err1f9febjvtvhpgagtk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UpG_b3aA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/err1f9febjvtvhpgagtk.jpg" alt="Screen allowing you to set the instrumentation, duration, tempo, key that you would like AIVA to generate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you press "Create Your Track" and wait for a minute or two.&lt;/p&gt;

&lt;p&gt;You can then listen to the AI masterpiece...or disaster!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consistency-results"&gt;
  &lt;/a&gt;
  Consistency / results
&lt;/h2&gt;

&lt;p&gt;From about 100 tracks I generated I would say that 1 in 15 tracks are decent enough that you could possibly use them, a lot of them end up with too heavy a drum beat or some weird transitions etc.&lt;/p&gt;

&lt;p&gt;Despite that I am impressed with the results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-enough-for-indie-game-developers"&gt;
  &lt;/a&gt;
  Good enough for Indie game developers?
&lt;/h2&gt;

&lt;p&gt;They aren't perfect, but if you have next to no budget for sound tracks they will probably be good enough! &lt;/p&gt;

&lt;p&gt;I found about 6 tracks that I think would work for a low budget Indie game, which isn't bad considering I did no editing on the tracks (other than removing some weird bits from the end of the first example below).&lt;/p&gt;

&lt;p&gt;With a bit of work and tweaking I imagine you could make them feel like high quality pieces composed just for the game. &lt;/p&gt;

&lt;p&gt;Or at the very least use them as inspiration pieces to make the ideation part of music design a lot shorter (and therefore a lot cheaper!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Here are three examples I downloaded of tracks that I think are pretty much good enough for usage.&lt;/p&gt;

&lt;p&gt;I have given them some fun names and the sort of game I think they would work for, enjoy AIVAs work!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1-draigon-born"&gt;
  &lt;/a&gt;
  Example 1 - DrAIgon born
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/75dm9bjo/1//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-2-pairates-adventures"&gt;
  &lt;/a&gt;
  Example 2 - PAIrates Adventures
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/75dm9bjo/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-3-in-spaice-no-one-can-hear-you-scraim"&gt;
  &lt;/a&gt;
  Example 3 - In SpAIce, no one can hear you scrAIm
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/75dm9bjo/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-do-you-think"&gt;
  &lt;/a&gt;
  So what do you think?
&lt;/h2&gt;

&lt;p&gt;Do you think Machine Learning has come far enough to generate some useful music / sound tracks?&lt;/p&gt;

&lt;p&gt;Could you picture a game with one of these sound tracks in it?&lt;/p&gt;

&lt;p&gt;I personally think some of the Hip Hop, Low-Fi and Easy Listening stuff it produces would make great background music for streams and videos (the main reason I am exploring the service) with a very slim chance of a copyright strike! &lt;/p&gt;

&lt;p&gt;I would encourage you to have a play yourself and see what you think!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quick-poll"&gt;
  &lt;/a&gt;
  Quick Poll
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/mVI1C_cFsibjD0kNayrE1/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Cover image: &lt;a href="https://unsplash.com/photos/U3sOwViXhkY?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Unsplash&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>machinelearning</category>
      <category>discuss</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Validating Markup: Write Your Own Snippet</title>
      <author>Mads Stoumann</author>
      <pubDate>Sun, 10 Oct 2021 17:36:24 +0000</pubDate>
      <link>https://dev.to/madsstoumann/validating-markup-write-your-own-snippet-2p8d</link>
      <guid>https://dev.to/madsstoumann/validating-markup-write-your-own-snippet-2p8d</guid>
      <description>&lt;p&gt;I always validate my markup. Why? There are several reasons, the main ones being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If the markup is invalid, the browser will have to spend more time guessing and interpreting what the markup &lt;em&gt;should most likely be like&lt;/em&gt;. This will take longer to process, and thus = slower rendering.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Screen-readers can/will fail for the same reasons.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Search-engines will index your site faster, if the crawler does not have to interpret invalid markup.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To validate your markup, just go to &lt;a href="https://validator.w3.org/"&gt;https://validator.w3.org/&lt;/a&gt; and paste a url, upload a file, or input HTML directly.&lt;/p&gt;

&lt;p&gt;While this works, it's &lt;strong&gt;not ideal for local development.&lt;/strong&gt; That's why, I've been using &lt;a href="https://www.validity.org.uk/"&gt;Validity&lt;/a&gt; for a number of years to check my markup for errors. &lt;/p&gt;

&lt;p&gt;Unfortunately, it's recently been &lt;strong&gt;removed from the Chrome Web Store&lt;/strong&gt; ‚òπÔ∏è&lt;/p&gt;

&lt;p&gt;Luckily, W3 has a &lt;a href="https://validator.w3.org/docs/api.html"&gt;Validation API&lt;/a&gt; we can use instead. &lt;/p&gt;

&lt;p&gt;Let's look into how we can create our own validation-snippet!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#creating-a-snippet"&gt;
  &lt;/a&gt;
  Creating a snippet
&lt;/h2&gt;

&lt;p&gt;In &lt;em&gt;Chrome Dev Tools&lt;/em&gt;, go to ‚ÄúSources &amp;gt; Snippets‚Äù and click on ‚Äú+ New snippet‚Äù.&lt;/p&gt;

&lt;p&gt;Paste the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://validator.nu/?out=json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-cache&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;same-origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html;charset=UTF-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;follow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;referrerPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no-referrer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLSerializer&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;serializeToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the snippet, rename it to ‚Äúvalid‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxn5QHIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rofw8u7iai1a6k7lhic4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kxn5QHIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rofw8u7iai1a6k7lhic4.png" alt="Snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This snippet will &lt;code&gt;POST&lt;/code&gt; the markup of the current page to W3's validator, and return &lt;code&gt;json&lt;/code&gt; with validation-information. &lt;/p&gt;

&lt;p&gt;To run the snippet, press &lt;code&gt;‚åò/CTRL+ENTER&lt;/code&gt; after the last line of code.&lt;/p&gt;

&lt;p&gt;Does it run? Good! In the future, to run the snippet, just press &lt;code&gt;‚åò+O&lt;/code&gt; (MAC) or &lt;code&gt;CTRL+O&lt;/code&gt; (PC) ‚Äì then type &lt;code&gt;!valid&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#formatting-the-output"&gt;
  &lt;/a&gt;
  Formatting the output
&lt;/h2&gt;

&lt;p&gt;Now, by using all the wonderful methods of &lt;code&gt;console&lt;/code&gt;, let's format the output. &lt;/p&gt;

&lt;p&gt;Replace &lt;code&gt;console.log(data)&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;warning&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;subType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`%c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; validation warnings`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color:#FFFBE5;padding:1px 4px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupCollapsed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`%c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (line: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastLine&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color:#FFFBE5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`%c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; validation errors`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background-color:#D93025;color:#FFF;padding:1px 4px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupCollapsed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`%c&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (line: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastLine&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:#D93025&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the snippet (‚åò/CTRL+S), and check it out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LL8cSTZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ln9ogwoiaybh0jz3wz3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LL8cSTZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ln9ogwoiaybh0jz3wz3.png" alt="Console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can then expand each warning- or error-line:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAsEB6-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjv1z46enkctkqi9nr4t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAsEB6-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjv1z46enkctkqi9nr4t.png" alt="Expanded error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The latter is using &lt;code&gt;console.table()&lt;/code&gt;, but could also be &lt;code&gt;console.dir&lt;/code&gt; ‚Äì or whatever way you want to present the error.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I now have a fast way to validate local markup again! If you're using the snippet on external sites or with sites that have a ‚ÄúContent Security Policy‚Äù, you &lt;em&gt;might&lt;/em&gt; run into issues and have to update the snippet.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>codequality</category>
    </item>
    <item>
      <title>How to Enable SSL for Local Laravel Sail Development Caddy and Docker</title>
      <author>Adrian Mejias</author>
      <pubDate>Sun, 10 Oct 2021 17:21:02 +0000</pubDate>
      <link>https://dev.to/adrianmejias/how-to-enable-ssl-for-local-development-using-laravel-sail-and-docker-51ee</link>
      <guid>https://dev.to/adrianmejias/how-to-enable-ssl-for-local-development-using-laravel-sail-and-docker-51ee</guid>
      <description>&lt;p&gt;Let's talk SSL and local development; don't worry, I've been searching too.&lt;/p&gt;

&lt;p&gt;There is an issue with developing locally, not just with &lt;code&gt;Laravel&lt;/code&gt;, where developers who are building saas products aren't able to get a &lt;code&gt;clean&lt;/code&gt; setup for &lt;code&gt;SSL&lt;/code&gt; in the browser. This makes setting things up like &lt;code&gt;PWA&lt;/code&gt;s or &lt;code&gt;Google&lt;/code&gt; sign-in buttons impossible if the certificate isn't valid.&lt;/p&gt;

&lt;p&gt;Given the power of &lt;code&gt;Docker&lt;/code&gt; and &lt;code&gt;Caddy&lt;/code&gt;, the dream is real. You can absolutely use this for non-Laravel &lt;code&gt;Sail&lt;/code&gt; web applications as well.&lt;/p&gt;

&lt;p&gt;The end result of implementing the code below should give you a couple of certificates &lt;code&gt;(intermediate.crt, laravel.test.crt)&lt;/code&gt; that you can install to your local system.&lt;/p&gt;

&lt;p&gt;GitHub Gist: &lt;a href="https://gist.github.com/adrianmejias/0997f2b8a20715428f594a4798e034f5"&gt;https://gist.github.com/adrianmejias/0997f2b8a20715428f594a4798e034f5&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory Structure
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;docker/

&lt;ul&gt;
&lt;li&gt;caddy/&lt;/li&gt;
&lt;li&gt;authorities/ (intermediate.crt)&lt;/li&gt;
&lt;li&gt;certificates/

&lt;ul&gt;
&lt;li&gt;laravel.test/ (laravel.test.crt)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Caddyfile&lt;/li&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;start-container&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;docker-compose.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#files"&gt;
  &lt;/a&gt;
  Files
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dockercomposeyml"&gt;
  &lt;/a&gt;
  docker-compose.yml
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="na"&gt;laravel.test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Comment or remove ports&lt;/span&gt;
        &lt;span class="c1"&gt;# ports:&lt;/span&gt;
        &lt;span class="c1"&gt;#     - "${APP_PORT:-80}:80"&lt;/span&gt;
   &lt;span class="c1"&gt;# ...&lt;/span&gt;
   &lt;span class="na"&gt;caddy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy"&lt;/span&gt;
            &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dockerfile&lt;/span&gt;
            &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;WWWGROUP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${WWWGROUP}"&lt;/span&gt;
        &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${APP_PORT:-80}:80"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${APP_SSL_PORT:-443}:443"&lt;/span&gt;
        &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;LARAVEL_SAIL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
            &lt;span class="na"&gt;HOST_DOMAIN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;laravel.test&lt;/span&gt;
        &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy/Caddyfile:/etc/caddy/Caddyfile"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.:/srv:cache"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy/certificates:/data/caddy/certificates/local"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;./docker/caddy/authorities:/data/caddy/pki/authorities/local"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sailcaddy:/data:cache"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;sailcaddyconfig:/config:cache"&lt;/span&gt;
        &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sail&lt;/span&gt;
        &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;laravel.test&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="na"&gt;sailcaddy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;sailcaddyconfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;driver&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercaddydockerfile"&gt;
  &lt;/a&gt;
  docker/caddy/Dockerfile
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; caddy:alpine&lt;/span&gt;

&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; maintainer="Adrian Mejias"&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="s"&gt; WWWGROUP&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; DEBIAN_FRONTEND noninteractive&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; TZ=UTC&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;ln&lt;/span&gt; &lt;span class="nt"&gt;-snf&lt;/span&gt; /usr/share/zoneinfo/&lt;span class="nv"&gt;$TZ&lt;/span&gt; /etc/localtime &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$TZ&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; /etc/timezone

&lt;span class="k"&gt;RUN &lt;/span&gt;apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; bash &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; nss-tools &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;addgroup &lt;span class="nt"&gt;-S&lt;/span&gt; &lt;span class="nv"&gt;$WWWGROUP&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;adduser &lt;span class="nt"&gt;-G&lt;/span&gt; &lt;span class="nv"&gt;$WWWGROUP&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; 1337 &lt;span class="nt"&gt;-S&lt;/span&gt; sail

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; start-container /usr/local/bin/start-container&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt; +x /usr/local/bin/start-container

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["start-container"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercaddystartcontainer"&gt;
  &lt;/a&gt;
  docker/caddy/start-container
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env sh&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WWWUSER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;addgroup &lt;span class="nv"&gt;$WWWUSER&lt;/span&gt; sail
&lt;span class="k"&gt;fi

if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$# &lt;/span&gt;&lt;span class="nt"&gt;-gt&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# @todo find alpine equivilent of below&lt;/span&gt;
    &lt;span class="c"&gt;# exec gosu $WWWUSER "$@"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    /usr/bin/caddy run &lt;span class="nt"&gt;--config&lt;/span&gt; /etc/caddy/Caddyfile &lt;span class="nt"&gt;--adapter&lt;/span&gt; caddyfile
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dockercaddycaddyfile"&gt;
  &lt;/a&gt;
  docker/caddy/Caddyfile
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    admin off
    # debug

    on_demand_tls {
        ask http://laravel.test/caddy
    }

    local_certs
}

:80 {
    reverse_proxy laravel.test {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-Host {host}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Port 443
        # header_up X-Forwarded-Proto {scheme}

        health_timeout 5s
    }
}

:443 {
    tls internal {
        on_demand
    }

    reverse_proxy laravel.test {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-Host {host}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Port 443
        # header_up X-Forwarded-Proto {scheme}

        health_timeout 5s
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#apphttpcontrollerscaddycontrollerphp"&gt;
  &lt;/a&gt;
  app/Http/Controllers/CaddyController.php
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CaddyController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Display a listing of the resource.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'domain'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'caddy.authorized'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Domain Authorized'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nf"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configcaddyphp"&gt;
  &lt;/a&gt;
  config/caddy.php
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;

    &lt;span class="cm"&gt;/*
    |--------------------------------------------------------------------------
    | Authorized Domains
    |--------------------------------------------------------------------------
    |
    | Domains that are authorized to be viewed through Caddy.
    |
    */&lt;/span&gt;

    &lt;span class="s1"&gt;'authorized'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'laravel.test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// 'app.laravel.test',&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;

&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#apphttpmiddlewaretrustproxiesphp"&gt;
  &lt;/a&gt;
  app/Http/Middleware/TrustProxies.php
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Middleware&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Middleware\TrustProxies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;Middleware&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TrustProxies&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Middleware&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * The trusted proxies for this application.
     *
     * @var array|string|null
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$proxies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Add wildcard or specific domain(s)&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_FOR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_HOST&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_PORT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_PROTO&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="nc"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HEADER_X_FORWARDED_AWS_ELB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routeswebphp"&gt;
  &lt;/a&gt;
  routes/web.php
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Controllers\CaddyController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/caddy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CaddyController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'caddy'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>laravel</category>
      <category>ssl</category>
      <category>docker</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
