<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Released an app to train facial expressions: Multilingual in Next.js, dynamic OGP, facial expression recognition in face-api.js</title>
      <author>Yuiko Ito</author>
      <pubDate>Wed, 15 Sep 2021 14:39:33 +0000</pubDate>
      <link>https://dev.to/yuikoito/released-an-app-to-train-facial-expressions-multilingual-in-next-js-dynamic-ogp-facial-expression-recognition-in-face-api-js-58ie</link>
      <guid>https://dev.to/yuikoito/released-an-app-to-train-facial-expressions-multilingual-in-next-js-dynamic-ogp-facial-expression-recognition-in-face-api-js-58ie</guid>
      <description>&lt;p&gt;Hi guys, I wrote &lt;a href="https://dev.to/yuikoito/developed-the-app-which-trains-your-facial-expressions-face-api-js-next-js-typescript-1ghb"&gt;Developed the app which trains your facial expressions: face-api.js + Next.js + TypeScript&lt;/a&gt; last week, and this week I updated the app, which you can train your face expressions and released it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6OiXCrZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m044e0u1bfwyukwpy7uy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6OiXCrZV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m044e0u1bfwyukwpy7uy.gif" alt="Videotogif (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main updates are as follows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for multiple languages&lt;/li&gt;
&lt;li&gt;Added the ability to select the difficulty level&lt;/li&gt;
&lt;li&gt;Dynamic OGP support&lt;/li&gt;
&lt;li&gt;Allowing users to move on if they succeed&lt;/li&gt;
&lt;li&gt;Overall design update&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The entire code is below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yuikoito/face-expression-challenge"&gt;https://github.com/yuikoito/face-expression-challenge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;a href="https://face-expression-challenge.vercel.app/"&gt;https://face-expression-challenge.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-to-select-the-difficulty-level"&gt;
  &lt;/a&gt;
  Enable to select the difficulty level.
&lt;/h2&gt;

&lt;p&gt;I thought it would be undesirable to have the same difficulty level every time, so I made it possible to choose the difficulty level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-jy8Cfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2s6rlqzft6zigiof4uy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-jy8Cfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2s6rlqzft6zigiof4uy.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can choose between &lt;strong&gt;easy&lt;/strong&gt;, &lt;strong&gt;normal&lt;/strong&gt;, &lt;strong&gt;hard&lt;/strong&gt;, and &lt;strong&gt;devil&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In addition to changing the time for each difficulty, I also changed the threshold value to make the judgment itself tougher.&lt;/p&gt;

&lt;p&gt;In the part where the expression is obtained, the threshold is used as shown below. (I used detectSingleFace from now on)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;detectionsWithExpression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;faceapi&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detectSingleFace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;faceapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TinyFaceDetectorOptions&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withFaceExpressions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detectionsWithExpression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;detectionsWithExpression&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expressions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scoresArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expressionsArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scoresArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scoresArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;expressionsArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="c1"&gt;// Don't make a decision unless it's above the specified threshold here.&lt;/span&gt;
          &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;levelConfig&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;threshold&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setIsMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nx"&gt;setStage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#when-succeeded-move-on-to-next-subject"&gt;
  &lt;/a&gt;
  When succeeded, move on to next subject.
&lt;/h2&gt;

&lt;p&gt;Originally, I gave the subject for 1.5 seconds and then judged it after 1.5 seconds, but I decided to make users move on to next subject when succeeded.&lt;/p&gt;

&lt;p&gt;So, after 1.5 seconds of presentation, I added a 3-second time limit, and if the facial expressions matched well within that time, you can move on to the next topic.&lt;/p&gt;

&lt;p&gt;Even if no match is found, if no match can be made within 3 seconds, the next step is taken.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-ogp-support"&gt;
  &lt;/a&gt;
  Dynamic OGP Support
&lt;/h2&gt;

&lt;p&gt;The results are now dynamic OGP, which makes it easier to understand when they are shared.&lt;/p&gt;

&lt;p&gt;It's a simple structure with a background image and text.&lt;br&gt;
To display the background image, I imported and used &lt;strong&gt;loadImage&lt;/strong&gt; from within canvas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;backgroundImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./images/background.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;backgroundImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HEIGHT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#multilingual-support"&gt;
  &lt;/a&gt;
  Multilingual support
&lt;/h2&gt;

&lt;p&gt;Next.js has i18n built-in since v10, so it can be multilingualized without importing anything.&lt;/p&gt;

&lt;p&gt;The dictionary files are prepared as a TypeScript file, and the files called useTranslate.ts in which it is determined which one to load depending on the language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;JaTexts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../locales/ja&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EnTexts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../locales/en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTranlate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;locale&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ja&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JaTexts&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EnTexts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useTranlate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then don't forget to set the following settings in next.config.js.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="nx"&gt;i18n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;locales&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ja&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;defaultLocale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the first time I noticed that only the top page is automatically rolled back to the file in that language...&lt;/p&gt;

&lt;p&gt;I wanted to make the OGP part multilingual as well, depending on whether the share URL is in English or Japanese, so I made it so that when you share, the locale parameter is left in the share URL. (If the URL is in Japanese, the share URL will be &lt;code&gt;/ja/share...&lt;/code&gt;) )&lt;/p&gt;

&lt;p&gt;After that, the overall design was improved and released.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h2&gt;

&lt;p&gt;This article is the 17th week of trying to write at least one article every week.&lt;/p&gt;

&lt;p&gt;If you'd like, please take a look at my previous weekly posts!&lt;br&gt;
See you soon!&lt;/p&gt;

&lt;p&gt;🍎🍎🍎🍎🍎🍎&lt;/p&gt;

&lt;p&gt;Please send me a message if you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="mailto:yuiko.dev@gmail.com"&gt;yuiko.dev@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/yui_active"&gt;https://twitter.com/yui_active&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🍎🍎🍎🍎🍎🍎&lt;/p&gt;

</description>
      <category>tensorflowjs</category>
      <category>nextjs</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Build your CSS loader with only one div — The Dots </title>
      <author>Temani Afif</author>
      <pubDate>Wed, 15 Sep 2021 14:37:53 +0000</pubDate>
      <link>https://dev.to/afif/build-your-css-loader-with-only-one-div-the-dots-3882</link>
      <guid>https://dev.to/afif/build-your-css-loader-with-only-one-div-the-dots-3882</guid>
      <description>&lt;p&gt;Yes, another post about CSS loaders but this time &lt;strong&gt;you&lt;/strong&gt; will build the loader! In this article, I will share with you a few tricks I used to build some of my loaders.&lt;/p&gt;

&lt;p&gt;In case you have missed it, I created a collection of &lt;a href="https://dev.to/afif/i-made-100-css-loaders-for-your-next-project-4eje"&gt;500 single div loaders&lt;/a&gt; where you will find 50 loading dots. We will see the magic behind some of them!&lt;/p&gt;

&lt;p&gt;There are a lot of techniques to create loading dots. I will focus on my favorite one which is &lt;code&gt;radial-gradient&lt;/code&gt; and background animation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#well-another-boring-tutorial-where-we-will-have-a-ton-of-code-complex-raw-keyframes-endraw-and-insane-animation-delays-right"&gt;
  &lt;/a&gt;
  Well, another boring tutorial where we will have a ton of code, complex &lt;code&gt;@keyframes&lt;/code&gt; and insane animation delays, right?
&lt;/h4&gt;

&lt;p&gt;No at all. In this tutorial you will have:&lt;/p&gt;

&lt;p&gt;✔️ One div&lt;br&gt;
✔️ One &lt;code&gt;@keyframes&lt;/code&gt;&lt;br&gt;
✔️ No delay and No complex time calculation&lt;br&gt;
✔️ We will not make one animation but many of them using the same code structure&lt;br&gt;
✔️ Not boring because this article will end before you even have time to blink&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#1-building-the-dot"&gt;
  &lt;/a&gt;
  1) Building the dot
&lt;/h3&gt;

&lt;p&gt;We first create one dot using the following code (&lt;a href="https://codepen.io/t_afif/pen/abwLoxx"&gt;demo link&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;farthest-side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;currentColor&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9EzU1-y6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qfhfvdxeja2iyq0hyfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9EzU1-y6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qfhfvdxeja2iyq0hyfl.png" alt="CSS one dot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logic is simple: I create a background layer having a size equal to &lt;code&gt;30x30&lt;/code&gt; placed at the &lt;code&gt;top center&lt;/code&gt; and I disable the repetition to have only one instance. That layer is a &lt;code&gt;radial-gradient()&lt;/code&gt; having two colors, the &lt;code&gt;currentColor&lt;/code&gt; which is the color you define within the &lt;code&gt;color&lt;/code&gt; property (useful to update the dot coloration later) and a &lt;code&gt;transparent&lt;/code&gt; color (I am using red here to clearly see the limit of the gradient layer).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;farthest-side&lt;/code&gt; allow me to consider the farthest side for my percentage reference and since we are dealing with a square gradient (&lt;code&gt;30x30&lt;/code&gt;), all the sides are the farthest one so by using &lt;code&gt;currentColor 100%&lt;/code&gt;, I draw a circle that touch the sides. no complex value like &lt;code&gt;66%&lt;/code&gt; or &lt;code&gt;72.5%&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#but-you-are-using-90-not-100"&gt;
  &lt;/a&gt;
  But you are using 90%, not 100%!
&lt;/h4&gt;

&lt;p&gt;True and this is because gradient aren't anti-aliasing so we have to consider a smaller value to have a smooth edge.&lt;/p&gt;

&lt;p&gt;Below a difference between 90% and 100%&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VaxFMaHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hqht9ipb930t5002aa4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VaxFMaHL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hqht9ipb930t5002aa4.png" alt="smooth edge vs jagged edges"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all! Now, we have our dot so let's animate it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-animating-the-dot"&gt;
  &lt;/a&gt;
  2) Animating the dot
&lt;/h3&gt;

&lt;p&gt;To animate the dot we simply animate the &lt;code&gt;background-position&lt;/code&gt;. Let's create a &lt;code&gt;@keyframes&lt;/code&gt; that update the position from &lt;code&gt;top center&lt;/code&gt; to &lt;code&gt;bottom center&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Our code will become (&lt;a href="https://codepen.io/t_afif/pen/abwLOpj"&gt;demo link&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;farthest-side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;currentColor&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think the above is self-explanatory&lt;/p&gt;

&lt;p&gt;We can also transform the code like below. It will make things easier for the next steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;farthest-side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;currentColor&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt;    &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can animate one dot. All you have to do is to update the positions to whatever you want.&lt;/p&gt;

&lt;p&gt;For anyone not familiar with &lt;code&gt;background-position&lt;/code&gt;, I highly recommend reading my previous article and more precisely &lt;a href="https://dev.to/this-is-learning/all-you-need-to-know-about-background-position-3aac#percentage-values"&gt;the section talking about the percentage values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Later, I will consider percentage values instead of keywords like &lt;code&gt;top center&lt;/code&gt; (which is equivalent to &lt;code&gt;50% 0&lt;/code&gt;). In my previous article, I am giving all the equivalence.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-adding-more-dots"&gt;
  &lt;/a&gt;
  3) Adding more dots
&lt;/h3&gt;

&lt;p&gt;To add more dots we simply add more divs placed next to each other. Then each one will have a background layer and its own &lt;code&gt;@keyframes&lt;/code&gt; animation and ..&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fOAa9zMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/JYZ397GsFrFtu/giphy.gif%3Fcid%3Decf05e479fzn3qm4xeeu9g6pfkktl47yfmjcqidtyyptgk7y%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOAa9zMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/JYZ397GsFrFtu/giphy.gif%3Fcid%3Decf05e479fzn3qm4xeeu9g6pfkktl47yfmjcqidtyyptgk7y%26rid%3Dgiphy.gif%26ct%3Dg" alt="noooo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, &lt;strong&gt;NO!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To add more dot we simply add more background layers. We can have as many layers as we want so one div can hold a lot of dots!&lt;/p&gt;

&lt;p&gt;Let's try with 2 (&lt;a href="https://codepen.io/t_afif/pen/KKqXdgB"&gt;demo link&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;farthest-side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;currentColor&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;farthest-side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;currentColor&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt;    &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt;    &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One dot will animate from &lt;code&gt;top left&lt;/code&gt; to &lt;code&gt;bottom left&lt;/code&gt; and another one from &lt;code&gt;bottom right&lt;/code&gt; to &lt;code&gt;top right&lt;/code&gt;. As simple as that!&lt;/p&gt;

&lt;p&gt;Notice that I am keeping only one &lt;code&gt;background-size&lt;/code&gt; because all my dots will have the same size. &lt;/p&gt;

&lt;p&gt;Let's optimize the code using CSS variable and percentage values (&lt;a href="https://codepen.io/t_afif/pen/BaZwoZJ"&gt;demo link&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;farthest-side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;currentColor&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable &lt;code&gt;--d&lt;/code&gt; will avoid us the repetition of the same gradient syntax. For the percentage values it's more a preference that an optimization. It easier for me to deal with values than keywords.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#did-you-already-blink"&gt;
  &lt;/a&gt;
  Did you already blink?
&lt;/h4&gt;

&lt;p&gt;No problem because we are almost done. We have all the ingredients to build any kind of loading dots.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-creating-the-loader"&gt;
  &lt;/a&gt;
  4) Creating the loader
&lt;/h3&gt;

&lt;p&gt;To build the loader you will first need a pen &amp;amp; paper. Yes, I am not joking. People tend to jump into their favorite Code Editor and start writing code trying to imagine in their head how things should work. No, no, it won't work that way.&lt;/p&gt;

&lt;p&gt;You put everything on a paper and then you translate it into a code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: define you structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this step, we decide about the number of dots, their size, the gaps, etc.&lt;/p&gt;

&lt;p&gt;So let's say I will be using 4 dots having a size of &lt;code&gt;20x20&lt;/code&gt; and a gap of &lt;code&gt;5px&lt;/code&gt;. This will give me a total width of &lt;code&gt;95px&lt;/code&gt;. I don't want them to jump a lot so let's have a height of &lt;code&gt;40px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bqLVZeLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf161ukquhp78mswusxy.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bqLVZeLH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf161ukquhp78mswusxy.JPG" alt="Dot structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: write the code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We translate what we defined in (1) into a code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;95px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;farthest-side&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;currentColor&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't worry about the result you get so far. You will see only one dot because all of them are above each other. We didn't define any &lt;code&gt;background-position&lt;/code&gt; yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: build your timeline&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this step, you need to use your imagination to define each frame of your full animation. Draw a step-by-step illustration of the animation you have in mind.&lt;/p&gt;

&lt;p&gt;Here is an example where my animation will move all the dots from the bottom to the top one by one then move them back to bottom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQKipmsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1evqjld8qtkg4cqpu57.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQKipmsX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1evqjld8qtkg4cqpu57.JPG" alt="Timeline dots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have 9 frames and it's important to note that the last one is the same as the first one to have a continuous animation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: translate the timeline into &lt;code&gt;background-position&lt;/code&gt;s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that you have your drawing, simply define the &lt;code&gt;background-position&lt;/code&gt; for each frame. For each dot we have a fixed &lt;code&gt;X&lt;/code&gt; coordinate and only the &lt;code&gt;Y&lt;/code&gt; will change.&lt;/p&gt;

&lt;p&gt;For X, we have the following values: &lt;code&gt;0%&lt;/code&gt;, &lt;code&gt;33%&lt;/code&gt;, &lt;code&gt;66%&lt;/code&gt;, &lt;code&gt;100%&lt;/code&gt;. Not very intuitive so let's use another syntax: &lt;code&gt;calc(0*100%/3)&lt;/code&gt;, &lt;code&gt;calc(1*100%/3)&lt;/code&gt;, &lt;code&gt;calc(2*100%/3)&lt;/code&gt;, &lt;code&gt;calc(3*100%/3)&lt;/code&gt;. The logic is easy: &lt;code&gt;N&lt;/code&gt; dots so we loop from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;N-1&lt;/code&gt; and we divide by &lt;code&gt;N-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The code for our animation will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;??%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;??%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;??%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;??%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;??%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;??%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;??%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;??%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;??%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It may look complex at first glance but it's very simple. Inside each frame I define the position of each dot. The X is always the same and I update the Y from &lt;code&gt;0&lt;/code&gt; (top) to &lt;code&gt;100%&lt;/code&gt; (bottom). &lt;/p&gt;

&lt;p&gt;We have our &lt;code&gt;@keyframes&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: find the percentage of the keyframes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The last step is to fill the &lt;code&gt;??&lt;/code&gt; with percentage values. We have 9 frames so we consider &lt;code&gt;8&lt;/code&gt; (always &lt;code&gt;N-1&lt;/code&gt;) and we divide &lt;code&gt;100%&lt;/code&gt; by &lt;code&gt;8&lt;/code&gt; to get &lt;code&gt;12.5%&lt;/code&gt;. We start for &lt;code&gt;0%&lt;/code&gt; and we increment by &lt;code&gt;12.5%&lt;/code&gt; until we reach &lt;code&gt;100%&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-are-done"&gt;
  &lt;/a&gt;
  You are done!
&lt;/h4&gt;

&lt;p&gt;Now put everything together and enjoy:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/eYRGrLd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The only limit to this technique is your imagination. If you start playing with it you will find yourself creating a lot of fancy dot loaders.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#you-want-more-examples"&gt;
  &lt;/a&gt;
  You want more examples?
&lt;/h3&gt;

&lt;p&gt;Ok, let's do two more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F101QKVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wdbf7v1stf9plhio59d.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F101QKVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wdbf7v1stf9plhio59d.JPG" alt="CSS loding dots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time I will consider 3 dots (always the same sizing) and the movement of each one is: center -&amp;gt; top -&amp;gt; bottom -&amp;gt; center.&lt;/p&gt;

&lt;p&gt;Notice the arrow in my drawing. It means that I want an &lt;code&gt;alternate&lt;/code&gt; animation.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWgzrwB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KcONGf7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww4emovgxsyxmi13mejj.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KcONGf7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww4emovgxsyxmi13mejj.JPG" alt="CSS loading dots"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A 4 dots loader where I will update the X coordinate as well.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNOXNNO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I think everyone got the idea 😉&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#homework-time"&gt;
  &lt;/a&gt;
  Homework time!
&lt;/h3&gt;

&lt;p&gt;Now, it's your turn to build a CSS loader, or even better a full collection of loaders! Share your creation in the comment section. 👇&lt;/p&gt;

&lt;p&gt;I will highlight the best ones in my next article and will share them on Twitter. &lt;/p&gt;

&lt;p&gt;Waiting for your CSS loaders!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwJXgUck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/RnQ9FgCFulW6c/giphy.gif%3Fcid%3Decf05e47riml0lbii61gwf11mayrx6bqf41t9o2g3vlve6x6%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwJXgUck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/RnQ9FgCFulW6c/giphy.gif%3Fcid%3Decf05e47riml0lbii61gwf11mayrx6bqf41t9o2g3vlve6x6%26rid%3Dgiphy.gif%26ct%3Dg" alt="loading your loader"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion-amp-selfpromotion"&gt;
  &lt;/a&gt;
  Conclusion &amp;amp; self-promotion
&lt;/h3&gt;

&lt;p&gt;The above is not the only technique I am using to build loading dots. There are more than this but putting everything into one article will make it hard to understand. &lt;/p&gt;

&lt;p&gt;If you want a follow up to this article with more tricks don't forget to ❤🦄&lt;/p&gt;

&lt;p&gt;You can also &lt;a href="https://www.patreon.com/temani"&gt;support me on patreon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/temani"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IuxT2L_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqlnib5n0xzpqs0vo4xe.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For only &lt;strong&gt;3€/month&lt;/strong&gt;, you encourage me to provide more content&lt;br&gt;
For &lt;strong&gt;8€/month&lt;/strong&gt;, you can become a better developer because you will have access to a private chat where you can ask me any CSS-related question at any time. I may also give you some of my secret tricks 🤫&lt;br&gt;
For &lt;strong&gt;20€/month&lt;/strong&gt;, I can help you with any project you are working on!&lt;/p&gt;

&lt;p&gt;You can also &lt;a href="https://www.buymeacoffee.com/afif"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/afif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pu7zTre_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/pqtDWYmFsadNP4A85n/giphy.gif%3Fcid%3Decf05e47ise7y0vs46euwmcroz7ds5zovtfh31mjb4f4m3bg%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pu7zTre_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/pqtDWYmFsadNP4A85n/giphy.gif%3Fcid%3Decf05e47ise7y0vs46euwmcroz7ds5zovtfh31mjb4f4m3bg%26rid%3Dgiphy.gif%26ct%3Dg" alt="Thank you"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Creating blog post images automatically for Gridsome</title>
      <author>Tyler V. (he/him)</author>
      <pubDate>Wed, 15 Sep 2021 14:31:08 +0000</pubDate>
      <link>https://dev.to/terabytetiger/creating-blog-post-images-automatically-for-gridsome-54cl</link>
      <guid>https://dev.to/terabytetiger/creating-blog-post-images-automatically-for-gridsome-54cl</guid>
      <description>&lt;p&gt;When I started working on my &lt;a href="https://chess.terabytetiger.com"&gt;chess side-blog project&lt;/a&gt; I didn't want to feel the pressure of creating blog cover images for each - so I started scrolling through the &lt;a href="https://gridsome.org/plugins/"&gt;Gridsome Plugins&lt;/a&gt; and found &lt;a href="https://github.com/Edmund1645/gridsome-plugin-blog-cover"&gt;Edmund1645's blog-cover plugin&lt;/a&gt;! Unfortunately for me, after going through the setup process I was receiving an error message. &lt;/p&gt;

&lt;p&gt;After digging through the Plugin's and Gridsome's code for an hour or two, I found that the issue seemed to be occurring when &lt;a href="https://gridsome.org/plugins/@gridsome/vue-remark"&gt;Vue-Remark&lt;/a&gt; is used in conjunction with the &lt;code&gt;collection.updateNode()&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;I wasn't entirely set on using Cloudinary to host my images, so I decided to modify the code so that I didn't need to programmatically update the frontmatter of my articles, but rather could generate the images into a &lt;code&gt;/covers/&lt;/code&gt; folder with the same name as the article, thus achieving my goal of saving time with creating blog cover images!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm-installs"&gt;
  &lt;/a&gt;
  npm installs
&lt;/h2&gt;

&lt;p&gt;If you aren't familiar with npm, &lt;a href="https://terabytetiger.com/lessons/articles/beginners-guide-to-node-package-manager/"&gt;check out my npm post&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you are, run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install fs-extra node-html-to-image

# I'm going to reference vue-remark later, 
# if you want to use that you'll also need: 
npm install @gridsome/vue-remark

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#vueremark-plugin-config"&gt;
  &lt;/a&gt;
  Vue-Remark plugin config
&lt;/h2&gt;

&lt;p&gt;The important part of the configuration for generating blog cover images is the &lt;code&gt;typeName&lt;/code&gt; - for more details on configuring vue-remark see &lt;a href="https://gridsome.org/plugins/@gridsome/vue-remark"&gt;the plugin's page&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;siteName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Site Name Here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@gridsome/vue-remark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;typeName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt; Note this value! 📝&lt;/span&gt;
        &lt;span class="na"&gt;baseDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./content/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;pathPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/templates/Post.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll also want to make sure you have at least one markdown file created in the &lt;code&gt;./content/posts/&lt;/code&gt; directory with the bare minimum frontmatter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;// intro.md
--------
&lt;/span&gt;title: Intro Post
&lt;span class="gh"&gt;cover_image: "../covers/intro.png" 
--------
&lt;/span&gt;
This is a sample post! 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;If you're trying to follow along, make sure to create a &lt;code&gt;Post.vue&lt;/code&gt; file in your templates folder so that &lt;code&gt;gridsome develop&lt;/code&gt; can create your post pages properly!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-to-an-image"&gt;
  &lt;/a&gt;
  HTML to an image
&lt;/h2&gt;

&lt;p&gt;So now we've got our sample post ready to go - let's setup our html to be converted to an image! &lt;/p&gt;

&lt;p&gt;In the root directory, create a &lt;code&gt;functions&lt;/code&gt; folder with a &lt;code&gt;generateHtml.js&lt;/code&gt; file inside. The HTML returned by this code is going to be what becomes our post cover image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This creates a basic solid background with title and a white border &lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;backgroundColors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imgHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imgWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;domain&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;backgroundColors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;backgroundColors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
        &amp;lt;style&amp;gt;
        * {
        box-sizing: border-box;
        padding: 0;
        margin: 0;
      }

      body {
        min-width: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imgWidth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; 
        min-height: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imgHeight&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; 
        padding: 40px;
        background: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
        color: #ffffff;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
      }

      div.container {
        border: 3px solid #ffffff;
        text-align: left;
        padding: 30px;
        width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-around;
      }
      h1.title {
        font-size: 3.7rem;
        text-transform: capitalize;
        text-align: center;
      }      
        &amp;lt;/style&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
          &amp;lt;div class="container"&amp;gt;
            &amp;lt;h1 class="title"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gridsomeserver-setup"&gt;
  &lt;/a&gt;
  gridsome.server Setup
&lt;/h2&gt;

&lt;p&gt;Finally, our &lt;code&gt;gridsome.server&lt;/code&gt; setup - this is where we will check each time &lt;code&gt;gridsome develop&lt;/code&gt; or &lt;code&gt;gridsome build&lt;/code&gt; is run to see if any posts are missing a cover image. If they are, the image will be generated in the covers folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs-extra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-html-to-image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generateHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./functions/generateHtml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;typeName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// This should be the typeName noted above 📝&lt;/span&gt;
  &lt;span class="c1"&gt;// 👇🏻 Each background will randomly have one of these colors&lt;/span&gt;
  &lt;span class="na"&gt;backgroundColors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#23313B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#636655&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#607077&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#806752&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#5d6f75&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#915335&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;imgWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1024px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// The width of your cover image&lt;/span&gt;
  &lt;span class="na"&gt;imgHeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;512px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// The height of your cover image&lt;/span&gt;
  &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// I hard coded this to true in my html&lt;/span&gt;
  &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your domain goes here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Edmund includes this in their generated images&lt;/span&gt;
  &lt;span class="na"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content/covers/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Where the cover images should be generated to&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Keeping this for easy modifications from gridsome-plugin-blog-cover&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultOptions&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;typeName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;internal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;typeName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;typeName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Using the same filename as the file for easy frontmatter&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imgName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ensureDirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputDir&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imgName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// Only generate images for files that don't exist already&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Generating Missing Cover Images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Creating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;imgName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.png`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;createImage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
              &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;generateHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtitle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; already exists`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="c1"&gt;// if updateNode() worked, this is where it would go :)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks again to &lt;a href="https://github.com/Edmund1645"&gt;Edmund1645&lt;/a&gt; for the baseline work for this! &lt;/p&gt;

</description>
      <category>gridsome</category>
      <category>guide</category>
      <category>blogging</category>
    </item>
    <item>
      <title>How to mint an NFT with JavaScript</title>
      <author>Waylon Jepsen</author>
      <pubDate>Wed, 15 Sep 2021 14:01:55 +0000</pubDate>
      <link>https://dev.to/0xjepsen/how-to-mint-an-nft-with-javascript-2nci</link>
      <guid>https://dev.to/0xjepsen/how-to-mint-an-nft-with-javascript-2nci</guid>
      <description>&lt;p&gt;This article will teach you how to create and mint NFTs and query their data using JavaScript on the hashgraph network. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-the-heck-is-an-nft"&gt;
  &lt;/a&gt;
  What the heck is an NFT?
&lt;/h2&gt;

&lt;p&gt;Before we get into it, let's go over what an NFT is. NFT stands for Non-Fungible Token. The word fungible means "able to be replaced" or "replace an identical item". In short, a Non-Fungible token is irreplaceable. For a digital asset to be irreplaceable, it needs to be unique. So the tokens we will be creating are unique and irreplaceable! Some use cases for these unique tokens ensure the authenticity of the information. As of right now, the main usages of NFTs have been for digital art and collectibles but they can be used for so much more. For example, one could use NFTs to protect information like a deed to a house, certificates of authenticity, educational degrees, identity cards, or other crucial unique details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-make-one"&gt;
  &lt;/a&gt;
  How do you make one?
&lt;/h2&gt;

&lt;p&gt;For developers getting into web3 and blockchain technologies, it can be challenging to learn all the caveats of the new technologies such as learning a new programming language like Solidity. Minting an NFT on Hedera is simple and can be done with programming languages you are already familiar with like JavaScript. Making an NFT on the Hedera Network uses one of the network's core services, the Hedera Token Service(HTS). There are three officially supported SDKs for this service: Golang, Java, and JavaScript, as well as a variety of community-developed SDKs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#environment-set-up"&gt;
  &lt;/a&gt;
  Environment Set up
&lt;/h2&gt;

&lt;p&gt;You are free to use any of your preferred environment tools. I recommend following this short (3min) &lt;a href="https://www.youtube.com/watch?v=afQOcY9DfjY&amp;amp;t=49s"&gt;guide&lt;/a&gt; to set up with node.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-check"&gt;
  &lt;/a&gt;
  Code Check
&lt;/h2&gt;

&lt;p&gt;After configuring your account Id, private keys, and the client. your code should look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K0-vVlwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbzh6s16wz0p22h1f96b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K0-vVlwE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbzh6s16wz0p22h1f96b.png" alt="Code Check"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-nft"&gt;
  &lt;/a&gt;
  Creating the NFT
&lt;/h2&gt;

&lt;p&gt;To create the NFT, you will need to import TokenCreateTransaction, PrivateKey, TokenType, and TokenSupplyType from the Hedera SDK, so include these in the require statement at the top of your file. Then you can use the TokenCreateTransaction passing in the appropriate configuration for your token. For reference, take a look at the example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1E1oa0ZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nreckk7b3ejz7s7d1j95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1E1oa0ZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nreckk7b3ejz7s7d1j95.png" alt="Token Create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we create a token with a supply of 10. The initial collection must be zero so that you can set unique metadata for each NFT. It is also crucial that the decimals are zero so that your NFTs wont be fractional. The supply key is the key of the account permitted to mint the corresponding NFTs. We will go over minting in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minting"&gt;
  &lt;/a&gt;
  Minting
&lt;/h2&gt;

&lt;p&gt;Minting an NFT is straightforward. We use the TokenMintTransaction from the Hedera SDK, so be sure to include it in your imports at the top of your file. The syntax is provided below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_8-eSCDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ittlws0pzjuuy54k6ki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8-eSCDJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ittlws0pzjuuy54k6ki.png" alt="NFT Mint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are multiple options for metadata storage solutions. I wrote more in-depth about the possibilities and use cases &lt;a href="https://hedera.com/blog/developer-quick-start-nfts-and-metadata"&gt;here&lt;/a&gt;. However, it is very straightforward and typical for developers to use the &lt;a href="https://www.ipfs.com/"&gt;InterPlanetary File System&lt;/a&gt; (IPFS). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-nft-information"&gt;
  &lt;/a&gt;
  Querying NFT Information
&lt;/h2&gt;

&lt;p&gt;Now that your NFT has been minted, you might want to be able to access its metadata from the network. To do this, you can use the TokenNftInfoQuery, and NftId from the Hedera SDK.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fznybpT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbk108l8jfnhdl28xslo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fznybpT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbk108l8jfnhdl28xslo.png" alt="NFT Query"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This query returns the metadata of the minted NFT.  &lt;/p&gt;

&lt;p&gt;If you liked this guide or have questions I will be going through some of these examples live on twitch so be sure to follow &lt;a href="https://www.twitch.tv/hederatv"&gt;HederaTV&lt;/a&gt; on twitch. &lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>javascript</category>
      <category>distributedsystems</category>
    </item>
    <item>
      <title>#help Should I use Golang or Node.js for E-commerce </title>
      <author>Abid Gul Shahid</author>
      <pubDate>Wed, 15 Sep 2021 14:01:34 +0000</pubDate>
      <link>https://dev.to/abidgulshahid/help-should-i-use-golang-or-node-js-for-e-commerce-3ebb</link>
      <guid>https://dev.to/abidgulshahid/help-should-i-use-golang-or-node-js-for-e-commerce-3ebb</guid>
      <description>&lt;p&gt;Hello Everyone&lt;br&gt;
Hope you're all doing well. &lt;/p&gt;

&lt;p&gt;I need a little help, I want to create an e-commerce for a startup, They gave me two options for a backend Golang and Node.js. I have no expereience in both. Previously I used a Django/Flask as backend. I am interested in  Golang. So it is possible that can I use Golang for e-commerce as a backend?&lt;/p&gt;

&lt;p&gt;I want to create a REST-API in golang and use it with react.js which we will be using for a frontend.&lt;/p&gt;

&lt;p&gt;I am open for any kind suggestions.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>node</category>
      <category>go</category>
    </item>
    <item>
      <title>How to create an GitHub Special Repository for Organisation</title>
      <author>Siddhant Khare</author>
      <pubDate>Wed, 15 Sep 2021 13:40:29 +0000</pubDate>
      <link>https://dev.to/siddhantkcode/how-to-create-an-github-special-repository-for-organisation-3g86</link>
      <guid>https://dev.to/siddhantkcode/how-to-create-an-github-special-repository-for-organisation-3g86</guid>
      <description>&lt;p&gt;Around a Year Ago, GitHub Releases a special feature, that we can create our README, which will show us to the GitHub Profile, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hHYyTmor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abb6ysep4l7he2qohujl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hHYyTmor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abb6ysep4l7he2qohujl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, Today I saw &lt;a href="https://twitter.com/aggre_/status/1438004521679028225"&gt;this tweet&lt;/a&gt;, that this feature is available for the Organisations too.&lt;/p&gt;

&lt;p&gt;Now, let me show how you can create one for your GitHub organisation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-create-a-homepage-for-github-organisation"&gt;
  &lt;/a&gt;
  Steps to Create a homepage for GitHub organisation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a New Public Repository in your organization named &lt;code&gt;.github&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under That Make a &lt;code&gt;profile&lt;/code&gt; directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a &lt;code&gt;README.md&lt;/code&gt; under &lt;code&gt;profile&lt;/code&gt; directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Path of your &lt;code&gt;README.md&lt;/code&gt; should be &lt;code&gt;.github/profile/README.md&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-you-can-add-in-your-org-homepage"&gt;
  &lt;/a&gt;
  Things You can add in Your Org. Homepage
&lt;/h2&gt;

&lt;p&gt;It Can have all your README Details as you had in &lt;code&gt;README.md&lt;/code&gt; of your main repository of the Org.&lt;/p&gt;

&lt;p&gt;Or, you can add some promotional stuff, as you have in your Organisation's Landing Page/ Documentation Page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You Have To Create A File Like This:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/IndianOpenSourceFoundation/.github/blob/main/profile/README.md"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--grheBleK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djcpnfsfy0xgbp6oy08t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/IndianOpenSourceFoundation/.github/blob/main/profile/README.md"&gt;Open Given File&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You Can Add All Information, you wanted to display it out there, ( it can work as your Promotional page also :) )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sample:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://iosf.in/"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://raw.githubusercontent.com/IndianOpenSourceFoundation/iosf-website/f38cba6cdba11cdcb90641ac192d1a36d67b6cd8/public/img/iosf-logo.svg"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"20%"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Indian Open Source Foundation&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Promoting open source, one step at a time smiley 😀 👨‍💻&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="gt"&gt;
&amp;gt; Join us as a contributor and associate with us in our journey for making Open Source Contribution lit &amp;lt;span role="img" aria-label="fire emoji"&amp;gt;🔥&amp;lt;/span&amp;gt; and super powerful for the budding and already existing community.&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://toolsiosf.typeform.com/to/fl45kmgs"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://img.shields.io/badge/-Join%20Us-%23EF233C"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"10%"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com/iosf_india"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://badgen.net/badge/icon/twitter?icon=twitter&amp;amp;label"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"13%"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="sb"&gt;



&lt;/span&gt;&lt;span class="gu"&gt;### Below is a list of the most important repositories.&lt;/span&gt;
&lt;span class="p"&gt;
-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Dynamic Cli&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://github.com/IndianOpenSourceFoundation/dynamic-cli&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;: A Modern, user-friendly command-line HTTP client for the API testing, and if you're stuck - Search and browse StackOverflow without leaving the CLI.
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Argon&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://github.com/IndianOpenSourceFoundation/Argon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;: A Website that will track the website traffic and health.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Commit Your Changes and 💥
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It Will Look Like this:&lt;br&gt;
&lt;a href="https://github.com/IndianOpenSourceFoundation"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NF0i6ebl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk1ih6j8vdalkx55cab5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You Can Join Our Organisation Too :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You Can Follow Me On:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/siddhant-k-code"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pQJI-Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GitHub-100000%3Fstyle%3Dfor-the-badge%26logo%3Dgithub%26logoColor%3Dwhite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/intent/follow?screen_name=Siddhant_k_code"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y08aSIej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Siddhant_k_code-%25231DA1F2.svg%3Fstyle%3Dfor-the-badge%26logo%3DTwitter%26logoColor%3Dwhite"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>organisation</category>
      <category>readme</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Docker in development            
(with Node.js)</title>
      <author>Akshay Gupta</author>
      <pubDate>Wed, 15 Sep 2021 13:22:29 +0000</pubDate>
      <link>https://dev.to/akshaydotsh/docker-in-development-with-node-js-454k</link>
      <guid>https://dev.to/akshaydotsh/docker-in-development-with-node-js-454k</guid>
      <description>&lt;p&gt;This post is going to help you find out how to setup docker in such a way that you can easily and quickly get started using docker in development environment with Node.js without much hassle! &lt;/p&gt;

&lt;p&gt;We will be learning basics of &lt;strong&gt;Docker Volumes&lt;/strong&gt; first and then move on to how to use volumes during the development phase!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#basics-of-volumes"&gt;
  &lt;/a&gt;
  Basics Of Volumes
&lt;/h2&gt;

&lt;p&gt;Creating volume is pretty simple using the docker &lt;code&gt;create&lt;/code&gt; command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker volume create myvol
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also remove the volume straight away by using the remove command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker volume remove myvol
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also verify that the volume has been created by using &lt;code&gt;list&lt;/code&gt; command to list volumes on your system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker volume &lt;span class="nb"&gt;ls
&lt;/span&gt;DRIVER    VOLUME NAME
&lt;span class="nb"&gt;local     &lt;/span&gt;88b0dd3439a42b08ab161dfb718b1fdcb548d776521f0e008a0e6b002ecd1ee7
&lt;span class="nb"&gt;local     &lt;/span&gt;96a6b003a662d7461c100e3bef816322f036adba8eef1483755551aa463ba7b4
&lt;span class="nb"&gt;local     &lt;/span&gt;myvol
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see our volume &lt;code&gt;myvol&lt;/code&gt; is created with local driver. We can also go ahead and get some more information regarding the volume with the &lt;em&gt;inspect&lt;/em&gt; command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker inspect myvol
&lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"CreatedAt"&lt;/span&gt;: &lt;span class="s2"&gt;"2021-09-13T18:20:00Z"&lt;/span&gt;,
        &lt;span class="s2"&gt;"Driver"&lt;/span&gt;: &lt;span class="s2"&gt;"local"&lt;/span&gt;,
        &lt;span class="s2"&gt;"Labels"&lt;/span&gt;: &lt;span class="o"&gt;{}&lt;/span&gt;,
        &lt;span class="s2"&gt;"Mountpoint"&lt;/span&gt;: &lt;span class="s2"&gt;"/var/lib/docker/volumes/myvol/_data"&lt;/span&gt;,
        &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"myvol"&lt;/span&gt;,
        &lt;span class="s2"&gt;"Options"&lt;/span&gt;: &lt;span class="o"&gt;{}&lt;/span&gt;,
        &lt;span class="s2"&gt;"Scope"&lt;/span&gt;: &lt;span class="s2"&gt;"local"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Among other information this command show the Mountpoint for our volume data, which is &lt;code&gt;/var/lib/docker/volumes/myvol/_data&lt;/code&gt;. We can very well &lt;code&gt;cd&lt;/code&gt; into this dir and see the data for the volume. This data could be your codebase, or the metadata or any other data that you store in the volume&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-there-is-a-catch"&gt;
  &lt;/a&gt;
  But there is a catch!!
&lt;/h3&gt;

&lt;p&gt;Are you a mac user ? If you're not a mac user you can skip this section but if you are this might be helpful. You can't directly cd into the /docker folder if you do try to do that it would give&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /var/lib/docker
&lt;span class="nb"&gt;cd&lt;/span&gt;: no such file or directory: /var/lib/docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why is that ?!&lt;/p&gt;

&lt;p&gt;That is because Docker Desktop (on mac) actually runs a VM behind the scenes because docker, because of the way its made, is not directly compatible with mac. But there are ways to access the underlying data in the VM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One option is to log into the shell using &lt;code&gt;netcat&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nc &lt;span class="nt"&gt;-U&lt;/span&gt; ~/Library/Containers/com.docker.docker/Data/debug-shell.sock

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then cd into the data directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/ # cd /var/lib/docker/volumes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can exist the shell by typing &lt;code&gt;exit&lt;/code&gt; command or pressing &lt;code&gt;ctrl+c&lt;/code&gt; on keyboard&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Another option is using nsenter in privileged container like below
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--privileged&lt;/span&gt; &lt;span class="nt"&gt;--pid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;host debian nsenter &lt;span class="nt"&gt;-t&lt;/span&gt; 1 &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will open the shell same way as the first option. &lt;br&gt;
Checkout this &lt;a href="https://gist.github.com/BretFisher/5e1a0c7bcca4c735e716abf62afad389"&gt;gist&lt;/a&gt; by &lt;strong&gt;Bret Fisher&lt;/strong&gt; to know more :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For windows users, docker artifacts can be found at &lt;code&gt;\\wsl$\docker-desktop-data\version-pack-data\community\docker\&lt;/code&gt;. If this does not work, I would suggest going through related discussions on stackoverflow and docker forums (example: &lt;a href="https://forums.docker.com/t/volume-mounts-in-windows-does-not-work/10693/22"&gt;here&lt;/a&gt;) to see how to access data&lt;/p&gt;

&lt;p&gt;Cool! Now that we are done with basics of volumes 🎉 Let's jump onto the code!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-nodejs-express-api"&gt;
  &lt;/a&gt;
  A Node.js Express API
&lt;/h3&gt;

&lt;p&gt;Let's quickly setup an express application. We won't waste much time here we'll pull sample "hello world" example from express.js website&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;node_docker_demo
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;node_docker_demo
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add express
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;index.js&lt;/code&gt; let's paste the following sample code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Example app listening at http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have an express application running .. let's write our Dockerfile!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockerfile-setup"&gt;
  &lt;/a&gt;
  Dockerfile Setup
&lt;/h3&gt;

&lt;p&gt;We will start with pull &lt;code&gt;node:latest&lt;/code&gt; image from the registry (It doesn't matter the version we pull from registry in our case because it is a simple express app but you might want to stick to a version for backward-compatibility issues or do the node.js and dependencies upgrade accordingly)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also set our work directory in the image so that we don't have to mention absolute path everytime&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, we will install node_modules in our image and for that we would need &lt;code&gt;package.json&lt;/code&gt; and either &lt;code&gt;yarn.lock&lt;/code&gt; or &lt;code&gt;package-lock.json&lt;/code&gt; file (depending on if you used yarn or npm) in the image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ["package.json", "yarn.lock", "./"]&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would copy both package.json and yarn.lock into the current working directory (specified by &lt;code&gt;./&lt;/code&gt;). &lt;br&gt;
Note: our current working directory has been set to &lt;code&gt;/app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Running yarn install after that would install all the required dependencies in node_modules&lt;/p&gt;

&lt;p&gt;Now our directory structure inside the image looks something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app
 |_ package.json
 |_ yarn.lock
 |_ node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next let's copy everything else we have in our project with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will copy everything from our host's current working (&lt;code&gt;.&lt;/code&gt;) dir to image's working dir (&lt;code&gt;.&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;All there's left to do is run the server with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;, &lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All in all our Dockerfile looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:latest&lt;/span&gt;

&lt;span class="c"&gt;# setting work dir&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;## Following steps are done before copying the remaining file&lt;/span&gt;
&lt;span class="c"&gt;## to make use of docker's caching capabilities&lt;/span&gt;
&lt;span class="c"&gt;# copying files required to install node modules&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ["package.json", "yarn.lock", "./"]&lt;/span&gt;

&lt;span class="c"&gt;# install node_modules &lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;# copy everything else&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="c"&gt;# mention the port which we'll expose with port-mapping &lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;

&lt;span class="c"&gt;# run server&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;, &lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Gotcha!&lt;/em&gt; There is a small issue here, and that is that we are installing node modules with yarn install before copying every other file but then when we do &lt;code&gt;COPY . .&lt;/code&gt; we would be again copying node_modules into the image. To prevent this we will make a &lt;code&gt;.dockerignore&lt;/code&gt; file and tell docker to ignore node_modules while copying data inside the image&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.dockerignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's build this with &lt;code&gt;docker build&lt;/code&gt; command and then run it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; myapp &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 3000:300 &lt;span class="nt"&gt;--name&lt;/span&gt; myapp_container myapp
Example app listening at http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have now successfully containerized our node.js application but there is one issue that we have:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we make any change in our codebase, as we do hundreds of thousands of times during development, we would need to rebuild the image and run the container again (hundreds of thousands of times)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That can't be a good strategy. There must be a better way to do this.&lt;br&gt;
Thankfully, there is! VOLUMES! 😍&lt;/p&gt;

&lt;p&gt;For the purposes of this use-case we will use &lt;strong&gt;bind mounts&lt;/strong&gt;. Essentially we will bind our host's current working directory to the image's working dir (&lt;code&gt;/app&lt;/code&gt;) and attach a file watcher (e.g. &lt;code&gt;nodemon&lt;/code&gt;) so that as soon as we save a change in development, that change get's propagated to the image (because volume!), so nodemon would detect that change and reload our node.js server&lt;/p&gt;

&lt;p&gt;We can configure bind-mount while running our container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run -it --rm \
  -p 3000:300 \
  -v $(pwd):/app \
  --name myapp_container \
  myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;-v $(pwd):/app&lt;/code&gt; above would mount the current working dir to /app. Another way to do it is using &lt;code&gt;--mount&lt;/code&gt; flag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker run -it --rm \
  -p 3000:3000 \
  --mount type=bind,source=$(pwd),target=/app \
  --name myapp_container 
  myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is fine and dandy, but it's not enough! We also need to configure a file watcher like we discussed. Along with the file watcher another thing to keep in mind is since we are using bind-mounts now, there is no need to actually &lt;code&gt;COPY&lt;/code&gt; anything from our local host to image !! So let's remove that and add nodemon into our image and see how things look&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:latest&lt;/span&gt;

&lt;span class="c"&gt;# setting work dir&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# added nodemon globally&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; nodemon

&lt;span class="c"&gt;# run the server with watcher&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["nodemon", "index.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it!! Let's build this file and run it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; myapp &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-p&lt;/span&gt; 3000:300 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:/app &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--name&lt;/span&gt; myapp_container &lt;span class="se"&gt;\&lt;/span&gt;
  myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we make a code change, the watcher will detect it and restart the node.js server automatically!&lt;/p&gt;

&lt;p&gt;And, that is how you can start with developing Node.js applications on docker!&lt;/p&gt;

&lt;p&gt;🥳 🥳 🥳 &lt;/p&gt;

</description>
      <category>docker</category>
      <category>javascript</category>
      <category>node</category>
      <category>container</category>
    </item>
    <item>
      <title>19 Essential Front-End Interview Questions</title>
      <author>hrishikesh1990</author>
      <pubDate>Wed, 15 Sep 2021 12:52:27 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/19-essential-front-end-interview-questions-1o88</link>
      <guid>https://dev.to/hrishikesh1990/19-essential-front-end-interview-questions-1o88</guid>
      <description>&lt;p&gt;Hello, fellow developers, I have compiled a list of essential Front-End interview questions that I felt every Front-end developer should know.&lt;/p&gt;

&lt;p&gt;Do drop your thoughts in the comments section below. Also, feel free to comment in case you find any content to be incorrect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-are-the-advantages-of-using-rest-web-services"&gt;
  &lt;/a&gt;
  1. What are the advantages of using REST web services?
&lt;/h2&gt;

&lt;p&gt;Listed below are a few advantages of using REST web services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rest is a simple, lightweight, and fast protocol&lt;/li&gt;
&lt;li&gt;The learning curve is small as it uses the HTTP protocol&lt;/li&gt;
&lt;li&gt;Since the resources are decoupled the content can be accessed in numerous formats (HTML, Text, JSON, PDF, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-explain-load-balancing"&gt;
  &lt;/a&gt;
  2. Explain Load Balancing
&lt;/h2&gt;

&lt;p&gt;Load balancing is a method in which requests are allocated and handled by numerous machines rather than a single device. This ensures that the load does not rely on a single point and is allocated efficiently.&lt;/p&gt;

&lt;p&gt;The most commonly used load balancing technique is called Round Robin. In this method, the requests are distributed across a group of servers. The algorithm allocates requests to the servers, once completed, it goes back to the top and the process is repeated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-why-are-doctypes-used-in-html"&gt;
  &lt;/a&gt;
  3. Why are doctypes used in HTML?
&lt;/h2&gt;

&lt;p&gt;HTML Doctypes are not elements or tags but rather a document type declaration. This document is used to tell the web browser the HTML version used or about any other markup language that is used on the current page.&lt;/p&gt;

&lt;p&gt;These doctypes must be added before the  tags. The following code is used to declare it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="na"&gt;DOCTYPE&lt;/span&gt; &lt;span class="na"&gt;html&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-describe-sessionstorage-localstorage-and-cookie"&gt;
  &lt;/a&gt;
  4. Describe sessionStorage, localStorage, and cookie.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Session Storage&lt;/strong&gt; - As the name suggests, this data is stored until the session or tab is closed, however, it is not cleared during reloads. This data remains on the client-side and cannot be transferred to the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local Storage&lt;/strong&gt; - This data is stored on the client's computer. This data has no expiration, however, it is limited only to string data. Local data can be accessed using JavaScript and HTML but cannot be transferred to the server end. Although local storage data does not have an expiration date it can be cleared by the user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cookies&lt;/strong&gt; - Cookies sent back to the server-side and hence the size must be less than 4KB. The data is sent back when a subsequent XHR request is made. Although they are meant for server-side reading they can be accessed on the client-side as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-explain-progressive-rendering"&gt;
  &lt;/a&gt;
  5. Explain progressive rendering
&lt;/h2&gt;

&lt;p&gt;Progressive Rendering is a technique that sequentially renders the most critical content of the server first and then renders the other parts. This allows the users to start using the page faster.&lt;/p&gt;

&lt;p&gt;This method of rendering was quite prevalent during the days when internet speeds were slower. However, they are still being used extensively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-what-are-bfc-block-formatting-context-and-how-do-they-work"&gt;
  &lt;/a&gt;
  6. What are BFC (Block Formatting Context) and how do they work?
&lt;/h2&gt;

&lt;p&gt;Block formatting context is a type of formatting context in CSS that allows you to lay child elements based on the initial block layout rules.&lt;/p&gt;

&lt;p&gt;The outermost element that uses the block layout establishes the initial block layout rules. Every element laid inside the initial block will follow the same rules. The initial block rules are outlined by the CSS Box model. Elements in a BFC would have the same margins, borders, padding and would interact with other blocks in the same context.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-list-the-advantages-amp-disadvantages-of-using-css-preprocessors"&gt;
  &lt;/a&gt;
  7. List the advantages &amp;amp; disadvantages of using CSS preprocessors?
&lt;/h2&gt;

&lt;p&gt;CSS preprocessor is a program/ utility that allows you to generate CSS from the preprocessor's syntax. This helps significantly increase code reusability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages of using CSS Preprocessors:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS Preprocessors facilitate adding variables and functions increasing code reusability which makes development easier.&lt;/li&gt;
&lt;li&gt;CSS Preprocessors make it easier to manage code as they allow the grouping of parent and child elements into modular blocks.&lt;/li&gt;
&lt;li&gt;Multiple stylesheets can be joined into one using CSS preprocessors. Once this is done, only the main files need to be imported to the website; this significantly reduces the number of server calls for the CSS files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages of Using CSS Preprocessors:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compilation times can be longer. This is mainly because every SASS has to be converted into CSS and then compiled.&lt;/li&gt;
&lt;li&gt;Since it joins multiple CSS files, the main file can become very large. This increases the time taken for a request to complete.&lt;/li&gt;
&lt;li&gt;A bigger learning curve as the user would need a proper understanding of the preprocessor before they can utilize it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-what-are-pseudoclasses-provide-a-few-realworld-use-cases"&gt;
  &lt;/a&gt;
  8. What are pseudo-classes? provide a few real-world use cases.
&lt;/h2&gt;

&lt;p&gt;In CSS, a pseudo-class is used to specify a special state for an element. Based on this state different styles can be applied.&lt;/p&gt;

&lt;p&gt;A few use cases of pseudo-classes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change the color of an element when the user hovers over it&lt;/li&gt;
&lt;li&gt;Style a button when it is clicked&lt;/li&gt;
&lt;li&gt;Change the color of links to distinguish visited and unvisited links&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-list-a-few-common-use-cases-for-anonymous-functions"&gt;
  &lt;/a&gt;
  9. List a few common use cases for anonymous functions.
&lt;/h2&gt;

&lt;p&gt;Anonymous functions are functions without a name identifier and hence they are usually not accessible.&lt;/p&gt;

&lt;p&gt;Some common use cases are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are used as arguments in other functions&lt;/li&gt;
&lt;li&gt;They are used to create and invoke Immediately Invokable Function Expressions (IIFE)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-differentiate-between-synchronous-and-asynchronous-functions"&gt;
  &lt;/a&gt;
  10. Differentiate between synchronous and asynchronous functions.
&lt;/h2&gt;

&lt;p&gt;Synchronous tasks are performed in a sequence, one after the other. The next task is executed only when the previous task is complete. Although this method is not time efficient, it works well when a sequence of tasks are dependent on each other.&lt;/p&gt;

&lt;p&gt;Asynchronous tasks are performed simultaneously. These tasks do not wait for the previous task to complete. This allows more tasks to be completed in a short amount of time. However, this method would not work with dependent tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-what-are-higherorder-functions"&gt;
  &lt;/a&gt;
  11. What are higher-order functions?
&lt;/h2&gt;

&lt;p&gt;Higher-order functions are functions that operate on other functions. These functions either take other functions as arguments or return them and hence they are called higher-order functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-what-are-data-attributes"&gt;
  &lt;/a&gt;
  12. What are data- attributes?
&lt;/h2&gt;

&lt;p&gt;Data attributes are used to store extra information/ data in the DOM. These data attributes can then be easily accessible using Javascript and hence a lot of libraries use it.&lt;/p&gt;

&lt;p&gt;The code snippet below is used to initiate the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"myDiv"&lt;/span&gt; &lt;span class="na"&gt;data-user=&lt;/span&gt;&lt;span class="s"&gt;"flexiple"&lt;/span&gt; &lt;span class="na"&gt;data-list-size=&lt;/span&gt;&lt;span class="s"&gt;"7"&lt;/span&gt; &lt;span class="na"&gt;data-maxage=&lt;/span&gt;&lt;span class="s"&gt;"170"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#13-what-is-semantic-html"&gt;
  &lt;/a&gt;
  13. What is Semantic HTML?
&lt;/h2&gt;

&lt;p&gt;Semantic or Semantically correct HTML is used to structure content appropriately so that they are displayed correctly.&lt;/p&gt;

&lt;p&gt;The structure of the content is really important as this is what makes the pages readable. Additionally, properly structured content helps search engines understand your page better and this pushes it to rank higher.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-what-are-optional-closing-tags"&gt;
  &lt;/a&gt;
  14. What are optional closing tags?
&lt;/h2&gt;

&lt;p&gt;While writing HTML it is a common practice to add an end tag, some tags in HTML do not require end tags. When the browser hits the next occurrence of the tag it automatically ends the previous tags.&lt;/p&gt;

&lt;p&gt;Although not significant this could help you save a few bytes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-what-is-the-difference-between-absolute-relative-fixed-and-static-positions"&gt;
  &lt;/a&gt;
  15. What is the difference between absolute, relative, fixed, and static positions?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Absolute&lt;/strong&gt; - An absolute element is positioned relative to the nearest parent element. In case a parent element is not present it is positioned based on the page itself and moves along with the page scroll.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relative&lt;/strong&gt; - When an object is positioned relative to an element without adding any position attributes nothing happens. However, if a positional attribute is placed Eg: 20px to the right, the element will move 20px to the right of the original element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fixed&lt;/strong&gt; - A fixed position implies that the element remains fixed to the viewport, which means it stays in the same place even if the page is scrolled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Static&lt;/strong&gt; - Elements are positioned static by default, these elements are not affected by positional attributes (Top, bottom, left, right). If an element is positioned static it follows the normal flow of the page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-are-documentonload-and-windowonload-fired-at-the-same-time"&gt;
  &lt;/a&gt;
  16. Are document.onload and window.onload fired at the same time?
&lt;/h2&gt;

&lt;p&gt;Document.onload is fired when the DOM is ready. This could be either before or after the images, scripts, and other contents are loaded.&lt;/p&gt;

&lt;p&gt;However, the Window.onload is fired only when the DOM is fully loaded and ready with all the content including images, scripts, css, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-what-are-the-various-ways-to-get-elements-from-the-dom"&gt;
  &lt;/a&gt;
  17. What are the various ways to get elements from the DOM?
&lt;/h2&gt;

&lt;p&gt;These are the common methods used to get an element from the DOM:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getElementById&lt;/li&gt;
&lt;li&gt;getElementsByClassName&lt;/li&gt;
&lt;li&gt;getElementsByTagName&lt;/li&gt;
&lt;li&gt;querySelector&lt;/li&gt;
&lt;li&gt;querySelectorAll&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#18-what-is-reflow-and-how-could-you-avoid-it"&gt;
  &lt;/a&gt;
  18. What is reflow? and how could you avoid it?
&lt;/h2&gt;

&lt;p&gt;When the layout, window size, etc of an element is changed, the position of all the elements after it changes accordingly. This in turn affects the flow of the page and is called reflow.&lt;/p&gt;

&lt;p&gt;A few methods you can use to avoid reflow are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Avoid setting multiple inline styles&lt;/li&gt;
&lt;li&gt;Avoid tables in your layout&lt;/li&gt;
&lt;li&gt;Add animations to elements that are fixed or absolute&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#19-write-the-code-to-add-a-class-to-an-element-using-the-query-selector"&gt;
  &lt;/a&gt;
  19. Write the code to add a class to an element using the query selector.
&lt;/h2&gt;

&lt;p&gt;This is a very common frontend interview question and the code is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;addClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
   &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;elm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;querySelector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elm&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
      &lt;span class="n"&gt;elm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;classList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to display 
the time and date of a given location with PHP</title>
      <author>Ninja Coder</author>
      <pubDate>Wed, 15 Sep 2021 12:43:02 +0000</pubDate>
      <link>https://dev.to/ninjadesbois/how-to-display-the-time-and-date-of-a-given-location-with-php-dkc</link>
      <guid>https://dev.to/ninjadesbois/how-to-display-the-time-and-date-of-a-given-location-with-php-dkc</guid>
      <description>&lt;p&gt;In this second article I try to summarize how to set and display the timestamp according to a given time zone.&lt;/p&gt;

&lt;p&gt;Dans ce deuxième article je résume brièvement comment paramétrer et afficher l'horodatage suivant un fuseau horaire donné.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9Ape_8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px9l5b9ui0dnpo3a5qh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9Ape_8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px9l5b9ui0dnpo3a5qh2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>beginners</category>
    </item>
    <item>
      <title>HAVE YOU MISSED ZED RUN? IS THE ENTRANCE FEE TOO HIGH? I FOUND THIS NEW GAME!</title>
      <author>zenteh</author>
      <pubDate>Wed, 15 Sep 2021 12:35:10 +0000</pubDate>
      <link>https://dev.to/zenteh/have-you-missed-zed-run-is-the-entrance-fee-too-high-i-found-this-new-game-3703</link>
      <guid>https://dev.to/zenteh/have-you-missed-zed-run-is-the-entrance-fee-too-high-i-found-this-new-game-3703</guid>
      <description>&lt;p&gt;Blockchain technology has revolutionized the gaming space. By bringing in its “decentralized” nature, blockchain technology has developed an entirely new way of interacting with gamers. Another benefit of blockchain technology is the introduction of the play-to-earn concept. It allows gamers to be rewarded with in-game assets. Moreover, it gives gamers control and ownership over in-game purchases, and in turn, a chance to increase the value of their assets by playing the game. These assets could range from gaming tools, weapons or cryptocurrencies, or any other in-game assets that can be tokenized on the blockchain. Let me tell you why MetaRace got my attention.&lt;br&gt;
MetaRace said MetaRace collectables are not only horses NFT, more to come.&lt;/p&gt;

&lt;p&gt;And I do some research; the following is more about MetaRace collectables.&lt;/p&gt;

&lt;p&gt;The collection’s core is to acquire and trade rare virtual items, including horses, jockeys, accessories and decorations. The game’s collectables component design simulates traditional scarcity-based collection games or activities, such as card trading or model collection.&lt;/p&gt;

&lt;p&gt;METARACE will be a game experience similar to traditional horse racing games. Players will take their collectables (horses, jockeys, decorations) to participate in the race and get rewards (Play To Earn).&lt;/p&gt;

&lt;p&gt;It may sound like an outlandish idea, but it got my attention.&lt;/p&gt;

&lt;p&gt;When I discovered the game Zed Run, I wanted to play it, but the entrance fee for NFT was too high.&lt;/p&gt;

&lt;p&gt;I am still looking forward to the launch of MetaRace, and hope they will release more news.&lt;/p&gt;

&lt;p&gt;I have already joined their community; if you are interested, join in!&lt;/p&gt;

&lt;p&gt;Discord: &lt;a href="https://discord.gg/8KzVAPASuk"&gt;https://discord.gg/8KzVAPASuk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Telegram: &lt;a href="https://t.me/MetaRaceOfficial"&gt;https://t.me/MetaRaceOfficial&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
    <item>
      <title>Doctave CLI 0.2.0: A Benchmarking Story</title>
      <author>Nik Begley</author>
      <pubDate>Wed, 15 Sep 2021 12:34:15 +0000</pubDate>
      <link>https://dev.to/doctave/doctave-cli-0-2-0-a-benchmarking-story-m7j</link>
      <guid>https://dev.to/doctave/doctave-cli-0-2-0-a-benchmarking-story-m7j</guid>
      <description>&lt;p&gt;The &lt;a href="https://www.github.com/Doctave/doctave"&gt;Doctave CLI&lt;/a&gt; is a free to use open source documentation generator. It takes your Markdown files and converts them into a beautiful &lt;a href="https://cli.doctave.com"&gt;documentation site&lt;/a&gt;. Today we have released version 0.2.0, which brings some cosmetic improvements and a fully &lt;em&gt;in-memory development server&lt;/em&gt; for local development. We'll also talk about how this surprisingly &lt;em&gt;did not&lt;/em&gt; make the CLI faster like we expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serving-your-docs-from-memory"&gt;
  &lt;/a&gt;
  Serving your docs from memory
&lt;/h2&gt;

&lt;p&gt;Before Doctave would rewrite the whole documentation site to disk every time you made a change to your Markdown files. It would pretty much &lt;code&gt;rm -r&lt;/code&gt; the &lt;code&gt;site&lt;/code&gt; directory, used to house the generated HTML, and regenerate the docs site from scratch. Because Doctave (which is written in Rust) is able to generate the whole site in ~tens of milliseconds, we hadn't looked into optimizations here yet.&lt;/p&gt;

&lt;p&gt;But there were two non-performance related issues that bothered us about this approach:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You would end up with a &lt;code&gt;site&lt;/code&gt; directory that didn't really serve any purpose while developing
your docs&lt;/li&gt;
&lt;li&gt;While very minor in scale in our case, constantly writing and deleting small files from disk
isn't something that modern SSDs like to do&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is why Doctave 0.2.0 never writes the HTML documentation site to disk until you run&lt;br&gt;
&lt;code&gt;doctave build --release&lt;/code&gt;. In &lt;code&gt;serve&lt;/code&gt; mode when you write your documentation, the embedded web server serves them directly from memory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ doctave serve Doctave | Serve Starting development server...

Server running on http://0.0.0.0:4001/

    File docs/README.md updated.
    Site rebuilt in 31.698781ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait a minute - shouldn't this be faster now that we are not writing files to disk?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-this-not-faster"&gt;
  &lt;/a&gt;
  Why is this not faster?
&lt;/h2&gt;

&lt;p&gt;After completing this feature, I was surprised to see that Doctave wasn't generating sites noticeably faster than before. I was expecting a speedup due to us not spending as much time on IO. This was not happening.&lt;/p&gt;

&lt;p&gt;After double checking to make sure the code was doing what I expected, it was time to benchmark things to see where the time was being spent. After some digging I found the answer: &lt;em&gt;generating the search index&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Doctave comes with offline search built in. We use the &lt;a href="https://github.com/mattico/elasticlunr-rs"&gt;elasticlunr-rs&lt;/a&gt; crate to generate a search index that is compatible with the &lt;a href="https://github.com/weixsong/elasticlunr.js"&gt;elasticlunr.js&lt;/a&gt; library. You can see it in action by going to &lt;a href="https://cli.doctave.com"&gt;our docs&lt;/a&gt; (built with the CLI, naturally) and hitting the letter &lt;code&gt;s&lt;/code&gt; on your keyboard to focus on the search bar. The searching happens entirely client-side.&lt;/p&gt;

&lt;p&gt;It turned out that we are spending &lt;em&gt;~70% of the site generation time creating the search index&lt;/em&gt;. This is completely reasonable, as this is a somewhat CPU intensive task that parses the input files and generates the index. The time spent doing IO writing files to disk is completely negligible in comparison, and thus did not move the needle much at all. On top of that, the CLI was already writing files to disk in parallel. Moving things in-memory did not save us much time.&lt;/p&gt;

&lt;p&gt;So while Doctave 0.2.0 is technically faster, this was not a big performance win. There is some more work we can do to parallelize the build process further - maybe in the next release. In the meantime, Doctave will be more friendly on your SSD and not pollute your workspace as much.&lt;/p&gt;

&lt;p&gt;Still, this was a change for the better. It just wasn't the big performance win I suspected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;I think this was an instructive little story about performance and benchmarking that was worth sharing. It's often the case that when we make assumptions about the performance of a system that turn out to be wrong once you measure things. This is just another reminder: &lt;strong&gt;always measure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, do try out &lt;a href="https://github.com/Doctave/doctave"&gt;Doctave 0.2.0&lt;/a&gt;! If you're looking for a batteries-included documentation generator that doesn't require plugins, doesn't pollute your repository with loads of files, and doesn't need a specialized environment to run, Doctave may be a good choice for you. It also comes with &lt;a href="https://mermaid-js.github.io/mermaid/#/"&gt;Mermaid JS diagram&lt;/a&gt; support and dark mode!&lt;/p&gt;

&lt;p&gt;You can host sites generated by Doctave on GitHub pages, or your favorite static site hosting provider. We are also building a &lt;a href="https://www.doctave.com"&gt;specialized host&lt;/a&gt; for teams using Doctave on multiple projects - check it out if you're using Doctave at your organization.&lt;/p&gt;

&lt;p&gt;Let me know if you're using it to document your project. I can be reached at &lt;code&gt;nik@doctave.com&lt;/code&gt;. I'd be excited to hear what you think.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-to-try-out-doctave"&gt;
  &lt;/a&gt;
  Want to try out Doctave?
&lt;/h3&gt;

&lt;p&gt;If you're on Mac using Homebrew, you can install Doctave with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install doctave/doctave/doctave
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're a Rust fan and want to use Cargo, you can do so too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cargo install --git https://github.com/Doctave/doctave --tag 0.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have &lt;a href="https://github.com/Doctave/doctave/releases/tag/0.2.0"&gt;prebuilt static binaries&lt;/a&gt; for Mac, Linux, and Windows.&lt;/p&gt;

</description>
      <category>markdown</category>
      <category>showdev</category>
      <category>writing</category>
      <category>rust</category>
    </item>
    <item>
      <title>Include&amp;&amp;Require</title>
      <author>ALAE</author>
      <pubDate>Wed, 15 Sep 2021 12:32:23 +0000</pubDate>
      <link>https://dev.to/alaaeddineacheache/include-require-5ehg</link>
      <guid>https://dev.to/alaaeddineacheache/include-require-5ehg</guid>
      <description>&lt;p&gt;Comprendre la fatalité entre le Include&lt;br&gt;
et le Require (La différence ).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--netu7aTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ids71dn7aah9a3aua6nj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--netu7aTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ids71dn7aah9a3aua6nj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl_FZGSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1zdtgnhvlpq9tqp4xn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl_FZGSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1zdtgnhvlpq9tqp4xn3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>difference</category>
      <category>php</category>
      <category>devweb</category>
    </item>
  </channel>
</rss>
