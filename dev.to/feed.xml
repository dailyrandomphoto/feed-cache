<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Useful Tips &amp; Tricks In JavaScript</title>
      <author>Anshu</author>
      <pubDate>Mon, 07 Jun 2021 10:32:22 +0000</pubDate>
      <link>https://dev.to/ansh20/useful-tips-tricks-in-javascript-2ok3</link>
      <guid>https://dev.to/ansh20/useful-tips-tricks-in-javascript-2ok3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#useful-tips-amp-tricks-in-javascript"&gt;
  &lt;/a&gt;
  useful tips &amp;amp; tricks in javascript
&lt;/h2&gt;

&lt;p&gt;JavaScript is the most popular language and this language that you can learn easily by yourself. it's front-hand language. And it's one of the languages used by coders, developers, and programmers. Not to be confused with JScript, Java, or Javanese script that all are similar languages.&lt;/p&gt;

&lt;p&gt;We all know that javascript is now more updated than before. There are so many new features added in Javascript 2021(Check out some of the best features in JavaScript). That makes our work easier and faster. programmer, developers, and coders always have some goal to complete it, for them, there are some short and simple useful tips &amp;amp; tricks in javascript they must use it to makes them work easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-way-to-using-slice-and-es8-padstart-method"&gt;
  &lt;/a&gt;
  Quick way to using slice and ES8 PadStart method
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const accountnum = "204910110001957";
const lastFourDigits = accountnum.slice(-4);
// print last four digit of account number
const maskedNumber = lastFourDigits.padStart(accountnum.length, '*');
console.log(lastFourDigits); // output will be 1957
console.log(maskedNumber); // ***********1957
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-an-event-handler-only-one-time-"&gt;
  &lt;/a&gt;
  Run an event handler only one time ##
&lt;/h2&gt;

&lt;p&gt;If you want to run the addEventListener method you have to pass {once: true} as the third argument then the event handler method will run only one time. That's one of the useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById("btn").addEventListener("click",
function () {
console.log("Button is Clicked..");
},
{ once: true }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-an-objects-properties-by-spread-operator"&gt;
  &lt;/a&gt;
  Update an object's properties by spread operator
&lt;/h2&gt;

&lt;p&gt;The spread syntax can be used when all elements from an object or array need to be included in a list of some kind. By using this operator you can update any types of object properties. This is one of the most useful javascript tips.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const object = {
  name: "Anshuman",
  age: 29,
  city: "Surat",
};

const newAge = 49;

const updatedObject = {
  ...object,
  age: newAge
};

console.log(object); // { name:"Rahul", age:29, city:"Surat"}
console.log(updatedObject); // { name:"Rahul", age:49, city:"Surat"} 
Find the length of properties in an object
What's the fastest way to find the length of properties, you can find the length by using 
[objectLength = Object.keys(exampleObject).length]
this syntax. That's one of the most useful tips in javascript.

 Const Object = {
            id: 1,
            name: 'Arun',
            age: 30
        }
console.log(Object.keys(object).length);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-the-last-elements-of-an-array"&gt;
  &lt;/a&gt;
  Print the last elements of an array
&lt;/h2&gt;

&lt;p&gt;generally, Array is a collection of the same variables. That is one of the most useful tips in javascript is given here, if you want to print only the last number from the array you must use the syntax given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const elements = [5,6,7,8,9,10];
const last = elements.slice(-1);
console.log(last); // Output will be 10

const secondLast = elements.slice(-2);
console.log(secondLast); // Output will be 9,10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#check-array"&gt;
  &lt;/a&gt;
  Check Array
&lt;/h2&gt;

&lt;p&gt;In Javascript, There are three ways to check an array is in proper syntax or not. An array is an object, so obviously it has proper syntax. That's one of the useful tips in javascript to check an array is actually an array or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = [2,4,6,8,10];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-current-timestamp"&gt;
  &lt;/a&gt;
  Print current timestamp
&lt;/h2&gt;

&lt;p&gt;A unary operator like plus triggers the valueOf method in the Date object and it returns the timestamp. It means it converts the current time in a string with different types of time zones. That's one of the useful tips &amp;amp; tricks in javascript and it's most useful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!Date.now) {
    Date.now = function() { return new Date().getTime(); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#provide-dynamic-key-for-an-object"&gt;
  &lt;/a&gt;
  Provide dynamic key for an object
&lt;/h2&gt;

&lt;p&gt;Moving on to computed keys, the value of object keys can be computed directly in the object literal using the same bracket notation in the literal. In a new feature of javascript, we can provide a dynamic key for an object that's the better javascript than the old one. That one of the best tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function obj(key, value) {
  const dyn = {
    [key]: value
  };
  return dyn;
}

console.log(obj('name', 'Rahul')); // Output will be name: Rahul
console.log(obj('age', '29')); // Output will be age: 29 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destructuring-array"&gt;
  &lt;/a&gt;
  Destructuring Array
&lt;/h2&gt;

&lt;p&gt;The destructuring syntax is a JavaScript expression that makes it possible to take out values from arrays, or properties from objects, into distinct variables. It's one of the best tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const names = ["yash", "mayur", "krushil", "kenil", "ansh", "raju", "rahul"];

const [firstName, secondNmae] = names;

console.log(thirdName);  // Output will be krushil
console.log(secondName); // Output will be mayur
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#execute-number-variable-to-function"&gt;
  &lt;/a&gt;
  Execute number variable to function
&lt;/h2&gt;

&lt;p&gt;ES6 is the very advanced operator that converts commas to separate values in an array. So, when you enter the number variable to add it becomes an array. This is one of the most useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function add(...numbers) {
 return numbers.reduce((var, value) =&amp;gt; {
   return var + value;
 }, 0);
}

const sum = add(2,4,6,8,10); 
console.log(sum); // Output will be 30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-an-array-by-spread-operator"&gt;
  &lt;/a&gt;
  Create an array by spread operator
&lt;/h2&gt;

&lt;p&gt;The spread operator allows an iterable to expand in places where more than zero arguments are expected. It mostly uses when an array has more than one value. That's one of the most useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const s1 = ["1", "2", "3"];
const s2 = [ "5", "6", "8"];

const combined = ["4", ...s1, "7", ...s2]
console.log(combined); // Output will be ["1", "2", "3", "4", "5", "6" , "7", "8"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fill-array-with-specific-values"&gt;
  &lt;/a&gt;
  Fill array with specific values
&lt;/h2&gt;

&lt;p&gt;The fill() method fills the specified elements in an array with a static value. You can specify the position of where to start and end the filling. If you don't specify the position then all elements will be filled. This is one of the most useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var fruits = ["Banana", "Orange", "mango", "kiwi"];
fruits.fill("strawberry", 2, 4); // Output will be Banana,Orange,strawberry,strawberry
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-duplicates-values-from-array"&gt;
  &lt;/a&gt;
  Remove duplicates values from array
&lt;/h2&gt;

&lt;p&gt;There are so many duplicate values in an array. So, the programmer can remove them easily by using the console.log(var); syntax. That makes work easier and faster. This is one of the most useful tips &amp;amp; tricks in javascript. There are two types available to remove the duplicate values which are given below:&lt;br&gt;
By array filter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dup = [10, 10, 20, 50, 30, 30, 50];
const arr = dup.filter((value, index) =&amp;gt; {
    return dup.indexOf(value) === index;
});
console.log(arr); // Output Will be [10, 20, 30, 50]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By set&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dup = [10, 10, 20, 50, 30, 30, 50];
const arr = [...new Set(dup)];
console.log(arr); // [10, 10, 20, 50, 30, 30, 50];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-scroll-button-to-the-top-of-the-page"&gt;
  &lt;/a&gt;
  Add scroll button to the top of the page
&lt;/h2&gt;

&lt;p&gt;Many times pages are so lengthy to scroll. That is the top scroll button available by using the below syntax:  (And this is one of the most useful tips &amp;amp; tricks in javascript)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.scrollTo({ top: 0, left: 0, behavior: "smooth" });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#convert-any-type-of-value-to-boolean"&gt;
  &lt;/a&gt;
  Convert any type of value to boolean
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are two types of boolean values true and false. You can use the Boolean() function to find out if a variable is true or not. That's one of the most useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let num1;
console.log(!!num1); // false

const num2 = 10;
console.log(!!num2); // true


const n1 = 'Tim';
console.log(!!n1); // true

const n2 = '';
console.log(!!n2); // false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>design</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Five classic SQL &amp; database posts - June 2021</title>
      <author>Helen Anderson</author>
      <pubDate>Mon, 07 Jun 2021 10:27:34 +0000</pubDate>
      <link>https://dev.to/helenanders26/five-classic-sql-database-posts-june-2021-3f16</link>
      <guid>https://dev.to/helenanders26/five-classic-sql-database-posts-june-2021-3f16</guid>
      <description>&lt;p&gt;Hi! I'm Helen, one of &lt;a href="https://dev.to/t/sql/top/infinity"&gt;#SQL&lt;/a&gt; and &lt;a href="https://dev.to/t/database/top/infinity"&gt;#database&lt;/a&gt; tag moderators.&lt;/p&gt;

&lt;p&gt;Each month I'll be taking a trip down memory lane and showcasing some classic data posts. Some of these might be your 'go-to' resources already, others may offer some new insight or ideas.&lt;/p&gt;

&lt;p&gt;Let's jump into the posts!&lt;/p&gt;




&lt;p&gt;First up &lt;a href="https://dev.to/adipolak"&gt;Adi&lt;/a&gt; writes about the building blocks that open a whole new world of workload management, various types of files, log systems, and architectures specifically designed to handle scale.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/adipolak" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vg7A62LZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--avq4G3A2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/121127/0af4a894-56eb-4e81-890a-12e5ba022027.jpg" alt="adipolak image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/adipolak/big-data-from-the-ground-up-28im" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Big Data from the Ground up&lt;/h2&gt;
      &lt;h3&gt;Adi Polak ・ Feb 16 '20 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This classic post from &lt;a href="https://dev.to/jenc"&gt;jen&lt;/a&gt; dives into PostgreSQL and what you can do with the SELECT clause. Check out the post and the comments for more.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/jenc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXSJ3UoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RAGRTia7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/20372/ed620018-f748-4d1a-a8a3-59e45a64939c.gif" alt="jenc image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jenc/what-i-learned-from-only-using-select-in-postgresql-3na" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What I learned from only using Select in PostgreSQL&lt;/h2&gt;
      &lt;h3&gt;jen chan ・ Apr 9 '18 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#debugging&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next up is a post from &lt;a href="https://dev.to/wendisha"&gt;Wendy&lt;/a&gt; and a post tackling outer joins with useful examples and images to make them easier to understand.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/wendisha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRoYsIXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uD8JNGnU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148279/07c98e4f-1c12-4bdb-98fc-62fa1c670d73.jpeg" alt="wendisha image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/wendisha/sql-outer-joins-2cj7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;SQL: Outer Joins&lt;/h2&gt;
      &lt;h3&gt;Wendy Calderon ・ Nov 30 '19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#postgres&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This classic post from &lt;a href="https://dev.to/integerman"&gt;Matt&lt;/a&gt; discusses what deadlocks are, how to interpret deadlock graphs, and some options for handling deadlocks.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/integerman" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WGd58flt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Qt_Qagmc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/71302/ee7df1f0-de6b-4899-8ff2-d5cb43f9efc9.png" alt="integerman image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/techelevator/understanding-sql-server-deadlocks-2ej6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Understanding SQL Server Deadlocks&lt;/h2&gt;
      &lt;h3&gt;Matt Eland ・ Sep 11 '19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqlserver&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#performance&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Our last post is from &lt;a href="https://dev.to/jillianntish"&gt;Jill&lt;/a&gt; and covers the differences between relational and non-relational databases. Check out the post for more on how to plan your next data project.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/jillianntish" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpqpQ79s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NbUI5O_u--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/211186/c5aee48d-c1cb-4b38-ac75-35701fa3dc72.jpeg" alt="jillianntish image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jillianntish/data-royale-sql-vs-nosql-5002" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Data Royale: [SQL] vs noSQL &lt;/h2&gt;
      &lt;h3&gt;Jill Poole ・ Mar 21 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#firstyearincode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;








&lt;p&gt;That's all for this month! For more from the Data Community check out the #sql, #postgres, #mysql, and #database tags, and follow &lt;a href="https://twitter.com/TheDatabaseDev"&gt;@TheDatabaseDev on Twitter&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJnjqEMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6m19oidtq78smktb9haq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJnjqEMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6m19oidtq78smktb9haq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>sql</category>
      <category>database</category>
      <category>bestofdev</category>
      <category>classicdev</category>
    </item>
    <item>
      <title>C help. (Possible volunteer work.)</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 07 Jun 2021 10:17:15 +0000</pubDate>
      <link>https://dev.to/baenencalin/c-help-possible-volunteer-work-54g6</link>
      <guid>https://dev.to/baenencalin/c-help-possible-volunteer-work-54g6</guid>
      <description>&lt;p&gt;&lt;a href="https://twitter.com/BaenenCalin/status/1401844245720412162"&gt;Original Tweet&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gtgt-i-want-some-kind-of-free-program-that-takes-in-all-my-source-c-code-including-libraries-asks-me-for-the-target-os-and-gives-me-an-output-thats-all-i-really-want-thats-what-it-comes-down-to-if-you-know-anything-that-meets-this-criteria-feel-free-to-comment-about-it-ltlt"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt; I want some kind of free program that takes in all my source C code (including libraries), asks me for the target OS, and gives me an output. That's all I really want. That's what it comes down to. If you know anything that meets this criteria, feel free to comment about it. &amp;lt;&amp;lt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
VOLUNTEER WORK WANTED: Since I can't afford a fancy IDE (e.g. CLion), which has the ability to compile my C-code with minimum effort, I need someone to compile my code for me (since I can't figure out how to build).&lt;/p&gt;

&lt;p&gt;It would be a big help, as I'm still trying to learn C, and want to experiment, but there's almost no good free tools.&lt;br&gt;
There's VS (Visual Studio), but that seems... less than ideal, and anything that is good costs money.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thankscheers"&gt;
  &lt;/a&gt;
  &lt;center&gt;Thanks&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h1&gt;

</description>
      <category>c</category>
      <category>help</category>
      <category>gamedev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to add elements to an array in PHP?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 07 Jun 2021 10:16:06 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-add-elements-to-an-array-in-php-1hgd</link>
      <guid>https://dev.to/hrishikesh1990/how-to-add-elements-to-an-array-in-php-1hgd</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how to add to array in PHP, we look at the different methods and use-cases and weigh them against each other.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts. However, in case you are here only for the solution use this &lt;a href="#code-and-explanation"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#php-add-to-array-or-append-to-array"&gt;PHP: Add to array or append to array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-to-array-using-square-brackets"&gt;Add to array using square brackets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-arraypush-method"&gt;Using the array_push method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitations-and-caveats"&gt;Limitations and Caveats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#php-add-to-array-or-append-to-array"&gt;
  &lt;/a&gt;
  PHP: Add to array or append to array:
&lt;/h2&gt;

&lt;p&gt;Appending an element into an array or add to array, is a commonly used method not only in PHP but in other programming languages as well. However, adding elements to an array in PHP can be done with a handful of methods and they differ based on their use-cases.&lt;/p&gt;

&lt;p&gt;In case you are looking to add to array, but want the element to be appended at the end of the array, you can look at the two methods. if you are looking to add to the beginning of the array the array_unshift does exactly that for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-to-array-using-square-brackets"&gt;
  &lt;/a&gt;
  Add to array using square brackets:
&lt;/h2&gt;

&lt;p&gt;The square bracket method to add to array is one of the most commonly used methods. Most articles on the topic recommend the use of this method because of its efficiency.  In comparison to the other methods, it adds to array without the overhead of calling a function. But the downside is that it can only add one argument at a time. The syntax is as follows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-square-bracket-method"&gt;
  &lt;/a&gt;
  Syntax of Square Bracket method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;array&lt;/code&gt; refers to the array you are adding to. And &lt;code&gt;element&lt;/code&gt; is the element you are looking to add to array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="s1"&gt;'JavaScript'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;'C++'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Now, let's add to the array&lt;/span&gt;

&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'PHP'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Output&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Javascript"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Python"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"C++"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"PHP"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;PHP&lt;/code&gt; was added to the end of the array. This method can be used to add to array in PHP. But although it is efficient, adding more than one element would be a hassle while using this method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-arraypush-method"&gt;
  &lt;/a&gt;
  Using the array_push method:
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;array_push&lt;/code&gt; is an inbuilt function in PHP that can be used to add to array as well. Where this method stands out from the previous method is that it can be used to add multiple elements to an array at once. The syntax is as follows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-arraypush"&gt;
  &lt;/a&gt;
  Syntax of array_push
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;array&lt;/code&gt; - Required, this parameter specifies the array you are looking to append&lt;/p&gt;

&lt;p&gt;&lt;code&gt;value1&lt;/code&gt; - The value that you are looking to add to array&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#return-values"&gt;
  &lt;/a&gt;
  Return Values
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;array_push&lt;/code&gt; returns the number of elements in the array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="s1"&gt;'JavaScript'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;'C++'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Now, let's add to the array&lt;/span&gt;

&lt;span class="nb"&gt;array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'PHP'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'HTML'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CSS'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Javascript"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Python"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"C++"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"PHP"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"HTML"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"CSS"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the &lt;code&gt;array_push&lt;/code&gt; in PHP adds to array the passed elements.&lt;/p&gt;

&lt;p&gt;However, It is important to remember that the function returns the length and not the appended array after you have used it to add to array in PHP. This is important because assigning the function to a variable and printing it would not return your desired output. The below code explains the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
         &lt;span class="s1"&gt;'JavaScript'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;'C++'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Now, let's add to the array&lt;/span&gt;

&lt;span class="nv"&gt;$new_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'PHP'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'HTML'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CSS'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$new_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code outputs &lt;code&gt;6&lt;/code&gt; which is the length of the updated array that you desired.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-and-caveats"&gt;
  &lt;/a&gt;
  Limitations and Caveats
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Remember the square bracket is more efficient and should always be chosen when you are looking to add one or two elements to an array in PHP.&lt;/li&gt;
&lt;li&gt;While using square brackets to add to array, ensure that the name of the existing array is entered correctly because if the name passed is wrong a new array would be created.&lt;/li&gt;
&lt;li&gt;The array_push returns a warning when the array you are looking to add to does not exist.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>tut</category>
    </item>
    <item>
      <title>Five classic AWS posts - June 2021</title>
      <author>Helen Anderson</author>
      <pubDate>Mon, 07 Jun 2021 10:13:10 +0000</pubDate>
      <link>https://dev.to/aws-heroes/five-classic-aws-posts-june-2021-17o5</link>
      <guid>https://dev.to/aws-heroes/five-classic-aws-posts-june-2021-17o5</guid>
      <description>&lt;p&gt;Hi! I'm Helen, one of your AWS Heroes! &lt;/p&gt;

&lt;p&gt;Each month I'll be taking a trip down memory lane and showcasing some classic AWS posts. Some of these might be your 'go-to' resources already, others may offer some new insight or ideas.&lt;/p&gt;

&lt;p&gt;Let's jump into the posts!&lt;/p&gt;




&lt;p&gt;To get us started we have &lt;a href="https://dev.to/swyx"&gt;swyx&lt;/a&gt; with a review of Alex DeBrie's book tackling DynamoDB. Check it out for accessible technical writing of a very abstract and complex subject.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/swyx" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ojA0BfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HuQ70Dya--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/47766/26fbd2bf-c352-447c-9b4f-f66652dc4899.jpg" alt="swyx image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/swyx/5-things-i-learned-from-the-dynamodb-book-ljc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Things I Learned from The DynamoDB Book&lt;/h2&gt;
      &lt;h3&gt;swyx ・ Apr 7 '20 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#books&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dynamodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have &lt;a href="https://dev.to/nideveloper"&gt;Matt&lt;/a&gt; and the 20 fully deployable serverless architecture patterns at cdkpatterns.com, all built with AWS CDK TypeScript/Python and all including the vanilla CloudFormation Template.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/nideveloper" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mIs0j92M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DxTcaqtz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/344151/981e1051-b576-4a48-955f-3b6bcf891f58.png" alt="nideveloper image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nideveloper/cdk-patterns-at-20-let-s-walk-through-all-20-serverless-patterns-for-aws-d1n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CDK Patterns at 20! Let's Walk Through all 20 Serverless Patterns for AWS&lt;/h2&gt;
      &lt;h3&gt;Matt Coulter ・ Jul 14 '20 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cdk&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://dev.to/rakannimer"&gt;Rakan&lt;/a&gt; then shares how to build an SEO friendly server-rendered realtime collaborative todo list app with Next.js and AWS Amplify&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/rakannimer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZH9UkAxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mcvsp3Nn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/82967/4f782d95-92d5-4bf2-8b94-a73f94a33d5c.jpeg" alt="rakannimer image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rakannimer/server-side-rendered-real-time-web-app-with-next-js-aws-amplify-graphql-2j49" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Server-Side Rendered Real-time Web App with Next.js, AWS Amplify &amp;amp; GraphQL&lt;/h2&gt;
      &lt;h3&gt;Rakan Nimer ・ Jul 25 '19 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#amplify&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Moving on to another classic tutorial, this time from &lt;a href="https://dev.to/grahamlyons"&gt;Graham&lt;/a&gt; with a run down of everything they've learnt from building and using network infrastructure on AWS.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/grahamlyons" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHgrQnRg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2C8vTXAR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/10761/1Cq-82wm.jpg" alt="grahamlyons image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/grahamlyons/everything-you-need-to-know-about-networking-on-aws-4bkf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Everything You Need To Know About Networking On AWS&lt;/h2&gt;
      &lt;h3&gt;Graham Lyons ・ Jan 28 '18 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#networking&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Our last classic post this month is from &lt;a href=""&gt;Kevin&lt;/a&gt; with a great analogy for how AWS works. If you understand how a brewery works, then you can get started with AWS.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/kbk0125" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0_bYCr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--T4Q21CnI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/55456/42269bac-3e2b-41f6-a1c5-7a84edd26e6b.jpg" alt="kbk0125 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kbk0125/amazon-web-services-aws-explained-by-operating-abrewery-2j0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Amazon Web Services (AWS) Explained by Operating a Brewery&lt;/h2&gt;
      &lt;h3&gt;Kevin Kononenko ・ Aug 30 '18 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;








&lt;p&gt;That's all for this month! For more great posts check out the &lt;a href="https://dev.to/t/aws"&gt;#aws tag&lt;/a&gt; and the &lt;a href="https://dev.to/aws-heroes"&gt;AWS Heroes&lt;/a&gt;.&lt;/p&gt;




</description>
      <category>aws</category>
      <category>bestofdev</category>
      <category>classicdev</category>
    </item>
    <item>
      <title>Mark Down for Newbies</title>
      <author>Abayomi Ogunnusi</author>
      <pubDate>Mon, 07 Jun 2021 10:06:31 +0000</pubDate>
      <link>https://dev.to/drsimplegraffiti/mark-down-for-newbies-ab7</link>
      <guid>https://dev.to/drsimplegraffiti/mark-down-for-newbies-ab7</guid>
      <description>&lt;p&gt;Written by: Abayomi Ogunnusi&lt;/p&gt;

&lt;p&gt;According to the official site definition. Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.&lt;/p&gt;

&lt;p&gt;This is the basics of clear communication used in most version control and collaborative platforms such as Github. &lt;/p&gt;

&lt;p&gt;In this post I will be giving a summary of the commonly used markdown syntax. For clarity sake, the raw format are written above and the output of the markdown are written below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#headings-are-written-with-hashtags-one-is-equivalent-to-the-h1-in-html-syntax-and-so-on"&gt;
  &lt;/a&gt;
  Headings are written with hashtags. One '#' is equivalent to the 'h1' in HTML syntax and so on.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# h1
## h2
### h3
#### h4
##### h5
###### h6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#h1"&gt;
  &lt;/a&gt;
  h1
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#h2"&gt;
  &lt;/a&gt;
  h2
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#h3"&gt;
  &lt;/a&gt;
  h3
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#h4"&gt;
  &lt;/a&gt;
  h4
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#h5"&gt;
  &lt;/a&gt;
  h5
&lt;/h5&gt;
&lt;h6&gt;
  &lt;a href="#h6"&gt;
  &lt;/a&gt;
  h6
&lt;/h6&gt;
&lt;h2&gt;
  &lt;a href="#lists"&gt;
  &lt;/a&gt;
  Lists
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lists can be written with - or * or + sign symbols. 
## Unordered list 
- first time
- first time
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#unordered-list"&gt;
  &lt;/a&gt;
  Unordered list
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;first time&lt;/li&gt;
&lt;li&gt;first time
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;or use: 
* item 1
* item 2
* item 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;item 1&lt;/li&gt;
&lt;li&gt;item 2&lt;/li&gt;
&lt;li&gt;item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#nested-list-using-hyphen-always-ensure-you-put-space-after-the-hyphen"&gt;
  &lt;/a&gt;
  Nested list using hyphen. Always ensure you put space after the hyphen
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- first time
- first time
  - second time
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;first time&lt;/li&gt;
&lt;li&gt;first time

&lt;ul&gt;
&lt;li&gt;second time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#progress-list"&gt;
  &lt;/a&gt;
  Progress list
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- [ ] item 1
- [ ] item 2
- [ ] item 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;[ ] item 1&lt;/li&gt;
&lt;li&gt;[ ] item 2&lt;/li&gt;
&lt;li&gt;[ ] item &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#check-list-or-task-list"&gt;
  &lt;/a&gt;
  check list or task list
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- [x] item 1
- [x] item 2
- [x] item 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;[x] item 1&lt;/li&gt;
&lt;li&gt;[x] item 2&lt;/li&gt;
&lt;li&gt;[x] item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#the-above-list-could-also-be-written-as"&gt;
  &lt;/a&gt;
  The above list could also be written as
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* [x] item 1
* [x] item 2
* [x] item 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;[x] item 1&lt;/li&gt;
&lt;li&gt;[x] item 2&lt;/li&gt;
&lt;li&gt;[x] item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#ordered-list"&gt;
  &lt;/a&gt;
  Ordered list
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. item 1
2. item 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;item 1&lt;/li&gt;
&lt;li&gt;item 2&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#github-list-reordering-occurs-automatically"&gt;
  &lt;/a&gt;
  GitHub list: Reordering occurs automatically
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. item 1
1. item 2
1. item 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;item 1&lt;/li&gt;
&lt;li&gt;item 2&lt;/li&gt;
&lt;li&gt;item 3&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[this contain the link description](this contains the actual link)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="http://localhost:3000"&gt;HOMEPAGE&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#links-with-title"&gt;
  &lt;/a&gt;
  Links with title
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[this contain the link description](this contains the actual link "this contains the link alt text")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="http://webglance.com"&gt;web glance&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#inline-code-using-the-backtick"&gt;
  &lt;/a&gt;
  Inline code using the backtick
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this is an inline `code`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;this is an inline &lt;code&gt;code&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#block-of-codes-use-three-surrounding-back-ticks-used-in-writing-specific-language-syntax-ensure-to-put-the-language-immediately-after-the-backtick-as-shown-below"&gt;
  &lt;/a&gt;
  Block of codes use three surrounding back ticks used in writing specific language syntax. Ensure to put the language immediately after the backtick as shown below.
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; a paragraph example&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; a paragraph example&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#before-and-after-results-using-block-quotes"&gt;
  &lt;/a&gt;
  Before and after results using block quotes
&lt;/h2&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('test')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;after&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('new test')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;the above code block can be re-written as :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-console.log('test`)
&lt;/span&gt;&lt;span class="gi"&gt;+console.log('new test`)
&lt;/span&gt;&lt;span class="p"&gt;console.log('neutral')
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;diff&lt;br&gt;
-console.log('test&lt;code&gt;)&lt;br&gt;
+console.log('new test&lt;/code&gt;)&lt;br&gt;
console.log('neutral')&lt;/p&gt;

&lt;p&gt;Block quotes&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; this is a block quote
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;this is a block quote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#adding-pictures"&gt;
  &lt;/a&gt;
  Adding pictures
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;![image](http://picsum.photos/200/200)
![purple markdown icon](http://markdown-here.com/img/icon256.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbUqIQdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://picsum.photos/200/200" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbUqIQdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://picsum.photos/200/200" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJu7jekc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://markdown-here.com/img/icon256.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJu7jekc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://markdown-here.com/img/icon256.png" alt="purple markdown icon"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#emphasis-strong"&gt;
  &lt;/a&gt;
  Emphasis (strong)
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this is a bold **text**
or __bold__
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;this is a bold &lt;strong&gt;text&lt;/strong&gt;&lt;br&gt;
or &lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#emphasis-italics"&gt;
  &lt;/a&gt;
  Emphasis (italics)
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;This is an *italics*
or 
_italics_
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is an &lt;em&gt;italics&lt;/em&gt;&lt;br&gt;
or &lt;br&gt;
&lt;em&gt;italics&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#writing-language-syntax-using-markdown"&gt;
  &lt;/a&gt;
  Writing language syntax using markdown
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| User | Email  |
| --- | --- |
| abayomi | abayomiogunnusi@gmail.com |
| isreal | isreal@gmail.com |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;User&lt;/th&gt;
&lt;th&gt;Email&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abayomi&lt;/td&gt;
&lt;td&gt;&lt;a href="mailto:abayomiogunnusi@gmail.com"&gt;abayomiogunnusi@gmail.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isreal&lt;/td&gt;
&lt;td&gt;&lt;a href="mailto:isreal@gmail.com"&gt;isreal@gmail.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Frond-End&lt;/th&gt;
&lt;th&gt;Back-End&lt;/th&gt;
&lt;th&gt;Full Stack&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTML, CSS, JS&lt;/td&gt;
&lt;td&gt;NODE JS, MONGODB&lt;/td&gt;
&lt;td&gt;HTML, MONGODB,...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REACT, BOOTSTRAP&lt;/td&gt;
&lt;td&gt;EXPRESS, MONGOOSE&lt;/td&gt;
&lt;td&gt;DOCKER&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#strike-through-is-achieved-using-"&gt;
  &lt;/a&gt;
  strike through is achieved using ~~ ~~
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~~strike~~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;del&gt;strike&lt;/del&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#checklist"&gt;
  &lt;/a&gt;
  Checklist
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- [ ] abayomi
- [ ] abayomi
- [ ] abayomi
- [ ] abayomi
- [x] abayomi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;[ ] abayomi&lt;/li&gt;
&lt;li&gt;[ ] abayomi&lt;/li&gt;
&lt;li&gt;[ ] abayomi&lt;/li&gt;
&lt;li&gt;[ ] abayomi&lt;/li&gt;
&lt;li&gt;[x] abayomi&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#tag-people-use-the-symbol"&gt;
  &lt;/a&gt;
  Tag people use the '@' symbol
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/wowzone"&gt;@wowzone&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/deenn"&gt;@deenn&lt;/a&gt;
 &lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/drsimplegraffiti"&gt;@drsimplegraffiti&lt;/a&gt;
 &lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CNFfRqkAPcd/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt; / &lt;a href="https://github.com/drsimplegraffiti/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Config files for my GitHub profile.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Hi 👋, I'm Abayomi&lt;/h1&gt;
&lt;h3&gt;
A passionate developer from Nigeria&lt;/h3&gt;
&lt;p&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0221f07f12f1c558b0bb19eb613b97fb328311347f96c85e1e3e0d5abbef3c16/68747470733a2f2f6b6f6d617265762e636f6d2f67687076632f3f757365726e616d653d647273696d706c656772616666697469266c6162656c3d50726f66696c65253230766965777326636f6c6f723d306537356236267374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/0221f07f12f1c558b0bb19eb613b97fb328311347f96c85e1e3e0d5abbef3c16/68747470733a2f2f6b6f6d617265762e636f6d2f67687076632f3f757365726e616d653d647273696d706c656772616666697469266c6162656c3d50726f66696c65253230766965777326636f6c6f723d306537356236267374796c653d666c6174" alt="drsimplegraffiti"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://github.com/ryo-ma/github-profile-trophy"&gt;&lt;img src="https://camo.githubusercontent.com/5b0425119d718a2d7a29a18c91a874bf87d18b05bf7565b62eb133731bffe04d/68747470733a2f2f6769746875622d70726f66696c652d74726f7068792e76657263656c2e6170702f3f757365726e616d653d647273696d706c656772616666697469" alt="drsimplegraffiti"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://twitter.com/drsimplegraffi1" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0d465f23af0c86fcbd93694bafaed3eb69691738e2fbdcfaa4aa0dbe1d559962/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f647273696d706c65677261666669313f6c6f676f3d74776974746572267374796c653d666f722d7468652d6261646765" alt="drsimplegraffi1"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;👨‍💻 All of my projects are available at &lt;a href="https://raw.githubusercontent.com/drsimplegraffiti/drsimplegraffiti/main/drsimplegraffiti.github.io"&gt;drsimplegraffiti.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📫 How to reach me &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/drsimplegraffiti/drsimplegraffiti/main/mailto:abayomiogunnusi@gmail.com"&gt;abayomiogunnusi@gmail.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⚡ Fun fact &lt;strong&gt;I'm an alien&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Connect with me:&lt;/h3&gt;
&lt;p&gt;
&lt;a href="https://codepen.io/drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQi-OpH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/neutral-icons/src/images/icons/Social/codepen.svg" alt="drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/drsimplegraffi1" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1jjnQT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/neutral-icons/src/images/icons/Social/twitter.svg" alt="drsimplegraffi1" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://stackoverflow.com/users/15661401" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKnwUnJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/neutral-icons/src/images/icons/Social/stack-overflow.svg" alt="15661401" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://instagram.com/drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---3kWSyoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/neutral-icons/src/images/icons/Social/instagram.svg" alt="drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Languages and Tools:&lt;/h3&gt;
&lt;p&gt; &lt;a href="https://getbootstrap.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38b8DYFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg" alt="bootstrap" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.w3schools.com/css/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mHD1LdvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg" alt="css3" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://expressjs.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Np3l8NWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/express/express-original-wordmark.svg" alt="express" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://git-scm.com/" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/fbfcb9e3dc648adc93bef37c718db16c52f617ad055a26de6dc3c21865c3321d/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6769742d73636d2f6769742d73636d2d69636f6e2e737667" alt="git" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.w3.org/html/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXRvq6Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg" alt="html5" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.adobe.com/in/products/illustrator.html" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/9e245893108b5ca27e7ac3d4a802d513f657b32aa7b5765bd92df7fb55d0ed54/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f61646f62655f696c6c7573747261746f722f61646f62655f696c6c7573747261746f722d69636f6e2e737667" alt="illustrator" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QG_b2spU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg" alt="javascript" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.mongodb.com/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-ExagyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg" alt="mongodb" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://nodejs.org" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zw8Pc0Q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/nodejs/nodejs-original-wordmark.svg" alt="nodejs" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.photoshop.com/en" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sf0HeNaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg" alt="photoshop" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://postman.com" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/93b32389bf746009ca2370de7fe06c3b5146f4c99d99df65994f9ced0ba41685/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676574706f73746d616e2f676574706f73746d616e2d69636f6e2e737667" alt="postman" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://reactjs.org/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7e3Gep6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg" alt="react" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://sass-lang.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZefvAmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/sass/sass-original.svg" alt="sass" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.adobe.com/products/xd.html" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/c205ecbe12500177d102169d97bc1c17c545155fdf5ec78c08d54ac53e5b38c1/68747470733a2f2f63646e2e776f726c64766563746f726c6f676f2e636f6d2f6c6f676f732f61646f62652d78642e737667" alt="xd" width="40" height="40"&gt; &lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/600a51e3614bad11537732d6a182b66ea04748f5225d2db4123a154d315c469a/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67733f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e266c61796f75743d636f6d70616374"&gt;&lt;img src="https://camo.githubusercontent.com/600a51e3614bad11537732d6a182b66ea04748f5225d2db4123a154d315c469a/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67733f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e266c61796f75743d636f6d70616374" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4b87d0951cc2628ad9b0c95e00dd0c10dcb4d4c85bfd2e662ecef3f64069bab6/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e"&gt;&lt;img src="https://camo.githubusercontent.com/4b87d0951cc2628ad9b0c95e00dd0c10dcb4d4c85bfd2e662ecef3f64069bab6/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/452232592ebf9c9a7800f859a1ddbc83e6798e063daa551312e6689ef899e54d/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d2f3f757365723d647273696d706c65677261666669746926"&gt;&lt;img src="https://camo.githubusercontent.com/452232592ebf9c9a7800f859a1ddbc83e6798e063daa551312e6689ef899e54d/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d2f3f757365723d647273696d706c65677261666669746926" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/drsimplegraffiti/drsimplegraffiti"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>markdown</category>
      <category>readme</category>
      <category>github</category>
      <category>syntax</category>
    </item>
    <item>
      <title>Help with JavaScript Learning Roadmap</title>
      <author>JoelBonetR</author>
      <pubDate>Mon, 07 Jun 2021 10:01:58 +0000</pubDate>
      <link>https://dev.to/joelbonetr/help-with-javascript-learning-roadmap-3m85</link>
      <guid>https://dev.to/joelbonetr/help-with-javascript-learning-roadmap-3m85</guid>
      <description>&lt;p&gt;Hi community, I need help and I believe that it can also help tones of people so i'll go straight to the point with the Use case: &lt;/p&gt;

&lt;p&gt;A friend of mine wants to enter the project development world and he wants to be a JS full stack dev.&lt;/p&gt;

&lt;p&gt;The end requirements would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Javascript (^ES6)&lt;/li&gt;
&lt;li&gt; Services and Microservices &lt;/li&gt;
&lt;li&gt;React
&lt;ul&gt;
&lt;li&gt; Redux&lt;/li&gt;
&lt;li&gt; Hooks&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

&lt;li&gt; Node.js

&lt;ul&gt;
&lt;li&gt; Express&lt;/li&gt;
&lt;li&gt; PostgreSQL &lt;/li&gt;
&lt;li&gt; Sequelize &lt;/li&gt;
&lt;li&gt; Mongo DB &lt;/li&gt;
&lt;li&gt; Mongoose &lt;/li&gt;
&lt;li&gt; Apollo (after GraphQL) &lt;/li&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; GraphQL &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm always hands on tones of things and &lt;strong&gt;I would like to specialise myself on JS too &lt;/strong&gt; because i'm coding since 10+ years ago but worked with java, php, asp, html, css, Sass, bootstrap, js, C++, react, preact, angular and other languages and libs, so I also need that (I feel kinda frustrated and I want to keep a main language and the overall environment), plus I love JS.&lt;/p&gt;

&lt;p&gt;So here I am asking for your experience on this questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should I add (or remove) other stuff in the requirements? Which ones and Why?&lt;/li&gt;
&lt;li&gt;The learning roadmap I set (in order) would be fine and suffice or it lacks something? &lt;/li&gt;
&lt;li&gt;Do you think the roadmap would be the same for me (10+ years of coding experience) than for my friend (a complete begginer that knows something about HTML and CSS only)?&lt;/li&gt;
&lt;li&gt; Feel free to comment whatever you feel like about the topic &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>learning</category>
      <category>career</category>
      <category>help</category>
    </item>
    <item>
      <title>The whole community around Open Source is extremely valuable, says Veed.io’s Stefan Feješ</title>
      <author>GitNation</author>
      <pubDate>Mon, 07 Jun 2021 07:53:30 +0000</pubDate>
      <link>https://dev.to/gitnation/the-whole-community-around-open-source-is-extremely-valuable-says-veed-io-s-stefan-fejes-2bbi</link>
      <guid>https://dev.to/gitnation/the-whole-community-around-open-source-is-extremely-valuable-says-veed-io-s-stefan-fejes-2bbi</guid>
      <description>&lt;p&gt;&lt;em&gt;Five years ago, open source was predicted to have a murky future. Fortunately, none of these prophecies came true: open source is not only thriving, it’s also commercially successful. The community is becoming ever more global, and projects are becoming more complex and interesting. That is why &lt;a href="https://gitnation.org"&gt;GitNation&lt;/a&gt; organizes an awards ceremony for the whole OSS scene – &lt;a href="https://osawards.com/javascript/"&gt;Open Source Awards&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We’ve talked to &lt;a href="https://twitter.com/fejes713"&gt;Stefan Feješ&lt;/a&gt;, a software engineer who created the 6th fastest growing open source project of 2018. Stefan was featured as a speaker at some of the most prominent conferences around the world, and he has also organized and hosted multiple editions of Open Source Awards.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jWxBtR6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z2m4alysntgxui0udwf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWxBtR6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z2m4alysntgxui0udwf.jpg" alt="JavaScript Open Source Awards trophies at JSNation Amsterdam 2019"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stefan-57-years-ago-it-was-popular-to-predict-the-end-of-open-source-there-was-an-endless-number-of-headlines-like-why-open-source-is-going-to-die-or-why-open-source-will-never-beat-paid-software"&gt;
  &lt;/a&gt;
  Stefan, 5-7 years ago it was popular to predict the end of open source. There was an endless number of headlines like "Why open source is going to die" or "Why open source will never beat paid software".
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#today-we-see-the-total-opposite-with-open-source-evolving-and-being-in-demand-more-than-ever-what-are-the-trends-driving-the-development-of-modern-open-source-today"&gt;
  &lt;/a&gt;
  Today we see the total opposite, with open source evolving and being in demand more than ever. What are the trends driving the development of modern open source today?
&lt;/h3&gt;

&lt;p&gt;— I got into open source about five years ago when the whole "open source is going to die" era was over. The most significant buzz around open source back then was about creators not being able to do it for a living due to the nature of open source software (hint: it's free). &lt;/p&gt;

&lt;p&gt;I think few factors contributed to the much healthier open source environment that we have today.&lt;/p&gt;

&lt;p&gt;The dev community got larger; companies started supporting open source by involving their talent in open source projects (think about React.js) and investing financial resources to make it sustainable. We also saw hundreds of conferences that celebrated open source success and connected communities worldwide.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OVqUfG0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi04ds6gnfyw64u4p8et.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OVqUfG0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi04ds6gnfyw64u4p8et.png" alt="Max Stoiber and Stefan Feješ MCing the React Open Source Awards 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-companies-and-customers-benefit-from-open-source"&gt;
  &lt;/a&gt;
  How can companies and customers benefit from open source?
&lt;/h3&gt;

&lt;p&gt;— I think companies benefit quite a lot from open source. When we talk about big companies with their projects, such as Google, Microsoft, Facebook, and others, the benefits are obvious. They can run massive projects with the help of others, build a community around their product (think about VSCode), or easily attract talent passionate about working with them.&lt;/p&gt;

&lt;p&gt;Smaller companies with limited resources also rely on open source to get their project to market much faster. Shipping MVPs with all open source frameworks and libraries got much faster and easier than running a company in the old days. &lt;/p&gt;

&lt;p&gt;On the other hand, the end customer doesn't care about the tech stack behind the software they are using - all they care is about “jobs to be done”. Still, open source pushes the boundaries of available technologies, which helps with overall speed, user experience, and user satisfaction. So I'd say that everyone in the ecosystem benefits from open source quite a lot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-it-true-that-open-source-applications-are-less-prone-to-bugs-and-other-issues"&gt;
  &lt;/a&gt;
  Is it true that open source applications are less prone to bugs and other issues?
&lt;/h3&gt;

&lt;p&gt;— I think it depends from project to project. Larger projects with the bigger community around them tend to be used by many companies out there, so naturally, since more eyes are looking for bugs, there are fewer bugs in such projects. In small projects built by a single maintainer, it's expected to see more bugs, but the beauty of open source is that you can quickly fix them yourself, help the maintainer, and not rely on a 3rd party to do it for you. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-not-make-the-picture-onesided-lets-talk-about-the-disadvantages-of-open-source"&gt;
  &lt;/a&gt;
  To not make the picture one-sided, let's talk about the disadvantages of open source.
&lt;/h3&gt;

&lt;p&gt;The community benefits quite a lot from open source, but a specific group of people expects everything to be served to them for free without investing any effort. In case of a bug, missing documentation, or required feature, you'll sometimes see lots of toxicity among certain members - they want a solution to their problem and treat open source like the product they bought - not something that community made for everyone. This toxicity puts a lot of pressure on project creators who want to make sure everyone has a great experience with the software they created.&lt;/p&gt;

&lt;p&gt;Luckily those are just minority and with an overall fantastic community the general situation is much brighter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwqgOLzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkj2dx4p8mll3bvn5320.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwqgOLzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkj2dx4p8mll3bvn5320.jpg" alt="JavaScript Open Source Awards ceremony at JSNation Amsterdam 2019" title="JavaScript Open Source Awards ceremony at JSNation Amsterdam 2019"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opensource-was-once-thought-to-be-less-secure-than-proprietary-products-however-numerous-independent-studies-have-shown-that-its-now-on-average-safer-than-its-proprietary-counterpart-what-do-you-think-about-that"&gt;
  &lt;/a&gt;
  Open-source was once thought to be less secure than proprietary products. However, numerous independent studies have shown that it’s now, on average, safer than its proprietary counterpart. What do you think about that?
&lt;/h3&gt;

&lt;p&gt;— Again it's hard to come up with a general comparison, but one clear benefit of open source software is that code is available to everyone. More eyes will look for security flaws in projects with many users, and more developers would fix such issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-start-working-on-an-open-source-project-you-immediately-make-friends-with-the-people-involved-in-it-you-can-learn-from-them-and-exchange-ideas"&gt;
  &lt;/a&gt;
  If you start working on an open source project, you immediately make friends with the people involved in it. You can learn from them and exchange ideas.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#do-you-consider-the-open-source-awards-a-good-way-to-show-appreciation-for-the-community"&gt;
  &lt;/a&gt;
  Do you consider the &lt;a href="https://osawards.com/javascript/"&gt;Open Source Awards&lt;/a&gt; a good way to show appreciation for the community?
&lt;/h3&gt;

&lt;p&gt;— Since I got involved with open source, I met many amazing people from around the world working on the same projects. At one point, I even flew to few countries to speak at their conferences, attend meetups and get to know them better.&lt;/p&gt;

&lt;p&gt;You'll rarely find somebody with the same interests who lives across the street, but there's a high chance that somebody out there is super passionate about the same tech stack, open source project, and technology behind it - and you're just a few clicks away from collaborating with them on such ideas! I think that's one huge advantage of the internet and open source software in general.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JAxzASFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d51rc31ptiwuhvh3nkxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JAxzASFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d51rc31ptiwuhvh3nkxa.png" alt="Open Source Awards remote ceremony"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-you-tell-us-a-bit-more-about-why-you-think-open-source-workers-need-their-own-awards"&gt;
  &lt;/a&gt;
  Can you tell us a bit more about why you think open source workers need their own awards?
&lt;/h3&gt;

&lt;p&gt;— There has never been a dedicated place in the community to see top-growing projects with strong future potential. We have GitHub's trending page, but it does not receive much love, so we thought there is enough space to create something new to celebrate open source success and the community behind it. We want to make contributors feel appreciated for their work and kindly thank them for all the hours they put in to make open source an awesome opportunity to learn and grow!  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-would-you-recommend-the-javascript-developers-attending-the-jsnation-live-conference-2021-what-should-they-pay-attention-to"&gt;
  &lt;/a&gt;
  What would you recommend the JavaScript developers attending the &lt;a href="https://live.jsnation.com"&gt;JSNation Live Conference 2021&lt;/a&gt;? What should they pay attention to?
&lt;/h3&gt;

&lt;p&gt;I would say to all participants to have a great time, connect with new people, make new friends, discover some fantastic new open source projects, or get inspired to create new ones themselves.&lt;/p&gt;

&lt;p&gt;There isn't anything specific about making a project more successful at &lt;a href="https://osawards.com/javascript/"&gt;Open Source Awards&lt;/a&gt;. There is a very diverse set of projects, each with a unique approach that was nominated by the community in the months before the event. Considering the number of nominations we have each year, it's safe to say that everyone who made it to the finals is a winner! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1lx96FS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2y9kgmfhi599o608x24.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1lx96FS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2y9kgmfhi599o608x24.jpg" alt="React Amsterdam 2019 Open Source Awards Ceremony"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://live.jsnation.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWmp-ykq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3abm7s98tamstt0gpo6x.png" alt="JSNation Live"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>event</category>
      <category>conference</category>
    </item>
    <item>
      <title>Building a compiler – working on the tokenizer</title>
      <author>Siddharth</author>
      <pubDate>Mon, 07 Jun 2021 07:48:54 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/building-a-compiler-working-on-the-tokenizer-3h6a</link>
      <guid>https://dev.to/siddharthshyniben/building-a-compiler-working-on-the-tokenizer-3h6a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#building-a-compiler-working-on-the-tokenizer"&gt;
  &lt;/a&gt;
  Building a compiler – working on the tokenizer
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Be sure to check out the &lt;a href="https://dev.to/siddharthshyniben/building-a-compiler-what-we-are-aiming-at-ccj"&gt;previous part&lt;/a&gt; if you want to learn the syntax &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, let's actually start working on the code! The first thing to build is the &lt;code&gt;tokenizer&lt;/code&gt; which does lexical analysis on the code.&lt;/p&gt;

&lt;p&gt;We're just gonna take our string of code and break it down into an array of tokens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;identifier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;let&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-tokenizer"&gt;
  &lt;/a&gt;
  The tokenizer
&lt;/h2&gt;

&lt;p&gt;We start by creating a function that accepts a string of code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Rest of the code in here, added sequentially */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we are gonna set up two things...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A current variable to track our positions in the code, like a cursor&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// An array of tokens&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start by creating a while loop, where we can increment the current as many times as we want&lt;/p&gt;

&lt;p&gt;We also set up a char variable which contains our current character&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Rest of the code...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the first we want to do is check for parentheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we do match, we want to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Push it into the tokens array&lt;/li&gt;
&lt;li&gt;Increment the current variable&lt;/li&gt;
&lt;li&gt;Move to the next iteration of the loop (&lt;code&gt;continue&lt;/code&gt;)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paren&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we also do the same thing for a closing parenthesis&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paren&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing we want to check for is whitespace. This is an interesting case because we need whitespace to exist to separate characters, but we actually don't need it as a token in our &lt;code&gt;tokens&lt;/code&gt; array. So we are just going to check for whitespace and if it exists, we just continue on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;WHITESPACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WHITESPACE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing to check is for numbers. This is a different case because numbers can be any number of characters and we want to capture the whole thing as a single token. &lt;/p&gt;

&lt;p&gt;So first we are going to check if there is a number in the code...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;NUMBERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NUMBERS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Code here...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we are going to create a variable to store our number&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we are going to loop through each character in the code until we hit a character that is not a number, incrementing current and storing the number as we go. In the end, we push our number into our tokens array and then we continue on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;NUMBERS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing to do is to support strings. This one is going to be similar to how we implemented numbers.&lt;/p&gt;

&lt;p&gt;We'll start by checking for quotes...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Code...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: we are not checking for single quotes. If you want to, you can implement this by repeating this if block with different quotes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like before, we are going to create a &lt;code&gt;value&lt;/code&gt; variable, increment &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; loop till we hit the next quote, push to &lt;code&gt;tokens&lt;/code&gt;, and &lt;code&gt;continue&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing to do is to check for math operators and the &lt;code&gt;.&lt;/code&gt; for punctuation. This one is pretty simple so I won't even comment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;punctuator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;punctuator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;punctuator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;punctuator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;punctuator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;punctuator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next final thing to check for is an identifier like &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;the&lt;/code&gt;, and also the generic names of variables, which can be anything.&lt;/p&gt;

&lt;p&gt;The first thing to do is loop over the characters the same way we did with numbers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LETTERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LETTERS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;LETTERS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Later...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we add a &lt;code&gt;switch&lt;/code&gt; statement which checks if the &lt;code&gt;value&lt;/code&gt; matches any known keywords.&lt;/p&gt;

&lt;p&gt;We also add a default clause so that any variables can be pushed to the tokens array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;let&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;identifier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;the&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;variable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;// Don't push anything because they are just extras&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;// Be is equivalent to `=`, so it's a punctuator&lt;/span&gt;
        &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;punctuator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;identifier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end, we can throw a &lt;code&gt;TypeError&lt;/code&gt; &lt;em&gt;inside&lt;/em&gt; the while loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I don&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t know what this character is: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#and-raw-return-tokens-endraw-at-the-end-outside-the-while-loop"&gt;
  &lt;/a&gt;
  And &lt;code&gt;return tokens&lt;/code&gt; at the end &lt;em&gt;outside&lt;/em&gt; the while loop.
&lt;/h2&gt;

&lt;p&gt;That's it! we got our tokenizer ready!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>6 HTML tags you might not know</title>
      <author>Denislav Gavrilov 👨‍🚀🤖🤷‍♂️</author>
      <pubDate>Mon, 07 Jun 2021 07:41:16 +0000</pubDate>
      <link>https://dev.to/asciiden/6-html-tags-you-might-not-know-50id</link>
      <guid>https://dev.to/asciiden/6-html-tags-you-might-not-know-50id</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction-skippable"&gt;
  &lt;/a&gt;
  Introduction (Skippable)
&lt;/h2&gt;

&lt;p&gt;A few days ago I was working on my desk and next to me was my lovely girlfriend who was interested in what I really do for a living. She already knows I am doing IT and she also knows I write some code sometimes. She asked me how she can understand if she likes writing code. I did what I had to do. I explained to her how I believe a website code is working, showed her a couple of videos, and opened &lt;a href="https://w3schools.com"&gt;w3schools&lt;/a&gt; for her. I navigated to the HTML section and opened &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; with a &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt; turned on. And she started.&lt;/p&gt;

&lt;p&gt;Little did I know, she would know more HTML tags than me in a couple of hours. It was then, when I realized HTML is actually a lot more flexible than I imagined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#post-structure"&gt;
  &lt;/a&gt;
  Post Structure
&lt;/h2&gt;

&lt;p&gt;The structure of this post is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML tag name&lt;/li&gt;
&lt;li&gt;Explanation of the tag&lt;/li&gt;
&lt;li&gt;Usage example&lt;/li&gt;
&lt;li&gt;Link to W3Schools page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ready? Let's begin!&lt;/p&gt;

&lt;p&gt;We will start with the most (in my opinion) interesting &amp;amp; useful ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  MAP
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;&amp;lt; map &amp;gt;&lt;/em&gt; tag is used to map an image. That means you can define areas on the image and when interacted with, you can set a different outcome. For example, you could map an image and have 2 areas, when you click on area 1 - you get to Google, when you click on area 2 - you get to Twitter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src="https://asciiden.com/assets/img/profile-img.jpg" usemap="#map-name"&amp;gt;

&amp;lt;map name="map-name"&amp;gt;
    &amp;lt;area target="_blank" alt="ALT_TEXT" title="TITLE_TEXT" href="https://example.com" coords="93,57,305,169" shape="rect"&amp;gt;
    &amp;lt;area target="" alt="ALT_TEXT" title="TITLE_TEXT" href="https://example.com" coords="144,248,253,278" shape="rect"&amp;gt;
&amp;lt;/map&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/denislav__/embed/XWMqQyr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_images_imagemap.asp"&gt;W3Schools Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="https://www.image-map.net/"&gt;this website&lt;/a&gt; to generate image maps automatically!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#picture"&gt;
  &lt;/a&gt;
  PICTURE
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&amp;lt; picture &amp;gt;&lt;/strong&gt; tag is used similar to the &lt;strong&gt;&lt;/strong&gt; tag but it gives developers more flexibility. You can define different viewports on different sources, therefore showing different images on different screens without any CSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;picture&amp;gt;
  &amp;lt;source media="(max-width: &amp;lt;WIDTH&amp;gt;px)" srcset="someimage.jpg"&amp;gt;
  &amp;lt;source media="(min-width: &amp;lt;WIDTH&amp;gt;px)" srcset="someimage.jpg"&amp;gt;
  &amp;lt;img src="DEFAULT_IMAGE" style="width:auto;"&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/denislav__/embed/zYZjXQG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_images_picture.asp"&gt;W3Schools Link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sup"&gt;
  &lt;/a&gt;
  SUP
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;&amp;lt; sup &amp;gt;&lt;/em&gt; tag lifts the text a little higher. It stands for superscripted text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;sup&amp;gt; supscripted text &amp;lt;/sup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/denislav__/embed/poeVBoL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_formatting.asp"&gt;W3Schools Link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sub"&gt;
  &lt;/a&gt;
  SUB
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;&amp;lt; sub &amp;gt;&lt;/em&gt; tag lowers the text. It stands for subscripted text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;sub&amp;gt; subscripted text &amp;lt;/sub&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/denislav__/embed/RwpyOGG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_formatting.asp"&gt;W3Schools Link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bdo"&gt;
  &lt;/a&gt;
  BDO
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;&amp;lt; bdo &amp;gt;&lt;/em&gt; tag is used to choose a text direction. It can override the current direction.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;bdo dir="ltr"&amp;gt; text from left to right &amp;lt;/bdo&amp;gt;
&amp;lt;bdo dir="rtl"&amp;gt; text from right to left &amp;lt;/bdo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/denislav__/embed/rNyvbjR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_quotation_elements.asp"&gt;W3Schools Link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dl"&gt;
  &lt;/a&gt;
  DL
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&amp;lt; dl &amp;gt;&lt;/strong&gt; tag defines 'description list' which is one more list you can use in HTML. It pushes the list items a little to the right which in a way creates the feeling of a description.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;dl&amp;gt;
&amp;lt;dt&amp;gt;Item title&amp;lt;/dt&amp;gt;
&amp;lt;dd&amp;gt;Item description&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/denislav__/embed/jOBxoER?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/html/html_lists_other.asp"&gt;W3Schools Link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the author
&lt;/h2&gt;

&lt;p&gt;I am Dennis, going by ASCIIden online and I am a DevOps engineer. However, I don't like the title of 'DevOps' to identify myself with. I rather consider myself a futurist &amp;amp; tech enthusiast.&lt;/p&gt;

&lt;p&gt;I am doing IT for about 2 years now. I am striving to become a helping hand to all juniors in the industry and I am doing my best to provide good, understanding (even fun!) content for you all to enjoy.&lt;/p&gt;

&lt;p&gt;If you want to hit me up for a project or just want to say hi, feel free to do it on my &lt;a href="https://twitter.com/asciiden"&gt;Twitter profile&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Solution: Min Cost Climbing Stairs</title>
      <author>seanpgallivan</author>
      <pubDate>Mon, 07 Jun 2021 07:37:44 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-min-cost-climbing-stairs-5ak9</link>
      <guid>https://dev.to/seanpgallivan/solution-min-cost-climbing-stairs-5ak9</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/min-cost-climbing-stairs/discuss/1256642"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-746-easy-min-cost-climbing-stairs"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/min-cost-climbing-stairs/"&gt;Leetcode Problem #746 (&lt;em&gt;Easy&lt;/em&gt;): Min Cost Climbing Stairs&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given an integer array &lt;code&gt;cost&lt;/code&gt; where &lt;code&gt;cost[i]&lt;/code&gt; is the cost of &lt;code&gt;i&lt;/code&gt;th step on a staircase. Once you pay the cost, you can either climb one or two steps.&lt;/p&gt;

&lt;p&gt;You can either start from the step with index &lt;code&gt;0&lt;/code&gt;, or the step with index &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Return &lt;em&gt;the minimum cost to reach the top of the floor&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cost = [10,15,20]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Cheapest is: start on cost[1], pay that cost, and go to the top.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;cost = [1,100,1,1,1,100,1,1,100,1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Cheapest is: start on cost[0], and only step on 1s, skipping cost[3].&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= cost.length &amp;lt;= 1000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 &amp;lt;= cost[i] &amp;lt;= 999&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This is an introduction to a &lt;strong&gt;top-down dynamic programming&lt;/strong&gt; (&lt;strong&gt;DP&lt;/strong&gt;) approach solution. We can think of this as the build-up of a number of smaller subproblems, starting at the end.&lt;/p&gt;

&lt;p&gt;At each step, we can consider the answer to be the combined &lt;strong&gt;cost&lt;/strong&gt; of the current step, plus the lesser result of the total &lt;strong&gt;cost&lt;/strong&gt; of each of the solutions starting at the next two steps. This means that, thinking backwards, we can solve for the smallest problem first, and then build down from there.&lt;/p&gt;

&lt;p&gt;For the last two steps, the answer is clearly their individual &lt;strong&gt;cost&lt;/strong&gt;. For the third to last step, it's that step's &lt;strong&gt;cost&lt;/strong&gt;, plus the lower of the last two steps. Now that we know that, we can store that data for later use at lower steps. Normally, this would call for a DP array, but in this case, we could simply store the values &lt;strong&gt;in-place&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(&lt;strong&gt;Note&lt;/strong&gt;: If we choose to not modify the input, we could create a DP array to store this information at the expense of &lt;strong&gt;O(N) extra space&lt;/strong&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So we should iterate downward from the end, starting at the third step from the end, and update the values in &lt;strong&gt;cost[i]&lt;/strong&gt; with the best total &lt;strong&gt;cost&lt;/strong&gt; from &lt;strong&gt;cost[i]&lt;/strong&gt; to the end. Then, once we reach the bottom of the steps, we can choose the best result of &lt;strong&gt;cost[0]&lt;/strong&gt; and &lt;strong&gt;cost[1]&lt;/strong&gt; and &lt;strong&gt;return&lt;/strong&gt; our answer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;cost&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;or &lt;strong&gt;O(N)&lt;/strong&gt; if we use a separate DP array&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;minCostClimbingStairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;minCostClimbingStairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;minCostClimbingStairs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt;
            &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;minCostClimbingStairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>The 3 steps to technical excellence as a software developer</title>
      <author>Dragos Nedelcu</author>
      <pubDate>Mon, 07 Jun 2021 07:35:41 +0000</pubDate>
      <link>https://dev.to/dragosgn/the-3-steps-to-technical-excellence-as-a-software-developer-4hpn</link>
      <guid>https://dev.to/dragosgn/the-3-steps-to-technical-excellence-as-a-software-developer-4hpn</guid>
      <description>&lt;p&gt;...without feeling overwhelmed and confused.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-this-sound-familiar-to-you"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Does this sound familiar to you?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you are a software developer trying to get your technical skills to the next level, you are probably familiar with this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You try to define a path for your technical growth, but you lack a clear direction and don’t know how to progress&lt;/li&gt;
&lt;li&gt;You are confused by the huge amount of information out there and simply don’t know what to do next&lt;/li&gt;
&lt;li&gt;You signed up to some online courses on Udemy never finished them because you got stuck or they simply don't work out for you&lt;/li&gt;
&lt;li&gt;Due to the gap in your technical skills, you struggle to build features on your own and constantly need help from senior developers&lt;/li&gt;
&lt;li&gt;You keep hearing that you need to learn functional programming, testing or design patterns from all the tech influencers out there...&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#if-you-are-like-most-software-developers-you-probably-experience-these-situations-again-and-again"&gt;
  &lt;/a&gt;
  &lt;strong&gt;If you are like most software developers, you probably experience these situations again and again.&lt;/strong&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#and-there-is-a-reason-for-that"&gt;
  &lt;/a&gt;
  &lt;strong&gt;And there is a reason for that:&lt;/strong&gt;
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#you-lack-a-clear-plan-in-your-technical-growth"&gt;
  &lt;/a&gt;
  &lt;strong&gt;You lack a clear plan in your technical growth.&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;You lack a defined process that guides your learning and tells you exactly what you need to learn next, no matter what is the latest tech trend, no matter in what phase you find yourself as a developer or the company you work for.&lt;/p&gt;

&lt;p&gt;Think about it: How many times do you feel lost and confused when working on your technical skills just because you simply had no clear plan?&lt;/p&gt;

&lt;p&gt;If you really want to realise your full potential as a software developer you must build a system around your technical growth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-this-so-important"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why is this so important?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Here is the thing: not having a clear technical learning plan is the main reason most software developers take years to grow their skills and &lt;strong&gt;get stuck in junior positions or mediocre jobs&lt;/strong&gt; - simply because not having a process forces them to improvise in their learning (so they aimlessly drift around, procrastinate and ultimately quit).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How are you supposed to get to the next level if you are improvising all the time?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is then crucial for you to build a clear learning plan so you can finally reach seniority in your technical stack, become a professional developer.&lt;/p&gt;

&lt;p&gt;Technical excellence is the backbone of your dev career. It will allow you to get promoted faster, get better positions or directly jump into freelancing yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-is-the-solution-you-need"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Here is the solution you need:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;For the last 12 months I helped 90+ software developers like you reach technical excellence, I set up this 3 steps system to build a clear learning plan so you become an expert software developer in your tech stack of choice.&lt;/p&gt;

&lt;p&gt;The 3 crucial steps to build a bulletproof learning plan for your technical development:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-become-an-expert-in-your-tech-stack"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 1 - Become an expert in your tech stack.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Aim to become the “go-to” person for that particular technology in your team. What is the programming language/framework you work with the most so far? Which topics in that programming language do you feel you are lacking? Make an honest assessment of your skills. Your job will only give you exposure to certain topics, this is why it is crucial that you identify and develop the missing ones. &lt;em&gt;Hint: if you are a web developer, that’s most likely JavaScript(more on this in a future article).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you skip this step and decide to become a “jack of all trades” your ability to work independently will be seriously limited.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-make-best-practices-amp-software-design-principles-a-habit"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 2 - Make best practices &amp;amp; software design principles a habit&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This step is crucial particularly for junior/mid-level developers. To move into the senior area and beyond, you need to be able to abstract beyond implementation details. Here, you need to leverage on all the existing best practices that the software industry has developed over the years to deal with recurring problems. This means object-oriented programming, SOLID principles and design patterns. Be careful, this is a lot! As a rule of thumb, focus on the top 3 in each category and you will do just fine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Understand that the “engineering part” in your job title comes from your ability to measure the pros and cons of your solutions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That is your ability to design solutions between countless constraints the real world puts on our software.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-understand-the-software-development-lifecycle"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Step 3 - Understand the software development lifecycle&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The final step, but one that will multiply your abilities. Learn what happens to your code after you finish building a certain feature. How does it get built, deployed and shipped to the user? What does CI/CD really mean? What is a deployment pipeline and how can you build one? Being able to ship and deploy your own code will help you connect the dots.&lt;/p&gt;

&lt;p&gt;Here, you will understand the real price of defects, and why testing is so crucial. Again, there are endless courses on this topic. &lt;em&gt;Follow the Pareto principle, pick one continuous delivery platform and one cloud provider (most likely AWS).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A good understanding of the cloud will allow you to ship software faster, assist QA engineers better and deliver better software faster. It will also allow you to answer tricky interview questions when the moment comes.&lt;/p&gt;

&lt;p&gt;That’s it - there is nothing else you need to achieve technical excellence as a developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-is-why-those-3-steps-solve-your-problem"&gt;
  &lt;/a&gt;
  &lt;strong&gt;This is why those 3 steps solve your problem&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It is actually obvious:&lt;/p&gt;

&lt;p&gt;Once you are an expert in your technology stack, understand best practices and have a feeling for how to ship software, you become a top software engineer. This will automatically boost your performance, get you noticed and put you in line for a promotion.&lt;/p&gt;

&lt;p&gt;I have successfully used this system with other software developers and they are constantly reaching results. Recently one of our clients succeeded just like that and went from being the junior dev of the team to &lt;strong&gt;gain more responsibility and a promotion.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you read this article, then I assume that &lt;strong&gt;you are also an ambitious software developer&lt;/strong&gt; looking to reach technical excellence right now so you can be more confident in your skills, get more responsibility and better growth opportunities,&lt;/p&gt;

&lt;p&gt;Well if that applies to you, then you would certainly benefit from implementing the 3 steps I have just shown you to become a top software developer.&lt;/p&gt;

&lt;p&gt;Regardless - we both know that reading a simple article on software development will not bring you the results you want.&lt;/p&gt;

&lt;p&gt;If you want results immediately, then I have a suggestion for you: get in touch with my team. You can apply for a &lt;strong&gt;FREE initial consultation&lt;/strong&gt; where we will go over the details of each step via Zoom.&lt;/p&gt;

&lt;p&gt;In this call, me or one of my colleagues will give you every single step that we go through with our clients once they book our program to fast track their growth as a developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#click-here-now-if-you-want-to-reach-technical-excellence"&gt;
  &lt;/a&gt;
  &lt;a href="//codewithdragos.com"&gt;&lt;strong&gt;Click here now if you want to reach technical excellence!&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

</description>
    </item>
  </channel>
</rss>
