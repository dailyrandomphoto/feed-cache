<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>4 things I learned from my internship that helped me grow </title>
      <author>Mayank S Jha</author>
      <pubDate>Mon, 21 Dec 2020 17:37:03 +0000</pubDate>
      <link>https://dev.to/mayanksjha/4-things-i-learned-from-my-internship-that-helped-me-grow-2bgg</link>
      <guid>https://dev.to/mayanksjha/4-things-i-learned-from-my-internship-that-helped-me-grow-2bgg</guid>
      <description>&lt;p&gt;Over the summer I had the wonderful opportunity to work as a Software Development Engineer at Amazon. As an international student, getting to work at a prestigious company from FAANG was definitely a goal I never thought I would be able to reach.&lt;/p&gt;

&lt;p&gt;I was extremely nervous but also excited as I did not know what to expect. This was my first internship ever so it was also the first time I was going to be in a professional environment. College is great and all, but it never gives you the true experience of a working environment. We have all been there to some extent. A job/internship is very different from your experience at college or high-school.&lt;/p&gt;

&lt;p&gt;In my experience, I have always tried to take something away from a situation, sometimes the hard way. So, at the end of my internship, I compiled a list of the most important lessons I learned over the summer. I’d like to share them with you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Start strong, end strong&lt;/li&gt;
&lt;li&gt; Feedback is everything&lt;/li&gt;
&lt;li&gt; You are responsible for your own career&lt;/li&gt;
&lt;li&gt; Have fun&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#start-strong-end-strong" class="anchor"&gt;
  &lt;/a&gt;
  Start Strong, End Strong
&lt;/h2&gt;

&lt;p&gt;Consistency is the name of the game. This a saying that is passed around as a lesson for almost anything in life. The reality is that it is harder than it sounds.&lt;/p&gt;

&lt;p&gt;Consistency, in my opinion, is an umbrella term.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perseverance&lt;/strong&gt; — One of the single greatest qualities we can have as humans, is perseverance. To face the odds no matter what, and continue to put in the effort to achieve something. Keep at it, and you will make progress to be proud of. Sure, some ideas may still crash and burn but you walk away with so much more. Thomas Edison said, “&lt;em&gt;I just found&lt;/em&gt; &lt;strong&gt;&lt;em&gt;2,000 ways&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;not to&lt;/em&gt; &lt;strong&gt;&lt;em&gt;make a lightbulb&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;; I only needed to find one&lt;/em&gt; &lt;strong&gt;&lt;em&gt;way&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;to&lt;/em&gt; &lt;strong&gt;&lt;em&gt;make&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;it work&lt;/em&gt;.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dive Deep&lt;/strong&gt; — When going up against herculean tasks, you need to be prepared. Break your tasks into smaller components. Go into the storm of your tasks ready. Check your equipment and gear ( tools you need ), check the map ( How will you complete this task? / What are you looking for? ), and READ THE F****** MANUAL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt; — Remember that new year’s resolution that died down after school reopened or was it during that deadline week? Join the club. It’s easy to be on top of your game at the start of something but that same energy, dedication dies down after a while. Be aware of this mistake as I myself have fallen victim more than I’d like to admit.&lt;/p&gt;

&lt;p&gt;hm… I should change the title…“Start Strong, End &lt;strong&gt;Stronger&lt;/strong&gt;”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback-is-everything" class="anchor"&gt;
  &lt;/a&gt;
  Feedback is Everything
&lt;/h2&gt;

&lt;p&gt;This is definitely an important one. Feedback is what drives us to be better at whatever we do. It is the fundamental on which the idea of competition exists. Competition in turn yields better output.&lt;/p&gt;

&lt;p&gt;So, where is the catch?&lt;/p&gt;

&lt;p&gt;Feedback is &lt;strong&gt;never&lt;/strong&gt; nonverbal. It is a bias to think that no feedback means everything is a-okay. Feedback is your own responsibility to make sure that you receive it.&lt;/p&gt;

&lt;p&gt;Don’t take feedback personally. Seek constructive criticism and accept it. I would sometimes make the mistake of feeling like I’m worthless because someone said, “This is wrong, we went over this.” When in reality, I was being guided to watch out for silly mistakes that can happen to anyone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-are-responsible-for-your-own-career" class="anchor"&gt;
  &lt;/a&gt;
  You are responsible for your own career
&lt;/h2&gt;

&lt;p&gt;My first manager said, “You are responsible for your own career.” and the words have stuck with me ever since. I have thought long and hard about this one.&lt;/p&gt;

&lt;p&gt;Focus on why you are doing what are you are doing. Take a minute to think about it. What is the outcome?&lt;/p&gt;

&lt;p&gt;When working together, trust others, and make sure others can trust you. We should be able to deliver results blindly without going back and forth for cleanups. It gets better over time as we learn to catch and rectify ourselves if something goes wrong.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-fun" class="anchor"&gt;
  &lt;/a&gt;
  Have fun
&lt;/h2&gt;

&lt;p&gt;This one is simple…&lt;/p&gt;

&lt;p&gt;Have fun. Take care of your health and well being and reach out when you need assistance. Over the summer, I was cooped up in my university dorm for 3 months working 8 hours a day remotely. So, believe me when I say that I wish I had done something more to keep my well being intact.&lt;/p&gt;

&lt;p&gt;You simply cannot perform at the same level as you would when you are at your best mentally, physically, emotionally and any other “-allys” you can think of.&lt;/p&gt;




&lt;p&gt;When I try to think about what has changed since my summer, I feel that I am definitely a more confident person. I know that when I wake up tomorrow, I will follow these learnings as not just a handbook for the “office life” but also as a form of self-discipline.&lt;/p&gt;

&lt;p&gt;Why? Because f*** it that’s why. But also, because I never said that these learnings helped me grow as a professional. I said that these learnings helped me grow. Period.&lt;/p&gt;

</description>
      <category>career</category>
      <category>leadership</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>How AWS Lambda Works Under The Hood</title>
      <author>Oliver Jumpertz</author>
      <pubDate>Mon, 21 Dec 2020 16:48:16 +0000</pubDate>
      <link>https://dev.to/oliverjumpertz/how-aws-lambda-works-under-the-hood-2iae</link>
      <guid>https://dev.to/oliverjumpertz/how-aws-lambda-works-under-the-hood-2iae</guid>
      <description>&lt;p&gt;AWS Lambda is an awesome offering. You provide the code, AWS handles the infrastructure and execution for you.&lt;/p&gt;

&lt;p&gt;But where is your code actually executed? How does AWS do it?&lt;/p&gt;

&lt;p&gt;I recently tried to find it out for myself, and this article is the result of what I learned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-lambda" class="anchor"&gt;
  &lt;/a&gt;
  Thinking about Lambda
&lt;/h2&gt;

&lt;p&gt;We know that we can write a script that looks like below, and then upload it to AWS while they take care of everything else.&lt;br&gt;
And from simply looking at the code, it doesn't look like the usual API method we'd implement in Express.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello from Lambda!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We're exporting a function, so something else must take our code, import it, and then handle everything else.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion number one:&lt;/strong&gt;&lt;br&gt;
Something must run our code.&lt;/p&gt;

&lt;p&gt;We also know the infamous cold start issues which became better over time but are still there. Sometimes the environment is shut down and then started again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion number two:&lt;/strong&gt;&lt;br&gt;
Whatever runs our code can be shut down and started again.&lt;/p&gt;

&lt;p&gt;Have you ever noticed that it's actually impossible to access anything on the host system? If not, try to, and you'll see that the environment will prevent it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion number three:&lt;/strong&gt; &lt;br&gt;
The environment is pretty secure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-the-technology-lambda-is-based-on" class="anchor"&gt;
  &lt;/a&gt;
  Thinking about the technology Lambda is based on
&lt;/h2&gt;

&lt;p&gt;There are a few ways of how AWS could have implemented Lambda (taking into account its initial release year of 2014):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Containerization&lt;/li&gt;
&lt;li&gt;Virtualization&lt;/li&gt;
&lt;li&gt;Something running on bare metal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can quickly rule out "Something running on bare metal". AWS already had EC2 at that time and some good knowledge of virtualization.&lt;br&gt;
It would not have made a lot of sense for AWS to step back from virtualization and not make use of their existing infrastructure.&lt;br&gt;
They basically had everything in place to provision a virtual machine on-the-fly.&lt;/p&gt;

&lt;p&gt;What about Containers then?&lt;br&gt;
They can be spun up quickly and disposed of again.&lt;br&gt;
AWS could have taken the code, wrap it with something and then put it inside a container.&lt;br&gt;
This would have been a great idea, but also something completely new for AWS at that time.&lt;br&gt;
Additionally, it would not explain the (old) cold start issues, because containers are usually pretty fast to spin up.&lt;/p&gt;

&lt;p&gt;What about virtualization then?&lt;br&gt;
It would make a lot of sense. &lt;br&gt;
At the time of starting Lambda, AWS already had EC2 and all the infrastructure to provision a virtual machine on-the-fly. It would also explain why a lambda function being cold-started could sometimes take so long until it finally served a request. But how did they manage to reduce the cold start time up to today?&lt;/p&gt;

&lt;p&gt;Before we dive deeper, I'll give you the answer:&lt;br&gt;
Lambda has, since its release, been based on virtualization technology. No fancy containers, nothing self-developed.&lt;/p&gt;

&lt;p&gt;It simply made the most sense for AWS to do it exactly this way. They had all the knowledge, as you've read above, and they had the infrastructure for provision. All they had to add was something to wrap user functions, and something to call them, as well as some supporting services which could handle eventing.&lt;/p&gt;

&lt;p&gt;And now that we know that it's virtualization, we can take a look at what's exactly used nowadays.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-firecracker" class="anchor"&gt;
  &lt;/a&gt;
  Enter Firecracker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://firecracker-microvm.github.io"&gt;Firecracker&lt;/a&gt; is a virtualization technology, or better, a virtual machine monitor (VMM) developed at Amazon (now open-sourced) and written in Rust.&lt;/p&gt;

&lt;p&gt;It's the engine powering all your Lambda functions.&lt;/p&gt;

&lt;p&gt;What Firecracker basically does is creating and managing a multitude of Linux Kernel-based Virtual Machines (KVMs), which are microVMs that are faster and more secure than traditional VMs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQ1CRRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/szlmqk7hri9doma31a7j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQ1CRRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/szlmqk7hri9doma31a7j.jpeg" alt="The architecture of Firecracker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The interesting thing about those microVMs is, that they are actually on par with containers regarding memory footprint and start-up time, all while offering even more security due to the advanced features KVM offers.&lt;/p&gt;

&lt;p&gt;You can read more about KVM &lt;a href="https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Firecracker comes with a REST API that is used to create VMs, delete them, manage them, etc.&lt;br&gt;
Whenever you create a new lambda function and upload your code, the Firecracker REST-API is called under the hood to create a microVM with your function's CPU and memory settings.&lt;/p&gt;

&lt;p&gt;AWS keeps base images that contain language/runtime specific bootstrap code.&lt;br&gt;
This is the code that actually invokes your handler, passes it the request, and takes the response to return it to the caller.&lt;br&gt;
This is also the code where various metrics are measured that are then used to calculate your bill.&lt;/p&gt;

&lt;p&gt;You can imagine the code as containing an infinite loop, waiting for requests, passing them to your function, returning the response, and gathering execution metrics.&lt;/p&gt;

&lt;p&gt;After Firecracker created a new microVM, including your language-specific runtime, your code is then put into its /var/runtime/bin folder. This is the place where the bootstrap code resides, too.&lt;br&gt;
Now your function is basically able to run and accept requests.&lt;/p&gt;

&lt;p&gt;AWS will, after a while, however, shut the VM down to save resources on their side. &lt;br&gt;
This is, once again, a call to the Firecracker API. &lt;/p&gt;

&lt;p&gt;Incoming requests, e.g. through API Gateway, lead to Firecracker being tasked to start the VM again, such that it can process the request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#surrounding-infrastructure-and-supporting-services" class="anchor"&gt;
  &lt;/a&gt;
  Surrounding infrastructure and supporting services
&lt;/h2&gt;

&lt;p&gt;There are of course a lot of surrounding systems and services which do their work to make AWS Lambda what it is.&lt;/p&gt;

&lt;p&gt;There are services and systems around Firecracker that make all those requests to its API.&lt;br&gt;
Some services are routing the requests. Some services decide when to call Firecracker to shut a certain VM down or pause it, and when to spin it up again.&lt;br&gt;
And there are certainly a lot more services, like Queues, scheduling asynchronous messages, and much more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It's pretty interesting to see what way AWS has gone to make Lambda what it is today, and even more interesting to see Firecracker and how it solves a lot of problems serverless functions cause for service providers. And Firecracker is an integral part of it, as a pretty exciting piece of technology, that doesn't go the usual container route but used another awesome feature of the Linux kernel: KVM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-leave" class="anchor"&gt;
  &lt;/a&gt;
  Before you leave
&lt;/h2&gt;

&lt;p&gt;If you like my content, visit me on &lt;a href="https://twitter.com/oliverjumpertz"&gt;Twitter&lt;/a&gt;, and perhaps you’ll like what you see.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>faas</category>
      <category>lambda</category>
    </item>
    <item>
      <title>How to easily convert HTML Form to JSON</title>
      <author>Jordan Finneran</author>
      <pubDate>Mon, 21 Dec 2020 13:56:46 +0000</pubDate>
      <link>https://dev.to/jordanfinners/how-to-easily-convert-html-form-to-json-3pea</link>
      <guid>https://dev.to/jordanfinners/how-to-easily-convert-html-form-to-json-3pea</guid>
      <description>&lt;h1&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#form-data"&gt;Form Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gotcha"&gt;Gotcha's&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I have a love, but sometimes hate, relationship with HTML Forms. HTML Forms are absolutely brilliant for out of the box validation, accessibility and usability. But they can be a pain to style!&lt;br&gt;
Nevertheless, HTML Forms give you massive amounts of functionality with zero dependencies. &lt;/p&gt;

&lt;p&gt;If you are anything like me, you prefer your API to be JSON based. Making it easier and more consistent to deal with requests and responses on the backend.&lt;br&gt;
You &lt;em&gt;could&lt;/em&gt; add a middleware to your API endpoint that's going to handle your Form UI but why make that endpoint different from the rest?&lt;/p&gt;

&lt;p&gt;What if you could send your Form data off in JSON format and handle it like all your other endpoints. Now you can!&lt;/p&gt;

&lt;p&gt;TLDR; Skip to the &lt;a href="#examples"&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#form-data" class="anchor"&gt;
  &lt;/a&gt;
  Form Data &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Introducing &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData"&gt;FormData&lt;/a&gt;, this is a really nice Web API for manipulating data in HTML Forms.&lt;/p&gt;

&lt;p&gt;This allows us to easily convert a HTML Form to JSON using the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grab the form element from the DOM.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Pass the form to the following function
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Creates a json object including fields in the form
 *
 * @param {HTMLElement} form The form element to convert
 * @return {Object} The form data
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Action the JSON Object result, however you want to handle the data from the form! Send it off with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch"&gt;Fetch&lt;/a&gt; for example.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;
  &lt;a href="#gotchas" class="anchor"&gt;
  &lt;/a&gt;
  Gotcha's &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;As with everything these are a few gotchas to look out for!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#checkboxs" class="anchor"&gt;
  &lt;/a&gt;
  Checkbox's
&lt;/h2&gt;

&lt;p&gt;If ticked your checkbox's will appear in the result as 'on'. Probably not the boolean you want.&lt;br&gt;
For example, if you've got this input in your form, which the user has checked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"isOpen"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It would produce, using the function above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"isOpen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You will probably want to check for the property and if it equals 'on' and convert it to a boolean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-uploads" class="anchor"&gt;
  &lt;/a&gt;
  File Uploads
&lt;/h2&gt;

&lt;p&gt;This one really caught me out, if you've got a file input which accepts multiple files, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"uploads"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If one file is uploaded you will get a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File"&gt;File&lt;/a&gt; object.&lt;br&gt;
But if you have multiple files uploaded, you will actually get a list of them.&lt;/p&gt;

&lt;p&gt;Fortunately, there is a really simple fix for this to consistently provide you with a list of files.&lt;br&gt;
Grab the files from the result and process them like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will consistently give you a list of files, handling if only a single file is uploaded, no file is uploaded or multiples are uploaded.&lt;/p&gt;

&lt;p&gt;This also means you can do more client side checks on file sizes and limits for example as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inputs-with-the-same-name" class="anchor"&gt;
  &lt;/a&gt;
  Inputs with the same name
&lt;/h2&gt;

&lt;p&gt;Let's say you've got a list of possible tags and a user can tick the ones that apply, perhaps which programming languagues they know, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tags"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"javascript"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tags"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"python"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the current solution, you would only get the last selected checkbox as the keys would be overridden in the reduce. However there is a simple fix for this as well.&lt;/p&gt;

&lt;p&gt;We check to see if the key (the name attribute on the input) already exists in the result, if it does then use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll"&gt;getAll&lt;/a&gt; method which will get a list of results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Creates a json object including fields in the form
 *
 * @param {HTMLElement} form The form element to convert
 * @return {Object} The form data
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similarly, to the file upload before, you'll want to handle only one being ticked, no being ticked or multiple, with something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Shut up and show me the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#examples/interactive"&gt;Interactive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples/simple"&gt;Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples/full"&gt;Full&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples/test"&gt;Bonus: Example Test&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;iframe src="https://jsfiddle.net/Lmg1f3tu//embedded/result,html,css,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-example" class="anchor"&gt;
  &lt;/a&gt;
  Simple Example &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Whats your username?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;How many years have you been a developer?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// get the form element from dom&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form#forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// convert the form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// handle the form submission event, prevent default form behaviour, check validity, convert form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reportValidity&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-example" class="anchor"&gt;
  &lt;/a&gt;
  Full Example &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Whats your username?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;How many years have you been a developer?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Upload images
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"images"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"image/png, image/jpeg"&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Do you know javascript?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"languages"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"javascript"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Do you know python?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"languages"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"python"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Enjoyed this blog?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"isHappyReader"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// get the form element from dom&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form#forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// convert the form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// handle the form submission event, prevent default form behaviour, check validity, convert form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reportValidity&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// handle one, multiple or no files uploaded&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// handle one, multiple or no languages selected&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// convert the checkbox to a boolean&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isHappyReader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHappyReader&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHappyReader&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// use spread function, but override the keys we've made changes to&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;isHappyReader&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-example-test" class="anchor"&gt;
  &lt;/a&gt;
  Bonus: Example Test &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return a JSON representation of a form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;int&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deep&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In summary, you can use what browsers give you to get all the great benefits of HTML Forms, and then convert it to JSON so it's easier to work with the data! I hope this has been useful.&lt;/p&gt;

&lt;p&gt;Happy Form building!&lt;/p&gt;

&lt;p&gt;Would you be interested in a series of what you can achieve with HTML and Web APIs?&lt;br&gt;
What are you favourite web tips and tricks? &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>form</category>
    </item>
    <item>
      <title>Tips to better contribute to a product team as a Junior Developer</title>
      <author>Hibo Abdilaahi</author>
      <pubDate>Mon, 21 Dec 2020 11:56:51 +0000</pubDate>
      <link>https://dev.to/hiboabd/tips-to-better-contribute-to-a-product-team-as-a-junior-developer-40ka</link>
      <guid>https://dev.to/hiboabd/tips-to-better-contribute-to-a-product-team-as-a-junior-developer-40ka</guid>
      <description>&lt;p&gt;Over the past couple of weeks, my colleagues and I at &lt;a href="https://www.stairwaylearning.com/"&gt;Stairway&lt;/a&gt; have been working hard to improve our product process and become a more empowered and collaborative product team. I’ve recently read “Inspired: how to create tech products customers love” by Marty Cagan to help understand what a successful product team looks like. &lt;/p&gt;

&lt;p&gt;If you’re a junior developer working in a product team who’d like to know how to make themselves more useful, here are the tips I feel will help you.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-learn-about-the-product-process-and-the-responsibilities-within-the-product-team" class="anchor"&gt;
  &lt;/a&gt;
  1. Learn about the product process and the responsibilities within the product team
&lt;/h2&gt;

&lt;p&gt;As a Junior Developer with no prior technical background, product was one of the first terms I started hearing a lot of and it was very abstract to me. What is product? What do product managers do? What is their goal? Bring in other terms like “product discovery” into the mix and I realised that it was a very important area of the company that I had no real understanding of. I also didn’t think it really had much to do with my day to day role aside from working with the product manager to implement features and shape designs but I couldn’t have been more wrong. &lt;/p&gt;

&lt;p&gt;An effective product team is one that works collaboratively to help the product manager to determine how to discover and build a product customers will love. And in order for you to effectively contribute to this team, it is crucial to understand what a successful and collaborative product team looks like (and likewise what it doesn’t look like). Ultimately, you need to learn about everyone’s role on the team and how your job helps them do their job. &lt;/p&gt;

&lt;p&gt;That being said, here are some resources to help you get started: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inspired by Marty Cagan.&lt;/strong&gt; I cannot recommend this book enough. Although it is geared towards Product Managers, Marty dissects each role in the product team as well as what a correct product process looks like. &lt;a href="https://www.amazon.co.uk/INSPIRED-Create-Tech-Products-Customers-ebook/dp/B077NRB36N"&gt;View here.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Silicon Valley Product Group Blog.&lt;/strong&gt; A blog sharing best practices around how to build innovative products customers love. &lt;a href="https://svpg.com/articles/"&gt;View here.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lenny Rachitsky Newsletter.&lt;/strong&gt; This was recommended to me, it is a newsletter around product and growth, particularly useful if you are interested in working in product. The monthly email is free with the weekly emails requiring a paid subscription to access. &lt;a href="https://www.lennyrachitsky.com"&gt;View here.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-learn-about-your-company-vision-and-strategy" class="anchor"&gt;
  &lt;/a&gt;
  2. Learn about your company vision and strategy
&lt;/h2&gt;

&lt;p&gt;Once you have a good understanding of the product team, you should take the time to understand your company vision and strategy. I am sure you probably already have good knowledge of this but I would still advise that you revisit it. You’ll view it with a newfound perspective on how a product team and your role fits in with this wider goal. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-participate-in-the-research-phase-of-the-product-discovery-process" class="anchor"&gt;
  &lt;/a&gt;
  3. Participate in the research phase of the product discovery process
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Writing products comes from the deep understanding of the users needs combined with an equally deep understanding of what’s just now possible&lt;/em&gt; - Marty Cagan&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The product discovery process is a hugely important part of the work of a product team. It involves studying users to understand which features or products to commit resources to and build. I won’t go into too much detail about it now but &lt;a href="https://medium.com/@eugenesanu/7-principles-for-a-product-discovery-b2d9a44b98da"&gt;here&lt;/a&gt; is a useful article if you’d like to learn more.&lt;/p&gt;

&lt;p&gt;Evidence gathering is an important part of evaluating whether a feature should be prioritised and built. However, developers typically aren’t as involved in this process as they could/should be. The work of a developer mostly involves evaluating features/designs being worked on by the wider product team and implementing features that are ready for development. Thus, product discovery happens before developers typically get involved. &lt;/p&gt;

&lt;p&gt;However, engineers have a lot to contribute at this stage and so you need to play a bigger role in the initial stages of product discovery. More specifically, this involves keeping up with the latest data insights on users and also playing an active role in querying and analysing the data that you are collecting.&lt;/p&gt;

&lt;p&gt;At Stairway, we use BigQuery, Metabase and Amplitude to query and analyse data which are then shared in slack channels and discussed in meetings. This helps us to have a clear sense of direction with feature development as well as brainstorm further lines of inquiry for research.&lt;/p&gt;

&lt;p&gt;If your team conducts user testing sessions, join them and you will see the benefits it provides in helping you learn more about your users and the technological solutions that will make them love your product more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-consider-how-analytics-will-be-factored-into-every-feature-you-work-on" class="anchor"&gt;
  &lt;/a&gt;
  4. Consider how analytics will be factored into every feature you work on
&lt;/h2&gt;

&lt;p&gt;In order to be impactful for your users, the decisions of the team must be data-informed. And in order for decisions to be informed by data, data must be collected! And not just any data but the right data to answer the questions you are seeking to answer.&lt;/p&gt;

&lt;p&gt;Are you involved with conversations around analytics and how they will be implemented into new features? Are you aware of the analytics that you are collecting for the features already in production? What more could you be collecting?&lt;/p&gt;

&lt;p&gt;One thing I try to do when a new feature is being considered is to have a think about what analytics we would need to collect to evaluate the success of the feature. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is it important to know how many unique users used the feature? &lt;/li&gt;
&lt;li&gt;Are we interested in seeing if this increases the number of active users? &lt;/li&gt;
&lt;li&gt;Are you conducting an A/B test and comparing one data set to another? What difference are you expecting to see? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thinking in this way will help you to develop a data-driven mindset where decisions made are based on analytics and experiments and it will make a difference in your ability to conduct data analysis yourself. In terms of the goals of the wider product team, collecting the right analytics facilitates the crucial product discovery phase of the product process. As a junior developer, get involved in this!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-share-your-findings-and-ideas-with-the-team-regularly" class="anchor"&gt;
  &lt;/a&gt;
  5. Share your findings and ideas with the team regularly
&lt;/h2&gt;

&lt;p&gt;An effective product team is one that is collaborative. Instead of thinking about the team as having strict roles that everyone is assigned to, roles should be a bit more flexible and involve discussions with other team members to contribute a fresh perspective. &lt;/p&gt;

&lt;p&gt;Part of being more collaborative is knowledge sharing. This could involve sharing observations from data, user research or your own ideas you have to improve the product. At Stairway, one way we do this is by having a weekly show and tell session. Everyone discusses what they have been working on as well as any new insights and learnings they have discovered during the course of the week. We discuss everything from designs, to data, to new ideas for product and it works really well in facilitating collaborative decision making.&lt;/p&gt;

&lt;p&gt;Sharing ideas and knowledge is particularly important for engineers as they are often the best source of ideas as they have the knowledge required to consider how user problems could be solved using technology. Engineers are aware of how the system works and how easily something can be achieved. &lt;/p&gt;

&lt;p&gt;If you don’t have a culture of knowledge sharing in your team, try to implement it. You could make a slack channel (or another equivalent) where people post new insights they’ve found or anything they’ve been working on to get feedback. Working in this way will help facilitate continuous improvement which is an important ingredient to success in a product team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-review-and-feedback-on-features-as-early-as-possible" class="anchor"&gt;
  &lt;/a&gt;
  6. Review and feedback on features as early as possible
&lt;/h2&gt;

&lt;p&gt;Developers typically review designs and features when they have been fleshed out by the designer and product manager and even tested in some initial user testing sessions. However, developers can provide value much earlier in this process, even when features are just ideas and designs are just simple drawings. The main benefit of this is that it makes the design process and feedback delivery easier. Sharing goals and ideas early benefits the whole team in terms of time and effort and prevents any large changes to designs being made late in the design process. &lt;/p&gt;

&lt;p&gt;If you are typically evaluating features at a later stage, discuss with your team to see if this is something that can be changed to bring the review process forward. &lt;/p&gt;

&lt;p&gt;If you struggle to think about how to evaluate a feature, consider these four product risks: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Value risk&lt;/strong&gt; (whether customers will buy it or users will choose to use it)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Usability risk&lt;/strong&gt; (whether users can figure out how to use it)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Feasibility risk&lt;/strong&gt; (whether our engineers can build what we need with the time, skills and technology we have)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Business viability risk&lt;/strong&gt; (whether this solution also works for the various aspects of our business)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whilst all risks should be considered when evaluating a feature, engineers should focus the majority of their attention on the feasibility risk, and take responsibility for it.&lt;/p&gt;

&lt;p&gt;You can read more about the four risks &lt;a href="https://svpg.com/four-big-risks/"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Thanks for reading this article. I hope it has helped you to understand how you can better contribute to a product team and think about new ways you can get involved in your team's work outside of development. &lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Testing PWAs on mobile devices during development</title>
      <author>Haider Ali Punjabi</author>
      <pubDate>Mon, 21 Dec 2020 11:05:08 +0000</pubDate>
      <link>https://dev.to/haideralipunjabi/testing-pwas-on-mobile-devices-during-development-22mm</link>
      <guid>https://dev.to/haideralipunjabi/testing-pwas-on-mobile-devices-during-development-22mm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pwa-what-is-that" class="anchor"&gt;
  &lt;/a&gt;
  PWA? What is that?
&lt;/h2&gt;

&lt;p&gt;Progressive Web Applications (PWAs) are web applications (duh!) that use emerging web APIs and modern technologies to make the web app behave similar to a native application on any platform / operating system. They can be installed on your phone or PC, and even be distributed through App Stores.&lt;/p&gt;

&lt;p&gt;I will link some articles related to PWAs at the end.&lt;/p&gt;

&lt;p&gt;The capability to be installed on a mobile device is very important for a PWA, and to test those mobile-specific features even more important. PWAs can only be served over &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts"&gt;Secure Contexts&lt;/a&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTPS"&gt;HTTPS&lt;/a&gt;). It isn't a big deal today due to services like &lt;a href="https://letsencrypt.org/"&gt;Let's Encrypt&lt;/a&gt;, which provide free SSL Certificates. The HTTPS restriction isn't a problem but makes testing the PWA difficult. Most browsers treat localhost as a Secure Context, and testing PWA on your own machine isn't a problem. The problem arises when you access your web app from your phone (over local network), and it won't work because usually, you won't have an SSL Certificate for debugging on your own machine. One of the solutions to this problem is to get an SSL certificate, but it can be a complicated process for those not having experience with such stuff.&lt;/p&gt;

&lt;p&gt;In this blog post, I will explain two methods which will help you test your PWAs on your phone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chrome-port-forwarding" class="anchor"&gt;
  &lt;/a&gt;
  Chrome Port Forwarding
&lt;/h2&gt;

&lt;p&gt;Host a site on your machine, access the content from an Android Device (over Android Debugging Bridge). By using Port Forwarding, the browser on your mobile will be able to access the site on its own localhost, thus in a Secure Context.&lt;/p&gt;

&lt;p&gt;Most of the tutorials on internet use Wired ADB, which discourages many people from using this method. I will be using Wireless ADB, which isn't very difficult to setup.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adb-over-network" class="anchor"&gt;
  &lt;/a&gt;
  ADB over Network
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aG4zpbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hejc09z4sn9sh347jcpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aG4zpbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hejc09z4sn9sh347jcpw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to your Phone Settings &amp;gt; System &amp;gt; Developer Options (This might vary in different phones, so if it is not the same in your's, look it up on the internet)&lt;/li&gt;
&lt;li&gt;Turn on Android Debugging and ADB over Network.&lt;/li&gt;
&lt;li&gt;Note the IP Address and Port shown under ADB over Network&lt;/li&gt;
&lt;li&gt;Install &lt;a href=""&gt;ADB&lt;/a&gt; on your computer&lt;/li&gt;
&lt;li&gt;Go to your command-line / command prompt and enter &lt;code&gt;adb connect &amp;lt;ip-address&amp;gt;:&amp;lt;port&amp;gt;&lt;/code&gt; (Use the IP Address and Port from Step 3)&lt;/li&gt;
&lt;li&gt;When connecting for the first time, you will need to authorize the connection on your phone.&lt;/li&gt;
&lt;li&gt;Your device should be connected to your PC over WiFi.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#using-chrome-port-forwarding" class="anchor"&gt;
  &lt;/a&gt;
  Using Chrome Port Forwarding
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Make sure your development server is running on your PC&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://dev.tochrome://inspect/#devices"&gt;&lt;code&gt;chrome://inspect/#devices&lt;/code&gt;&lt;/a&gt;. You should see your device along with a Connected status indicator&lt;/li&gt;
&lt;li&gt;Enable Port Forwarding&lt;/li&gt;
&lt;li&gt;Click Add Rule&lt;/li&gt;
&lt;li&gt;In the Device Port, enter the port number on which you want to access the site on your device&lt;/li&gt;
&lt;li&gt;In the Local Address field, enter the address and port of your development server. (e.g, localhost:1313)&lt;/li&gt;
&lt;li&gt;Click Add&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YS1N3RdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.haideralipunjabi.com/uploads/maim-1591337806.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YS1N3RdT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.haideralipunjabi.com/uploads/maim-1591337806.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Port Forwarding should be setup and you will be able to access your server on your Android Device on localhost:port (which you set in Step 5.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/local-server"&gt;More Detailed Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros-vs-cons" class="anchor"&gt;
  &lt;/a&gt;
  Pros vs Cons
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faster Deployment and Testing&lt;/li&gt;
&lt;li&gt;Already using ADB and Chrome, which will also be used if you want to use the Dev Tools on your mobile device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can only be used for Android Devices&lt;/li&gt;
&lt;li&gt;The devices need to be on the same network&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#netlify-dev" class="anchor"&gt;
  &lt;/a&gt;
  Netlify Dev
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com/products/dev/"&gt;Netlify Dev&lt;/a&gt; is part of the &lt;a href="https://docs.netlify.com/cli/get-started"&gt;netlify-cli&lt;/a&gt;, and is a great choice if you are already using netlify-cli, or need to showcase your work live without deploying it to production. Netlify Dev also allows you to use many features from the Netlify Ecosystem like Netlify Functions, Custom Headers, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;First of all, you will need to setup netlify-cli and authorize it. You will need an account on Netlify for it.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;Here's a link to a detailed tutorial&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install netlify-cli
&lt;code&gt;npm install netlify-cli -g&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authenticate&lt;br&gt;
&lt;code&gt;netlify login&lt;/code&gt;&lt;br&gt;
Authorize it in the browser window that opens.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setup your repository using&lt;br&gt;
a. Automated Setup (if your repository is on Github)&lt;br&gt;
&lt;code&gt;netlify init&lt;/code&gt;&lt;br&gt;
b. Manual (for other Git Providers, or if you wise to do it like this)&lt;br&gt;
&lt;code&gt;netlify init --manual&lt;/code&gt;&lt;br&gt;
You can do a lot of stuff with this cli, but I will skip directly to Netlify Dev&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To start a Netlify Dev server, you can use &lt;code&gt;netlify dev&lt;/code&gt; , but since we want to Start a Public Live Session, we will use&lt;br&gt;
&lt;code&gt;netlify dev --live&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will get a URL that looks like &lt;code&gt;https://clever-cray-2aa156-6639f3.netlify.live/&lt;/code&gt;. This URL will be accessible by everyone on internet.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;netlify-cli has many more features you should read about in the &lt;a href="https://docs.netlify.com/cli/get-started/#netlify-dev"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-your-pwa-on-your-mobile" class="anchor"&gt;
  &lt;/a&gt;
  Testing your PWA on your mobile
&lt;/h2&gt;

&lt;p&gt;Now that you can access the PWA on your mobile, you need to find a way to test it properly. The Dev Tools available in PC Browsers help in debugging and testing, but unfortunately, I have yet to find a similar feature on phone. Fortunately, Chrome provides a solution by allowing us access to the Dev Tools for a page on mobile devices using ADB.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup ADB, as shown in the Chrome Port Forwarding&lt;/li&gt;
&lt;li&gt;In &lt;a href="https://dev.tochrome://inspect/#devices"&gt;&lt;code&gt;chrome://inspect/#devices&lt;/code&gt;&lt;/a&gt;, you will see a list of all pages opened on your mobile device.&lt;/li&gt;
&lt;li&gt;Click on the inspect button to launch the Dev Tools for that page&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2HnkIM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.haideralipunjabi.com/uploads/maim-1591337816.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2HnkIM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.haideralipunjabi.com/uploads/maim-1591337816.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps"&gt;Progressive Web Apps -Mozilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netlify.com/products/dev/"&gt;Netlify Dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/local-server"&gt;Access Local Servers - Google Tools for Web Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/remote-debugging/webviews"&gt;Remote Debugging WebView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me" class="anchor"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/HAliPunjabi"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.buymeacoffee.com/HAliPunjabi"&gt;Buy Me A Coffee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/haideralipunjabi"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>pwa</category>
    </item>
    <item>
      <title>How to write good documentation</title>
      <author>Victoria Drake</author>
      <pubDate>Mon, 21 Dec 2020 09:53:10 +0000</pubDate>
      <link>https://dev.to/victoria/how-to-write-good-documentation-6i1</link>
      <guid>https://dev.to/victoria/how-to-write-good-documentation-6i1</guid>
      <description>&lt;p&gt;If you’ve ever half-written a software project before taking a few days off, this is the article you’ll discover you needed when you reopen that IDE.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzoNKXiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d80tf4azdv87zswimare.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzoNKXiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d80tf4azdv87zswimare.png" alt="Friday's completed puzzle vs Monday's pile of puzzle pieces. Comic by author."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the technology teams I lead, we make a constant effort to document all the things. Documentation lives alongside the code as an equal player. This helps ensure that no one needs to make assumptions about how something works, or is calling lengthy meetings to gain working knowledge of a feature. Good documentation saves us a lot of time and hassle.&lt;/p&gt;

&lt;p&gt;That said, and contrary to popular belief, the most valuable software documentation is not primarily written for other people. As I said in this well-received tweet:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TLFsAUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1318325316436283392/oAuBzLxe_normal.jpg" alt="Victoria Drake profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Victoria Drake
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @victoriadotdev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The secret to good documentation is to write it while you're writing the code. You are your first audience. Explain what you're doing to yourself. Future you will thank you!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:46 PM - 24 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1331262801797652483" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1331262801797652483" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      56
      &lt;a href="https://twitter.com/intent/like?tweet_id=1331262801797652483" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      308
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;With holidays around the corner, it’d be prudent to prepare for the possibility of some eggnog-induced programming paralysis. (Pecan pie and Python make a great combination.) 🥧🐍&lt;/p&gt;

&lt;p&gt;Here are three concrete steps you can take to write good documentation before it’s too late.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-start-with-accurate-notes" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#1-start-with-accurate-notes"&gt;1. Start with accurate notes&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As you work out ideas in code, ensure you don’t soon forget important details by starting with accurate notes. While you will want to explain things to yourself in long-form later, short-form notes will suffice to capture details without interrupting your coding session flow.&lt;/p&gt;

&lt;p&gt;Keep a document open alongside your code and write down things like commands, decisions, and sources you use. This can include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Terminal commands you typed in&lt;/li&gt;
&lt;li&gt;Why you chose a particular method over another&lt;/li&gt;
&lt;li&gt;Links you visited for help or &lt;em&gt;cough_copy-paste_cough&lt;/em&gt; inspiration&lt;/li&gt;
&lt;li&gt;The order in which you did things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t worry about full sentences at this point. Just ensure you accurately capture context, relevant code snippets, and helpful URLs. It can also be helpful to turn on any auto-save option available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-explain-decisions-in-long-form" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#2-explain-decisions-in-long-form"&gt;2. Explain decisions in long form&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The ideal time to tackle this step is when you take a break from coding, but before you completely go out to lunch on whatever it is you’re working on at the moment. You want to ensure that context, ideas, and decisions are all still fresh in your mind when you explain them to yourself.&lt;/p&gt;

&lt;p&gt;Go over the short-form notes you took and start expanding them into conversational writing. Be your own rubber duck. Describe what you’re doing as if you were teaching it to someone else. You might cover topics such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quirky-looking decisions: “I would normally do it this way, but I chose to do something different because…”&lt;/li&gt;
&lt;li&gt;Challenges you ran into and how you overcame them&lt;/li&gt;
&lt;li&gt;Architectural decisions that support your project goals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stick to the main points. Long-form writing doesn’t mean you’ll be paid by the word! Just use full sentences, and write as if explaining your project to a colleague. You’re explaining to future you, after all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-neglect-prerequisite-knowledge" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#3-dont-neglect-prerequisite-knowledge"&gt;3. Don’t neglect prerequisite knowledge&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This step is best done after a long lunch break, or even the next day (but probably not two). Re-read your document and fill in any blanks that become apparent after putting some distance between yourself and the project.&lt;/p&gt;

&lt;p&gt;Take extra care to fill in or at least link to prerequisite knowledge, especially if you frequently use different languages or tools. Even an action as small as pasting in a link to the API documentation you used can save hours of future searching.&lt;/p&gt;

&lt;p&gt;Write down or link to READMEs, installation steps, and relevant support issues. For frequently performed command-line actions, you can use a &lt;a href="https://victoria.dev/blog/how-to-create-a-self-documenting-makefile/"&gt;self-documenting Makefile&lt;/a&gt; to avoid having to &lt;code&gt;man&lt;/code&gt; common tasks each time you come back to a project.&lt;/p&gt;

&lt;p&gt;It’s easy to forget supporting details after even just a short break from your project. Capture anything you found helpful this time around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#document-all-the-things" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#document-all-the-things"&gt;Document all the things&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The next time you catch yourself thinking, “I’m sure I’ll remember this part, no need to write it down,” just recall this emoji: 🤦‍♀️&lt;/p&gt;

&lt;p&gt;Software projects are made up of a lot more than just their code. To best set up your future self for success, document all the things! Whether it’s a process you’ve established, Infrastructure as Code, or a fleeting future roadmap idea — write it down! Future you will thank you for it.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, I'd love to know. Join the thousands of people who learn along with me on &lt;a href="https://victoria.dev"&gt;victoria.dev&lt;/a&gt;! Visit and subscribe for more about building your coding skill stack.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>devtips</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Add code snippets using Gridsome Prism.js plugin</title>
      <author>Linda</author>
      <pubDate>Mon, 21 Dec 2020 09:24:48 +0000</pubDate>
      <link>https://dev.to/lindaojo/add-code-snippets-using-gridsome-prism-js-plugin-2njk</link>
      <guid>https://dev.to/lindaojo/add-code-snippets-using-gridsome-prism-js-plugin-2njk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7G2e81mZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bp87vwioifx2kjxyvb2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7G2e81mZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bp87vwioifx2kjxyvb2y.png" alt="Code snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code snippets are a key part of writing for any developer. In this post, I am going to walk you through a simple way to add code snippets to your posts.&lt;/p&gt;

&lt;h3&gt;Install plugin&lt;/h3&gt;



&lt;p&gt;install the prism.js plugin by running the command below in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;npm i gridsome-plugin-remark-prismjs-all
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Add plugin in gridsome.config.js&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In your gridsome.config.js&lt;/span&gt;
&lt;span class="nx"&gt;transformers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Add markdown support to all file-system sources&lt;/span&gt;
    &lt;span class="nl"&gt;remark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="na"&gt;externalLinksTarget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;externalLinksRel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nofollow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;noopener&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;noreferrer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;anchorClassName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;icon icon-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gridsome-plugin-remark-prismjs-all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You could set custom class names which you can use for styling as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In your gridsome.config.js&lt;/span&gt;
&lt;span class="nx"&gt;transformers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-plugin-remark-prismjs-all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;showLineNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;highlightClassName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-highlight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;codeTitleClassName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-code-title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;classPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;language-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Add a theme in your main.js&lt;/h3&gt;

&lt;p&gt;There are 3 different themes presently available, you can import anyone as shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-plugin-remark-prismjs-all/themes/night-owl.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-plugin-remark-prismjs-all/themes/solarized.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gridsome-plugin-remark-prismjs-all/themes/tomorrow.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;Add Code Snippet to file&lt;/h3&gt;

&lt;p&gt;Wrap your code in triple backquotes then specifying the code language. Check out some examples and their resulting renders below.&lt;/p&gt;

&lt;p&gt;Example 1&lt;/p&gt;

&lt;pre&gt;


```js
  let number = 4;
  console.log(number);
```

 
&lt;/pre&gt;

&lt;p&gt;Render&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Example 2&lt;/p&gt;

&lt;pre&gt;


```css
  body {
    min-height: 100vh;
    background-color: transparent;
    line-height: 1.5;
  }
```

 
&lt;/pre&gt;

&lt;p&gt;Render&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://lindaojo.com/articles"&gt;Read other articles&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>prismjs</category>
      <category>gridsome</category>
    </item>
    <item>
      <title>12 open source browser tools and how I've built them</title>
      <author>Vitaly Rtishchev</author>
      <pubDate>Mon, 21 Dec 2020 08:48:31 +0000</pubDate>
      <link>https://dev.to/rtivital/12-open-source-browser-tools-and-how-i-ve-built-them-1nl4</link>
      <guid>https://dev.to/rtivital/12-open-source-browser-tools-and-how-i-ve-built-them-1nl4</guid>
      <description>&lt;p&gt;I'm happy to announce that I've finished development of &lt;a href="https://omatsuri.app/"&gt;Omatsuri&lt;/a&gt; – &lt;a href="https://github.com/rtivital/omatsuri"&gt;open source&lt;/a&gt; React PWA that includes 12 Frontend focused tools. In this post I'll share some insights on how these tools were built.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qq7h-6a4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8ihfxr0zuxkv6my4733.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qq7h-6a4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8ihfxr0zuxkv6my4733.png" alt="Omatsuri landing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tools" class="anchor"&gt;
  &lt;/a&gt;
  The tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CSS Triangle Generator&lt;/li&gt;
&lt;li&gt;Gradient Generator + Gradient Gallery&lt;/li&gt;
&lt;li&gt;CSS Cursors list&lt;/li&gt;
&lt;li&gt;Color Shades Generator&lt;/li&gt;
&lt;li&gt;Curved Page Dividers Generator&lt;/li&gt;
&lt;li&gt;SVG compressor&lt;/li&gt;
&lt;li&gt;SVG to JSX converter&lt;/li&gt;
&lt;li&gt;Base64 encoder&lt;/li&gt;
&lt;li&gt;Realistic Fake Data Generator&lt;/li&gt;
&lt;li&gt;HTML/CSS Symbols Collection&lt;/li&gt;
&lt;li&gt;Lorem/Samuel/Poke Ipsum Generator&lt;/li&gt;
&lt;li&gt;JavaScript Events Keycodes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#technical-details" class="anchor"&gt;
  &lt;/a&gt;
  Technical details
&lt;/h2&gt;

&lt;p&gt;My main purpose was to make Omatsuri a browser only application. This approach allows to reduce costs for server hosting that does heavy jobs, like SVG compression, Prettier transformations, encodings and other heavy things. This also means that application will always be fully accessible offline without any limitations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#service-worker-and-offline-support" class="anchor"&gt;
  &lt;/a&gt;
  Service worker and offline support
&lt;/h3&gt;

&lt;p&gt;Since Omatsuri is a browser only application the only thing that we need from service worker is to cache assets and provide app shell. &lt;a href="https://github.com/NekR/offline-plugin"&gt;Offline plugin&lt;/a&gt; does exactly that, the only thing we need to do – add it to the production build in &lt;a href="https://github.com/rtivital/omatsuri/blob/master/webpack.config.js#L192"&gt;webpack config&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OfflinePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;autoUpdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;appShell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;excludes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;404.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CNAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we are ready to &lt;a href="https://github.com/rtivital/omatsuri/blob/master/src/components/Navbar/Navbar.jsx#L43-L47"&gt;listen to service worker ready state&lt;/a&gt; and propose user to install PWA when it's done loading:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOffline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOffline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-pages-and-react-router" class="anchor"&gt;
  &lt;/a&gt;
  Github Pages and React Router
&lt;/h3&gt;

&lt;p&gt;Omatsuri is hosted on Github Pages – it's free and does fine job of serving static assets. There is only one problem – it does not work well with browser history and as I was building a SPA I wanted to fully control routing with React Router. &lt;/p&gt;

&lt;p&gt;For example, gh-pages will return index.html for / request, but there is no way to force it to return the same index.html for /triangle-generator route. &lt;/p&gt;

&lt;p&gt;The workaround here is to create separate 404.html with the same content as in index.html – gh-pages will send it for each request that cannot be found in static files and  service worker will do the rest of the job. This is not perfect as gh-pages will return 404 status, but at least it works fine.&lt;/p&gt;

&lt;p&gt;Another issue with gh-pages – small cache TTL (10 minutes), it lowers Lighthouse score, but is not critical since we have service worker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwNaszLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvh3kig3d53kfe52usb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwNaszLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvh3kig3d53kfe52usb6.png" alt="Omatsuri lighthouse score"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg-compression" class="anchor"&gt;
  &lt;/a&gt;
  SVG compression
&lt;/h3&gt;

&lt;p&gt;There is actually only one good library for SVG compression (&lt;a href="https://github.com/svg/svgo"&gt;SVGO&lt;/a&gt;) written in JavaScript. And it does not have browser support, only Node.js. I found it very strange as compression is based entirely on string parsing and does not include any node specific logic. &lt;/p&gt;

&lt;p&gt;So my first task was to migrate SVGO to browser. It was pretty easy, since all core logic did not require any modifications. And now you can use &lt;a href="https://github.com/rtivital/svgo-browser"&gt;svgo-browser&lt;/a&gt; library in your projects if you ever need SVG compression in browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-workers" class="anchor"&gt;
  &lt;/a&gt;
  Web workers
&lt;/h3&gt;

&lt;p&gt;Some task are very heavy and can block your browser for several seconds. To fix this, we can put them in separate thread using web workers and they will run in background without blocking the main thread. &lt;/p&gt;

&lt;p&gt;I was surprised how easy it is to work with web workers in webpack. All you need is &lt;a href="https://github.com/webpack-contrib/worker-loader"&gt;worker-loader&lt;/a&gt; that will handle all worker bundling for you.&lt;/p&gt;

&lt;p&gt;Here is an &lt;a href="https://github.com/rtivital/omatsuri/blob/master/src/workers/svg-to-jsx.worker.js"&gt;example&lt;/a&gt; of web worker usage for transforming svg to jsx with prettier and svg compression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// svg-to-jsx.worker.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prettier&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier/standalone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prettierBabel&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier/parser-babel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svg-to-jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;optimize&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svgo-browser/lib/optimize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`import React from 'react';\n\nexport default function SvgComponent() { return &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; }`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;prettier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generateComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prettierBabel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// react component&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Svg2jsxWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../workers/svg-to-jsx.worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Svg2jsxWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SvgToJsx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dark-theme-support" class="anchor"&gt;
  &lt;/a&gt;
  Dark theme support
&lt;/h3&gt;

&lt;p&gt;By default Omatsuri uses system theme, to listen to those changes, I've created &lt;a href="https://github.com/rtivital/xooks/blob/master/src/use-color-scheme/use-color-scheme.ts"&gt;react hook&lt;/a&gt; that returns current browser theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useColorScheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setScheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSchemeChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;setScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSchemeChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSchemeChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's not enough though, since I wanted to give an option  to change theme. To achieve that I've created &lt;a href="https://github.com/rtivital/omatsuri/blob/master/src/ThemeProvider.jsx"&gt;ThemeProvider component&lt;/a&gt; that wraps entire application and provides theme value via react context. To get theme in any component all I need is to call useTheme hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Omatsuri was my first PWA and I really enjoyed the process – existing tools make it super easy to transform your regular React SPA to PWA and utilize complex things like web workers.&lt;/p&gt;

&lt;p&gt;During the development apart from Omatsuri itself I've created two additional npm libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/rtivital/xooks"&gt;xooks&lt;/a&gt; – React hooks library that includes all hooks that I've used during Omatsuri development (localstorage manipulations, system theme detection, clipboard utils and six others).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rtivital/svgo-browser"&gt;svgo-browser&lt;/a&gt; – svgo fork with better Node.js API and browser support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#support-omatsuri" class="anchor"&gt;
  &lt;/a&gt;
  Support Omatsuri
&lt;/h2&gt;

&lt;p&gt;If you like Omatsuri please give it a star on Github – &lt;a href="https://github.com/rtivital/omatsuri"&gt;https://github.com/rtivital/omatsuri&lt;/a&gt; and install it as PWA – this will assure that you have all 12 tools even when you are offline.&lt;/p&gt;

&lt;p&gt;Thanks for your support!&lt;/p&gt;

</description>
      <category>react</category>
      <category>pwa</category>
      <category>javascript</category>
      <category>webpack</category>
    </item>
    <item>
      <title>How to highlight countries with Mapbox</title>
      <author>ngnijland</author>
      <pubDate>Mon, 21 Dec 2020 08:11:18 +0000</pubDate>
      <link>https://dev.to/ngnijland/how-to-highlight-countries-with-mapbox-1ef</link>
      <guid>https://dev.to/ngnijland/how-to-highlight-countries-with-mapbox-1ef</guid>
      <description>&lt;p&gt;I'm working on a trips section on my personal website. To visualize the countries I have visited, I wanted to show a map and highlight every country I visited. Since this was not a straightforward task and it took me longer than expected I thought I would share how this works.&lt;/p&gt;

&lt;p&gt;Just here for the code? Checkout this &lt;a href="https://github.com/ngnijland/highlight-countries-mapbox"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup-mapbox" class="anchor"&gt;
  &lt;/a&gt;
  Setup Mapbox
&lt;/h1&gt;

&lt;p&gt;First, we want a running instance of Mapbox. I choose to use Mapbox GL JS as I wanted a smooth experience for future animations and transitions on the map of my personal website. Mapbox GL JS is a JavaScript library that uses WebGL to promise this smooth experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#include-sources" class="anchor"&gt;
  &lt;/a&gt;
  Include sources
&lt;/h2&gt;

&lt;p&gt;To render a Mapbox map you need to include the Mapbox GL JS library and styles in your code. You can either add it using Mapbox's CDN with a script and link tag or use a module bundler like npm or yarn. &lt;/p&gt;

&lt;p&gt;To be able to setup up a bare minimum as an example I chose to use Mapbox's CDN. It is done by adding the following lines of code to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you want to use a module bundler checkout their &lt;a href="https://docs.mapbox.com/mapbox-gl-js/api/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#access-token" class="anchor"&gt;
  &lt;/a&gt;
  Access token
&lt;/h2&gt;

&lt;p&gt;To use a Mapbox map you need an access token. To get one, you need to create a Mapbox account (&lt;a href="https://account.mapbox.com/auth/signup/"&gt;https://account.mapbox.com/auth/signup/&lt;/a&gt;) and retrieve an access token from your account page (&lt;a href="https://account.mapbox.com/"&gt;https://account.mapbox.com/&lt;/a&gt;). Once you have your access token it is time to render a map on your page!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#render-map" class="anchor"&gt;
  &lt;/a&gt;
  Render map
&lt;/h2&gt;

&lt;p&gt;Mapbox needs an element to render its map in. Let's add one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make it fill the entire page add the following CSS to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now hand Mapbox your access token and initialize a new &lt;code&gt;Map&lt;/code&gt; instance by adding the following script tag to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of your HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR ACCESS TOKEN HERE&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/streets-v11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now have a fully working Mapbox map running in our browser!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJN_PVq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qzxt6mwdhvy3ic0zjwch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJN_PVq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qzxt6mwdhvy3ic0zjwch.png" alt="A browser window showing a full-size Mapbox map."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The complete code to achieve this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'viewport'&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;'width=device-width, initial-scale=1'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Highlight countries in mapbox&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'map'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR ACCESS TOKEN HERE&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/streets-v11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#highlight-countries" class="anchor"&gt;
  &lt;/a&gt;
  Highlight countries
&lt;/h1&gt;

&lt;p&gt;Now we have a map, the next step is to highlight individual countries. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tilesets" class="anchor"&gt;
  &lt;/a&gt;
  Tilesets
&lt;/h2&gt;

&lt;p&gt;Mapbox works with layers where you can display tilesets. These tilesets consist of vectors that render on a specific place on the map. You can create your own tileset or use existing ones. &lt;/p&gt;

&lt;p&gt;We will use this &lt;a href="https://studio.mapbox.com/tilesets/mapbox.country-boundaries-v1/"&gt;countries tileset&lt;/a&gt; supplied by Mapbox.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-layer" class="anchor"&gt;
  &lt;/a&gt;
  Add a layer
&lt;/h2&gt;

&lt;p&gt;To render this tileset on top of our map we have to add a layer to our map. We can do this on the callback of the &lt;code&gt;Map&lt;/code&gt;'s &lt;code&gt;load&lt;/code&gt; event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we add a config which will add the countries tileset to this layer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://mapbox.country-boundaries-v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;source-layer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country_boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#d2361e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill-opacity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After the tileset config, we add &lt;code&gt;'country-label'&lt;/code&gt; to make sure the country names render on top of the country tileset.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;paint&lt;/code&gt; section of the config, you can choose the color and opacity in which countries should highlight. In this case &lt;code&gt;#d2361e&lt;/code&gt; with an opacity of &lt;code&gt;0.4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This results in all countries being highlighted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIVOfra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g61klpxo442f2ahre72l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIVOfra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g61klpxo442f2ahre72l.png" alt="A browser window showing a full-size Mapbox map highlighting all countries in red with a 60% opacity."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filter" class="anchor"&gt;
  &lt;/a&gt;
  Filter
&lt;/h2&gt;

&lt;p&gt;Mapbox's country tileset identify countries with &lt;a href="https://www.iso.org/iso-3166-country-codes.html"&gt;ISO 3166-1 country codes&lt;/a&gt;. You can add a filter to the &lt;code&gt;country-boundaries&lt;/code&gt; layer and use these country codes to highlight specific countries. This should also be done in the &lt;code&gt;Map&lt;/code&gt;'s &lt;code&gt;load&lt;/code&gt; event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iso_3166_1_alpha_3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NLD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ITA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will highlight The Netherlands and Italy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUJ2E4_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c0m2q4rx5iggzb42by1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUJ2E4_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c0m2q4rx5iggzb42by1x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we achieved what we wanted! Check out all the code needed here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'viewport'&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;'width=device-width, initial-scale=1'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Highlight countries in mapbox&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'map'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR ACCESS TOKEN HERE&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/streets-v11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://mapbox.country-boundaries-v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;source-layer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country_boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#d2361e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill-opacity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iso_3166_1_alpha_3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NLD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ITA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks for reading this article! Check out all the code needed in this &lt;a href="https://github.com/ngnijland/highlight-countries-mapbox"&gt;repository&lt;/a&gt;. If you're interested in how I applied it on my website you can find it at &lt;a href="https://nieknijland.nl/trips"&gt;https://nieknijland.nl/trips&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do you like this article? Maybe you'll like these as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ngnijland/use-multiple-versions-of-an-npm-package-at-the-same-time-582g"&gt;Use multiple versions of an npm package at the same time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ngnijland/run-asynchronous-tasks-in-batches-in-nodejs-599a"&gt;Run asynchronous tasks in batches in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get in contact! Comment below on this article or follow me on Twitter &lt;a href="https://twitter.com/ngnijland"&gt;@ngnijland&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>mapbox</category>
      <category>map</category>
      <category>webgl</category>
    </item>
    <item>
      <title>30 Machine Learning, AI, &amp; Data Science Project Ideas</title>
      <author>Henry Boisdequin</author>
      <pubDate>Mon, 21 Dec 2020 07:57:28 +0000</pubDate>
      <link>https://dev.to/hb/30-machine-learning-ai-data-science-project-ideas-gf5</link>
      <guid>https://dev.to/hb/30-machine-learning-ai-data-science-project-ideas-gf5</guid>
      <description>&lt;p&gt;The best way to learn machine learning, AI, and data science is by creating projects. This way you learn all the concepts you need to know in a real-life situation. What project should I make? I will give you 30 machine learning, AI, and data science project ideas with a description, tutorial if you get stuck, and some further details.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-titanic-survival-project" class="anchor"&gt;
  &lt;/a&gt;
  1. Titanic Survival Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/c/titanic/notebooks"&gt;https://www.kaggle.com/c/titanic/notebooks&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-chatbot" class="anchor"&gt;
  &lt;/a&gt;
  2. Chatbot
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a chatbot which responds to your messages appropriately. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=019a30EnNGk&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah"&gt;https://www.youtube.com/watch?v=019a30EnNGk&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-sentiment-analysis-project" class="anchor"&gt;
  &lt;/a&gt;
  3. Sentiment Analysis Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a sentiment analysis model which finds the sentiment of the given text.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=RqvYSY7deeA&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=6"&gt;https://www.youtube.com/watch?v=RqvYSY7deeA&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=6&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-image-captioning-project" class="anchor"&gt;
  &lt;/a&gt;
  4. Image Captioning Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to create a caption for a given image.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=UtlnGkqk1VU&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=16"&gt;https://www.youtube.com/watch?v=UtlnGkqk1VU&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=16&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-convert-image-to-pencil-sketch-project" class="anchor"&gt;
  &lt;/a&gt;
  5. Convert Image to Pencil Sketch Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to convert a given image to a pencil sketch. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=lI94fv_1ow0&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=25"&gt;https://www.youtube.com/watch?v=lI94fv_1ow0&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=25&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-customer-segmentation" class="anchor"&gt;
  &lt;/a&gt;
  6. Customer Segmentation
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to find out who your loyal customers are.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=fdUofaT8gUw&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=30"&gt;https://www.youtube.com/watch?v=fdUofaT8gUw&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=30&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-mnist-project" class="anchor"&gt;
  &lt;/a&gt;
  7. MNIST Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI model to detect numbers using the MNIST digit dataset. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://machinelearningmastery.com/how-to-develop-a-convolutional-neural-network-from-scratch-for-mnist-handwritten-digit-classification/"&gt;https://machinelearningmastery.com/how-to-develop-a-convolutional-neural-network-from-scratch-for-mnist-handwritten-digit-classification/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-facial-recognition-system" class="anchor"&gt;
  &lt;/a&gt;
  8. Facial Recognition System
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI model to detect who is the person in a given image.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/QSTnwsZj2yc"&gt;https://youtu.be/QSTnwsZj2yc&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-ai-plays-flappy-bird" class="anchor"&gt;
  &lt;/a&gt;
  9. AI Plays Flappy Bird
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI to play a classic game: Flappy Bird.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/MMxFDaIOHsE?list=PLzMcBGfZo4-lwGZWXz5Qgta_YNX3_vLS2"&gt;https://youtu.be/MMxFDaIOHsE?list=PLzMcBGfZo4-lwGZWXz5Qgta_YNX3_vLS2&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-ai-draw-numbers" class="anchor"&gt;
  &lt;/a&gt;
  10. AI Draw Numbers
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a GAN to draw numbers based on the MNIST digit dataset.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/"&gt;https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#11-fake-news-detector" class="anchor"&gt;
  &lt;/a&gt;
  11. Fake News Detector
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model that can detect if a piece of news is fake or real.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/advanced-python-project-detecting-fake-news/"&gt;https://data-flair.training/blogs/advanced-python-project-detecting-fake-news/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#12-colour-detector" class="anchor"&gt;
  &lt;/a&gt;
  12. Colour Detector
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model that can detect what colour is featured in a given image.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/project-in-python-colour-detection/"&gt;https://data-flair.training/blogs/project-in-python-colour-detection/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#13-traffic-signs-recognition-project" class="anchor"&gt;
  &lt;/a&gt;
  13. Traffic Signs Recognition Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI model that can classify different traffic lights.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/python-project-traffic-signs-recognition/"&gt;https://data-flair.training/blogs/python-project-traffic-signs-recognition/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#14-fifa-19-player-analysis" class="anchor"&gt;
  &lt;/a&gt;
  14. FIFA 19 Player Analysis
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Analyze FIFA 19 players using linear regression.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/nitindatta/fifa-in-depth-analysis-with-linear-regression"&gt;https://www.kaggle.com/nitindatta/fifa-in-depth-analysis-with-linear-regression&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#15-airplane-crashes-data-visualization-project" class="anchor"&gt;
  &lt;/a&gt;
  15. Airplane Crashes Data Visualization Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Visualize aeroplane crash data.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/ruslankl/airplane-crashes-data-visualization"&gt;https://www.kaggle.com/ruslankl/airplane-crashes-data-visualization&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#16-covid19-visualization-amp-prediction-project" class="anchor"&gt;
  &lt;/a&gt;
  16. COVID-19 Visualization &amp;amp; Prediction Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Visualize and predict COVID-19 cases.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/therealcyberlord/coronavirus-covid-19-visualization-prediction/"&gt;https://www.kaggle.com/therealcyberlord/coronavirus-covid-19-visualization-prediction/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#17-realtime-vehicle-detection-project" class="anchor"&gt;
  &lt;/a&gt;
  17. Real-time Vehicle Detection Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Detect cars in real-time using computer vision.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://dev.to/kalebu/how-to-perform-real-time-vehicle-detection-in-python-4i9h"&gt;https://dev.to/kalebu/how-to-perform-real-time-vehicle-detection-in-python-4i9h&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#18-ai-plays-footballsoccer" class="anchor"&gt;
  &lt;/a&gt;
  18. AI Plays Football/Soccer
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI to play football/soccer in the Google Football Environment.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/SWllbdcrKLI?list=PL3YDJVV_1t7sKR_ZrO1Ursa_c41I0ErzC"&gt;https://youtu.be/SWllbdcrKLI?list=PL3YDJVV_1t7sKR_ZrO1Ursa_c41I0ErzC&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#19-predict-student-test-scores" class="anchor"&gt;
  &lt;/a&gt;
  19. Predict Student Test Scores
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use student data to predict their end of year test scores with linear regression. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/45ryDIPHdGg?list=PLzMcBGfZo4-mP7qA9cagf68V06sko5otr"&gt;https://youtu.be/45ryDIPHdGg?list=PLzMcBGfZo4-mP7qA9cagf68V06sko5otr&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#20-cartoonify-an-image" class="anchor"&gt;
  &lt;/a&gt;
  20. Cartoonify an Image
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use machine learning to make the given image a cartoon.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/cartoonify-image-opencv-python/"&gt;https://data-flair.training/blogs/cartoonify-image-opencv-python/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#21-create-fake-faces" class="anchor"&gt;
  &lt;/a&gt;
  21. Create Fake Faces
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use a GAN model to create fake human faces. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/sayakdasgupta/fake-faces-with-dcgans"&gt;https://www.kaggle.com/sayakdasgupta/fake-faces-with-dcgans&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#22-mask-detector-project" class="anchor"&gt;
  &lt;/a&gt;
  22. Mask Detector Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a real-time mask detector project with Python.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/face-mask-detection-with-python/"&gt;https://data-flair.training/blogs/face-mask-detection-with-python/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#23-social-distancing-detector" class="anchor"&gt;
  &lt;/a&gt;
  23. Social Distancing Detector
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use computer vision to detect whether a group of people are social distancing.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.pyimagesearch.com/2020/06/01/opencv-social-distancing-detector/"&gt;https://www.pyimagesearch.com/2020/06/01/opencv-social-distancing-detector/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#24-handwriting-recognition" class="anchor"&gt;
  &lt;/a&gt;
  24. Handwriting Recognition
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to detect handwriting. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.pyimagesearch.com/2020/08/24/ocr-handwriting-recognition-with-opencv-keras-and-tensorflow/"&gt;https://www.pyimagesearch.com/2020/08/24/ocr-handwriting-recognition-with-opencv-keras-and-tensorflow/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#25-email-spam-detection" class="anchor"&gt;
  &lt;/a&gt;
  25. Email Spam Detection
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to detect whether an email is spam or not.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/cNLPt02RwF0"&gt;https://youtu.be/cNLPt02RwF0&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#26-bee-or-wasp" class="anchor"&gt;
  &lt;/a&gt;
  26. Bee or Wasp
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to detect whether the given image is a bee or a wasp.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/koshirosato/bee-or-wasp-base-line-using-resnet50"&gt;https://www.kaggle.com/koshirosato/bee-or-wasp-base-line-using-resnet50&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#27-christmas-gift-matching" class="anchor"&gt;
  &lt;/a&gt;
  27. Christmas Gift Matching
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI algorithm that maximizes happiness by pairing kids with toys they want.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/zfturbo/happiness-vs-gift-popularity-v2-0-89"&gt;https://www.kaggle.com/zfturbo/happiness-vs-gift-popularity-v2-0-89&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#28-text-generation" class="anchor"&gt;
  &lt;/a&gt;
  28. Text Generation
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an RNN model that generates Shakespeare like text. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.tensorflow.org/tutorials/text/text_generation"&gt;https://www.tensorflow.org/tutorials/text/text_generation&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#29-ai-plays-connect4" class="anchor"&gt;
  &lt;/a&gt;
  29. AI Plays Connect-4
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI which can play the Connect-4 game.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/8392NJjj8s0"&gt;https://youtu.be/8392NJjj8s0&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#30-checkers-ai" class="anchor"&gt;
  &lt;/a&gt;
  30. Checkers AI
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI which can play the Checkers game.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/RjdrFHEgV2o?list=PLzMcBGfZo4-myY28wdQuJDBi8pCt-GIj6"&gt;https://youtu.be/RjdrFHEgV2o?list=PLzMcBGfZo4-myY28wdQuJDBi8pCt-GIj6&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Let me know if you have started any of these projects and how it went in the comments! Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Henry&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Can you become a successful software developer without a CS degree? My opinion</title>
      <author>Natalia Venditto</author>
      <pubDate>Mon, 21 Dec 2020 07:56:38 +0000</pubDate>
      <link>https://dev.to/this-is-learning/can-you-become-a-successful-software-developer-without-a-cs-degree-my-opinion-27om</link>
      <guid>https://dev.to/this-is-learning/can-you-become-a-successful-software-developer-without-a-cs-degree-my-opinion-27om</guid>
      <description>&lt;p&gt;Last week I read a few tweets that really caught my attention. Most of them targeted the 'anti-academia' movement.&lt;/p&gt;

&lt;p&gt;It is not the first time I read some people are anything between skeptical to angry about those who say that you can have a successful career in tech without a CS degree, but these concrete tweets caught my attention because I never knew this particular 'anti-academia' movement existed, and I still have not come across a statement such as 'You should never go to the University!'.&lt;/p&gt;

&lt;p&gt;Although maybe such statements exist and are public out there even as tweets, they never reached me in my feed. Or I never read them. &lt;/p&gt;

&lt;p&gt;What I have read, unfortunately, are snark comments and dismissive remarks, ridiculing people who work in the tech industry without a CS degree, and saying things like "you can do websites, but cannot work on more complex stuff, like diagnose and disease detection software", or even remarks like "yeah, next thing is becoming a doctor without a CS degree. pffft!"&lt;/p&gt;

&lt;p&gt;As a successful software architect without a CS degree, I finally felt like it was a good time to share my opinion.&lt;/p&gt;

&lt;p&gt;After all, I have more than once encouraged people to transition from a different career background or no career background at all, to find new opportunities as developers. Just thinking that they may discouraged by a (sometimes) more privileged group of people for making a late-career choice, or for being unable to afford university education and deciding to get there following a different path, is heartbreaking to me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debunking-some-myths" class="anchor"&gt;
  &lt;/a&gt;
  Debunking some myths
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;First of all, I want to put things into perspective. People who become successful in tech, without a CS degree, are usually far from less intelligent, or too lazy to put the effort.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;People who become successful in tech without a CS degree, usually&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;but not always, have completed university education in another field&lt;/li&gt;
&lt;li&gt;always have spent an exponentially greater amount of time in self-teaching, including using online available resources and contributing to open-source communities, than those who do have a degree, before they get their first role in tech&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;People who have not attained a CS degree, but still have become successful in tech usually&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;but not always, have had to postpone or drop their education because of financial, health-related, or other personal reasons&lt;/li&gt;
&lt;li&gt;but not always, would've loved and would still love to complete their education, even when they're consolidated professionals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would say that in 90% of the cases if they would be given the chance, they would attempt at completing their university education and getting a CS degree, which is incompatible with being part of an 'anti-academia' movement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-it-better-to-have-a-computer-sciences-degree-than-not" class="anchor"&gt;
  &lt;/a&gt;
  How is it better to have a computer sciences degree than not?
&lt;/h2&gt;

&lt;p&gt;Let me elaborate my opinion. People who do have a university degree in computer sciences, while still studying, usually&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;learn foundational or low-level concepts in a structured way, which is very important to understand high-level concepts&lt;/li&gt;
&lt;li&gt;but not always, have access to a tutor or professor, to dissipate their doubts and help them apply the newly learned concepts&lt;/li&gt;
&lt;li&gt;but not always, do not need to spend personal time finding the right learning resources, since they're provided&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also once they've attained their degree, they usually&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;almost always have more opportunities to be hired, since lots of companies have it as a hard-requirement &lt;/li&gt;
&lt;li&gt;always are less prone to be immediately discarded by recruiters, upon sending their CV, for not meeting this particular requirement&lt;/li&gt;
&lt;li&gt;almost always have more career progression opportunities&lt;/li&gt;
&lt;li&gt;but not always, are paid more than their counterparts that do exactly the same job, but do not have the CS degree&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#can-we-compare-studying-to-be-a-doctor-to-studying-to-be-a-software-engineer" class="anchor"&gt;
  &lt;/a&gt;
  Can we compare studying to be a doctor to studying to be a software engineer?
&lt;/h2&gt;

&lt;p&gt;No. And why?&lt;/p&gt;

&lt;p&gt;One of my siblings is a doctor, so my opinions are shaped by my experience of living with her, as she was studying. In Uruguay people don't go to Campuses. They stay home while they study, especially if they live in the capital city, Montevideo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-talk-about-sources" class="anchor"&gt;
  &lt;/a&gt;
  Let's talk about sources
&lt;/h3&gt;

&lt;p&gt;The source of anatomy and pathologies knowledge for doctors, historically and from centuries, has always been actual, real, living and dead human bodies.  I will not share details on how those doctors close to me dissected human parts on the same table I was having my meals. Well, ok, I guess that's enough detail. And yes, that happened. Those body-parts, unique and ultimate source of knowledge to understand anatomy and pathologies, were obviously provisioned by the university. &lt;/p&gt;

&lt;p&gt;Let me begin by sharing with you my opinion that probably the doctors you would like being diagnosed and treated by if you had anything serious, are the ones that have the most amount of clinic practice and not those that are university professors, and rely almost only on theoretical knowledge.&lt;/p&gt;

&lt;p&gt;Clinic practice is obviously not something you can teach on youtube. It would be unethical because you would have to disclose private information about a human being. It is unlikely anyone wants to visit a doctor that streams on Twitch as they perform you a colonoscopy or explores your naked body. &lt;/p&gt;

&lt;p&gt;I know there are a couple of reality shows that feature this, but it is a very extreme exception.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Unlike the act of exploring a human patient, diagnosing them and treating them (which by the way also involves laboratories for analysis with expensive equipment not available to doctors at home while they Twitch, and prescriptions of law regulated medicines), building and diagnosing computer systems and programs in front of everyone else is a lot simpler, cheaper, and ethically acceptable.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do I think a person could become a good, self-trained doctor if all the bibliography used by doctors was open-sourced, made available from online repositories, and doctors live-streamed their practice with patients (and body-parts) and people put the same amount of time they sometimes put to become developers? Possibly. But my guess is that, because of the ethical implications and obvious other legal issues, that will never happen.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;However, even the most obscure and in-depth details about computer sciences, are available to everyone online, already.&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-or-tldr" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion or tl;dr
&lt;/h2&gt;

&lt;p&gt;Should you study at the University to learn computer sciences and get a degree? My humble opinion is that, if you can afford it, money-wise and time-wise, is: YES! Go for it!&lt;/p&gt;

&lt;p&gt;But if you did not have the chance, or don't see that chance for you in the future, should you desist from the dream of being a successful, self-taught software developer? The answer is: NO! Go for it! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>healthydebate</category>
      <category>career</category>
    </item>
    <item>
      <title>The JavaScript Event Loop Explained</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 21 Dec 2020 07:09:32 +0000</pubDate>
      <link>https://dev.to/alexdevero/the-javascript-event-loop-explained-4be5</link>
      <guid>https://dev.to/alexdevero/the-javascript-event-loop-explained-4be5</guid>
      <description>&lt;p&gt;The JavaScript event loop is one of the most important things to understand. It helps you understand how things work under the hood. In this tutorial, you will learn what JavaScript event loop is and how it works. You will also learn about a bit about call stack, web APIs and message queue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-blocks-of-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Building blocks of JavaScript
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are few fundamental building blocks. These blocks are &lt;a href="https://blog.alexdevero.com/memory-life-cycle-heap-stack-javascript/#the-memory-heap"&gt;memory heap&lt;/a&gt;, &lt;a href="https://blog.alexdevero.com/memory-life-cycle-heap-stack-javascript/#the-stack"&gt;stack&lt;/a&gt;, &lt;a href="https://blog.alexdevero.com/memory-life-cycle-heap-stack-javascript/#the-call-stack"&gt;call stack&lt;/a&gt;, &lt;a href="https://dev.tobrowser%20APIs"&gt;web APIs&lt;/a&gt;, message queue and event loop. The memory heap is a place where JavaScript stores objects and functions. The stack is for storing static data, such as primitive data types values.&lt;/p&gt;

&lt;p&gt;The call stack is a mechanism JavaScript uses to keep track of functions that needs to be executed. Web APIs are APIs built into your web browser. These APIs allow you to use features you could not otherwise. Some example are fetch API, geolocation API, WebGL API, Web Workers API and so on.&lt;/p&gt;

&lt;p&gt;These APIs are not part of the JavaScript language itself. They are interfaces built on top of the core JavaScript language. This is also why they are not available in all JavaScript environments. Another thing web APIs also handle are async methods such as the &lt;code&gt;setTimeout&lt;/code&gt; and also event. Now, about message queue and event loop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#message-queue" class="anchor"&gt;
  &lt;/a&gt;
  Message queue
&lt;/h2&gt;

&lt;p&gt;The message queue is basically a storage. It is a place where JavaScript keeps "messages" it needs to proces. Each of these messages are basically callback functions used with async functions, such as &lt;code&gt;setTimeout&lt;/code&gt;, and also events triggered by users. For example, clicks and keyboard events.&lt;/p&gt;

&lt;p&gt;When any of these async functions gets executed, or events happen, JavaScript will first send them to the call stack. From here, JavaScript will send each function or event to appropriate web API to handle it. Once the API does what it needs to do, it will send a message with associated callback function to the message queue.&lt;/p&gt;

&lt;p&gt;These messages are stored in message queue until the call stack is empty. When the call stack gets empty the first message in the queue, callback, will be pushed to the call stack. Call stack will execute that callback, and the code it contains.&lt;/p&gt;

&lt;p&gt;There is one important thing about message queue. The call stack follows the LIFO principle. This means that last function pushed to the call stack will be processed as the first one. Message queue doesn't follow this principle. In case of message queue, it is the first message, or callback, that will be processed as the first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-simple-example-of-how-message-queue-works" class="anchor"&gt;
  &lt;/a&gt;
  A simple example of how message queue works
&lt;/h3&gt;

&lt;p&gt;Let's demonstrate this on the &lt;code&gt;setTimeout&lt;/code&gt; method. When you use the &lt;code&gt;setTimeout&lt;/code&gt; method JavaScript will send it to the call stack that will execute it. Executing it will create new timer. This timer will be send to appropriate web API. This API will then start the countdown.&lt;/p&gt;

&lt;p&gt;When the countdown reaches zero, API will send the callback for the &lt;code&gt;setTimeout&lt;/code&gt; method to the message queue. The callback will wait in the message queue until the call stack is empty. When the call stack is empty, JavaScript will take the callback in the message queue and push it to the call stack, which will then execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Use setTimeout method to delay&lt;/span&gt;
&lt;span class="c1"&gt;// execution of some function&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Step 1:&lt;/span&gt;
&lt;span class="c1"&gt;// Add to call stack: setTimeout(function cb() { console.log('Hello.') }, 500)&lt;/span&gt;

&lt;span class="c1"&gt;// Call stack                                         //&lt;/span&gt;
&lt;span class="c1"&gt;// setTimeout(function cb() { console.log('Hello.') } //&lt;/span&gt;
&lt;span class="c1"&gt;//                                                    //&lt;/span&gt;

&lt;span class="c1"&gt;// Step 2:&lt;/span&gt;
&lt;span class="c1"&gt;// Send cb() to web API&lt;/span&gt;
&lt;span class="c1"&gt;// and remove setTimeout from call stack&lt;/span&gt;
&lt;span class="c1"&gt;// and create timer: 500&lt;/span&gt;

&lt;span class="c1"&gt;// Call stack //&lt;/span&gt;
&lt;span class="c1"&gt;//            //&lt;/span&gt;
&lt;span class="c1"&gt;//            //&lt;/span&gt;

&lt;span class="c1"&gt;// web API     //&lt;/span&gt;
&lt;span class="c1"&gt;// timer, cb() //&lt;/span&gt;
&lt;span class="c1"&gt;//             //&lt;/span&gt;

&lt;span class="c1"&gt;// Step 3:&lt;/span&gt;
&lt;span class="c1"&gt;// When timer is up, send cb() to message queue&lt;/span&gt;
&lt;span class="c1"&gt;// and remove it from web API&lt;/span&gt;

&lt;span class="c1"&gt;// web API     //&lt;/span&gt;
&lt;span class="c1"&gt;//             //&lt;/span&gt;
&lt;span class="c1"&gt;//             //&lt;/span&gt;

&lt;span class="c1"&gt;// message queue //&lt;/span&gt;
&lt;span class="c1"&gt;// cb()          //&lt;/span&gt;
&lt;span class="c1"&gt;//               //&lt;/span&gt;

&lt;span class="c1"&gt;// Step 4:&lt;/span&gt;
&lt;span class="c1"&gt;// When call stack is empty, send cb() to call stack&lt;/span&gt;
&lt;span class="c1"&gt;// and remove it from message queue&lt;/span&gt;

&lt;span class="c1"&gt;// message queue //&lt;/span&gt;
&lt;span class="c1"&gt;//               //&lt;/span&gt;
&lt;span class="c1"&gt;//               //&lt;/span&gt;

&lt;span class="c1"&gt;// Call stack //&lt;/span&gt;
&lt;span class="c1"&gt;// cb()       //&lt;/span&gt;
&lt;span class="c1"&gt;//            //&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#call-stack-message-queue-and-priorities" class="anchor"&gt;
  &lt;/a&gt;
  Call stack, message queue and priorities
&lt;/h2&gt;

&lt;p&gt;In JavaScript, both call stack and message queue have different priorities. The priority of call stack is higher than the priority of message queue. As a result, the message queue has to wait until the call stack is empty before it can push anything from the queue to the call stack.&lt;/p&gt;

&lt;p&gt;Only when the call stack is empty the message queue can push in the first message, or callback. When does this situation happen? The call stack will get empty when all function calls inside it, and call stacks of these calls, are executed. When this is happens, the call stack will be empty and available for message queue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#message-queue-processing-and-zero-delays" class="anchor"&gt;
  &lt;/a&gt;
  Message queue processing and zero delays
&lt;/h2&gt;

&lt;p&gt;Message queue can process only one message at the time. What's more, if message queue contains multiple messages each message has to be processed before any other message can. Processing of every message depends on the completion of the previous message. If one message takes more time to process other messages has to wait.&lt;/p&gt;

&lt;p&gt;This principle is called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Run-to-completion"&gt;run-to-completion&lt;/a&gt;. This has another implication called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Zero_delays"&gt;zero delays&lt;/a&gt;. Let's say you use &lt;code&gt;setTimeout&lt;/code&gt; method and set the delay to 0. The idea is that the callback passed into this timeout should be executed immediately. The reality is that this might not happen.&lt;/p&gt;

&lt;p&gt;As you know, message queue can process only one message at the time. Each message has to be completed before the queue can process another one. So, if you use &lt;code&gt;setTimeout&lt;/code&gt; with delay set to 0 its callback will be executed immediately only if it is the first message in the message queue. Otherwise, it will have to wait.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-javascript-event-loop" class="anchor"&gt;
  &lt;/a&gt;
  The JavaScript event loop
&lt;/h2&gt;

&lt;p&gt;This is how JavaScript handles async operations. This is how operations are passed between call stack, web APIs and message queue. Even though JavaScript itself is single-threaded it can do this because the web APIs run on separate threads. What has the JavaScript event loop to do with this?&lt;/p&gt;

&lt;p&gt;It is the JavaScript event loop what takes care of this cycle. It is the job of the JavaScript event loop to continuously check the call stack if it is empty or not. If it is empty, it will take the first message from the message queue and push it to the call stack.&lt;/p&gt;

&lt;p&gt;If the call stack is not empty, event loop will not let any message from the queue in. Instead, it will let the call stack process call inside it. Each of these cycles, or iterations, of the event loop is called "tick".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-note-about-promises-and-async-functions" class="anchor"&gt;
  &lt;/a&gt;
  A note about promises and async functions
&lt;/h2&gt;

&lt;p&gt;Async methods such as &lt;code&gt;setTimeout&lt;/code&gt; and events are handled by web APIs and message queue. This doesn't apply to &lt;a href="https://blog.alexdevero.com/javascript-async-await/#async-functions"&gt;async functions&lt;/a&gt; and &lt;a href="https://blog.alexdevero.com/javascript-promises/"&gt;promises&lt;/a&gt;. Async functions and promises are handled by a different queue. This queue is called the job queue. Another name for this queue is microtask queue.&lt;/p&gt;

&lt;p&gt;So, when you use promise, or async function, and &lt;code&gt;setTimeout&lt;/code&gt; they will be handled differently. First, promises and async functions will be handled by the job queue. The &lt;code&gt;setTimeout&lt;/code&gt; will be handled by the message queue. Second, job queue has a higher priority than message queue. This has one important implication.&lt;/p&gt;

&lt;p&gt;Let's say you have a promise and also a &lt;code&gt;setTimeout&lt;/code&gt;. The promise resolves immediately and that &lt;code&gt;setTimeout&lt;/code&gt; has delay set to 0. So, it should also execute +/- immediately. To make this more interesting, let's also add another regular function. This function will be at the end. What will be the result of this?&lt;/p&gt;

&lt;p&gt;The first function that will be executed will be the regular we put as the last one. As next will be executed any callback for the promise. The callback for the &lt;code&gt;setTimeout&lt;/code&gt; will be executed as the last. It doesn't matter that the &lt;code&gt;setTimeout&lt;/code&gt; method is placed above the promise in the code.&lt;/p&gt;

&lt;p&gt;What does matter is that the job queue has a higher priority than message queue. As a result, when there is a race between promise and &lt;code&gt;setTimeout&lt;/code&gt; it is the promise who will be the winner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFuncOne&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myFuncOne in setTimeout.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create another function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFuncTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myFuncTwo after the promise.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Delay the myFuncOne() by 0 seconds&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFuncOne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create a promise and resolve it immediately&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message from a promise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// Call the myFuncTwo()&lt;/span&gt;
&lt;span class="nx"&gt;myFuncTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'myFuncTwo after the promise.'&lt;/span&gt;
&lt;span class="c1"&gt;// 'Message from a promise'&lt;/span&gt;
&lt;span class="c1"&gt;// 'myFuncOne in setTimeout.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-the-javascript-event-loop-explained" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: The JavaScript event loop explained
&lt;/h2&gt;

&lt;p&gt;Understanding how the JavaScript event loop helps you understand how JavaScript works under the hood. To understand this you also need to understand topics such as call stack, web APIs and message queue. I hope that this tutorial helped you understand all these topics and, most importantly, the JavaScript event loop.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
