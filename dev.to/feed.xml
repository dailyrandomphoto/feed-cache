<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>⚡ Superb Comprehensions ⚡In Python Using List and Sets </title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Sun, 16 May 2021 01:57:25 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/superb-comprehensions-in-python-using-list-and-sets-1gnd</link>
      <guid>https://dev.to/sudarshansb143/superb-comprehensions-in-python-using-list-and-sets-1gnd</guid>
      <description>&lt;p&gt;📢 TL:DR :&lt;/p&gt;

&lt;p&gt;Dealing with data structures is not a big deal if you are using python, isn't it ?&lt;/p&gt;

&lt;p&gt;If it is a big deal, then take look at conversation.&lt;br&gt;
Here, we have 2 &lt;strong&gt;noob coders&lt;/strong&gt; .&lt;br&gt;
😎 Chintu and  😷Mintu. 😷 Mintu is technical client in the room and Chintu is A-K-A a developer. Hence, 😎Chintu is implementing the requirements of his client, which are changing very fast (as we all know).&lt;/p&gt;



&lt;p&gt;[ M : Mintu, C: Chintu]&lt;/p&gt;

&lt;p&gt;😷 M : I want to generate a list of even numbers from 1 to N, but not with classical for.... in loop with range() and all that. Instead with something different&lt;/p&gt;

&lt;p&gt;😎 C : Ok ! this is my try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : Ooops ! I want square of each number, once they are in a list....&lt;/p&gt;

&lt;p&gt;😎 C : No worries&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : Yahh... It will be pretty nice if it contains original numbers also &lt;/p&gt;

&lt;p&gt;😎 C : Ok ! Here we go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : Awesome !!! but, now I want dictionary of original and squared number instead of nested lists&lt;/p&gt;

&lt;p&gt;😎 C : Fine ! I have this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : Great ! but, now I think all should be in a SET, but  by using your previous code &lt;/p&gt;

&lt;p&gt;😎 C : Ok Fine ! see this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M :  Cool ! But, now I want iterator instead of the whole list at once &lt;/p&gt;

&lt;p&gt;😎 C : OK Sir !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : can you explain why we should prefer ** list iterator **  instead of the normal list ?&lt;/p&gt;

&lt;p&gt;😎 C : Yup ! List iterator are kind of generator object in nature, which are used to comprehensively yield the values when we call the next() on the object of iterator. The real benefit of creating generator is, that they don't consume memory before actual yielding / producing the value. This saves a lot of runtime memory and gives out programme a free space to use.&lt;/p&gt;

&lt;p&gt;Application of this would be like, if we have a database transaction which requires millions of rows to complete the process. In this scenario, if we loaded the data using normal data structure like list, then CPU have to pre-load whole data before actual using it and then proceed further, instead we can use generator / iterator object which yields the value at runtime once anyone demanded.&lt;/p&gt;




&lt;p&gt;😷 M : Nice ! but can you create this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZmamr0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hwffzg0vfzm9y5uiyvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZmamr0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hwffzg0vfzm9y5uiyvj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😎 C : Are you kidding me ! It is so simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🤗 M : Kinda cool ! I declare you are not &lt;strong&gt;NOOB&lt;/strong&gt; Now&lt;/p&gt;




&lt;p&gt;🚀 Final Thoughts :&lt;/p&gt;

&lt;p&gt;This are some comprehensions which anyone can use in their day to day programming usage. &lt;/p&gt;

&lt;p&gt;This makes our makes our code more readable and more concise. Although, it is every individual's choice about preferring or not preferring the comprehensions. Here, I am putting my simple try for the comprehension.&lt;/p&gt;

&lt;p&gt;Thanks for Reading 🙏🙏 &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>PHP 8 c'est du sérieux ? Devriez-vous l'apprendre ?</title>
      <author> </author>
      <pubDate>Sun, 16 May 2021 01:54:51 +0000</pubDate>
      <link>https://dev.to/ericcodeur/php-8-c-est-du-serieux-devriez-vous-l-apprendre-jnn</link>
      <guid>https://dev.to/ericcodeur/php-8-c-est-du-serieux-devriez-vous-l-apprendre-jnn</guid>
      <description>&lt;h2&gt;Qu'est ce que PHP&lt;/h2&gt;

&lt;p&gt;PHP est un langage de programmation généraliste et Open Source, spécialement conçu pour le développement d'applications web.&lt;/p&gt;

&lt;h2&gt;PHP 8 c'est sérieux?&lt;/h2&gt;

&lt;p&gt;PHP est le language de programmation serveur le plus utilisé présentement sur le web. Un peu moins de 80% des sites webs ont du code PHP. C'est énorme! PHP n'est pas près de disparaitre.&lt;/p&gt;

&lt;h2&gt;Pourquoi PHP vs les autres&lt;/h2&gt;

&lt;p&gt;Ce points est plus subjectif mais pour moi PHP est un language mature, solide et complet. PHP est présentement à la version 8 et contient tout ce qu'un language moderne doit avoir.&lt;/p&gt;

&lt;p&gt;PHP a beaucoup évolué dans les dernières années. L'ajout de l'orienté object et plusieurs autres concepts moderne ont changé dramatiquement la façon de coder et la qualité des applications web PHP.&lt;/p&gt;

&lt;p&gt;PHP est maintenant utilisé par des millions de sites web. Incluant Facebook, Wordpress, Wikipedia, Tumblr, Slack et bien d'autres.&lt;/p&gt;

&lt;p&gt;La communauté PHP est très grande, très dynamique et inclusive. Tout le monde est le bienvenue. Il n'y a pas de snobisme, c'est une vrai communauté d'entraide.&lt;/p&gt;

&lt;p&gt;PHP peut également compter sur des frameworks de haute qualité comme Symfony et Laravel (et plusieurs autres). Ces frameworks permettent de développer des applications web rapidement et surement.&lt;/p&gt;

&lt;p&gt;Par exemple, Laravel permet de développer une application web en PHP moderne orienté object. &lt;/p&gt;

&lt;p&gt;Laravel vous fournis des outils et librairies qui ont faites leurs preuves et qui peuvent vous aider a coder des applications de A à Z, rapidement et efficacement.&lt;/p&gt;

&lt;p&gt;Laravel permet également de créer des applications web full stack. Autant frontend que backend. Ce qui permet de faciliter et d'accélérer le développement d'une application complète.&lt;/p&gt;

&lt;p&gt;Bref, avec PHP vous pouvez réaliser de petits, gros et très gros projets. PHP peut gérer quelques clics par jour ou des millions de clics par jours.&lt;/p&gt;

&lt;p&gt;Enfin, oui, PHP c'est du sérieux et oui PHP vaut la peine d'être utilisé et maitrisé.&lt;/p&gt;

&lt;h2&gt;Vous aimeriez apprendre PHP?&lt;/h2&gt;

&lt;p&gt;Dans les prochains jours, je vais vous faire découvrir les concepts de base en PHP et chaque jours on apprendra des notions supplémentaires jusqu'aux concept avancés.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui. Demain l'aventure commence avec encore et toujours plus de PHP. Pour ne rien manqué vous pouvez me suivre sur dev.to en cliquant Follow&lt;/p&gt;

&lt;p&gt;Suivez-moi également sur Twitter: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>french</category>
      <category>php</category>
      <category>laravel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Configure Your Laravel Queues with AWS SQS</title>
      <author>techdurjoy</author>
      <pubDate>Sun, 16 May 2021 00:33:59 +0000</pubDate>
      <link>https://dev.to/techdurjoy/configure-your-laravel-queues-with-aws-sqs-7mc</link>
      <guid>https://dev.to/techdurjoy/configure-your-laravel-queues-with-aws-sqs-7mc</guid>
      <description>&lt;p&gt;Introduction&lt;br&gt;
Recently, I had to migrate my queue driver on a project from Redis to SQS and for some weird reason the information provided on the official Laravel Queues documentation didn't do justice to this and I couldn't find an article online that could help, that's why I'm writing this, with the hope that you don't spend two hours of your Saturday morning figuring stuff that should have been documented. I'd try to keep this article as brief as possible, I'd attach links to other articles that explain some steps so I can focus on the important parts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;An existing Laravel application&lt;br&gt;
An AWS account&lt;br&gt;
An understanding of Laravel queues&lt;br&gt;
Some AWS knowledge&lt;/p&gt;

&lt;p&gt;If you use Laravel Horizon to manage your queues, you'd be making some modifications to your horizon.php file. For each worker defined, change the queue connection from redis which is the default to env('QUEUE_CONNECTION')&lt;/p&gt;

&lt;p&gt;Out of the box, Laravel dispatches jobs to the default queue, therefore, your first queue should be named default on SQS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codecheef.org/article/configure-your-laravel-queues-with-aws-sqs"&gt;Configure Your Laravel Queues with AWS SQS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>aws</category>
      <category>sqs</category>
    </item>
    <item>
      <title>5 Data Engineering Project Ideas To Put On Your Resume</title>
      <author>SeattleDataGuy</author>
      <pubDate>Sun, 16 May 2021 00:20:49 +0000</pubDate>
      <link>https://dev.to/seattledataguy/5-project-ideas-for-data-engineering-to-put-on-your-resume-m47</link>
      <guid>https://dev.to/seattledataguy/5-project-ideas-for-data-engineering-to-put-on-your-resume-m47</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@sigmund?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sigmund&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/projects?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All signs point towards an auspicious future for data engineering. &lt;/p&gt;

&lt;p&gt;Dice's 2020 tech jobs report cites Data Engineering as the fastest growing job in 2020. Increasing by a staggering 50%, while Data Science roles only increased by 10%. You can rest assured that the influx of data engineering will not regress anytime soon. To bolster this supposition, the International Data Group (IDG) predicts that the five year compound growth rate (CAGR) of data utilization from 2021 to 2024 will outweigh the total data creation spanning the entirety of the last thirty years. Yes, you heard that correctly, thirty years, dating back far before the origins of both FaceBook, YouTube and Amazon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PPoSspiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AqJKIJHLMVRTtrFbz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PPoSspiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AqJKIJHLMVRTtrFbz" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.idg.com/"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are still not sold on the prospect of data engineering, let's look into earning potential. As of May 9th, 2021, with over eight thousand salaries reported, Indeed indicates that data engineers make $10,000 more per year than data scientists. Additionally, the benefits of data engineering do not stop at pay alone, a study from The New Stack indicates that there is less competition for data engineering roles than other tech positions.&lt;/p&gt;

&lt;p&gt;The New Stack found that for LinkedIn and Indeed job posts, for every open data science position there were 4.76 viable applicants, while data engineering roles experience only 2.53 suitable competitors per job opening. Nearly, doubling the chances of obtaining a data engineering role for applicable candidates.&lt;/p&gt;

&lt;p&gt;We have established that data engineering is a well-paying position, in one of the fastest-growing tech fields, with relatively low competition. What is not to love?&lt;/p&gt;

&lt;p&gt;However, merely graduating from a relative field alone will not qualify you for a data engineering position. &lt;/p&gt;

&lt;p&gt;You'll need related real-world experience to fine-tune your hard skills. Concerning your future job search, one of the best ways to develop and convey these skills is through akin data engineering portfolio projects. In this article, we will review five potential project ideas with data sources. Before we cover the projects, you need to know the skills you should include in potential projects. For that, we will explore the most in-demand skillsets for data engineers.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-should-you-look-for-in-a-data-engineering-project"&gt;
  &lt;/a&gt;
  What should you look for in a data engineering project?
&lt;/h3&gt;

&lt;p&gt;When you look to build a data engineering project there are a few key areas you should focus on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Multiple Types Of Data Sources(APIs, Webpages, CSVs, JSON, etc)&lt;/li&gt;
&lt;li&gt;  Data Ingestion&lt;/li&gt;
&lt;li&gt;  Data Storage&lt;/li&gt;
&lt;li&gt;  Data Visualization (So you have something to show for your efforts).&lt;/li&gt;
&lt;li&gt;  Use Of Multiple Tools (Even if some tools may not be the perfect solution, why not experiment with Kinesis or Spark to become familiar with them?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these areas will help you as a data engineer improve your skills and understand the data pipeline as a whole. In particular, creating some sort of end visual, especially if it involves creating a basic website to host it can be a fun way to show your projects off.&lt;/p&gt;

&lt;p&gt;But enough talk, let's dig into some ideas for your data engineering projects.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#scrape-stock-and-twitter-data-using-python-kafka-and%C2%A0spark"&gt;
  &lt;/a&gt;
  Scrape Stock And Twitter Data Using Python, Kafka and Spark
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/shafiab/HashtagCashtag"&gt;Project 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the expansion of cryptocurrency exchanges and the rise and fall of GameStop stock, stocks have become a hot issue, gaining substantial outsider interest.&lt;/p&gt;

&lt;p&gt;If you have also developed a zeal for trading markets I would suggest developing a project similar to CashTag, a project that was developed by an engineer currently working at Reddit. The goal of this project was to develop a "Big data pipeline for user sentiment analysis on the US stock market". In short, this project scrapes social media with the intent of predicting how people may feel about particular stocks in real-time. Below is a representation of the workflow used in this project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOzUgos8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AhPVcyhJgoPBYmarZ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOzUgos8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AhPVcyhJgoPBYmarZ" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/shafiab/HashtagCashtag"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This project is well documented and can be used as a base of inspiration for your project, which you can appropriate to accommodate your interest.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#scrape-realestate-properties-with-python-and-create-a-dashboard-with%C2%A0it"&gt;
  &lt;/a&gt;
  Scrape Real-Estate Properties With Python And Create A Dashboard With It
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.sspaeti.com/blog/data-engineering-project-in-twenty-minutes/"&gt;Project 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To engage with some new technologies, you should try a project like sspaeti's 20 minute data engineering project. The goal of this project is to develop a tool that can be used to optimize your choice of house/rental property.&lt;/p&gt;

&lt;p&gt;This project collects data using web scraping tools such as Beautiful Soup and Scrapy. Creating Python scripts that interact with HTML is something that you should be exposed to as a data engineer and web scraping is a great way to learn. Interestingly this project covers both Delta Lake and Kubernetes, which are hot topics at the moment. &lt;br&gt;
Lastly, no good data engineering project is complete without having a clean UI to show your work. This project dives into data visualization with Superset and everything is orchestrated together with Dagster. The sheer variety of tools used in this project make it perfect for a portfolio.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#focus-on-analytics-with-stackoverflow-data"&gt;
  &lt;/a&gt;
  Focus On Analytics With StackOverflow Data
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://hoffa.medium.com/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd#.qm2s97y25"&gt;Project Idea 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What if you could analyze all or at least some of the public Github repos. What questions would you ask?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/u/279fe54c149a"&gt;Felipe Hoffa&lt;/a&gt; has already done some work on this type of project where he &lt;a href="https://hoffa.medium.com/400-000-github-repositories-1-billion-files-14-terabytes-of-code-spaces-or-tabs-7cfe0b5dd7fd#.qm2s97y25"&gt;analyzed terabytes of data over several articles&lt;/a&gt; from the Google BigQuery data collection.&lt;/p&gt;

&lt;p&gt;But with so much data, there is a lot of opportunities to work on some form of analytical project. Felipe, for example, analyzed concepts like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Tabs vs Spaces?&lt;/li&gt;
&lt;li&gt;  Which programming languages do developers commit to during the weekend?&lt;/li&gt;
&lt;li&gt;  Analyzing GitHub Repos for comments and questions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are so many different angles you could take on this project and it provides, you, the data engineer a lot of creativity in how you think about data. &lt;/p&gt;

&lt;p&gt;You can analyze the source code of 2.8 million projects.&lt;/p&gt;

&lt;p&gt;Maybe you can write an article like &lt;a href="https://empirical-software.engineering/blog/so-snippets-in-gh-projects"&gt;What StackOverflow Code Snippets Can We Find In GitHub?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, this project idea should also point out that there are plenty of interesting data sets you can use out there that exist on platforms like &lt;a href="https://cloud.google.com/public-datasets"&gt;GCP&lt;/a&gt; and &lt;a href="https://registry.opendata.aws/"&gt;AWS&lt;/a&gt;. So if you don't feel like scraping data from an API, you can always work on your analytical chops on the hundreds of data sets these two cloud providers to offer.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#instead-of-stocks-predict-politics-and-financial-events-with-predictit"&gt;
  &lt;/a&gt;
  Instead Of Stocks Predict Politics And Financial Events With PredictIt
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://predictit.freshdesk.com/support/solutions/articles/12000001878-does-predictit-make-market-data-available-via-an-api-"&gt;Project 4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extending outside of stock prediction, PredictIt makes market data available via an API. If you are unfamiliar with PredictIt, it is a New Zealand-based online prediction market that offers exchanges for global political and financial events. You may be familiar with the reported betting odds of the last election cycle, when these numbers are reported they are citing markets similar to Predictit. &lt;/p&gt;

&lt;p&gt;Using their live API data you can cross reference spikes with news potentially, tying in scraped data from social media. Like the CashTag project previously discussed. You could find a way to tie online political chatter to a dollar value.&lt;/p&gt;

&lt;p&gt;Of course, why stop there? Why not try to create a data storage system using something like BigQuery and add in other data like tweets, news, and so on?&lt;/p&gt;

&lt;p&gt;Then spend time normalizing that data and trying to create tables that represent connections between all these disparate data sources. &lt;/p&gt;

&lt;p&gt;Now that would be a fun and challenging data engineering project.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#scraping-inflation-data-and-developing-a-model-with-data-from-commoncrawl"&gt;
  &lt;/a&gt;
  Scraping Inflation Data And Developing A Model With Data From CommonCrawl
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/uhussain/WebCrawlerForOnlineInflation"&gt;Project 5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another interesting project was conducted by Dr. Usama Hussain, where he measured the rate of inflation by tracking the change of price of goods and services online. Considering that the BBC reports that the United States has seen the largest inflation rate since 2008, this is an important topic.&lt;/p&gt;

&lt;p&gt;In this project, the author used petabytes of web page data contained in the &lt;a href="https://commoncrawl.org/"&gt;Common Crawl&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I also think this is another great example of putting together and displaying a data engineering project. One of the challenges I often reference is how hard it can be to show off your data engineering work. &lt;/p&gt;

&lt;p&gt;But Dr. Hussain's project is documented in a way that shows off what work was done and the skills that he has, without having to dig into all of the code.&lt;/p&gt;

&lt;p&gt;Dr. Hussain outlines the data pipeline below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGZEle3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AEI_7pli1KS0oBUtw" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGZEle3G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2AEI_7pli1KS0oBUtw" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;When it comes to selecting a project, the best project is one that strikes a balance between the interest of industry and personal interest. Whether you like it or not, personal interest is conveyed through the topic you choose, so it is important to find a project that you like. If your interest included, stocks, real estate, politics, or some other niche category, you can use the projects listed above as a blueprint that can be applied to a topic of your interest.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you want to read more about data consulting, big data, and data science, then click below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=vtZba4pnGuQ"&gt;Building Your First Data Pipeline: How To Build A Task In Luigi Part 1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://seattledataguy.substack.com/p/greylock-vc-and-5-data-analytics"&gt;Greylock VC and 5 Data Analytics Companies It Invests In&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=X6-VNKe3XVM&amp;amp;t=6s"&gt;5 SQL Concepts You Need To Know Before Your Next Data Science Or Data Engineering Interview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/17-questions-you-need-to-ask-about-your-data-strategy/"&gt;How To Improve Your Data-Driven Strategy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://seattledataguy.substack.com/p/what-in-the-world-is-dremio-and-why"&gt;What In The World Is Dremio And Why Is It Valued At 1 Billion Dollars?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logitanalytics.com/5-mistakes-that-are-ruining-your-data-driven-strategy-and-costing-you/"&gt;Mistakes That Are Ruining Your Data-Driven Strategy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/5-great-libraries-manage-big-data-with-python/"&gt;5 Great Libraries To Manage Big Data With Python&lt;/a&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>career</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>Honeycomb, why are my service's requests so slow?!</title>
      <author>Shayde Nofziger</author>
      <pubDate>Sun, 16 May 2021 00:07:42 +0000</pubDate>
      <link>https://dev.to/shayde/honeycomb-in-action-why-are-my-service-s-requests-so-slow-516g</link>
      <guid>https://dev.to/shayde/honeycomb-in-action-why-are-my-service-s-requests-so-slow-516g</guid>
      <description>&lt;p&gt;&lt;a href="https://honeycomb.io"&gt;Honeycomb&lt;/a&gt; can be used to help identify the best "bang for your buck" in terms of time spent optimizing for performance.&lt;/p&gt;

&lt;p&gt;Suppose I have been asked to spend the next 2 sprints researching and contributing code changes and improvements to help increase service performance. The only information I have been given from customers is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Things run slowly right after I login during certain hours of the day."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Needle....haystack...right?&lt;/p&gt;

&lt;p&gt;Okay, at least I have &lt;em&gt;some&lt;/em&gt; starting points. Honeycomb should still allow me to take this broad symptom of slow requests and investigate further. Trace data includes timestamps and duration fields, which should allow me to get some information about the requests my system sees over time. Our customers seem to notice this most directly after signing in. I know that after signing in, and anytime a user accesses common parts of the platform, their account information is queried. So I think I at least know what microservice to drill into.&lt;/p&gt;

&lt;p&gt;Honeycomb can help me drill into even more granular data with a simple query. I construct a query for all of the events my service emits for each API request. I then group them by the endpoint name and the status code result, and create a visualization of the 95th percentile of request duration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pbHKjvi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4t6tglojjeegwfur0ry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pbHKjvi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4t6tglojjeegwfur0ry.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This query tells me that the &lt;code&gt;GET .../profile&lt;/code&gt; endpoint responds to 95% of requests in ~910ms or less. Knowing that this is a heavily used endpoint, and compared to the &lt;code&gt;GET .../connectioninfo&lt;/code&gt; endpoint that sees similar traffic but at a 100x faster duration, it is apparent that this route is pretty slow compared to other requests to my system. Further querying tells me the average response duration for the &lt;code&gt;/profile&lt;/code&gt; endpoint over that same course of time was 473ms. Additionally, &lt;code&gt;P50(duration_ms)&lt;/code&gt; (half of all requests) was 363ms.&lt;/p&gt;

&lt;p&gt;This endpoint seems like it may be a good candidate for further inspection -- it looks like it is used heavily and that kind of response rate could definitely be a source a slowness for end-users.&lt;/p&gt;

&lt;p&gt;Hmm...&lt;br&gt;
How can I learn more?&lt;br&gt;
What specifically about that endpoint is so slow?&lt;br&gt;
Do I need to set up some local performance testing to figure it out?&lt;/p&gt;

&lt;p&gt;Of course not!&lt;/p&gt;

&lt;p&gt;Honeycomb has all of the info I need in the trace data graphs for the requests I am curious about:&lt;/p&gt;

&lt;p&gt;From the query results view, I can drill further into the data by hovering over the &lt;code&gt;name&lt;/code&gt; column's value I am interested in (&lt;code&gt;GET .../profile&lt;/code&gt;), clicking the &lt;code&gt;...&lt;/code&gt; menu that appears, and selecting the option to show only results where &lt;code&gt;name = GET .../profile&lt;/code&gt; and &lt;code&gt;http.status_code = 200&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is where I can put my detective hat on and start doing the interrogating I talked about in &lt;a href="https://dev.to/shayde/everyday-observability-with-honeycomb-4o3h"&gt;my initial post&lt;/a&gt; -- now that I have specific data and a good question to ask ("what is causing the most heavily endpoint of my service, &lt;code&gt;/profile&lt;/code&gt;, to be so damn slow?!") I can use Honeycomb to start looking for patterns and the source of the slowness. From my query above, I can see that the pattern is pretty typical during the weekdays -- I narrow my search to 24-48 hours of the work week by highlighting that time range and clicking the "+" button that appears to zoom in my search window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XZ73_oMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54dpnij84bdj4vm8rk2m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZ73_oMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54dpnij84bdj4vm8rk2m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dOiWQXh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0nce86dibdkccrx0fpi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dOiWQXh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0nce86dibdkccrx0fpi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh okay -- at this level I can see that the data is pretty normal aside from a few outliers during off-peak times. I'm mostly curious about peak-usage and typical requests, so I'm going to zoom in even further to the peak usage-time of that endpoint over a 1-2 hour duration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDvnbsUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0gf0v1lzxibwk64hsg8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDvnbsUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0gf0v1lzxibwk64hsg8.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome -- that's much more manageable and more "typical" of the usage scenario I'm concerned with. Once I have drilled in enough and crafted the query for the request data I am interested in examining, I am going to start poking at the trace data for these requests and see if I can't find some common patterns.&lt;/p&gt;

&lt;p&gt;I can access trace data for requests a few different ways. The &lt;em&gt;Traces&lt;/em&gt; tab in Honeycomb will give me the 10 slowest traces that Honeycomb has for the time range of my query. I can also head on over to the &lt;em&gt;Raw Data&lt;/em&gt; tab and click on the &lt;code&gt;trace.trace_id&lt;/code&gt; column value for any event I am curious about. Clicking into a trace shows me a time-series waterfall visualization of the request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvxEsYgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er75h7iaxwf62ieql77e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvxEsYgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er75h7iaxwf62ieql77e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The trace above shows a typical request to the &lt;code&gt;/profile&lt;/code&gt; endpoint and helps me understand potential areas for improvement. Keep in mind, I have not even touched the code that runs this service and I have already identified key areas of it that may be in need of attention. If I analyze the trace and walk through the codebase alongside it, I can get context about the external requests the original one generated (these are notated in blue on the screenshot above).&lt;/p&gt;

&lt;p&gt;Armed with the request data and its context in code, I can quickly discern what the slow-up is. It turns out, the &lt;code&gt;/profile&lt;/code&gt; endpoint is very popular in our platform -- it can be called dozens of times in quick succession as a user navigates to different areas of our applications. This in-and-of-itself is not problematic, however, every time the user's &lt;code&gt;/profile&lt;/code&gt; endpoint is called I can see in code and tell from the trace that data changed with a low-frequency (user first/last name, email, avatar image url, user permissions and rights to products on the platform, etc.) is being retrieved from various downstream services and ultimately resulting in multiple database executions.&lt;/p&gt;

&lt;p&gt;When the same data is being queried by and for the same user multiple times in quick succession, this results in more resource usage by the server, slower response times, and greater database traffic / spend -- especially in PaaS database models that charge on a request transaction throughput basis.&lt;/p&gt;

&lt;p&gt;The highest-trafficked endpoint in our service also happens to be reading the same rarely-changed data from a database for each user, oftentimes in rapid succession (several times in 10 seconds). This is a ripe candidate for a smart in-memory caching mechanism.&lt;/p&gt;

&lt;p&gt;Armed with the request duration data, I am now able to tell a full story and pinpoint a worthwhile time to spend investing in performance for my service, all without doing any sort of local performance testing, or even looking at the logic in the code.&lt;/p&gt;

&lt;p&gt;Allow the observability data to give you the data and answers you are looking for. It can help identify specific the microservices, endpoints, and areas of the codebase to look at so you are ultimately making the best use of your time and efforts, especially in companies and enterprises with hundreds of microservices supporting a large platform.&lt;/p&gt;

&lt;p&gt;In my next post, I'll show how Honeycomb and observability/trace data can be useful tools to help implement smart caching mechanisms to balance service performance and cost. I'll also highlight some other features in Honeycomb, such as Boards and Derived Columns - stay tuned!&lt;/p&gt;

&lt;p&gt;Learn more, straight from the Hive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.honeycomb.io/working-with-your-data/tracing/"&gt;Explore trace data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.honeycomb.io/working-with-your-data/rawdatatable/"&gt;View your raw data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.honeycomb.io/working-with-your-data/heatmaps/"&gt;Creating and using Heatmaps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>performance</category>
      <category>observability</category>
      <category>honeycomb</category>
      <category>o11y</category>
    </item>
    <item>
      <title>Top 10 JavaScript Interview Questions</title>
      <author>Eftykhar Rahman</author>
      <pubDate>Sat, 15 May 2021 22:55:27 +0000</pubDate>
      <link>https://dev.to/iamraufu/top-10-javascript-interview-questions-393l</link>
      <guid>https://dev.to/iamraufu/top-10-javascript-interview-questions-393l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-what-are-the-data%C2%A0types"&gt;
  &lt;/a&gt;
  1 What are the data types?
&lt;/h1&gt;

&lt;p&gt;Supported by JavaScript we have primitive data types like &lt;strong&gt;string&lt;/strong&gt;, &lt;strong&gt;boolean&lt;/strong&gt;, &lt;strong&gt;number&lt;/strong&gt;, &lt;strong&gt;bigint&lt;/strong&gt; which can represent &lt;em&gt;integers&lt;/em&gt; with arbitrary precision and define null symbols we also have &lt;strong&gt;objects&lt;/strong&gt; and &lt;strong&gt;functions&lt;/strong&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-is-javascript-a-casesensitive-language"&gt;
  &lt;/a&gt;
  2 Is JavaScript a case-sensitive language?
&lt;/h1&gt;

&lt;p&gt;Yes, JavaScript is a &lt;strong&gt;case-sensitive&lt;/strong&gt; language. The &lt;em&gt;keywords&lt;/em&gt;, &lt;em&gt;variables&lt;/em&gt;, &lt;em&gt;function names&lt;/em&gt;, and any other &lt;em&gt;identifiers&lt;/em&gt; must always be typed with a consistent capitalization of letters. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-how-can-you-create-an%C2%A0object"&gt;
  &lt;/a&gt;
  3 How can you create an object?
&lt;/h1&gt;

&lt;p&gt;JavaScript supports object concepts very well. You can create an object using the object literal as follows in order to create an object use &lt;strong&gt;curly braces&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-how-can-you-create-an-array-in-javascript"&gt;
  &lt;/a&gt;
  4 How can you create an array in JavaScript?
&lt;/h1&gt;

&lt;p&gt;In order to create an array use &lt;strong&gt;square brackets&lt;/strong&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-whats-the-difference-between-anonymous-and-name-functions-in-javascript"&gt;
  &lt;/a&gt;
  5 What's the difference between anonymous and name functions in javascript?
&lt;/h1&gt;

&lt;p&gt;We can define function declaration by using the function keyword and provide the name of the function. When we assign the function to a variable using function keyword and anonymous function where we do not provide the name of the function which makes it a little bit more difficult to call them from other places.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-how-does-the-type-of-operator%C2%A0work"&gt;
  &lt;/a&gt;
  6 How does the type of operator work?
&lt;/h1&gt;

&lt;p&gt;The type of operator is used to get the data type of its operand, the operand can be either a litterer or a data structure such as a variable, a function, or an object. An arrow operator that is placed before its single operand which can be of any type its value is a string indicating the type of the operand.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-how-to-create-a-cookie-using-javascript"&gt;
  &lt;/a&gt;
  7 How to create a cookie using JavaScript?
&lt;/h1&gt;

&lt;p&gt;The simplest way to create a cookie is to assign a string value to a document.cookie object. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-whats-the-difference-between-double-and-triple-equal-operators"&gt;
  &lt;/a&gt;
  8 what's the difference between double and triple equal operators?
&lt;/h1&gt;

&lt;p&gt;JavaScript has two visually similar yet very different ways to test equality. You can test equality with double or triple. Equal sign here is the difference. When using a triple equals in javascript we are testing for strict equality which means that both type and the value we are comparing have to be the same. When we use a double equal sign javascript will try to convert values to a like type and then compare the values for that reason usually you would rather use a triple equal sign.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-what-are-the-different-kinds-of-browser%C2%A0storage"&gt;
  &lt;/a&gt;
  9 What are the different kinds of browser storage?
&lt;/h1&gt;

&lt;p&gt;If you open developer tools and navigate to the application tab you can see which storages are available in a chrome web browser. So except for the cookies which you already know you can use local storage or session storage and some browsers but not all of them support internal databases like &lt;em&gt;index database&lt;/em&gt; and &lt;em&gt;Web SQL&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-what-is-the-difference-between-null-and-undefined"&gt;
  &lt;/a&gt;
  10 what is the difference between null and undefined?
&lt;/h1&gt;

&lt;p&gt;In a nutshell, undefined typical means that the variable has been declared but not defined where null is assigned value and it means nothing other than that. Both null and undefined are primitives and they are both falsely values.&lt;/p&gt;

&lt;p&gt;So these were the top 10 interview questions that you might hear on your very first interview for a junior developer role.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Cómo conseguí trabajo en Gitlab desde Nicaragua</title>
      <author>Luis Mejia</author>
      <pubDate>Sat, 15 May 2021 22:32:55 +0000</pubDate>
      <link>https://dev.to/luismejiadev/como-consegui-trabajo-en-gitlab-desde-nicaragua-4351</link>
      <guid>https://dev.to/luismejiadev/como-consegui-trabajo-en-gitlab-desde-nicaragua-4351</guid>
      <description>&lt;p&gt;¡Hola a todos! 👋&lt;/p&gt;

&lt;p&gt;Hablé sobre mi proceso de contratación en GitLab en mi publicación &lt;a href="https://dev.to/luismejiadev/como-es-una-entrevista-en-gitlab-un-vistazo-al-proceso-de-contratacion-iad"&gt;anterior&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Esta vez les hablaré sobre: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El camino que he recorrido en estos 11 años de profesión&lt;/li&gt;
&lt;li&gt;Cómo conseguí trabajar 100% remoto&lt;/li&gt;
&lt;li&gt;Cómo me preparé para hacerlo realidad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¡Espero que les guste, y que de alguna forma les sea de utilidad al definir su propio camino NINJA 😃!&lt;/p&gt;

&lt;p&gt;¡Empecemos entonces!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;spoiler alert&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46fcf2LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bitxrtnboa09y9hsuqm1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46fcf2LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bitxrtnboa09y9hsuqm1.jpg" alt="Ingrediente Secreto"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qui%C3%A9n-soy"&gt;
  &lt;/a&gt;
  ¿Quién Soy?
&lt;/h2&gt;

&lt;p&gt;Soy Luis Mejia, nací y vivo en Nicaragua, estoy casado y tengo dos hijas.&lt;/p&gt;

&lt;p&gt;Tengo 11 años de experiencia como Software Developer. Trabajo de forma remota para Gitlab como Backend Engineer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#de-donde-vengo"&gt;
  &lt;/a&gt;
  ¿De donde vengo?
&lt;/h2&gt;

&lt;p&gt;Me gustaría hablarles rápidamente de mis orígenes, y quiero citar el párrafo de un libro que me describe a la perfección:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Siendo –como ustedes saben— el hijo de un humilde comerciante, uno de una gran familia, sin esperanza de una herencia, y no siendo dotado –como ustedes francamente lo han dicho— con talento o inteligencia especiales, decidí que si iba a conseguir lo que deseaba, se iba a requerir tiempo y estudio. &lt;br&gt;
Arkad - El hombre más rico de Babilonia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nací y vivo en Nicaragua, el 2do país más pobre de la región después de Haití según estudio del Banco Mundial publicado en 2019. Soy el 4to hijo de una familia con clase socioeconómica media-baja, mi papá creció en pobreza extrema en una comunidad rural, trabajando desde niño y mi madre no completó sus estudios de secundaria ya que trabajaba vendiendo lotería ambulante.&lt;/p&gt;

&lt;p&gt;Aunque crecí en un hogar humilde, tuve los mayores privilegios: salud, un techo, comida, estudio, y el amor de mis padres.&lt;/p&gt;

&lt;p&gt;De mis padres obtuve un gran ejemplo y El ingrediente secreto para tener éxito:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perseverancia, Trabajo duro, mejora continua, humildad y honestidad&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mi-talento-especial"&gt;
  &lt;/a&gt;
  Mi talento especial
&lt;/h2&gt;

&lt;p&gt;Nunca tuve un talento especial, pero ya de adulto me dí cuenta de algo. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mi talento especial es: el trabajo duro y la persistencia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Todos los logros que he alcanzado en mi vida, los he conseguido siguiendo estos 4 pasos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Definir un objetivo alcanzable&lt;/li&gt;
&lt;li&gt;Hacer un plan para alcanzarlo&lt;/li&gt;
&lt;li&gt;Trabajar duro en ese plan hasta conseguirlo.&lt;/li&gt;
&lt;li&gt;Repetir&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Acá cabe mencionar que &lt;strong&gt;he tenido mucha suerte&lt;/strong&gt; por no haber sufrido eventos catastróficos que afectaran la salud o la vida de mis seres queridos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mis-primeros-trabajos-locales"&gt;
  &lt;/a&gt;
  Mis primeros trabajos locales
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;2010 - 2015&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pasant%C3%ADa"&gt;
  &lt;/a&gt;
  Pasantía
&lt;/h3&gt;

&lt;p&gt;Antes de empezar a trabajar con equipos remotos, inicié mi camino en empresas locales.&lt;/p&gt;

&lt;p&gt;En 2010 empecé a trabajar en unas pasantías recomendadas por la universidad, me pagaban aproximadamente $2 al día, sólo como ayuda para la comida, y mis principales actividades eran instalar antivirus McAfee y configurar cuentas de correo de Outlook.&lt;/p&gt;

&lt;p&gt;Aunque no lo crean, estaba feliz en esas condiciones, porque mi principal objetivo era conseguir un trabajo en mi carrera.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mi-primer-trabajo"&gt;
  &lt;/a&gt;
  Mi primer trabajo
&lt;/h3&gt;

&lt;p&gt;Después del proyecto de instalación de antivirus, me puse a buscar trabajo y me costó varios meses encontrar.  &lt;/p&gt;

&lt;p&gt;Conseguí mi primer trabajo en una empresa local, en el área de informática, estaba a cargo de 3 personas y mi principal función era desarrollar los sistemas internos (facturación,  inventario, contabilidad, etc.)  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#otros-trabajos-locales"&gt;
  &lt;/a&gt;
  Otros trabajos locales
&lt;/h3&gt;

&lt;p&gt;También trabajé como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Desarrollador Web:&lt;/strong&gt; Desarrollo con python, django, gunicorn, nginx, supervisor, postgresql, RoR, rspec.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inspector de Riesgos Tecnológicos:&lt;/strong&gt; Era Responsable de: Auditorías de TI a todas las entidades financieras en Nicaragua.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#trabajo-con-equipos-remotos"&gt;
  &lt;/a&gt;
  Trabajo con Equipos Remotos
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;2015 - 2018&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En esta etapa trabajé de forma mixta, remoto y en oficina. aprendi mucho de negocio, ya que trabajé de cerca con equipos de diseño, marketing y negocio distribuidos hispanohablantes en centro américa y proveedores técnicos de México, Argentina y España.&lt;/p&gt;

&lt;p&gt;Era responsable de un sistema que procesaba 20 millones de transacciones por día en 6 países, distribuidas en 24 servidores en la nube Ubuntu Linux.&lt;/p&gt;

&lt;p&gt;El stack tecnológico que utilicé incluía python / django, Docker-Compose, Kannel, Postgresql, Redis, RabbitMQ, Ningx, supervisor, Jenkins, AngularJS, ReactJS, ionic. &lt;/p&gt;

&lt;p&gt;Aunque estaba aprendiendo bastante en mi trabajo actual, yo quería estar 100% remoto para poder estar cerca de mi familia. Quería un horario flexible y poder trabajar desde casa todo el tiempo. Además quería trabajar 100% hablando inglés.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2018 - 2021&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En esta etapa trabajé como contratista independiente, 100% remoto y 100% en inglés. Esta ha sido la etapa de mi carrera profesional más intensa, llegué a trabajar por 3 meses hasta 100 horas a las semana (lo cual no es sostenible y te lleva al burnout).&lt;/p&gt;

&lt;p&gt;Algunos proyectos en los que trabajé fueron:&lt;/p&gt;

&lt;p&gt;● SaaS ecommerce con crypto (~ 50.000 usuarios): Ruby on Rails, postgresql, aws, redis, rabbitmq.&lt;/p&gt;

&lt;p&gt;● SaaS de email marketing con recomendaciones usando Machine Learning (~66 millones de suscriptores de correo electrónico): Ruby on Rails, Vue.js, postgresql, sidekiq, cloud66, redis, rspec, rubocop.&lt;/p&gt;

&lt;p&gt;● Plataforma crowdsourcing de hackers de sombrero blanco (más de 70 millones de solicitudes por día) en 80 países: Ruby on Rails, React.js, postgresql, sidekiq, redis, datadog, rspec, rubocop, docker, aws &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Acá una nota especial a un reconocimiento de la empresa por mi buena actitud y mi voluntad de ayudar otros miembros del equipo más allá de mis tareas diarias. Este ha sido un logro muy significativo en mi carrera porque tenía años intentando mejorar mis habilidades sociales.&lt;/p&gt;

&lt;p&gt;● Plataforma marketplace para apps y herramientas digitales: Python, Django, Vue.js, zapier, postgresql, docker, AWS, Elasticsearch, Kibana, Logstash, Grafana.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#c%C3%B3mo-consegu%C3%AD-trabajar-100-remoto"&gt;
  &lt;/a&gt;
  Cómo conseguí trabajar 100% remoto
&lt;/h1&gt;

&lt;p&gt;A continuación distintos métodos para encontrar trabajo remoto que me funcionaron:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Comunidades: La primera oportunidad la conseguí a través de dos amigos de la comunidad de Python Nicaragua.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Portales de trabajo remoto: Después de 10 meses postulándome y haciendo entrevistas de trabajos usando weworkremotely.com, conseguí trabajo con una empresa Australiana. Fueron 10 meses de rechazos tras rechazos, a veces varias veces a la semana.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linkedin: Gracias a Linkedin pude contactar con Gitlab e iniciar el proceso de reclutamiento.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amigos/Colegas: En diversas ocasiones me han recomendado amigos o colegas que han trabajado conmigo o sáben que sería un valioso recurso para la empresa.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#c%C3%B3mo-me-prepar%C3%A9-para-hacerlo-realidad"&gt;
  &lt;/a&gt;
  Cómo me preparé para hacerlo realidad
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Mejorar mi Inglés&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yo tomé mi primer curso de inglés a mis 15 años. Al empezar tan tarde, puedo decir que el miedo a hablar en inglés fue uno de mis principales obstáculos en mi carrera.&lt;/p&gt;

&lt;p&gt;Un amigo me recomendó a un puesto de trabajo, pero no dominaba el inglés lo suficiente y fuí descartado del proceso.&lt;/p&gt;

&lt;p&gt;Me sentí tan mal, que decidí registrarme en clases nocturnas avanzadas de inglés en una academia local. &lt;/p&gt;

&lt;p&gt;También decidí viajar a Estados unidos por primera vez a una conferencia 100% inglés, Pycon 2018&lt;/p&gt;

&lt;p&gt;Para complementar también he tomado clases con tutores particulares, donde me enfoco en fortalecer áreas específicas, por ejemplo, discusiones técnicas en videollamada.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aprender Ruby on Rails&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Después de más de 5 años de trabajo en Python, aprender la sintáxis y funcionamiento medio de Rails me tomó poco tiempo y en 3 meses ya había entregado mi primer proyecto exitoso. Aunque me gusta más python y Django, aprendí Rails ya que existen excelentes oportunidades de trabajo internacionales remotos. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Profundizar tus habilidades técnicas y mejores prácticas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si has elegido una tecnología en la cuál especializarte. Te recomiendo aprender a profundidad cómo funciona.&lt;/p&gt;

&lt;p&gt;Mi consejo es partir de lo general a lo específico. Iniciar con un Web Framework, construir un sitio web, e ir profundizando en cómo funcionan, cuáles son las mejores prácticas de dicha tecnología, etc.&lt;/p&gt;

&lt;p&gt;Para Ruby on Rails, recomiendo estudiar las reglas de estilo de Rubocop, pruebas unitarias con rspec, y estudiar cómo funciona metaprogramming con Ruby.&lt;/p&gt;

&lt;p&gt;También debes hacer lo mismo para el gestor de base de datos. En mi caso, postgres, aprender cómo analizar las consultas SQL para mejorar el desempeño, cómo usar indices parciales, common table expressions, vistas materializadas, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trabajar en proyectos remotos grandes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;El tamaño Sí importa. Si quieres trabajar para empresas medianas y grandes, son importantes tus conocimientos y experiencias en plataformas e infraestructura escalable.&lt;/p&gt;

&lt;p&gt;Aunque yo había trabajado con plataformas de 20M y 70M de transacciones diarias. Para la escala de Gitlab esa cantidad no era suficiente, ya que ellos procesan miles de millones.&lt;/p&gt;

&lt;p&gt;Si tienes la oportunidad de elegir entre proyectos pequeños y proyectos grandes, los proyectos grandes tendrán más peso en tu experiencia si trabajas directamente con ellos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mejorar mi presencia en linea&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para este punto, pueden usar de checklist los consejos de mi &lt;a href="https://dev.to/luismejiadev/consejos-para-tu-cv-github-y-linkedin-3kka"&gt;publicación anterior&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mejorar habilidades blandas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Comunicación efectiva, habilidades de negociación, habilidad de liderazgo, storytelling, trabajo en equipo, definición de requerimientos, etc.&lt;/p&gt;

&lt;p&gt;Existen un sin número de habilidades a mejorar, por lo que les recomiendo buscar mucho contenido en linea para este punto.&lt;/p&gt;

&lt;p&gt;Algunos libros que recomiendo son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3tMszCN"&gt;Soft Skills: The Software Developer's Life Manual&lt;/a&gt; de John Sonmez&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3bmPI8A"&gt;Clean Coder, The: A Code of Conduct for Professional Programmers&lt;/a&gt; de Robert C. Martin&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3uJ9hjf"&gt;The Pragmatic Programmer, From Journeyman To Master&lt;/a&gt; de Andrew Hunt, David Thomas - Addison Wesley&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/33ASrHr"&gt;Never Split the Difference: Negotiating As If Your Life Depended On It&lt;/a&gt; de Chris Voss&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3hm6mcv"&gt;Scrum: The Art of Doing Twice the Work in Half the Time
&lt;/a&gt; de Jeff Sutherland&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Superar el miedo paralizante&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mi mayor consejo será superar el miedo paralizante que no te deja postularte a los trabajos que quieres.&lt;/p&gt;

&lt;p&gt;A varias personas nos enseñan de pequeños que está mal cometer errores, que no debemos fallar o equivocarnos. De adultos eso nos provoca una parálisis por miedo a fallar. Pero el mayor fracaso es no intenarlo del todo.&lt;/p&gt;

&lt;p&gt;Te recomiendo que, aunque tengas miedo, te acostumbres a fracasar como parte de tu proceso de éxito.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Movimiento y Mejora continua&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como &lt;strong&gt;dicen que dijo&lt;/strong&gt; John D. Rockefeller: "No tengas miedo de renunciar a lo bueno para ir por lo grandioso"&lt;/p&gt;

&lt;p&gt;Yo siempre he estado a favor de cambiar de trabajo después de &lt;strong&gt;X&lt;/strong&gt; cantidad de tiempo.&lt;/p&gt;

&lt;p&gt;Cambiar de trabajo nos ayuda haciendo crecer nuestros ingresos, contactos, experiencias, conocimientos, etc.&lt;/p&gt;

&lt;p&gt;Cuánto tiempo esperar ya es decisión propia y no está escrita en piedra, depende de cada situación. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalmente-mi-trabajo-en-gitlab"&gt;
  &lt;/a&gt;
  Finalmente: Mi trabajo en Gitlab
&lt;/h2&gt;

&lt;p&gt;Escribí sobre el proceso y mi experiencia en una &lt;a href="https://dev.to/luismejiadev/como-es-una-entrevista-en-gitlab-un-vistazo-al-proceso-de-contratacion-iad"&gt;publicación&lt;/a&gt; separada. Luego de dos meses y varias entrevistas, finalmente obtuve la oferta de GitLab.&lt;/p&gt;

&lt;p&gt;Gracias a las comunidades supe que era posible trabajar en Gitlab desde Nicaragua, y cuando me sentí con suficiente experiencia y conocimientos me decidí a postularme.&lt;/p&gt;

&lt;p&gt;Les recomiendo postularse a Gitlab cuando sientan que tienen varios años de experiencias como Senior, porque a la escala de Gitlab puede que nuestros conocimientos lleguén a nivel medio.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#y-listo"&gt;
  &lt;/a&gt;
  Y Listo 🎉🎉🎉
&lt;/h1&gt;

&lt;p&gt;Sé que habia mucho texto por leer, pero espero que entre tantas palabras, hayan encontrado algunos consejos o guías, que les ayuden en su propio camino.&lt;/p&gt;

&lt;p&gt;Para concluir les dejo estos 5 pasos que para mí te llevan al éxito:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Definir lo que significa el éxito para tí&lt;/li&gt;
&lt;li&gt;Ignorar la definición de éxito de los demás&lt;/li&gt;
&lt;li&gt;Enfocar tu energía y recursos en los pequeños pasos para lograr tu éxito.&lt;/li&gt;
&lt;li&gt;Saber cuándo detenerte, incluso si queda incompleto.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Muchas gracias por leer hasta el final!!! &lt;/p&gt;

&lt;p&gt;Recuerden seguirme en &lt;a href="https://twitter.com/luismejiadev"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gitlab</category>
      <category>spanish</category>
      <category>dev</category>
      <category>remotejobs</category>
    </item>
    <item>
      <title>Lending some color to Tokei Code Analyzer</title>
      <author>Rachael Wright-Munn</author>
      <pubDate>Sat, 15 May 2021 21:52:32 +0000</pubDate>
      <link>https://dev.to/newrelic/lending-some-color-to-tokei-code-analyzer-pib</link>
      <guid>https://dev.to/newrelic/lending-some-color-to-tokei-code-analyzer-pib</guid>
      <description>&lt;p&gt;Time for another open-source adventure! We’ll be joined by &lt;a href="https://twitter.com/maxjacobson"&gt;Max Jacobson&lt;/a&gt; as we visit the Rust cli-tool &lt;a href="https://github.com/XAMPPRocky/tokei"&gt;Tokei&lt;/a&gt;. Tokei generates statistics around your code and language usage. For example, &lt;a href="https://www.chael.codes/2021/04/07/tokei-open-source.html"&gt;chael.codes&lt;/a&gt; looks like: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q2WIZTEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.chael.codes/assets/img/posts/Tokei-no-color.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q2WIZTEp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.chael.codes/assets/img/posts/Tokei-no-color.JPG" alt="tokei code analysis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Forem, the repo behind therelicans.com and dev.to, looks like this: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLzB9usZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.chael.codes/assets/img/posts/tokei-forem-no-color.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLzB9usZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.chael.codes/assets/img/posts/tokei-forem-no-color.JPG" alt="tokei code analysis of Forem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’re going to pick up &lt;a href="https://github.com/XAMPPRocky/tokei/issues/419"&gt;an issue&lt;/a&gt; with a lot of discussion that hasn’t been touched in 10 months that I personally like. Those screenshots before weren’t very engaging, right? Let’s add some lovely color to Tokei’s terminal output!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are some requirements listed out in the issue above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It must look good in light and dark mode terminals&lt;/li&gt;
&lt;li&gt;A crate should manage colorizing the output&lt;/li&gt;
&lt;li&gt;A color flag should manage color output &lt;code&gt;--color (always|auto|never)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;thick rows === should be bold and the thin rows — dimmed&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think it’d look nice to give all the languages a cyan color, and emphasize the subtotals.&lt;/p&gt;

&lt;p&gt;First step is identifying how we’ll cover color output, and the issue points us to &lt;a href="https://crates.io/crates/colored"&gt;colored&lt;/a&gt; which is based on a Ruby gem of &lt;a href="https://github.com/defunkt/colored"&gt;the same name&lt;/a&gt;. Usage is very straightforward. &lt;code&gt;println!("Hello, {}!", "world".green().bold())&lt;/code&gt; will use the terminal’s colors, and bold the text. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fE3Jk9Qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.chael.codes/assets/img/posts/terminal-color.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fE3Jk9Qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.chael.codes/assets/img/posts/terminal-color.JPG" alt="the world in hello, world is green and bold"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that “cyan” or “green” may not always be cyan or green, they’re just roles in your terminal color scheme.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, it’s time to think about how and where to output these colors. Tokei implements a printer interface in &lt;a href="https://github.com/XAMPPRocky/tokei/blob/611de1fc7b33027b918e97127c67825cc7408273/src/cli_utils.rs"&gt;cli_utils.rs&lt;/a&gt; which is where I found the &lt;a href="https://github.com/XAMPPRocky/tokei/blob/611de1fc7b33027b918e97127c67825cc7408273/src/cli_utils.rs#L150-L164"&gt;headers!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With some lovely colors and style implemented in Tokei, it’s time to think about those command line args and turning off color. Some people (like other computers) prefer not to have color. I think we handle this in &lt;a href="https://github.com/XAMPPRocky/tokei/blob/611de1fc7b33027b918e97127c67825cc7408273/src/cli.rs#L10-L26"&gt;cli.rs&lt;/a&gt;. &lt;a href="https://docs.rs/colored/2.0.0/colored/control/struct.ShouldColorize.html"&gt;ShouldColorize&lt;/a&gt; respects environment variables like NOCOLOR and CLICOLOR, but flags seem helpful too. We should document this regardless.&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/XAMPPRocky/tokei/pull/751"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Add Color to Tokei
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#751&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/ChaelCodes"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9fVC3HSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/8124558%3Fv%3D4" alt="ChaelCodes avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/ChaelCodes"&gt;ChaelCodes&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/XAMPPRocky/tokei/pull/751"&gt;&lt;time&gt;Apr 09, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;closes #419
Use the colored crate to add some additional color to Tokei.
Colored will respect settings like CLICOLOR_FORCE and NO_COLOR.
It will also use the configured terminal theme's blue.&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Old&lt;/th&gt;
&lt;th&gt;New&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://user-images.githubusercontent.com/8124558/114241125-b05c2c80-9956-11eb-957d-ab21cbb0ec10.PNG" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMSR4Yxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8124558/114241125-b05c2c80-9956-11eb-957d-ab21cbb0ec10.PNG" alt="old tokei"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://user-images.githubusercontent.com/8124558/114241115-a9351e80-9956-11eb-883e-2687e518f045.PNG" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPQvbpYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8124558/114241115-a9351e80-9956-11eb-883e-2687e518f045.PNG" alt="tokei color"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://user-images.githubusercontent.com/8124558/114241140-b5b97700-9956-11eb-92e5-4c3ab7578ba1.PNG" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--apd6j7rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8124558/114241140-b5b97700-9956-11eb-92e5-4c3ab7578ba1.PNG" alt="tokei bright no color"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://user-images.githubusercontent.com/8124558/114241144-b8b46780-9956-11eb-997f-6030a1a687f3.PNG" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l5iX7hEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/8124558/114241144-b8b46780-9956-11eb-997f-6030a1a687f3.PNG" alt="Tokei color bright"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/XAMPPRocky/tokei/pull/751"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>rust</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Bloomly, a new full-stack project to manage your content online</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Sat, 15 May 2021 21:10:12 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/bloomly-a-new-full-stack-project-to-manage-your-content-online-43gb</link>
      <guid>https://dev.to/pjeziorowski/bloomly-a-new-full-stack-project-to-manage-your-content-online-43gb</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/pjeziorowski/365-days-of-blogging-challenge-or-i-transfer-1000-to-your-bank-account-5dj9"&gt;previous post&lt;/a&gt;, I announced that I start my &lt;strong&gt;365 days of blogging challenge&lt;/strong&gt;. I also released a &lt;a href="https://dev.to/pjeziorowski/how-i-publish-articles-to-all-developer-platforms-and-my-private-blog-in-one-shot-38aj"&gt;mini CLI tool&lt;/a&gt; that publishes articles to all the major developer blogging platforms (dev.to, hashnode, medium) with one command.&lt;/p&gt;

&lt;p&gt;The tool lacks some features, though, and I saw that people have the same problem as I have - they need a centralized place to manage their articles or avoid publishing their content manually on multiple sites. &lt;strong&gt;Automating stuff saves time&lt;/strong&gt;...&lt;/p&gt;

&lt;p&gt;This is why I decided to help them (and myself) by creating a service that allows you to write your articles, publish them, and manage them on all the previously mentioned platforms in one place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pain-to-solve"&gt;
  &lt;/a&gt;
  Pain to solve
&lt;/h2&gt;

&lt;p&gt;In general, I want to create a tool that will &lt;strong&gt;reduce the friction and effort you need to put in to create and distribute your content as a developer&lt;/strong&gt;. In the future, it should also help you &lt;strong&gt;reach more people and let you analyze what works best&lt;/strong&gt; and what your audience like to read about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;The MVP will cover writing articles and integrations with all the platforms (publishing, updating, and deleting articles). It also covers all the basics like signups, creating projects and adding collaborators.&lt;/p&gt;

&lt;p&gt;Next steps I have in my mind if the project gains traction or if I find it helpful to my blogging journey:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;displaying article statistics from all platforms in one place&lt;/li&gt;
&lt;li&gt;generating article covers, adjusting stuff best for the given platform (e.g. cover sizes), in general - reducing the effort of publishing&lt;/li&gt;
&lt;li&gt;marketing - integrations with Twitter, LinkedIn, Instagram, Facebook, to help you announce to the world that your articles are published&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech stack
&lt;/h2&gt;

&lt;p&gt;To quickly build the backend and GraphQL API, I decided to go with &lt;a href="https://hasura.io/"&gt;Hasura&lt;/a&gt;. It's not the only backend component - to perform custom business logic, I need a separate microservice or serverless functions that Hasura will call on certain events. For this, I decided to go with Golang and a great &lt;a href="https://echo.labstack.com/"&gt;Echo HTTP framework&lt;/a&gt;. I'm still thinking, though, if I should use Node.js, as Hasura provides some excellent tooling that helps you generate code for your serverless functions.&lt;/p&gt;

&lt;p&gt;For the frontend - React.js with &lt;a href="https://nextjs.org/"&gt;Next&lt;/a&gt; and &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;. I've been a fan of those technologies since their humble beginnings, so the choice here was pretty easy for me.&lt;/p&gt;

&lt;p&gt;For deploying and hosting the app I'll use &lt;a href="https://www.qovery.com/"&gt;Qovery&lt;/a&gt; - it's a startup that aims to provide great developer experience in deploying and building full-stack applications in the cloud. For disclosure - I'm building this platform during my working hours :P.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#progress"&gt;
  &lt;/a&gt;
  Progress
&lt;/h2&gt;

&lt;p&gt;I've just started today coding the backend part - most of the MVP API and data modelling is done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IjKMc4wJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g02jpn1dup0906wev390.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IjKMc4wJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g02jpn1dup0906wev390.png" alt="MVP Query API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I still need to implement the custom actions (interactions with APIs of the publishing platforms) in the Golang microservice. When it's done, I'll jump into coding the frontend part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collaborators-are-welcome"&gt;
  &lt;/a&gt;
  Collaborators are welcome
&lt;/h2&gt;

&lt;p&gt;I can do everything by myself, but it would be much more pleasant to work in a group, so if you are interested in building this kind of project, or you feel the pain that it aims to solve, feel free to reach out to me - we can build it together. Backend, frontend, UI/UX designers - everyone's help would come in handy! Just leave a comment or &lt;a href="https://twitter.com/PJeziorowski"&gt;find me @ Twitter&lt;/a&gt; :).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leave-your-feedback-and-feature-ideas"&gt;
  &lt;/a&gt;
  Leave your feedback and feature ideas
&lt;/h2&gt;

&lt;p&gt;If you have any feedback or an idea that I could integrate into this project, feel free to leave a comment or &lt;a href="https://twitter.com/PJeziorowski"&gt;reach out to me @ Twitter&lt;/a&gt;! &lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>go</category>
      <category>react</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Arel Notes</title>
      <author>Konnor Rogers</author>
      <pubDate>Sat, 15 May 2021 21:09:08 +0000</pubDate>
      <link>https://dev.to/paramagicdev/arel-notes-hf0</link>
      <guid>https://dev.to/paramagicdev/arel-notes-hf0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#notes-from-railsconf-2014"&gt;
  &lt;/a&gt;
  Notes from RailsConf 2014
&lt;/h1&gt;

&lt;p&gt;Link to talk: &lt;a href="https://www.youtube.com/watch?v=ShPAxNcLm3o"&gt;https://www.youtube.com/watch?v=ShPAxNcLm3o&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-arel"&gt;
  &lt;/a&gt;
  What is Arel?
&lt;/h2&gt;

&lt;p&gt;Arel stands for: "A Relational Algebra"&lt;/p&gt;

&lt;p&gt;In actuality, Arel is an AST (Abstract Syntax Tree) parser&lt;br&gt;
that takes Ruby code and turns it into SQL syntax. Arel knows nothing about your tables or database. Its purely a Query Builder that uses Ruby to talk to ActiveRecord.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#arel-helpers"&gt;
  &lt;/a&gt;
  Arel Helpers
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/camertron/arel-helpers"&gt;https://github.com/camertron/arel-helpers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do they do?&lt;/p&gt;

&lt;p&gt;They reduce the verbosity of Arel syntax.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# using ActiveRecord&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# using bare Arel&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# using Arel Helpers.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-are-terminal-methods"&gt;
  &lt;/a&gt;
  What are Terminal methods
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt; 
&lt;span class="c1"&gt;# =&amp;gt; NoMethodError: undefined method `to_sql' for 107:Integer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;#count&lt;/code&gt; is a "Terminal Method" meaning it will "terminate" the SQL chain and not allow for continuous chaining.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-functions"&gt;
  &lt;/a&gt;
  Adding functions
&lt;/h2&gt;

&lt;p&gt;Lets say you need to add a function thats not part of the Arel functions IE: non-standard SQL methods that may vary from database to database.&lt;/p&gt;

&lt;p&gt;Heres how that would happen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Nodes&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NamedFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"LENGTH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"length"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT LENGTH('posts', 'text') AS length from 'posts'&lt;/span&gt;

&lt;span class="c1"&gt;## To reduce verbosity&lt;/span&gt;

&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Nodes&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;NamedFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"LENGTH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"length"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT LENGTH('posts', 'text') AS length from 'posts'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arel-star"&gt;
  &lt;/a&gt;
  Arel Star!
&lt;/h2&gt;

&lt;p&gt;Substitute &lt;code&gt;"*"&lt;/code&gt; with &lt;code&gt;Arel.star&lt;/code&gt; !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT * from 'posts'&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT * from 'posts'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#select-from"&gt;
  &lt;/a&gt;
  Select From
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT id FROM SELECT id, text FROM 'posts'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.ast&lt;/code&gt; will give you the constructed AST for a given Arel function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where"&gt;
  &lt;/a&gt;
  Where
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt; &lt;span class="c1"&gt;# using ActiveRecord&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt; &lt;span class="c1"&gt;# Using Arel&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"title != 'Arel is Cool'"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# Using AR&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* from 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE (title != 'Arel is Cool')&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;not_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt; 
&lt;span class="c1"&gt;# Using Arel&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* from 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'title' != 'Arel is Cool'&lt;/span&gt;


&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;not_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts.title' IS NOT NULL&lt;/span&gt;

&lt;span class="c1"&gt;# Greater than&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:visitors&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'visitors' &amp;gt; 250&lt;/span&gt;

&lt;span class="c1"&gt;# Less than&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:visitors&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'visitors' &amp;lt; 250&lt;/span&gt;

&lt;span class="c1"&gt;# Greater than or equal to&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:visitors&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;gteq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'visitors' &amp;gt;= 250&lt;/span&gt;

&lt;span class="c1"&gt;# Less than or equal to&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:visitors&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;lteq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'visitors' &amp;lt;= 250&lt;/span&gt;

&lt;span class="c1"&gt;# Chaining AND + OR&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE (&lt;/span&gt;
&lt;span class="c1"&gt;#    'posts'.'title' = 'Arel is Cool' &lt;/span&gt;
&lt;span class="c1"&gt;#     AND&lt;/span&gt;
&lt;span class="c1"&gt;#     ('posts'.'id' = 22 OR 'posts'.'id' = 23)&lt;/span&gt;
&lt;span class="c1"&gt;#    )&lt;/span&gt;

&lt;span class="c1"&gt;# Using IN&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE (&lt;/span&gt;
&lt;span class="c1"&gt;#     'posts'.'title' = 'Arel is Cool' &lt;/span&gt;
&lt;span class="c1"&gt;#     AND&lt;/span&gt;
&lt;span class="c1"&gt;#     'posts'.'id' IN (22, 23)&lt;/span&gt;
&lt;span class="c1"&gt;#    )&lt;/span&gt;

&lt;span class="c1"&gt;# Using our NamedFunction&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="no"&gt;NamedFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"LENGTH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:slug&lt;/span&gt;&lt;span class="p"&gt;]]).&lt;/span&gt;&lt;span class="nf"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.'title' = 'Arel is Cool' AND&lt;/span&gt;
&lt;span class="c1"&gt;#    LENGTH('posts'.'slug') &amp;gt; 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-joins"&gt;
  &lt;/a&gt;
  Using joins
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;We'll assume the following setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:post&lt;/span&gt;
  &lt;span class="n"&gt;has_one&lt;/span&gt; &lt;span class="ss"&gt;:author&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:comment&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-it"&gt;
  &lt;/a&gt;
  Using it
&lt;/h3&gt;

&lt;p&gt;To use a regular &lt;code&gt;INNER JOIN&lt;/code&gt; you would do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:comment_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join_sources&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use an &lt;code&gt;OUTER JOIN&lt;/code&gt; you would do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;OuterJoin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:comment_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join_sources&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cleaning-up-with-arelhelpers"&gt;
  &lt;/a&gt;
  Cleaning up with ArelHelpers
&lt;/h3&gt;

&lt;p&gt;To clean up the above code we can use ArelHelpers &lt;code&gt;#join_association&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ArelHelpers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;JoinAssociation&lt;/span&gt;

&lt;span class="c1"&gt;# INNER JOIN&lt;/span&gt;
&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;join_association&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;

&lt;span class="c1"&gt;# OUTER JOIN&lt;/span&gt;
&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;join_association&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;OuterJoin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#joinassociation-block"&gt;
  &lt;/a&gt;
  join_association block
&lt;/h2&gt;

&lt;p&gt;Join associations can also yield a block and we can use that block to further specify join conditions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;join_association&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;assoc_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;join_conds&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
     &lt;span class="n"&gt;join_conds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;lteq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#join-tables"&gt;
  &lt;/a&gt;
  Join Tables
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h4&gt;

&lt;p&gt;Given the following setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Course&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_and_belongs_to_many&lt;/span&gt; &lt;span class="ss"&gt;:teachers&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Teacher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_and_belongs_to_many&lt;/span&gt; &lt;span class="ss"&gt;:courses&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 possibilities:&lt;/p&gt;

&lt;p&gt;A teacher can teach many courses&lt;br&gt;
A course can have many teachers&lt;/p&gt;

&lt;p&gt;This means there are 3 tables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Courses table&lt;/li&gt;
&lt;li&gt;Teachers table&lt;/li&gt;
&lt;li&gt;CoursesTeachers table
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; courses&lt;/span&gt;
&lt;span class="no"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; teachers&lt;/span&gt;

&lt;span class="c1"&gt;# ??? No model for courses_teacher join table. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To create a join_table you would do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;courses_teachers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:courses_teachers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the above variable we can then construct the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses_teachers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:course_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses_teachers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:teacher_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join_sources&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#order"&gt;
  &lt;/a&gt;
  Order
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Using ActiveRecord&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse_order&lt;/span&gt;

&lt;span class="c1"&gt;# Using Arel&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;asc&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in"&gt;
  &lt;/a&gt;
  IN
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ast&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#like-queries-with-matches"&gt;
  &lt;/a&gt;
  Like Queries with Matches
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%arel%"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'phrases'.* from 'phrases'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE ('phrases'.'key' LIKE x'256172656c25')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#query-builder-pattern"&gt;
  &lt;/a&gt;
  Query Builder Pattern
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QueryBuilder&lt;/span&gt;
  &lt;span class="c1"&gt;# https://ruby-doc.org/stdlib-2.7.3/libdoc/forwardable/rdoc/Forwardable.html&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;Forwardable&lt;/span&gt;
  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:query&lt;/span&gt;
  &lt;span class="n"&gt;def_delegators&lt;/span&gt; &lt;span class="ss"&gt;:@query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:to_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:to_sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:each&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;protected&lt;/span&gt;

  &lt;span class="c1"&gt;# instantiates a new class and allow chaining.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-it"&gt;
  &lt;/a&gt;
  Using it
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;with_title_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;PostQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_title_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stimulus_reflex"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;with_comments_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usernames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;comments: :author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usernames&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;PostQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_comments_by&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"hopsoft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"leastbad"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;since_yesterday&lt;/span&gt;
  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;gteq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;PostQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_title_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stimulus_reflex"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_comments_by&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"hopsoft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"leastbad"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;since_yesterday&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#scuttle"&gt;
  &lt;/a&gt;
  Scuttle!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://www.scuttle.io/"&gt;http://www.scuttle.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Turns your SQL into Arel code.&lt;/p&gt;

&lt;p&gt;Thanks for sticking with me, this is more of a reference for myself for the future!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus!
&lt;/h2&gt;

&lt;p&gt;To see all the available matchers like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#gt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#gteq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#lt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#lteq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run the following in the rails console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;

&lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Predications&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [&lt;/span&gt;
  &lt;span class="ss"&gt;:eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:eq_any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:between&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:not&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>arel</category>
      <category>ruby</category>
      <category>rails</category>
      <category>sql</category>
    </item>
    <item>
      <title>Pagination for Laravel with Vue3 And Inertia</title>
      <author>Chris</author>
      <pubDate>Sat, 15 May 2021 20:29:24 +0000</pubDate>
      <link>https://dev.to/tuckbloor/pagination-for-laravel-with-vue3-and-inertia-51j7</link>
      <guid>https://dev.to/tuckbloor/pagination-for-laravel-with-vue3-and-inertia-51j7</guid>
      <description>&lt;p&gt;Hi, I've just published a component on npm for pagination when using laravel with vue3 and inertia &lt;/p&gt;

&lt;p&gt;the repository is here:&lt;br&gt;
&lt;a href="https://github.com/tuckbloor/vue3-pagination-inertia-laravel"&gt;https://github.com/tuckbloor/vue3-pagination-inertia-laravel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;any feed back is welcome, thank you&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>inertiajs</category>
      <category>vue3</category>
      <category>pagination</category>
    </item>
    <item>
      <title>All About Merge Sort Algorithm</title>
      <author>Akshat chaturvedi</author>
      <pubDate>Sat, 15 May 2021 20:09:18 +0000</pubDate>
      <link>https://dev.to/akshat3358/all-about-merge-sort-algorithm-4fk</link>
      <guid>https://dev.to/akshat3358/all-about-merge-sort-algorithm-4fk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction-to-merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Introduction to Merge Sort Algorithm
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Merge Sort  works on the Priciple of &lt;strong&gt;Divide And Conquer&lt;/strong&gt; Algorithm to sort the group of element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question :- What do you understand by the term Divide And Conquer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt; :- Divide And Conquer follows these three steps :-  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.Divide&lt;/strong&gt; refers to dividing the main Problem into Sub-Problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Conquer&lt;/strong&gt; refers to solving the Sub-Problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Combine&lt;/strong&gt; refers to combining the Solution of Sub-Problem to get the Solution of main Problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; It is a &lt;strong&gt;Stable&lt;/strong&gt; Algorithm .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt; :-  What is the meaning of Stable ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt; :- Suppose , We are Sorting the Array in which there are two element which are same , In this case , What  Merge sort Algorithm does that It maintains the original order if it finds two same element in an Array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; The Time complexity for Merge Sort Algorithm :-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Worst&lt;/strong&gt; &lt;strong&gt;Case&lt;/strong&gt; :- O(n*logn)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Averge&lt;/strong&gt; &lt;strong&gt;Case&lt;/strong&gt; :- O(n*logn)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Best&lt;/strong&gt; &lt;strong&gt;Case&lt;/strong&gt; :- O(n*logn)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; The Auxiliary Space for Merge Sort Algorithm is O(n).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-of-merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Working of Merge Sort Algorithm
&lt;/h2&gt;

&lt;p&gt;*Here are the following steps that Merge Sort follows :-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Take two variable that hold the index of starting and last index of the array and take another variable that hold the value of middle index of the array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; The index value of left half of array will be from low to mid and the index value of right half of array will be from mid+1 to high.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Now , Divide the array into two halves (i.e Left and Right Half).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Repeat this untill you get single element in both (left and right half).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; After this , With the help of Merge function of Merge Sort Algorithm will compare , sort and Merge the array of element of both halves(i.e left and right half).&lt;/p&gt;

&lt;p&gt;Now ,let's look at the code of Merge Function of Merge Sort Algorithm :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void merge(int array[] , int low , int mid , int high)
{
    int n1 = mid - low + 1 ;

    //n --&amp;gt; size of array of left half

    int n2 = high - mid ;

    //n2 --&amp;gt; size of array of right half

    int left[n1];

    //Array of left half

    int right[n2];

    //Array of right half

    for(int i=0;i&amp;lt;n1;i++){

        left[i] = array[low+i];

        //storing the left half of array into a temporary array

    }

    for(int i=0;i&amp;lt;n2;i++){

        right[i] = array[n1+i];

        //Storing the right half of array into a temporary array

    }

    //Till now , we have setup the Auxiliary space for our Array

    //Now , We will compare the element in both in left and right 

    //half And insert that element in the original which is 

    //smaller

    int i=0,j=0,k=0;

    while(i&amp;lt;n1 &amp;amp;&amp;amp; j&amp;lt;n2){// Here , we are traversing both the array

    //If we have traversed any of the array otherone is not fully 

    //traversed yet , then we will come out of this loop 

        if( left[i] &amp;lt;= right[j] ){

        //If the element in left half is smaller than the element

        //in right half , then insert and insert the index value 

        //of left half and original array 

            array[k] = left[i];

            i++;

            k++;

        }

        else{

        //Else Insert the element of right half and increase the

        //index value of right half and original array

            array[k] = right[j];

            j++;

            k++;

        }

    }

    //If the above loop ends , Before traversing the both Array

    //then we will traverse that array which is not traverse 

    //completly yet and insert the elements of that array in to

    //original Array inthe same order.

    while(i&amp;lt;n1){

        array[k] = left[i];

        i++;

        k++;

    }

    while(j&amp;lt;n2){

        array[k] = right[j];

        j++;

        k++;

    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's give a walkthrough of working of Merge Sort Algorithm using the example of this Array , arr[] = {14,7,3,12,9,11,6,12} :-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8SW0Lg_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1fa43ifd85blqillrf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8SW0Lg_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr1fa43ifd85blqillrf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, here in the above walkthrough ,we labelled the low index as p ,high index as r and mid index as q . So ,Now firstly look at the code of Merge Sort Algorithm then we will cover both the code and the walkthrough .&lt;/p&gt;

&lt;p&gt;Implementation of Merge Sort Algorithm :-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void mergesort( int array[] , int low ,int high ){
    if( high &amp;gt; low ){

        //we will recursively call this mergesort function    

        //for the left and right half of the array untill 

        //the high index is greater than the low index

        int mid_index = low + ( high - low )/2;

        mergesort(array,low,mid_index);

        //This recursive call is for left half of Array

        mergesort(array,mid_index+1,high);

        //This recursive is for right half of Array

        merge(array,low,mid_index,high);

        //The above call is to merge function compare and 
        //sort and merge the array 

    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So ,When we apply the merge sort algorithm to above given array ,It does these steps :- &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Find the middle index and divide the whole array into two halves ( left and right halves ).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; BY call the merge sort function for the left and right half of the array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; When the high index is less than or equal to low index then we stop call the merge sort function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Now ,We call the merge fucntion to compare , sort and merge the array.&lt;/p&gt;

&lt;p&gt;And that's how we got the sorted Array...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analysis-of-merge-sort-algorithm"&gt;
  &lt;/a&gt;
  Analysis of Merge sort Algorithm
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; The recursive calling part of merge sort fucntion takes O(1) time to break the array in two halves.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; But the merge fucntion of merge sort algorithm take O(n) time to compare , sort and merge the array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Now , Suppose there are x levels in your tree and at each level you are doing the  work in O(n) time then the total time taken by this algorithm is :---&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;              T(n) = x * O(n)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, x is no. of level in the tree , So As we are dividing the array into two halves again and again untill we got single element ,So For this , The time taken by the algorithm to divide the array into two halves is O(log2n).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; So , The Total time taken by the algorithm :--&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;              T(n) = O(n*logn)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So with this , I will wrap-up this post , I hope you understand the whole Algorithm .&lt;/p&gt;

&lt;p&gt;Thankyou so much for Reading the post :-).&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>sorting</category>
      <category>mergesort</category>
      <category>problemsolving</category>
    </item>
  </channel>
</rss>
