<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I Get a Job as a Software Engineer in Sweden.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Sat, 31 Jul 2021 13:18:36 +0000</pubDate>
      <link>https://dev.to/tyaga001/how-i-get-a-job-as-a-software-engineer-in-sweden-p31</link>
      <guid>https://dev.to/tyaga001/how-i-get-a-job-as-a-software-engineer-in-sweden-p31</guid>
      <description>&lt;h3&gt;
  &lt;a href="#a-lot-of-people-asked-me-about-how-i-get-a-job-in-sweden-as-a-software-engineer"&gt;
  &lt;/a&gt;
  A lot of people asked me about how I get a job in Sweden as a software engineer.
&lt;/h3&gt;

&lt;p&gt;So, here‚Äôs my article explaining everything.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-face-it-being-a-software-engineer-is-not-easy-especially-during-your-struggling-days"&gt;
  &lt;/a&gt;
  Let's face it, being a software engineer is not easy, especially during your struggling days.
&lt;/h2&gt;

&lt;p&gt;The bigger challenge comes when you need to pay your bills and at the same time want to develop your skills as well to grow as a software developer. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the biggest problems that self-taught developers face at the beginning of their careers is guidance. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;They don't know exactly how to ask questions &lt;/li&gt;
&lt;li&gt;Whom to ask.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So they usually get lost too easily.&lt;/p&gt;

&lt;p&gt;Making a career transition is not an easy step. &lt;/p&gt;

&lt;p&gt;This is one of the tough decisions of my life. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I started my career in India and working abroad as a software engineer is one of the dreams I had since I started my career back in 2010. (Typical middle-class mindset). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In my Accenture days, I worked mostly with US clients so a couple of times my company tried for H1B but every time I didn't get through that shit lottery system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then I moved to Pune in 2014 and work very hard to enter a product-based company. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Typical product-based companies, you will have very few chances to get onsite opportunities. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I was always in touch with my old colleagues, you know we called this "Networking"&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The currency of real networking is not greed but generosity." -- Keith &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was doing pretty well and then in March 2020 covid came and I started a Facebook group where my old colleagues/tech friends came together on my request as a mentor &amp;amp; helped almost 200+ people in 2020 with different technology stacks. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are a group of people with all tech stacks from testing to development to the cloud. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There I met my friend  &lt;a href="https://twitter.com/codewithakshat"&gt;Akshat&lt;/a&gt; &amp;amp; We both collaborate &amp;amp; work as good partners/colleagues/mentors. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As time progress to November 2020, we did well to help lots of people as part of our mentorship program. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One typical day, I just casually asked Akshat to refer me to your company (You know back of mind, that abroad dream), As Akshat was already in Sweden for the last couple of years &amp;amp; doing excellent work. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;BTW He is a Java champion. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And as a good friend, he referred me but as you know typical hiring process takes a lot of time &amp;amp; you should have good patience. &lt;/p&gt;

&lt;p&gt;So the process took almost 3-4 months to complete:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A general cultural fit round (Most important round)&lt;/li&gt;
&lt;li&gt;A coding assignment which I need to complete in a week.&lt;/li&gt;
&lt;li&gt;A typical technical round &lt;/li&gt;
&lt;li&gt;A typical (but something different from India) managerial round.&lt;/li&gt;
&lt;li&gt;A typical HR round to salary, Visa, and relocation stuff.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But life takes a U-turn again in May 2021 start, I was supposed to travel in May first week but we were all infected with Covid and we lost our mother-in-law. And we were not in a condition to make this big shift in life again. &lt;/p&gt;

&lt;p&gt;I check with the company &amp;amp; they helped me a lot &amp;amp; supported me very well. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In May 2021 typically I was jobless as 30th April was my last working day in my last company. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#so-be-ready-for-ups-amp-down-in-life-when-you-want-something-to-achieve"&gt;
  &lt;/a&gt;
  So be ready for ups &amp;amp; down in life when you want something to achieve.
&lt;/h3&gt;

&lt;p&gt;But again remember Your network is your net worth. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you know your game, you will get opportunities for sure, some may get early, some may get later. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In my personal view, Tech has shown the most successful people are often also those who rely heavily on the power of networking.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;"The successful networkers I know, the ones receiving tons of referrals and feeling truly happy about themselves, continually put the other person's needs ahead of their own." -- Bob Burg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then in June, a new phase of life started for me. &lt;/p&gt;

&lt;p&gt;I finally Moved to Sweden... üëá&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;New phase of life started today.&lt;br&gt;&lt;br&gt;Moved to Sweden... &lt;br&gt;&lt;br&gt;I Joined Volvo Cars as a Senior Software Engineer üôå&lt;br&gt;&lt;br&gt;This is what I was taking about since long that You‚Äôll get amazing opportunity here on Twitter...&lt;br&gt;&lt;br&gt;If I can do it You can as well... &lt;br&gt;&lt;br&gt;Cheers üçª &lt;a href="https://t.co/DBRzt3Ls4o"&gt;pic.twitter.com/DBRzt3Ls4o&lt;/a&gt;&lt;/p&gt;‚Äî Ankurüíªüéßüí™ (@TheAnkurTyagi) &lt;a href="https://twitter.com/TheAnkurTyagi/status/1403339612714635264?ref_src=twsrc%5Etfw"&gt;June 11, 2021&lt;/a&gt;
&lt;/blockquote&gt;  
&lt;h3&gt;
  &lt;a href="#if-you-are-brave-enough-to-say-goodbye-life-will-reward-you-with-a-new-hello"&gt;
  &lt;/a&gt;
  If you are brave enough to say goodbye, life will reward you with a new Hello.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"My Golden Rule of Networking is simple: Don't keep score."&lt;/p&gt;


&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;If you brave enough to say goodbye, life will reward you with a new Hello.&lt;br&gt;&lt;br&gt;Beginning makes the conditions perfect üôå&lt;br&gt;&lt;br&gt;You will never win if you never begin. &lt;a href="https://t.co/OVoDEAMASw"&gt;pic.twitter.com/OVoDEAMASw&lt;/a&gt;&lt;/p&gt;‚Äî Ankurüíªüéßüí™ (@TheAnkurTyagi) &lt;a href="https://twitter.com/TheAnkurTyagi/status/1405139711002177543?ref_src=twsrc%5Etfw"&gt;June 16, 2021&lt;/a&gt;
&lt;/blockquote&gt;  
&lt;h3&gt;
  &lt;a href="#this-is-just-a-start-instead-of-better-glasses-your-network-gives-you-better-eyes"&gt;
  &lt;/a&gt;
  This is just a start "Instead of better glasses, your network gives you better eyes."
&lt;/h3&gt;

&lt;p&gt;Networking is not about just connecting people. &lt;br&gt;
Pulling a good network together takes effort, sincerity, and time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's about connecting people with people, people with ideas, and people with opportunities&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Along with networking, I would suggest, You can try below typical ways to enter a foreign market. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-good-paths-which-you-can-try-if-you-really-want-to-work-abroad"&gt;
  &lt;/a&gt;
  3 good paths which you can try if you really want to work abroad.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Talk to your current company to see if there are any opportunities that you can be considered for.&lt;/li&gt;
&lt;li&gt;Apply for a skilled migrant visa/residency, go abroad and look for a job. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Canada, UK, and Australia have point-based visas. You can check your eligibility and try.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Go as a student, as it‚Äôs easier to get a student visa and then get the bridging visa while you are there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor  on Twitter üëâ &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;TheAnkurTyagi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you would like to discuss your career growth issues in detail with me 1-1, you can hire me on HireTheAuthor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hiretheauthor.com/theankurtyagi"&gt;Book 1-1 Call or Chat Subscription &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can buy me a beer if you feel generous. Happy coding!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ankurtyagi"&gt;BUY Me a Beer.&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>career</category>
    </item>
    <item>
      <title>Vue.js vs. React ‚Äî Not Your Usual Comparison</title>
      <author>Coders Helper</author>
      <pubDate>Sat, 31 Jul 2021 13:01:31 +0000</pubDate>
      <link>https://dev.to/learntocode/vue-js-vs-react-not-your-usual-comparison-4j86</link>
      <guid>https://dev.to/learntocode/vue-js-vs-react-not-your-usual-comparison-4j86</guid>
      <description>&lt;p&gt;¬†From the moment I started learning React, I completely fell in love with it.&lt;/p&gt;

&lt;p&gt;I can create beautiful UIs just with JavaScript? Suddenly, I had the power of JavaScript inside HTML and CSS?&lt;/p&gt;

&lt;p&gt;I absolutely loved it. Amazing.&lt;/p&gt;

&lt;p&gt;I used the tool for years, but I couldn‚Äôt help myself from observing the Vue.js hype. Apparently, every developer that uses it loves it so much!&lt;/p&gt;

&lt;p&gt;How‚Äôs that possible? I love React, but sometimes it makes me frustrated; why is there much less frustration in the Vue.js world?&lt;/p&gt;

&lt;p&gt;I‚Äôve started Vue on a commercial project a few months ago and completely moved from React.&lt;/p&gt;

&lt;p&gt;I was a bit sad when I found out that I had moved from my beloved tool.&lt;/p&gt;

&lt;p&gt;But those frameworks are just tools; we should never make strict career decisions based on them.&lt;/p&gt;

&lt;p&gt;It‚Äôs the front-End world ‚Äî all the tools will vanish soon; new ones will come quickly.&lt;/p&gt;
&lt;p&gt;Now, after tons of experience in frontend development and frameworks like Vue.js, React, and Ember.js ‚Äî let me explain why I find Vue.js the best.&lt;/p&gt;
&lt;p&gt;Read More: &lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/14-vs-code-shortcuts-to-supercharge-your-productivity/"&gt;Vue.js vs. React ‚Äî Not Your Usual Comparison&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;






</description>
    </item>
    <item>
      <title>Valid Mountain Array ‚Äî Solution and Approch in Java</title>
      <author>Rubleen Kaur</author>
      <pubDate>Sat, 31 Jul 2021 12:59:48 +0000</pubDate>
      <link>https://dev.to/rubleen1903/valid-mountain-array-solution-and-approch-in-java-p6g</link>
      <guid>https://dev.to/rubleen1903/valid-mountain-array-solution-and-approch-in-java-p6g</guid>
      <description>&lt;p&gt;I have started practising for my interviews on Leetcode and thought of sharing each problem and the approach i use for solving them through these blogs.&lt;br&gt;
The first problem I chose is Valid Mountain Array and is an easy problem as compared to the one‚Äôs i‚Äôve come across on leetcode.Each and every problem has an algorithmic approach one needs to understand before moving ahead with coding the solution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem we are going to discuss : &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#valid-mountain-array"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/valid-mountain-array/"&gt;Valid Mountain Array&lt;/a&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRXLE1qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msa2cd5o39euiea4n92z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRXLE1qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msa2cd5o39euiea4n92z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given an array of integers arr, return true if and only if it is a valid mountain array.&lt;br&gt;
Recall that arr is a mountain array if and only if:&lt;br&gt;
*&lt;code&gt;arr.length &amp;gt;= 3&lt;/code&gt;&lt;br&gt;
*There exists some i with 0 &amp;lt; i &amp;lt; arr.length - 1 such that:&lt;br&gt;
*&lt;code&gt;arr[0] &amp;lt; arr[1]&lt;/code&gt; &amp;lt; ... &amp;lt; &lt;code&gt;arr[i - 1] &amp;lt; arr[i]&lt;/code&gt;&lt;br&gt;
*&lt;code&gt;arr[i] &amp;gt; arr[i + 1]&lt;/code&gt; &amp;gt; ... &amp;gt; &lt;code&gt;arr[arr.length - 1]&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-"&gt;
  &lt;/a&gt;
  Approach :
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X52zsvfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqc26lqap9c67thua5l7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X52zsvfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqc26lqap9c67thua5l7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I solved it using two variables which were used to check the given conditions.&lt;br&gt;
Do go through the above images to get a detailed approach and alogirthm how the problem was solved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-in-java-"&gt;
  &lt;/a&gt;
  Solution in Java !
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 941. Valid Mountain Array
// Easy
// Given an array of integers arr, return true if and only if it is a valid mountain array.

// Recall that arr is a mountain array if and only if:

// arr.length &amp;gt;= 3
// There exists some i with 0 &amp;lt; i &amp;lt; arr.length - 1 such that:
// arr[0] &amp;lt; arr[1] &amp;lt; ... &amp;lt; arr[i - 1] &amp;lt; arr[i]
// arr[i] &amp;gt; arr[i + 1] &amp;gt; ... &amp;gt; arr[arr.length - 1]

//Solution in java

class Solution {
    public boolean validMountainArray(int[] arr) {
        int i = 0;
        int j = arr.length - 1;
        int n = arr.length - 1;
        while (i + 1 &amp;lt; n &amp;amp;&amp;amp; arr[i] &amp;lt; arr[i+1]) {
            i++;
        }

        while (j &amp;gt; 0 &amp;amp;&amp;amp; arr[j] &amp;lt; arr[j-1]) {
            j--;
        }

        return (i &amp;gt; 0 &amp;amp;&amp;amp; i == j &amp;amp;&amp;amp; j &amp;lt; n);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope the solution was easy to understand !If you still have any doubts feel free to reach out to me at Linkedin! I am attaching my linkedin id below, connect or follow to support and asks your doubts there !&lt;br&gt;
Happy Coding! üê±‚Äçüíª&lt;br&gt;
Connect and Follow on &lt;a href="https://www.linkedin.com/in/rubleenkaur2201/"&gt;Linkedin&lt;/a&gt; and &lt;a href="https://github.com/rubleen1903"&gt;Github&lt;/a&gt; to show support !&lt;/p&gt;

</description>
      <category>java</category>
      <category>algorithms</category>
      <category>programming</category>
    </item>
    <item>
      <title>Pickaboo #0</title>
      <author>oussieMG</author>
      <pubDate>Sat, 31 Jul 2021 12:34:48 +0000</pubDate>
      <link>https://dev.to/oussiemg/pickaboo-0-37oj</link>
      <guid>https://dev.to/oussiemg/pickaboo-0-37oj</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hello-internet"&gt;
  &lt;/a&gt;
  hello internet.
&lt;/h3&gt;

&lt;p&gt;so after a long time since i stopped, i came back to learning; but as it turned out i was kinda all over the place, so i wanted to started from scratch (well not really!)&lt;/p&gt;

&lt;p&gt;what i will be doing is trying to make production ready web-apps as fast as possible, the point of these apps is to learn one tech really well so i can increment my learnings  (tech by tech)&lt;/p&gt;

&lt;p&gt;i saw that it will be good to start with react, but (because i am bad at UI design) i will be using MaterialUI to make it easy for me to get the project up and running, maybe after getting comfortable i will make an app with vanilla react.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-pickaboo"&gt;
  &lt;/a&gt;
  what is Pickaboo
&lt;/h2&gt;

&lt;p&gt;Pickaboo is the most clever name that i could come up with for a web-app that makes it easier to post, find and collect your favorite pickup lines&lt;/p&gt;

&lt;p&gt;i can't discuss all the features am thinking of now, because i want this to be just an introduction to what i am doing&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-am-using-to-build-pickaboo"&gt;
  &lt;/a&gt;
  what i am using to build Pickaboo?
&lt;/h2&gt;

&lt;p&gt;because i want to mainly focus on learning React; i am using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React with MaterialUI&lt;/li&gt;
&lt;li&gt;Strapi for the backend&lt;/li&gt;
&lt;li&gt;MongoDB as a database &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-im-planing-to-learn-from-building-pickaboo"&gt;
  &lt;/a&gt;
  what I'm planing to learn from building Pickaboo?
&lt;/h2&gt;

&lt;p&gt;first and foremost, i want to be able to build a responsive and accessible UI using React (MaterialUI), along side that i want to learn&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;state management using React alone&lt;/li&gt;
&lt;li&gt;authentication&lt;/li&gt;
&lt;li&gt;folders structuring and refactoring following best practices&lt;/li&gt;
&lt;li&gt;VIM (yeah i want to do all the cool stuff with only my keyboard)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;i know that i will not be able to learn all of that from Pickaboo alone (because this will be my first "real project"), but i think that i will learn a lot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-i-have-done-so-far"&gt;
  &lt;/a&gt;
  what i have done so far
&lt;/h3&gt;

&lt;p&gt;i was able to setup the strapi API, and consume it with React. all i have managed to do was having cards that display the pick-up-lines, but i didn't get much into styling for now.&lt;/p&gt;

&lt;p&gt;this is the repo of the project&lt;br&gt;
&lt;a href="https://github.com/oussamaghrib/pickaboo"&gt;https://github.com/oussamaghrib/pickaboo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;well that's it!, good luck to me... i guess!&lt;/p&gt;

</description>
      <category>react</category>
      <category>todayilearned</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to deploy containerized Python and Django application on Heroku</title>
      <author>Payalsasmal</author>
      <pubDate>Sat, 31 Jul 2021 12:22:26 +0000</pubDate>
      <link>https://dev.to/payalsasmal/how-to-deploy-containerized-python-and-django-application-on-heroku-31he</link>
      <guid>https://dev.to/payalsasmal/how-to-deploy-containerized-python-and-django-application-on-heroku-31he</guid>
      <description>&lt;p&gt;This is the first time I have launched my python and django application(as a containerized application) on &lt;strong&gt;Heroku&lt;/strong&gt;. First impression with &lt;strong&gt;Heroku&lt;/strong&gt; is really great ü§©, because it provides lots of services and you can use the free services as well‚úåÔ∏è. It did not ask me any credit card details like other cloud providers.&lt;/p&gt;

&lt;p&gt;I will be covering here that how you can make your application as a containerized application to deploy on &lt;strong&gt;Heroku&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you have any application which you have created, you can take that. I will be using my &lt;a href="https://github.com/PayalSasmal10/pdf2docxConverter-PayalSasmal"&gt;Converter Site&lt;/a&gt; application which can help me to deploy. Now we can dive into the steps&lt;/p&gt;

&lt;p&gt;1.I have created Dockerfile which are mandatory instructions(which are not mandatory, I mentioned that this is for my application and you can skip) for any kind of web application created using Python and Django.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Pull the base image
FROM python:3.7-slim

# who is the maintainer/author of this file
LABEL org.opencontainers.image.authors="PAYALSASMAL, sasmalpayal@gmail.com"

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV DEBUG 0

#upgrading pip for python
RUN python -m pip install --upgrade pip

#install tkinter for my application requirement, you can skip this for your application
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y tcl tk

#creating this dir for my application, you can skip this for your application
RUN mkdir -p /usr/share/man/man1

#installing libreoffice for my application, you can skip this for your application
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    libreoffice-base default-jre

#copying requirements.txt file
COPY ./requirements.txt /app/requirements.txt

#install those requirements before copying the project
RUN pip install -r /app/requirements.txt

#copy the project
COPY . .

#run gunicorn. here pdfconverter is the project name
CMD gunicorn -b 0.0.0.0:$PORT pdfconverter.wsgi:application

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PYTHONDONTWRITEBYTECODE:&lt;/strong&gt; It prevents python from writing &lt;a href="https://www.python.org/dev/peps/pep-3147/#case-4-legacy-pyc-files-and-source-less-imports"&gt;.pyc&lt;/a&gt; files to disc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PYTHONUNBUFFERED:&lt;/strong&gt; It prevents python from writing stdout and stderr stream. check this &lt;a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUNBUFFERED"&gt;document&lt;/a&gt; for more info.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$PORT:&lt;/strong&gt; This variable value will be set by &lt;em&gt;Heroku&lt;/em&gt; at runtime.&lt;/p&gt;

&lt;p&gt;2.Update the allow_host at &lt;em&gt;settings.py.&lt;/em&gt; for your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALLOWED_HOSTS = ['127.0.0.1']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Now test this application as a containerized application locally. So build the image using below command üëáüèª.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t pdfconverter:latest .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4.Now run that image using below command üëáüèª.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --name pdfconverter -e "PORT=8000" -p 8007:8000 pdfconverter:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;-e&lt;/em&gt;: I passed &lt;em&gt;PORT&lt;/em&gt; as env variable. even though it will work without passing the env variable as well.&lt;/p&gt;

&lt;p&gt;Here is an example &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pm0xuYJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46lnz2vvxxp865zehf61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pm0xuYJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46lnz2vvxxp865zehf61.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure that your containerized application is working properly to the local at &lt;a href="http://127.0.0.1:8007/"&gt;http://127.0.0.1:8007/&lt;/a&gt; host.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9FoSfrMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a1j7i5t1q3zt6phni8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9FoSfrMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a1j7i5t1q3zt6phni8v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.As per requirements, I have added my below üëáüèª requirements at &lt;em&gt;requirements.txt&lt;/em&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Django==3.2
djangoconvertvdoctopdf==1.0.1
gunicorn==20.1.0
pdf2docx==0.5.2
whitenoise==5.2.0  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/seferaua/django-convert-doc-to-pdf"&gt;djangoconvertvdoctopdf&lt;/a&gt;: This module helps to convert from docx to pdf.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dothinking/pdf2docx"&gt;pdf2docx&lt;/a&gt;: This module helps to convert from pdf to docx&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://whitenoise.evans.io/en/stable/"&gt;whitenoise&lt;/a&gt;: This module helps to manage the static media for your application. This need to be added as a middleware in Django settings.py&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/django/django"&gt;Django&lt;/a&gt;: This will install the django&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/benoitc/gunicorn"&gt;gunicorn&lt;/a&gt;: This will install the gunicorn&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6.We can add &lt;strong&gt;whitenoise&lt;/strong&gt; middleware at &lt;em&gt;settings.py&lt;/em&gt;.This middleware should be added after securityMiddleware.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7.Configure staticfiles related stuffs at &lt;em&gt;settings.py&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'pdfconverter/static')
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;8.Let's create heroku application through &lt;em&gt;Heroku Dashboard&lt;/em&gt;. Click on &lt;em&gt;Create new app&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sitX3jhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w10u4neyfur5bta5x6l7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sitX3jhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w10u4neyfur5bta5x6l7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.Provide a name of the app. As I have given &lt;em&gt;pdfconverter-by-payal&lt;/em&gt;(as I created the app already with this name so it is showing that this name is not available). Then click on &lt;em&gt;Create app&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VcfsUOjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11s0zx4fusvknr2f2j90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VcfsUOjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11s0zx4fusvknr2f2j90.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.Click on &lt;em&gt;Open app&lt;/em&gt; tab. This URL will be your application URL. It is &lt;strong&gt;&lt;a href="https://pdfconverter-by-payal.herokuapp.com/"&gt;https://pdfconverter-by-payal.herokuapp.com/&lt;/a&gt;&lt;/strong&gt; for my application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FTJGlKHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnlbfauie729ybr67f9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FTJGlKHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnlbfauie729ybr67f9p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;11.We have to add the domain to &lt;em&gt;settings.py&lt;/em&gt; without https.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALLOWED_HOSTS = ['127.0.0.1','pdfconverter-by-payal.herokuapp.com']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;12.Now we will be creating &lt;a href="https://devcenter.heroku.com/articles/build-docker-images-heroku-yml"&gt;heroku.yml manifest&lt;/a&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;build:
  docker:
    web: Dockerfile
run:
  web: gunicorn pdfconverter.wsgi:application --bind 0.0.0.0:$PORT
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As per manifest file document, &lt;a href="https://devcenter.heroku.com/articles/build-docker-images-heroku-yml"&gt;heroku.yml manifest&lt;/a&gt; has 4 top-level sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;setup&lt;/strong&gt; - Specifies the add-ons and config vars to create during app provisioning&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;build&lt;/strong&gt; - Specifies the Dockerfile to build&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;release&lt;/strong&gt; - Specifies the &lt;a href="https://devcenter.heroku.com/articles/release-phase"&gt;release phase&lt;/a&gt; tasks to execute&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;run&lt;/strong&gt; - Specifies process types and the commands to run for each&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;13.Now push your code to &lt;em&gt;GitHub&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push repo master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;14.Install &lt;em&gt;heroku cli&lt;/em&gt; in your local and then go to &lt;em&gt;Heroku Dashboard&lt;/em&gt; under setting tab. check what is the &lt;a href="https://devcenter.heroku.com/articles/stack"&gt;stack&lt;/a&gt; here, &lt;a href="https://devcenter.heroku.com/articles/stack"&gt;stack&lt;/a&gt; should be &lt;strong&gt;heroku-20&lt;/strong&gt;( which means ubuntu-20.04) by default.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kvr8-Lpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xitb2dmqt643tlzj75dn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kvr8-Lpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xitb2dmqt643tlzj75dn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;15.Set the &lt;a href="https://devcenter.heroku.com/articles/stack"&gt;stack&lt;/a&gt; as container using below command üëáüèª.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Okdcx-Zm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5zlhmhmfyyao3pbaasl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Okdcx-Zm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5zlhmhmfyyao3pbaasl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;16.Go to &lt;em&gt;heroku dashboard&lt;/em&gt;. Click on &lt;em&gt;Deploy&lt;/em&gt; tab. Click on &lt;em&gt;GitHub&lt;/em&gt; under &lt;em&gt;Deployment method&lt;/em&gt;. Authorized with your GitHub account and provide the repository name to connect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ww5P1cRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bx7ekf19dz363na3a8c3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ww5P1cRZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bx7ekf19dz363na3a8c3.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;17.Either you can choose &lt;em&gt;automatic deployment&lt;/em&gt;(deploy application automatically on heroku after making changes on github) by click on &lt;a href="https://blog.heroku.com/automated-continuous-deployment-at-heroku"&gt;&lt;strong&gt;Enable Automatic Deploys&lt;/strong&gt;&lt;/a&gt; option or choose &lt;strong&gt;Manual Deploy&lt;/strong&gt; by click on &lt;em&gt;Deploy Branch&lt;/em&gt;. I have done &lt;strong&gt;Manual Deploy&lt;/strong&gt; for my application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J_b0nY0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw9q2thgqlwjj45pcna6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J_b0nY0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw9q2thgqlwjj45pcna6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;18.You can see the logs if there is an issue while deploying, it will be failed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A9-swpkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j17a4xckr1wrpyt38jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A9-swpkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j17a4xckr1wrpyt38jf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;19.I am able to see my application to &lt;a href="https://pdfconverter-by-payal.herokuapp.com/"&gt;https://pdfconverter-by-payal.herokuapp.com/&lt;/a&gt; site and It is working as expected. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8LgkMZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4kydrcoq6x24s9kl89z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8LgkMZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4kydrcoq6x24s9kl89z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: You might not see the website,you might see the below error üëáüèª. so check the logs of application using heroku cli in your local.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkG4dGhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jel4ryzg10crbpfvuc7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkG4dGhs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jel4ryzg10crbpfvuc7z.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--21Zhdo1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipob2051puek48csmfhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--21Zhdo1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipob2051puek48csmfhc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope It will help someone ü§ó.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Please note few things for my website:-&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My &lt;a href="https://pdfconverter-by-payal.herokuapp.com/"&gt;website&lt;/a&gt; is not storing data inside the database so there is no data exposure, please feel free to use it.&lt;/li&gt;
&lt;li&gt;This &lt;a href="https://github.com/PayalSasmal10/pdf2docxConverter-PayalSasmal"&gt;Converter Site&lt;/a&gt; is an open source. If you are an open source enthusiast, please feel free to contribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's connect on &lt;a href="https://twitter.com/payalsasmal"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/payal-sasmal-64204311a/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://github.com/PayalSasmal10"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>docker</category>
      <category>heroku</category>
    </item>
    <item>
      <title>How to create a blog for your Next.js and ChakraUI website</title>
      <author>Muhammad  Ahmad</author>
      <pubDate>Sat, 31 Jul 2021 12:04:58 +0000</pubDate>
      <link>https://dev.to/m_ahmad/how-to-create-a-blog-for-your-next-js-and-chakraui-website-3co8</link>
      <guid>https://dev.to/m_ahmad/how-to-create-a-blog-for-your-next-js-and-chakraui-website-3co8</guid>
      <description>&lt;p&gt;I have been writing on &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; for more than 1 year. I really like to write articles on dev.to but now I wanted to write posts on my &lt;a href="https://my-portfolio-ma-ahmad.vercel.app"&gt;portfolio website&lt;/a&gt;. &lt;br&gt;
So I created a blog where I'll be writing new articles and showing my dev.to posts.&lt;br&gt;
I'll guide you how you can create similar blog for your Next.js website.&lt;/p&gt;

&lt;p&gt;Live demo: &lt;a href="https://my-portfolio-ma-ahmad.vercel.app/blog"&gt;posts-list&lt;/a&gt;&lt;br&gt;
Github repo: &lt;a href="https://github.com/MA-Ahmad/myPortfolio"&gt;https://github.com/MA-Ahmad/myPortfolio&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-packages-required"&gt;
  &lt;/a&gt;
  1. Packages required
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Syntax highlighting - &lt;a href="https://www.npmjs.com/package/prismjs"&gt;prismjs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Syntax highlighter for markdown code blocks - &lt;a href="https://www.npmjs.com/package/remark-prism"&gt;remark-prism&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Load the frontmatter - &lt;a href="https://www.npmjs.com/package/gray-matter"&gt;gray-matter&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Unified processor to parse and serialize Markdown - &lt;a href="https://www.npmjs.com/package/remark"&gt;remark&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Serialize Markdown as HTML - &lt;a href="https://www.npmjs.com/package/remark-html"&gt;remark-html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#2-create-a-mdx-file"&gt;
  &lt;/a&gt;
  2. Create a mdx file
&lt;/h3&gt;

&lt;p&gt;See mdx file sample here &lt;a href="https://github.com/MA-Ahmad/myPortfolio/blob/main/data/posts/how-to-create-a-blog-for-your-nextjs-portfolio-website.mdx"&gt;mdx-file&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-create-a-blog-page"&gt;
  &lt;/a&gt;
  3. Create a &lt;a href="https://github.com/MA-Ahmad/myPortfolio/blob/main/pages/blog.tsx"&gt;Blog&lt;/a&gt; page
&lt;/h3&gt;

&lt;p&gt;Show all local and dev.to posts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://dev.to/api/articles?username=m_ahmad&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;mdx/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdownWithMeta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mdx`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdownWithMeta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;localPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;published_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;published_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;comments_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;comments_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;public_reactions_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;public_reactions_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;tag_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devtoPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;localPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;devtoPosts&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-create-a-blog-detail-page"&gt;
  &lt;/a&gt;
  4. Create a &lt;a href="https://github.com/MA-Ahmad/myPortfolio/blob/main/pages/blog/%5Bslug%5D.tsx"&gt;blog detail&lt;/a&gt; page
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get paths of all blog posts
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllBlogs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devtoPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localPaths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdirSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;mdx/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;devtoPaths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;localPaths&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAllBlogs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://dev.to/api/articles?username=m_ahmad&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`Error fetching... Status code: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;markdown to html code
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdownToHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;remark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prism&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Select the right blog and convert it to html
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllBlogs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blogObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;remarkContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedBlog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`https://dev.to/api/articles/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;selectedBlog&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;blogObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;remarkContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;markdownToHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body_markdown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;markdownWithMeta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.mdx`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;matter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markdownWithMeta&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;blogObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;remarkContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;markdownToHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;devData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;articleContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;remarkContent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;blogDetails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blogObj&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-create-a-custom-stylesheet-to-handle-dark-and-light-theme"&gt;
  &lt;/a&gt;
  5. Create a &lt;a href="https://github.com/MA-Ahmad/myPortfolio/blob/main/components/ui/prism.tsx"&gt;custom stylesheet&lt;/a&gt; to handle dark and light theme
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#blog-page"&gt;
  &lt;/a&gt;
  Blog page
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DICiuWUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsvqtm2b7gxter0x7jt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DICiuWUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dsvqtm2b7gxter0x7jt9.png" alt="blog"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building An Automated Screenshot Service On Netlify In ~140 Lines Of Code</title>
      <author>Arghya Ghosh</author>
      <pubDate>Sat, 31 Jul 2021 11:37:34 +0000</pubDate>
      <link>https://dev.to/uiuxarghya/building-an-automated-screenshot-service-on-netlify-in-140-lines-of-code-3ik1</link>
      <guid>https://dev.to/uiuxarghya/building-an-automated-screenshot-service-on-netlify-in-140-lines-of-code-3ik1</guid>
      <description>&lt;p&gt;This blog post is adapted from: &lt;a href="https://www.zachleat.com/web/screenshots/"&gt;https://www.zachleat.com/web/screenshots/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea is pretty simple: a service that will accept a URL as input and return a static screenshot image of that URL to embed and use on other web sites. The &lt;a href="https://github.com/11ty/api-screenshot/blob/d7fd9c74389e14601a3a3a3a45805a1e59d9de51/functions/screenshot.js"&gt;code is pretty simple too, about 140 lines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having a service for these images is important as the Eleventy docs use a lot of visuals from Built With Eleventy sites around the web‚Äîit wouldn‚Äôt be feasible to generate these manually.&lt;/p&gt;

&lt;p&gt;The end result looks something like this (&lt;a href="https://www.11ty.dev/docs/"&gt;11ty.dev/docs&lt;/a&gt; is shown):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1RV4ws5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627726826737/zbgX2MaQ_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1RV4ws5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627726826737/zbgX2MaQ_.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the URL for the above image is &lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/small/9:16/bigger/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can see this &lt;a href="https://www.11ty.dev/#built-with-eleventy"&gt;live&lt;/a&gt; in &lt;a href="https://www.11ty.dev/docs/starter/"&gt;production&lt;/a&gt; now in a &lt;a href="https://www.11ty.dev/docs/tutorials/"&gt;few&lt;/a&gt; different &lt;a href="https://www.11ty.dev/authors/smthdotuk/"&gt;places&lt;/a&gt; on the Eleventy docs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#decisions-decisions"&gt;
  &lt;/a&gt;
  DECISIONS, DECISIONS
&lt;/h2&gt;

&lt;p&gt;I think there were a few architecture decisions that went into this service that are worth documenting, so here goes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;This is now a separate repo and project from the main 11ty.dev site. This is important as it decouples our On-demand Builder cache for this service away from the main web site, which deploys with a much higher frequency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is best used with lower priority images, things that live further down the page (dare I say, below the imaginary fold). Works great with &lt;code&gt;&amp;lt;img loading="lazy"&amp;gt;&lt;/code&gt;. ‚ö†Ô∏è ABSOLUTELY not for use with HERO IMAGES or on something that might be eligible for your LCP!!! (&lt;em&gt;I warned you with three exclamation marks.&lt;/em&gt;)&lt;br&gt;
-Best paired with preconnect: &lt;code&gt;&amp;lt;link href="https://v1.screenshot.11ty.dev" rel="preconnect" crossorigin&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sizing options are limited to improve cache hits. Currently we only offer 11 different image combinations for each URL. This will likely increase over time as we add additional options, like sizes or aspect ratios or maybe even a no-JavaScript mode. We want cache hits to make these things fast and reduce the request count to external web sites.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I added an Open Graph size (you know, for those cards that show up on social media posts). I‚Äôm currently playing around with this as a way to do super-lazy custom Open Graph images for every page. Each page can have an Open Graph image that‚Äôs a screenshot of itself!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One negative of generating these in a serverless function is that image formats are a bit harder to manage. This means that only JPEG is supported for now. Especially with the &lt;a href="https://www.npmjs.com/package/chrome-aws-lambda"&gt;version of Puppeteer that barely fits in a serverless bundle&lt;/a&gt;, I‚Äôm still trying to figure out how to bundle it with &lt;code&gt;sharp&lt;/code&gt; and &lt;code&gt;eleventy-img&lt;/code&gt; too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The entire thing is versioned using &lt;a href="https://docs.netlify.com/domains-https/custom-domains/multiple-domains/#branch-subdomains"&gt;Netlify Branch subdomains&lt;/a&gt;: e.g. &lt;code&gt;https://v1.screenshot.11ty.dev&lt;/code&gt;. If I want to change the API later I‚Äôll bump it to &lt;code&gt;v2&lt;/code&gt; and just leave the old branch as-is. Of particular note is that &lt;a href="https://screenshot.11ty.dev"&gt;https://screenshot.11ty.dev&lt;/a&gt; (without the version) redirects via an HTTP 301 to &lt;code&gt;v1&lt;/code&gt; and will do so permanently. Don‚Äôt rely on this redirect (for performance reasons).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update (July 30, 2021): The other issue I noticed with using Puppeteer in a Lambda is that emoji are not available to the rendered content. So if a site is using Emoji they do not render. It looks like &lt;a href="https://jurgen.si/posts/lambda-headless-chrome-emojis/"&gt;Matic Jurgliƒç may have a workaround to solve this&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-if-a-site-is-super-slow-or-is-currently-down"&gt;
  &lt;/a&gt;
  WHAT HAPPENS IF A SITE IS SUPER SLOW OR IS CURRENTLY DOWN?
&lt;/h2&gt;

&lt;p&gt;Netlify Functions have a 10 second execution limit. If the site doesn‚Äôt render in 10 seconds, we show a fallback image by default. Currently this is a low-contrast 11ty logo using the same image size as the requested screenshot (via SVG &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes).&lt;/p&gt;

&lt;p&gt;We don‚Äôt use a HTTP 500 status code on errors. In Firefox, the fallback image didn‚Äôt render when an error code was used. Because we aren‚Äôt using a HTTP 500 status code, the On-demand Builder will cache the fallback image for this request. This is good to prevent a bunch of re-requests to slow sites that don‚Äôt make the cutoff (or have a different error) but also means if a request had an outlier response time then the fallback image will continue to be used until the On-demand Builder cache is invalidated with a new build.&lt;/p&gt;

&lt;p&gt;We include the real error message in a custom &lt;code&gt;x-error-message&lt;/code&gt; HTTP Header, if you want more insight into why a screenshot failed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-use-your-instance-for-my-site"&gt;
  &lt;/a&gt;
  CAN I USE YOUR INSTANCE FOR MY SITE?
&lt;/h2&gt;

&lt;p&gt;Um‚Ä¶ I‚Äôm not sure yet. For now I‚Äôd recommend just self hosting it. You can click this button to do it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.netlify.com/start/deploy?repository=https://github.com/11ty/api-screenshot"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gq_bfuxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/11ty/api-screenshot/"&gt;full source code is available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demos"&gt;
  &lt;/a&gt;
  DEMOS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#small-375px-viewport-width"&gt;
  &lt;/a&gt;
  SMALL (375PX VIEWPORT WIDTH)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D1z4-xrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727425912/GKUg2cAfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D1z4-xrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727425912/GKUg2cAfq.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/small/9:16/larger/&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#medium-650px-viewport-width"&gt;
  &lt;/a&gt;
  MEDIUM (650PX VIEWPORT WIDTH)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PMRXIIrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727491442/4PjrDbC51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PMRXIIrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727491442/4PjrDbC51.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/medium/9:16/larger/&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#large-1024px-viewport-width"&gt;
  &lt;/a&gt;
  LARGE (1024PX VIEWPORT WIDTH)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aN1bL-W_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727571195/2VuGV_GRH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aN1bL-W_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727571195/2VuGV_GRH.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/large/1:1/larger/&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-graph-1200%C3%97630"&gt;
  &lt;/a&gt;
  OPEN GRAPH (1200√ó630)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Coxvzwjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727577959/PZI5fvsTP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Coxvzwjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627727577959/PZI5fvsTP.png" alt="Screenshot of 11ty.dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://v1.screenshot.11ty.dev/https%3A%2F%2Fwww.11ty.dev%2Fdocs%2F/opengraph/&lt;/code&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>netlify</category>
      <category>eleventy</category>
      <category>serverless</category>
    </item>
    <item>
      <title>My Story completing 1 year at an early stage startup (Part 1)</title>
      <author>Aashir Aamir Khan</author>
      <pubDate>Sat, 31 Jul 2021 11:33:51 +0000</pubDate>
      <link>https://dev.to/justaashir/my-story-completing-1-year-at-an-early-stage-startup-part-1-jb0</link>
      <guid>https://dev.to/justaashir/my-story-completing-1-year-at-an-early-stage-startup-part-1-jb0</guid>
      <description>&lt;p&gt;When you are just doing your daily work, and your eyes land on the created_date of the file and what looked like yesterday have been 6 months or more‚Ä¶ üò≥&lt;/p&gt;

&lt;p&gt;That‚Äôs how time flows at an exciting fast-forward workplace, fast enough that you don‚Äôt feel like feeling it but you still feel it.&lt;/p&gt;

&lt;p&gt;This post is all about me sharing how I started and now have completed 1 year at ü•ù Kiwify.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ebZvCvup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o7uenmthgs2c6fcp480.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ebZvCvup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7o7uenmthgs2c6fcp480.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[August 2020]: So, I was just¬†sitting around surfing the web around. Tailwind was my new love those days (We're married now üòÇ). I had completed my first internship where I learned VueJS on the job.&lt;/p&gt;

&lt;p&gt;I was looking for side hustle ideas, and trying out basic stuff like started a¬†&lt;a href="https://twitter.com/remoteworkjar"&gt;remote job board&lt;/a&gt;¬†(Dead now) with my friend.&lt;/p&gt;

&lt;p&gt;I was searching for jobs to post on my job board. This is how the lazy process looked like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Go to Google&lt;/em&gt;: Search for "X Company Jobs" or "X Technology Jobs" and then handpick them.&lt;/p&gt;

&lt;p&gt;On that day, I searched for "TailwindCSS jobs" and found out an Upwork posting, and ohhhh man glad till this day that I clicked it. The title was something like¬†"VueJS &amp;amp; TailwindCSS Developer needed to create dashboard screens"&lt;/p&gt;

&lt;p&gt;When I read the description, it was like the description was written for me and was calling me "Come, baby, Come!" &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_U6B_jP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/694/0%2ApHlLpSVhqmv6kDfT.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_U6B_jP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/694/0%2ApHlLpSVhqmv6kDfT.gif" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was exactly what I wanted/had experience. It was quite basic work, like for 1--2 weeks maybe. as they were providing the Figma templates and TailwindUI.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fun Fact: Another reason to apply for job was to get access to TailwindUI (even if I don't complete the project LMAO), as I was thinking about creating¬†&lt;a href="https://tailwindcssuikit.com/"&gt;https://tailwindcssuikit.com/&lt;/a&gt;¬†and didn't had budget to check out TailwindUI just for inspiration. It's $250 to get access&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I only had to do was:&lt;br&gt;
‚Üí Convert Figma to TailwindCSS &amp;amp; Vue&lt;/p&gt;

&lt;p&gt;All looked good, I was convinced that I really want this. So next step was to apply for it. Hahaha üòÇ¬†Most Interesting part.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#upwork-drama"&gt;
  &lt;/a&gt;
  Upwork Drama
&lt;/h2&gt;

&lt;p&gt;If you know Upwork, and how I knew Upwork was that they're quite strict with profile approval. You've to submit information, and it takes like 1--2 days, to allow you to bid on projects.&lt;/p&gt;

&lt;p&gt;So my first try was to find the client outside of Upwork, for example, reach out on Twitter and convince. But it's quite hard to find the right person without much info, So had no luck + The client was super underground with very little info online... (is now a superstar that people now recognize on the streets of Brazil)&lt;/p&gt;

&lt;p&gt;So, anyway. I sent the profile for approval and even if got approved the day after, the chances are that the job will be closed.&lt;/p&gt;

&lt;p&gt;Whhhhhhaaattt, It got approved after 5 mins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yYdmWqCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/960/0%2A-1HH6DuIAQv6Wnny.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yYdmWqCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/960/0%2A-1HH6DuIAQv6Wnny.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what I did was to put my heart out to write the cover letter and answer three questions:&lt;/p&gt;

&lt;p&gt;‚Üí Tell us about your previous project with Nuxt/Tailwind&lt;/p&gt;

&lt;p&gt;‚Üí Share the project's link&lt;/p&gt;

&lt;p&gt;‚Üí Why you're applying for this job&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One interesting thing about me talking out my mind/heart, What I'm doing here, in this post too. I'll not try to refactor into better sentences and grammar e.t.c\&lt;br&gt;
I believe it makes my writing unique, cause it feels like someone is speaking to you and not proof-readed piece gone through revisions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I applied for the job..., and I got a reply back after 3 hours.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_yvE-Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/52/0%2AMniS3YcUgBtQntL1%3Fq%3D20" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_yvE-Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/52/0%2AMniS3YcUgBtQntL1%3Fq%3D20" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had a nice chat, they also asked me if you'll be up for a full-time position too if we offer and hourly rates e.t.c and then gone for the day...&lt;/p&gt;

&lt;p&gt;Came back another day, gave me Figma, talked a bit, and started the contract üòÇüöÄ (Like WTF?)&lt;/p&gt;

&lt;p&gt;So my first goal was completed, I got access to TailwindUI. I was more than happy.&lt;/p&gt;

&lt;p&gt;I did the work, there were some small iterations but I was told it's good and the code will be reviewed (It was the first time, someone would review my code like critique it).&lt;/p&gt;

&lt;p&gt;Another Side of the Mega Drama: My Big Mistake&lt;/p&gt;

&lt;p&gt;As I was 16 years old, at that time (Now 17). I did a big mistake... I made an account in my name and when the contract was awarded ‚Üí They asked for video call / ID Verification. Which I would not be able to verify.&lt;/p&gt;

&lt;p&gt;So we moved out of Upwork... (If I would've been at the client's place, I wouldn't be that calm about my behavior at that time... and wouldn't co-operate this much how I was co-operated too. It was all my learning phase..)&lt;/p&gt;

&lt;p&gt;One of my many mistakes&lt;/p&gt;

&lt;p&gt;Thinking anything as a jump-off didn't care about what they were doing. What I all did was to make wrong assumptions, and cared all about finishing the project / my win then their win / didn't tried to build the connection/trust.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Connection/Trust matters more than anything&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I repaired my mistakes later, that's why I'm this far... You can't be successful/happy being stubborn, always be learning / keep learning.&lt;/p&gt;

&lt;p&gt;So we shifted from Upwork ‚Üí WhatsApp ‚Üí Slack. I worked with so many amazing people who have built some amazing stuff, and have tens of years of experience. The thing I picked was, that I know nothing and that helped me to keep learning from these people.&lt;/p&gt;

&lt;p&gt;The next part of the story is about, how I built the connections, my love for my work, care about everything, and then picking up the role of Head of Product.&lt;/p&gt;

&lt;p&gt;Key Takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Never ever make assumptions, without trying. (For example, If I would've decided Upwork would never approve me, or this job would've been filled. I would've never gotten it. What I did was that I applied to it, and kept all things at side)&lt;/li&gt;
&lt;li&gt;  Speak your heart out, be honest&lt;/li&gt;
&lt;li&gt;  Always learning, Ask for feedback. Keep improving. Realize early that the person you're talking to knows a lot more than you and how you can learn from them.&lt;/li&gt;
&lt;li&gt;  Age is just a number.&lt;/li&gt;
&lt;li&gt;  There's a big advantage getting early in the company, you get more opportunities and the best fast-forward hardcore space to learn in the first 6--7 months (But it can be hard if you like the calm normal day working).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading :) Follow me on¬†&lt;a href="https://twitter.com/justaashir"&gt;Twitter&lt;/a&gt;¬†to get update about Part 2&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks to¬†&lt;a href="https://medium.com/@lucastomioka/1-the-principle-of-above-and-beyond-115d88ecf71e"&gt;Lucas&lt;/a&gt;, for motivating me to write again after this whole year.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>All About CSS - 01. Inline Styles, External Styles and much more.</title>
      <author>Modern Web</author>
      <pubDate>Sat, 31 Jul 2021 11:33:21 +0000</pubDate>
      <link>https://dev.to/kunaal438/all-about-css-01-inline-styles-external-styles-and-much-more-39ni</link>
      <guid>https://dev.to/kunaal438/all-about-css-01-inline-styles-external-styles-and-much-more-39ni</guid>
      <description>&lt;p&gt;Hello, welcome. From today, we'll start learning CSS. And in today's article you'll learn, What is CSS ? How to write CSS?&lt;/p&gt;

&lt;p&gt;If you haven't read previous web development articles on HTML. You can follow &lt;a href="https://dev.to/kunaal438/series/13784"&gt;this&lt;/a&gt; series to learn everything about HTML.&lt;/p&gt;

&lt;p&gt;So, without wasting more time let's start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-css"&gt;
  &lt;/a&gt;
  What is CSS
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--of_IzJMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8pdi4p9sxerkyp6gpw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--of_IzJMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8pdi4p9sxerkyp6gpw8.png" alt="image 1"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Well, CSS stands for Cascading Style sheets. This is a language (not programming language) which is used to style websites. And you can actually see power of CSS with this example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ng4y2SLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j9zi6b13undo8ryfdgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ng4y2SLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5j9zi6b13undo8ryfdgs.png" alt="CSS 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS can make a website beautiful or make it terrible.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h1&gt;

&lt;p&gt;Let's see now, How can we start using CSS to make our websites beautiful. There are lot of ways in which you can style an element of web page. Let's see them in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-inline-styles"&gt;
  &lt;/a&gt;
  1. Inline Styles
&lt;/h3&gt;

&lt;p&gt;Inline styles refer to when you style your elements individually. using &lt;code&gt;style&lt;/code&gt; attribute. Let's see an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: red;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: blue;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"color: green;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;color is CSS property which is used to set text's color. We'll discuss about CSS properties in detail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXa6M0PG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q7s2h4ffadzsfpxppei.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXa6M0PG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q7s2h4ffadzsfpxppei.PNG" alt="Capture-3"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-style-tag"&gt;
  &lt;/a&gt;
  2. Style Tag
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt;&lt;br&gt;
yes, you guessed right. This is an HTML tag which is used to style elements. This is a more efficient way to style element and use CSS. &lt;code&gt;style&lt;/code&gt; tag always use inside &lt;code&gt;head&lt;/code&gt; tag. Let's see an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsEuyAAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41o5cqd8efhomiyucnot.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsEuyAAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41o5cqd8efhomiyucnot.PNG" alt="Capture-4"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It'll be little confusing for you at first. But, let's understand it.&lt;/p&gt;

&lt;p&gt;Up until now, we just seeing how we can implement CSS style to HTML. But to start with &lt;code&gt;style&lt;/code&gt; tag or &lt;code&gt;external styles&lt;/code&gt;. We have to understand. How we write CSS.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#css-syntax"&gt;
  &lt;/a&gt;
  CSS Syntax
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;selector&lt;/code&gt; - selector means html elements like &lt;code&gt;p, div, h1&lt;/code&gt; or classes like &lt;code&gt;.para, .heading,  .container&lt;/code&gt; or can be ids. CSS selectors define which element(s) we want to style. There are lot's of Selectors and we'll cover them all in upcoming articles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;property&lt;/code&gt;: Property is CSS property. It could be &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;width, height&lt;/code&gt; or any Valid CSS property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;value&lt;/code&gt; : And the last we have values. These are the valid values for CSS properties. For example, CSS property &lt;code&gt;color&lt;/code&gt; can have the value &lt;code&gt;red&lt;/code&gt; but cannot have the value &lt;code&gt;khfashfkashfkas&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And last thing. You have to make sure where is bracket is opening and closing, And you have to use colons&lt;code&gt;:&lt;/code&gt; and semi-colons &lt;code&gt;;&lt;/code&gt;. Yes this is hard to keep up with colons, brackets and all. But that's how programming is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05XlyUsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pics.me.me/programming-student-forgets-semi-colon-in-code-semi-colon-im-about-to-45947507.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05XlyUsE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pics.me.me/programming-student-forgets-semi-colon-in-code-semi-colon-im-about-to-45947507.png" alt="Semi colon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-external-style-sheets"&gt;
  &lt;/a&gt;
  3. External style sheets
&lt;/h3&gt;

&lt;p&gt;After "inline styles" and "style tag". We have another way to use CSS to style our elements. And in my opinion this is the best way.&lt;/p&gt;

&lt;p&gt;External Style sheets refers to when you have a separate CSS file for all your elements. And you link that external file to your HTML file.&lt;/p&gt;

&lt;p&gt;Let's see how this works.&lt;br&gt;
First you have to make a separate file with extension &lt;code&gt;.css&lt;/code&gt;. For example I made a file named &lt;code&gt;style.css&lt;/code&gt; in the same folder where i have &lt;code&gt;index.html&lt;/code&gt;. Then,&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#stylecss"&gt;
  &lt;/a&gt;
  Style.css
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsEuyAAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41o5cqd8efhomiyucnot.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsEuyAAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41o5cqd8efhomiyucnot.PNG" alt="Capture-4"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Things to notice here,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;style.css&lt;/code&gt; file. We are using same CSS syntax but we are not using &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; tag because this tag is only for HTML files.&lt;/li&gt;
&lt;li&gt;To link our CSS file in &lt;code&gt;index.html&lt;/code&gt;, we are using &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag. Link tag is used to link an external CSS file to HTML file. Link tag is self closing tag. And it has some attributes to keep in mind.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;href&lt;/code&gt; - This specifies the file path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rel&lt;/code&gt; - stands for relation. Id defines what relation or what this file actually is for.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;
  &lt;a href="#selectors"&gt;
  &lt;/a&gt;
  Selectors
&lt;/h1&gt;

&lt;p&gt;In above examples, we used &lt;code&gt;p&lt;/code&gt; to select element. But if you notice it styled all our p elements. What if we want to style a specific element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;Through classes you can select specific element in css. Let's see how. To use this, you have to use &lt;code&gt;class&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  Css
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.red&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwpIXFvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wdghiu0585z3qftiylw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwpIXFvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wdghiu0585z3qftiylw.PNG" alt="Capture-5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see all the &lt;code&gt;p&lt;/code&gt; elements have color green except the first one which has a class &lt;code&gt;red&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Remember, to select any class in CSS you always have to type &lt;code&gt;.&lt;/code&gt; at the beginning. This tells the browser that this is a class selector.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ids"&gt;
  &lt;/a&gt;
  Ids
&lt;/h3&gt;

&lt;p&gt;Same as classes, we have id. The idea behind Id is, we can use same class for multiple elements but we should use a unique id for a single element. It's totally up to you that you want to use id for multiple element or not. But it is not a good practice.&lt;/p&gt;

&lt;p&gt;to create id we use &lt;code&gt;id&lt;/code&gt; attribute. And to select it in the CSS we type &lt;code&gt;#&lt;/code&gt; before the actual id name.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Green colored Text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#stylecss"&gt;
  &lt;/a&gt;
  Style.css
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.red&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#blue&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_d9v7eR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ameqrdf4b1fq7ql4213q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_d9v7eR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ameqrdf4b1fq7ql4213q.PNG" alt="Capture-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's see some CSS properties.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;width&lt;/code&gt; : As name suggests, this specifies element's width. The value for this could be in &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;px&lt;/code&gt;. Example - &lt;code&gt;width: 100px;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;height&lt;/code&gt; : This specifies element's height. Valid Values are same as &lt;code&gt;width&lt;/code&gt; properties.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;color&lt;/code&gt; : This specifies font/text color. Values could be in hexadecimal codes, or rgb mode, or you can common color name. Example - &lt;code&gt;color: rgb(0, 0, 0);&lt;/code&gt; or &lt;code&gt;color: black;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;font-size&lt;/code&gt; : This is used to change/set fonts size. Values can be in &lt;code&gt;px&lt;/code&gt;. Example - &lt;code&gt;font-size: 20px;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;background-color&lt;/code&gt; : This is used to set background color. Valid values are same as &lt;code&gt;color&lt;/code&gt; property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;border&lt;/code&gt; : This is used to define border of the element. It is used like this.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;thickness&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;border&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;thickness&lt;/code&gt; : It is the thickness of the border. vale could be in px. Like &lt;code&gt;20px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border type&lt;/code&gt;: It specifies which type of border we want. Value could be &lt;code&gt;solid | dotted | dashed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;border color&lt;/code&gt;: It is used to set border's color.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are lot of CSS property, that we'll discuss in future. But if you to know more. You should &lt;a href="https://www.w3schools.com/w3css/defaulT.asp"&gt;checkout this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And I also have some articles which covers CSS advance topics so you read them too.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-transform-everything-you-need-for-a-good-developer-4obc"&gt;CSS Transform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/all-about-css-before-and-after-element-css-pseudo-elements-5g1n"&gt;CSS pusedo elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/display-flex-complete-guide-on-css-flex-box-2021-5bi2"&gt;CSS Flex Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/media-query-everything-you-need-for-responsive-design-b8g"&gt;CSS Media Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-position-everything-you-need-for-good-developer-pfh"&gt;CSS Positions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, that's sit for today. I hope you understood each and everything. If you have any doubt feel free to ask me in comments.&lt;/p&gt;

&lt;p&gt;If you like, you can subscribe my &lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;youtube channel&lt;/a&gt;.I create awesome web development tutorials. You can also watch tutorial on &lt;a href="https://www.youtube.com/watch?v=fOKgHld96mU"&gt;Youtube Clone&lt;/a&gt; by me.&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Nextless.js - Next JS SaaS Boilerplate Template with Serverless backend</title>
      <author>Remi W.</author>
      <pubDate>Sat, 31 Jul 2021 11:29:54 +0000</pubDate>
      <link>https://dev.to/ixartz/nextless-js-next-js-saas-boilerplate-template-with-serverless-backend-34l5</link>
      <guid>https://dev.to/ixartz/nextless-js-next-js-saas-boilerplate-template-with-serverless-backend-34l5</guid>
      <description>&lt;p&gt;Recently, I was building my own SaaS product and it took me 5 months to build it from scratch, which was way more time than I expected at the beginning. It wasn't an easy journey, but I finally did it! üéâ&lt;/p&gt;

&lt;p&gt;Here is some of my learning to build a SaaS product in 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-site-generator"&gt;
  &lt;/a&gt;
  Static Site Generator
&lt;/h2&gt;

&lt;p&gt;You heard it correctly, you can build a SaaS with Static Site Generator (SSG). I made this first SaaS in Next JS in static mode (next export). So, I can host the frontend on any static hosting: cheap, fast, highly scalable, easy to maintain, secure, etc. No need to have a dynamic server to serve your UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ui-components"&gt;
  &lt;/a&gt;
  UI components
&lt;/h2&gt;

&lt;p&gt;The frontend is fully built in React and TypeScript styled with Tailwind CSS. I made everything:&lt;/p&gt;

&lt;p&gt;üî• Landing Page&lt;br&gt;
üî• Authentication&lt;br&gt;
üî• Dashboard&lt;br&gt;
üî• Forms&lt;br&gt;
üî• User Settings&lt;br&gt;
üî• Table&lt;/p&gt;

&lt;p&gt;The components paradigm definitively makes your UI more modular and more reusable.&lt;/p&gt;

&lt;p&gt;You don't need to hire a UI/UX designer anymore for a micro-SaaS!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-experience-build-for-developers"&gt;
  &lt;/a&gt;
  Developer Experience, build for developers
&lt;/h2&gt;

&lt;p&gt;As a passionate developer, I love using tools helping me to be a better engineer:&lt;/p&gt;

&lt;p&gt;‚ù§Ô∏è Type checking with TypeScript&lt;br&gt;
‚ù§Ô∏è Linter with ESLint&lt;br&gt;
‚ù§Ô∏è Code formatter with Prettier&lt;br&gt;
‚ù§Ô∏è Editor configuration for VSCode&lt;br&gt;
‚ù§Ô∏è Local development and Debugging session&lt;/p&gt;

&lt;p&gt;Maybe one day, with GitHub Copilot, you don't need to code anymore ;) But, for now, Developer Experience is extremely important to write high-quality code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fully-serverless"&gt;
  &lt;/a&gt;
  Fully Serverless
&lt;/h2&gt;

&lt;p&gt;For this project, I was a solo developer, I need to get help from the right tools. And, Serverless is one of them. It really makes your code ready for production:&lt;/p&gt;

&lt;p&gt;üöÄ One command deployment for backend&lt;br&gt;
üöÄ Infrastructure as code, also deploy in one command&lt;br&gt;
üöÄ Highly scalable with Serverless&lt;br&gt;
üöÄ Low maintenance: no server maintenance, no Docker, no Kubernetes&lt;/p&gt;

&lt;p&gt;Because it's Serverless, I only pay based on my traffic.&lt;/p&gt;

&lt;p&gt;You don't need to hire a DevOps engineer anymore for a small SaaS!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe-integration"&gt;
  &lt;/a&gt;
  Stripe integration
&lt;/h2&gt;

&lt;p&gt;Like any SaaS product, you need to accept subscriptions. Accepting payment is difficult, it's even more difficult to build a subscription with recurring payment.&lt;/p&gt;

&lt;p&gt;Stripe is one of the best solutions you can find on the market. Even that, it wasn't an easy integration: webhooks, reading documentation, code example, asking questions, testing, etc.&lt;/p&gt;

&lt;p&gt;Here is the result, now my users can easily subscribe to any plan. They can also have access to a self-serve customer portal where they can update, upgrade, cancel, pause, resume, manage their plan.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextlessjs-next-js-saas-starter"&gt;
  &lt;/a&gt;
  Nextless.js, Next JS SaaS starter
&lt;/h2&gt;

&lt;p&gt;It's only a showcase of what I've done recently. But, in a couple of weeks, I'll share more details on what I have learned by building my first SaaS product.&lt;/p&gt;

&lt;p&gt;Here is the link to my first SaaS: &lt;a href="https://postmage.com"&gt;PostMage for generating social image&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find more information on the tech stack at &lt;a href="https://nextlessjs.com"&gt;Nextless.js SaaS Boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oq_SrpAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nextlessjs.com/assets/images/hero-image.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have learned so much about Next JS, web development, frontend development, React, Tailwind CSS, TypeSript Serverless, Stripe, AWS, Infrastructure by building my first SaaS product. I'll definitely share my experience with tutorials, blog posts, etc. Stay tuned.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to create a popup menu in React that closes on clicking outside</title>
      <author>Kunal Bagaria</author>
      <pubDate>Sat, 31 Jul 2021 11:17:06 +0000</pubDate>
      <link>https://dev.to/kb24x7/how-to-create-a-popup-menu-in-react-34hh</link>
      <guid>https://dev.to/kb24x7/how-to-create-a-popup-menu-in-react-34hh</guid>
      <description>&lt;p&gt;So here you are, you want to make your popup in your website but you can't find a good tutorial on how to do that. Fear not, your friendly neighborhood react developer is here to save the day.&lt;/p&gt;

&lt;p&gt;First things first, we are gonna use an external npm module to make things easier.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add react-click-away-listener&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i react-click-away-listener&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Now, on to the syntax:&lt;/p&gt;

&lt;p&gt;You can find additional docs here: &lt;a href="https://www.npmjs.com/package/react-click-away-listener/v/0.4.2"&gt;Link&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ClickAwayListener&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-click-away-listener&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The option to open the popup */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The popup itself */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ClickAwayListener&lt;/span&gt; &lt;span class="na"&gt;onClickAway&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;popup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Items of the Popup&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Items of the Popup&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Items of the Popup&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ClickAwayListener&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you have it, that's basically how you can make a click away listening popup in react. I have excluded the styling portion for this article, but I'll be sure to write up on it soon.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>cra</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Authentication for SPAs done right with NextJS &amp; Server Side Rendering</title>
      <author>Jens Neuse</author>
      <pubDate>Sat, 31 Jul 2021 11:15:25 +0000</pubDate>
      <link>https://dev.to/jensneuse/authentication-for-spas-done-right-with-nextjs-server-side-rendering-fp</link>
      <guid>https://dev.to/jensneuse/authentication-for-spas-done-right-with-nextjs-server-side-rendering-fp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-im-so-frustrated-with-authentication-in-single-page-applications"&gt;
  &lt;/a&gt;
  Why I'm so frustrated with Authentication in Single Page Applications
&lt;/h2&gt;

&lt;p&gt;A while back, I've tried to build a Single Page Application (SPA) using Create React APP (CRA).&lt;br&gt;
I wanted to use TypeScript as I'm using it over pure JavaScript for quite some time already.&lt;br&gt;
Additionally, I didn't want to build or maintain my own Authentication Service, so I chose Auth0 as OpenID Connect Provider.&lt;br&gt;
On paper, it looked simple enough: Configure GitHub and Google as upstream Auth providers,&lt;br&gt;
create a client ID and use the Auth0 SDK to hook up everything in my React application.&lt;/p&gt;

&lt;p&gt;However, things didn't go that smooth.&lt;br&gt;
There were no official TypeScript bindings for the Auth0 SDK, so I had to search through GitHub repositories until I found a solution from Auth0 users.&lt;br&gt;
I had to copy &amp;amp; paste a lot of code and wasn't 100% sure if it's going to work.&lt;br&gt;
Finally, I've got it working, but I wasn't satisfied with the solution.&lt;/p&gt;

&lt;p&gt;If you're using a provider like Auth0, you'll always have to put a Login page on a different domain in front of your website.&lt;br&gt;
Custom domains might be possible, or you could even embed the Login into your website directly, but that would mean extra work.&lt;br&gt;
Aside from that, you have to add a lot of code to your repository for the authentication SDK.&lt;/p&gt;

&lt;p&gt;After all, I've got super frustrated with the developer experience as well as the unsatisfying result for the end-user.&lt;br&gt;
As an end-user, you'll get redirected to a domain of the auth provider, which does not just take a lot of time but could also result in trust issues for the user.&lt;br&gt;
Additionally, the login SDK adds a lot of extra code to your website, resulting in slower load times.&lt;/p&gt;

&lt;p&gt;I've come to the conclusion that we can do better than that.&lt;br&gt;
Authentication should be very easy to set up, low maintenance and not distracting the user.&lt;/p&gt;

&lt;p&gt;In the meantime, I've switched from using CRA to NextJS.&lt;br&gt;
I think it's a much more rounded developer experience including Server Side Rendering (SSR) etc...&lt;br&gt;
With CRA, I always had to figure out which dependencies to use in order to get started.&lt;br&gt;
NextJS might or might not be the best framework. For me, it makes enough decisions, so I can focus on what matters to me, my application and my users.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-i-think-authentication-should-work-for-single-page-applications"&gt;
  &lt;/a&gt;
  How I think, Authentication should work for Single Page Applications
&lt;/h2&gt;

&lt;p&gt;I'd like to outline how authentication should ideally be implemented.&lt;br&gt;
To make it easier to understand, I've divided the topic into two parts.&lt;br&gt;
One is looking at authentication from the end-user perspective.&lt;br&gt;
Equally important, the second part looks at the developer experience.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#user-stories-from-the-perspective-of-the-enduser"&gt;
  &lt;/a&gt;
  User Stories from the perspective of the end-user
&lt;/h3&gt;

&lt;p&gt;Let's start by defining a number of user-stories about how authentication should work for the end-user.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a user, I don't want to be redirected on a different domain or website to be able to login to a web application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The user experience is slow and confusing when you get redirected to a slightly different looking website or even a different domain.&lt;br&gt;
Multiple redirects take a lot of time.&lt;br&gt;
Users expect that high quality websites don't redirect them to different domains during the login flow.&lt;br&gt;
They might sound similar and also use the same colors, but the overall CSS is usually different.&lt;br&gt;
All this leads to confusion and might lead to users abandoning the login flow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a user, I don't want to see loading spinners on a website that requires authentication.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You've probably seen this funny dance many times before.&lt;br&gt;
You enter a website, no content, just redirects and loading spinners.&lt;br&gt;
Then after a few seconds the spinners disappear, and the login screen appears.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a user, I want to immediately see the content if I'm already logged into a website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Am I logged in or not? After the loading spinners, it shows the Login screen for a second or two.&lt;br&gt;
At first, you think you're logged out, but then out of a sudden, the login screen disappears, and the dashboard starts to show up.&lt;br&gt;
If I'm authenticated, why can't I immediately see the dashboard?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a user, I want to do a single login for all subdomains of a website: app.example.com, blog.example.com, docs.example.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Modern apps let you log in once across all products of a company.&lt;br&gt;
Why does it matter?&lt;br&gt;
Imagine you log into the dashboard of Stripe, then you open the docs.&lt;br&gt;
Wouldn't it make sense to immediately be logged in and show personalized docs?&lt;br&gt;
With single sign on across all products, you're able to deliver a much better user experience.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#user-stories-from-the-perspective-of-the-developer"&gt;
  &lt;/a&gt;
  User Stories from the perspective of the developer
&lt;/h3&gt;

&lt;p&gt;For me, it's not just about the end-user experience.&lt;br&gt;
I want things to be easy to implement and maintain from a developer perspective as well.&lt;br&gt;
Therefore, I'll continue with a few stories for the devs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a developer, I want to add almost no code to my NextJS application for authentication to work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I've outlined it above.&lt;br&gt;
I want to have almost nothing to do with authentication.&lt;br&gt;
It should just work.&lt;br&gt;
Every line of code added, every framework, library or npm package added is a liability.&lt;br&gt;
Someone has to maintain it, update it and fix security issues.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a developer, I want to be able to log users into my application using one or more external authentication providers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This should be the standard today.&lt;br&gt;
You should not add a database or custom authentication logic into your application.&lt;br&gt;
Also, I don't want to tightly couple authentication to an app instance.&lt;/p&gt;

&lt;p&gt;NextAuthJS, while looking great, adds authentication directly to your application.&lt;br&gt;
We want authentication that works across multiple applications and subdomains,&lt;br&gt;
while adding minimal to no code to our codebase to not distract us.&lt;/p&gt;

&lt;p&gt;You might disagree with me on this one, but I believe that you should not embed authentication into your application directly.&lt;br&gt;
Instead, you should have some kind of Authentication Gateway to handle the complexity while keeping your application clean.&lt;/p&gt;

&lt;p&gt;If you want a centralised database to store information about your users,&lt;br&gt;
consider using an OpenID Connect SaaS or an On Premises OIDC implementation like Keycloak.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a developer, I want authentication aware data fetching&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the same time I'm creating a Query or Mutation, I'd also want to create a policy if this operation is publicly available or if the user needs to be authenticated.&lt;br&gt;
If the user needs to be authenticated (private) and actually is, I want the operation to kick off.&lt;br&gt;
If the operation doesn't require authentication (public), the operation should immediately run.&lt;br&gt;
I don't want to add any extra logic into the frontend to handle all these cases,&lt;br&gt;
it's code duplication because it was already defined in the backend.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a developer, I want to be able to implement SSR (Server Side Rendering) for authenticated users without much effort.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want to get rid of those loading spinners, and the weird redirect dance.&lt;br&gt;
If the user is logged in already, I want to show them their dashboard right away.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a developer, I don't want to mess around with differences between browsers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looking at the previous user stories, you might already anticipate that we need to work with cookies in order to achieve our goals.&lt;br&gt;
If you've ever worked with cookies and multiple domains, you should be aware that getting it to work on Chrome, Firefox and Safari at the same time is not easy.&lt;br&gt;
You have to deal with CORS and SameSite policies.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a developer, I want an authentication solution that is secure out of the box but also easy to handle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using cookies means we'll get some convenience at the expense of a threat: CSRF (Cross Site Request Forgery).&lt;br&gt;
The solution must solve CSRF automatically.&lt;br&gt;
That is, it should prevent that authenticated users can be tricked into making and action which they didn't intend to do.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-authentication-for-single-page-applications-the-right-way"&gt;
  &lt;/a&gt;
  Implementing Authentication for Single Page Applications, the right way
&lt;/h2&gt;

&lt;p&gt;With the user stories set up, we're now able to define the architecture of our solution.&lt;br&gt;
We'll go through the stories one by one, discuss possible solutions as well as their pros and cons.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#single-page-applications-should-not-redirect-users-to-a-different-domain-during-the-login-flow"&gt;
  &lt;/a&gt;
  Single Page Applications should not redirect users to a different domain during the login flow
&lt;/h3&gt;

&lt;p&gt;If you try to log into a Google product, you'll get redirected to accounts.google.com.&lt;br&gt;
It's a subdomain but still belongs to google.com and therefore there are no trust issues with this approach.&lt;/p&gt;

&lt;p&gt;Imagine your company domain is &lt;code&gt;example.com&lt;/code&gt; and you redirect your users to &lt;code&gt;example.authprovider.com&lt;/code&gt;.&lt;br&gt;
Even though there's &lt;code&gt;example&lt;/code&gt; in the domain name, it's still confusing.&lt;/p&gt;

&lt;p&gt;Ideally, we could run a service on e.g. &lt;code&gt;accounts.example.com&lt;/code&gt; that handles the login for us.&lt;br&gt;
Running such a service would mean we have to run an extra service which needs to be maintained.&lt;br&gt;
At the same time, this service would give us full control over the look and feel which increases trust for the user.&lt;br&gt;
So, while this options sounds like a good approach for a company like Google, we might want to find something simpler.&lt;/p&gt;

&lt;p&gt;What about a headless API service that also comes with authentication embedded?&lt;br&gt;
Luckily, there are protocols like OpenID Connect (OIDC) that allow us to run OIDC clients within our headless API service.&lt;br&gt;
This service will run on the domain &lt;code&gt;api.example.com&lt;/code&gt;.&lt;br&gt;
The login flow will be initiated from &lt;code&gt;example.com&lt;/code&gt; which also hosts the user interface to allow our users to start the flow.&lt;br&gt;
If the user clicks e.g. "Login with Google", we'll redirect them to &lt;code&gt;api.example.com/login-with-google&lt;/code&gt; (not the real path)&lt;br&gt;
and handle the login flow from there.&lt;br&gt;
Once the flow is complete, we'll redirect the user back to &lt;code&gt;example.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How does &lt;code&gt;example.com&lt;/code&gt; know if the authentication was successful?&lt;br&gt;
Browsers are actually really cool about cookies.&lt;br&gt;
You're allowed to set cookies to the domain &lt;code&gt;example.com&lt;/code&gt; while you're on the domain &lt;code&gt;api.example.com&lt;/code&gt;.&lt;br&gt;
That is, the headless API service is allowed to set cookies for the whole &lt;code&gt;example.com&lt;/code&gt; domain.&lt;br&gt;
Btw. this doesn't work the other way around. You're not able to set cookies for &lt;code&gt;foo.example.com&lt;/code&gt; while you're on &lt;code&gt;example.com&lt;/code&gt; or &lt;code&gt;bar.example.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What does all this mean?&lt;br&gt;
We start the user login flow from &lt;code&gt;example.com&lt;/code&gt;.&lt;br&gt;
On this page, we can fully own our user interface.&lt;br&gt;
We will then redirect to &lt;code&gt;api.example.com&lt;/code&gt; and handle the login flow from there.&lt;br&gt;
Once complete, we can set a cookie to the whole &lt;code&gt;example.com&lt;/code&gt; domain, allowing our users to be logged in to all our products!&lt;br&gt;
If we run a blog on &lt;code&gt;blog.example.com&lt;/code&gt; or docs on &lt;code&gt;docs.example.com&lt;/code&gt; we'd still have access to the user's cookie.&lt;br&gt;
By doing so, we've automatically achieved single sign on (SSO) for all our web applications.&lt;/p&gt;

&lt;p&gt;Is this complicated to set up?&lt;br&gt;
I've outlined the steps involved, so there's definitely some work to be done.&lt;/p&gt;

&lt;p&gt;If you're using WunderGraph, we've implemented this already for you.&lt;br&gt;
We're the headless API service mentioned above.&lt;br&gt;
Just deploy your apps to all subdomains you want, we'll provide &lt;code&gt;api.example.dom&lt;/code&gt; for you.&lt;br&gt;
The setup takes just a few minutes.&lt;/p&gt;

&lt;p&gt;First user story implemented, well almost.&lt;br&gt;
What about the tradeoffs?&lt;br&gt;
We've introduced cookies which means, we've created new security problems to solve, namely cross site request forgery (CSRF).&lt;br&gt;
For now, we don't want to solve the problem yet, just keep in mind that we have to tackle it later.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#users-dont-want-to-see-loading-spinners-while-the-web-application-is-figuring-out-if-the-user-is-authenticated-or-not"&gt;
  &lt;/a&gt;
  Users don't want to see loading spinners while the web application is figuring out if the user is authenticated or not
&lt;/h3&gt;

&lt;p&gt;As we've already covered a lot of ground with the last user story, this is going to be a lot easier.&lt;br&gt;
We've learned in the last story that we're able to set a cookie for the user on the whole &lt;code&gt;example.com&lt;/code&gt; domain.&lt;br&gt;
This means, we're able to access this cookie via server-side rendering and don't have to rely on the client trying to figure out if the user is authenticated or not.&lt;br&gt;
The result is that there are no redirects at all and all the loading spinners are gone.&lt;br&gt;
The server-side rendering process knows if the client is authenticated and can inject some data to tell the JS client about it.&lt;/p&gt;

&lt;p&gt;This makes for a super smooth user experience.&lt;br&gt;
The "time to usable application" is reduced by multiple seconds (redirects take time) and you can easily "refresh" the page.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#users-want-to-see-content-immediately-if-theyre-authenticated"&gt;
  &lt;/a&gt;
  Users want to see content immediately if they're authenticated
&lt;/h3&gt;

&lt;p&gt;More often than not, when you refresh a single page application (SPA) you're automatically reset to the landing page or even worse,&lt;br&gt;
the website logs you out automatically.&lt;br&gt;
With the cookie approach, the server can pre-render the website for individual users because it knows if the user is logged in and what their userID is.&lt;/p&gt;

&lt;p&gt;Metrics like "time to interactive" are meaningless if you're not able to do anything with the application.&lt;br&gt;
What's important to the user is "time to usable application", the time until the authenticated user can see real content and can interact with it.&lt;br&gt;
With a cookie set across all subdomains, we're able to reduce this metric across all our applications to a minimum.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#users-want-to-single-sign-on-sso-into-all-our-products"&gt;
  &lt;/a&gt;
  Users want to single sign on (SSO) into all our products
&lt;/h3&gt;

&lt;p&gt;We've already covered this one in the first user story.&lt;br&gt;
Due to the nature of browsers, we're able to set cookies across all subdomains.&lt;br&gt;
SSO is already solved, no expensive enterprise tooling required.&lt;br&gt;
All you have to do is run all your apps on subdomains of &lt;code&gt;example.com&lt;/code&gt; which should be feasible.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-developer-experience-of-implementing-authentication"&gt;
  &lt;/a&gt;
  The Developer Experience of implementing Authentication
&lt;/h2&gt;

&lt;p&gt;With that we've already covered all stories directly related to the end-users.&lt;br&gt;
Next, let's focus on the developer experience.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#we-dont-want-to-too-much-extra-code-frameworks-etc-to-our-nextjs-application-just-to-implement-authentication"&gt;
  &lt;/a&gt;
  We don't want to too much extra code, frameworks, etc. to our NextJS application just to implement authentication
&lt;/h3&gt;

&lt;p&gt;As previously mentioned, the majority of the authentication code runs on &lt;code&gt;api.example.com&lt;/code&gt; which you don't have to maintain.&lt;br&gt;
Because our api service is headless, we'll still have to build a login screen but this shouldn't take too much effort.&lt;br&gt;
All the login flows are being handled by &lt;code&gt;api.example.com&lt;/code&gt; so all we have to do is build the login forms and delegate to the headless service.&lt;/p&gt;

&lt;p&gt;If the user is authenticated, we can always use their cookie and forward it to &lt;code&gt;api.example.com&lt;/code&gt;, even from server side rendering.&lt;br&gt;
This way, we don't even have to put any logic into our NextJS &lt;code&gt;/api&lt;/code&gt; routes because authentication will be handled by passing on the cookie to the headless API service.&lt;br&gt;
The API service also comes with a handy endpoint to check if the user is logged in: &lt;code&gt;.../user&lt;/code&gt;&lt;br&gt;
If you pass along the cookies from the user, this endpoint will return all claims for the current user,&lt;br&gt;
allowing you to server-render the website for them automatically or redirect them to the login page.&lt;/p&gt;

&lt;p&gt;So, no additional code on the backend side of NextJS.&lt;br&gt;
In the client, we add very little logic for our login form so that we can redirect the user to the headless API service if they start the login flow.&lt;/p&gt;

&lt;p&gt;Luckily, WunderGraph automatically generates this client for you.&lt;br&gt;
Assuming you've added GitHub as authentication service to your app,&lt;br&gt;
we'll generate a function on the client to initiate this login flow,&lt;br&gt;
making it as convenient as possible for you.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#it-should-be-easy-to-configure-multiple-authentication-providers-for-our-application"&gt;
  &lt;/a&gt;
  It should be easy to configure multiple authentication providers for our application
&lt;/h3&gt;

&lt;p&gt;I've seen it too many times that frameworks make authentication more complicated than it should be.&lt;br&gt;
Imagine you'd like to build an app that allows your users to log in with their GitHub account.&lt;br&gt;
There should be a way to securely store the client ID and secret for your GitHub application.&lt;br&gt;
Then, you should be able to call a &lt;code&gt;login.github()&lt;/code&gt; function in your frontend and call it a day.&lt;/p&gt;

&lt;p&gt;This is exactly how we've implemented the developer workflow.&lt;br&gt;
You can read more on the topic &lt;a href="https://wundergraph.com/docs/overview/features/authentication"&gt;in the docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;authentication&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;cookieBased&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="nx"&gt;authProviders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;github&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clientId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_CLIENT_ID&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clientSecret&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_CLIENT_SECRET&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The WunderGraph code generator creates a fully typesafe client for us.&lt;br&gt;
This client can read the current user and allows us to start the login flow or log out the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useWunderGraph&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user not logged in!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;`name: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, email: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are some very powerful details hidden in the example.&lt;br&gt;
If you look closely to the config, you'll see the "id" of the GitHub auth provider is "github".&lt;br&gt;
This id is re-used to generate the client and gives you the &lt;code&gt;login.github()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;As you can see, authentication can be simple and shouldn't take too much effort.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-do-authenticationaware-datafetching"&gt;
  &lt;/a&gt;
  How to do authentication-aware data-fetching
&lt;/h3&gt;

&lt;p&gt;As outlined in the user story, the data fetching layer should be aware of authentication.&lt;br&gt;
As a backend developer, you always know if an operation requires authentication or not.&lt;br&gt;
Therefore, you could mark operations as public or private.&lt;/p&gt;

&lt;p&gt;If an operation is public, any (anonymous) user could run it.&lt;br&gt;
If an operation is private, the user must be authenticated.&lt;/p&gt;

&lt;p&gt;Most if not all API clients are not aware of this situation,&lt;br&gt;
therefore the frontend developer has to write custom code that checks if the user is authenticated if this is a requirement.&lt;br&gt;
They'll then manually inject the user credentials into the request.&lt;/p&gt;

&lt;p&gt;This is completely unnecessary.&lt;br&gt;
Once we define a GraphQL operation, it's already clear that this operation is public or private.&lt;br&gt;
Let's look at an example to showcase this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;fromClaim&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EMAIL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;@fromClaim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;createOnemessages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;connectOrCreate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;}}}}){&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a mutation from our &lt;a href="https://github.com/wundergraph/nextjs-typescript-postgresql-graphql-realtime-chat"&gt;realtime chat example&lt;/a&gt;.&lt;br&gt;
As you can see, we're injecting two claims into the mutation.&lt;br&gt;
This is a special feature of WunderGraph, it allows you to use information from the user's claims as variables for your Operations.&lt;br&gt;
As WunderGraph keeps GraphQL Operations entirely on the server, this is completely safe.&lt;/p&gt;

&lt;p&gt;If you're using the &lt;code&gt;@fromClaim&lt;/code&gt; directive, you're automatically marking the Operation as "private", meaning that authentication is required.&lt;/p&gt;

&lt;p&gt;At this point we know about the operation as well as that authentication is required for the user to execute it.&lt;br&gt;
So far, this is similar to most approaches, even if you don't use WunderGraph.&lt;/p&gt;

&lt;p&gt;The problem is that most frameworks drop this piece of information and ignore it.&lt;br&gt;
Code-Generators could integrate this piece if information to generate a smart client that is aware of the requirement for the user to be authenticated.&lt;/p&gt;

&lt;p&gt;To achieve our goal, the WunderGraph code generator takes all the information about the Operations and generates a very smart client.&lt;/p&gt;

&lt;p&gt;All you have to do is call the generated React Hook like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;addMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;messageAdded&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AddMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;refetchMountedQueriesOnSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the user is authenticated, &lt;code&gt;addMessage()&lt;/code&gt; will immediately run.&lt;br&gt;
If the user is unauthenticated, &lt;code&gt;messageAdded&lt;/code&gt; will stay in the state of &lt;code&gt;requiresAuthentication&lt;/code&gt;.&lt;br&gt;
Additionally, once the operation is successful &lt;code&gt;refetchMountedQueriesOnSuccess&lt;/code&gt; will refetch all currently mounted queries.&lt;br&gt;
This is very handy as you don't have to manually update a client side cache.&lt;/p&gt;

&lt;p&gt;This is how a client should handle data fetching, right?&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implementing-server-side-rendering-ssr-for-authenticated-users"&gt;
  &lt;/a&gt;
  Implementing Server Side Rendering (SSR) for authenticated users
&lt;/h3&gt;

&lt;p&gt;Now, onto another important topic: Server Side Rendering!&lt;/p&gt;

&lt;p&gt;Ideally, we should be able to render the UI on the server, even for authenticated users.&lt;br&gt;
We've talked about the topic above already, so the goal is clear. However, it's not just about achieving the goal but also keeping things simple.&lt;/p&gt;

&lt;p&gt;As previously discussed, we're using a headless API service that handles authentication via cookies.&lt;br&gt;
We also mentioned that we can set cookies across all subdomains (e.g. docs.example.com) if we set the domain of the cookie to the apex domain (example.com).&lt;/p&gt;

&lt;p&gt;Alright, how does this look like from the developers perspective?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetServerSideProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// for SSR, simply create a new client and pass on the cookie header from the client context&lt;/span&gt;
    &lt;span class="c1"&gt;// this way, we can make authenticated requests via SSR&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;extraHeaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;// fetch the user so that we can render the UI based on the user name and email&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// fetch the initial messages&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Messages&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// pass on the data to the page renderer&lt;/span&gt;
            &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findManymessages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, it's quite simple.&lt;br&gt;
Create a client, pass on the cookie header from the user, fetch some data and pass it on to the page render function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-that-actually-works-in-all-major-browsers"&gt;
  &lt;/a&gt;
  Authentication that actually works in all major browsers
&lt;/h3&gt;

&lt;p&gt;Getting cookie-based authentication to work might sound easy.&lt;br&gt;
However, it's actually non-trivial to make it both functional and secure across all major browsers can definitely be a pain.&lt;br&gt;
We've made sure that cookies are encrypted as well as http only.&lt;br&gt;
The SameSite config is as restrictive as possible.&lt;/p&gt;

&lt;p&gt;Don't worry if you're not familiar with all these terms.&lt;br&gt;
We've built our solution based on OWASP best practices so that you don't have to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#csrf-protection-out-of-the-box"&gt;
  &lt;/a&gt;
  CSRF protection out of the box
&lt;/h3&gt;

&lt;p&gt;If you're familiar with OWASP, you've probably heard of Cross Site Request Forgery (CSRF).&lt;br&gt;
Cookie-based authentication can be very powerful but also dangerous if you don't handle CSRF properly.&lt;br&gt;
If the browser always sends the user's auth information with every request,&lt;br&gt;
how does the server know if it was the intention of the user to make that request?&lt;/p&gt;

&lt;p&gt;An attacker could trick the user into clicking a link which triggers an action, e.g. sending money to a bitcoin wallet,&lt;br&gt;
even if the user didn't want to send any money at all.&lt;/p&gt;

&lt;p&gt;What can we do about this?&lt;/p&gt;

&lt;p&gt;There are plenty of resources on the topic, so I'd try to keep it brief.&lt;br&gt;
Instead of a GET request, we always make a POST for mutations.&lt;br&gt;
Additionally, we'll transfer a csrf token from server to client and set a special csrf cookie.&lt;br&gt;
Once the csrf token is transferred to the client, the client will use it for all POST requests with a different header.&lt;br&gt;
This means, an attacker can't just create a URL and have the user click on it.&lt;/p&gt;

&lt;p&gt;If you don't want to implement this yourself, just use WunderGraph.&lt;br&gt;
We automatically generate a client that takes care of CSRF protection out of the box.&lt;br&gt;
Nothing needs to be done on your side.&lt;/p&gt;

&lt;p&gt;You can actually see all this in action in &lt;a href="https://github.com/wundergraph/nextjs-typescript-postgresql-graphql-realtime-chat"&gt;one of our demos&lt;/a&gt;.&lt;br&gt;
This is a Chat Application example.&lt;br&gt;
If you Log in and try to send your very first message, you'll see a &lt;code&gt;/csrf&lt;/code&gt; call in the network tab, that's the exchange of the csrf token.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-amp-demo"&gt;
  &lt;/a&gt;
  Summary &amp;amp; Demo
&lt;/h2&gt;

&lt;p&gt;I know it was a lot of content to digest.&lt;br&gt;
At the same time, isn't the end result what both end-users and developers are asking for?&lt;br&gt;
Applications that require authentication should be easy to use, fast and secure while being easy to implement and maintain for the developers.&lt;/p&gt;

&lt;p&gt;I really hope we're able to contribute to this goal, making applications better while saving developers a lot of time.&lt;/p&gt;

&lt;p&gt;If you want to see all the practices described in action, clone &lt;a href="https://github.com/wundergraph/nextjs-typescript-postgresql-graphql-realtime-chat"&gt;the demo&lt;/a&gt;&lt;br&gt;
and try it out yourself!&lt;/p&gt;

&lt;p&gt;I'd be more than happy to hear your feedback!&lt;/p&gt;

</description>
      <category>authentication</category>
      <category>nextjs</category>
      <category>ssr</category>
      <category>spa</category>
    </item>
  </channel>
</rss>
