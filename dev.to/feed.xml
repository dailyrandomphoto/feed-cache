<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Cherry-Pick Your Teammate's Changes Without Push 'n Pull-ing To Your Repo In PhpStorm</title>
      <author>Sunny</author>
      <pubDate>Wed, 01 Dec 2021 14:49:57 +0000</pubDate>
      <link>https://dev.to/gitlive/cherry-pick-your-teammates-changes-without-push-n-pull-ing-to-your-repo-in-phpstorm-26e9</link>
      <guid>https://dev.to/gitlive/cherry-pick-your-teammates-changes-without-push-n-pull-ing-to-your-repo-in-phpstorm-26e9</guid>
      <description>&lt;p&gt;You asked your teammate for help with a piece of code and they showed you the solution in their editor. Now you need to fetch those changes. Usually, this would mean a series of tedious Git commands for both of you (not to mention that the changes will forever grace your git history), but no longer - GitLive allows you to cherry-pick your teammate's changes straight from their local files without having to push and pull to Git.&lt;/p&gt;

&lt;p&gt;In PhpStorm, open up the team window by clicking on the GitLive icon on the bottom tool window bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phQRMgzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638207847652/QNQpmfrNo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phQRMgzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638207847652/QNQpmfrNo.png" alt="IMG-1.png" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will show a list of your teammates, if they are online (or away) and the issue they are currently working on. Click the arrow on the left-hand side of the teammate that helped you to see the repositories they have cloned, locate the one they made the changes to and click the arrow beside that too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5bx3-Hf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364480687/11cumW1Kc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5bx3-Hf---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364480687/11cumW1Kc.png" alt="IMG-2.png" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, you can see the list of files changed by your teammate on their branch compared to the main branch. Files with asterisks next to the file icon contain changes made locally by your teammate that have not yet been pushed to the remote repository.&lt;/p&gt;

&lt;p&gt;Since we are only interested in their local changes, click the filter icon at the bottom of the team window to filter to only the unpushed changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zPYxp4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364487050/6dwGmEl82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zPYxp4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364487050/6dwGmEl82.png" alt="IMG-3.png" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can see the single file that contains the solution we want to copy! Clicking on it will open a diff of the changes so we can make sure it contains only the changes we need. Now all we need to do is to right click on the file and select the cherry-pick option to pick the changes. And voil√† - no need for any git push- or git pull -ing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjPTYVr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638365529802/UOI7mi8G8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZjPTYVr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638365529802/UOI7mi8G8.png" alt="IMG-4.png" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also perform the cherry pick at the level above if you want to pick all changes from multiple files at once by right-clicking on the repository and selecting the cherry-pick option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IUJkb11K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364497951/VDeR8jV6T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUJkb11K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638364497951/VDeR8jV6T.png" alt="IMG-5.png" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't have the GitLive extension installed yet? You can &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;find GitLive here&lt;/a&gt;, and if you want to learn more, check out &lt;a href="https://blog.git.live/gitlive-8-0-Cherry-picking-your-teammates-changes"&gt;this blog post&lt;/a&gt; or the &lt;a href="https://docs.git.live/docs/cherrypicking/"&gt;GitLive docs&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>git</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Day 4 - Revisiting CSS Animations | #100DaysOfCode</title>
      <author>MD Jannatin Naim</author>
      <pubDate>Wed, 01 Dec 2021 14:46:44 +0000</pubDate>
      <link>https://dev.to/jannatinnaim/day-4-revisiting-css-animations-100daysofcode-4on0</link>
      <guid>https://dev.to/jannatinnaim/day-4-revisiting-css-animations-100daysofcode-4on0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bpCAluN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kep4ixdj24xljpt3uhrr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpCAluN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kep4ixdj24xljpt3uhrr.jpg" alt="Coding Motivation Banner" width="880" height="637"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learn-today"&gt;
  &lt;/a&gt;
  What did I learn today?
&lt;/h3&gt;

&lt;p&gt;I did learn more about CSS animations by researching outside sources. There are some issues I do face while writing CSS animations still now. I'll put this on hold for now cause I think I know enough for now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-did-i-face"&gt;
  &lt;/a&gt;
  What problems did I face?
&lt;/h3&gt;

&lt;p&gt;It's the same as yesterday but a little less worse. Still don't understand this &lt;code&gt;bezier-curve&lt;/code&gt; though.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-want-to-do-tomorrow"&gt;
  &lt;/a&gt;
  What do I want to do tomorrow?
&lt;/h3&gt;

&lt;p&gt;I'll work on the &lt;a href="https://www.freecodecamp.org/learn/responsive-web-design/#responsive-web-design-principles"&gt;Responsive Web Design Principles&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-was-the-experience-so-far"&gt;
  &lt;/a&gt;
  How was the experience so far?
&lt;/h3&gt;

&lt;p&gt;Things are much harder than when I started. Maybe I'm trying to go too fast, IDK. Let's see how it goes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JannatinNaim/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Type Conversions in JavaScript</title>
      <author>Nirbhay Parmar</author>
      <pubDate>Wed, 01 Dec 2021 14:39:45 +0000</pubDate>
      <link>https://dev.to/nirbhayparmar/type-conversions-in-javascript-3b1c</link>
      <guid>https://dev.to/nirbhayparmar/type-conversions-in-javascript-3b1c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In the previous post of this series, I have explained about all the &lt;a href="https://dev.to/nirbhayparmar/all-data-types-in-javascript-237a"&gt;data types&lt;/a&gt; that are present in JavaScript. If you did not read it then you may read it first to understand all the data types in detail or if you have knowledge about the data types then you may continue reading this post.&lt;/p&gt;

&lt;p&gt;In this post, I am explaining about the type conversions in JavaScript. As we know that JavaScript is &lt;em&gt;dynamically typed&lt;/em&gt; language, we don't need to specify the data type while creating any variables. Sometimes we requires that the some value stored in a variable as some other data type then it was already like the variable is storing a number data type and we require that value as a string. The concept of &lt;em&gt;type conversion&lt;/em&gt; comes into picture here.&lt;/p&gt;

&lt;p&gt;Type conversion achieved in JavaScript in two ways-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Automatic Type Conversion&lt;/li&gt;
&lt;li&gt;Explicit Type Conversion&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now lets talk them about in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-type-conversion"&gt;
  &lt;/a&gt;
  Automatic Type Conversion
&lt;/h2&gt;

&lt;p&gt;As the name suggests it is automatically done by JavaScript itself. Some functions like &lt;code&gt;alert()&lt;/code&gt; will convert any given type to string to display it.&lt;/p&gt;

&lt;p&gt;Another example of it is that when we apply the non-numbers to mathematical expressions or functions then the non-numbers are automatically converted to numbers. For example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are some more ways in which automatic type conversion is happen but I want to try on your own in your browser's console in dev tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explicit-type-conversion"&gt;
  &lt;/a&gt;
  Explicit Type Conversion
&lt;/h2&gt;

&lt;p&gt;Explicit type conversion means that we have explicitly have to convert the data type of the value stored in a variable, by using some functions.&lt;/p&gt;

&lt;p&gt;In JavaScript, we have generally four type of explicit type conversions such as-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;string conversion&lt;/li&gt;
&lt;li&gt;numeric conversion&lt;/li&gt;
&lt;li&gt;boolean conversion&lt;/li&gt;
&lt;li&gt;object to primitive conversion&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post, I am just covering first three only because object to primitive conversion needed knowledge deeper understanding of objects, that I may cover in my future post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-string-conversion"&gt;
  &lt;/a&gt;
  1. String Conversion
&lt;/h3&gt;

&lt;p&gt;To convert the other values to string data type, we have used &lt;code&gt;string(other value)&lt;/code&gt; function. It is most obvious type of conversion because the value stays as it is but its data type is now changed to string.&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//number to string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// numValue is of number data type.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;convertedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;convertedValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// string&lt;/span&gt;

&lt;span class="c1"&gt;//boolean to string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;boolValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// boolValue is of boolean data type.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boolValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-numeric-conversion"&gt;
  &lt;/a&gt;
  2. Numeric Conversion
&lt;/h3&gt;

&lt;p&gt;Numeric conversion is slightly complicated but i will explain it via examples that takes the complexity away. So numeric conversion is possible by a function called &lt;code&gt;Number(otherValue)&lt;/code&gt;.&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// string data type&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;booleanValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//boolean data type&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numValue1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numValue2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;booleanValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numValue3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;booleanValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// for false boolean value&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;numValue1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// number as numValue1 is 123&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;numValue2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// number as numValue2 is 1&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;numValue3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// number as numValue3 is 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-boolean-conversion"&gt;
  &lt;/a&gt;
  3. Boolean Conversion
&lt;/h3&gt;

&lt;p&gt;Boolean conversion is easy because it has only one rule that is when any empty string &lt;code&gt;""&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; is converted to boolean using &lt;code&gt;Boolean()&lt;/code&gt; function then it is false othervise it is true.&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stringValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;boolValue1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;boolValue2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boolValue1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boolValue2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stringValue1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numValue1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;boolValue3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringValue1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;boolValue4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numValue1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boolValue3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boolValue4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#some-points-to-remember"&gt;
  &lt;/a&gt;
  some points to remember
&lt;/h2&gt;

&lt;p&gt;Some people often confused when it comes to converting &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;"0"&lt;/code&gt; to boolean because both of then seems to equal but, &lt;code&gt;0&lt;/code&gt; is converted to false in boolean and &lt;code&gt;"0"&lt;/code&gt; is converted to true because &lt;code&gt;"0"&lt;/code&gt; is string having 0 as a character while &lt;code&gt;0&lt;/code&gt; is a number.&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
&lt;span class="c1"&gt;// try this code in console window of dev tools of your browser&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other common mistake is that they convert &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; to number, &lt;code&gt;undefined&lt;/code&gt; is converted to &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; is converted to &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
&lt;span class="c1"&gt;// try this code in console window of dev tools of your browser&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we are converting string to number then if the string have some trailing or leading white spaces then it will discarded. If the string contains some non-numeric characters then it will converted to &lt;code&gt;NaN&lt;/code&gt;. The empty string becomes &lt;code&gt;0&lt;/code&gt;.&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;  123  &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123@#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// try this code in console window of dev tools of your browser&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In boolean conversion, the &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are also converted to &lt;code&gt;false&lt;/code&gt;. The space-only string &lt;code&gt;" "&lt;/code&gt; is true.&lt;br&gt;
Example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//NaN&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// space only string&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// try this code in console window of dev tools of your browser&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I know this post is looking some what complicated when you first look at it, but if read this post and try the code given here in your browser console then the things became clear.&lt;br&gt;
Thank you for reading this post.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This post is based on what I learned about data types in JavaScript from &lt;a href="https://javascript.info/type-conversions"&gt;javascript.info.&lt;/a&gt; It is basically a summary of that article. Visit it to get some deeper understanding.&lt;/em&gt;&lt;br&gt;
Photo by &lt;a href="https://unsplash.com/@pankajpatel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Pankaj Patel&lt;/a&gt; on &lt;a href="https://unsplash.com/@pankajpatel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I Created My Blog Using JAMStack</title>
      <author>Thanh Truong</author>
      <pubDate>Wed, 01 Dec 2021 14:34:28 +0000</pubDate>
      <link>https://dev.to/thanhtr99270163/how-i-created-my-blog-using-jamstack-1lko</link>
      <guid>https://dev.to/thanhtr99270163/how-i-created-my-blog-using-jamstack-1lko</guid>
      <description>&lt;p&gt;In the first two articles of this series, we explored &lt;strong&gt;JAMStack&lt;/strong&gt; &lt;em&gt;(what it is, its components and architecture, available tools for JAMStack development, its pros and cons, and comparison between WordPress and JAMStack)&lt;/em&gt;. If you haven't read it yet, I highly suggest you give it a read first.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.underthehoodlearning.com/what-is-jamstack-and-whether-you-should-use-it-for-your-app/"&gt;What Is JAMStack And Whether You Should Use It For Your App?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/thanhtr99270163/jamstack-vs-wordpress-which-one-is-better-2c87"&gt;JAMStack vs. WordPress: Which One Is Better?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the remainder of this series, I'll walk you through the process of how I created my personal blog with JAMStack &lt;em&gt;- a modern web development practice&lt;/em&gt;. But before we jump into our first tutorial, let's review the entire process at the high level and some &lt;em&gt;"gotchas"&lt;/em&gt; and challenges I discovered along the way and how I overcame those challenges.üòé&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-jamstack"&gt;
  &lt;/a&gt;
  Why JAMStack?
&lt;/h2&gt;

&lt;p&gt;My decision to set up my own blog as well as my decision to use JAMStack came a long way. I originally started blogging on &lt;a href="https://dev.to/thanhtr99270163"&gt;DEV Community&lt;/a&gt;. DEV is really a great community, don't get me wrong, but I was in need of a blogging platform that would offer some amount of flexibility and customization of how my blog should look like. Also, I thought it would be great to start growing my personal "brand", and having your own blog with your own domain name would be a good starting point.&lt;/p&gt;

&lt;p&gt;So I set out to look for a way to cross-post content between my blog on DEV Community and my to-be-created blog with its own domain name. I quickly noticed that DEV actually has an extension that would allow you to generate a personal blog from your DEV Community posts using &lt;a href="https://www.stackbit.com/"&gt;Stackbit&lt;/a&gt;. Great! "This is exactly what I need", I said to myself. I then followed some tutorials trying to set up my own blog on Stackbit.üë©‚Äçüíª&lt;/p&gt;

&lt;p&gt;However, I quickly ran into issues migrating my posts from DEV Community into Stackbit. I emailed Stackbit's support team and was told that they were aware of the issue and have been working on fixing it. Bummer!üòû&lt;/p&gt;

&lt;p&gt;I could either wait until Stackbit fixes the issue or find another solution. I decided to find another solution simply because I just don't like the fact that I have to rely on someone else to fix the problem, and that's just the nature of using a _ &lt;strong&gt;site builder&lt;/strong&gt; _ like Stackbit, which is aimed toward less technical users.&lt;/p&gt;

&lt;p&gt;So my mission now is to find another solution, which I will explain in more detail in the next section. However, I think it's important to acknowledge the fact that my decision to use JAMStack as well as what tools to use to build my JAMStack app started with Stackbit and is heavily influenced by it. After all, I learned about &lt;strong&gt;Netlify, Gatsby,&lt;/strong&gt; and even &lt;strong&gt;Ghost CMS&lt;/strong&gt; from my initial attempt with Stackbit because it uses JAMStack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jamstack-components-recap"&gt;
  &lt;/a&gt;
  JAMStack components recap
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpNV3U47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res-2.cloudinary.com/under-the-hood-learning/image/upload/q_auto/v1/blog_images/10586.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpNV3U47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res-2.cloudinary.com/under-the-hood-learning/image/upload/q_auto/v1/blog_images/10586.jpg" alt="How I Created My Blog Using JAMStack" width="880" height="587"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Let's quickly recap all the components of our JAMStack blog and the technologies that we will be using for each of the components.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Static site generator&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
All websites, doesn't matter what they are, fundamentally consists of HTML, CSS, and JavaScript. It doesn't matter what tools or frameworks you use to create your website, the final result needs to be compiled into these file formats in order for the browser to understand and display on the screen. Our blog is no exception.&lt;br&gt;&lt;br&gt;
There are two sources of HTML for our blog: _the &lt;strong&gt;static&lt;/strong&gt; _ HTML contents (site header, logo, layout, footer, etc.) and the &lt;strong&gt;dynamic&lt;/strong&gt; HTML contents from the actual blog posts. We need to somehow combine both of these _ &lt;strong&gt;static&lt;/strong&gt; _ and _ &lt;strong&gt;dynamic&lt;/strong&gt; _ HTML sources into a single HTML file at every single build of our app. &lt;strong&gt;Static site generator&lt;/strong&gt; to the rescue!ü¶∏‚Äç‚ôÇÔ∏è&lt;br&gt;&lt;br&gt;
A _ &lt;strong&gt;static site generator&lt;/strong&gt; _ is a software application that creates HTML pages from templates or components and a given content source during a _ &lt;strong&gt;build&lt;/strong&gt; _ process. There are many static site generators available out there. We will be using &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; for our blog.&lt;br&gt;&lt;br&gt;
During a build, &lt;strong&gt;Gatsby&lt;/strong&gt; loads JSON data from &lt;strong&gt;GraphQL&lt;/strong&gt; and merges it with components to create HTML pages. These generated pages are then deployed to a web server. When the server receives a request from a browser, it responds with rendered HTML.&lt;br&gt;&lt;br&gt;
So the question that needs to be answered now is _ &lt;strong&gt;where does the GraphQL data come from?&lt;/strong&gt; _ ü§î. I'm glad you asked because that's exactly what we're going to explore in the next section.üòâ&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content Management System (CMS)&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Dynamic contents for JAMStack sites &lt;em&gt;(in our case, these are our blog posts)&lt;/em&gt; can be controlled via a CMS, typically known as _ &lt;strong&gt;headless CMS.&lt;/strong&gt; _ Once a change is made in CMS &lt;em&gt;(a post is published/added/edited/deleted)&lt;/em&gt;, a new build of our site will be triggered and deployed as static assets. Similar to static site generators, there are many options for CMS available out there, but we will be using &lt;a href="https://ghost.org/"&gt;Ghost CMS&lt;/a&gt; for our blog.&lt;br&gt;&lt;br&gt;
As mentioned above, after a change is made to either our _ &lt;strong&gt;static HTML&lt;/strong&gt; _ from &lt;strong&gt;Gatsby&lt;/strong&gt; or to our _ &lt;strong&gt;dynamic HTML&lt;/strong&gt; _ from &lt;strong&gt;Ghost CMS&lt;/strong&gt; , we will need to somehow trigger the deployment to the web server to rebuild and regenerate the HTML files. How are we going to do that?ü§î Again, glad you asked! Join me in the next section!üòé&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
The generated HTML pages need to be hosted on a web server somewhere in order to allow users from anywhere to access our blog. There are several services available, but we will be using &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; for our blog.&lt;br&gt;&lt;br&gt;
I chose Netlify because it has an awesome &lt;a href="https://www.netlify.com/pricing/"&gt;free plan&lt;/a&gt; that comes with great features such as:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you understand all these components at a high level, I'll share with you some of the challenges that I encountered as I was setting up my blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gatsby-static-site-generator"&gt;
  &lt;/a&gt;
  Gatsby static site generator
&lt;/h2&gt;

&lt;p&gt;In order to get my site up and running as quickly as possible, I decided to use one of Gatsby's &lt;a href="https://www.gatsbyjs.com/starters"&gt;starter libraries&lt;/a&gt;. &lt;strong&gt;Starters&lt;/strong&gt; are open-source Gatsby sites maintained by Gatsby that enable users to dive into their next Gatsby project with minimum effort. Starters range from minimal boilerplate to full proof of concept. Since we will be using &lt;strong&gt;Ghost&lt;/strong&gt; as our content management system. It seems logical that the &lt;a href="https://www.gatsbyjs.com/starters/TryGhost/gatsby-starter-ghost/"&gt;gatsby-starter-ghost&lt;/a&gt; is the best option for us.&lt;/p&gt;

&lt;p&gt;Besides a few customizations to give the blog the look and feel of my personal brand, the following features were implemented/improved to suit my needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added a &lt;a href="https://www.underthehoodlearning.com/tag/"&gt;Tags&lt;/a&gt; page that displays my posts grouped by their corresponding tags.&lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;Google Analytics&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Added &lt;a href="https://www.algolia.com/"&gt;Algolia Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Added block code syntax highlight using &lt;a href="https://highlightjs.org/"&gt;highlight.js&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ghost-cms"&gt;
  &lt;/a&gt;
  Ghost CMS
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ghost&lt;/strong&gt; offers &lt;a href="https://ghost.org/pricing/"&gt;Ghost(Pro)&lt;/a&gt; &lt;em&gt;- a managed hosting service for Ghost&lt;/em&gt; that offers users the fastest way to get started on Ghost. It includes out-of-the-box features such as &lt;em&gt;custom domain, custom themes, server maintenance and backups, CDN, etc.&lt;/em&gt; However, since I was looking for a low-cost option, I opted for a &lt;a href="https://ghost.org/docs/install/"&gt;self-hosted instance&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Out of the box, Ghost comes with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A core JSON API&lt;/li&gt;
&lt;li&gt;An admin client app&lt;/li&gt;
&lt;li&gt;A front-end theme layer using &lt;strong&gt;Handlebars&lt;/strong&gt; templating languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, since I use Gatsby for the frontend theme layer, I had to modify a few things after installing Ghost. Ghost's Admin Client app has the page preview feature that only works if you use one of Ghost's themes. Therefore, I had to set up a proxy server with some URL redirect configuration in order to be able to preview my posts with my Gatsby theme from the Admin Client app. The page preview on the Branding setting page still doesn't work, but that didn't bother me much, so I didn't spend time fixing it. More on that later when we get to the tutorials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloud-hosting"&gt;
  &lt;/a&gt;
  Cloud hosting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ouce2HdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res-5.cloudinary.com/under-the-hood-learning/image/upload/q_auto/v1/blog_images/3040061.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouce2HdB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res-5.cloudinary.com/under-the-hood-learning/image/upload/q_auto/v1/blog_images/3040061.jpg" alt="How I Created My Blog Using JAMStack" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
As mentioned above, we will use &lt;strong&gt;Netlify&lt;/strong&gt; to manage automatic build and deployment of our site. Basically, we will connect Netlify to our GitHub repo where we store our Gatsby code and configure it so that every time a change is pushed to the remote repo, a build is triggered in Netlify. In addition to that, we will integrate Netlify's &lt;strong&gt;build hook&lt;/strong&gt; with Ghost so that every time a change is made in Ghost (you can configure what type of changes you want such as post added, post updated, global changes, etc.), a build in Netlify is automatically triggered.&lt;/p&gt;

&lt;p&gt;Unless you're planning on hosting your Ghost server on your local machine, which you can if you want, you will need to pick a cloud platform ( &lt;strong&gt;AWS, Azure, Heroku, Digital Ocean,&lt;/strong&gt; etc.) to host your server app. Since my goal is to come up with a low-cost solution, here is what I ended up using for my stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;Heroku&lt;/strong&gt; to host my Ghost server, which is essentially a &lt;strong&gt;Node.js&lt;/strong&gt; app. I found &lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku/"&gt;this&lt;/a&gt; GitHub repo that can be used to deploy a Ghost server into Heroku with just a click of a button. However, this app is preconfigured to use &lt;a href="https://www.jawsdb.com/"&gt;JawsDB&lt;/a&gt; as the &lt;strong&gt;MySQL&lt;/strong&gt; database where all data for our posts are stored. JawsDB does have a &lt;strong&gt;free plan&lt;/strong&gt; , but it only comes with &lt;strong&gt;5MB&lt;/strong&gt; of storage. The next price tier is &lt;strong&gt;$10/month&lt;/strong&gt; for which you'll get &lt;strong&gt;1GB&lt;/strong&gt; of data. I needed to come up with a lower-cost option for my data storage.&lt;/li&gt;
&lt;li&gt;I ended up using &lt;strong&gt;AWS RDS&lt;/strong&gt; for my MySQL database. If you sign up for a free tier account with AWS, you're eligible for &lt;strong&gt;750 hours&lt;/strong&gt; of RDS instances and &lt;strong&gt;20GB&lt;/strong&gt; of storage. Even if after you have used up your free tier credits, the cost to host a MySQL database on Amazon RDS is still much lower compared to JawsDB. Therefore, I needed to modify the code in the GitHub repo to re-configure the add-ons. More on that later!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned above, in order to fix the site preview issue in Ghost, I had to create a proxy server, which is essentially a &lt;strong&gt;Node.js&lt;/strong&gt; app, which is also hosted on Heroku.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-blogging-workflow"&gt;
  &lt;/a&gt;
  My blogging workflow
&lt;/h2&gt;

&lt;p&gt;With this setup, here is my typical workflow just so that you can understand what it looks like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Edit site template&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Edit and test site locally&lt;/li&gt;
&lt;li&gt;Commit and push changes to GitHub&lt;/li&gt;
&lt;li&gt;Netlify automatically builds and deploys the site&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Publish new content&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Add/remove/edit posts locally and publish from the Ghost Admin Client app&lt;/li&gt;
&lt;li&gt;Netlify automatically builds and deploys the site based on change detection settings in Netlify's build hook. Below is an image, taken from Ghost's website, just to give you an idea of what the UI for the Admin Client app looks like.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--COK_ea6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res-5.cloudinary.com/under-the-hood-learning/image/upload/q_auto/v1/blog_images/post-list-1600.png" alt="How I Created My Blog Using JAMStack" width="880" height="500"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it. Sounds simple, huh?üòé Well, if you like what you hear and are still interested, join me in the next part of this series where I will be sharing tutorials on how I set up my site. See you there! üëã&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photo-credits"&gt;
  &lt;/a&gt;
  Photo Credits:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.freepik.com/vectors/technology"&gt;Technology vector created by pch.vector - www.freepik.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freepik.com/vectors/technology"&gt;Technology vector created by stories - www.freepik.com&lt;/a&gt;
&amp;lt;!--kg-card-end: markdown--&amp;gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>jamstack</category>
      <category>tutorials</category>
    </item>
    <item>
      <title>Flask user authentication with JWT</title>
      <author>Bek Brace</author>
      <pubDate>Wed, 01 Dec 2021 14:31:32 +0000</pubDate>
      <link>https://dev.to/bekbrace/flask-user-authentication-with-jwt-26aj</link>
      <guid>https://dev.to/bekbrace/flask-user-authentication-with-jwt-26aj</guid>
      <description>&lt;p&gt;This is a video tutorial that explains first what is Json Web Token and how is it different from cookies based sessions.&lt;/p&gt;

&lt;p&gt;Then we move on to create a simple Python program using Flask micro framework, which demonstrates user authentication with JWTs.&lt;/p&gt;

&lt;p&gt;Here's the video :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_3NKBHYcpyg"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  Social Media  
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/BekBrace"&gt;https://twitter.com/BekBrace&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://github.com/BekBrace‚Äã‚Äã‚Äã&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com"&gt;https://bekbrace.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-used-in-video"&gt;
  &lt;/a&gt;
  Tools used in video:
&lt;/h2&gt;

&lt;p&gt;Microphone used in recording Blue Yeti&lt;br&gt;
To check it out on Amazon : &lt;a href="https://amzn.to/3lh6GdA"&gt;https://amzn.to/3lh6GdA&lt;/a&gt;&lt;br&gt;
Coding on Logitech G PRO Mechanical Gaming Keyboard&lt;br&gt;
To check it out on Amazon : &lt;a href="https://amzn.to/3G4gH5T"&gt;https://amzn.to/3G4gH5T&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Join the Channel : &lt;a href="https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg"&gt;https://www.youtube.com/channel/UC7EVSn5inapL20oPSwAwEUg&lt;/a&gt;&lt;br&gt;
OR&lt;br&gt;
‚òï Buy Me A Coffee : &lt;a href="https://www.buymeacoffee.com/bekbrace"&gt;https://www.buymeacoffee.com/bekbrace&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>security</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Best Angular Tutorials For Beginners 2022üë®‚Äçüíª</title>
      <author>ThemeSelection</author>
      <pubDate>Wed, 01 Dec 2021 14:25:19 +0000</pubDate>
      <link>https://dev.to/theme_selection/the-best-angular-tutorials-for-beginners-2022-1cd9</link>
      <guid>https://dev.to/theme_selection/the-best-angular-tutorials-for-beginners-2022-1cd9</guid>
      <description>&lt;p&gt;Are you starting your journey with Angular? Then here are some of the best Angular tutorials for beginners that will help you to start with.&lt;/p&gt;

&lt;p&gt;Before we start the collection, here is a short intro of Angular.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-angular"&gt;
  &lt;/a&gt;
  What Is Angular?
&lt;/h1&gt;

&lt;p&gt;Well, &lt;strong&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;&lt;/strong&gt; is a TypeScript-based open-source front-end web application platform led by the Angular Team at Google and by a community of individuals and corporations to address all of the parts of the developer's workflow while building complex web applications. Angular is a complete rewrite from the same team that built AngularJS.&lt;/p&gt;

&lt;p&gt;It is a framework for building client applications in HTML and either JavaScript or a language like TypeScript that compiles to JavaScript. Angular also combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. Besides, Angular empowers developers to build applications that live on the web, mobile, or the desktop.&lt;/p&gt;

&lt;p&gt;Companies like &lt;a href="https://www.google.com/"&gt;Google&lt;/a&gt;, &lt;a href=""&gt;Forbes&lt;/a&gt;, &lt;a href="https://www.paypal.com/"&gt;PayPal&lt;/a&gt;, &lt;a href="https://www.db.com/"&gt;Deutsche Bank&lt;/a&gt;, &lt;a href="https://www.upwork.com/"&gt;UpWork&lt;/a&gt;, &lt;a href="https://www.theguardian.com/"&gt;The Guardian&lt;/a&gt; uses Angular.&lt;/p&gt;

&lt;p&gt;Before you go through the list you can check some of the best &lt;strong&gt;&lt;a href="https://themeselection.com/angular-admin-template/"&gt;Angular admin template free download&lt;/a&gt;&lt;/strong&gt;. You may also like the collection of &lt;a href="https://themeselection.com/angular-ui-component-libraries/"&gt;&lt;strong&gt;Angular UI Component Libraries&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themeselection.com/products/materio-free-vuetify-vuejs-admin-template/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qvPzo-dW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ku8x2n7cdhpr38vfhf8.png" alt="Materio Free VueJS Admin Template" width="880" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-angular"&gt;
  &lt;/a&gt;
  Advantages Of Angular:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Effective Cross-Platform Development&lt;/li&gt;
&lt;li&gt;  High Quality of the Application&lt;/li&gt;
&lt;li&gt;  Improved Speed and Performance&lt;/li&gt;
&lt;li&gt;  Faster Development Process&lt;/li&gt;
&lt;li&gt;  Readable and Testable Code&lt;/li&gt;
&lt;li&gt;  More Lightweight Web Applications&lt;/li&gt;
&lt;li&gt;  Efficient Problem-Solving Patterns&lt;/li&gt;
&lt;li&gt;  Excellent Material Design Library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While working with Angular project, you may check &lt;a href="https://themeselection.com/go/download-vuexy-vuejs/"&gt;Vuexy ‚Äì Angular Admin Dashboard Template&lt;/a&gt;. It is made using &lt;a href="https://ng-bootstrap.github.io/"&gt;&lt;strong&gt;ng bootstrap&lt;/strong&gt;&lt;/a&gt; and Angular CLI. If you‚Äôre a developer looking for an admin dashboard that is developer-friendly, rich with features, and highly customizable look no further than Vuexy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themeselection.com/go/download-vuexy-vuejs/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k4pgp1yN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm9edjt4ebojia0adw7t.jpg" alt="Vuexy Angular Admin Template" width="880" height="563"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moreover, it offers highly distinctive and useful tools such as fuzzy search, bookmarks, floating nav bar, dark and semi-dark layout options, advance cards, data-table, and charts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Angular CLI + NgBootstrap&lt;/li&gt;
&lt;li&gt;  AOT + Lazy Loading&lt;/li&gt;
&lt;li&gt;  Sketch and Figma Files added&lt;/li&gt;
&lt;li&gt;  Role based JWT AUTH&lt;/li&gt;
&lt;li&gt;  API Ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://themeselection.com/go/download-vuexy-vuejs/"&gt;Download&lt;/a&gt; &lt;a href="https://pixinvent.com/demo/vuexy-angular-admin-dashboard-template/landing/"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, Let's start the collection:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kAf5BT6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8n5detahma30xawy20m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kAf5BT6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r8n5detahma30xawy20m.gif" alt="Check this out" width="498" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#official-resources-and-community"&gt;
  &lt;/a&gt;
  Official Resources and Community
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angular.io/start"&gt;Getting started with Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/angular"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/tagged/angular?tab=Votes"&gt;Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#youtube-angular-tutorials"&gt;
  &lt;/a&gt;
  YouTube Angular Tutorials:
&lt;/h2&gt;

&lt;p&gt;Following are some of the best Angular Tutorials For beginners.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular-tutorial-for-beginners-web-framework-with-typescript-course"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=AAu8bjj6-UI"&gt;Angular Tutorial for Beginners - Web Framework with Typescript Course&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AAu8bjj6-UI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Learn the basics of Angular in this full course for beginners.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Course Contents:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Components, Lifecycle hooks, Text interpolation&lt;/li&gt;
&lt;li&gt;Components Communication, Component Styles&lt;/li&gt;
&lt;li&gt;Ng-Content &lt;/li&gt;
&lt;li&gt;Template Statements&lt;/li&gt;
&lt;li&gt;Pipes &lt;/li&gt;
&lt;li&gt;Property Binding&lt;/li&gt;
&lt;li&gt;Attribute, Class &amp;amp; Style and many more&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-12-tutorial-for-beginners"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=oMj95u2zK4Y&amp;amp;list=PL8p2I9GklV47eNpoo4Fr6fkags72a8F0v"&gt;Angular 12 tutorial for beginners&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oMj95u2zK4Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this angular 12 version video we learn what is angular and we learn basic things about angular courses.&lt;/p&gt;

&lt;p&gt;Course Covers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up and install&lt;/li&gt;
&lt;li&gt;Files and folder structure&lt;/li&gt;
&lt;li&gt;Interpolation&lt;/li&gt;
&lt;li&gt;Angular CLI and Important commands&lt;/li&gt;
&lt;li&gt;Component with Inline Style and Template and many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-crash-course"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=3dHNOWTI7H8"&gt;Angular Crash Course&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3dHNOWTI7H8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Learn the fundamentals of Angular in this project-based crash course. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Topics covered:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intro &amp;amp; Slides &lt;/li&gt;
&lt;li&gt;Angular CLI &amp;amp; Setup&lt;/li&gt;
&lt;li&gt;Files &amp;amp; Folders &lt;/li&gt;
&lt;li&gt;Component structure&lt;/li&gt;
&lt;li&gt;Properties &amp;amp; Interpolation&lt;/li&gt;
&lt;li&gt;Global Styles &lt;/li&gt;
&lt;li&gt;Header Component and many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-12-tutorial"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=88rSZG2mUYs"&gt;Angular 12 Tutorial&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/88rSZG2mUYs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This Edureka Angular Full Course video will help you understand and learn the fundamentals of Angular. This Angular Tutorial is ideal for both beginners as well as professionals who want to master various concepts of Angular. Topics covered in this video are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Building Blocks of Web Development&lt;/li&gt;
&lt;li&gt;Introduction to Angular&lt;/li&gt;
&lt;li&gt;Angular Architecture &lt;/li&gt;
&lt;li&gt;Angular Installation &amp;amp; Setup Angular CLI  Files and Folders &lt;/li&gt;
&lt;li&gt;Angular Components&lt;/li&gt;
&lt;li&gt;Angular Templates&lt;/li&gt;
&lt;li&gt;Angular Modules and many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-modern-angular-crash-course"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=WHv1YQUg6ow"&gt;The Modern Angular Crash Course&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WHv1YQUg6ow"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This one is the latest 3 part series Angular tutorial. In this part they have covered the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intro &lt;/li&gt;
&lt;li&gt;Creating an Angular App &lt;/li&gt;
&lt;li&gt;HTML Template &lt;/li&gt;
&lt;li&gt;Scoped &amp;amp; Global Styling &lt;/li&gt;
&lt;li&gt;State &lt;/li&gt;
&lt;li&gt;Event Handling &lt;/li&gt;
&lt;li&gt;Structural Directives &lt;/li&gt;
&lt;li&gt;Attribute Directives Adding Complex Logic &lt;/li&gt;
&lt;li&gt;Components &lt;/li&gt;
&lt;li&gt;Pipes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-12-crud-with-web-api-tutorial"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=l-ntYAm76yY"&gt;Angular 12 CRUD with Web API Tutorial&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/l-ntYAm76yY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;A 4 part series angular tutorial about Angular 12 CRUD with Web API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#courses"&gt;
  &lt;/a&gt;
  Courses:
&lt;/h2&gt;

&lt;p&gt;Following are some useful tutorials for Angular developers. These angular courses will help you start with Angular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-complete-guide-to-angular"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/the-complete-guide-to-angular-2/"&gt;The Complete Guide To Angular&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92XDoh0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jua87s7s8bbkvc2z91ms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92XDoh0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jua87s7s8bbkvc2z91ms.png" alt="The Complete Guide To Angular" width="880" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This course is for everyone from beginner to experienced. Aim of the course is to teach you all the fundamentals about directives, modules, databinding components, routing, HTTP access and many more. You will go through the detailed sections, backed up with a real project. This course will also show you how to use the Angular CLI and feature a real life complete project. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You will learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to use TypeScript to write Angular applications&lt;/li&gt;
&lt;li&gt;How databinding works&lt;/li&gt;
&lt;li&gt;Fully understand the architecture behind an Angular application and how to use it&lt;/li&gt;
&lt;li&gt;All about routing and handling navigation&lt;/li&gt;
&lt;li&gt;What Pipes are and how to use them&lt;/li&gt;
&lt;li&gt;How to access the Web (e.g. RESTful servers)&lt;/li&gt;
&lt;li&gt;What dependency injection is and how to use it and many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-12-complete-beginners-guide"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/learning-angular/"&gt;Angular 12 - Complete Beginner's Guide&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RxAcnknJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ncl1lp4linkse5qz8tmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RxAcnknJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ncl1lp4linkse5qz8tmp.png" alt="Angular 12 - Complete Beginner's Guide" width="880" height="353"&gt;&lt;/a&gt;&lt;br&gt;
The course is aimed learn Angular 12 and the detailed planning needed for creating a real life Angular application. This course will help you to create applications from  scratch &amp;amp; maintainable for increasing the scale of it as well. The course covers the Planning for angular application Components, Services &amp;amp; Dependency Injection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You'll learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modern Frontend Web Development&lt;/li&gt;
&lt;li&gt;In-depth understanding of Angular fundamentals&lt;/li&gt;
&lt;li&gt;Developing Angular applications&lt;/li&gt;
&lt;li&gt;Understanding Single Page Applications&lt;/li&gt;
&lt;li&gt;Adding RESTAPI Communication to your Angular application &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-core-deep-dive-beginner-to-advanced"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/angular-course/"&gt;Angular Core Deep Dive - Beginner to Advanced&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZg80jom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j32dilg0yn86j3wayscm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZg80jom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j32dilg0yn86j3wayscm.png" alt="Angular Core Deep Dive " width="880" height="377"&gt;&lt;/a&gt;&lt;br&gt;
This course gives you advanced practical knowledge of the Angular. After taking this course you will be able to build Angular Applications. You will also have a detailed understanding of everything that is made available by the Angular framework core modules. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You'll learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Code in GitHub repository with downloadable ZIP files per section&lt;/li&gt;
&lt;li&gt; Understand key questions about Angular: Why Angular, what are the benefits?&lt;/li&gt;
&lt;li&gt; Know how to build and style your own custom Angular Components&lt;/li&gt;
&lt;li&gt; Learn in detail all the functionality available in Core Directives &lt;/li&gt;
&lt;li&gt; Have in-depth knowledge how to build custom Attribute and Structural Directives&lt;/li&gt;
&lt;li&gt; Learn all about Angular Elements (Advanced)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#build-an-app-with-aspnet-core-and-angular-from-scratch"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/build-an-app-with-aspnet-core-and-angular-from-scratch/"&gt;Build an app with ASPNET Core and Angular from scratch&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--niIRfoDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zshhjen3xnbxcfnes4q4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--niIRfoDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zshhjen3xnbxcfnes4q4.png" alt="Angular beginner tutorials" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This angular tutorial for beginners is very practical. In this course you'll build a real life dating application from start to finish and every line of code are explained very well. On this course you will build an example Dating Application, completely from scratch using the .NET CLI and the Angular CLI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You'll Learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Setting up the developer environment&lt;/li&gt;
&lt;li&gt;  Creating the ASP .NET Core WebAPI and the Angular app using the DotNet CLI and the Angular CLI&lt;/li&gt;
&lt;li&gt;  Adding a Client side login and register function to our Angular application&lt;/li&gt;
&lt;li&gt;  Adding 3rd party components to add some pizzazz to the app&lt;/li&gt;
&lt;li&gt;  Adding routing to the Angular application and securing routes.&lt;/li&gt;
&lt;li&gt;  Using AutoMapper in ASP .NET Core&lt;/li&gt;
&lt;li&gt;  Building a great looking UI using Bootstrap and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#routing-and-navigation-concepts-in-angular"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.coursera.org/projects/routing-and-navigation-concepts-in-angular"&gt;Routing and Navigation Concepts in Angular&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5-4BaGw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoxa5qe0wv214utq40x9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-4BaGw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aoxa5qe0wv214utq40x9.png" alt="Routing and Navigation Concepts in Angular" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the end of this project, you will be able to create and build routing and navigation user interface in Angular. You will also learn the basic concepts related to routing and navigation like configuring routes, understanding parent and child routes, handling invalid URLs, and route parameters etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Topics covered:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Generate Components required for the project&lt;/li&gt;
&lt;li&gt;Configure Rotes and Router Module&lt;/li&gt;
&lt;li&gt;Add buttons and use directives to navigate between the components&lt;/li&gt;
&lt;li&gt;Handle Invalid URL's&lt;/li&gt;
&lt;li&gt;Handle Empty path scenario&lt;/li&gt;
&lt;li&gt;Enable Route Parameters&lt;/li&gt;
&lt;li&gt;Child Routing in Angular&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-certification-training-course"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.edureka.co/angular-training"&gt;Angular Certification Training Course&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLAZh6fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/375bdsznlm8qbijtmx16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLAZh6fo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/375bdsznlm8qbijtmx16.png" alt="Angular Certification Training Course" width="880" height="286"&gt;&lt;/a&gt;&lt;br&gt;
This course will help you to develop efficient Angular applications by mastering the concepts of Angular 12. After completing this Angular training online , you will be able to build responsive, dynamic, and interactive web applications using Angular concepts such as Angular Modules, Components, Databinding, Angular Forms, Angular Directives etc. You will also learn how to install Angular and make use of NPM packages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You'll learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Create Angular components using TypeScript&lt;/li&gt;
&lt;li&gt;  Interact with raw DOM elements using directives&lt;/li&gt;
&lt;li&gt;  Inject services using Dependency Injection&lt;/li&gt;
&lt;li&gt;  Fetch data and capture it using observables&lt;/li&gt;
&lt;li&gt;  Configure Angular Router to modularize applications&lt;/li&gt;
&lt;li&gt;  Perform form-validation&lt;/li&gt;
&lt;li&gt;  Deploy applications using Docker and Nginx&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books:
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#angular-projects-build-modern-web-apps-by-exploring-angular-12"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.amazon.com/Angular-Projects-exploring-cutting-edge-technologies/dp/1800205260/"&gt;Angular Projects: Build Modern Web Apps by Exploring Angular 12&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNLtQPUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7xb6wcjqdjojdcqtfyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNLtQPUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7xb6wcjqdjojdcqtfyy.png" alt="Angular projects" width="642" height="882"&gt;&lt;/a&gt;&lt;br&gt;
As you go through the book, you will learn how to implement popular technologies such as Angular Router, Scully, Electron, Angular service worker, Nx monorepo tools, NgRx, and more while building an issue tracking system, a PWA weather application, a mobile photo geotagging application, a component UI library, and many other exciting projects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-you-will-learn"&gt;
  &lt;/a&gt;
  What you will learn
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  Set up Angular applications using Angular CLI and Nx Console&lt;/li&gt;
&lt;li&gt;  Create a personal blog with Jamstack and SPA techniques&lt;/li&gt;
&lt;li&gt;  Build desktop applications with Angular and Electron&lt;/li&gt;
&lt;li&gt;  Enhance user experience (UX) in offline mode with PWA techniques&lt;/li&gt;
&lt;li&gt;  Make web pages SEO-friendly with server-side rendering&lt;/li&gt;
&lt;li&gt;  Create a monorepo application using Nx tools and NgRx for state management&lt;/li&gt;
&lt;li&gt;  Focus on mobile application development using Ionic&lt;/li&gt;
&lt;li&gt;  Develop custom schematics by extending Angular CLI &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-ngbook-a-complete-book-on-angular"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.amazon.com/ng-book-Complete-Angular-Nathan-Murray/dp/1985170280/"&gt;The Ng-book ‚Äî A Complete Book on Angular&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9TnQeLqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnowtvu6tojof6x6umer.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9TnQeLqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnowtvu6tojof6x6umer.jpg" alt="Ng book" width="880" height="1139"&gt;&lt;/a&gt;&lt;br&gt;
ng-book is designed to teach you step-by-step how to create serious Angular apps: from empty-folder to deployment. Each chapter covers a topic and we provide  full code examples  for every project in the book. The book also describes how to write and test mobile apps with NativeScript. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The book covers:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Dependency Injection&lt;/li&gt;
&lt;li&gt;  Data Architecture in Angular 2&lt;/li&gt;
&lt;li&gt;  Data Architecture with Observables and RxJS&lt;/li&gt;
&lt;li&gt;  Data Architecture with Redux&lt;/li&gt;
&lt;li&gt;  Redux and TypeScript&lt;/li&gt;
&lt;li&gt;  Data Architecture with Redux&lt;/li&gt;
&lt;li&gt;  Advanced Components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-from-theory-to-practice-build-the-web-applications-using-angular"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.amazon.com/Angular-Practice-applications-tomorrow-framework-ebook/dp/B01N9S0CZN/"&gt;Angular: From Theory To Practice: Build the web applications Using Angular&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nsTCsyIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14pvrq8tfbp87ks6wnqt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsTCsyIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14pvrq8tfbp87ks6wnqt.jpg" alt="Angular: From Theory To Practice" width="384" height="500"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;You'll learn:&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand the latest features of ES6 JavaScript and TypeScript.
&lt;/li&gt;
&lt;li&gt;Build an Angular application from scratch using TypeScript and the Angular command-line interface.
&lt;/li&gt;
&lt;li&gt;Write code using the paradigm of reactive programming with RxJS and Observables.
&lt;/li&gt;
&lt;li&gt;Know how to Unit Test Angular using Jasmine, Karma and the Angular Test Bed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-cookbook"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.amazon.com/Angular-Cookbook-recipes-enterprise-scale-development/dp/1838989439?"&gt;Angular Cook-book&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eXbjXFL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e26zz1wczqz2av1ap1zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXbjXFL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e26zz1wczqz2av1ap1zx.png" alt="Angular cook book" width="402" height="494"&gt;&lt;/a&gt;&lt;br&gt;
From Angular concepts such as Angular components, directives, and services to get you ready for building frontend web apps, this is one of the best book for Angular. You'll learn to develop web components with Angular and go on to cover advanced concepts such as dynamic components loading and state management with NgRx for achieving real-time performance. By the end of the book you'll be able to create full-fledged, professional-looking, Progressive Web Apps (PWA) with Angular to provide an intuitive experience for users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You'll learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Gain a better understanding of how components, services, and directives work in Angular&lt;/li&gt;
&lt;li&gt;  Understand how to create Progressive Web Apps using Angular from scratch&lt;/li&gt;
&lt;li&gt;  Build rich animations and add them to your Angular apps&lt;/li&gt;
&lt;li&gt;  Manage your app's data reactivity using RxJS&lt;/li&gt;
&lt;li&gt;  Implement state management for your Angular apps with NgRx&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;So, here was the collection of best Angular Tutorials For Beginners 2022. In this collection we have covered some of the most recommended angular tutorials for beginners by the best tutors.&lt;/p&gt;

&lt;p&gt;Intention here is to provide you the best learning recourses for angular. Do let us know if you have any suggestions for other useful Angular tutorials and recourses for beginners in the comment section below.&lt;/p&gt;

&lt;p&gt;We hope you find this collection helpful. Also, don't forget to share.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Choose How You Build w/ Theo Browne
</title>
      <author>Mikhail Karan</author>
      <pubDate>Wed, 01 Dec 2021 13:54:59 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/how-to-choose-how-you-build-w-theo-browne-29jj</link>
      <guid>https://dev.to/mikhailkaran/how-to-choose-how-you-build-w-theo-browne-29jj</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/0JmgUZmLYiQnPqmkI3TdYo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-sponsors"&gt;
  &lt;/a&gt;
  Episode Sponsors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#shortcut"&gt;
  &lt;/a&gt;
  Shortcut
&lt;/h3&gt;

&lt;p&gt;Project management has never been easier.&lt;/p&gt;

&lt;p&gt;We bring the flow to your software team's workflow. Plan, collaborate, build, and measure success with Shortcut.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://shortcut.com/hatt"&gt;FREE Trial for Shortcut&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codecast"&gt;
  &lt;/a&gt;
  CodeCast
&lt;/h3&gt;

&lt;p&gt;Level up your JavaScript skills with a daily coding challenge from December 1st to 24th. Every day, we'll pick a winner who gets Scrimba Pro for a year (worth $150). On Christmas Eve, a winner gets $1000.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scrimba.com/learn/javascriptmas2021"&gt;24 days of #JavaScriptmas&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcements"&gt;
  &lt;/a&gt;
  Announcements
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Svelte for Beginners&lt;/strong&gt; Udemy course is now live! Mike took his experience in teaching and learning Svelte and created a course. &lt;/p&gt;

&lt;p&gt;This course will teach you the fundamentals of JavaScript frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get it now on Udemy!&lt;/strong&gt; üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/svelte-for-beginners/?couponCode=HATTSALE"&gt;Svelte For Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;In this episode Matt and Mike sit down with Theo Browne to discuss his journey from working at Twitch, to starting his own thing making creator tools. The guys have a conversation around choosing the right technology for the job and what to do when the wrong one is chosen (even if you've already started!). They also discuss the transition from employee to entrepreneur, and how difficult it can be to be coding all alone with no feedback - even if you're a senior developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guest-introduction"&gt;
  &lt;/a&gt;
  Guest Introduction
&lt;/h2&gt;

&lt;p&gt;Today we'll be talking to Theo, an ex Twitch engineer. He sacrificed stability and took the plunge to create a product for streamers and creators, Round. We'll talk about his development process and get his advice for Junior developers looking to break into the industry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/t3dotgg"&gt;Theo's Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://round.t3.gg/"&gt;Round T3 Tools&lt;/a&gt; &lt;br&gt;
&lt;a href="https://osrg.t3.gg/"&gt;The Open Source Raid Guild&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You're starting a new project (let's take T3 tools as an example). How do you choose your tech stack?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You run into serious technical issues. What is your process for getting through them?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When do you need to focus on design and engineering principles vs building fast and getting the task done?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What were some of your biggest challenges when creating T3 tools?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you transition from being a solo founder to managing a team while also being the lead developer?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I know some junior developers struggle with breaking into the industry. Do you have any advice for them on how to stand out?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Problems are chasms that should be filled/closed rather then building a bridge&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The corporate hiring process puts you as a cog in a machine, there are other paths into the industry&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;If you're enjoying the podcast consider giving us a review on &lt;a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136"&gt;Apple Podcasts&lt;/a&gt; or checking out our Patreon to get a shoutout on the podcast. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.patreon.com/htmlallthethings"&gt;Support us on Patreon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>O poder de uma boa intelig√™ncia artificial</title>
      <author>Isabella Herman</author>
      <pubDate>Wed, 01 Dec 2021 13:35:55 +0000</pubDate>
      <link>https://dev.to/isabellaherman/o-poder-de-uma-boa-inteligencia-artificial-bpj</link>
      <guid>https://dev.to/isabellaherman/o-poder-de-uma-boa-inteligencia-artificial-bpj</guid>
      <description>&lt;p&gt;&lt;em&gt;English version&lt;/em&gt; &lt;a href="https://dev.to/isabellaherman/the-power-of-a-good-artificial-intelligence-228i"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cada vez mais as &lt;em&gt;I.A.‚Äôs&lt;/em&gt; (Intelig√™ncia Artificial) est√£o presentes no nosso dia a dia. Desde assistentes virtuais que te contam uma piada, te contam curiosidade, ligam as l√¢mpadas e fecham as portas da sua casa at√© solu√ß√µes em grandes empresas corporativas.&lt;/p&gt;

&lt;p&gt;Se fosse poss√≠vel dar um pulo na d√©cada de 50, ir√≠amos acompanhar o surgimento das IA‚Äôs nos jogos e ver que IA em videogames √© uma ramifica√ß√£o distinta e diferente da IA ‚Äã‚Äãacad√™mica, e o principal motivo √© que ela lida e reflete comportamentos humanos.&lt;/p&gt;

&lt;p&gt;Os seres humanos n√£o s√£o m√°quinas, fomos feitos para viver em sociedade, conversamos com quem nos identificamos. Nesse artigo eu descarto a ideia de ‚Äúos opostos se atraem‚Äù. O jogador tem que se identificar com o mundo e uma boa IA vai te ajudar nisso.&lt;/p&gt;

&lt;p&gt;Do ponto de vista t√©cnico uma IA para jogos nada mais √© que um monte de condi√ß√µes: &lt;em&gt;‚Äúif‚Äù&lt;/em&gt; aqui, &lt;em&gt;‚Äúif‚Äù&lt;/em&gt; ali, &lt;em&gt;‚Äúif‚Äù&lt;/em&gt; l√°. Mas se essas condi√ß√µes partirem de um olhar cr√≠tico do ponto de vista psicol√≥gico, o jogo muda.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ia-vs-mente-do-jogador"&gt;
  &lt;/a&gt;
  IA vs MENTE DO JOGADOR
&lt;/h2&gt;

&lt;p&gt;Os jogadores n√£o querem uma boa IA no seu jogo. Os jogadores querem experi√™ncias que fa√ßam eles se sentirem no poder, se sentirem bons em algo, querem ser recompensados com a vit√≥ria. Os seres humanos n√£o s√£o m√°quinas, temos rea√ß√µes que devem ser exploradas pelo game design.&lt;/p&gt;

&lt;p&gt;‚ÄúAh, mas se os jogadores n√£o gostam de uma IA dif√≠cil, por que Dark Souls faz tanto sucesso?‚Äù A resposta √© simples. A IA de Dark Souls n√£o √© dif√≠cil, o jogo tamb√©m n√£o. Ele s√≥ trabalha numa soft skill muito rara nas pessoas hoje em dia: a paci√™ncia. Paci√™ncia em esperar para ler e entender os passos de cada agente do jogo. &lt;br&gt;
√â t√£o simples, mas como √© uma dificuldade real nos dias de hoje, o jogador se sente o melhor do mundo ao vencer um combate. &lt;/p&gt;

&lt;p&gt;Ficou claro a diferen√ßa de complexidade e desafio? O design e aplica√ß√£o de IA‚Äôs devem ser desenhados para estimular uma sensa√ß√£o de superioridade e controle, com o jogador enfrentando situa√ß√µes que equilibram a dificuldade.&lt;/p&gt;

&lt;p&gt;Por exemplo, voc√™ est√° produzindo um jogo que se passa na segunda guerra mundial. Em um cen√°rio de guerra √© normal encontrarmos inimigos armados, bombas de fuma√ßa, minas terrestres, tanques de guerra, autom√≥veis blindados, etc.&lt;br&gt;
Voc√™ pensou em uma miss√£o onde o jogador ter√° que parar o avan√ßo de um caminh√£o blindado carregado com suprimentos para o ex√©rcito inimigo. O caminh√£o tem uma vida X e pode explodir com o jogador atirando explosivos por exemplo, mas quanto tempo isso levaria? A resist√™ncia de um autom√≥vel blindado √© muito mais forte do que o poder destrutivo do armamento do jogador, podendo causar uma experi√™ncia cansativa com o passar do tempo.&lt;/p&gt;

&lt;p&gt;Com uma IA podemos achar solu√ß√µes mais interessantes. O caminh√£o √© muito forte por√©m ele √© dirigido provavelmente por um NPC (non-player character), ent√£o como o jogador pode tirar a aten√ß√£o desse NPC pra que ele pare o caminh√£o, des√ßa para ver o que est√° acontecendo, assim permitindo um combate mais justo e uma experi√™ncia de vit√≥ria positiva? O jogador pode usar bombas de fuma√ßa, arremessar objetos, usar sinalizador entre outros eventos que fa√ßam sentido no contexto.&lt;br&gt;
Uma simples condi√ß√£o com o olhar voltado ao psicol√≥gico do jogador, gerou um sentimento de vit√≥ria e superioridade dele em rela√ß√£o ao jogo. Entender as rea√ß√µes emocionais do jogador que est√£o ligadas com as a√ß√µes do jogo √© fundamental.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#o-papel-da-ia-na-imers%C3%A3o"&gt;
  &lt;/a&gt;
  O PAPEL DA IA NA IMERS√ÉO
&lt;/h2&gt;

&lt;p&gt;Um grande erro dos jogos quando o assunto √© imers√£o, √© colocar o jogador como o √∫nico ser vivo do jogo, o que n√£o est√° errado em teoria, mas como criadores de jogos, precisamos ser mais c√©ticos com a realidade.&lt;/p&gt;

&lt;p&gt;A franquia GTA tem sua import√¢ncia e notoriedade na ind√∫stria, e vende a ideia de um universo com experi√™ncia realista de mundo aberto, que parece mais um simulador de dirigir carro. Voc√™ entra no carro, vai do ponto A ao B e todo universo do jogo praticamente para, esperando o jogador concluir o que estava fazendo.&lt;br&gt;
Experi√™ncia de um mundo aberto onde o centro das aten√ß√µes √© o personagem principal n√£o funciona. O personagem principal deve ser o centro de aten√ß√£o do jogador, n√£o do mundo.&lt;/p&gt;

&lt;p&gt;Vamos fazer uma analogia da nossa vida como se estivesse representada em um jogo. Hoje voc√™ precisa acordar e ir para o trabalho, esse √© o compromisso mais importante do dia ent√£o essa √© sua &lt;strong&gt;miss√£o principal&lt;/strong&gt;. Enquanto se arruma para o trabalho voc√™ come√ßa sentir uma azia, √†s vezes √© pela comida mexicana que voc√™ jantou na noite passada e ent√£o decide passar em uma farm√°cia a caminho do trabalho. Diferente do trabalho, voc√™ n√£o necessariamente precisa ir na farm√°cia, mas vai te beneficiar em algo al√©m de ter liga√ß√£o com alguma a√ß√£o do seu dia, ent√£o essa passa a ser sua &lt;strong&gt;miss√£o secund√°ria&lt;/strong&gt;. &lt;br&gt;
At√© a√≠ bem comum como nos jogos, mas a vida n√£o para a√≠. N√£o para a√≠ porque o mundo √© muito maior e existem outras pessoas, vari√°veis, acontecimentos, etc, que devem ser levados em conta se voc√™ tem uma proposta de mundo aberto.&lt;/p&gt;

&lt;p&gt;No Far Cry 4 existe uma IA diretora que se assegura de manter o universo vivo. Novamente levando em conta a tem√°tica de guerra, √© de se esperar que existam pessoas precisando de ajuda, n√£o s√≥ em situa√ß√µes de sequestro ou invas√µes, mas tamb√©m em ajuda de arrumar algo que quebrou, e a realidade delas n√£o deve ter nenhuma rela√ß√£o com voc√™, jogador, que est√° no papel de um rec√©m chegado do ex√©rcito.&lt;/p&gt;

&lt;p&gt;Qual seria o sentido de colocar um evento aleat√≥rio como esse no seu mini mapa? Nenhum. Mas ele ainda est√° l√°, porque o universo de um jogo de mundo aberto √©, e deve ser maior que o universo do personagem principal. E √© a√≠ que a magia da imers√£o do Far Cry 4 entra. Se voc√™ estiver usando fone √© poss√≠vel ouvir os NPCs te chamando, sem nenhum aviso na tela, perguntando se voc√™ pode ajudar, tal qual seria no mundo real.&lt;/p&gt;

&lt;p&gt;Esse mesmo exemplo se aplica ao GTA, √© comum conforme o jogo desenrole apare√ßa no minimapa do jogador um s√≠mbolo de pessoas aleat√≥rias que voc√™ pode oferecer carona, mesmo essas n√£o tendo rela√ß√£o alguma com a &lt;em&gt;lore&lt;/em&gt; do personagem. &lt;/p&gt;

&lt;p&gt;Mas sejamos honestos, um dos maiores desafios dos desenvolvedores de jogos √© montar um sistema de jogo mundo aberto que funcione, construindo eventos interessantes e diversificados para os jogadores explorarem, e se ao longo desses anos de franquia a RockStar pecou nesse quesito, ela com certeza j√° se redimiu com o t√≠tulo Red Dead Redemption 2, na qual IA atua na imers√£o do universo com maestria.&lt;/p&gt;

&lt;p&gt;As compara√ß√µes de Far Cry 4 e Grand Theft Auto V param por aqui, mas vamos explorar tecnicamente como a IA diretora comanda todo territ√≥rio do jogo e faz ele parecer mais vivo.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ia-diretora-na-pr%C3%A1tica"&gt;
  &lt;/a&gt;
  IA DIRETORA NA PR√ÅTICA
&lt;/h2&gt;

&lt;p&gt;Primeiro vamos entender o conceito de &lt;em&gt;Systemic AI&lt;/em&gt; (IA Sist√™mica), uma estrutura sist√™mica dependente de NPC's: inimigos, civis, aliados, animais, etc. &lt;br&gt;
Cada agente NPC citado tem sua pr√≥pria estrutura de comportamento e gerenciar todos eles juntos n√£o √© uma tarefa simples e muito menos f√°cil, √© agora que a IA diretora entra.&lt;/p&gt;

&lt;p&gt;Uma IA Diretora cujo o nome √© bem sugestivo, assim como o diretor de uma organiza√ß√£o, controla o ritmo, adequa√ß√£o e intensidade dos eventos de um jogo.&lt;/p&gt;

&lt;p&gt;A imers√£o do universo de Far Cry 4 √© sem d√∫vidas uma das melhores que j√° joguei, levando em conta a √©poca que o t√≠tulo foi lan√ßado e as melhorias t√©cnicas desde o seu antecessor Far Cry 3, que foram reconhecidas por cr√≠ticos da ind√∫stria, conseguindo uma nota 85 no metacritic.&lt;/p&gt;

&lt;p&gt;A IA diretora de Far Cry 4 monitora os passos do jogador acompanhando o mesmo por um raio de 500 metros, e popula esse raio com os eventos do jogo. Mesmo com o raio limitado, popular esse raio com toda a cadeia sist√™mica teria um custo computacional muito alto, ent√£o a IA diretora conta com a regra de: se o player n√£o v√™, logo, n√£o acontece.&lt;/p&gt;

&lt;p&gt;Somado a essa supervis√£o geral, cada agente NPC √© regido por uma m√°quina de estados finita (FSM), um modelo matem√°tico usado para representar circuitos l√≥gicos muito comum em jogos principalmente pela necessidade de pouco processamento. A FSM de cada agente √© projetada para reagir aos est√≠mulos pr√≥ximos feitos pelo jogador.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w0Fc11XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/898036167361056818/913454000538533929/farcry-4-fsm-isabellaherman.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0Fc11XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/898036167361056818/913454000538533929/farcry-4-fsm-isabellaherman.png" alt="diagrama de FSM" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fiz o diagrama acima analisando o comportamento de um animal carn√≠voro dentro do jogo FC4. Esses t√≥picos representam os comportamentos designado a esse circuito.&lt;/p&gt;

&lt;p&gt;A seguir, os est√≠mulos que desencadeiam as a√ß√µes da FSM:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpC8ZeJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/898036167361056818/913454000257503242/farcry-4-fsm-isabellaherman2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpC8ZeJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/898036167361056818/913454000257503242/farcry-4-fsm-isabellaherman2.png" alt="diagrama de FSM 2" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;L√≥gica dos componentes iniciais do diagrama:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Prey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Predator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;agentBehaviour&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Awake&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Hunting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Eating&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Patrolling&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Recovering&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;agentBehaviour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Awake&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Predator&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//if &amp;gt; se estiver faminto:&lt;/span&gt;
     &lt;span class="n"&gt;agentBehaviour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Patrolling&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;agentBehaviour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Patrolling&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;//achou um type = prey no range:&lt;/span&gt;
  &lt;span class="n"&gt;agentBehaviour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Hunting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;√â claro que para cada um dos casos exibidos existem N fun√ß√µes que devem ser analisadas para completar a l√≥gica de cada um dos estados. Voc√™ pode considerar como um exerc√≠cio analisar o diagrama e terminar a l√≥gica restante ou at√© mesmo criar o seu pr√≥prio diagrama analisando a IA de algum jogo que te agrade.&lt;/p&gt;

&lt;p&gt;Esse √© meu primeiro artigo e espero que ele tenha apresentado um outro ponto de vista em cima de um assunto que cada vez mais se populariza no mundo. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Refer√™ncias:
&lt;/h3&gt;

&lt;p&gt;MAUW, Sjouke. Finite state machine diagram of Protocol 3. Research Gate. Mar√ßo de 1996.&lt;/p&gt;

&lt;p&gt;CARRILLO, Richard. Interviewing For Game Design. GDC Session. 2017.&lt;/p&gt;

&lt;p&gt;THOMPSON, Tommy. The Definition of [Artificial] Insanity: The Systemic AI of Far Cry. Informa, 12 de Outubro de 2017.&lt;/p&gt;

&lt;p&gt;SHUMMON MAASS, Laura. Artificial Intelligence in Video Games. Towards Data Science, 01 de Julho de 2019.&lt;/p&gt;

&lt;p&gt;Davebot. Finite state-machine example. Undefined Games, 24 de Abril de 2019.&lt;/p&gt;

&lt;p&gt;Far Cry 4 Review Page. Metacritic, 18 Novembro de 2014.&lt;/p&gt;

</description>
      <category>ai</category>
      <category>gamedev</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>JavaScript Basic - loops, for loop, for in, for of, forEach, while...</title>
      <author>Dahye Ji</author>
      <pubDate>Wed, 01 Dec 2021 13:33:44 +0000</pubDate>
      <link>https://dev.to/daaahailey/javascript-basic-loops-for-loop-for-in-for-of-foreach-while-12gd</link>
      <guid>https://dev.to/daaahailey/javascript-basic-loops-for-loop-for-in-for-of-foreach-while-12gd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h1&gt;

&lt;p&gt;Loops evaluate a condition. A true expression runs a code block. &lt;u&gt;Loops repeat the process until the expression is false&lt;/u&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  for loop
&lt;/h1&gt;

&lt;p&gt;for loop is the most commonly used loop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialisation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// body&lt;/span&gt;
  &lt;span class="c1"&gt;// code block to be ran&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs learn the meaning of these parts by example. The loop below runs console.log(i) for i from 0 up to (but not including) 5:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="c1"&gt;// shows 0, then 1, then 2, then 3, then 4&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check above code part by part.&lt;br&gt;
&lt;strong&gt;initialisation&lt;/strong&gt; =&amp;gt; let i = 0&lt;br&gt;
: This executes once upon entering the loop.&lt;br&gt;
&lt;strong&gt;condition&lt;/strong&gt; =&amp;gt; i &amp;lt; 5&lt;br&gt;
: Checked before every loop iteration. If false, the loop stops.&lt;br&gt;
&lt;strong&gt;body(code block to be ran)&lt;/strong&gt; =&amp;gt; console.log(i)&lt;br&gt;
: Runs again and again while the condition is truthy.&lt;br&gt;
&lt;strong&gt;update(step)&lt;/strong&gt; =&amp;gt; i++&lt;br&gt;
: Executes after the body on each iteration.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#inline-variable-declaration"&gt;
  &lt;/a&gt;
  Inline variable declaration
&lt;/h2&gt;

&lt;p&gt;The variable i is declared right in the loop. This is called an *&lt;em&gt;‚Äúinline‚Äù variable *&lt;/em&gt; declaration. Such variables are &lt;u&gt;visible only inside the loop&lt;/u&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0, 1, 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// error, no such variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// use an existing variable&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0, 1, 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3, visible, because declared outside of the loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#skipping-parts"&gt;
  &lt;/a&gt;
  Skipping parts
&lt;/h2&gt;

&lt;p&gt;Any part of for can be skipped.&lt;br&gt;
For example, we can omit begin if we don‚Äôt need to do anything at the loop start.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// we have i already declared and assigned&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="c1"&gt;// no need for "initialisation(begin)" so it can be done with ';'&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0, 1, 2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;update(step) also can be omitted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// this makes the loop identical to while (i &amp;lt; 3).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#for-in"&gt;
  &lt;/a&gt;
  for in
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code block to be executed&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for in statement can also loops(interates) over the properties of an Array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for in statement loops(iterates) through the properties of an Object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#for-of"&gt;
  &lt;/a&gt;
  for of
&lt;/h1&gt;

&lt;p&gt;for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#while"&gt;
  &lt;/a&gt;
  while
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//statement to execute&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;While the condition is truthy&lt;/strong&gt;, the &lt;u&gt;code from the loop body is executed&lt;/u&gt;.&lt;br&gt;
For instance, the loop below outputs score while score &amp;lt; 5&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="c1"&gt;// it runs while score &amp;lt; 5 is true and then exit the loop.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
As long as the expression is true, it will enter into the code block again and again. This loop will run as long as the expression is true.&lt;/p&gt;

&lt;p&gt;A single execution of the loop body is called an &lt;strong&gt;&lt;em&gt;iteration&lt;/em&gt;&lt;/strong&gt;. The loop in the example above makes five iterations.&lt;br&gt;
If i++ was missing from the example above, the loop would repeat (in theory) forever(infinitely) because i is 0 and it will never become lager than 5 since it doesn't increase.&lt;br&gt;
Any expression or variable can be a loop condition, not just comparisons: the &lt;u&gt;condition is evaluated and converted to a boolean by while&lt;/u&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// when i becomes 0, the condition becomes falsy, and the loop stops&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#do-while"&gt;
  &lt;/a&gt;
  do while
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// loop body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The loop will first execute the body, then check the condition, and, while it‚Äôs truthy, execute it again and again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This form of syntax should only be used when you want the body of the loop to execute at least once regardless of the condition being truthy. (Usually, the other form is preferred which is while loop)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// this is false. because the value = 5 but it tells you to iterate while(value &amp;lt; 3). However, it will still print 5(because of do { console.log(value); }) and when it checks the condition - while(value &amp;lt; 3), it will exit the loop.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#foreach"&gt;
  &lt;/a&gt;
  forEach
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clean room&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;make lunch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;walk my dog&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;study JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;
&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above code is the same as this code using for loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#break"&gt;
  &lt;/a&gt;
  break
&lt;/h1&gt;

&lt;p&gt;Breaking the loop&lt;br&gt;
Normally, a loop exits when its condition becomes falsy but we can &lt;strong&gt;force the exit at any time&lt;/strong&gt; &lt;u&gt;using the special break&lt;/u&gt; directive.&lt;br&gt;
For example, the loop below asks the user for a series of numbers, ‚Äúbreaking‚Äù when no number is entered&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// if the user enters an empty line or cancels the input. It stops the loop immediately, passing control to the first line after the loop.&lt;/span&gt;
  &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sum: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#continue"&gt;
  &lt;/a&gt;
  continue
&lt;/h1&gt;

&lt;p&gt;The continue directive is a ‚Äúlighter version‚Äù of break. &lt;strong&gt;It doesn‚Äôt stop the whole loop&lt;/strong&gt;. Instead, &lt;u&gt;it stops the current iteration&lt;/u&gt; and &lt;u&gt;forces the loop to start a new one&lt;/u&gt; (if the condition allows).&lt;br&gt;
We can use it if we‚Äôre done with the current iteration and would like to move on to the next one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The loop below uses continue to output only odd values.&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// if true, skip the remaining part of the body (so it doesn't console.log if it's even number)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1, then 3, 5, 7, 9 (only console.log odd numbers)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>loop</category>
      <category>forloop</category>
      <category>foreach</category>
    </item>
    <item>
      <title>N, manage easily your node versions</title>
      <author>G√°tomo</author>
      <pubDate>Wed, 01 Dec 2021 13:33:30 +0000</pubDate>
      <link>https://dev.to/gatomo_oficial/n-manage-easily-your-node-versions-f8k</link>
      <guid>https://dev.to/gatomo_oficial/n-manage-easily-your-node-versions-f8k</guid>
      <description>&lt;p&gt;Before share a node JS tool you should consider these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your tool has no bugs&lt;/li&gt;
&lt;li&gt;Your tool has documentation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Your tool has compatibility between versions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compatibility is something important to keep in mind. Developers needs different versions according to their needs, so your tool must have support for different versions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-is"&gt;
  &lt;/a&gt;
  The problem is...
&lt;/h2&gt;

&lt;p&gt;The problem is that you need to install different versions for test it, and download and use the node installer for each version takes his time.&lt;br&gt;
Afortunately there are a lot of tools for manage versions quickly. Today I'm going to talk about &lt;strong&gt;N, a simple node version manager.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-n"&gt;
  &lt;/a&gt;
  What is N?
&lt;/h2&gt;

&lt;p&gt;N is a really simple Node version manager. It helps you to change between versions with a command.&lt;br&gt;
N supports Linux and MacOS, but not Windows, unless you use &lt;a href="https://en.m.wikipedia.org/wiki/Windows_Subsystem_for_Linux"&gt;WSL&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#here-starts-a-short-tutorial"&gt;
  &lt;/a&gt;
  Here starts a short tutorial
&lt;/h2&gt;

&lt;p&gt;Ok, you know what is N and why you need it. Now let's go to install it and learn some commands.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Install N globally with your favorite package manager.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8Ynqjef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjwz87b3gbjhhad7l05y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8Ynqjef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjwz87b3gbjhhad7l05y.png" alt="installing N" width="588" height="558"&gt;&lt;/a&gt;&lt;br&gt;
Now you can use N CLI with &lt;code&gt;n&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-versions"&gt;
  &lt;/a&gt;
  Install versions
&lt;/h3&gt;

&lt;p&gt;Install a version with &lt;code&gt;n &amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7z0BWRnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3le94f14e6e6niq5p5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7z0BWRnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3le94f14e6e6niq5p5e.png" alt="installing node from N" width="824" height="558"&gt;&lt;/a&gt;&lt;br&gt;
You can also put &lt;code&gt;latest&lt;/code&gt; or &lt;code&gt;current&lt;/code&gt; instead of &lt;code&gt;lts&lt;/code&gt;.&lt;br&gt;
Once the version is installed, N will save in cache the version for be available offline at any moment. Similar to Yarn with node modules üßµ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view-installed-versions"&gt;
  &lt;/a&gt;
  View installed versions
&lt;/h3&gt;

&lt;p&gt;If you installed many versions (e.g. 16.5.0 and 14.18.2) you can view a list of cached versions and select which to install.&lt;br&gt;
You should see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12Wn_N69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyqvfxejze2vr22y7x1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12Wn_N69--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyqvfxejze2vr22y7x1c.png" alt="view and install" width="880" height="309"&gt;&lt;/a&gt;&lt;br&gt;
Use the arrow keys to change versions, and press enter for install.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uninstall-versions"&gt;
  &lt;/a&gt;
  Uninstall versions
&lt;/h3&gt;

&lt;p&gt;If you want to clear some specifics versions or all the cache, you can use the &lt;code&gt;rm&lt;/code&gt; and &lt;code&gt;prune&lt;/code&gt; commands, respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LmRovJKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmjykzfaemwxckqg6330.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LmRovJKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zmjykzfaemwxckqg6330.png" alt="Uninstall" width="880" height="571"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-really-works"&gt;
  &lt;/a&gt;
  It really works?
&lt;/h2&gt;

&lt;p&gt;Yes, it works without problems. You can do &lt;code&gt;node --version&lt;/code&gt; and check it.&lt;/p&gt;




&lt;p&gt;Congratulations ü•≥! You have a useful tool for manage node versions. You can check all commands in the &lt;a href="https://www.npmjs.com/package/n"&gt;NPM page&lt;/a&gt; and view the source code in the &lt;a href="https://github.com/tj/n"&gt;GitHub repository&lt;/a&gt; ü¶ë&lt;/p&gt;

&lt;p&gt;Are you going to use N? You prefer other version manager? Tell me in the comments whatever you want üòÑ&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Connecting to PostgreSQL using GORM</title>
      <author>Karan Pratap Singh</author>
      <pubDate>Wed, 01 Dec 2021 13:33:04 +0000</pubDate>
      <link>https://dev.to/karanpratapsingh/connecting-to-postgresql-using-gorm-24fj</link>
      <guid>https://dev.to/karanpratapsingh/connecting-to-postgresql-using-gorm-24fj</guid>
      <description>&lt;p&gt;This article builds up on the last part where we built a simple &lt;a href="https://dev.to/karanpratapsingh/build-a-rest-api-with-go-for-beginners-3gp"&gt;REST API with Go&lt;/a&gt;. Now, let's connect our API with a real database! Here, we will use PostgreSQL and &lt;a href="https://gorm.io/"&gt;GORM&lt;/a&gt; to accomplish this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All the code from this article is available &lt;a href="https://github.com/karanpratapsingh/tutorials/tree/master/go/gorm"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Yk5ZjKq4qDQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've also created a video if you will like to follow along!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Before we start working with the code, we will need postgres database for development. Easiest way to do this is by using &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;. So make sure you have &lt;a href="https://www.docker.com/get-started"&gt;docker installed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now let's define our &lt;a href="https://docs.docker.com/compose/"&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/a&gt; file that will make it even easier to work with the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;database&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:12.8&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER=pg&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=pass&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=crud&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5432:5432&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;db:/var/lib/postgresql/data&lt;/span&gt; 

&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our Postgres container!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker compose up -d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Connecting to our database&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we have our database running, we can connect to it via any database management tool such as &lt;a href="https://www.pgadmin.org/"&gt;pgAdmin&lt;/a&gt;. Here, I'll use &lt;a href="https://tableplus.com/"&gt;TablePlus&lt;/a&gt; and create a connection of type PostgreSQL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TFC2Hy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144038896-a92a3481-8aee-41ad-858a-1de4b9a61506.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TFC2Hy0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144038896-a92a3481-8aee-41ad-858a-1de4b9a61506.png" alt="table-plus" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add all the details same as we did in &lt;code&gt;docker-compose.yml&lt;/code&gt;. So, our user is &lt;code&gt;pg&lt;/code&gt;, password is &lt;code&gt;pass&lt;/code&gt; and database is &lt;code&gt;crud&lt;/code&gt;. After that, we can click on test to verify that we can reach our database. Then click connect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uC-VzX-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144038905-47173435-8bcb-426b-84e4-773e69e598d4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uC-VzX-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144038905-47173435-8bcb-426b-84e4-773e69e598d4.png" alt="table-plus-connection" width="880" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we should be able to see our tables.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--149jT3f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144038907-3412a63c-509e-4198-8733-b402e60e22b8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--149jT3f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144038907-3412a63c-509e-4198-8733-b402e60e22b8.png" alt="table-plus-tables" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-gorm"&gt;
  &lt;/a&gt;
  Setting up GORM
&lt;/h2&gt;

&lt;p&gt;Let's install GORM and Postgres driver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get -u gorm.io/gorm
$ go get -u gorm.io/driver/postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Update Models&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's go to &lt;code&gt;pkg/models/book.go&lt;/code&gt; and declare our &lt;code&gt;Id&lt;/code&gt; as &lt;code&gt;primaryKey&lt;/code&gt; in our struct tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Id&lt;/span&gt;     &lt;span class="kt"&gt;int&lt;/span&gt;    &lt;span class="s"&gt;`json:"id" gorm:"primaryKey"`&lt;/span&gt;
    &lt;span class="n"&gt;Title&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"title"`&lt;/span&gt;
    &lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"author"`&lt;/span&gt;
    &lt;span class="n"&gt;Desc&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"desc"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DB package&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, let's create a &lt;code&gt;db&lt;/code&gt; package in &lt;code&gt;pkg/db/db.go&lt;/code&gt;. In our &lt;code&gt;Init&lt;/code&gt; function we'll simply  open a connection to our Postgres database using the &lt;code&gt;dbURL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, we can use &lt;code&gt;db.AutoMigrate&lt;/code&gt; to migrate our models.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: We can also store the &lt;code&gt;dbURL&lt;/code&gt; as an environment variable, but to keep things simple we'll just add it right here.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/tutorials/go/crud/pkg/models"&lt;/span&gt;
    &lt;span class="s"&gt;"gorm.io/driver/postgres"&lt;/span&gt;
    &lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;dbURL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"postgres://pg:pass@localhost:5432/crud"&lt;/span&gt;

    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postgres&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbURL&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoMigrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have db setup, let's think how we'll use that in our handlers. We cannot call &lt;code&gt;Init&lt;/code&gt; in each handler as this will create lots of database connections. So we will initialize it once and pass it to our handlers. For that, we can make use of dependency injection. Here, let's declare &lt;code&gt;handler&lt;/code&gt; struct.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"gorm.io/gorm"&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gorm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's update our handlers to be receiver functions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pkg/handlers/GetAllBooks.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetAllBooks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;pkg/handlers/GetBook.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;pkg/handlers/AddBook.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AddBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;pkg/handlers/UpdateBook.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;UpdateBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;pkg/handlers/DeleteBook.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;DeleteBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Update main&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Putting it all together, let's initialize our database and handlers like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/tutorials/go/crud/pkg/db"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/tutorials/go/crud/pkg/handlers"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;DB&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAllBooks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books/{id}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books/{id}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UpdateBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodPut&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/books/{id}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DeleteBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MethodDelete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API is running!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":4000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now run our API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run cmd/main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-handlers"&gt;
  &lt;/a&gt;
  Update handlers
&lt;/h2&gt;

&lt;p&gt;Now, let's update our handlers by replacing mock implementation with GORM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AddBook&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, we can use &lt;code&gt;h.DB.Create&lt;/code&gt; to create our book.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/tutorials/go/crud/pkg/models"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AddBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Read to request body&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Append to the Books table&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Send a 201 created response&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCreated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Created"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test it with Postman and create a book. And also check how it reflects in our database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRvuGYUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144048983-461065b8-c4e2-40a9-b873-17171791d405.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRvuGYUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144048983-461065b8-c4e2-40a9-b873-17171791d405.png" alt="addbook-postman" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like we added a new book!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihkgJcvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144048974-2e2816b7-3089-44f8-8c98-452d7c833e74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihkgJcvj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144048974-2e2816b7-3089-44f8-8c98-452d7c833e74.png" alt="addbook-table-plus" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DeleteBook&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, we can first query the book by using &lt;code&gt;h.DB.First&lt;/code&gt; and then simply delete the book we found using &lt;code&gt;h.DB.Delete&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/tutorials/go/crud/pkg/models"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;DeleteBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Read the dynamic id parameter&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c"&gt;// Find the book by Id&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Delete that book&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Deleted"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's send a delete request using Postman.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_un860e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144049460-a8c6d14c-a393-46f8-af72-7e752b6d44a2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_un860e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144049460-a8c6d14c-a393-46f8-af72-7e752b6d44a2.png" alt="deletebook-postman" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if we check the database we'll see that the book was deleted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YZ1QXZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144049468-52f8d992-5730-4cd9-bd8f-2e88d8b40875.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YZ1QXZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144049468-52f8d992-5730-4cd9-bd8f-2e88d8b40875.png" alt="deletebook-table-plus" width="880" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GetAllBooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, we can simply fetch all the books using &lt;code&gt;h.DB.Find&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/tutorials/go/crud/pkg/models"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetAllBooks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n6xFLvN2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144050154-bdbc9ba5-467f-4149-851a-860cd5c678ec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6xFLvN2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144050154-bdbc9ba5-467f-4149-851a-860cd5c678ec.png" alt="getallbooks-postman" width="880" height="517"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAyXGYn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144050159-5da370b7-1c56-4b13-9522-f1692580c716.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAyXGYn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144050159-5da370b7-1c56-4b13-9522-f1692580c716.png" alt="getallbooks-table-plus" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GetBook&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here, we will use &lt;code&gt;h.DB.Find&lt;/code&gt; with book id from request body to query for the book by id.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/tutorials/go/crud/pkg/models"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Read dynamic id parameter&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c"&gt;// Find book by Id&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try this with Postman.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvkSU5JP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144050343-eef2ba93-aa4e-448a-ad34-6f549132dd87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvkSU5JP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144050343-eef2ba93-aa4e-448a-ad34-6f549132dd87.png" alt="getbook-postman" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UpdateBook&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, we will first find our book by id similar to &lt;code&gt;GetBook&lt;/code&gt; handler and update the fields with the request body we received. Then we can simply save it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"strconv"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gorilla/mux"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/tutorials/go/crud/pkg/models"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;UpdateBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Read dynamic id parameter&lt;/span&gt;
    &lt;span class="n"&gt;vars&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strconv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c"&gt;// Read request body&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;updatedBook&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;updatedBook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updatedBook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;
    &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updatedBook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;
    &lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Desc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updatedBook&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Desc&lt;/span&gt;

    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Updated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's do a quick request from Postman and check our &lt;code&gt;books&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-gHTXjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144054993-c77722c9-e426-4259-8340-860149f4d9d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-gHTXjW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144054993-c77722c9-e426-4259-8340-860149f4d9d2.png" alt="updatebook-postman" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And sure enough, the book was updated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wwPYwwOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144050799-5398802c-d9a3-462c-bff8-4444fd19cae1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwPYwwOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/29705703/144050799-5398802c-d9a3-462c-bff8-4444fd19cae1.png" alt="updatebook-table-plus" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cleanup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, let's delete &lt;code&gt;pkg/mocks&lt;/code&gt; and our project structure should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ cmd
‚îÇ   ‚îî‚îÄ‚îÄ main.go
‚îú‚îÄ‚îÄ pkg
‚îÇ    ‚îú‚îÄ‚îÄ handlers
‚îÇ    ‚îÇ   ‚îú‚îÄ‚îÄ handler.go
‚îÇ    ‚îÇ   ‚îú‚îÄ‚îÄ AddBook.go
‚îÇ    ‚îÇ   ‚îú‚îÄ‚îÄ DeleteBook.go
‚îÇ    ‚îÇ   ‚îú‚îÄ‚îÄ GetAllBooks.go
‚îÇ    ‚îÇ   ‚îú‚îÄ‚îÄ GetBook.go
‚îÇ    ‚îÇ   ‚îî‚îÄ‚îÄ UpdateBook.go
‚îÇ    ‚îú‚îÄ‚îÄ db
‚îÇ    ‚îÇ   ‚îî‚îÄ‚îÄ db.go
‚îÇ    ‚îî‚îÄ‚îÄ models
‚îÇ        ‚îî‚îÄ‚îÄ book.go
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ go.sum
‚îî‚îÄ‚îÄ go.mod
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;So, we finally connected our CRUD API with PostgreSQL! Our next step could be to adding tests and doing some refactoring, which we will do in the next part!&lt;/p&gt;

&lt;p&gt;I hope this was helpful, as always feel free to reach out if you face any issues.&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>go</category>
      <category>postgres</category>
      <category>docker</category>
    </item>
    <item>
      <title>Building TailwindCSS with Sass</title>
      <author>Deepankar Bhade</author>
      <pubDate>Wed, 01 Dec 2021 13:27:08 +0000</pubDate>
      <link>https://dev.to/deepcodes/building-tailwindcss-with-sass-4ap0</link>
      <guid>https://dev.to/deepcodes/building-tailwindcss-with-sass-4ap0</guid>
      <description>&lt;p&gt;According to the 2020 state of CSS report, Tailwind CSS stood out as one of the tools with the highest satisfaction ratio (86%). Tailwind has become a go-to solution to build web applications. And the reason is justified you can build and ship websites faster and still have 100% control over the styling unlike other CSS frameworks (Bulma, bootstrap, etc).&lt;/p&gt;

&lt;p&gt;I was always curious about how tailwind generates &lt;a href="https://tailwindcss.com/docs/optimizing-for-production"&gt;3645.2kB&lt;/a&gt; of CSS which is full of utility classes from "p-0 , mx-1 ... pt-40" to the color variants and all.&lt;/p&gt;

&lt;p&gt;This blog covers how you can build TailwindCSS utility classes in a very minimal way and doesn't cover the plugin/config ecosystem it provides.&lt;/p&gt;

&lt;p&gt;We will be building it with the help of Sass (SCSS) or syntactically awesome stylesheets. If you don't know what this is you can watch this &lt;a href="https://youtu.be/akDIJa0AP5c"&gt;video&lt;/a&gt; to get an overview. Using Sass will help us to write CSS code more efficiently and programmatic.&lt;/p&gt;

&lt;p&gt;A short demo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ycqURDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x7221sufibktcpknvf8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ycqURDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x7221sufibktcpknvf8.gif" alt="Tailwind Sass demo" width="880" height="647"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Browser doesn't understand what Sass actually is, so we need to compile it to CSS. We will use a bunch of tools to accomplish that. Now let's start by setting up our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would create a minimal &lt;code&gt;package.json&lt;/code&gt; file for our project. Now we will add some &lt;code&gt;devDependencies&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; autoprefixer node-sass postcss postcss-cli
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;autoprefixer node-sass postcss postcss-cli &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A brief explanation of what these actually do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;node-sass&lt;/code&gt; helps in compiling &lt;code&gt;.scss / .sass&lt;/code&gt; files to &lt;code&gt;css&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;postcss&lt;/code&gt; parser which tokenizes CSS code to create an abstract syntax tree, we will be using it's plugins&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;autoprefixer&lt;/code&gt; plugin of postcss, adds vendor prefixes to CSS rule&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, will add some scripts in &lt;code&gt;package.json&lt;/code&gt;, feel free to modify the input and output of your build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf build &amp;amp;&amp;amp; yarn build-sass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build-sass"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node-sass --output-style expanded src/index.scss ./build/index.css  &amp;amp;&amp;amp; yarn  build-autoprefix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build-autoprefix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"postcss --use autoprefixer --map --output ./build/index.css ./build/index.css"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;build&lt;/code&gt; clears build directory and runs &lt;code&gt;build-sass&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;build-sass&lt;/code&gt; compiles scss and build css in a new directory then runs &lt;code&gt;build-autoprefix&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;build-autoprefix&lt;/code&gt; adds vendor prefixes and generates source maps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's create our input file &lt;code&gt;src/index.scss&lt;/code&gt;, if you write some valid &lt;code&gt;scss&lt;/code&gt; code and run &lt;code&gt;yarn build&lt;/code&gt; you should see the compiled css created.&lt;/p&gt;

&lt;p&gt;Now that our project is setup we will look into creating &lt;a href="https://tailwindcss.com/docs/text-color"&gt;text-color&lt;/a&gt; &amp;amp; &lt;a href="https://tailwindcss.com/docs/background-color"&gt;background-color&lt;/a&gt; variants of tailwind. The base idea is to loop over all colors you have and generate utility classes (text-gray-100, bg-gray-100 ... etc).&lt;/p&gt;

&lt;p&gt;Let's start by first creating a new directory &lt;code&gt;utils&lt;/code&gt; and a file inside it &lt;code&gt;_colors.scss&lt;/code&gt;. Adding a leading underscore in scss files is called &lt;a href="https://sass-lang.com/documentation/at-rules/import#partials"&gt;partials&lt;/a&gt; this helps us in modularizing the code and importing it into other files.&lt;/p&gt;

&lt;p&gt;To declare our colors we will use &lt;a href="https://sass-lang.com/documentation/values/maps"&gt;Maps&lt;/a&gt; which is provided by SASS to declare key-value pairs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// utils/_colors.scss&lt;/span&gt;
&lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s1"&gt;'gray-100'&lt;/span&gt; &lt;span class="mh"&gt;#f7fafc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'gray-200'&lt;/span&gt; &lt;span class="mh"&gt;#edf2f7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'gray-300'&lt;/span&gt; &lt;span class="mh"&gt;#e2e8f0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'gray-400'&lt;/span&gt; &lt;span class="mh"&gt;#cbd5e0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'gray-500'&lt;/span&gt; &lt;span class="mh"&gt;#a0aec0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'gray-600'&lt;/span&gt; &lt;span class="mh"&gt;#718096&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'gray-700'&lt;/span&gt; &lt;span class="mh"&gt;#4a5568&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'gray-800'&lt;/span&gt; &lt;span class="mh"&gt;#2d3748&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;'gray-900'&lt;/span&gt; &lt;span class="mh"&gt;#1a202c&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to loop over these we will use &lt;code&gt;@each&lt;/code&gt; rule this helps us to evaluate code for each element of a lists/maps to generate repetitive styles which is exactly what want to do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// utils/_colors.scss&lt;/span&gt;
&lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$hex&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$colors&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.text-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$hex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.bg-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$hex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's import this partial in our input file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.scss&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;'../utils/colors'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On running &lt;code&gt;yarn build&lt;/code&gt; you should be able to see all your utility classes being generated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* build/index.css */&lt;/span&gt;
&lt;span class="nc"&gt;.text-gray-100&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f7fafc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bg-gray-100&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f7fafc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-gray-200&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#edf2f7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bg-gray-200&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#edf2f7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;so&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moving on to the next part we will look into creating &lt;a href="https://tailwindcss.com/docs/margin"&gt;margin&lt;/a&gt; , &lt;a href="https://tailwindcss.com/docs/padding"&gt;padding&lt;/a&gt; utility classes. We will be using &lt;a href="https://sass-lang.com/documentation/values/lists"&gt;lists&lt;/a&gt; data type in this case.&lt;/p&gt;

&lt;p&gt;Let's start by creating a new partial &lt;code&gt;_spacing.scss&lt;/code&gt; and we will create 2 lists, 1st one would be &lt;code&gt;$spaces&lt;/code&gt; which will be used to calculate the spacing (For eg: m-4 -&amp;gt; margin: '1rem') and the 2nd one being &lt;code&gt;$sides&lt;/code&gt; which is basically the direction of spacing to create margin-(top, right, left, bottom) variants.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// utils/_spacing.scss&lt;/span&gt;
&lt;span class="nv"&gt;$spaces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$sides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'top'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'right'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bottom'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'left'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our values all we have to do is now loop over them with the help of the &lt;code&gt;@each&lt;/code&gt; rule. To generate margin/padding-top,left,bottom,right utility classes we will nest another &lt;code&gt;@each&lt;/code&gt; rule to map over &lt;code&gt;$sides&lt;/code&gt; lists. We will also use &lt;a href="https://sass-lang.com/documentation/modules/string#slice"&gt;&lt;code&gt;str-slice&lt;/code&gt;&lt;/a&gt; which returns the slice of string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// utils/_spacing.scss&lt;/span&gt;
&lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$space&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$spaces&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.m-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.mx-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.my-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.px-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.py-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.p-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$side&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$sides&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.m&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;str-slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$side&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;margin-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$side&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.p&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nf"&gt;str-slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$side&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nc"&gt;-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;padding-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$side&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to import the partials in our input file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/index.scss&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s1"&gt;'../utils/colors'&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'../utils/spacing'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you build it you should see the spacing variants generated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* build/index.css */&lt;/span&gt;
&lt;span class="nc"&gt;.m-0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.p-0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.mx-0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.my-0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;so&lt;/span&gt; &lt;span class="nt"&gt;on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the same approach you can create breakpoints, typography, literally any kind of utility classes you want! I hope you found this article informative I thought this was cool enough implementation to share with you folks.&lt;/p&gt;

&lt;p&gt;You can refer the code in this &lt;a href="https://github.com/Deep-Codes/tailwind-sass"&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me know what you think about it, feel free to connect with me on &lt;a href="https://twitter.com/DeepankarBhade"&gt;Twitter&lt;/a&gt; if you have any questions. Cheers!&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
