<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Text to Speech Converter for busy bodies</title>
      <author>david050708</author>
      <pubDate>Sun, 26 Dec 2021 07:48:35 +0000</pubDate>
      <link>https://dev.to/david050708/a-text-to-speech-converter-for-busy-bodies-3gp7</link>
      <guid>https://dev.to/david050708/a-text-to-speech-converter-for-busy-bodies-3gp7</guid>
      <description>&lt;p&gt;Hello Devs,&lt;br&gt;
It's me Dave again......&lt;br&gt;
In these days it's tough to get free time because of the stress in work from home and we can't read stories or books we love....&lt;br&gt;
To get rid of that problem we are going to create a really simple console based Text to Speech Converter&lt;/p&gt;

&lt;p&gt;Requirements: -&lt;br&gt;
1) Python, of course&lt;br&gt;
2) pyttsx3 package&lt;br&gt;
   You can install it via pip install pyttsx3&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pyttsx3

while True:
    thetext = input("Please enter the text you wish: \n")
    pyttsx3.speak(thetext)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is really simple console based app&lt;br&gt;
Feel free to give feedback in the comments below...&lt;br&gt;
Contact: &lt;a href="mailto:davidjeremiah050708@gmail.com"&gt;davidjeremiah050708@gmail.com&lt;/a&gt;&lt;br&gt;
Discord: DJ050708#7940&lt;/p&gt;

&lt;p&gt;Thank You&lt;/p&gt;

</description>
      <category>python</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>React Interview Questions (Mid - Senior Level)</title>
      <author>Let's Code</author>
      <pubDate>Sun, 26 Dec 2021 07:36:44 +0000</pubDate>
      <link>https://dev.to/frontendengineer/react-interview-questions-part-2-mid-senior-level-cal</link>
      <guid>https://dev.to/frontendengineer/react-interview-questions-part-2-mid-senior-level-cal</guid>
      <description>&lt;p&gt;Here are some advance common React interview questions that may be asked on your next interview. Good luck if you are about to interview and I hope this material will help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-react-hooks"&gt;
  &lt;/a&gt;
  What are React Hooks?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;React Hooks&lt;/strong&gt; are a new addition in React version 16.8. They let you use state and other React features without converting functional components to a class. &lt;/p&gt;

&lt;p&gt;Hooks does the same job with less code and with less code means less chances of producing bugs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-hooks"&gt;
  &lt;/a&gt;
  Basic Hooks
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;returns a stateful value, and a function to update it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#useeffect"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;lets us perform side effects in function components&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#usecontext"&gt;
  &lt;/a&gt;
  useContext
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;gives a simple function to access the data via value prop of the Context Provider in any child component&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#additional-hooks"&gt;
  &lt;/a&gt;
  Additional Hooks
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#usereducer"&gt;
  &lt;/a&gt;
  useReducer
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;state management like redux for managing state in smaller applications rather than having to reach for a third-party state management library&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#usecallback"&gt;
  &lt;/a&gt;
  useCallback
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;memoizes callback functions, so they not recreated on every re-render.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#usememo"&gt;
  &lt;/a&gt;
  useMemo
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;stores the results of expensive operations&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#useref"&gt;
  &lt;/a&gt;
  useRef
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;lets us perform side effects in function components&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#useimperativehandle"&gt;
  &lt;/a&gt;
  useImperativeHandle
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Used together with forwardRef which allows you to modify the ref instance that is exposed from parent components&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#uselayouteffect"&gt;
  &lt;/a&gt;
  useLayoutEffect
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;this runs synchronously immediately after React has performed all DOM mutations&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#usedebugvalue"&gt;
  &lt;/a&gt;
  useDebugValue
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;allows you to display additional, helpful information next to your custom Hooks, with optional formatting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-context"&gt;
  &lt;/a&gt;
  What is context?
&lt;/h2&gt;

&lt;p&gt;Context provides a way to pass data through component tree without having to pass props down manually at every level. &lt;/p&gt;

&lt;p&gt;It is designed to share data that can be considered global for a tree of React components.￼&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Apply it sparingly because it makes component reuse more difficult. Consider component composition as it is often a simpler solution than context.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-pass-data-between-components"&gt;
  &lt;/a&gt;
  How to pass data between components?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;To pass data from parent to child, use props&lt;/li&gt;
&lt;li&gt;To pass data from child to parent, use callbacks&lt;/li&gt;
&lt;li&gt;To pass data among siblings AND anywhere else

&lt;ol&gt;
&lt;li&gt;use React’s Context API also&lt;/li&gt;
&lt;li&gt;use state management libraries for mid - big sized applications that are stateful. &lt;strong&gt;Example:&lt;/strong&gt; Redux, MobX, and Recoil &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-are-some-limitations-of-react"&gt;
  &lt;/a&gt;
  What are some limitations of React.
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;First&lt;/em&gt;, JSX can make the coding complex. It will have a steep learning curve for the beginners&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Second&lt;/em&gt;, React documentation is not user friendly and thorough as it should be.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Third&lt;/em&gt;, every React project are unique to engineers as they will rely on numerous technologies to incorporate in their projects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is%C2%A0prop-drilling%C2%A0and-how-can-you-avoid-it"&gt;
  &lt;/a&gt;
  What is prop drilling and how can you avoid it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Prop Drilling&lt;/strong&gt; is the process by which data is passed from one component to deeply nested components. This becomes a problem as other components will contain data that they don’t need. &lt;/p&gt;

&lt;p&gt;Also, It will make the components hard to maintain.&lt;/p&gt;

&lt;p&gt;A common approach to avoid prop drilling is to use React context and state management libraries. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Few disadvantage of prop drilling&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Components that should not otherwise be aware of the data become unnecessarily complicated &lt;/li&gt;
&lt;li&gt;Harder to maintain.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-use-of-dangerouslysetinnerhtml"&gt;
  &lt;/a&gt;
  What is the use of dangerouslySetInnerHTML?
&lt;/h2&gt;

&lt;p&gt;This property is React’s replacement for using innerHTML in the browser. It will render raw HTML in a component. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One should limit its use because it can expose users to potential cross-site scripting attacks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#name-a-few-techniques-to-optimize-react-app-performance"&gt;
  &lt;/a&gt;
  Name a few techniques to optimize React app performance.
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;First&lt;/em&gt;, Use React.Suspense and React.Lazy for Lazy Loading Components. This will only load component when it is needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LazyComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./LazyComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LazyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./LazyComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Second&lt;/em&gt;, Use React.memo for Component Memoization&lt;br&gt;
&lt;strong&gt;React.memo&lt;/strong&gt; is a higher order component that will render the component and memoizes the result. Before the next render, if the new props are the same, React reuses the memoized result skipping the next rendering&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* render only if the props changed */&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: If React.memo has a &lt;em&gt;useState&lt;/em&gt;, &lt;em&gt;useReducer&lt;/em&gt; or &lt;em&gt;useContext&lt;/em&gt; Hook in its implementation, it will still re-render when state or context change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The more often the component renders with the same props, &lt;br&gt;
the heavier and the more computationally expensive the output is, the more chances are that component needs to be wrapped in React.memo().&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Third&lt;/em&gt;, Use &lt;strong&gt;React.Fragment&lt;/strong&gt; to Avoid Adding Extra Nodes to the DOM React Fragments do not produce any extra elements in the DOM Fragment’s child components will be rendered without any wrapping DOM node. &lt;/p&gt;

&lt;p&gt;This is a cleaner alternative rather than adding divs in the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Best App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Easy as pie!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use the short syntax &amp;lt;&amp;gt;&amp;lt;/&amp;gt; for declaring a Fragment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Best App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Easy as pie!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fourth, Use &lt;a href="https://github.com/reduxjs/reselect"&gt;Reselect&lt;/a&gt; / &lt;a href="https://github.com/toomuchdesign/re-reselect"&gt;Re-reselect&lt;/a&gt; in Redux to Avoid Frequent Re-render.&lt;br&gt;
&lt;strong&gt;Reselect&lt;/strong&gt; is a library for building memoized selectors that is commonly used for redux.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Advantages&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selectors can compute derived data, allowing Redux to store the minimal possible state.&lt;/li&gt;
&lt;li&gt;Selectors are efficient. A selector is not recomputed unless one of its arguments changes.&lt;/li&gt;
&lt;li&gt;Selectors are composable. They can be used as input to other selectors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Re-reselect&lt;/strong&gt; is a lightweight wrapper around Reselect to enhance selectors with deeper memoization and cache management.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Useful to:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retain selector's cache when sequentially called with one/few different arguments&lt;/li&gt;
&lt;li&gt;Join similar selectors into one&lt;/li&gt;
&lt;li&gt;Share selectors with props across multiple component instances&lt;/li&gt;
&lt;li&gt;Instantiate selectors on runtime&lt;/li&gt;
&lt;li&gt;Enhance reselect with custom caching strategies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last, Use Production Build&lt;br&gt;
Ensure that application is bundled for production before deploying. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-reconciliation"&gt;
  &lt;/a&gt;
  What is reconciliation?
&lt;/h2&gt;

&lt;p&gt;When a component's props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called reconciliation. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-higherorder-components"&gt;
  &lt;/a&gt;
  What are Higher-Order Components?
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;higher-order component&lt;/strong&gt; (HOC) is an advanced technique in React for reusing component logic. It is a function that takes a component and returns a new component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EnhancedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;higherOrderComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WrappedComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;HOCs are common in third-party React libraries, such as Redux’s &lt;a href="https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#connect"&gt;connect&lt;/a&gt; and Relay’s &lt;a href="https://relay.dev/docs/v10.1.3/fragment-container/#createfragmentcontainer"&gt;createFragmentContainer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HOC can be used for many use cases:&lt;/em&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Conditionally rendering components.&lt;/li&gt;
&lt;li&gt;Providing components with specific styles.&lt;/li&gt;
&lt;li&gt;Give other components any props. &lt;/li&gt;
&lt;li&gt;Showing a loader while a component waits for data &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-children-prop"&gt;
  &lt;/a&gt;
  What is children prop?
&lt;/h2&gt;

&lt;p&gt;It is a prop that allow us to pass components as data to other components, just like any other prop. Component tree between the component's opening tag and closing tag will be passed to that component as children prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./MyComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="na"&gt;Simple&lt;/span&gt; &lt;span class="na"&gt;React&lt;/span&gt; &lt;span class="na"&gt;App&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Very Kewl Feature&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-pass-a-parameter-to-an-event-handler-or-callback"&gt;
  &lt;/a&gt;
  How to pass a parameter to an event handler or callback?
&lt;/h2&gt;

&lt;p&gt;You can use an arrow function to wrap around an event handler and pass parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also pass arguments to a function which is defined as arrow function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The id is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-pass-a-function-to-setstate"&gt;
  &lt;/a&gt;
  Why do we need to pass a function to setState()?
&lt;/h2&gt;

&lt;p&gt;setState() is an asynchronous operation. React batches state changes for performance reasons. This means state may not change immediately after setState() is called. &lt;/p&gt;

&lt;p&gt;We should not rely on the current state when calling setState() since we can't be sure what that state will be.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Wrong &lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The solution is to pass a function to setState(), with the previous state as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Correct &lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to bookmark 🔖 even if you don't need this for now. You may need to refresh/review down the road when it is time for you to look for a new role.&lt;/p&gt;

&lt;p&gt;If you want to support me - &lt;a href="https://www.buymeacoffee.com/letscode77"&gt;Buy Me A Coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Format: &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mYnsLOAIOCc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Goal Achieved: 45/45 Books Read This Year</title>
      <author>mrsharm</author>
      <pubDate>Sun, 26 Dec 2021 06:46:20 +0000</pubDate>
      <link>https://dev.to/mrsharm/goal-achieved-4545-books-read-this-year-4cf5</link>
      <guid>https://dev.to/mrsharm/goal-achieved-4545-books-read-this-year-4cf5</guid>
      <description>&lt;p&gt;I have reached my goal I set for myself by reading 45 books! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xw7kTttM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ler4v7595bdi9hpngmn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xw7kTttM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ler4v7595bdi9hpngmn.png" alt="Image description" width="550" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A tracker such as the below helped me considerably. The code that generated that chart can be found &lt;a href="https://github.com/MokoSan/BookReviews_2021/blob/main/Progress%20Tracker.ipynb"&gt;here&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Audiobooks help scale - bumping up the playback rate has been helpful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't feel bad if you don't want to continue reading a book. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#top-5"&gt;
  &lt;/a&gt;
  Top 5:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Atomic Habits - James Clear&lt;/li&gt;
&lt;li&gt;Mindset - Carol Dweck&lt;/li&gt;
&lt;li&gt;Stillness is the Key - Ryan Holiday&lt;/li&gt;
&lt;li&gt;The War of Art - Steven Pressfield&lt;/li&gt;
&lt;li&gt;Man's Search For Meaning - Viktor Frankl &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#all-the-books"&gt;
  &lt;/a&gt;
  All the Books
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Autobiography of a Yogi - Parmahansa Yogananda&lt;/li&gt;
&lt;li&gt;The Subtle Art of Not Giving A F_ck - Mark Mason&lt;/li&gt;
&lt;li&gt;Unfu_k Yourself - Gary John Bishop&lt;/li&gt;
&lt;li&gt;The Art of War - Sun Tzu&lt;/li&gt;
&lt;li&gt;The Case Against Sugar - Gary Taubes&lt;/li&gt;
&lt;li&gt;Mindset: The New Psychology of Success - Carol Dweck&lt;/li&gt;
&lt;li&gt;Supermind - Norman E. Rosenthal&lt;/li&gt;
&lt;li&gt;A Guide To The Good Life - William B. Irvine&lt;/li&gt;
&lt;li&gt;Stillness Is The Key - Ryan Holiday&lt;/li&gt;
&lt;li&gt;Good To Great - Jim Collins&lt;/li&gt;
&lt;li&gt;Zero To One - Peter Thiel&lt;/li&gt;
&lt;li&gt;Deep Work - Cal Newport&lt;/li&gt;
&lt;li&gt;The 4 Disciplines of Execution - Franklin Covey&lt;/li&gt;
&lt;li&gt;Irresistible - Adam Adler&lt;/li&gt;
&lt;li&gt;Man's Search For Meaning - Viktor Frankl&lt;/li&gt;
&lt;li&gt;The Science Of Getting Rich - Wallace D. Wattles&lt;/li&gt;
&lt;li&gt;The Buddha In Your Mirror - Greg Martin et. al&lt;/li&gt;
&lt;li&gt;Eat Fat, Get Thin - Mark Hyman&lt;/li&gt;
&lt;li&gt;Steal Like An Artist - Austin Kleon&lt;/li&gt;
&lt;li&gt;7 Deadly Innocent Frauds of Economic Policy - Warren Mosler&lt;/li&gt;
&lt;li&gt;The Greatness of Saturn - Robert Svoboda&lt;/li&gt;
&lt;li&gt;Breath - James Nestor&lt;/li&gt;
&lt;li&gt;Masters Of Doom - David Kushner&lt;/li&gt;
&lt;li&gt;Caffeine - Michael Pollan&lt;/li&gt;
&lt;li&gt;How To Talk To Anyone, Anytime Anywhere - Larry King&lt;/li&gt;
&lt;li&gt;Show Your Work - Austin Kleon&lt;/li&gt;
&lt;li&gt;Brain Maker - David Perlmutter
28 Three Questions - Leo Tolstoy&lt;/li&gt;
&lt;li&gt;The Beggar - Anton Chekhov&lt;/li&gt;
&lt;li&gt;The War Of Art - Steven Pressfield&lt;/li&gt;
&lt;li&gt;How To Win Friends And Influence People - Dale Carnegie&lt;/li&gt;
&lt;li&gt;The Bet - Anton Chekhov&lt;/li&gt;
&lt;li&gt;The Kybalion - The Three Initiates&lt;/li&gt;
&lt;li&gt;Atomic Habits - James Clear&lt;/li&gt;
&lt;li&gt;Your Invisible Power - Geneviève Behrend&lt;/li&gt;
&lt;li&gt;The Nameless City - HP Lovecraft&lt;/li&gt;
&lt;li&gt;The Law of Success - Parmahansa Yogananda&lt;/li&gt;
&lt;li&gt;The Feeling Is The Secret - Neville Goddard&lt;/li&gt;
&lt;li&gt;Invent And Wander - Jeff Bezos&lt;/li&gt;
&lt;li&gt;The Secret of Dreams - Yacki Raizizun&lt;/li&gt;
&lt;li&gt;The Power of Sexual Transmutation - Mitch Horowitz&lt;/li&gt;
&lt;li&gt;The Heart of Business - Hubert Joly&lt;/li&gt;
&lt;li&gt;August Heat - W. F. Harvey&lt;/li&gt;
&lt;li&gt;The Egyptian Book of the Dead - Ani Osiris&lt;/li&gt;
&lt;li&gt;The Miracle Club - Mitch Horowitz&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>books</category>
    </item>
    <item>
      <title>React Concepts</title>
      <author>Arpita Mony Sristy</author>
      <pubDate>Sun, 26 Dec 2021 06:01:52 +0000</pubDate>
      <link>https://dev.to/arpita11260/react-concepts-ci5</link>
      <guid>https://dev.to/arpita11260/react-concepts-ci5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Component Lifecycle:&lt;/strong&gt;&lt;br&gt;
Every single part utilized in React has its lifecycle which can be checked and controlled in the three periods of its Lifecycle. The three fundamental periods of a React Component's lifecycle are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mounting: Mounting alludes to the method involved with placing the various components in the DOM. There are four unique techniques that are brought in a specific request composed beneath to mount apart:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Constructor(): The principal technique which should be called is a constructor(), it is characterized when we start the part. This is the most appropriate spot to set the underlying states and qualities. The props are called alongside the constructor() technique as contentions. Super(props) ought to be consistently called at the very beginning prior to calling anything more as it starts the parent constructor strategy and the parts effectively acquire the techniques from the parent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;getDerivedStateFromProps(): Before rendering of the components into the Document Object Model (DOM), the getDerivedStateFromProps() technique is called. This is the most reasonable spot to set up the state object which depends on introductory props. The state is taken as contention and an item is returned alongside the progressions in the state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;render(): Render() is the technique used to deliver the results of the HTML to the DOM and the render() strategy is one of the main pieces of the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;componentDidMount(): Subsequent to delivering the part, we want to call the componentDidMount() strategy. Here the assertions are run which required the parts to be in the DOM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Updating: Updating the part is considered the second stage in the part lifecycle. At whatever point there is an adjustment of the condition of the part, the part should be refreshed. For refreshing, there are five techniques utilized and are brought in the request beneath:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;getDerivedStateFromProps(): At the point when we start the refreshing stage, the main strategy which gets called is the getDerivedStateFromProps technique.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;should ComponentUpdate(): The shouldComponentUpdate() technique returns a Boolean worth. It affirms that assuming React should proceed with delivering or should stop. Genuine is the default esteem returned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;render(): At whatever point the part should be refreshed, we need to call the render() technique. Re-delivering of HTML is to be done to the DOM with the new changes in general.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;getSnapshotBeforeUpdate(): getSnapshotBeforeUpdate() strategy permits us to check the upsides of the states and props which were before the update. At whatever point we are utilizing the getSnapshotBeforeUpdate() strategy, we really want to incorporate the componentDidUpdate() technique to make the coding blunder-free.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;componentDidUpdate(): Subsequent to refreshing the part into the DOM, we really want to call the componentDidUpdate technique.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Unmounting: The last stage in the Component lifecycle is the Unmounting stage. In this stage, we eliminate the part from the DOM. There is the main strategy called to unmount the part:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;componentWillUnmount(): At the point when we really want to eliminate or unmount apart from the DOM, we call the componentWillUnmount strategy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Virtual DOM:&lt;/strong&gt;  In basic words, virtual DOM is only a duplicate of the first DOM kept in the memory and synchronized with the genuine DOM by libraries like ReactDOM. This cycle is called Reconciliation.&lt;br&gt;
Virtual DOM has the very properties of the Real DOM, however, it does not have the ability to straightforwardly change the substance of the screen.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How Virtual DOM really makes things quicker: When anything new is added to the application, a virtual DOM is made and it is addressed as a tree. Every component in the application is a hub in this tree. Thus, at whatever point there is an adjustment of the condition of any component, another Virtual DOM tree is made. This new Virtual DOM tree is then contrasted and the past Virtual DOM tree and make a note of the changes. Later, it tracks down the most ideal ways of rolling out these improvements to the genuine DOM. Presently just the refreshed components will get delivered on the page once more.&lt;br&gt;
&lt;strong&gt;Diffing- algorithm:&lt;/strong&gt; While diffing two trees, React first looks at the two root components. The conduct is distinctive relying upon the sorts of the root components.&lt;br&gt;
React utilizes a method called the diffing calculation to contrast the old DOM with the new. Diffing is a heuristic calculation dependent on two suspicions:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two components of various sorts will create various trees.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The designer can indicate what components will stay stable across renders with a key prop.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>CSS Position Property</title>
      <author>ekholil</author>
      <pubDate>Sun, 26 Dec 2021 05:54:12 +0000</pubDate>
      <link>https://dev.to/ekholil/css-position-property-4cn1</link>
      <guid>https://dev.to/ekholil/css-position-property-4cn1</guid>
      <description>&lt;p&gt;Position property is one of the most important things in css. To make an awesome layout we need to position our element properly. In this case, with the help of position property we can easily place our elements everywhere. Position property specifies the type of the position method for an element. It can be static, relative, fixed, absolute and sticky. &lt;br&gt;
We will discuss each items clearly so that we can understand this &lt;/p&gt;

&lt;p&gt;Position Static:&lt;br&gt;&lt;br&gt;
Html elements are by default positioned statically. Static positioned elements do not support top, bottom, right &amp;amp; and left properties. &lt;br&gt;
An element positioned with static is not positioned in special way. It is positioned with documents normal flow. &lt;/p&gt;

&lt;p&gt;Position relative: &lt;br&gt;
When we set an elements position relative then it positioned relative to its normal position. Setting up a relatively positioned elements top, bottom, left and right adjust its position from normal position. Other elements do not adjust to fill its gaps. &lt;/p&gt;

&lt;p&gt;Position fixed: &lt;br&gt;
An element with position fixed always stays in the same place relative to its viewport. It always stays in the same place even when the page scrolls. We use top, bottom, right and left properties to position the element. A fixed element does not leave a gap in the page where it would normally have been located.&lt;/p&gt;

&lt;p&gt;Position absolute: &lt;br&gt;
When we specify an element's position with position: fixed; then it is positioned relative to the nearest positioned ancestor. If the element doesn’t have any ancestor then it is positioned relative to the document body. Position relative and position absolute are almost the same. Only difference is relative positioned relative to body and absolute positioned relative to its nearest ancestor. &lt;/p&gt;

&lt;p&gt;Position Sticky: &lt;br&gt;
An element positioned with sticky positioned based on users scroll. It is the combination of position:fixed and position relative depend on scroll position. &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Tech to Keep an Eye Out for in 2022</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 26 Dec 2021 05:40:40 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/tech-to-keep-an-eye-out-for-in-2022-3i4m</link>
      <guid>https://dev.to/ruppysuppy/tech-to-keep-an-eye-out-for-in-2022-3i4m</guid>
      <description>&lt;p&gt;We are here on the &lt;em&gt;last Sunday of the year&lt;/em&gt;! It's time for us to look into the &lt;strong&gt;crystal ball&lt;/strong&gt; and predict the future of tech. Let's look at some of the technologies that you should definitely check out in 2022.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#web3"&gt;
  &lt;/a&gt;
  Web3
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swtjgFG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reys8xo6srm4ihp5utd7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swtjgFG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reys8xo6srm4ihp5utd7.png" alt="Web3" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The developer community has divided opinions on the topic of &lt;strong&gt;Web3&lt;/strong&gt;. &lt;em&gt;Some say it's the future&lt;/em&gt;, and &lt;em&gt;others believe it is just a passing fad&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Regardless of which side of the community you find yourself in, there is a &lt;em&gt;huge amount of money, to be made with the advent of &lt;strong&gt;Web3&lt;/strong&gt;, especially for developers&lt;/em&gt;, even if it turns out to be just another hype. And given that you are reading this article, &lt;em&gt;you are likely to be a developer yourself&lt;/em&gt;. So, keeping an eye out for the developments in the &lt;strong&gt;Web3&lt;/strong&gt; space can be worth your time.&lt;/p&gt;

&lt;p&gt;Want to check out how to develop &lt;strong&gt;Blockchain-based DApps&lt;/strong&gt;? Check out this repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ruppysuppy"&gt;
        ruppysuppy
      &lt;/a&gt; / &lt;a href="https://github.com/ruppysuppy/Crypto-Crowdfund"&gt;
        Crypto-Crowdfund
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🤑💰 Crowdfunding Platform backed by Ethereum Blockchain to bring your creative projects to life
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#augmented-reality"&gt;
  &lt;/a&gt;
  Augmented Reality
&lt;/h1&gt;

&lt;p&gt;With the introduction of the &lt;strong&gt;Metaverse&lt;/strong&gt;, several new job positions will open up for &lt;strong&gt;AR&lt;/strong&gt; (&lt;strong&gt;Augmented Reality&lt;/strong&gt;), driving up the demand for people with these skills. Even though &lt;em&gt;the technology is still in its early phase, more and more people are likely to pick it up this year&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Several new libraries like &lt;strong&gt;@react-three/xr&lt;/strong&gt; and &lt;strong&gt;react-force-graph&lt;/strong&gt; are popping up. Hopefully, by the end of 2022, we will be looking at a couple of really cool &lt;strong&gt;AR&lt;/strong&gt; Projects!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ltPCkq5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j087er2rqwdffcuftsmd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ltPCkq5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j087er2rqwdffcuftsmd.gif" alt="AR" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#motion-graphics"&gt;
  &lt;/a&gt;
  Motion Graphics
&lt;/h1&gt;

&lt;p&gt;Let's first check out the definition of &lt;strong&gt;Motion Graphics&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Motion graphics are pieces of animation or digital footage which create the illusion of motion or rotation and are usually combined with audio for use in multimedia projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the decline of attention spans in humans, the demand for &lt;strong&gt;Motion Graphics&lt;/strong&gt; is rising. Recently, motion graphics has been a crucial skill required in both the &lt;em&gt;development space&lt;/em&gt; and the &lt;em&gt;video industry&lt;/em&gt;. The big players have &lt;em&gt;recognized the use of this skill and incorporated it not only in their application &lt;strong&gt;UI&lt;/strong&gt; but their logos too&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1a7CGToB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll9iro4y040h1oohtq75.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1a7CGToB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll9iro4y040h1oohtq75.gif" alt="Netflix" width="498" height="280"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNMbWZWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7q8b3o62flmjafgu4osk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNMbWZWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7q8b3o62flmjafgu4osk.gif" alt="Google" width="512" height="256"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YfCg5wC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhqr2dheykggnnfbdwsr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YfCg5wC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhqr2dheykggnnfbdwsr.gif" alt="Meta" width="512" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cross-platform-development"&gt;
  &lt;/a&gt;
  Cross Platform Development
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Cross-Platform Development&lt;/strong&gt; is becoming more and more accessible to developers, and luckily de-factor players like &lt;strong&gt;Electron&lt;/strong&gt; are being challenged by the new players like &lt;strong&gt;Flutter&lt;/strong&gt; and &lt;strong&gt;Tauri&lt;/strong&gt;, which ship &lt;em&gt;far optimized app builds&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Mobile Cross-Platform Development&lt;/strong&gt; too, clashes with &lt;strong&gt;Flutter&lt;/strong&gt;, &lt;strong&gt;React Native&lt;/strong&gt; and other frameworks ensure that the technologies are constantly evolving.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thus the winner of such clashes is the Developers&lt;/em&gt; who get to use &lt;strong&gt;developer-friendly technology&lt;/strong&gt; that provides &lt;strong&gt;incredible performance&lt;/strong&gt; too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRWAnK4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtechhml9bdc0q8kq3aq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRWAnK4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtechhml9bdc0q8kq3aq.png" alt="Cross Platform Development" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3d-websites"&gt;
  &lt;/a&gt;
  3D Websites
&lt;/h1&gt;

&lt;p&gt;Just like I mentioned in an article some time back, since &lt;strong&gt;3D websites&lt;/strong&gt; have gamified the user interaction, &lt;em&gt;it results in high engagement&lt;/em&gt; resulting in immense potential in the sphere of &lt;em&gt;marketing&lt;/em&gt; and &lt;em&gt;generating sales&lt;/em&gt;, which is the ultimate goal of any company.&lt;/p&gt;

&lt;p&gt;But making &lt;strong&gt;3D Websites&lt;/strong&gt; is no easy feat, with making a decent one takes extensive knowledge of &lt;strong&gt;WebGL&lt;/strong&gt; and libraries like &lt;strong&gt;Three.js&lt;/strong&gt;. With the introduction of &lt;strong&gt;Metaverse&lt;/strong&gt;, this sector should undergo a boom too. Hopefully, more libraries will be introduced, making the development of &lt;strong&gt;3D Websites&lt;/strong&gt; easier than ever before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qACDfWwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zypj2hk20vjn22s8dfzw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qACDfWwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zypj2hk20vjn22s8dfzw.jpg" alt="3d-website" width="512" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;This article showcases the tech domains that are expected to see &lt;em&gt;significant advances and opportunities for the developers&lt;/em&gt;. Hope it helps you &lt;em&gt;plan out your development journey for the next year&lt;/em&gt;! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt; to chop away your development woes? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Personal Website&lt;/a&gt; and &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to connect? Reach out to me on &lt;a href="https://www.linkedin.com/in/tapajyoti-bose/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>web3</category>
      <category>javascript</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Dealing with Recursion as a Beginner</title>
      <author>Gourav Singh Rawat</author>
      <pubDate>Sun, 26 Dec 2021 05:15:58 +0000</pubDate>
      <link>https://dev.to/seek4samurai/dealing-with-recursion-as-a-beginner-2pfk</link>
      <guid>https://dev.to/seek4samurai/dealing-with-recursion-as-a-beginner-2pfk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-recursion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Recursion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A function calling itself. Well that's what most of us know.&lt;br&gt;
But something that will help a beginner with recursion is that recursion follows a Mathematical concept that is PMI - Principle of Mathematical Induction. For those who are afraid of maths this'll be a punch. But to know more about this we have to imagine how recursion works...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#calculate-sum-of-digits-of-a-number"&gt;
  &lt;/a&gt;
  Calculate Sum of Digits of a Number
&lt;/h2&gt;

&lt;p&gt;Imagine I have a number 123 and we need to calculate the sum of individual digit in this number i.e. 1+2+3 = 6.&lt;br&gt;
We can do this iteratively easily, using for and while loops. But in recursion we take a Base case that'll return some integer like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;

int SumOfDigits(int number){
  // Base case
  if (number==0){
    return 0;
  };
  // Recursion &amp;amp; Calculation
  number = SumOfDigits(number/10)+(number%10);
  return number;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here what base case is doing :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; // Base case
  if (number==0){
    return 0;
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We know that once number gets to 0 it'll return 0. That means that if my number reaches end of the digit. &lt;br&gt;
We are splitting the whole number into smaller numbers that's what recursion is about, split your problem into the smaller problems. Once you find the answer to smaller problems you'll find your answer to main problem eventually.&lt;/p&gt;

&lt;p&gt;What we did here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  // Recursion &amp;amp; Calculation
  number = SumOfDigits(number/10)+(number%10);
  return number;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We split number without last digit every time recursion is called. Once there will be only one digit left say - 1, this is where our base case comes into action, as 1/10 will give 0 and it'll eventually return answer to be 0. In manner 12 will be solved as base case of 1 returns 0 we added first and last digit of the number i.e. 1+2 = 3. Once this is done consecutive recursion will split 3 and 3, now as the previous recursion returned 3, we again added last and first value i.e. 3+3 = 6.&lt;br&gt;
This might be somewhat tough to understand in the beginning, but once you get practice of this by dry running your code in paper you'll start to understand it even more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  NOTE
&lt;/h2&gt;

&lt;p&gt;One more reason why we used base case to be 0 before conclusion, is that since our recursion doesn't stops by itself and it keeps making the number shorter this will give Runtime error or Segmentation fault at sometime. To avoid this we added a base case that's returning 0 once there is only one element is left in the number.&lt;br&gt;
Hope this helps to get a little clear image of recursion. Keep practicing it on problems and you'll get through it.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Simplify React Documentation using MDX with Docz!</title>
      <author>Sankalp Swami</author>
      <pubDate>Sun, 26 Dec 2021 05:09:59 +0000</pubDate>
      <link>https://dev.to/aviyel/simplify-react-documentation-using-mdx-with-docz-430j</link>
      <guid>https://dev.to/aviyel/simplify-react-documentation-using-mdx-with-docz-430j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AI8bTQZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639395355493-event-announcement-5-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AI8bTQZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1639395355493-event-announcement-5-resized.png" alt="Reactjs React native docz documentation" width="760" height="380"&gt;&lt;/a&gt;&lt;br&gt;
Documenting is really important especially when you are building reusable React Components. But despite its importance, it is always avoided because of its time-consuming nature. What if you come across such a tool, using which you can complete documenting your React component at the time of finishing the development for the same? Join &lt;a href="https://aviyel.com/"&gt;Aviyel&lt;/a&gt;, as it comes with yet another productive session, where you will document your React Components using MDX with &lt;a href="https://www.docz.site/"&gt;Docz&lt;/a&gt;. Docz uses MDX ( .mdx files) extensively to render desirable formatting features in your doc. For a heads-up, &lt;a href="https://github.com/mdx-js/mdx"&gt;MDX&lt;/a&gt; is short for Markdown with JSX. It finds use cases in building React components to Markdown files and speeds up the document workflow.&lt;/p&gt;

&lt;p&gt;Why should one join this event?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will learn how to build SEO-friendly &amp;amp; interactive Documentation sites.&lt;/li&gt;
&lt;li&gt;You will take a hands-on approach on Docz for documenting your React Components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chandrika Deb is coming live on &lt;a href="https://aviyel.com/"&gt;Aviyel&lt;/a&gt; where she will guide you in documenting your React components effortlessly. Chandrika is Software Engineer at Amdocs. Chandrika is Freelancer at Aviyel. She loves to read, dance &amp;amp; sketch.&lt;/p&gt;

&lt;p&gt;Join us to get hands-on experience with Docz and &lt;a href="https://aviyel.com/discussions"&gt;open-source&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date:&lt;/strong&gt; January 15th, 2022&lt;br&gt;
&lt;strong&gt;Time:&lt;/strong&gt; 08 AM PST | 11 AM EST&lt;br&gt;
&lt;strong&gt;Register here:&lt;/strong&gt; &lt;a href="https://bit.ly/32whSML"&gt;https://bit.ly/32whSML&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our &lt;a href="https://aviyel.com/events"&gt;events&lt;/a&gt;!&lt;br&gt;
Let’s build open-source together! 🎉&lt;br&gt;
Team Aviyel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chandrika Deb Socials!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/chandrikadeb7"&gt;Chandrika Deb&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/chandrikadeb7"&gt;Chandrika Deb&lt;/a&gt;&lt;br&gt;
Website: &lt;a href="https://chandrikadeb7.github.io/"&gt;Chandrika Deb&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://linkedin.com/in/chandrika-deb"&gt;Chandrika Deb&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Public Solving: Making an autopilot navigator</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 26 Dec 2021 05:08:53 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-making-an-autopilot-navigator-3414</link>
      <guid>https://dev.to/dailydevtips1/public-solving-making-an-autopilot-navigator-3414</guid>
      <description>&lt;p&gt;Disclaimer: This was by far the hardest one so far for me. I'm sure the solution could be enhanced.&lt;/p&gt;

&lt;p&gt;Now that we set the tone with the disclaimer, let's look at the puzzle for today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-16"&gt;You can find the puzzle here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apparently, Santa gets very tired after a long night, and the elves decide to make an autopilot for the sled.&lt;/p&gt;

&lt;p&gt;They have mapped out Santa's positions compared to the Northpole, but they need some help determining the best route.&lt;/p&gt;

&lt;p&gt;The maps they made look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;###N######&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;##########&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;#######S##&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;##########&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the &lt;code&gt;N&lt;/code&gt; represents the Northpole and the &lt;code&gt;S&lt;/code&gt; where Santa is.&lt;/p&gt;

&lt;p&gt;The goal for today is to determine the direction Santa should move in. This can only be one step.&lt;br&gt;
Then we must update the map with Santa in this new direction.&lt;/p&gt;

&lt;p&gt;This is what the completed solution will look like;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tYcuumyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639672122844/SyHIq3rDb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tYcuumyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639672122844/SyHIq3rDb.gif" alt="Public Solving: Making a autopilot navigator" width="384" height="718"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thinking-about-the-solution"&gt;
  &lt;/a&gt;
  Thinking about the solution
&lt;/h2&gt;

&lt;p&gt;First, I thought about determining what movement we should do.&lt;/p&gt;

&lt;p&gt;I think it's fair to assume we can break the map up into rows and columns.&lt;br&gt;
Each one going from zero to {X} &lt;/p&gt;

&lt;p&gt;In the example above, we can say the Northpole is at X = 4 and Y = 1.&lt;/p&gt;

&lt;p&gt;And Santa is at X = 8 and Y = 3&lt;/p&gt;

&lt;p&gt;Our first action should thus be up-left. This can be seen as one step!&lt;/p&gt;

&lt;p&gt;Then to navigate the map, we have to convert this string value (up-left) to the new coordinates for Santa and move him to those.&lt;br&gt;
Then we need to remove the old Santa position.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-the-find-direction-method"&gt;
  &lt;/a&gt;
  Building the find direction method
&lt;/h2&gt;

&lt;p&gt;Let's start by building the find direction method.&lt;br&gt;
This has one property being the map.&lt;/p&gt;

&lt;p&gt;I decided to create a new function called &lt;code&gt;findPosition&lt;/code&gt;. It takes the map and a character we are looking for, &lt;code&gt;N&lt;/code&gt; or &lt;code&gt;S&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The map itself is broken up in rows, and each row has the columns like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'#'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'S'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'#'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; 
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'#'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'N'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'#'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens is that we reduce the map and have the rows. I Also add the &lt;code&gt;I&lt;/code&gt; there to determine the current row index.&lt;/p&gt;

&lt;p&gt;Then I use the &lt;code&gt;indexOf&lt;/code&gt; to determine if this row has the character we are looking for.&lt;br&gt;
If yes, we return the row (&lt;code&gt;I&lt;/code&gt;) and the index of the character (&lt;code&gt;find&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let's try it out on the array I said above, and find the &lt;code&gt;N&lt;/code&gt; character:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;northPole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;N&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [ 2, 1 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect as the &lt;code&gt;N&lt;/code&gt; is at X = 1 and Y = 2.&lt;/p&gt;

&lt;p&gt;Then we can do the same to find Santa.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;santa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to find what Santa needs to move on the x and y axes.&lt;/p&gt;

&lt;p&gt;For this purpose, I introduced a &lt;code&gt;findAction&lt;/code&gt; method. This method accepts &lt;code&gt;Santa&lt;/code&gt;, &lt;code&gt;Northpole&lt;/code&gt; and the &lt;code&gt;axis&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;santa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;northPole&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;santa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;northPole&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;santa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;northPole&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;down&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;right&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If Santa and the Nortpole are equal for this axis, we can return right away as we are alright there.&lt;br&gt;
If now, we must see if it's a positive or negative position and if the axis is x or y.&lt;/p&gt;

&lt;p&gt;Then we can return both values and filter out the empty ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;findDirection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;northPole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;N&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;northPole&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;santa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;santa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;northPole&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;santa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;northPole&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;xAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;yAction&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moving-santa-on-the-map"&gt;
  &lt;/a&gt;
  Moving Santa on the map
&lt;/h2&gt;

&lt;p&gt;Now that we know the direction/movement, we can actually move Santa on the map.&lt;/p&gt;

&lt;p&gt;First, we have to determine Santa on the map again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;santa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I then duplicate the position for the new movement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;movement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;santa&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we need to loop over each direction and perform a particular action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;movement&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;right&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;movement&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;movement&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;down&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;movement&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;movement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This uses a simple &lt;code&gt;switch&lt;/code&gt; case, and if the direction is left, for instance, we take 1 of the position for the X-axis.&lt;/p&gt;

&lt;p&gt;This can take up to two differences as we can have &lt;code&gt;['top', 'left]&lt;/code&gt; as the options.&lt;/p&gt;

&lt;p&gt;Once this is updated, the movement array has the new position for Santa.&lt;/p&gt;

&lt;p&gt;We can then simply remove the &lt;code&gt;S&lt;/code&gt; character from the map by replacing it with a &lt;code&gt;#&lt;/code&gt; character.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;santa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="nx"&gt;santa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we set &lt;code&gt;S&lt;/code&gt; to the new position:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;movement&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="nx"&gt;movement&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we go!&lt;br&gt;
Santa is now in a new position.&lt;/p&gt;

&lt;p&gt;The function will auto loop and return the new position, where the whole process starts again.&lt;/p&gt;

&lt;p&gt;Just one more thing to do:&lt;/p&gt;

&lt;p&gt;Run the test!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxHE_DVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639671827288/R9nMxWnOs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxHE_DVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639671827288/R9nMxWnOs.png" alt="Autopilot movement in JavaScript" width="582" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>does that lorem10/lorem not work in react JSX code?</title>
      <author>zia-ashraf</author>
      <pubDate>Sun, 26 Dec 2021 04:57:35 +0000</pubDate>
      <link>https://dev.to/ziaashraf/does-that-lorem10lorem-not-work-in-react-jsx-code-ip0</link>
      <guid>https://dev.to/ziaashraf/does-that-lorem10lorem-not-work-in-react-jsx-code-ip0</guid>
      <description></description>
      <category>react</category>
      <category>javascript</category>
      <category>jsx</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Can I disable the automatic deferring of module-scripts without the `async` attribute?</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 26 Dec 2021 04:20:49 +0000</pubDate>
      <link>https://dev.to/baenencalin/can-i-disable-the-automatic-deferring-of-module-scripts-without-the-async-attribute-54fd</link>
      <guid>https://dev.to/baenencalin/can-i-disable-the-automatic-deferring-of-module-scripts-without-the-async-attribute-54fd</guid>
      <description>&lt;p&gt;So, I read &lt;a href="https://medium.com/ghostcoder/using-es6-modules-in-the-browser-5dce9ca9e911"&gt;this short article&lt;/a&gt; on using ES6 modules in the browser, and it says this: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scripts of type module are deferred by default. But you can override that behaviour with making them async. (Psst, confused between deferred and async again? &lt;a href="https://bitsofco.de/async-vs-defer/"&gt;Here&lt;/a&gt; you go.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But, I don't want my script to be deferred OR asynchronous.&lt;br&gt;
So, is it possible I could do something around the lines of:?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;&lt;strong&gt;&lt;h1&gt;&lt;center&gt;Thanks!&lt;br&gt;Cheers!&lt;/center&gt;&lt;/h1&gt;&lt;/strong&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>help</category>
    </item>
    <item>
      <title>Add color to your code block</title>
      <author>doldoki</author>
      <pubDate>Sun, 26 Dec 2021 04:10:12 +0000</pubDate>
      <link>https://dev.to/doldoki/add-colors-to-your-code-block-4h8k</link>
      <guid>https://dev.to/doldoki/add-colors-to-your-code-block-4h8k</guid>
      <description>&lt;p&gt;So you started a blog on dev.to but when you wrote your code in a code block, you noticed this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let str = 'Hello World';
console.log(str);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately, dev.to offers an easy way to add colors to your codes for better display and readability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simply add the name of your programming language right after the first three back-ticks(or the opening back-ticks) for your code block.&lt;/p&gt;

&lt;p&gt;I tried Python, Javascript, and PHP. They all worked fine. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
