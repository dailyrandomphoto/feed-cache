<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Free programming Mock Interviews</title>
      <author>Daniel</author>
      <pubDate>Thu, 18 Nov 2021 18:55:02 +0000</pubDate>
      <link>https://dev.to/dannyhabibs/free-programming-mock-interviews-3g3</link>
      <guid>https://dev.to/dannyhabibs/free-programming-mock-interviews-3g3</guid>
      <description>&lt;p&gt;Sign up &lt;a href="https://fangprep.notion.site/Mock-Programming-Interviews-Signup-39660a704be84d8a879d4be7533c00b5"&gt;here&lt;/a&gt; if interested and I'll match your with someone within 24 hrs!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>interview</category>
      <category>motivation</category>
    </item>
    <item>
      <title>üéâ Launching Fig</title>
      <author>Brendan Falk</author>
      <pubDate>Thu, 18 Nov 2021 18:51:41 +0000</pubDate>
      <link>https://dev.to/withfig/launching-fig-da6</link>
      <guid>https://dev.to/withfig/launching-fig-da6</guid>
      <description>&lt;p&gt;I am excited to announce that as of today, &lt;a href="https://fig.io"&gt;Fig&lt;/a&gt; is generally available to the public for download. &lt;/p&gt;

&lt;p&gt;With our public launch, I'd like to share a little more about Fig's mission: who are we, what we're doing, and what's to come. &lt;/p&gt;

&lt;p&gt;The terminal has barely changed since the 1970s and yet is still used every day by tens of millons of developers. Our bet is the terminal isn't going away any time soon. We are excited for Fig to play a part in its evolution. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-fig"&gt;
  &lt;/a&gt;
  üöÄ What is Fig?
&lt;/h3&gt;

&lt;p&gt;Fig makes the terminal easier for beginners, more productive for advanced engineers, and more collaborative for teams.&lt;/p&gt;

&lt;p&gt;To do this we are creating the &lt;strong&gt;app ecosystem for the terminal&lt;/strong&gt;. We've built out a simple Javacript API (Fig.js) that makes it easy to extend your local terminal &amp;amp; shell with visual apps and shortcuts.&lt;/p&gt;

&lt;p&gt;The first app built on top of the Fig platform is &lt;a href="https://github.com/withfig/autocomplete"&gt;autocomplete&lt;/a&gt;. We are launching autocomplete today, but soon, we will open up our API so anyone can create their own apps. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-first-app-autocomplete"&gt;
  &lt;/a&gt;
  üî• Our First App: Autocomplete
&lt;/h3&gt;

&lt;p&gt;Our first app, &lt;strong&gt;autocomplete&lt;/strong&gt;, is a modern intellisense for your interactive shell. We support inline completions for subcommands, options, and arguments for 200+ CLI tools. &lt;/p&gt;

&lt;p&gt;We make it ridculously easy to build completions. We've defined a declarative standard that makes building completions for things like  &lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt; or &lt;code&gt;npm install &amp;lt;package&amp;gt;&lt;/code&gt;  around 10 lines of Javascript. All of our completions are open source in our public GitHub repo (&lt;a href="https://github.com/withfig/autocomplete"&gt;withfig/autocomplete&lt;/a&gt;) and have been built by 120+ contributors!&lt;/p&gt;

&lt;p&gt;Autocomplete is built to be &lt;em&gt;extensible&lt;/em&gt;. You can add your own personal shortcuts, add project-specific shortcuts,  customize descriptions for package.json scripts, and even build completions for your team's internal CLI tool. You can build all this and more by checking out our &lt;a href="https://fig.io/docs"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's what autocomplete looks like in action.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wel5bMZtFLA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-figjs-api"&gt;
  &lt;/a&gt;
  üéâ The Fig.js API
&lt;/h3&gt;

&lt;p&gt;Fig isn't &lt;em&gt;just&lt;/em&gt; autocomplete. Fig's backbone is the Fig.js, an API that enables building web apps that seamlessly integrate with the terminal.&lt;/p&gt;

&lt;p&gt;Very soon, we will open up access to the Fig API, so that anyone can build their own apps. You can use our API to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Receive events from the shell (e.g. when a new process is executed or when the working directory changes)&lt;/li&gt;
&lt;li&gt;Run local shell commands&lt;/li&gt;
&lt;li&gt;Position the Fig window in various locations around the user's terminal&lt;/li&gt;
&lt;li&gt;Insert text into the active terminal session&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will discuss Fig.js in more depth when we're ready for &lt;strong&gt;you&lt;/strong&gt; to start building apps with it. In the meantime, you can see the early prototypes we built to get a sense of what's possible:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/90T5ePnROZk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-apps"&gt;
  &lt;/a&gt;
  ‚òÅÔ∏è Future Apps
&lt;/h3&gt;

&lt;p&gt;What workflows do you do every day in the terminal that could be improved? Are any of these workflows shared across your team? &lt;/p&gt;

&lt;p&gt;As you might expect, engineers do &lt;strong&gt;a lot&lt;/strong&gt; of different things in their terminal. Here are a few Fig apps that will make common terminal workflows faster and easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shared terminal configuration (scripts, functions, aliases, snippets, CLIs, and dotfiles) across a teams&lt;/li&gt;
&lt;li&gt;Interactive jupyter notebook style "runbooks" for dev ops/SREs&lt;/li&gt;
&lt;li&gt;Shared environment variables, secrets, certificates, and keys&lt;/li&gt;
&lt;li&gt;Live terminal sharing and session recording&lt;/li&gt;
&lt;li&gt;2FA for SSHing into remote machines&lt;/li&gt;
&lt;li&gt;"Fig cloud" for hosting and deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;What else could you do?&lt;/em&gt; You could have an internal app for your team/company. You could build a keyboard driven git GUI that uses &lt;code&gt;d3.js&lt;/code&gt; to visualise your commit history. You could use Fig onboard new engineers to your team or even users to your public CLI.&lt;/p&gt;

&lt;p&gt;These ideas really barely scratch the surface of what's possible. We're so excited to see what the community will build!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-hasnt-fig-built-its-own-terminal"&gt;
  &lt;/a&gt;
  üíæ Why hasn't Fig built its own terminal?
&lt;/h3&gt;

&lt;p&gt;Early on, we decided not built our own terminal and instead integrate with  &lt;em&gt;existing&lt;/em&gt; terminal emulators. &lt;/p&gt;

&lt;p&gt;This is incredibly ambitious, but it has three major advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Teams can use Fig to collaborate but engineers will still be able to use their preferred terminal. &lt;/li&gt;
&lt;li&gt;Fig developers can build for a much larger audience. Since anyone can add Fig to their existing setup, apps built on top of the Fig.js API are &lt;em&gt;not limited&lt;/em&gt; to people who use a specific terminal or shell...&lt;/li&gt;
&lt;li&gt;Fig is backwards compatibile. Your terminal is still your terminal. Fig is a new interface to build upon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fig will work with your standalone terminal (like iTerm2 or Kitty), the terminal embedded in your IDE (like VSCode or JetBrains), and even in the terminal in a browser-based IDE (like GitHub Codespaces). &lt;em&gt;Fig works where you work.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;For instance, here's Fig in VSCode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkN-gzEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fig.io/images/screenshots/vscode-colored-background.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkN-gzEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fig.io/images/screenshots/vscode-colored-background.png" alt="Fig in VSCode" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We imagine a world where your manager uses bash on Windows, your colleague uses Alacritty on Arch Linux, and you use the terminal embedded in VSCode on macOS. Fig works with all of them and lets you seamless collaborate.&lt;/p&gt;

&lt;p&gt;Fig currently work with iTerm2, the native macOS terminal, Hyper, Alacritty, and the terminal embedded in VSCode on macOS. Once we have stablized and launched our API, we will go cross-platform to Linux and Windows. If you'd like to help with this, come chat with us in our &lt;a href="https://fig.io/community"&gt;Discord community&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One day, we may build a Fig terminal to provide the best first party experience. For now, our integrations work quite nicely!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-will-fig-make-money"&gt;
  &lt;/a&gt;
  üí∞ How will Fig make money?
&lt;/h3&gt;

&lt;p&gt;We get asked this question a lot and so as a final note to our launch, I thought it would be good to address it.&lt;/p&gt;

&lt;p&gt;First, &lt;strong&gt;Fig will be always free for individuals&lt;/strong&gt;. We want users to feel confident that even if they sign up to Fig and become the biggest power user, they will never be charged.&lt;/p&gt;

&lt;p&gt;Our pricing model is inspired by GitHub's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For individuals and open-source projects, Fig is completely free.
&lt;/li&gt;
&lt;li&gt;For teams product that require hosting, Fig will charge a small fee per person per month.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, our &lt;a href="https://fig.io/teams"&gt;autocomplete for teams&lt;/a&gt; product enables companies to build and share completions for internal CLIs. We think charging for hosting is reasonable as there is a cost incurred by us. We are willing to absorb this cost for individuals but not for teams. &lt;/p&gt;

&lt;p&gt;Finally, Fig will &lt;strong&gt;never&lt;/strong&gt; sell your data. The terminal is an incredibly sensitive environment. Security and privacy is top of mind for everything we do.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%97%A7-whats-next"&gt;
  &lt;/a&gt;
  ‚óß What's next?
&lt;/h3&gt;

&lt;p&gt;We are really only just getting started. Fig's platform opens up a whole new world of opportunties for developer tooling. Our public launch of autocomplete today is just our first demonstration of what's possible. Our roadmap for the next several months includes more terminal integrations, launching our Fig.js API, new apps, and maybe even a beta on Linux!&lt;/p&gt;

&lt;p&gt;If you're excited about Fig's vision and mission &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href="https://twitter.com/fig"&gt;@fig&lt;/a&gt; on Twitter.&lt;/li&gt;
&lt;li&gt;Join our &lt;a href="https://fig.io/community"&gt;Discord community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join the team: &lt;a href="https://fig.io/jobs"&gt;fig.io/jobs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Or just email me (brendan [at] fig.io)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-Brendan Falk&lt;/p&gt;

</description>
    </item>
    <item>
      <title>GraphQL Helix API Routes with Next.js</title>
      <author>Jamie Barton</author>
      <pubDate>Thu, 18 Nov 2021 18:35:43 +0000</pubDate>
      <link>https://dev.to/graphqlwtf/graphql-helix-api-routes-with-nextjs-2mn</link>
      <guid>https://dev.to/graphqlwtf/graphql-helix-api-routes-with-nextjs-2mn</guid>
      <description>&lt;p&gt;In this video we'll use utility functions from GraphQL Helix to process requests inside our API route made from the Next.js frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://graphql.wtf/episodes/16-graphql-helix-api-route-with-nextjs"&gt;Watch it now&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>graphql</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to build GitHub Actions in PHP with Minicli and Docker</title>
      <author>Erika Heidi</author>
      <pubDate>Thu, 18 Nov 2021 18:30:36 +0000</pubDate>
      <link>https://dev.to/sourcegraph/how-to-build-github-actions-in-php-with-minicli-and-docker-1k6m</link>
      <guid>https://dev.to/sourcegraph/how-to-build-github-actions-in-php-with-minicli-and-docker-1k6m</guid>
      <description>&lt;p&gt;GitHub Actions facilitates creating CI/CD automated workflows that can be triggered by GitHub events, such as when a pull request is created, a merge is made, or a new comment is posted on an issue. What some people may not know is that you can also run GitHub actions at scheduled times, based on &lt;code&gt;cron&lt;/code&gt; expressions.&lt;/p&gt;

&lt;p&gt;Public repositories get unlimited GitHub Actions for free, which makes this feature a really great tool for open source and personal projects that must run scheduled tasks.&lt;/p&gt;

&lt;p&gt;In this guide, you'll learn how to use GitHub Actions to periodically run a PHP command line application built with &lt;a href="https://docs.minicli.dev"&gt;Minicli&lt;/a&gt;. This application will update a CONTRIBUTORS file in the same repository where the workflow action is set, updating information about top contributors of a project. We'll implement the repository update portion using the &lt;a href="https://github.com/marketplace/actions/update-files-on-github"&gt;update-files-on-github&lt;/a&gt; action, which will generate a commit with the file change to the repository where the workflow is run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QsMiO1Pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht57yas5q2qxr40a1b5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QsMiO1Pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht57yas5q2qxr40a1b5b.png" alt="Pull request automatically created by this workflow + action" width="880" height="628"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To follow this tutorial you'll need access to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A PHP command line environment (&lt;code&gt;php-cli&lt;/code&gt;, no need for web servers) and Composer installed. The &lt;a href="https://www.php.net/manual/en/curl.requirements.php"&gt;&lt;code&gt;php-curl&lt;/code&gt; extension&lt;/a&gt; is required to connect to the GitHub API. &lt;/li&gt;
&lt;li&gt;An empty GitHub repository where you're going to set up your action. For more info, check &lt;a href="https://docs.github.com/en/articles/creating-a-new-repository"&gt;this documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-bootstrapping-the-application"&gt;
  &lt;/a&gt;
  Step 1: Bootstrapping the application
&lt;/h2&gt;

&lt;p&gt;Start by bootstrapping a new Minicli application. This will be a single-command application, so we don't need to use the &lt;code&gt;minicli/application&lt;/code&gt; template. Create a new folder and require &lt;code&gt;minicli/minicli&lt;/code&gt; to start building your command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~
&lt;span class="nb"&gt;mkdir &lt;/span&gt;action-contributors
&lt;span class="nb"&gt;cd &lt;/span&gt;action-contributors
composer require minicli/minicli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new &lt;code&gt;composer.json&lt;/code&gt; file and download the base &lt;a href="https://github.com/minicli/minicli"&gt;minicli/minicli&lt;/a&gt; package.&lt;br&gt;
Next, you need to create the entry point script that runs your command. Using your code editor of choice, create a new file in the root of the application called &lt;code&gt;minicli&lt;/code&gt; (or another name of your choice):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano minicli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Include the following code, which bootstraps a Minicli application with a single command defined as callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;#!/usr/bin/php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;php_sapi_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;'cli'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Minicli\App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'app_path'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/app/Command'&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;registerCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'update-contributors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Fetching top contributors...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;runCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and close the file. Then, run the following command to make this script executable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;chmod&lt;/span&gt;+x minicli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can test your command with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./minicli update-contributors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oETrh6_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5raykzh7l0cz8agijy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oETrh6_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5raykzh7l0cz8agijy8.png" alt="screenshot showing the output from the command in the terminal" width="880" height="116"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next step, you'll update the example command to pull the top contributors of a GitHub project, and generate a markdown file with the list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-pulling-contributors-with-the-github-api"&gt;
  &lt;/a&gt;
  Step 2: Pulling contributors with the GitHub API
&lt;/h2&gt;

&lt;p&gt;To make requests to the GitHub API, we'll use the &lt;a href="https://docs.minicli.dev/en/latest/xtras/extending-minicli/#miniclicurly"&gt;Curly&lt;/a&gt; Minicli extension. You can import it to your project with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require minicli/curly
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obtaining the top contributors for an open source project on GitHub doesn't require an authentication token. You only need to include a couple headers in your request:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Accept: application/vnd.github.v3+json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User-Agent: My user agent v1.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll now edit the &lt;code&gt;update-contributors&lt;/code&gt; command to query the GitHub API and save information about top contributors in the project of your choice.&lt;/p&gt;

&lt;p&gt;Replace the current content in your &lt;code&gt;minicli&lt;/code&gt; script with the following, updated code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;#!/usr/bin/php
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;php_sapi_name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;'cli'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;require&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Minicli\App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Minicli\Curly\Client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="s1"&gt;'app_path'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'/app/Command'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'repository'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CONTRIB_REPOSITORY'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="s1"&gt;'minicli/minicli'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'output_file'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CONTRIB_OUTPUT_FILE'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="s1"&gt;'CONTRIBUTORS.md'&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;registerCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'update-contributors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Fetching top contributors...'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;"https://api.github.com/repos/"&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/contributors"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Accept: application/vnd.github.v3+json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'User-Agent: Curly'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"an error occurred: "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"#Contributors&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Shout out to our top contributors!&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;json_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"- [&lt;/span&gt;&lt;span class="nv"&gt;$item-&amp;gt;login&lt;/span&gt;&lt;span class="s2"&gt;](&lt;/span&gt;&lt;span class="nv"&gt;$item-&amp;gt;url&lt;/span&gt;&lt;span class="s2"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$contrib_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w+'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$contrib_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$contrib_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"An error occurred while trying to save the contrib file."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrinter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Finished updating contrib file."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;runCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The updated code defines a couple configuration variables: &lt;code&gt;repository&lt;/code&gt; and &lt;code&gt;output_file&lt;/code&gt;, with default values set to &lt;code&gt;minicli/minicli&lt;/code&gt; and &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt; respectively. When building your action workflow, you can overwrite these default values with environment variables named &lt;code&gt;CONTRIB_REPOSITORY&lt;/code&gt; and &lt;code&gt;CONTRIB_OUTPUT_FILE&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;update-contributors&lt;/code&gt; method now uses a &lt;code&gt;Curly/Client&lt;/code&gt; client to query the GitHub API using the endpoint &lt;code&gt;https://api.github.com/repos/owner/repo/contributors&lt;/code&gt;. When the request is successful, the application builds a markdown text with the contributors that are returned as response, and writes it to the file defined by the  &lt;code&gt;output_file&lt;/code&gt; configuration value.&lt;/p&gt;

&lt;p&gt;Now run the application again with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./minicli update-contributors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Fetching top contributors...

Finished updating contrib file.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check your repository files now, you should see a new &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt; file in the root of the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;CONTRIBTORS.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Contributors

Shout out to our top contributors!

- [erikaheidi](https://api.github.com/users/erikaheidi)
- [syntaxseed](https://api.github.com/users/syntaxseed)
- [tombenevides](https://api.github.com/users/tombenevides)
- [ScullWM](https://api.github.com/users/ScullWM)
- [wandersonwhcr](https://api.github.com/users/wandersonwhcr)
- [lotfio](https://api.github.com/users/lotfio)
- [flug](https://api.github.com/users/flug)
- [mauriciofauth](https://api.github.com/users/mauriciofauth)
- [mrpc](https://api.github.com/users/mrpc)
- [peter279k](https://api.github.com/users/peter279k)
- [zaghadon](https://api.github.com/users/zaghadon)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The application is now ready, but you still need to set up the environment that will execute it on the GitHub runtime. &lt;/p&gt;

&lt;p&gt;In the next step, you'll build a custom Docker image based on PHP 8.0 to install and execute the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-setting-up-the-application-dockerfile"&gt;
  &lt;/a&gt;
  Step 3: Setting up the application Dockerfile
&lt;/h2&gt;

&lt;p&gt;GitHub offers a few different &lt;a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners"&gt;runners&lt;/a&gt; to execute code as actions. For PHP applications, you'll need to provide the runner with a custom environment based on a Docker image, capable of executing your application code as a single command.&lt;/p&gt;

&lt;p&gt;Create a new &lt;code&gt;Dockerfile&lt;/code&gt; in the root of your application and copy the following code to the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:8.0-cli&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    git &lt;span class="se"&gt;\
&lt;/span&gt;    curl &lt;span class="se"&gt;\
&lt;/span&gt;    libxml2-dev &lt;span class="se"&gt;\
&lt;/span&gt;    zip &lt;span class="se"&gt;\
&lt;/span&gt;    unzip

&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get clean &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/lib/apt/lists/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="c"&gt;# Install Composer and set up application&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=composer:latest /usr/bin/composer /usr/bin/composer&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /application
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /application/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /application &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; composer &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; [ "php", "/application/minicli" ]&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["update-contributors"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file.&lt;/p&gt;

&lt;p&gt;The example  &lt;code&gt;Dockerfile&lt;/code&gt; starts by setting up the base image to PHP &lt;code&gt;8.0-cli&lt;/code&gt;. Then, it will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set up a few required packages;&lt;/li&gt;
&lt;li&gt;install Composer by copying its executable from its official image;&lt;/li&gt;
&lt;li&gt;create a directory for the application inside the container;&lt;/li&gt;
&lt;li&gt;copy the application files from the current directory and into the container;&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;composer install&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;set up the container entry point and default command.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may want to test if the application runs through Docker with this image. Use the following command to build the image under the tag &lt;code&gt;action-contributors&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; action-contributors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the application in a disposable container using the newly built image, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt; action-contributors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should be able to see the same output as before. However, the generated &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt; file will be confined to the container and won't show up in your application directory on the host machine. When setting up your workflow, you'll need to include an additional GitHub Action to either &lt;a href="https://github.com/marketplace/actions/update-files-on-github"&gt;commit the changes directly to the master branch&lt;/a&gt;, or &lt;a href="https://github.com/marketplace/actions/create-pull-request"&gt;open a pull request with the changes&lt;/a&gt; so that you can review the update before merging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-creating-the-action-file"&gt;
  &lt;/a&gt;
  Step 4: Creating the action file
&lt;/h2&gt;

&lt;p&gt;With the application ready, you'll need to set up a YAML file to define your action. Create a new file called &lt;code&gt;action.yml&lt;/code&gt; on the root of the project, and copy the following content to that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# action.yml&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS'&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Updates&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;contributors&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file'&lt;/span&gt;
&lt;span class="na"&gt;outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;response&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Output&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;from&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;command'&lt;/span&gt;
&lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;using&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;docker'&lt;/span&gt;
  &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Dockerfile'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file.&lt;/p&gt;

&lt;p&gt;The file starts by defining the name and description of the action. Because our command doesn't require inputs, we don't need to set up an &lt;code&gt;inputs&lt;/code&gt; section for this action. The &lt;code&gt;response&lt;/code&gt; output will be available for logs that might refer to this information for debug purposes. Then, we get to the &lt;code&gt;runs&lt;/code&gt; portion, where we define what the action will do. This action will build and execute the image defined by &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your action is almost ready. You're encouraged to create a &lt;code&gt;README.md&lt;/code&gt; file explaining how to use it, and including an example workflow. For now, you can create a simple README with some basic information about the action. You can use the following template for your README:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# My Action Title&lt;/span&gt;

A paragraph about my action, what it does and how it works.&lt;span class="sb"&gt;


&lt;/span&gt;&lt;span class="gu"&gt;## Example usage&lt;/span&gt;
Include an example of workflow using this action.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you're finished with your README, you'll need to commit and push the files to the GitHub repository you've created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add action.yml composer.json composer.lock minicli Dockerfile README.md
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"My first action is ready"&lt;/span&gt;
git tag &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"My first action release"&lt;/span&gt; v1
git push &lt;span class="nt"&gt;--follow-tags&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have pushed your code (including the tag), the action is ready to be used by a workflow in any project on GitHub, referenced by &lt;code&gt;your_user_or_org/your_action_repo@v1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the next step, you'll create a workflow to test this action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-setting-up-a-workflow"&gt;
  &lt;/a&gt;
  Step 5: Setting up a workflow
&lt;/h2&gt;

&lt;p&gt;When creating a workflow for a GitHub action, there are quite a few different things to consider: what triggers the action, which other actions are needed and in which order they should run, and what kinds of inputs or environment variables are required for the action to run. &lt;/p&gt;

&lt;p&gt;This action should run on a scheduled basis, without the need for a specific event to trigger it. It doesn't require inputs, but it uses two environment variables to define which repository is being pulled for contributors, and the name of the file that will be created with the list of contributors. &lt;/p&gt;

&lt;p&gt;We'll need to combine this action with another action to either commit the changes directly to the main project's branch, or open a pull request with the changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#committing-the-updated-contributors-file-directly-to-the-main-branch"&gt;
  &lt;/a&gt;
  Committing the updated CONTRIBUTORS file directly to the main branch
&lt;/h3&gt;

&lt;p&gt;The following workflow will run once a month and commit an updated &lt;code&gt;CONTRIBUTORS.md&lt;/code&gt; file directly into the default remote branch of the project where this workflow is set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update CONTRIBUTORS file&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minicli/action-contributors@v3&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;projects&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file"&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_REPOSITORY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;minicli/minicli'&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_OUTPUT_FILE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS.md'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit changes&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;test-room-7/action-update-file@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;file-path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS.md'&lt;/span&gt;
          &lt;span class="na"&gt;commit-msg&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Contributors&lt;/span&gt;
          &lt;span class="na"&gt;github-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember to change the &lt;code&gt;CONTRIB_REPOSITORY&lt;/code&gt; environment variable to the project you want to pull contributors from, using the format &lt;code&gt;owner/repository&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opening-a-pull-request-with-the-updated-contributors-file"&gt;
  &lt;/a&gt;
  Opening a Pull Request with the updated CONTRIBUTORS file
&lt;/h3&gt;

&lt;p&gt;You can also opt to open a pull request instead of committing the changes directly into the main project's branch. For that, you'll need an additional action called &lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt;. This action checks out the repository code to a location inside the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update CONTRIBUTORS file&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minicli/action-contributors@v3&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;projects&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;file"&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_REPOSITORY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;minicli/docs'&lt;/span&gt;
          &lt;span class="na"&gt;CONTRIB_OUTPUT_FILE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CONTRIBUTORS.md'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create a PR&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;peter-evans/create-pull-request@v3&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;commit-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Contributors&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[automated]&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Update&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Contributors&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;File"&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy your preferred workflow code to the following location, inside the project where you want the keep your CONTRIBUTORS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.github/workflows/contributors.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, commit and push your changes to the repository where the workflow will run. Once you push the workflow file to that location, you'll be able to see the workflow listed in the &lt;strong&gt;Actions&lt;/strong&gt; tab of your GitHub repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--06kjj6_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/geq1zb198is30hbthgag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--06kjj6_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/geq1zb198is30hbthgag.png" alt="Running a Github action manually" width="880" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, you can manually run the workflow by clicking on the &lt;code&gt;Run workflow&lt;/code&gt; button on the right. &lt;/p&gt;

&lt;p&gt;If you choose to commit the changes directly into the main project's branch, once the workflow has finished running you should find the updated CONTRIBUTORS file in the root of the project. &lt;/p&gt;

&lt;p&gt;If you chose to create a pull request, you should find an open pull request in the "Pull requests" tab of your project's repository,  carrying the updated CONTRIBUTORS file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QsMiO1Pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht57yas5q2qxr40a1b5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QsMiO1Pp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht57yas5q2qxr40a1b5b.png" alt="Pull request automatically created by this workflow + action" width="880" height="628"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-more-example-workflows-using-these-actions"&gt;
  &lt;/a&gt;
  Find more example workflows using these actions
&lt;/h2&gt;

&lt;p&gt;GitHub provides a large library of readily available actions you can integrate into your project, and you can also find user-contributed actions in the marketplace. However, because workflows are so flexible, sometimes it can be difficult to figure out how to combine multiple actions and which inputs or environment variables are required in certain scenarios. &lt;/p&gt;

&lt;p&gt;To find usage examples related to the actions used in this guide, you can use the following Sourcegraph search queries:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-more-examples-of-the-raw-actionscheckout-endraw-action"&gt;
  &lt;/a&gt;
  Find more examples of the &lt;code&gt;actions/checkout&lt;/code&gt; action
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lang:YAML uses: actions/checkout@v2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search URL:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+actions/checkout%40v2&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+actions/checkout%40v2&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#find-more-examples-of-the-raw-testroom7actionupdatefile-endraw-action"&gt;
  &lt;/a&gt;
  Find more examples of the &lt;code&gt;test-room-7/action-update-file&lt;/code&gt; action
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lang:YAML uses: test-room-7/action-update-file@v1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search URL:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+test-room-7/action-update-file%40v1&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+test-room-7/action-update-file%40v1&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#find-more-examples-of-the-raw-peterevanscreatepullrequest-endraw-action"&gt;
  &lt;/a&gt;
  Find more examples of the &lt;code&gt;peter-evans/create-pull-request&lt;/code&gt; action
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lang:YAML uses: peter-evans/create-pull-request@v3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Search URL:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+peter-evans/create-pull-request%40v3&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+lang:YAML+uses:+peter-evans/create-pull-request%40v3&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#search-for-anything-related-to-github-actions"&gt;
  &lt;/a&gt;
  Search for anything related to GitHub actions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Search URL&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://sourcegraph.com/search?q=context:global+github+actions&amp;amp;patternType=literal"&gt;https://sourcegraph.com/search?q=context:global+github+actions&amp;amp;patternType=literal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search Query:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;github actions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this step-by-step tutorial, we've seen how to create a GitHub action to programmatically update a CONTRIBUTORS file for an open source project, using the &lt;a href="https://docs.minicli.dev"&gt;Minicli&lt;/a&gt; framework for command line applications in PHP. If you'd like to use this action in one of your projects and don't want to build it from scratch, you can head over to the &lt;a href="https://github.com/minicli/action-contributors"&gt;minicli/action-contributors&lt;/a&gt; repository on GitHub to set up this action within a workflow on your project. To find more about GitHub actions, you can check the &lt;a href="https://docs.github.com/en/actions"&gt;official documentation&lt;/a&gt;, and you can also search for practical examples of workflows using &lt;a href="https://sourcegraph.com/search"&gt;Sourcegraph code search&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to auto-generate OpenAPI docs for Django, Flask, Spring and Rails apps</title>
      <author>Kevin Gilpin</author>
      <pubDate>Thu, 18 Nov 2021 18:29:20 +0000</pubDate>
      <link>https://dev.to/appland/how-to-auto-generate-openapi-docs-for-django-flask-spring-and-rails-apps-2bco</link>
      <guid>https://dev.to/appland/how-to-auto-generate-openapi-docs-for-django-flask-spring-and-rails-apps-2bco</guid>
      <description>&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/OpenAPI_Specification"&gt;OpenAPI Specification&lt;/a&gt; (also/previously called Swagger) helps developers model, document, implement and test web applications and services APIs. It‚Äôs a wonderful thing! And unsurprisingly, it‚Äôs embraced by dev teams and documentation communities across the globe. &lt;/p&gt;

&lt;p&gt;The trouble is, keeping OpenAPI documentation accurate and in sync with implementation updates -- particularly for fast-evolving applications and services -- can be really challenging and time consuming. It‚Äôs also a never-ending task.&lt;/p&gt;

&lt;p&gt;Because the OpenAPI standard can be such an intimidating format to work with (it takes a true &lt;code&gt;yaml&lt;/code&gt; guru to manage long configuration files quickly and precisely!), API documentation is often inaccurate and outdated. And when API documentation isn‚Äôt accurate or up-to-date, devs face frustrating collaboration set-backs, broken applications and integrations, and an overall inefficient use of OpenAPI automation tools.&lt;/p&gt;

&lt;p&gt;To help devs avoid the risks associated with inaccurate and outdated API documentation, we built a &lt;a href="https://appland.com/docs/reference/cli-client.html"&gt;free and open source tool called AppMap&lt;/a&gt; that automatically generates OpenAPI documentation from running code. AppMap ensures your API documentation is always current, accurate and readily available -- no tedious, manual labor required. Huzzah!  &lt;/p&gt;

&lt;p&gt;Here‚Äôs how AppMap OpenAPI generation works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An AppMap agent is added to the tool chain of your application as a new build dependency.&lt;/li&gt;
&lt;li&gt;When you run your tests, the AppMap agent records &lt;a href="https://appland.com/products/appmap"&gt;AppMaps&lt;/a&gt;, which are visual, interactive maps of your application‚Äôs code. AppMaps include details about all of the web service requests made in your tests.&lt;/li&gt;
&lt;li&gt;The AppMap &lt;code&gt;openapi&lt;/code&gt; tool generates OpenAPI documentation from the recorded AppMaps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can execute this flow in either your local environment or in automated CI/CD pipelines. And you can download AppMap with OpenAPI generation for free for your preferred framework &lt;a href="https://appland.com/docs/quickstart/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is a script summary for the AppMap OpenAPI generation for &lt;strong&gt;Python&lt;/strong&gt; video, in case you prefer to read vs. watch. If you‚Äôre working in &lt;strong&gt;Java&lt;/strong&gt; or &lt;strong&gt;Ruby&lt;/strong&gt;, I‚Äôve included videos for those below, too.  We‚Äôre putting the finishing touches on &lt;a href="https://github.com/applandinc/appmap-agent-js"&gt;AppMap for JavaScript&lt;/a&gt; right now, so if you‚Äôre interested in trying that out let us know &lt;a href="https://discord.com/invite/N9VUap6"&gt;in our Discord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading and watching!  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-autogenerate-openapi-documentation-for-python-django-and-flask-applications"&gt;
  &lt;/a&gt;
  How to auto-generate OpenAPI documentation for Python Django and Flask applications
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:00&lt;/code&gt; Today I am going to demonstrate how to automatically generate OpenAPI docs for my Python application with AppMap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:10&lt;/code&gt; My application is Misago - a popular forum application written in Python, Django, ES6 and React.js. I already have a Python development environment set up and I am ready to install AppMap and run tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;00:25&lt;/code&gt; Installing AppMap is easy with the command line installation tool (it requires Node.js). Here's a terminal window with the Misago dev environment active. In the project folder, I'll run:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @appland/appmap
npx appmap install
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The installer asks me to confirm the environment and sets up AppMap automatically. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;00:46&lt;/code&gt; Now I am ready to record AppMaps. I'll simply run tests with &lt;code&gt;APPMAP=true&lt;/code&gt; in the environment:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APPMAP=true pytest
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;if I used Windows, it would be:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set APPMAP=true
pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:55&lt;/code&gt; When the tests finish, AppMap files will be stored in the &lt;code&gt;tmp/appmap/pytest&lt;/code&gt; subfolder of my project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;01:05&lt;/code&gt; In the final step, I will run the AppMap &lt;code&gt;openapi&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx appmap openapi --openapi-title "Misago" --openapi-version "0.27.0" -o misago-openapi.yaml --appmap-dir=tmp/appmap/pytest
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;01:11&lt;/code&gt; And that's it! The &lt;code&gt;misago-openapi.yml&lt;/code&gt; is my generated OpenAPI documentation for my application. If my application consisted of additional microservices, I would generate documentation for each service using the same approach: 1) install AppMap agent, 2) run tests, 3) generate documentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;01:35&lt;/code&gt; I can inspect &lt;code&gt;misago-openapi.yml&lt;/code&gt; in my IDE or in any OpenAPI tool. Let me upload it to &lt;code&gt;swagger.io&lt;/code&gt; now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;01:48&lt;/code&gt; And here it is, an OpenAPI documentation of the Misago app in &lt;a href="https://swagger.io"&gt;&lt;code&gt;swagger.io&lt;/code&gt;&lt;/a&gt;, generated and imported in minutes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-autogenerate-openapi-documentation-for-java-spring-applications"&gt;
  &lt;/a&gt;
  How to auto-generate OpenAPI documentation for Java Spring applications
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kPsTWA1AxmM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:00&lt;/code&gt;  I am going to demonstrate how to automatically generate OpenAPI docs for my Java Spring application with AppMap.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;00:10&lt;/code&gt; My application is WebGoat - a deliberately insecure application that lets developers test vulnerabilities commonly found in Java-based applications that use common and popular open source components.&lt;/p&gt;

&lt;p&gt;You can find the WebGoat repository used in this demo here: &lt;a href="https://github.com/land-of-apps/WebGoat.git"&gt;https://github.com/land-of-apps/WebGoat.git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:24&lt;/code&gt; I already have a Java environment set up and am ready to install AppMap and run tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;00:30&lt;/code&gt; Installing AppMap is easy with the command line installation tool (which requires Node.js). In the WebGoat project folder I'll run this:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @appland/appmap install
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The installer asks me to confirm the environment and sets up AppMap for the project automatically. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;00:48&lt;/code&gt; WebGoat uses &lt;code&gt;Maven&lt;/code&gt; and the AppMap installer adds the AppMap Maven plugin to the master &lt;code&gt;pom.xml&lt;/code&gt; file. A similar gradle plugin exists for gradle-built applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;01:01&lt;/code&gt; Let me quickly review the &lt;code&gt;pom.xml&lt;/code&gt; files of the project, because it‚Äôs always recommended to verify the build configuration of complex Java applications. &lt;/p&gt;

&lt;p&gt;The standard &lt;code&gt;surefire&lt;/code&gt; plugin configuration was modified and the change unfortunately breaks all Java agent plugins such as AppMap or &lt;code&gt;jacoco&lt;/code&gt;. To quickly fix this issue, I've modified the surefire configuration:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;forkCount&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/forkCount&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;reuseForks&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/reuseForks&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;argLine&amp;gt;&lt;/span&gt;
        @{argLine} --illegal-access=permit
    &lt;span class="nt"&gt;&amp;lt;/argLine&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;01:15&lt;/code&gt; Now I will run tests to record AppMaps:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./mvnw test
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If I used Windows:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mvnw test
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;When the tests finish, AppMap files will be stored in the &lt;code&gt;target/appmap&lt;/code&gt; subfolders of all sub-modules that have tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;01:32&lt;/code&gt; In the final step, I will install and run the AppMap &lt;code&gt;openapi&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @appland/appmap
npx appmap openapi --openapi-title "WebGoat" --openapi-version "8.2.0" -o webgoat-openapi.yaml --appmap-dir=.
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;01:39&lt;/code&gt; And that's it! &lt;code&gt;webgoat-openapi.yml&lt;/code&gt; is my generated OpenAPI documentation. If my application&lt;br&gt;
consisted of additional microservices, I would generate documentation from each service using the same approach: 1) install the AppMap agent, 2) run tests, 3) generate OpenAPI documentation from AppMaps.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;02:05&lt;/code&gt; I can inspect &lt;code&gt;webgoat-openapi.yml&lt;/code&gt; in my IDE or in any OpenAPI tool. Let me upload it to &lt;a href="https://swagger.io"&gt;&lt;code&gt;swagger.io&lt;/code&gt;&lt;/a&gt; now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;02:11&lt;/code&gt; And here it is, the OpenAPI documentation of the WebGoat app generated and imported to swagger.io in minutes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-autogenerate-openapi-documentation-for-ruby-on-rails-applications"&gt;
  &lt;/a&gt;
  How to auto-generate OpenAPI documentation for Ruby on Rails applications
&lt;/h2&gt;

&lt;p&gt;Please visit &lt;a href="https://dev.to/appland/how-to-auto-generate-swagger-openapi-doc-for-your-web-services-3npn"&gt;How to auto-generate detailed Swagger/OpenAPI for all your Rails routes&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>java</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>LeetCode - Binary Tree Level Order Traversal</title>
      <author>Alkesh Ghorpade</author>
      <pubDate>Thu, 18 Nov 2021 18:28:32 +0000</pubDate>
      <link>https://dev.to/_alkesh26/leetcode-binary-tree-level-order-traversal-1d5o</link>
      <guid>https://dev.to/_alkesh26/leetcode-binary-tree-level-order-traversal-1d5o</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem statement
&lt;/h3&gt;

&lt;p&gt;Given the &lt;em&gt;root&lt;/em&gt; of a binary tree, return &lt;em&gt;the level order traversal of its nodes'&lt;/em&gt; values. (i.e., from left to right, level by level).&lt;/p&gt;

&lt;p&gt;Problem statement taken from: &lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal"&gt;&lt;/a&gt;&lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal"&gt;https://leetcode.com/problems/binary-tree-level-order-traversal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MoeZsJCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/tree-level-order-traversal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoeZsJCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://alkeshghorpade.me/tree-level-order-traversal.png" alt="Container" width="277" height="302"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [3, 9, 20, null, null, 15, 7]
Output: [[3], [9, 20], [15, 7]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [1]
Output: [[1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = []
Output: []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- The number of nodes in the tree is in the range [0, 2000]
- -1000 &amp;lt;= Node.val &amp;lt;= 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#recursive-function"&gt;
  &lt;/a&gt;
  Recursive function
&lt;/h4&gt;

&lt;p&gt;With trees, recursion is the most widely used approach as the code is easy to read. But for a few problems, recursion increases the time complexity. For large trees, recursion can result in stack overflow or because of &lt;strong&gt;O(N^2)&lt;/strong&gt; time complexity will take a lot of time.&lt;/p&gt;

&lt;p&gt;For this problem, we can use recursion, but we need to calculate the height of the tree.&lt;/p&gt;

&lt;p&gt;A small C++ snippet of the above approach will look as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printLevelOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;printCurrentLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;printLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The time complexity of the above approach is &lt;strong&gt;O(N^2)&lt;/strong&gt; for skewed trees. The worst-case space complexity is &lt;strong&gt;O(N)&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#iterative-approach"&gt;
  &lt;/a&gt;
  Iterative approach
&lt;/h4&gt;

&lt;p&gt;We can improve the time complexity by using a queue as a data structure. Let's check the algorithm.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- initialize 2D array as vector vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result
- initialize size and i

- return result if root == null

- initialize queue&amp;lt;TreeNode*&amp;gt; q
  - push root to queue : q.push(root)

- initialize TreeNode* node for iterating on the tree

- loop while( !q.empty() ) // queue is not empty
  - initialize vector&amp;lt;int&amp;gt; tmp
  - set size = q.size()

  - loop for i = 0; i &amp;lt; size; i++
    - set node = q.front()

    - if node-&amp;gt;left
      - push in queue: q.push(node-&amp;gt;left)

    - if node-&amp;gt;right
      - push in queue: q.push(node-&amp;gt;right)

    - remove the front node: q.pop()

  - push the tmp to result: result.push_back(tmp)

- return result
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#c-solution"&gt;
  &lt;/a&gt;
  C++ solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;levelOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#golang-solution"&gt;
  &lt;/a&gt;
  Golang solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;levelOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[][]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#javascript-solution"&gt;
  &lt;/a&gt;
  Javascript solution
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;levelOrder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dry-run our algorithm to see how the solution works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: root = [3, 9, 20, null, null, 15, 7]

Step 1: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; result;
        int size, i;

Step 2: root == null
        [3, 9..] == null
        false

Step 3: queue&amp;lt;TreeNode*&amp;gt; q;
        q.push(root);

        q = [3]

Step 4: loop !q.empty()
        q = [3]
        q.empty() = false
        !false = true

        vector&amp;lt;int&amp;gt; tmp
        size = q.size()
             = 1

        for(i = 0; i &amp;lt; 1; i++)
          - 0 &amp;lt; 1
          - true

          node = q.front()
          node = 3

          if node-&amp;gt;left
            - node-&amp;gt;left = 9
            - q.push(node-&amp;gt;left)
            - q = [3, 9]

          if node-&amp;gt;right
            - node-&amp;gt;right = 20
            - q.push(node-&amp;gt;right)
            - q = [3, 9, 20]


          q.pop()
          q = [9, 20]

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(3)

          i++
          i = 1

        for(i &amp;lt; 1)
        1 &amp;lt; 1
        false

        result.push_back(tmp)
        result = [[3]]

Step 5: loop !q.empty()
        q = [9, 20]
        q.empty() = false
        !false = true

        vector&amp;lt;int&amp;gt; tmp
        size = q.size()
             = 2

        for(i = 0; i &amp;lt; 2; i++)
          - 0 &amp;lt; 2
          - true

          node = q.front()
          node = 9

          if node-&amp;gt;left
            - node-&amp;gt;left = nil
            - false

          if node-&amp;gt;right
            - node-&amp;gt;right = nil
            - false

          q.pop()
          q = [20]

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(9)

          i++
          i = 1

        for(i &amp;lt; 2)
          - 1 &amp;lt; 2
          - true

          node = q.front()
          node = 20

          if node-&amp;gt;left
            - node-&amp;gt;left = 15
            - q.push(node-&amp;gt;left)
            - q = [20, 15]

          if node-&amp;gt;right
            - node-&amp;gt;left = 7
            - q.push(node-&amp;gt;right)
            - q = [20, 15, 7]

          q.pop()
          q = [15, 7]

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(20)
          tmp = [9, 20]

          i++
          i = 2

        for(i &amp;lt; 2)
          - 2 &amp;lt; 2
          - false

        result.push_back(tmp)
        result = [[3], [9, 20]]

Step 6: loop !q.empty()
        q = [15, 7]
        q.empty() = false
        !false = true

        vector&amp;lt;int&amp;gt; tmp
        size = q.size()
             = 2

        for(i = 0; i &amp;lt; 2; i++)
          - 0 &amp;lt; 2
          - true

          node = q.front()
          node = 15

          if node-&amp;gt;left
            - node-&amp;gt;left = nil
            - false

          if node-&amp;gt;right
            - node-&amp;gt;right = nil
            - false

          q.pop()
          q = [7]

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(15)

          i++
          i = 1

        for(i &amp;lt; 2)
          - 1 &amp;lt; 2
          - true

          node = q.front()
          node = 7

          if node-&amp;gt;left
            - node-&amp;gt;left = nil
            - false

          if node-&amp;gt;right
            - node-&amp;gt;right = nil
            - false

          q.pop()
          q = []

          tmp.push_back(node-&amp;gt;val)
          tmp.push_back(7)
          tmp = [15, 7]

          i++
          i = 2

        for(i &amp;lt; 2)
          - 2 &amp;lt; 2
          - false

        result.push_back(tmp)
        result = [[3], [9, 20], [15, 7]]

Step 7: loop !q.empty()
        q = []
        q.empty() = true
        !true = false

Step 8: return result

So we return the result as [[3], [9, 20], [15, 7]].
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>leetcode</category>
      <category>cpp</category>
      <category>go</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Ironhack Full Stack Developer Bootcamp - Week 2 - Calvin Torra</title>
      <author>Calvin T</author>
      <pubDate>Thu, 18 Nov 2021 18:16:37 +0000</pubDate>
      <link>https://dev.to/calvin087/ironhack-full-stack-developer-bootcamp-week-2-calvin-torra-2hol</link>
      <guid>https://dev.to/calvin087/ironhack-full-stack-developer-bootcamp-week-2-calvin-torra-2hol</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BHKzW97_EqU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Links Mentioned in Video:&lt;/strong&gt;&lt;br&gt;
&lt;a href="//2-hour-productivity.thinkific.com"&gt;2 Hour Productivity:&lt;/a&gt;&lt;br&gt;
&lt;a href="//youtube.com/c/DrewConley"&gt;Draw Conley JS Games:&lt;/a&gt;&lt;br&gt;
&lt;a href="//zorbi.cards"&gt;Zorbi FlashCards:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Socials&lt;/strong&gt;&lt;br&gt;
üèóÔ∏è  &lt;a href="//calvintorra.com"&gt;calvintorra.com&lt;/a&gt;&lt;br&gt;
üì±  &lt;a href="//twitter.com/Gr8087"&gt;twitter&lt;/a&gt;&lt;br&gt;
üìÇ  &lt;a href="//github.com/Calvin087"&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We were actually given the entire curriculum as an online platform that contains all of the documentation for the course in English which is useful for me. If I get lost at all in Spanish I have the online platform as a backup.&lt;/p&gt;

&lt;p&gt;It only occurred to me the other day to skip ahead and see what things need to be done at the end of each module. And For this first section, it's an HTML CSS and JS game.&lt;/p&gt;

&lt;p&gt;All of the lessons for the next few weeks leading up to the building, presentation and submission of a game, which was a bit worrying for me as I've never done that before.&lt;/p&gt;

&lt;p&gt;So that got me pondering on what my game is going to be about?&lt;/p&gt;

&lt;p&gt;Obviously, it shouldn't be too complicated as I'd end up not finishing it, but after doing a little bit of youtube searching to see what is actually possible I'm now a little obsessed.&lt;/p&gt;

&lt;p&gt;For instance, there's this guy Drew Conley who just walks through the mechanics of his javascript game, the graphics look super cute and simple and they remind me of those old Pok√©mon games on the Gameboy.&lt;/p&gt;

&lt;p&gt;I'd love to make something like this and if I start early enough maybe I can crank out an MVP in time for the end of the module that is not a complete pile of crap.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theme-of-the-game"&gt;
  &lt;/a&gt;
  Theme of the game
&lt;/h1&gt;

&lt;p&gt;I've never read a lot of fiction so my imagination is really crap compared to when I was a kid. All of my books are instructional how-tos or knowledge books.&lt;/p&gt;

&lt;p&gt;However, when I'm super tired I do binge-watch this youtube series called the SCP Foundation. I have no idea how I came across the first video but it sucked me into a massive rabbit hole of never-ending stories.&lt;/p&gt;

&lt;p&gt;The SCP foundation stands for "Secure Contain Protect". It's a community-based wiki that includes elements of many genres such as science fiction, urban fantasy and horror....and I looooove horror.&lt;/p&gt;

&lt;p&gt;I'm thinking maybe the game can be a simple puzzle game, a monster has breached containment, one or two puzzle features, maybe a scare jump and a count down timer until the SCP Monsters catches up with you and does its thing.&lt;/p&gt;

&lt;p&gt;I haven't actually felt excited about a project in a long time, so I feel that If I try to achieve this, I might be able to make something I'm actually proud of.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#style-of-the-game"&gt;
  &lt;/a&gt;
  Style of the game
&lt;/h1&gt;

&lt;p&gt;A work colleague warned me not to make things too complicated........but I'm sure there must be a shortcut I can take somewhere.&lt;/p&gt;

&lt;p&gt;So For example, something that I found fascinating is a sprite sheet. Rather than animated characters you simply rapidly change the X and y position of the sprite sheet and hide the rest. This happens so fast that the player's eyes simply see a moving character. Things like this can probably save me time in development.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-in-public"&gt;
  &lt;/a&gt;
  Building in public.
&lt;/h1&gt;

&lt;p&gt;I'm probably going to make a start on this game idea this week and I might document the journey whether I succeed or fail.&lt;/p&gt;

&lt;p&gt;I guess it's more of a form of accountability than anything else as I usually get bored of side projects pretty quickly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems.
&lt;/h1&gt;

&lt;p&gt;Now that I think about it, I don't know if we're supposed to do this in pairs. If we are then I may have to make this game on my own time rather than burden someone with my silly ideas and over-ambitious projects but we'll see.&lt;/p&gt;

&lt;p&gt;Back to the course.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#array-methods"&gt;
  &lt;/a&gt;
  Array methods
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Map, Reduce, Filter, Sort.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's quite interesting how early on they introduced these methods as they aren't easy concepts to get your head around as a beginner.&lt;/p&gt;

&lt;p&gt;We had a brief intro into how they worked and then we got told to crack on with solving some problems.&lt;/p&gt;

&lt;p&gt;Problems that I thought were pretty intense for someone's second week of programming.&lt;/p&gt;

&lt;p&gt;Array.Sort tripped me up quite a bit this time around.&lt;/p&gt;

&lt;p&gt;We had an array of 250 objects that contained dates, titles, director names as properties.&lt;/p&gt;

&lt;p&gt;We had to sort these in ascending order by their date....fine, but if two objects have the same date, those two had to be sorted alphabetically - all in the same sort iteration.&lt;/p&gt;

&lt;p&gt;I've literally never seen this pattern before and even had a hard time finding solutions or examples online.&lt;/p&gt;

&lt;p&gt;Naturally, I came home and spent another hour digging into how Array.Sort actually works under the hood and how to get it working without just copying and pasting a solution found online.&lt;/p&gt;

&lt;p&gt;Now that I've got it, I'll probably make a video for my future self as that will probably come up again at some point.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pair-programming-second-stage"&gt;
  &lt;/a&gt;
  Pair Programming Second Stage
&lt;/h1&gt;

&lt;p&gt;I was looking forward to pair programming again but this time around I paired up with a new person.&lt;/p&gt;

&lt;p&gt;I think this guy was a little bit similar to me in the sense that he just wanted to be in his own headspace and crank out the problems.&lt;/p&gt;

&lt;p&gt;So we exchanged a few words here and there but in the end, we were solving the new challenges in our own way and moving on without waiting for the other to catch up.&lt;/p&gt;

&lt;p&gt;Not ideal, but I guess this is the reality of working with other people on a mentally taxing exercise.&lt;/p&gt;

&lt;p&gt;Some people are going to be more open to collaboration while others just want to crank out the code and get in the zone.&lt;/p&gt;

&lt;p&gt;Not quite sure which one of those I am yet.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#flashcards-app"&gt;
  &lt;/a&gt;
  FlashCards App
&lt;/h1&gt;

&lt;p&gt;I've already moved away from Mochi and found something called Zorbi. It's a free app and I've already loaded it up without 50 new Spanish words to remember. It's already one of my favourite apps just for its ease of use&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Internal PR for Release 0.3</title>
      <author>Ahmad</author>
      <pubDate>Thu, 18 Nov 2021 18:14:43 +0000</pubDate>
      <link>https://dev.to/ar/internal-pr-for-release-03-588m</link>
      <guid>https://dev.to/ar/internal-pr-for-release-03-588m</guid>
      <description>&lt;p&gt;Part of Release 0.1 was to make a meaningful contribution to either &lt;a href="https://github.com/Seneca-CDOT/telescope"&gt;telescope&lt;/a&gt; or the &lt;a href="https://github.com/Seneca-ICTOER/IPC144"&gt;modernization of IPC144&lt;/a&gt; project. I went with the latter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issue"&gt;
  &lt;/a&gt;
  The Issue
&lt;/h2&gt;

&lt;p&gt;I scrolled through the list of issues to get an idea of what's being worked on. I noticed a large &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/18"&gt;issue&lt;/a&gt; that requested an audit of all markdown pages.&lt;/p&gt;

&lt;p&gt;I chose a random markdown page from the list and created my own &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/33"&gt;issue&lt;/a&gt; stating that I'd like to work on it.&lt;/p&gt;

&lt;p&gt;I quickly noticed a lot of small problems with the page. Such as missing alt texts, extra code block indentations, missing backticks, and images not being centered. &lt;/p&gt;

&lt;p&gt;For the image centering, I wanted to use the &lt;code&gt;text-align&lt;/code&gt; CSS property. This property only works in &lt;code&gt;div&lt;/code&gt; tags, so I changed the &lt;code&gt;.mdImg&lt;/code&gt; CSS class to &lt;code&gt;div.mdImg&lt;/code&gt;. Because &lt;code&gt;.mdImg&lt;/code&gt; was being used on another markdown page, I had to change the &lt;code&gt;span&lt;/code&gt; elements to &lt;code&gt;div&lt;/code&gt; on that page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5NK95KQs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fmq58e7hblkltb8shlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5NK95KQs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fmq58e7hblkltb8shlw.png" alt="Image description" width="215" height="132"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pull-request"&gt;
  &lt;/a&gt;
  Pull Request
&lt;/h2&gt;

&lt;p&gt;Once I was done auditing I submitted a &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/59"&gt;pull request&lt;/a&gt; and waited. A day later it was &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/59#pullrequestreview-803924776"&gt;explained to me&lt;/a&gt; that we'd soon be using the ideal-image plugin to handle all of the image stuff, so my changes weren't needed. I was told we could keep my changes for now, and replace them with ideal-image whenever it's implemented. This made sense and the pull request was merged.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Python array Example - Create two different arrays and join them</title>
      <author>rrtutors</author>
      <pubDate>Thu, 18 Nov 2021 18:12:32 +0000</pubDate>
      <link>https://dev.to/rrtutors/python-array-example-create-two-different-arrays-and-join-them-1o1</link>
      <guid>https://dev.to/rrtutors/python-array-example-create-two-different-arrays-and-join-them-1o1</guid>
      <description>&lt;p&gt;Create two arrays one contains three numbers that the user enters and other containing a set of five random numbers. Join these two arrays and display this array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;
&lt;span class="nn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'i'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[])&lt;/span&gt;
&lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'i'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[])&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter a number: "&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Second Random Array"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;randint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Join two Arrays"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;extend&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nl"&gt;num1:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sort Joined Array"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nl"&gt;num1:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we create&lt;/p&gt;


&lt;li&gt;Array num1 with user enetered elements&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Create Array num2 with random numbers&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Then we joined two arrays using extend() method&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Finally we sorted joined array using sorted() method&lt;/li&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Output&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter a number: 12
Enter a number: 23
Enter a number: 45
Second Random Array
Join two Arrays
12
23
45
85
77
86
71
22
Sort Joined Array
12
22
23
45
71
77
85
86
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Python Array Examples&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;li&gt;Ask the user to enter numbers. If the user enter number between 10 to 100 store them in array other wise display message "Outside the Range". If the list contains five items then display  message "Thank you " and disply entered list items
&lt;a href="https://rrtutors.com/tutorials/Python-Array-Example-Create-array-with-fixed-size-elements"&gt;Python Array Example - Create array with fixed size elements&lt;/a&gt;
&lt;/li&gt;



&lt;li&gt;Create an Array which contains 10 numbers (one can be multiple times), display whole array to user, then ask user to enter one of the numbers from the array and then display a message that how many times that number appears in the list
&lt;a href="https://rrtutors.com/tutorials/Python-Array-Example-Check-array-elements-availability-count"&gt;Python Array Example - Check array elements availability count&lt;/a&gt;
&lt;/li&gt;



&lt;li&gt;Ask the user to Enter five integeres, then Store them in an array. After that sort the list and display them in reveres order
&lt;a href="https://rrtutors.com/tutorials/Python-Array-Example-Insert-and-sort-the-array-items"&gt;Python Array Example - Insert and sort the array items&lt;/a&gt;
&lt;/li&gt;



&lt;li&gt;Create an Array which will store integeres. Generate Random numbers and add them in created list and finally display the list items
&lt;a href="https://rrtutors.com/tutorials/Python-Array-Example-Create-array-with-Random-Integer-Numbers"&gt;Python Array Example - Create array with Random Integer Numbers&lt;/a&gt;
&lt;/li&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Contribution to course curriculum</title>
      <author>Luke Nguyen</author>
      <pubDate>Thu, 18 Nov 2021 18:07:28 +0000</pubDate>
      <link>https://dev.to/mqnguyen/contribution-to-course-curriculum-2eb9</link>
      <guid>https://dev.to/mqnguyen/contribution-to-course-curriculum-2eb9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Finally, I made it through Hacktoberfest! And, I also got myself a fancy new T-shirt! Celebration aside, I still have a lot of work to do. Working in open-source means you always have to be ready to look for new issues, find ways to contribute to the community of developers, and always set yourself up for new challenges. And this week, I had a chance to contribute to my school's course curriculum.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;The IPC144 course curriculum renewal is a project that aims to update the original course note to a brand new one using Docusaurus. As mentioned before in &lt;a href="https://dev.to/mqnguyen/prototype-markdown-and-static-assets-support-for-ssg-547e"&gt;one&lt;/a&gt; of my blogs, Docusaurus is a static-site generator for building, deploying, and maintaining documentation websites. Most of the notes have already been changed to use Docusaurus, but the project needs contributions to review each converted section, add new features, or fix existing bugs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issue"&gt;
  &lt;/a&gt;
  The issue
&lt;/h2&gt;

&lt;p&gt;After looking at all the available issues, I decided to go with &lt;a href="https://github.com/Seneca-ICTOER/IPC144/issues/24"&gt;adding static analysis tooling&lt;/a&gt;, specifically, installing and configuring Prettier as the source code formatter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-on-the-issue"&gt;
  &lt;/a&gt;
  Working on the issue
&lt;/h2&gt;

&lt;p&gt;Working on the issue was not too difficult, and I already have a different &lt;a href="https://dev.to/mqnguyen/static-analysis-tooling-n55"&gt;blog&lt;/a&gt; where I walk through how I setup Prettier, but here is an overview of what I did:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installed Prettier using &lt;a href="https://www.npmjs.com/package/prettier"&gt;npm&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Added a &lt;code&gt;.prettierrc&lt;/code&gt; file to configure all the options and a &lt;code&gt;.prettierignore&lt;/code&gt; file to skip the ones that don't need formatting.&lt;/li&gt;
&lt;li&gt;Added the necessary scripts to run Prettier in &lt;code&gt;package.json&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#submitting-the-pr"&gt;
  &lt;/a&gt;
  Submitting the PR
&lt;/h2&gt;

&lt;p&gt;Once I was satisfied with my work, I created a &lt;a href="https://github.com/Seneca-ICTOER/IPC144/pull/50"&gt;pull request&lt;/a&gt; and explained what I had done. Getting in touch with the project's maintainers was quick, as I could reach them through Slack. However, during the reviewing process, my professor (one of the maintainers) noticed an issue when Prettier formatted the Markdown files. Per my professor's request, I decided to alert other students working on auditing and fixing the documentation about this problem by filing a new issue. I made sure to write down a detailed explanation of how and why it happened while providing Prettier configurations so that other contributors could test their changes or replicate the issue if needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;At the moment, the pull request was waiting to be merged. I will constantly keep track of any notifications and add changes if needed.&lt;/p&gt;

&lt;p&gt;Happy coding! üíª&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>You MUST store this Javascript Operator Index</title>
      <author>CodeOz</author>
      <pubDate>Thu, 18 Nov 2021 18:04:09 +0000</pubDate>
      <link>https://dev.to/codeoz/you-must-store-this-javascript-operator-index-2bec</link>
      <guid>https://dev.to/codeoz/you-must-store-this-javascript-operator-index-2bec</guid>
      <description>&lt;p&gt;Here is a list of javascript operator and how to use it!&lt;/p&gt;

&lt;p&gt;You should mark this and use it when you need to know what is this operator!&lt;/p&gt;

&lt;p&gt;In order to naviguate, you can make a &lt;code&gt;cmd + f&lt;/code&gt; or &lt;code&gt;ctrl + f&lt;/code&gt; and put the operator that you need and put &lt;code&gt;:&lt;/code&gt; after this.&lt;/p&gt;

&lt;p&gt;Example: &lt;code&gt;...:&lt;/code&gt; if I'm looking for what is &lt;code&gt;...&lt;/code&gt; operator &lt;/p&gt;

&lt;p&gt;üö® Popularity is defined by my &lt;strong&gt;OWN&lt;/strong&gt; usage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ambidextrous-operator"&gt;
  &lt;/a&gt;
  Ambidextrous operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-addition-unary-plus"&gt;
  &lt;/a&gt;
  &lt;code&gt;+&lt;/code&gt;: &lt;strong&gt;addition | unary plus&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-before-operand-it-will-be-used-as-raw-unary-plus-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;+&lt;/code&gt; operator &lt;strong&gt;BEFORE&lt;/strong&gt; operand, it will be used as &lt;code&gt;unary plus operator&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;The unary plus operator precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn't already.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: -1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;üìù Note: If you try to use it with a string that is not a number, it will return NaN (not a number)&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-in-other-context-will-be-used-as-raw-addition-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;+&lt;/code&gt; operator in other context will be used as &lt;code&gt;addition operator&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;It Produces the &lt;code&gt;sum of numeric operands&lt;/code&gt; except for &lt;code&gt;string&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;üìù Note: It will convert boolean to number, object to number&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(2 + 4) // 6
console.log(2 + true) // 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you use it with string it will make a &lt;code&gt;string concatenation&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;code oz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my name is &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;üìù Note: you should use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template litterals&lt;/a&gt; string instead of concatenation&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-subtraction-unary-negation"&gt;
  &lt;/a&gt;
  &lt;code&gt;-&lt;/code&gt;: &lt;strong&gt;subtraction | unary negation&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-before-operand-it-will-be-used-as-raw-unary-negation-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;-&lt;/code&gt; operator &lt;strong&gt;BEFORE&lt;/strong&gt; operand, it will be used as &lt;code&gt;unary negation operator&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;The unary negation operator precedes its operand and negates it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;üìù Note: It will convert boolean to number, object to number &amp;amp; string to number&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// -5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;üìù Note: If you try to use it with a string that is not a number, it will return NaN (not a number)&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-in-other-context-will-be-used-as-raw-subtraction-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;-&lt;/code&gt; operator in other context will be used as &lt;code&gt;subtraction operator&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;It subtracts the two operands, producing their difference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 2&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: -1.5&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: NaN&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-spread-rest"&gt;
  &lt;/a&gt;
  &lt;code&gt;...&lt;/code&gt;: &lt;strong&gt;spread | rest&lt;/strong&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-in-function-parameters-it-will-be-used-as-raw-rest-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;...&lt;/code&gt; operator in function parameters, it will be used as &lt;code&gt;rest operator&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;It allows us to have an unlimited number of parameter for this function!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rest parameter is handle as array in the function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Nice your function can handle different number of parameters !&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-in-other-context-it-will-be-used-as-raw-spread-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;...&lt;/code&gt; operator in other context, it will be used as &lt;code&gt;spread operator&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you use it as arguments in function: It will allows an iterable such as an &lt;code&gt;array expression&lt;/code&gt; in function parameters.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;Fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;f3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getFruits&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Fruits: Apple, Orange and Banana&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can also use it for &lt;code&gt;extracting&lt;/code&gt; values from &lt;code&gt;array&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// We extract the first Item of the array into the variable and the others variable in an array named others&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;firstItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;firstItem&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="c1"&gt;// [ 2, 3, 4 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 1, we extract the a key from toto object&lt;/span&gt;
&lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="c1"&gt;// { b: 2, c: 3 }, we extract other key in the object thanks to rest operator &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;üìù Note: When you are doing &lt;code&gt;const toto = { ...anotherObject }&lt;/code&gt; it's equal to &lt;code&gt;const toto = Object.assign({}, anotherObject)&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logical-operator"&gt;
  &lt;/a&gt;
  Logical operator
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Thing to know: All value in Javascript are falsy or truthy value, it means that you can make Boolean(any value), and you will get boolean value. In Javascript all value are truthy value except 0, null, undefined, NaN, empty string&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ampamp-endraw-logical-and"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;: &lt;strong&gt;logical AND&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ&lt;/p&gt;

&lt;p&gt;Use to check if all value (in general value are condition) are truthy.&lt;/p&gt;

&lt;p&gt;It will return the first value falsy, otherwise it will return the final value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="c1"&gt;// will return false &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valueBis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="c1"&gt;// will return false&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// will return 1 since all value before are true (5 &amp;amp; 3)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;// will return 0 since it's the first falsy value&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstCondition&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;secondCondition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// console log will be shown only if both condition are true!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ampamp-endraw-logical-and-assignement"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;: &lt;strong&gt;logical AND assignement&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Value is assigned only if value passed is truthy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// toto value will be NOT changed since toto is falsy (0)&lt;/span&gt;
&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;// tutu value will be replaced by 3 since tutu is trusly (2)&lt;/span&gt;

&lt;span class="c1"&gt;// toto &amp;amp;&amp;amp;= 5 It's a shortcut of üëá&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-or"&gt;
  &lt;/a&gt;
  &lt;code&gt;||&lt;/code&gt;: &lt;strong&gt;logical OR&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ&lt;/p&gt;

&lt;p&gt;Use to check if one value (in general value are condition) are truthy among a set of value.&lt;/p&gt;

&lt;p&gt;It will return the first value truthy, otherwise it will return the final value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="c1"&gt;// will return true &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valueBis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="c1"&gt;// will return true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// will return 5 since it's the first truthy value&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// will return 2 since it's the first truthy value&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstCondition&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;secondCondition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// console log will be shown if one condition matches!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-or-assignement"&gt;
  &lt;/a&gt;
  &lt;code&gt;||=&lt;/code&gt;: &lt;strong&gt;logical OR assignement&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Value is assigned only if value passed is falsy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// toto value will be replaced by 5 since toto is falsy (0)&lt;/span&gt;
&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;// tutu value will NOT changed since tutu is not a falsy value (2)&lt;/span&gt;

&lt;span class="c1"&gt;// toto ||= 5 It's a shortcut of üëá&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-nullish-coalescing"&gt;
  &lt;/a&gt;
  &lt;code&gt;??&lt;/code&gt;: &lt;strong&gt;logical Nullish Coalescing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Returns its &lt;em&gt;right-hand side operand&lt;/em&gt; when its left-hand side operand is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; (nullish value).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 0 since 0 is not equal to nullish value.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// 'hello' since the right-hand side is equal to `null`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// '55 since the right-hand side is equal to `undefined`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;titi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="c1"&gt;// undefined since the right-hand side is equal to `null`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;‚ö†Ô∏è Be careful: &lt;code&gt;??&lt;/code&gt; operator is different of &lt;code&gt;||&lt;/code&gt;, so when you need to assign a value depending on other value, you should pick the correct operator!&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 55 since 0 is a falsy value&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;titi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 0 since 0 is different of nullish value&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 55 since undefined is a falsy value&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 55 since undefined is equal to nullish value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-nullish-assignement"&gt;
  &lt;/a&gt;
  &lt;code&gt;??=&lt;/code&gt;: &lt;strong&gt;logical Nullish assignement&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Value is assigned only if value passed is equal to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; (nullish).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// toto is equal to 55 since it's a nullish value (null)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;
&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="c1"&gt;// toto is equal to 90 since it's not a nullish value (90)&lt;/span&gt;
&lt;span class="c1"&gt;// toto ??= 5 It's a shortcut of üëá&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// Equal to 5 since toto is equal to null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-not"&gt;
  &lt;/a&gt;
  &lt;code&gt;!&lt;/code&gt;: &lt;strong&gt;logical NOT&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ&lt;/p&gt;

&lt;p&gt;Swap a &lt;code&gt;true value&lt;/code&gt; into &lt;code&gt;false value&lt;/code&gt; and &lt;code&gt;false value&lt;/code&gt; into &lt;code&gt;true value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It also &lt;strong&gt;convert any value&lt;/strong&gt; to &lt;strong&gt;boolean value&lt;/strong&gt;. So all &lt;code&gt;truthy&lt;/code&gt; value become &lt;code&gt;falsy&lt;/code&gt; value and vice versa. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;üí° Tips: I use &lt;strong&gt;double logical&lt;/strong&gt; operator a lot in order to convert &lt;strong&gt;any value&lt;/strong&gt; to boolean! It's equal to use Boolean(any value)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// My tips üëá&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// true, equal to Boolean({})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// true, equal to Boolean([])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// I use a lot in order to check if a value is defined or undefined! (Be careful, if the value is equal to `0` it will be false!)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#special-operator"&gt;
  &lt;/a&gt;
  Special operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-optional-chaining"&gt;
  &lt;/a&gt;
  &lt;code&gt;?.&lt;/code&gt;: &lt;strong&gt;Optional chaining&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ&lt;/p&gt;

&lt;p&gt;It allows to accesses a property on an object without having to check if each reference in the chain is valid.&lt;/p&gt;

&lt;p&gt;It's not really clear? Ok let's have a look üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// { b: 5 }&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="c1"&gt;// Uncaught TypeError: Cannot read properties of undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact in you try to access to a property on an undefined property, Javascript engine will trigger an error!&lt;/p&gt;

&lt;p&gt;So to be safe we need to make something like üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// It's safe to use it since we check before if the property exist!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it's not really convenient to make this, isn't?&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;opional chaining&lt;/code&gt; is here to save us! ü¶∏‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;You can try to access to a property &lt;strong&gt;without check if all property exist before&lt;/strong&gt; as show above! You just need to use this operator on property, if the property doesn't exist, it will return &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-ternary"&gt;
  &lt;/a&gt;
  &lt;code&gt;?&lt;/code&gt;: &lt;strong&gt;Ternary&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ&lt;/p&gt;

&lt;p&gt;Is the only operator in Javascript that requires two pseudo operand (&lt;code&gt;?&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt;). It evaluate a condition &lt;strong&gt;depending on&lt;/strong&gt; whether that condition is &lt;code&gt;falsy&lt;/code&gt; or &lt;code&gt;truthy&lt;/code&gt;! It's equivalent to &lt;code&gt;if (...) &amp;amp; else (...)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 34&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//  It's a shortcut of üëá&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comparator-operator"&gt;
  &lt;/a&gt;
  Comparator operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-equality"&gt;
  &lt;/a&gt;
  &lt;code&gt;==&lt;/code&gt;: &lt;strong&gt;Equality&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It checks whether its two operands are equal, returning a Boolean result. Unlike the &lt;code&gt;=== (strict equality operator)&lt;/code&gt;, it attempts to convert (make an implicit coercion) and compare operands that are of different types.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;üìù Note: The mechanic of implicit coercion is not easy to understand but you can check it in details at this post &lt;a href="https://dev.to/codeozz/implicit-coercion-in-javascript-neh"&gt;https://dev.to/codeozz/implicit-coercion-in-javascript-neh&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here an exemple of how the implicit corecion is done! üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1) Not the same type so implicit coercion will be made&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;

&lt;span class="c1"&gt;// 2) Convert string into number so &lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;

&lt;span class="c1"&gt;// 3) We got an number so we can check value&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="c1"&gt;// true !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In general you should use &lt;code&gt;=== (strict equality)&lt;/code&gt; and avoid this operator!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-strict-equality"&gt;
  &lt;/a&gt;
  &lt;code&gt;===&lt;/code&gt;: &lt;strong&gt;Strict Equality&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ&lt;/p&gt;

&lt;p&gt;It checks whether its two operands are equal, returning a Boolean result. Unlike the &lt;code&gt;== (equality operator)&lt;/code&gt;, the strict equality operator always considers operands of different types to be different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should always use this operator instead of &lt;code&gt;== (equality operator)&lt;/code&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-inequality"&gt;
  &lt;/a&gt;
  &lt;code&gt;!=&lt;/code&gt;: &lt;strong&gt;Inequality&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It checks whether its two operands are not equal, returning a Boolean result. Unlike the &lt;code&gt;!== (strict inequality operator)&lt;/code&gt;, it attempts to convert and compare operands that are of different types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In general you should use &lt;code&gt;!== (strict inequality)&lt;/code&gt; and avoid this operator!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-strict-inequality"&gt;
  &lt;/a&gt;
  &lt;code&gt;!==&lt;/code&gt;: &lt;strong&gt;Strict Inequality&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ&lt;/p&gt;

&lt;p&gt;It checks whether its two operands are not equal, returning a Boolean result. Unlike the &lt;code&gt;(!= inequality operator)&lt;/code&gt;, the strict inequality operator always considers operands of different types to be different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should always use this operator instead of &lt;code&gt;!= (inequality)&lt;/code&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-gt-endraw-greater-than"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&lt;/code&gt;: &lt;strong&gt;Greater than&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ&lt;/p&gt;

&lt;p&gt;It returns true if the left operand is greater than the right operand, and false otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gt-endraw-greater-than-or-equal-to"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;=&lt;/code&gt;: &lt;strong&gt;Greater than or Equal To&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ&lt;/p&gt;

&lt;p&gt;It returns true if the left operand is greater than or equal to the right operand, and false otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-lt-endraw-less-than"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;&lt;/code&gt;: &lt;strong&gt;Less than&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ&lt;/p&gt;

&lt;p&gt;It returns true if the left operand is less than the right operand, and false otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-lt-endraw-less-than-or-equal-to"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;=&lt;/code&gt;: &lt;strong&gt;Less than or Equal To&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ&lt;/p&gt;

&lt;p&gt;It returns true if the left operand is less than or equal to the right operand, and false otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="c1"&gt;// Compare bigint to number (note: bigint is not supported in all browsers)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arithmetic-operator"&gt;
  &lt;/a&gt;
  Arithmetic operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-addition-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;+=&lt;/code&gt;: &lt;strong&gt;Addition Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Adds&lt;/code&gt; the value of the right operand to a variable and assigns the &lt;code&gt;result to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// b will be equal to 8, since we are adding 5 to b variable!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-subtraction-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;-=&lt;/code&gt;: &lt;strong&gt;Subtraction Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Subtracts&lt;/code&gt; the value of the right operand to a variable and assigns the &lt;code&gt;result to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// b will be equal to 2, since we are subtracting 5 to b variable!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-multiplication"&gt;
  &lt;/a&gt;
  &lt;code&gt;*&lt;/code&gt;: &lt;strong&gt;Multiplication&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Its produces the product of the operands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-multiplication-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;*=&lt;/code&gt;: &lt;strong&gt;Multiplication Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Multiple&lt;/code&gt; the value of the right operand to a variable and assigns the &lt;code&gt;result to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-division"&gt;
  &lt;/a&gt;
  &lt;code&gt;/&lt;/code&gt;: &lt;strong&gt;Division&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Its produces the &lt;code&gt;quotient of its operands&lt;/code&gt; where the left operand is the dividend and the right operand is the divisor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Infinity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-division-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;/=&lt;/code&gt;: &lt;strong&gt;Division Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Divide&lt;/code&gt; the value of the right operand to a variable and assigns the &lt;code&gt;result to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-exponentiation"&gt;
  &lt;/a&gt;
  &lt;code&gt;**&lt;/code&gt;: &lt;strong&gt;Exponentiation&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Its returns the result of raising the first operand to the power of the second operand. It is equivalent to &lt;code&gt;Math.pow&lt;/code&gt;, except it also accepts BigInts as operands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 100, it equals to 10^2 or Math.pow(10, 2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-exponentiation-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;**=&lt;/code&gt;: &lt;strong&gt;Exponentiation Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It &lt;code&gt;raises the value of a variable&lt;/code&gt; to the power of the right operand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;**=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 1024, it equals to 2^10 or Math.pow(2, 10)&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 100, it equals to 10^2 or Math.pow(10, 2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-remainder-modulo"&gt;
  &lt;/a&gt;
  &lt;code&gt;%&lt;/code&gt;: &lt;strong&gt;Remainder (modulo)&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Its returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;More information about modulo in mathematic -&amp;gt; &lt;a href="https://simple.wikipedia.org/wiki/Modulo_operation"&gt;https://simple.wikipedia.org/wiki/Modulo_operation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-remainder-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;%=&lt;/code&gt;: &lt;strong&gt;Remainder Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It &lt;code&gt;divides a variable by the value of the right operand&lt;/code&gt; and assigns the &lt;code&gt;remainder to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 1 it's equal to a % b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;More information about modulo in mathematic -&amp;gt; &lt;a href="https://simple.wikipedia.org/wiki/Modulo_operation"&gt;https://simple.wikipedia.org/wiki/Modulo_operation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-increment"&gt;
  &lt;/a&gt;
  &lt;code&gt;++&lt;/code&gt;: &lt;strong&gt;Increment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It increments (adds one to) its operand and returns a value.&lt;/p&gt;

&lt;p&gt;You can use it in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; As &lt;code&gt;pre increment&lt;/code&gt;: It increment the value &lt;strong&gt;before&lt;/strong&gt; the operation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 56&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 56&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; As &lt;code&gt;post increment&lt;/code&gt;: It increment the value &lt;strong&gt;after&lt;/strong&gt; the operation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 56&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-decrement"&gt;
  &lt;/a&gt;
  &lt;code&gt;--&lt;/code&gt;: &lt;strong&gt;Decrement&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It decrement (subtracts one to) its operand and returns a value.&lt;/p&gt;

&lt;p&gt;You can use it in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; As &lt;code&gt;pre decrement&lt;/code&gt;: It decrement the value &lt;strong&gt;before&lt;/strong&gt; the operation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 54&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 54&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; As &lt;code&gt;post decrement&lt;/code&gt;: It decrement the value &lt;strong&gt;after&lt;/strong&gt; the operation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 54&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bits-operator"&gt;
  &lt;/a&gt;
  Bits operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-amp-endraw-bitwise-and"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;&lt;/code&gt;: &lt;strong&gt;Bitwise AND&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Returns a 1 in each bit position for which the corresponding bits of both operands are 1s.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ö†Ô∏è Be careful: Don't be confused between &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator! The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; is the logical operator AND&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = 5        // 00000000000000000000000000000101
const b = 3        // 00000000000000000000000000000011

console.log(a &amp;amp; b) // 00000000000000000000000000000001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;üí° Tips: If you need to check if a number is even, you can use &lt;code&gt;numberVar &amp;amp; 1&lt;/code&gt;, if the result is equal to &lt;code&gt;0&lt;/code&gt;, your number is even!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-amp-endraw-bitwise-and-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;=&lt;/code&gt;: &lt;strong&gt;Bitwise AND assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 5      // 00000000000000000000000000000101
a &amp;amp;= 3         // 00000000000000000000000000000011

console.log(a) // 00000000000000000000000000000001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-not"&gt;
  &lt;/a&gt;
  &lt;code&gt;~&lt;/code&gt;: &lt;strong&gt;Bitwise NOT&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It inverts the bits of its operand. Like other bitwise operators, it converts the operand to a 32-bit signed integer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = 5     // 00000000000000000000000000000101
const b = -3    // 11111111111111111111111111111101

console.log(~a) // 11111111111111111111111111111010
// expected output: -6

console.log(~b) // 00000000000000000000000000000010
// expected output: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-or"&gt;
  &lt;/a&gt;
  &lt;code&gt;|&lt;/code&gt;: &lt;strong&gt;Bitwise OR&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It returns a 1 in each bit position for which the corresponding bits of either or both operands are 1s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = 5        // 00000000000000000000000000000101
const b = 3        // 00000000000000000000000000000011

console.log(a | b) // 00000000000000000000000000000111
// expected output: 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-or-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;|=&lt;/code&gt;: &lt;strong&gt;Bitwise OR assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 5      // 00000000000000000000000000000101
a |= 3         // 00000000000000000000000000000011

console.log(a) // 00000000000000000000000000000111
// expected output: 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-xor"&gt;
  &lt;/a&gt;
  &lt;code&gt;^&lt;/code&gt;: &lt;strong&gt;Bitwise XOR&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = 5        // 00000000000000000000000000000101
const b = 3        // 00000000000000000000000000000011

console.log(a ^ b) // 00000000000000000000000000000110
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-xor-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;^=&lt;/code&gt;: &lt;strong&gt;Bitwise XOR assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;It uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 5      // 00000000000000000000000000000101
a ^= 3         // 00000000000000000000000000000011

console.log(a) // 00000000000000000000000000000110
// expected output: 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltlt-endraw-left-shift"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;: &lt;strong&gt;Left shift&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;// 00000000000000000000000000000101&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;         &lt;span class="c1"&gt;// 00000000000000000000000000000010&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 00000000000000000000000000010100&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltlt-endraw-left-shift-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;: &lt;strong&gt;Left shift assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Moves the specified amount of bits to the left and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// 00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="c1"&gt;// 00000000000000000000000000010100&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gtgt-endraw-right-shift"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;: &lt;strong&gt;Right shift&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left.&lt;/p&gt;

&lt;p&gt;Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name "sign-propagating".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;          &lt;span class="c1"&gt;//  00000000000000000000000000000101&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;          &lt;span class="c1"&gt;//  00000000000000000000000000000010&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;// -00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;//  00000000000000000000000000000001&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// -00000000000000000000000000000010&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: -2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gtgt-endraw-right-shift-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;: &lt;strong&gt;Right shift assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Moves the specified amount of bits to the right and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;      &lt;span class="c1"&gt;//  00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;        &lt;span class="c1"&gt;//  00000000000000000000000000000001&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="c1"&gt;// -00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;        &lt;span class="c1"&gt;// -00000000000000000000000000000010&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: -2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gtgtgt-endraw-unsigned-right-shift"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;: &lt;strong&gt;Unsigned Right shift&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded.&lt;/p&gt;

&lt;p&gt;Zero bits are shifted in from the left.&lt;/p&gt;

&lt;p&gt;The sign bit becomes 0, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;          &lt;span class="c1"&gt;//  00000000000000000000000000000101&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;          &lt;span class="c1"&gt;//  00000000000000000000000000000010&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;// -00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  00000000000000000000000000000001&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  00111111111111111111111111111110&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1073741822&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gtgtgt-endraw-unsigned-right-shift-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt;: &lt;strong&gt;Unsigned Right shift assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ&lt;/p&gt;

&lt;p&gt;Moves the specified amount of bits to the right and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;//  00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;//  00000000000000000000000000000001&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// -00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="c1"&gt;//  00111111111111111111111111111110&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1073741822&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>React SketchBoard DevLog #1 - Drawing with mouse, color and width selection and panning.</title>
      <author>NordicBeaver</author>
      <pubDate>Thu, 18 Nov 2021 18:01:11 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/react-sketchboard-devlog-1-drawing-with-mouse-color-and-width-selection-and-panning-5h3o</link>
      <guid>https://dev.to/nordicbeaver/react-sketchboard-devlog-1-drawing-with-mouse-color-and-width-selection-and-panning-5h3o</guid>
      <description>&lt;p&gt;Recently I started developing a react library for drawing in a browser. It turned out that it's not as trivial as it seemed and there is a lot of cool stuff and interesting problems there. So I decided to do a DevLog and share those thing with you.&lt;/p&gt;

&lt;p&gt;I hope you'll enjoy!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aoPAq-hC0J8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
