<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>An artist does not always produce art, though expected, one must explore the unknown to find the profound.</title>
      <author>Alias</author>
      <pubDate>Thu, 27 May 2021 01:24:44 +0000</pubDate>
      <link>https://dev.to/aliasalan/an-artist-does-not-always-produce-art-though-expected-one-must-explore-the-unknown-to-find-the-profound-4bkb</link>
      <guid>https://dev.to/aliasalan/an-artist-does-not-always-produce-art-though-expected-one-must-explore-the-unknown-to-find-the-profound-4bkb</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A follow-up segment of my initial post.
[open for discussion and private reviews are welcomed.]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;`&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-psychoanalytic-and-the-unconscious-bravery-to-venture-into-the-depths-of-technological-advancements"&gt;
  &lt;/a&gt;
  The psychoanalytic and the unconscious bravery to venture into the depths of technological advancements
&lt;/h3&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-oppression-of-different-licensing-types-openended-questions"&gt;
  &lt;/a&gt;
  The oppression of different licensing types, open-ended questions.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Are there any bodies of work that show a statistical correlation between the differing licensing types(perpetual licensing, subscription licensing, floating licensing, whitelist licensing, academic licensing, off-line duration licensing, trial, feature, or fixed duration licensing) and to what degree does that hinder the forward momentum of a project?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What would be most universally fundamental for an open source project with a large contributory body to thrive successfully given the assumption of proper management and not dispensed with, at least, not in a contemptuous way or even a dismissive manner but with the collective goal to create something of unquestionable purpose and meaning?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#lets-address-the-wolf-at-the-door-save-the-tyrant-for-another-war"&gt;
  &lt;/a&gt;
  Let's address the wolf at the door, save the tyrant for another war.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The narcissism within that has yet been controlled (a paradoxical ideology, we are all dangerous individuals, but that which is not evident is that the dangerous individuals who can control their potentiality towards being dangerous is likely the most dangerous individual on your team while equally the less threatening of all of them at the same time).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I suspect it's the dangerous opposition towards the uncontrolled dangerous individual that will drive the unification of society forward.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Narcissism provides many benefits but comes at a very dangerous price; friends, families, jobs, opportunities, purpose, meaning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Narcissism doesn't have to be a defining trait, it will not be an easy journey to unlearn the behavioral traits that pours out of your spores like you just ran a marathon. No, there will be no un-conditional positive regard because anytime you try to change a bad habit there will ALWAYS be apart of yourself working in counter-purpose to that regard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Realize and accept the narcissistic traits but let those stand on the side of you, not in opposition of you, not as a barrier of defining character, but simply as another dimension of who you are. Take notice of the contempt and judgement these traits bring to you on a daily basis and find the line between chaos and order to make things better, arguably, you're going to face the fact that you can't simply ignore the traits and stand on the other side, hoping ignorance or strategic disregard will take over and dispense with the proverbial wolf at the door.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#finding-unity-within-the-sociocultural-environments-of-socialmedia-and-chatroom-platformsforums"&gt;
  &lt;/a&gt;
  Finding unity within the socio-cultural environments of social-media and chatroom platforms/forums.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is actually a fairly routine question I'm asked and overwhelming I am asked this by people who had certain traits that they wished to change or create a manifestation akin to Carl Jung's "retrogression restoration of the persona" to where they deviate off of their current path and into the depths of the proverbial darkness within ourselves to address either a subconscious or conscious issue that's not allowing their inner flame to illuminate as brightly as it could or for that matter, at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The issue I take with that type of phenomena and is addressed fairly universally with a lot of psychologist, once you confront this darkness, this deterrent that was keeping you from forging any type of unification with your peers and those around you has now created a new version of your identity. Whether it be good or bad, it's very possible that this new found persona is wildly misunderstood.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's very important to realize and accept that at some point in your life, you will be misunderstood for one reason or another, and by everybody. They will question your &lt;em&gt;WHY&lt;/em&gt; because they themselves can't make sense of your actions. They may ask you questions with the assumption that there is something wrong with you and no matter how well you articulate your thoughts, some may never come to understand. They'll witness your drive, this new persona that's taken form, and view it as some new found obsession(and likely so, but for most obsessions, they can be detrimentally healthy to your success in the world as a person, spouse, friend, peer, community member, etc.) and they will take up their own opinions, depending on how far your descent and how much you gain from delving into the depths of chaos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Very often, these people will view this new-found energy, drive, or simply a new manifestation for a worthwhile pursuit on life and view it as a uneducated diagnosis of psychosis. We've all been around the type, if we haven't been there ourselves, the type that for a plethora of personal reasons always does just a little bit more than everyone else, not because it's easier for them but because they're driven to strive for something we don't understand. That's when appreciation comes into play, you will start to appreciate the fact that people are beginning to understand that it's not that there is something wrong with you, rather simply, that you possess a drive so full of purpose and meaning that they themselves have yet to find that line between chaos and order.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>healthydebate</category>
      <category>watercooler</category>
      <category>publicinbox</category>
      <category>puppet</category>
    </item>
    <item>
      <title>Public Inbox</title>
      <author>Alias</author>
      <pubDate>Thu, 27 May 2021 01:15:54 +0000</pubDate>
      <link>https://dev.to/aliasalan/public-inbox-29ej</link>
      <guid>https://dev.to/aliasalan/public-inbox-29ej</guid>
      <description>&lt;p&gt;If possible, let's keep the bulk of this in reference to my Main posts and pursuit of analytical psychology within the domain of the programming and developmental community.&lt;/p&gt;

&lt;p&gt;Obviously, if I am stuck and asking for help on a project publicly, by all means, the door is open with purpose.&lt;/p&gt;

</description>
      <category>publicinbox</category>
    </item>
    <item>
      <title>Next.js + TypeScript + Tailwind CSS project setup </title>
      <author>Waldo</author>
      <pubDate>Thu, 27 May 2021 01:09:54 +0000</pubDate>
      <link>https://dev.to/waldo/next-js-typescript-tailwind-css-project-setup-4kcj</link>
      <guid>https://dev.to/waldo/next-js-typescript-tailwind-css-project-setup-4kcj</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Set up the Next.js project&lt;/strong&gt;&lt;br&gt;
First, create-next-appuse the command to create a codebase from the Next.js template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app nextjs-ts-tailwind-example --use-npm --example "https://github.com/vercel/next-learn-starter/tree/master/basics-final"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the command is completed, the code of Next.js is generated, so move the directory and check the operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd nextjs-ts-tailwind-example
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Set up typescript&lt;/strong&gt;&lt;br&gt;
create config files for typescript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch tsconfig.json next-env.d.ts

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the packages needed to run TypeScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev typescript @types/react @types/node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;add to the Typescript config file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//tsconfig.json 
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;add to the next-env.d.ts config file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/// &amp;lt;reference types="next" /&amp;gt;
/// &amp;lt;reference types="next/types/global" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, rewrite various js files to ts files by referring to the following repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mv components/date.js components/date.tsx
mv components/layout.js components/layout.tsx
mv lib/posts.js lib/posts.ts
mv pages/_app.js pages/_app.tsx
mv pages/index.js pages/index.tsx
mv 'pages/posts/[id].js' 'pages/posts/[id].tsx'
mv pages/api/hello.js pages/api/hello.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After rewriting, check the operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the operation with a browser and it is OK if it works without error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Set up Tailwind css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;generate a Tailwind CSS configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tailwindcss init -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, tailwind.config.js the postcss.config.js two files will be generated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//tailwind.config.js
module.exports = {
  purge: [], //remove this line 
  purge: ['./components/**/*.tsx', './pages/**/*.tsx','./public/**/*.html'], //add this line
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rewrite to read the CSS generated by Tailwind CSS styles/global.css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//styles/global.css
@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can use Tailwind CSS!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Are Developers Not That Keen On Kubernetes?
</title>
      <author>hrosendahl-git</author>
      <pubDate>Wed, 26 May 2021 23:11:34 +0000</pubDate>
      <link>https://dev.to/shipa/are-developers-not-that-keen-on-kubernetes-3c0o</link>
      <guid>https://dev.to/shipa/are-developers-not-that-keen-on-kubernetes-3c0o</guid>
      <description>&lt;p&gt;Should application developers learn Kubernetes? Let’s ask an even deeper question; should application developers even be aware of Kubernetes in their infrastructure?&lt;/p&gt;

&lt;p&gt;I frequently hear this question being asked by DevOps, Platform Engineering, and Development teams. Of course, this is a discussion that brings very different views from different people and can result in a very long debate.&lt;/p&gt;

&lt;p&gt;Kubernetes, without a doubt, provides far more functionality than the average developer needs. While Kubernetes is robust and provides dozens of types of objects (around 50 the last time I checked), developers don’t care how many replicas of their service are running, what roles it has, or if it’s running via StatefulSets; all they care about is getting an HTTPS endpoint that they can use to deliver their product to their users.&lt;/p&gt;

&lt;p&gt;This may appear unnecessary when only a handful of developers with only a few applications or services are deployed; however, the story quickly changes as an organization’s number of clusters, applications, and services in Kubernetes begin to scale. The development team is generally to first to feel frustrated by the growing complexity, greatly increasing the chance of inexperienced AND experienced developers to become distracted, less productive, and more prone to mistakes. Developers need to deal with infrastructure more these days, so the focus should be on simplifying and not complicating.&lt;/p&gt;

&lt;p&gt;Considering this, we decided to build Shipa to do precisely that; grow Kubernetes into a user-friendly application management framework. Shipa’s goal is to allow developers to focus on their application code while empowering DevOps and Platform engineers to better manage and control their clusters and infrastructure.&lt;/p&gt;

&lt;p&gt;Shipa makes deployment, management, and controls of applications easy. Shipa does not treat Kubernetes as a first-class citizen; Shipa reserves that title for the applications and the teams that develop and control them. Doing so allows the developer not to worry about ConfigMaps, ingress rules, PVs, PVCs, etc. in his/her day-to-day. Even if DevOps and Platform engineering teams decide tomorrow to move from one Kubernetes cluster to another or across different providers, the way applications are deployed, operated, and controlled will not be impacted.&lt;/p&gt;

&lt;p&gt;Software is getting complicated, and business requirements are evolving rapidly. The easier we make it for developers to deploy their applications and for DevOps and Platform Engineering teams to build controls and guardrails around it, the more value they will deliver, faster, and more secure.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>developers</category>
    </item>
    <item>
      <title>Scheduling API for Small Businesses</title>
      <author>Spurwing</author>
      <pubDate>Wed, 26 May 2021 22:36:57 +0000</pubDate>
      <link>https://dev.to/spurwing/scheduling-api-for-small-businesses-3bd1</link>
      <guid>https://dev.to/spurwing/scheduling-api-for-small-businesses-3bd1</guid>
      <description>&lt;p&gt;APIs or Application Programming Interfaces have become part of business vocabulary across all spectrums of &lt;strong&gt;e-commerce&lt;/strong&gt;. At the most basic level, an API acts as a door into a software program, allowing it to interact with other programs without the need for the developer to share its entire code. Small businesses have much to gain from understanding and implementing APIs in their e-commerce sites.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Spurwing API is a secure and feature-rich, accessible platform for &lt;strong&gt;building integrations&lt;/strong&gt; using their open-source widgets or even creating your own from scratch. Spurwing offers robust functionality via their SDKs (Software Development Kits), leaving you free of worrying about &lt;strong&gt;time zones&lt;/strong&gt;, &lt;strong&gt;data storage&lt;/strong&gt;, server &lt;strong&gt;traffic scaling&lt;/strong&gt; and &lt;strong&gt;reminders&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Spurwing’s API makes scheduling a hassle-free and streamlined process for small businesses to add robust scheduling and booking to their application. Spurwing Powers millions of appointment bookings for thousands of satisfied companies, and their services range from &lt;strong&gt;marketplaces&lt;/strong&gt; to &lt;strong&gt;SaaS&lt;/strong&gt; and &lt;strong&gt;healthcare&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_vbUU4BK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dt50162o4nuyucrdsfa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_vbUU4BK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dt50162o4nuyucrdsfa.png" alt="scheduling API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-spurwing-scheduled-api-to-small-businesses"&gt;
  &lt;/a&gt;
  Benefits of Spurwing Scheduled API to Small Businesses
&lt;/h2&gt;

&lt;p&gt;There are countless benefits to &lt;strong&gt;calendar management&lt;/strong&gt; and &lt;strong&gt;appointment scheduling&lt;/strong&gt; that can be folded into different software setups and applications to aid small business owners. No matter what scale of business you run, you depend on appointment scheduling software. Spurwing enables business owners to streamline better and &lt;strong&gt;customize the client experience&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scheduling-solutions-tailored-to-your-business"&gt;
  &lt;/a&gt;
  Scheduling Solutions Tailored to your Business
&lt;/h2&gt;

&lt;p&gt;Many e-commerce sites do not harness the benefits of scheduling software with specificity in their application. Customization enhances your client experience, and Spurwing’s tailormade scheduling solutions make it more convenient for clients, cuts down on wasted time and resources, and reduces divergence from your daily schedule.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the case of a hair salon, Spurwing allows customers to book their appointments according to their particular treatments. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the doctor’s office, customization offers the patient bookings based on their specific appointment type, such as “bloodwork appointment” or a “new patient appointment.”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9fYBjw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmwfgx21qcn3h8ct2b9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9fYBjw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmwfgx21qcn3h8ct2b9h.png" alt="scheduling for stores"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-scheduling-tool-gives-your-company-an-edge-over-competitors"&gt;
  &lt;/a&gt;
  A Scheduling Tool Gives Your Company An Edge Over Competitors
&lt;/h2&gt;

&lt;p&gt;Spurwing’s customizable appointment scheduling platform can give your small business a competitive edge over companies using ‘out the box’ scheduling platforms. Offering your clients a more streamlined and responsive scheduling system enhances the user experience and increases your small business revenue. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enhanced-integration-with-your-current-system"&gt;
  &lt;/a&gt;
  Enhanced Integration With Your Current System
&lt;/h2&gt;

&lt;p&gt;Spurwing offers appointment scheduling solutions to all levels of IT infrastructure or unique intranet web. Spurwing provides a fully &lt;strong&gt;customizable&lt;/strong&gt; platform that is unique to your business to seamlessly integrate with your IT setup and tailored to your specific online appointment scheduling. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f-RlGPTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/govj4ornjqb1bzcatndt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f-RlGPTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/govj4ornjqb1bzcatndt.png" alt="scheduling for healthcare services"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-development"&gt;
  &lt;/a&gt;
  Custom Development
&lt;/h2&gt;

&lt;p&gt;Spurwing eliminates the need for outsourced solutions and having to custom code your existing platform. These solutions are usually costly and do not offer ongoing developer support for the custom development of your current platform. &lt;/p&gt;

&lt;p&gt;Spurwing offers the option to build on or extend your existing features for a more functional product and customer experience. With Appointment Scheduling API, Spurwing provides enhanced time management solutions and exceptional developer and product support. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-features"&gt;
  &lt;/a&gt;
  Other Features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#secure-and-compliant"&gt;
  &lt;/a&gt;
  Secure and Compliant
&lt;/h3&gt;

&lt;p&gt;All your data is encrypted and stored at &lt;strong&gt;SOC-2 certified&lt;/strong&gt; facilities, and Spurwing is &lt;strong&gt;HIPAA compliant&lt;/strong&gt; and fully audit logged. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fully-branded"&gt;
  &lt;/a&gt;
  Fully Branded
&lt;/h3&gt;

&lt;p&gt;You may fully white-label your interactions through Spurwing, even pre-built widgets, and email templates to place your brand in the spotlight without Spurwing’s mention. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-notifications"&gt;
  &lt;/a&gt;
  Automated Notifications
&lt;/h3&gt;

&lt;p&gt;Spurwing makes use of email and SMS to automatically send booking confirmations and reminders on behalf of your business.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enhanced-synchronization"&gt;
  &lt;/a&gt;
  Enhanced Synchronization
&lt;/h3&gt;

&lt;p&gt;Spurwing’s API offers &lt;strong&gt;two-way sync&lt;/strong&gt; with Google Calendar, iCal, and Outlook as well as one-click calendar links for each appointment. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Spurwing offers Appointment Scheduling API for small businesses to enable their software teams to deliver enhanced scheduling features and improve efficiency and reduce costs. Small businesses stand to grow and stand out from their competitors with Spurwing’s free access to their open-source marketplace with a host of widgets, chatbots, and top-tier integrations. &lt;/p&gt;

&lt;p&gt;For more information visit the links below or schedule an intro call with our engineers at &lt;a href="https://www.spurwing.io/learn-more/"&gt;https://www.spurwing.io/learn-more/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more &lt;a href="https://github.com/Spurwing/Appointment-Scheduling-API"&gt;https://github.com/Spurwing/Appointment-Scheduling-API&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>devops</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Updates from 83rd meeting of TC39
</title>
      <author>hemanth.hm</author>
      <pubDate>Wed, 26 May 2021 22:07:23 +0000</pubDate>
      <link>https://dev.to/hemanth/updates-from-83rd-meeting-of-tc39-1d67</link>
      <guid>https://dev.to/hemanth/updates-from-83rd-meeting-of-tc39-1d67</guid>
      <description>&lt;p&gt;There were several items in the agenda, this post mainly focuses on feature proposals and their progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stage 4:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-regexp-match-indices"&gt;RegExp Match Indices&lt;/a&gt; provide additional information about the start and end indices of captured substrings relative to the start of the input string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-top-level-await"&gt;Top level await&lt;/a&gt; enables modules to act as big async functions: With TLA, ECMAScript Modules (ESM) can await resources, causing other modules who import them to wait before they start evaluating their body.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Stage 3:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-accessible-object-hasownproperty"&gt;Accessible Object.prototype.hasOwnProperty()&lt;/a&gt;: Proposal for an &lt;code&gt;Object.hasOwn()&lt;/code&gt; method to make &lt;code&gt;Object.prototype.hasOwnProperty()&lt;/code&gt; more accessible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/tc39/intl-displaynames-v2"&gt;Intl.DisplayNames V2&lt;/a&gt;: In &lt;code&gt;Intl.DisplayNames&lt;/code&gt; API, we already cover language, region, script, and currency. This proposal enhance the Intl.DisplayNames API and cover more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-intl-extend-timezonename"&gt;Extend TimeZoneName Option&lt;/a&gt;: Extend the timeZoneName option in Intl.DateTimeFormat object to support more formatted options.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/tc39/proposal-resizablearraybuffer"&gt;Resizable and Growable ArrayBuffers&lt;/a&gt; Growing a new buffer right now requires allocating a new buffer and copying. Not only is this inefficient, it needlessly fragments the address space on 32-bit systems, this proposal makes it easier to have a resizable and growable &lt;code&gt;ArrayBuffer&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Stage 2:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/tc39/proposal-regexp-set-notation"&gt;Set notation in regular expressions&lt;/a&gt; UTS18 set notation in regular expressions&lt;/li&gt;
&lt;/ul&gt;






&lt;center&gt;&lt;a href="https://twitter.com/GNUmanth"&gt;@gnumanth&lt;/a&gt;&lt;/center&gt;

</description>
      <category>tc39</category>
      <category>javascript</category>
    </item>
    <item>
      <title>I created this CSS Gradient Editor in Vue, what do you think?</title>
      <author>lennardv2</author>
      <pubDate>Wed, 26 May 2021 22:06:53 +0000</pubDate>
      <link>https://dev.to/lennardv2/i-created-this-css-gradient-creator-what-do-you-think-3ik2</link>
      <guid>https://dev.to/lennardv2/i-created-this-css-gradient-creator-what-do-you-think-3ik2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X0Q32ujc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvb3azlo9n697lbjtsts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0Q32ujc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvb3azlo9n697lbjtsts.png" alt="Color Gradient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I created this CSS Gradient Editor, you can check it out here &lt;a href="https://colorgradient.dev/"&gt;Color Gradient&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;

</description>
      <category>css</category>
      <category>tooling</category>
      <category>webdev</category>
      <category>vue</category>
    </item>
    <item>
      <title>Loosely coupled code: Babylon vs Three.js</title>
      <author>Joe Pea</author>
      <pubDate>Wed, 26 May 2021 21:31:35 +0000</pubDate>
      <link>https://dev.to/trusktr/babylon-s-codebase-is-highly-coupled-compared-to-three-js-4l4m</link>
      <guid>https://dev.to/trusktr/babylon-s-codebase-is-highly-coupled-compared-to-three-js-4l4m</guid>
      <description>&lt;p&gt;Hello! :)&lt;/p&gt;

&lt;p&gt;A while back, I started a port of &lt;a href="http://threejs.org"&gt;Three.js&lt;/a&gt; from JavaScript to &lt;a href="https://www.assemblyscript.org/"&gt;AssemblyScript&lt;/a&gt; (an awesome &lt;a href="http://typescriptlang.org"&gt;TypeScript&lt;/a&gt; to &lt;a href="https://webassembly.org/"&gt;WebAssembly&lt;/a&gt; compiler):&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lume"&gt;
        lume
      &lt;/a&gt; / &lt;a href="https://github.com/lume/glas"&gt;
        glas
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      WebGL in WebAssembly with AssemblyScript
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://raw.githubusercontent.com/lume/glas/master///lume.io" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gCUm_5UF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/lume/glas/master/./assets/logo.svg" width="200" alt="LUME" title="LUME"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;h1&gt;
GLAS&lt;/h1&gt;
&lt;p&gt;Web&lt;strong&gt;GL&lt;/strong&gt; in WebAssembly with &lt;strong&gt;A&lt;/strong&gt;ssembly&lt;strong&gt;S&lt;/strong&gt;cript.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a work-in-progress port of &lt;a href="https://threejs.org" rel="nofollow"&gt;&lt;strong&gt;Three.js&lt;/strong&gt;&lt;/a&gt;, a JavaScript 3D WebGL library, into &lt;a href="https://assemblyscript.org" rel="nofollow"&gt;&lt;strong&gt;AssemblyScript&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Motivation&lt;/h2&gt;
&lt;p&gt;It'd be sweet to have a high-performing WebGL engine that runs in the web via
WebAssembly and is written in a language that web developers are already
familiar with
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/About_JavaScript" rel="nofollow"&gt;JavaScript&lt;/a&gt;
in the form of &lt;a href="http://www.typescriptlang.org/" rel="nofollow"&gt;TypeScript&lt;/a&gt; (a
superset of JavaScript with types).&lt;/p&gt;
&lt;p&gt;Enter &lt;a href="https://assemblyscript.org" rel="nofollow"&gt;AssemblyScript&lt;/a&gt;, a
toolchain that allows us to write a strictly-typed subset of
&lt;a href="http://www.typescriptlang.org/" rel="nofollow"&gt;TypeScript&lt;/a&gt; code and compile it to
&lt;a href="https://developer.mozilla.org/en-US/docs/WebAssembly" rel="nofollow"&gt;WebAssembly&lt;/a&gt; (an
&lt;a href="https://en.wikipedia.org/wiki/Assembly_language" rel="nofollow"&gt;assembly&lt;/a&gt;-like language
representing machine code) for speed.&lt;/p&gt;
&lt;h2&gt;
Status&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/lume/glas/workflows/Node%20CI/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YvidYxCy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/lume/glas/workflows/Node%2520CI/badge.svg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;
⚠️ ALPHA STATE&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;p&gt;The project is currently in its very early alpha stages. We have an amazing
group of programmers building the initial
&lt;a href="https://github.com/lume/ASWebGLue"&gt;&lt;strong&gt;ASWebGLue&lt;/strong&gt;&lt;/a&gt; library. This library allows
AssemblyScript programs to call the browser's underlying WebGL interface. This
is required before we are able render anything to the screen. A…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/lume/glas"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I was originally interested in porting &lt;a href="http://babylonjs.com"&gt;Babylon&lt;/a&gt; because it is already written in TypeScript, so porting would be easier compared to taking a JavaScript codebase and adding types to it after refactoring the dynamic parts that TypeScript can't handle.&lt;/p&gt;

&lt;p&gt;However, when I started to port Babylon classes, I soon realized that the classes in the library are highly coupled: importing Babylon’s &lt;code&gt;Scene&lt;/code&gt; class means practically importing the whole Babylon library and instantiating many parts of the library (&lt;code&gt;new This&lt;/code&gt;, &lt;code&gt;new That&lt;/code&gt;, etc) even if those parts will never be used by your application.&lt;/p&gt;

&lt;p&gt;Essentially, with Babylon you want the banana (f.e. &lt;code&gt;Scene&lt;/code&gt;) and you get the Gorilla and the whole jungle (rest of the Babylon lib).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Coupling_(computer_programming)"&gt;High coupling is something to be avoided when possible.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To get an understanding of this problem with respect to Babylon's codebase, take look at the import statements in Babylon’s &lt;a href="https://github.com/BabylonJS/Babylon.js/blob/master/src/scene.ts"&gt;&lt;code&gt;scene.ts&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Nullable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Tools&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Misc/tools&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IAnimatable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Animations/animatable.interface&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrecisionDate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Misc/precisionDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Observer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Misc/observable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SmartArrayNoDuplicate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SmartArray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ISmartArrayLike&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Misc/smartArray&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StringDictionary&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Misc/stringDictionary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Tags&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Misc/tags&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Matrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TmpVectors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Vector4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Maths/math.vector&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Geometry&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Meshes/geometry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TransformNode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Meshes/transformNode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SubMesh&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Meshes/subMesh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AbstractMesh&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Meshes/abstractMesh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Mesh&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Meshes/mesh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IParticleSystem&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Particles/IParticleSystem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Bone&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Bones/bone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Skeleton&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Bones/skeleton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MorphTargetManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Morph/morphTargetManager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Camera&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Cameras/camera&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AbstractScene&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./abstractScene&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BaseTexture&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Materials/Textures/baseTexture&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Texture&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Materials/Textures/texture&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RenderTargetTexture&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Materials/Textures/renderTargetTexture&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ImageProcessingConfiguration&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Materials/imageProcessingConfiguration&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Effect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Materials/effect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UniformBuffer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Materials/uniformBuffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MultiMaterial&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Materials/multiMaterial&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Light&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Lights/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PickingInfo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Collisions/pickingInfo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ICollisionCoordinator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Collisions/collisionCoordinator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PointerEventTypes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PointerInfoPre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PointerInfo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Events/pointerEvents&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;KeyboardInfoPre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;KeyboardInfo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Events/keyboardEvents&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ActionEvent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Actions/actionEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PostProcessManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./PostProcesses/postProcessManager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IOfflineProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Offline/IOfflineProvider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RenderingGroupInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RenderingManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IRenderingManagerAutoClearSetup&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Rendering/renderingManager&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ISceneComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ISceneSerializableComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Stage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RenderTargetsStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RenderTargetStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MeshStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;EvaluateSubMeshStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PreActiveMeshStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CameraStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RenderingGroupStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RenderingMeshStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PointerMoveStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PointerUpDownStageAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CameraStageFrameBufferAction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./sceneComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Engine&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Engines/engine&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Node&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MorphTarget&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Morph/morphTarget&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Constants&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Engines/constants&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DomManagement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Misc/domManagement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Misc/logger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EngineStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Engines/engineStore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AbstractActionManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Actions/abstractActionManager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;_DevTools&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Misc/devTools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;WebRequest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Misc/webRequest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;InputManager&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Inputs/scene.inputManager&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PerfCounter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Misc/perfCounter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IFileRequest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Misc/fileRequest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Color4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Color3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Maths/math.color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Plane&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Maths/math.plane&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Frustum&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Maths/math.frustum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UniqueIdGenerator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Misc/uniqueIdGenerator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FileTools&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LoadFileError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RequestFileError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ReadFileError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Misc/fileTools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IClipPlanesHolder&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Misc/interfaces/iClipPlanesHolder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IPointerEvent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Events/deviceInputEvents&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;WebVRFreeCamera&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Cameras/VR/webVRCamera&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a fairly long list for what a "Scene" represents, and I can see the whole list on my computer screen without scrolling.&lt;/p&gt;

&lt;p&gt;In contrast, the Three.js codebase is much more loosely coupled, which to me is very attractive from a code authoring perspective, so I ended up choosing Three.js and accepting that I would perform more porting from JavaScript instead of from TypeScript, because I felt the end result would be cleaner.&lt;/p&gt;

&lt;p&gt;As an example of Three’s lose coupling, here are the first few lines of Three’s &lt;a href="https://github.com/mrdoob/three.js/blob/dev/src/scenes/Scene.js"&gt;&lt;code&gt;Scene.js&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Object3D&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../core/Object3D.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Scene&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Object3D&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Scene&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explore Three's code base, and you’ll see that classes try to be minimal and do only one thing well (or representing only one concept well).&lt;/p&gt;

&lt;p&gt;After starting the port using Babylon, going back to Three.js felt pleasant due to the loose coupling. The Three.js codebase is clean.&lt;/p&gt;

&lt;p&gt;If I had to choose to develop with, or extend from, one codebase or the other, I would choose Three.js because the loosely-coupled organization within the library makes code maintenance and extension easier, while allowing certain parts of the Three library to be used without pulling unneeded dependencies into an application.&lt;/p&gt;




&lt;p&gt;I wanted to ask the Babylon community if anyone else there feels that Babylon's parts are too tightly coupled compared to, for example, Three.js, but my post was immediately hidden as "spam":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://forum.babylonjs.com/t/high-coupling-in-the-bablyon-codebase-compared-to-three-js/21156/3"&gt;https://forum.babylonjs.com/t/high-coupling-in-the-bablyon-codebase-compared-to-three-js/21156/3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(You might not be able to see it if they permanently delete it).&lt;/p&gt;

&lt;p&gt;In that thread, I asked&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Has anyone else (especially on Bablyon’s team) thought about this difference between Babylon and Three.js? What are your thoughts on this? Are there any plans or desires to decouple the Babylon code base?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was hoping to open a discussion on the topic, hoping it might light a fire for Babylon improvement, for everyone's benefit (having alternatives is always great).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webgl</category>
      <category>threejs</category>
      <category>babylonjs</category>
    </item>
    <item>
      <title>Join our Electron Developer Office Hour</title>
      <author>CoScreen</author>
      <pubDate>Wed, 26 May 2021 21:28:01 +0000</pubDate>
      <link>https://dev.to/coscreen/join-our-electron-developer-office-hour-94</link>
      <guid>https://dev.to/coscreen/join-our-electron-developer-office-hour-94</guid>
      <description>&lt;p&gt;We are excited to share our new community initiative - Developer Office Hours by the engineering team at CoScreen on technologies that we are excited about.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.electronjs.org/"&gt;Electron&lt;/a&gt; is a hugely popular open source framework that enables the development of cross-platform desktop apps using web technologies. &lt;/p&gt;

&lt;p&gt;If you have ever used Visual Studio Code, Slack, Discord, or an endless list of other great apps on macOS or Windows, you’ve used Electron.&lt;/p&gt;

&lt;p&gt;These office hours are an opportunity for you to ask questions you need answered or share challenges you need help navigating on a given topic.&lt;/p&gt;

&lt;p&gt;We believe in creating a meaningful space for developers of all levels to learn, collaborate and catch up on the latest technologies and frameworks. We’ve created a dedicated block of time to make sure someone from our team can help answer questions and facilitate the conversations for our growing community.&lt;/p&gt;

&lt;p&gt;The up and coming Developer Office Hour will be hosted by Brad Carter, Software Engineer at &lt;a href="https://www.coscreen.co/"&gt;CoScreen&lt;/a&gt; and an Electron enthusiast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s the rough agenda:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quick intro on Electron and how we use it at CoScreen to build our cross-platform collaboration app&lt;/li&gt;
&lt;li&gt;Helping you to decide when it is the right technology for you and when it isn’t&lt;/li&gt;
&lt;li&gt;And, of course, do our best to answer all of your questions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The event will be hosted on CoScreen on &lt;strong&gt;June 3rd 2021 at 11 am PST / 2 pm EST.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sign up and submit your questions &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScrzguFPIWNWF34vXRpgfQsWeN5Qy3SWvcWIPBLVzgK3LI1jA/viewform?usp=sf_link"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to include your name and any useful information so we can help you best.&lt;/p&gt;

&lt;p&gt;We are looking forward to chatting with all of you and learning together. &lt;/p&gt;

&lt;p&gt;*not all questions will be answered, but we will do our best to :)&lt;/p&gt;

&lt;p&gt;The CoScreen Team&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>programming</category>
      <category>opensource</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>How to crack coding interviews</title>
      <author>Vikram Aditya</author>
      <pubDate>Wed, 26 May 2021 20:54:33 +0000</pubDate>
      <link>https://dev.to/square/how-to-crack-coding-interviews-1066</link>
      <guid>https://dev.to/square/how-to-crack-coding-interviews-1066</guid>
      <description>&lt;p&gt;First things first, it is very important to spend some time (at least a weekend) on research — finding the right kind of resources to study for your interviews, and coming up with a plan for the next few weeks. This plan might also include the list of companies you wish to apply for, and in what order (yes, order matters!).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-interview-process"&gt;
  &lt;/a&gt;
  The Interview process
&lt;/h4&gt;

&lt;p&gt;The interview process at most software companies broadly comprises the following steps:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#resume-screening-phone-interview-virtual-onsite-interviews-hiring-decision-offer-delivery"&gt;
  &lt;/a&gt;
  Resume screening — Phone interview — (Virtual) Onsite interviews — Hiring Decision— Offer delivery
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#join-thevikcode-newletter-get-daily-which-will-not-be-avaible-here-httpsthevikcodesubstackcom"&gt;
  &lt;/a&gt;
  JOIN THEVIKCODE NEWLETTER ( GET DAILY WHICH WILL NOT BE AVAIBLE HERE ) - &lt;a href="https://thevikcode.substack.com/"&gt;https://thevikcode.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;h4&gt;
  &lt;a href="#before-the-interviews"&gt;
  &lt;/a&gt;
  Before the interviews
&lt;/h4&gt;

&lt;p&gt;The key to preparation for coding interviews is coding practice, a lot of it. But before jumping into that, it is always good to brush up theory concepts which are specifically important for interviews, and have a look at topic wise solved/unsolved problems. This approach is quite similar to how we used to prepare for our school/college examinations. I found the following two books very useful for my preparation. The good thing about these books is that they also discuss problem solving patterns.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#coding-practice"&gt;
  &lt;/a&gt;
  Coding practice
&lt;/h4&gt;

&lt;p&gt;There are several websites that offer practice problems for interview preparation. I prefer LeetCode as it has an amazing public collection of Top Interview Questions for all three difficulty levels- Easy, Medium, Hard. My suggestion is to start your coding practice with this curated list (start with Easy or Medium depending on your past coding practice/current comfort level), and then move to other relevant problems depending on your weak topics. Most importantly, practice writing code (with minimum possible errors) on paper or plain text editors/Google docs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#some-free-advice"&gt;
  &lt;/a&gt;
  Some free advice
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Write things down to learn better, be it maintaining excel sheets of solved problems, docs, or even hand-written notes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Know the programming language you are going to use during interviews (e.g., C++/Java) inside out, well, at least the library functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn basic Object-Oriented Programming Concepts, to be able to write modular and clean code with short comments if time permits (Interviewers love modular code!).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Behavioral rounds matter! It does not take a lot of time to prepare for behavioral questions, but they might have a great impact on your application. Use the STAR method to think of answers to common behavioral questions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#during-the-interviews"&gt;
  &lt;/a&gt;
  During the interviews
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make sure you understand the problem — the problems are deliberately made ambiguous/open-ended. Ask the right kind of clarifying questions and state any assumptions that you make about the problem scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select a simple yet good example/test case, which may lead to insights about how to solve the general problem.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.Focus on the algorithm and data structures you will use to solve the problem. Think of a couple of approaches, and keep talking to the interviewer (really important) about your thought process.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Explain your best solution to the interviewer — he/she might ask for a more efficient solution. It is very important to resist the temptation to begin coding before figuring out a complete solution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code your solution while still explaining to the interviewer, what you are doing. Make sure you write clean and simple code with good variable naming, possibly with proper input validation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify that your code works by tracing it through the test case (from step 2), to remove minor bugs. Next, check your code for all corner and special cases (if time doesn’t permit, at least tell the interviewer verbally).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, talk about the time and space complexity of your solutio&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Make a Blockchain Speak to You</title>
      <author>omar-saadoun</author>
      <pubDate>Wed, 26 May 2021 20:33:23 +0000</pubDate>
      <link>https://dev.to/omarsaadoun/make-a-blockchain-speak-to-you-2jp3</link>
      <guid>https://dev.to/omarsaadoun/make-a-blockchain-speak-to-you-2jp3</guid>
      <description>&lt;h6&gt;
  &lt;a href="#the-%C3%A6ternity-middleware-puts-blockchain-data-into-context-so-you-get-the-information-you-need"&gt;
  &lt;/a&gt;
  The æternity Middleware puts blockchain data into context so you get the information you need
&lt;/h6&gt;

&lt;p&gt;There are good technical reasons for blockchain protocols to leave bits of information stored in their granular way. Although a good source of immutable trustful data, only connecting the dots between all available information unleashes the full value of blockchains. Have your questions, the open-source æternity Middleware has the answers.&lt;/p&gt;

&lt;p&gt;“What is the most popular token?”&lt;/p&gt;

&lt;p&gt;“How many owners of this token are there, what are their balances and how did they change over the last blocks?”&lt;/p&gt;

&lt;p&gt;“Tell me whenever something happens with regard to my oracle/account/contract!”&lt;/p&gt;

&lt;p&gt;To keep the chain data of the æternity protocol concise, æternity would not store answers to the questions above. Projects requiring this information for their use cases though (especially in the De-Fi sector) have a tool at hand, that automatically gathers lots of important correlations between on-chain data to process it into an easily digestible form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-the-new-%C3%A6ternity-middleware"&gt;
  &lt;/a&gt;
  Introducing: The new æternity Middleware
&lt;/h2&gt;

&lt;p&gt;You might have seen it in action already: It runs æternity’s &lt;a href="https://explorer.aeternity.io/"&gt;Explorer&lt;/a&gt; under the hood.&lt;/p&gt;

&lt;p&gt;It was developed with any kind of usage scenario in mind: You can spawn it up to visualize what is happening on your private network or follow along the progress of the æternity mainnet. And yes, you get both the back-end service as well as the beautifully designed web interface if you want to. And the next good news is: It’s open-source and very easy to set up. You can follow the steps in the &lt;a href="https://github.com/aeternity/ae_mdw"&gt;Github Repository&lt;/a&gt; and always ask for help on the &lt;a href="https://forum.aeternity.com/"&gt;forum&lt;/a&gt; if you get stuck.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-techies-and-endusers-alike"&gt;
  &lt;/a&gt;
  For Techies and End-Users alike
&lt;/h2&gt;

&lt;p&gt;Using the Middleware, you can serve the purposes of several stakeholders of your projects alike: have people get visual feedback and allow for quick read-ups on important information, as well as gathering of huge chunks of complicated information for your project’s tech. The latter is supported by over 40 APIs serving different purposes (get a brief overview &lt;a href="https://github.com/aeternity/ae_mdw#http-endpoints"&gt;here&lt;/a&gt; and if anything important is missing, you are always welcome to express your requests on the &lt;a href="https://forum.aeternity.com/"&gt;forum&lt;/a&gt;. Besides querying APIs for required information you can also use web sockets to be notified about specific happenings in real-time. This means that you don’t have to pull the API constantly for updates with requests causing load on your service, but have all kinds of new information regarding your accounts, contracts or oracles pushed to you via the WebSocket. Think how your dapp’s UX will benefit from having an integrated querying/events notifications service, without the need of using third-party services often used to achieve performance and efficiency in dapps UX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-real-deal"&gt;
  &lt;/a&gt;
  The Real Deal
&lt;/h2&gt;

&lt;p&gt;Utilizing the Middleware for your project comes with low maintenance efforts: æternity uses the Middleware for its official block explorer you will automatically benefit from all patches, updates, and new features that get introduced to the Middleware.&lt;/p&gt;

&lt;p&gt;In the same way that you have oracles, state channels, and the naming system seamlessly integrated into the protocol, you can also count on the advantages of the æternity Middleware out of the box.&lt;/p&gt;

&lt;p&gt;Get in touch: &lt;a href="https://github.com/aeternity"&gt;GitHub&lt;/a&gt; | &lt;a href="http://forum.aeternity.com/"&gt;Forum&lt;/a&gt; | &lt;a href="https://www.reddit.com/r/Aeternity/"&gt;Reddit&lt;/a&gt; | &lt;a href="https://twitter.com/aeternity"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCEsM0b7QPazeMR80DxNkzCA"&gt;YouTube&lt;/a&gt;| &lt;a href="https://www.linkedin.com/company/aeternity"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Original article:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.aeternity.com/make-a-blockchain-speak-to-you-3f3a566ca441"&gt;https://blog.aeternity.com/make-a-blockchain-speak-to-you-3f3a566ca441&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>aeternityblockchain</category>
      <category>middleware</category>
    </item>
    <item>
      <title>Filtering, Sorting and Pagination With React Hooks &amp; Redux 😍</title>
      <author>Said Mounaim</author>
      <pubDate>Wed, 26 May 2021 20:31:07 +0000</pubDate>
      <link>https://dev.to/said_mounaim/filtering-sorting-and-pagination-with-react-hooks-redux-4m9n</link>
      <guid>https://dev.to/said_mounaim/filtering-sorting-and-pagination-with-react-hooks-redux-4m9n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://react-redux-filtering.netlify.app/"&gt;https://react-redux-filtering.netlify.app/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/saidMounaim/React-Redux-Filtering"&gt;https://github.com/saidMounaim/React-Redux-Filtering&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node@v10.16.0 or higher
npm@6.9.0 or higher
git@2.17.1 or higher
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h2&gt;

&lt;p&gt;From your command line, clone and run React Redux Filtering:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Clone this repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/saidMounaim/React-Redux-Filtering.git

&lt;span class="c"&gt;# Go into the repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;React-Redux-Filtering

&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;#Start's development server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#technologies-used"&gt;
  &lt;/a&gt;
  Technologies Used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://redux.js.org/"&gt;Redux&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>100daysofcode</category>
      <category>redux</category>
    </item>
  </channel>
</rss>
