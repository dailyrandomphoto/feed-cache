<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Optional chaining in the ~real world (React video chat app)</title>
      <author>Kimberlee Johnson </author>
      <pubDate>Thu, 29 Apr 2021 03:33:14 +0000</pubDate>
      <link>https://dev.to/kimberleejohnson/optional-chaining-in-the-real-world-react-video-chat-app-5dm8</link>
      <guid>https://dev.to/kimberleejohnson/optional-chaining-in-the-real-world-react-video-chat-app-5dm8</guid>
      <description>&lt;p&gt;I started learning JavaScript in 2019, around the time that optional chaining became a thing. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The optional chaining operator (&lt;code&gt;?.&lt;/code&gt;) enables you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"&gt;(MDN)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I remember hearing the hearsay about why this was awesome, but, at the time, the above explanation &lt;a href="https://dev.to/laurieontech/optional-chaining-has-arrived-111l"&gt;and others&lt;/a&gt; still went a bit over my head. Fast forward two years, and I've finally run into optional chaining in the ~real world. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/klGl9A6AkjKL9I8piK/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/klGl9A6AkjKL9I8piK/giphy.gif" alt="Gif of Real World cast reads I thought I was being punk'd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post shares that encounter! I'll go over video chat participant "tracks" at the highest level, and then walk through why optional chaining makes sense in this use case. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Before diving in, a quick thank you to my colleague Jess for the lesson that became this post. I'm lucky to learn from her at work everyday and &lt;a href="https://twitter.com/gemontracks"&gt;on Twitter&lt;/a&gt; too!&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#video-chat-participant-tracks"&gt;
  &lt;/a&gt;
  Video chat participant tracks
&lt;/h2&gt;

&lt;p&gt;Like a lot of people, I've been on a lot of video calls this year. I also work at Daily, where my colleagues build &lt;a href="https://www.daily.co/?utm_source=dev&amp;amp;utm_campaign=optional-chaining"&gt;real-time audio and video APIs&lt;/a&gt;. I write &lt;a href="https://docs.daily.co/reference#using-the-dailyco-front-end-library?utm_source=dev&amp;amp;utm_campaign=optional-chaining"&gt;documentation&lt;/a&gt; for the tools they build and prototype &lt;a href="https://github.com/daily-demos?utm_source=dev&amp;amp;utm_campaign=optional-chaining"&gt;demo apps&lt;/a&gt;, so I'm learning a fair amount about the different moving parts behind video and &lt;a href="https://www.daily.co/blog/how-to-build-a-billion-dollar-audio-app-in-a-weekend/?utm_source=dev&amp;amp;utm_campaign=optional-chaining"&gt;audio-only&lt;/a&gt; calls, things I didn't really think about before. &lt;/p&gt;

&lt;p&gt;Take, for example, tracks! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/kyj9z12kYr9fRr9T8X/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/kyj9z12kYr9fRr9T8X/giphy.gif" alt="Runners on a track"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I join a video call with someone else, I and that other person or people trade audio, video, and sometimes screen &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack"&gt;media tracks&lt;/a&gt; back and forth. &lt;/p&gt;

&lt;p&gt;As you've probably experienced, participants' tracks can go through &lt;em&gt;many&lt;/em&gt; states. Tracks load as participants join, and then they're playable; they can be muted intentionally or because of a disruption. The &lt;a href="https://www.daily.co/?utm_source=dev&amp;amp;utm_campaign=optional-chaining"&gt;Daily API&lt;/a&gt; accounts for the following participant track states, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blocked&lt;/li&gt;
&lt;li&gt;off&lt;/li&gt;
&lt;li&gt;sendable&lt;/li&gt;
&lt;li&gt;loading&lt;/li&gt;
&lt;li&gt;playable&lt;/li&gt;
&lt;li&gt;interrupted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can find a track's state on the &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-participants?utm_source=dev&amp;amp;utm_campaign=optional-chaining"&gt;Daily participants object&lt;/a&gt;. The object's keys are session id's for each participant, and the corresponding values include lots of details about the participant. For example, here's the participant object for a session_id &lt;code&gt;"e20b7ead-54c3-459e-800a-ca4f21882f2f"&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"e20b7ead-54c3-459e-800a-ca4f21882f2f"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;user_id:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"e20b7ead-54c3-459e-800a-ca4f21882f2f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;audio:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;video:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;screen:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;joined_at:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Date(&lt;/span&gt;&lt;span class="mi"&gt;2019-04-30&lt;/span&gt;&lt;span class="err"&gt;T&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;32.485&lt;/span&gt;&lt;span class="err"&gt;Z)&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;local:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;owner:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;session_id:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"e20b7ead-54c3-459e-800a-ca4f21882f2f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;user_name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;tracks:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;audio:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;subscribed:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;state:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'playable'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;blocked?:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;byDeviceMissing?:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;byPermissions?:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;off?:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;byUser?:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;byBandwidth?:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; 
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;track?:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;MediaStreamTrack&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;video:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;above&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;screenAudio:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;above&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;screenVideo:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;same&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;above&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;*/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The track's state is deeply nested at &lt;code&gt;participant.tracks.track.state&lt;/code&gt;, where track stands for the kind of track (audio, video, screenAudio or screenVideo). &lt;/p&gt;

&lt;p&gt;And this is where optional chaining comes in. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opting-into-optional-chaining"&gt;
  &lt;/a&gt;
  Opting into optional chaining
&lt;/h2&gt;

&lt;p&gt;In JavaScript, if an object doesn't exist, trying to access values on that object throws an error. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TDlM1h7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvgtvgeuiv2h839v1x8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TDlM1h7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mvgtvgeuiv2h839v1x8o.png" alt="Mean Girls Lindsay Lohan meme text reads the object does not exist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can be inconvenient when a value we need is deeply nested, like the participant's video/audio track state. Let's look at an example. &lt;/p&gt;

&lt;p&gt;When a participant leaves a call, their audio/video tracks stop. When their audio/video tracks stop, we want to remove their participant tile from the call.&lt;/p&gt;

&lt;p&gt;We handle this update the same way we handle all participant updates. I wrote a longer post about how &lt;a href="https://dev.to/kimberleejohnson/learn-react-hooks-by-looking-under-the-hood-of-a-video-chat-app-3a5o"&gt;React hooks help us manage state in this video chat app&lt;/a&gt;, but tl; dr: the useEffect hook listens for changes to &lt;code&gt;participantUpdated&lt;/code&gt; state, and on that change updates the rendered &lt;code&gt;participants&lt;/code&gt; list.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;participantUpdated&lt;/code&gt; stores a string including the name of the event, that participant's session id, and the time the event happened. When a participant's tracks stop, as for other events, we call &lt;code&gt;setParticipantUpdated&lt;/code&gt; to change the string. Here's how that looks without optional chaining:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleTrackStopped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logDailyEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setParticipantUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s2"&gt;`track-stopped-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you guess why this might cause a problem? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1xmBLaMM6ciAYvuNCG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1xmBLaMM6ciAYvuNCG/giphy.gif" alt="Schitts Creek Moira Rose gif reads and that's a problem because"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because when a participant leaves a call and their tracks stop, they're no longer a meeting participant. They can't be found on the Daily participants object. &lt;code&gt;.participant&lt;/code&gt; does not exist. The console throws an error, &lt;code&gt;Cannot read property 'user_id' of null&lt;/code&gt;: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HG8gYY3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6qj2jlmjocg2f6fdhwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HG8gYY3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s6qj2jlmjocg2f6fdhwv.png" alt="Console error reads TypeError and cannot read property user id of null"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From a UI perspective, a black, trackless tile remains even after the participant leaves. This is because &lt;code&gt;setParticipantUpdated&lt;/code&gt; can't fire, so the hook listening for the change doesn't update the rendered participant list to remove the absent participant, even though their tracks disappear. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5mIHNgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jzrfqqgg3gwy3tnvix7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5mIHNgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8jzrfqqgg3gwy3tnvix7.png" alt="Video chat app with audio muted and empty black tile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Optional chaining helps us avoid this. Let's add the syntax to &lt;code&gt;handleTrackStopped&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleTrackStopped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logDailyEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setParticipantUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s2"&gt;`track-stopped-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, those &lt;code&gt;.?&lt;/code&gt; evaluate the missing &lt;code&gt;.participant&lt;/code&gt; as undefined. If I add a &lt;code&gt;console.log()&lt;/code&gt; to &lt;code&gt;handleTrackStopped&lt;/code&gt; to see the string passed to state, that's confirmed: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X1EAeFYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7irgvwxus8gbt7wirr7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1EAeFYP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7irgvwxus8gbt7wirr7x.png" alt="Console reads track-stopped-undefined"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this successful change to &lt;code&gt;participantUpdated&lt;/code&gt; state, our hook can register the change, update the participant list, and be sure to remove any trackless tiles. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remember-its-all-optional"&gt;
  &lt;/a&gt;
  Remember, it's all optional
&lt;/h2&gt;

&lt;p&gt;Optional chaining makes sense in this &lt;a href="https://github.com/daily-demos/call-object-react?utm_source=dev&amp;amp;utm_campaign=optional-chaining"&gt;demo video chat app&lt;/a&gt; for a few reasons. For one thing, our track state data was pretty deeply nested. For another, it's okay if the &lt;code&gt;.participant&lt;/code&gt; doesn't exist in our app after they leave (we won't be trying to access their data again once they're gone). &lt;/p&gt;

&lt;p&gt;We didn't use optional chaining as our default syntax for every nested object in our app, and it's unlikely that would ever be a good idea. If you're using this syntax in the ~real world, be sure to be explicit about it. &lt;/p&gt;

&lt;p&gt;And, if you are using optional chaining, please tell me about it! When have you opted for it recently? Let me know in the comments or &lt;a href="https://twitter.com/kimeejohnson"&gt;over on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Simple Text Revealer</title>
      <author>lemmin</author>
      <pubDate>Thu, 29 Apr 2021 01:21:13 +0000</pubDate>
      <link>https://dev.to/lemmin/simple-text-revealer-kfj</link>
      <guid>https://dev.to/lemmin/simple-text-revealer-kfj</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lemmin/embed/xxgNOVO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;All text nodes in the provided container will be parsed and added back into the DOM with a wrapping span (by letter or word) including classes that describe the hidden and revealed styles (and transition).&lt;/p&gt;

&lt;p&gt;Any transition you can think of can be used to animate each individual letter or word in sequence (doesn't even need to be a reveal).&lt;/p&gt;

&lt;p&gt;The reveal() method returns a promise that resolves when all the text has transitioned. This demo uses the promises to chain the reveal animations together.&lt;/p&gt;

&lt;p&gt;You can use reset() or replay() to run the animation again. The transitions will apply when resetting as well (all at once).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>animation</category>
      <category>reveal</category>
    </item>
    <item>
      <title>Best Supported Serverless Languages</title>
      <author>Dylan Anthony</author>
      <pubDate>Thu, 29 Apr 2021 00:56:33 +0000</pubDate>
      <link>https://dev.to/dbanty/best-supported-serverless-languages-l5</link>
      <guid>https://dev.to/dbanty/best-supported-serverless-languages-l5</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover image created by me using the &lt;a href="https://github.com/remojansen/logo.ts"&gt;Community TypeScript Logo&lt;/a&gt;, the &lt;a href="https://blog.golang.org/go-brand"&gt;Go logo&lt;/a&gt;, the &lt;a href="https://github.com/dotnet/brand"&gt;.NET logo&lt;/a&gt;, and &lt;a href="https://www.rustacean.net"&gt;Ferris the Crab&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I'm a big fan of serverless functions, but my perspective is usually limited to what will run on AWS Lambda. So I took a tally of the supported languages on the serverless platforms that I've heard of.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats"&gt;
  &lt;/a&gt;
  Caveats
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;I didn't go searching for new serverless providers, these are the ones I already knew about.&lt;/li&gt;
&lt;li&gt;These are only the languages prominently listed with tutorials or examples on the provider's website. You'll notice, for example, that Rust on AWS Lambda is not included here even though I've written several blog posts about it!&lt;/li&gt;
&lt;li&gt;This is not an endorsement or review of any languages or providers, merely a count of official support. If you have specific questions you want answered (or a slightly different list ranking related things) &lt;a href="https://github.com/dbanty/dylananthony.com/discussions/71"&gt;let me know&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some of these entries have their own specific caveats, they are indicated with a number at the end of the entry. Details on that number are at the bottom of the post.&lt;/li&gt;
&lt;li&gt;I have not used all of these language/provider combos, I'm assuming if they are displayed prominently on the site then they are possible to use effectively.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#big-takeaways"&gt;
  &lt;/a&gt;
  Big Takeaways
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The best supported language is JavaScript, followed closely by TypeScript. No shock there.&lt;/li&gt;
&lt;li&gt;Python and Go are tied for third place in availability.&lt;/li&gt;
&lt;li&gt;Cloudflare Workers are &lt;em&gt;by far&lt;/em&gt; the most flexible in way of supported / documented languages with 12—though many of those rely on cross-compiling the language to JavaScript.&lt;/li&gt;
&lt;li&gt;AWS, Azure, and GCP are all tied for second at 8 supported languages. Realistically, these are the most flexible platforms as those 8 languages don't require transpilation (except for TypeScript but... you know...).&lt;/li&gt;
&lt;li&gt;Rust has an explicit tutorial on the Azure website! 🥰 I'm suddenly more likely to use Azure than AWS in my next big project.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-list"&gt;
  &lt;/a&gt;
  The List
&lt;/h2&gt;

&lt;p&gt;Here is the list of all the supported languages with the platforms that support them. Reminder, a number in {} after the language means there's a caveat, check the bottom of the post for it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; Netlify&lt;/li&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;li&gt; Cloudflare&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; Netlify&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;li&gt; Cloudflare&lt;/li&gt;
&lt;li&gt; AWS {1}&lt;/li&gt;
&lt;li&gt; GCP {1}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#go"&gt;
  &lt;/a&gt;
  Go
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; Netlify&lt;/li&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure {2}&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;li&gt; Cloudflare {3}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#ruby"&gt;
  &lt;/a&gt;
  Ruby
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Vercel&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; GCP&lt;/li&gt;
&lt;li&gt; Cloudflare {3}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#powershell"&gt;
  &lt;/a&gt;
  Powershell
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; AWS&lt;/li&gt;
&lt;li&gt; Azure&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Azure {2}&lt;/li&gt;
&lt;li&gt;Cloudflare {4}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#c-and-cobol"&gt;
  &lt;/a&gt;
  C and Cobol
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Cloudflare {4}&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#kotlin-dart-scala-reason-ocaml-perl-and-f"&gt;
  &lt;/a&gt;
  Kotlin, Dart, Scala, Reason / OCaml, Perl, and F
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Cloudflare {3}&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#languagespecific-caveats"&gt;
  &lt;/a&gt;
  Language-Specific Caveats
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The runtime is for Node.js and there is no TypeScript example, but TypeScript is fairly easy to compile to JavaScript.&lt;/li&gt;
&lt;li&gt;There is a tutorial for using this language, but not an official runtime.&lt;/li&gt;
&lt;li&gt;Supported by compiling to JavaScript, some language features / libraries may not work.&lt;/li&gt;
&lt;li&gt;Supported by compiling to WebAssembly, your mileage may vary.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;em&gt;Was this post super helpful to you? &lt;a href="https://github.com/sponsors/dbanty?frequency=one-time&amp;amp;sponsor=dbanty"&gt;Tip me on GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have a question or comment about this post? Leave it in the &lt;a href="https://github.com/dbanty/dylananthony.com/discussions/71"&gt;discussion&lt;/a&gt; thread on GitHub!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Want to be notified of future posts? Watch releases in &lt;a href="https://github.com/dbanty/dylananthony.com"&gt;the GitHub repo&lt;/a&gt; or &lt;a href="https://twitter.com/TBDylan"&gt;follow me on Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have an idea or request for a future blog topic? Drop it in the GitHub discussions under &lt;a href="https://github.com/dbanty/dylananthony.com/discussions/categories/ideas"&gt;ideas&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
    </item>
    <item>
      <title>Why Are We Still Having ‘Works on My Machine’ Problems?</title>
      <author>rishiyadav</author>
      <pubDate>Thu, 29 Apr 2021 00:50:22 +0000</pubDate>
      <link>https://dev.to/roost/why-are-we-still-having-works-on-my-machine-problems-31m3</link>
      <guid>https://dev.to/roost/why-are-we-still-having-works-on-my-machine-problems-31m3</guid>
      <description>&lt;p&gt;As much as computer programming has advanced over the past two decades, developers and operators are still dealing with “works on my machine” problems — an application that works great on the laptop but is completely non-functional in production or on a colleague’s laptop. Why are we still having this problem?&lt;/p&gt;

&lt;p&gt;I think of “works on my machine” as a function of how much control developers have over the production environments and how identical the development and production environments are. Over the short history of computer science the pendulum has swung a couple of times, leading to more or less “works on my machine” problems.&lt;/p&gt;

&lt;p&gt;Let’s think back to the early days of computer programming, when programming a computer involved punch cards. Any mistake on the punch card meant you had to punch those cards again. Developers were coding in production, and the cost of each mistake was high. But mistakes were immediately apparent and developers were working as close to production as possible. Everyone was working on the same machine, so there were no “works on my machine” issue.&lt;/p&gt;

&lt;p&gt;As developers started using client servers and then programming on their own machines, the distance between the production environment and the development environment started increasing. This is when “works on my machine” started becoming a serious issue for software engineering teams.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The shorthand “Works on my machine” is a function of how much control developers have over the production environments and how identical the development and production environments are.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then came the cloud. At first, cloud was really Shadow IT, used and configured by developers to run non-critical applications. At that stage, developers had control over the cloud and “works on my machine” problems decreased.&lt;/p&gt;

&lt;p&gt;Now, though, as cloud has moved from Shadow IT to mainstream and more layers of control have been put on how cloud environments are set up, the distance between what developers are doing in their IDEs and what the production environment looks like is increasing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#seeing-what-sticks"&gt;
  &lt;/a&gt;
  Seeing What Sticks
&lt;/h1&gt;

&lt;p&gt;You can’t really work directly in the cloud — and there are good reasons that we don’t have developers working in the production environment like in the mainframe era. Now we have isolated systems for developers so that they can safely make mistakes while developing. At the same time, developers are being woken up at two in the morning because their code doesn’t work in production — they don’t have the tools to easily debug the problem if everything worked perfectly on the laptop. Bugs coming home to Roost, someone may say.&lt;/p&gt;

&lt;p&gt;At the moment, most companies are addressing the “works on my machine” problem with a mixture of the following techniques:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reducing velocity. More robust testing is one strategy for catching potential problems before they reach production. We would like to think that all testing is 100% automated and instantaneous, but that is not true. A more robust testing procedure will slow down development velocity and still not ensure that all “works on my machine” problems are caught before production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trial and error. Organizations talk about getting through issues in production by deploying more frequently or by using advanced deployment techniques like canary deployments. This is a euphemistic way of saying that they are using trial and error to solve “works on my machine” problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Establishing more stringent deployment procedures. Organizations also try to address “works on my machine” problems by establishing increasingly rigid deployment procedures and putting in both guardrails and roadblocks on the deployment pipeline, hoping that problems will be caught before production.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with these approaches is that neither of them are actually solving the problem or giving the developer a better way to proactively ensure that the service will work correctly in production before it even enters the integration process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#empowering-developers"&gt;
  &lt;/a&gt;
  Empowering Developers
&lt;/h1&gt;

&lt;p&gt;After all these years and all these late nights of frustration, you’d think that the software engineering as an industry would have figured out a better way to prevent “works on my machine” problems. The real solution, though, has to involve decreasing the distance between the development environment and the production environment so that developers are automatically able to develop in an environment that’s identical to production, including having access to the latest versions of upstream and downstream dependencies and running with the same configurations. As an industry, we talk a lot about shortening the feedback loop. Developers should be alerted that there might be a service compatibility issue or that an update won’t work in production before it leaves their machine, not after a failed canary deployment. That’s the only way we’ll end up eliminating the “works on my machine” problem for good.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>devops</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Conocer el tipo de Variable en JS!</title>
      <author>Lenin Felix</author>
      <pubDate>Wed, 28 Apr 2021 23:40:33 +0000</pubDate>
      <link>https://dev.to/soyleninjs/conocer-el-tipo-de-variable-en-js-jne</link>
      <guid>https://dev.to/soyleninjs/conocer-el-tipo-de-variable-en-js-jne</guid>
      <description>&lt;p&gt;&lt;a href="https://rollercoin.com/?r=kl3gfn3b"&gt;&lt;img src="//rollercoin.com/static/img/referral/banners/ref_72890.gif" alt="promo"&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Muchas veces (...supongo) has querido o intentado querer saber de qué tipo es una variable, y lo más probable es que lo sepas ya que el 98% de las veces tú eres quien las declara.&lt;/p&gt;

&lt;p&gt;Pero imagínate encontrarte con una API o un código de terceros el cual tengas que manipular, eso ya se vuelve mas complejo, ya que tu solo estas ahi para utilizar ese mundillo de variables, funciones, textos y demás...&lt;/p&gt;

&lt;p&gt;Aunque también muchas veces es util saber de que tipo son las variables para así crear condicionales que estén preparadas para manipular y mantener tu código estable y que no crashee tu código de "Hola Mundo".&lt;/p&gt;

&lt;p&gt;Por eso te ofrezco un pequeño ejemplo de funciones que puedes utilizar para esas ocasiones (se que es poco, pero es trabajo honesto).&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/soyleninjs/embed/yLgjLWg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Básicamente, se trata de funciones a la cual le pasas tu variable para indicar si es de cierto tipo o no.&lt;/p&gt;

&lt;p&gt;Puede funcionar, por ejemplo, en alguna función en la que le pases parámetros, pero tengas que hacer diferentes cosas dado el caso si el parámetro recibe un Objeto o un Array.&lt;/p&gt;

&lt;p&gt;A simple vista no podría parecer muy util, pero por lo menos a mí, con cierto código que tuve que hacer, me ayudo.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
Si te gusto el contenido puedes seguirme en mis redes sociales como &lt;a class="mentioned-user" href="https://dev.to/soyleninjs"&gt;@soyleninjs&lt;/a&gt;
 &lt;br&gt;
&lt;/center&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/G2G42SCZF"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDsLyh75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.ko-fi.com/img/githubbutton_sm.svg" alt="ko-fi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rollercoin.com/?r=kl3gfn3b"&gt;&lt;img src="//rollercoin.com/static/img/referral/banners/ref_72890.gif" alt="promo"&gt; &lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Sport With AI</title>
      <author>Furkan Gülşen</author>
      <pubDate>Wed, 28 Apr 2021 23:25:31 +0000</pubDate>
      <link>https://dev.to/codeblogger/sport-with-ai-4fi5</link>
      <guid>https://dev.to/codeblogger/sport-with-ai-4fi5</guid>
      <description>&lt;p&gt;Github Repo: &lt;a href="https://github.com/Furkan-Gulsen/Sport-With-AI"&gt;https://github.com/Furkan-Gulsen/Sport-With-AI&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The human body is detected with the help of the &lt;a href="https://github.com/google/mediapipe"&gt;Mediapipe&lt;/a&gt; library. Then, using the mathematical methods applied, it is determined how much the exercise count is done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#situp-exercise"&gt;
  &lt;/a&gt;
  Sit-Up Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ch1KmpQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mxjakvbt0ksmmam8t75.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ch1KmpQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mxjakvbt0ksmmam8t75.gif" alt="Sit-Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=aQh52cRfH-w"&gt;https://www.youtube.com/watch?v=aQh52cRfH-w&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The sit-up is an abdominal endurance training exercise to strengthen, tighten and tone the abdominal muscles. It is similar to a crunch, but sit-ups have a fuller range of motion and condition additional muscles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t sit-up -vs videos/sit-up.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pullup-exercise"&gt;
  &lt;/a&gt;
  Pull-Up Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4UtSltQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h99femdoc3xkcfo9qdxo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UtSltQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h99femdoc3xkcfo9qdxo.gif" alt="Pull-Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=8hkTMATEuUc"&gt;https://www.youtube.com/watch?v=8hkTMATEuUc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A pull-up is an upper-body strength exercise. The pull-up is a closed-chain movement where the body is suspended by the hands and pulls up. As this happens, the elbows flex and the shoulders adduct and extend to bring the elbows to the torso.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t pull-up -vs videos/pull-up.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pushup-exercise"&gt;
  &lt;/a&gt;
  Push-Up Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--slKebNOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2gimthwr3e3wafnm7jw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--slKebNOH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2gimthwr3e3wafnm7jw.gif" alt="Push-Up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=IGjHIXAZAak"&gt;https://www.youtube.com/watch?v=IGjHIXAZAak&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A push-up is a common calisthenics exercise beginning from the prone position. By raising and lowering the body using the arms, push-ups exercise the pectoral muscles, triceps, and anterior deltoids, with ancillary benefits to the rest of the deltoids, serratus anterior, coracobrachialis and the midsection as a whole.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t push-up -vs videos/push-up.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#squat-exercise"&gt;
  &lt;/a&gt;
  Squat Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jaHwsSkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afuz6w350soyn6n7o4up.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jaHwsSkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afuz6w350soyn6n7o4up.gif" alt="Squat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=iQrXRTk7KE0"&gt;https://www.youtube.com/watch?v=iQrXRTk7KE0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A squat is a strength exercise in which the trainee lowers their hips from a standing position and then stands back up. During the descent of a squat, the hip and knee joints flex while the ankle joint dorsiflexes; conversely the hip and knee joints extend and the ankle joint plantarflexes when standing up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t squat -vs videos/squat.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#walking-exercise"&gt;
  &lt;/a&gt;
  Walking Exercise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ol8G7pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eblftjv35sh0lobcbqzj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ol8G7pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eblftjv35sh0lobcbqzj.gif" alt="Walking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video: &lt;a href="https://www.youtube.com/watch?v=pPTeSd_GXoc"&gt;https://www.youtube.com/watch?v=pPTeSd_GXoc&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t walk -vs videos/walk.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;If you want to detect your movements live with your webcam, you can run the code line below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python main.py -t sit-up
# or python main.py -t pull-up
# or python main.py -t push-up
# or python main.py -t squat
# or python main.py -t walk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ai</category>
      <category>python</category>
      <category>deeplearning</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Good coding attracts new jobs  - Code Inspector Talks!</title>
      <author>leslysandra</author>
      <pubDate>Wed, 28 Apr 2021 23:20:41 +0000</pubDate>
      <link>https://dev.to/codeinspector/good-coding-attracts-new-jobs-code-inspector-talks-3o42</link>
      <guid>https://dev.to/codeinspector/good-coding-attracts-new-jobs-code-inspector-talks-3o42</guid>
      <description>&lt;p&gt;In this episode at &lt;strong&gt;Code Inspector Talks&lt;/strong&gt;, we are having &lt;a href="https://www.linkedin.com/in/rodolfoferro/"&gt;Rodolfo Ferro&lt;/a&gt; as a guest with us to learn about his experience in software development and his advice on &lt;em&gt;good coding practices&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=awAfmZ2zv9E"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoghQIr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6sprli804ysjz89rtcz.png" alt="Chatting with Rodolfo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rodolfo, originally from Mexico, and currently working as a Machine Learning Engineer tells us about his background in mathematics and how he discovered that learning how to code will give him new job opportunities and the chance to contribute to different software projects to the world.&lt;/p&gt;

&lt;p&gt;Since he has been coding on &lt;strong&gt;python&lt;/strong&gt;, he has commit himself to learn more about this language, for example: syntax, types of variables, how to write good functions, and how to write good documentation using &lt;em&gt;doc strings&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;He mentioned these as &lt;strong&gt;good coding practices&lt;/strong&gt; in python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Think about &lt;em&gt;scalability&lt;/em&gt; how your project coded in python could go beyond first expectations&lt;/li&gt;
&lt;li&gt;Write a code to be used by other people. Contribute to the tech community&lt;/li&gt;
&lt;li&gt;Write down good documentation and every time you update your functions update your documentation as well!&lt;/li&gt;
&lt;li&gt;Testing! testing is important! He has been using &lt;a href="https://docs.pytest.org/en/6.2.x/"&gt;pytest&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He mentioned some &lt;strong&gt;challenges&lt;/strong&gt; that he has faced while coding in python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When checking old code from someone's, it is really a challenge to understand it or update it if there is no documentation&lt;/li&gt;
&lt;li&gt;Code refactoring and maintenance, both are challenges themselves! Even more, when code is not readable and not documented&lt;/li&gt;
&lt;li&gt;Generalizations! watch out with generalizations in python, and learn more about the different changes that every new version for python brings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moreover, Rodolfo highlighted that time when he was working with a Spanish company as software developer and that few years later, this same company asked him to join them because they really liked a lot how Rodolfo writes code! 🤓&lt;/p&gt;

&lt;p&gt;We had a great time chatting with Rodolfo! Thank you for the advice and for sharing experiences with us to help us be better coders 😅&lt;/p&gt;

&lt;p&gt;Thank you, Code Inspector community, to join us in this talk! More other talks coming soon... 🎉 &lt;/p&gt;

&lt;p&gt;|&lt;strong&gt;Watch the full interview in our YouTube Channel&lt;/strong&gt;|&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=awAfmZ2zv9E"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eup8rwtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/awAfmZ2zv9E/0.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>interview</category>
      <category>codequality</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Modifying the Vue prototype is "evil monkey-patching"</title>
      <author>Brian Boyko</author>
      <pubDate>Wed, 28 Apr 2021 23:16:05 +0000</pubDate>
      <link>https://dev.to/brianboyko/modifying-the-vue-prototype-is-evil-monkey-patching-5dmi</link>
      <guid>https://dev.to/brianboyko/modifying-the-vue-prototype-is-evil-monkey-patching-5dmi</guid>
      <description>&lt;p&gt;If you're not familiar with 'monkey-patching', it's when you modify the prototype of an existing language feature. Like adding a new method to Array.prototype, or redefining Array.prototype.reduce because it's just slightly more efficient to use lodash's version. &lt;/p&gt;

&lt;p&gt;It's a feature in a lot of high-level languages that use some type of inheritance, specifically Ruby, Python, and (naturally) Javascript. &lt;/p&gt;

&lt;p&gt;But just because you &lt;em&gt;can&lt;/em&gt; do something in Javascript &lt;a href="https://en.wikipedia.org/wiki/Monkey_patch#Pitfalls"&gt;doesn't mean you &lt;em&gt;should&lt;/em&gt;&lt;/a&gt;. Monkey-patching can lead to namespace collisions if two developers have their own methods - and you won't really know "which runs first" until runtime in most cases. (It's also really hard to unit test, since both methods will be tested and get correct assertions in isolation.) Additionally they create a discrepancy between the original source code and observed behavior.  &lt;/p&gt;

&lt;p&gt;Most importantly for the purposes of this article, it's a change that isn't immediately visible to those who use the code after you. You &lt;em&gt;think&lt;/em&gt; you're telling the computer to do one thing, but you're &lt;em&gt;actually&lt;/em&gt; telling the computer to do something else.  That, of course, is how you get bugs. &lt;/p&gt;

&lt;p&gt;Let's switch gears for a moment to the Vue framework.  &lt;/p&gt;




&lt;p&gt;First, I think Vue is great. It is well designed, written, documented. I like the way it's going with Vue 3.0 and the Vue Composition API, I like Vue templates, I like .vue files, I like that it's about 1/3rd the size of React. I like a lot of things about it. &lt;/p&gt;

&lt;p&gt;But if Paulie Walnuts held a gun to my head, and asked me what my favorite framework is, I'd say React.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KtPxb21---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me3umbirkjwxhayaj2yq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KtPxb21---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me3umbirkjwxhayaj2yq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the reason is quite simple: Vue gives you &lt;em&gt;a lot of ways to do the same thing&lt;/em&gt;, and not all of those ways are good ways. Computed vs. Watch, callbacks vs. emits, mapGetters vs. mapState vs. this.$store... &lt;/p&gt;

&lt;p&gt;All are equally valid. None of these methods are canonically &lt;em&gt;wrong&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt;. They all &lt;em&gt;work&lt;/em&gt;. This is part of the reason Vue is much easier to learn and get going with quickly than React is. But you start to lose out as the program and the team starts to scale. If you give a team of 10 developers 10 different ways to code something, you will end up with 10 different ways to do the same thing in your codebase, and a lot of highly-coupled code with duplicated logic.    &lt;/p&gt;




&lt;p&gt;At Deverus, where I first started working with Vue in 2017, we hired some (good) outside contractors which put configuration information on Vue.prototype.$config, constants on Vue.prototype.$constants, and all our asynchronous API methods on Vue.prototype.$API. They were probably following one of the many blog posts which suggested this pattern, like &lt;a href="https://www.telerik.com/blogs/api-factories-vue-nuxt"&gt;this one from Telerik&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;But this created a problem - and that problem was that now &lt;em&gt;every&lt;/em&gt; Vue component - even presentational ones that really did no logic - now had access to every API call, had access to every configuration setting, had access to every constant, even if they weren't needed. They also had the ability to redefine them at will. &lt;/p&gt;

&lt;p&gt;The most problematic was the &lt;code&gt;this.$API&lt;/code&gt; methods. If there was a problem, you'd have to search through every component to see what components were using this.$API, see where the data was being stored.  More often than not, multiple calls were being made to the same API method when one would do - data was often duplicated (or worse, duplicated, then became &lt;em&gt;out of sync&lt;/em&gt;) in many different &lt;code&gt;data()&lt;/code&gt; observables of components. &lt;/p&gt;

&lt;p&gt;This wasn't &lt;em&gt;wrong&lt;/em&gt;.  It's considered a &lt;em&gt;valid Vue pattern&lt;/em&gt;. And if you're using this pattern, you're not using Vue &lt;em&gt;wrong&lt;/em&gt;, but for us, it led to these problems. We had to create more style rules (in our case, put all the API calls into the Vuex store, not components, and pass down the data via mapped getters,) and refactor the application so that we could create a more testable application that was easier to add features to.  &lt;/p&gt;

&lt;p&gt;So - that's a bit of a long way round to get to the point of this post - which is to say that while there's no &lt;em&gt;official&lt;/em&gt; best practice guide that says you shouldn't modify, or "monkey-patch" the Vue prototype, &lt;em&gt;I'm&lt;/em&gt; saying that &lt;em&gt;from my experience&lt;/em&gt; you're probably going to have a bad time if you do. &lt;/p&gt;

&lt;p&gt;I suppose that vue prototype modification isn't "monkey-patching" the way that modifying the prototype of, say, Array or Object is.  But once you add the Vue framework to an application, it really does become so integral that the Vue prototype takes on a lot of the same importance as a core language feature. React developers expect React to behave like React every React application they work on.  Vue developers... well, in an ideal world they &lt;em&gt;should&lt;/em&gt; be able to rely on Vue, but because prototype modification is a &lt;em&gt;thing&lt;/em&gt;, they can't always. &lt;/p&gt;

&lt;p&gt;This can be further frustrating because monkey-patching the Vue prototype &lt;em&gt;is&lt;/em&gt; how vue-router and vuex (and a lot of other good plugins) work -- and work well. And it is extremely easy, for example, to get your route params from this.$route.params, compared to the hoops you used to have to jump through passing your parameters to your component with React (though the useRouter hook makes it really easy now).&lt;/p&gt;

&lt;p&gt;I'd like to think that they're exceptions. See, one of the things Vue has going for it is that because it doesn't try to stop you from doing &lt;em&gt;stupid things&lt;/em&gt;, it allows you to do very &lt;em&gt;clever&lt;/em&gt; things as well.  And vue-router and vuex are very clever indeed. &lt;/p&gt;

&lt;p&gt;And I'm not saying that you or your team isn't clever.  But if you're using Vue in production for a mission critical app, changes are you're dealing with things that make your team less clever than a decidicated core of open-source developers making sure that they can rigourously test, type, and develop software over many iterations.  &lt;/p&gt;

&lt;p&gt;A team that doesn't have time to pay off technical debt is going to lose "cleverness". A team being pressured to add a new feature before a deadline is going to lose "cleverness."  It's one of the reasons why open source purists like Eric Stallman believe that &lt;em&gt;all&lt;/em&gt; programming should be open source - a view I don't share, but one that has enough of a point that I can't fault him for holding it. &lt;/p&gt;

&lt;p&gt;So in the vein of "real world" programming for commercial applications (as opposed to open-source or academic purposes), monkey-patching the Vue prototype probably isn't something you want to get in the habit of. &lt;/p&gt;

&lt;p&gt;As always, looking to have a discussion in the comments below - I'm sure my experience wasn't universal, and plenty of people have been clever with Vue in their teams. &lt;/p&gt;

&lt;p&gt;In the meantime, if you want to take a look at some other suggestions I have for keeping large Vue projects organized, checkout my &lt;a href="https://gist.github.com/brianboyko/91fdfb492071e743e389d84eee002342"&gt;styleguide for Deverus (based on Vue 1.0)&lt;/a&gt; and my styleguide for the &lt;a href="https://gist.github.com/brianboyko/6e0af86f71da83a82cd4f074363ce046"&gt;Vue Composition API&lt;/a&gt; back when it was in proposal form.  I'll probably update and combine both and put them here on Dev.to soon.  &lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.flickr.com/photos/scragz/132750805/in/photostream/"&gt;Evil monkey image by Jason Scragz&lt;/a&gt;, used under &lt;a href="https://creativecommons.org/licenses/by/2.0/"&gt;CC-2.0-Attribution&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>frontend</category>
      <category>javascript</category>
      <category>prototypes</category>
    </item>
    <item>
      <title>Semantic HTML Elements: Here are 8 elements to use instead of a div element</title>
      <author>Kingsley Ubah</author>
      <pubDate>Wed, 28 Apr 2021 23:10:17 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/semantic-html-elements-here-are-8-elements-to-use-instead-of-a-div-element-2ijm</link>
      <guid>https://dev.to/ubahthebuilder/semantic-html-elements-here-are-8-elements-to-use-instead-of-a-div-element-2ijm</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello again.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last time out we did a little  &lt;a href="https://dev.to/ubahthebuilder/learn-react-in-plain-english-3php"&gt;Introduction into React&lt;/a&gt; . Today I am slightly shifting the focus over to HTML.  &lt;/p&gt;

&lt;p&gt;HTML stands for &lt;strong&gt;Hyper Text Markup Language&lt;/strong&gt;. You can represent all elements of a text document with a relevant tag in HTML. However, until the release of the HTML5 standard there were no elements to represent certain areas of a document.&lt;/p&gt;

&lt;p&gt;As a result, you would often find mark-ups such as div class=”footer” or div class=”navigation” used to represent a footer and a navigation respectively. While this worked, it wasn't a &lt;strong&gt;semantically ideal&lt;/strong&gt; use case. When I say &lt;strong&gt;semantic&lt;/strong&gt;, I mean that each HTML element should represent it’s equivalent in a &lt;strong&gt;meaningful way&lt;/strong&gt;. Thankfully, the coming of the HTML5 standard also brought about &lt;strong&gt;semantic elements&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is a semantic element?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A document has a footer section. Instead of using:  div class=”footer” to represent the footer in the HTML document, we’re now able to use a dedicated footer element.&lt;/p&gt;

&lt;p&gt;The coming of semantic elements brought better meaning to our HTML markup and allowed us reason about HTML elements in a more intuitive and sensible way.&lt;/p&gt;

&lt;p&gt;Without further ado, below are 10 elements to use in place of the div element:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#article"&gt;
  &lt;/a&gt;
  Article
&lt;/h3&gt;

&lt;p&gt;An article can represent a blog post or a forum post. Before the tag was introduced, you’d do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=”first-article”&amp;gt;
&amp;lt;h2&amp;gt;1st article&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This is the first article from Kingsley&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, it’s all meaningful:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article&amp;gt;
&amp;lt;h2&amp;gt;1st article&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This is the first article from Kingsley
&amp;lt;/article&amp;gt;

&amp;lt;article&amp;gt;
&amp;lt;h2&amp;gt;2nd article&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This is the first article from Kingsley.&amp;lt;/p&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#footer"&gt;
  &lt;/a&gt;
  Footer
&lt;/h3&gt;

&lt;p&gt;The footer tag is used to represent the bottom section of the page. &lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt; div class=”footer”&amp;gt;
  &amp;lt;p&amp;gt;Kingsley Ubah&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;a href="mailto:kingsley@example.com"&amp;gt;kingsley@example.com&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;footer&amp;gt;
  &amp;lt;p&amp;gt;Kingsley Ubah&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;a href="mailto:kingsley@example.com"&amp;gt;kingsley@example.com&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#header"&gt;
  &lt;/a&gt;
  Header
&lt;/h3&gt;

&lt;p&gt;Header represents the area for some form of introductory content, such as the title of an article.&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=”article”&amp;gt;
  &amp;lt;div class=”header”&amp;gt;&amp;gt;
    &amp;lt;h1&amp;gt;React Definition&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;What is React?&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;p&amp;gt;React is a JavaScript framework...
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;h1&amp;gt;React Definition&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;What is React?&amp;lt;/p&amp;gt;
  &amp;lt;/header&amp;gt;
  &amp;lt;p&amp;gt;React is a JavaScript framework...
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nav"&gt;
  &lt;/a&gt;
  Nav
&lt;/h3&gt;

&lt;p&gt;Nav is used to hold a set of Navigation links.&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=”nav”&amp;gt;
  &amp;lt;a href="/html/"&amp;gt;HTML&amp;lt;/a&amp;gt; |
  &amp;lt;a href="/css/"&amp;gt;CSS&amp;lt;/a&amp;gt; |
  &amp;lt;a href="/js/"&amp;gt;JavaScript&amp;lt;/a&amp;gt; |
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav&amp;gt;
  &amp;lt;a href="/html/"&amp;gt;HTML&amp;lt;/a&amp;gt; |
  &amp;lt;a href="/css/"&amp;gt;CSS&amp;lt;/a&amp;gt; |
  &amp;lt;a href="/js/"&amp;gt;JavaScript&amp;lt;/a&amp;gt; |
  &amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#main"&gt;
  &lt;/a&gt;
  Main
&lt;/h3&gt;

&lt;p&gt;This defines the main content of a document.&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=”main”&amp;gt;
  &amp;lt;p&amp;gt; This is the main text &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;main&amp;gt;
  &amp;lt;p&amp;gt; This is the main text &amp;lt;/p&amp;gt;
&amp;lt;/main&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#section"&gt;
  &lt;/a&gt;
  Section
&lt;/h3&gt;

&lt;p&gt;As it’s name suggests, it defines a section in a page&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class=”section-one”&amp;gt;
&amp;lt;h1&amp;gt;First Section&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the first section&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class=”section-two”&amp;gt;
&amp;lt;h1&amp;gt;Second Section&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the second section&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section&amp;gt;
&amp;lt;h1&amp;gt;First Section&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the first section&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;


&amp;lt;section&amp;gt;
&amp;lt;h1&amp;gt;Second Section&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the second section&amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#figure-and-figcaption"&gt;
  &lt;/a&gt;
  Figure and Figcaption
&lt;/h3&gt;

&lt;p&gt;The figure tag specifies self-contained content, such as illustrations, code blocks, diagrams, photos etc.&lt;br&gt;
The figcaption defines a caption for the figure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;figure&amp;gt;
  &amp;lt;img src="ubahthebuilder.jpg" alt="This is my blog"&amp;gt;
  &amp;lt;figcaption&amp;gt;Fig1. – Blog Home&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#aside"&gt;
  &lt;/a&gt;
  Aside
&lt;/h3&gt;

&lt;p&gt;The aside element defines some content which will be placed beside another content, kind of like a sidebar,&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;This content is the main content which will be placed at the center&amp;lt;/p&amp;gt;

&amp;lt;div class=”sidebar”&amp;gt;
&amp;lt;h2&amp;gt;Side Content&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This content will be aligned to the side&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;This content is the main content which will be placed at the center&amp;lt;/p&amp;gt;

&amp;lt;aside&amp;gt;
&amp;lt;h2&amp;gt;Side Content&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;This content will be aligned to the side&amp;lt;/p&amp;gt;
&amp;lt;/aside&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;P/S: I recently launched my Beginners Guide to Web development for Absolute Beginners.  &lt;a href="https://gumroad.com/l/WebDevBeginners"&gt;Check it out&lt;/a&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These 8 are some of the semantic elements to be used in lieu of the div tag. I hope you found this post enlightening.&lt;/p&gt;

&lt;p&gt;Make sure to follow this blog for more informative posts on web development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;See you soon.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Mi experiencia participando en la NgConf 2021</title>
      <author>GabrielOmar</author>
      <pubDate>Wed, 28 Apr 2021 22:36:09 +0000</pubDate>
      <link>https://dev.to/gabrielomarq/mi-experiencia-participando-en-la-ngconf-2021-3m7g</link>
      <guid>https://dev.to/gabrielomarq/mi-experiencia-participando-en-la-ngconf-2021-3m7g</guid>
      <description>&lt;p&gt;La NgConf es la conferencia mundial de Angular que se organiza en Estados Unidos. Este año, por la coyuntura del Covid-19, el evento pasó a ser virtual. Sin duda, esto permitió que mucha más gente pueda inscribirse como speaker y/o participante.&lt;/p&gt;

&lt;p&gt;En este evento se juntan varios de los mejores desarrolladores del mundo que trabajan en empresas como Google, Amazon, Facebook, Uber, Apple, Microsoft, etc. Y es una gran oportunidad para aprender de ellos.&lt;/p&gt;

&lt;p&gt;Mi experiencia fue bastante buena ya que pude participar en una &lt;strong&gt;lightning  talk&lt;/strong&gt; con un tema que tiene bastante acogida por varios desarrolladores: &lt;strong&gt;Angular and Stencil working together&lt;/strong&gt;. Aquí pude explicar de como estas tecnologías trabajan juntas y que beneficios traen a nuestras aplicaciones. La sesión fue grabada y estará en los canales oficiales de la NgConf en unas semanas. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o1Stwn5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4D22AQFVS5dL3Kd8Tw/feedshare-shrink_800/0/1619119301633%3Fe%3D1622678400%26v%3Dbeta%26t%3DNog7kHD-3wRd9cflm2BNAhHi_RrEeWK5ELZRKtysSJQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o1Stwn5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C4D22AQFVS5dL3Kd8Tw/feedshare-shrink_800/0/1619119301633%3Fe%3D1622678400%26v%3Dbeta%26t%3DNog7kHD-3wRd9cflm2BNAhHi_RrEeWK5ELZRKtysSJQ" alt="NgConf lightning talks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finalmente, destacar también mi experiencia como participante, aprendí mucho de las tendencias emergentes con diferentes herramientas tecnológicas como Angular, Typescript, etc. Sin duda, una experiencia que volvería a repetir y espero poder volver a ser speaker en la siguiente NgConf 🚀😎&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>typescript</category>
    </item>
    <item>
      <title>My Experience Building a PWA App with Svelte JS</title>
      <author>Arthur Germano</author>
      <pubDate>Wed, 28 Apr 2021 22:15:30 +0000</pubDate>
      <link>https://dev.to/arthurgermano/my-experience-building-a-pwa-app-with-svelte-js-4pme</link>
      <guid>https://dev.to/arthurgermano/my-experience-building-a-pwa-app-with-svelte-js-4pme</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ts1cylFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyc0iza685q4nefbnv8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ts1cylFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyc0iza685q4nefbnv8a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;App built with SvelteJS&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Hi, I would like to share a few words of what was my experience building an front-end application with SvelteJS. And a spoiler alert… was awesome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;The decision of building the app was smooth, I always wanted to create something that was not related to my work, something only mine. However with our routines and work we not always can.&lt;/p&gt;

&lt;p&gt;My daily routine was go to work, do some workout on the gym, maybe go to the groceries shop and by the time I got home I need to plan and prepare everything for the next day and finally when I stop the day is over and I don’t want to get near of a screen.&lt;/p&gt;

&lt;p&gt;But since the covid, things have changed, I started to work from home and all of the sudden I had time to do some personal project.&lt;/p&gt;

&lt;p&gt;So what to do? There are so many apps developed that seem that all the ideas in the world are implemented already.&lt;/p&gt;

&lt;p&gt;Since is my first project, by my self — for my self, I did an app to help me control and maintain my finances. I confess that I already use one, but I was displeased with some features and I thought.. hey maybe I can do it better =).&lt;/p&gt;

&lt;p&gt;So I have the project, I know what I need and want.. so let’s start it. So I did. Since I had more time I started to work after my real job, and since I stopped to go to the gym — because of covid =( — I had a couple of hours in the day to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project-finance-notes-pwa-webapp"&gt;
  &lt;/a&gt;
  The Project — Finance Notes PWA — WebApp
&lt;/h2&gt;

&lt;p&gt;I started small by choosing which frameworks to use, planning which technologies to pick for the back-end and it took me almost a month to define and choose what to use.&lt;/p&gt;

&lt;p&gt;In this time I did some mock-ups, a little bit of testing, asked for some opinions in this time to make sure I was making the right decisions, not that is the right way but I needed to feel confident enough that my choices would not backfire.&lt;/p&gt;

&lt;p&gt;So I ended up with the following technologies:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMp_gWdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k9q0ps1nxjcddb3i5nn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMp_gWdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9k9q0ps1nxjcddb3i5nn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;Technologies used in the project&lt;br&gt;
&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;I will not describe all the technologies but mainly SvelteJS. The other technologies were indeed the right choices.&lt;/p&gt;

&lt;p&gt;I really liked how Fastify worked. My first experience with it was not so great because I tried it in 2019 or 2018 or earlier I don’t remember but it was not OK.. a lot of issues and some features were complicated to make work. But now I truly recommend it. For monolith projects like this one that not justify microservices it is really fast.&lt;/p&gt;

&lt;p&gt;PWA was a challenge for me. I did an udemy course a long time ago and I confess I didn’t remember much. I really liked PWA it makes all in one nicelly. Not having to publish in some store is nice. But still understand the concepts it is a little bit challenging.&lt;/p&gt;

&lt;p&gt;There is plenty of documentation on the internet but mostly do not work well at first or it is out of date. If you want to implement PWA it is crucial to understand its flow. Understand that and you will be just fine! Good look with service-workers =).&lt;/p&gt;

&lt;blockquote&gt;
&lt;b&gt;Just a reminder:&lt;/b&gt; to make PWA work we have to go HTTPS!
But nowadays we have Let’s Encrypt — really easy to start using our new generated certificates! — It took me a while to figure it out, but seriously it is not that difficult =)
&lt;/blockquote&gt;

&lt;p&gt;All the other technologies are amazing and really fun to work with. All of them delivers what is promised, Jaeger, Docker, MongoDB, Redis and of course NodeJS.&lt;/p&gt;

&lt;p&gt;I had to study and learn a lot for this project to work and I almost gave up. The technology area is overwhelming. To keep up with all of it we have to study in a everyday basis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltejs"&gt;
  &lt;/a&gt;
  SvelteJS
&lt;/h2&gt;

&lt;p&gt;The great star, in my opinion, is SvelteJS. I have worked with VueJS and it is really nice too. I did not worked with AngularJS or React and I didn’t want to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, first AngularJS remember for me Java. We have a thousand configuration files just to start with it. I don’t like that. We spend a lot of time to do it.&lt;/p&gt;

&lt;p&gt;React in the other hand seems a little bit nicer but we have to write a lot of code just to get things done to. It is like VueJS. A lot of places repeating myself makes coding a little tiring and boring.&lt;/p&gt;

&lt;blockquote&gt;
Anyway it is just my opinion and my experience with this technologies.
&lt;/blockquote&gt;

&lt;p&gt;Now SvelteJS is easy, fast and coding with it is really really nice. It so well made, its store works wonderfully.&lt;/p&gt;

&lt;p&gt;It is productive, much much more productive than VueJS, I declare it once and reuse in any other place — I don’t have to tell to the file that I want to use and declare it in two thousand different places I just import what I want. With all of its features seems we are just using plain javascript in the end.&lt;/p&gt;

&lt;p&gt;The animations, properties anything you can think of just works! So here it is my applause. Coding with SvelteJS I guarantee it is really nice and fun!&lt;/p&gt;

&lt;p&gt;One last thing the code written is kept organized! Yes. I don’t have a file with a thousand lines. No. The other technologies are good but SvelteJS is better in that way too.&lt;/p&gt;

&lt;p&gt;If I can say something that I found difficult about SvelteJS is that there is a lot of good frameworks or libraries supporting it. Framework7 came to the rescue for that.&lt;/p&gt;

&lt;p&gt;When I started the project there weren’t good SPA routers. Because I have chosen to go SPA not using SSR. So I chose to use Framework7 which is a great framework. Anything you need it can provide and help me a lot during the project. I truly recommend it!&lt;/p&gt;

&lt;p&gt;In my experience less is better. Since Framework7 was practically doing a lot things for me it was OK to use it. But I don’t like to use a whole framework and just focus on the little things using just what I need.&lt;/p&gt;

&lt;p&gt;Since I really liked to work with SvelteJS I decided to create a router for it. I don’t know if it is perfect to use yet. But it reunites everything I think that a router should have!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scr-svelte-client-router"&gt;
  &lt;/a&gt;
  SCR — Svelte Client Router
&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;GIT&lt;/b&gt;: &lt;a href="https://github.com/arthurgermano/svelte-client-router"&gt;https://github.com/arthurgermano/svelte-client-router&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;NPM:&lt;/b&gt; &lt;a href="https://www.npmjs.com/package/svelte-client-router"&gt;https://www.npmjs.com/package/svelte-client-router&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Test it:&lt;/b&gt; &lt;a href="https://arthurgermano.github.io/svelte-client-router/#/svelte-client-router"&gt;https://arthurgermano.github.io/svelte-client-router/#/svelte-client-router&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finance-notes-pwa-app"&gt;
  &lt;/a&gt;
  Finance Notes PWA App
&lt;/h2&gt;

&lt;p&gt;So almost one year later I started and like I said almost giving up. I finished the project. Spend some money hiring a VPN server. Had to learn a lot to configure and secure it.&lt;/p&gt;

&lt;p&gt;If you want to see it visit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://financenotes.com.br/"&gt;Finance Notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is it! Thanks for reading =)&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>pwa</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Use Destructuring Assignment to Assign Variables from Nested Objects</title>
      <author>Randy Rivera</author>
      <pubDate>Wed, 28 Apr 2021 22:10:25 +0000</pubDate>
      <link>https://dev.to/rthefounding/use-destructuring-assignment-to-assign-variables-from-nested-objects-28km</link>
      <guid>https://dev.to/rthefounding/use-destructuring-assignment-to-assign-variables-from-nested-objects-28km</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Let's take this for example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const LOCAL_FORECAST = {
  yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Here's how to extract the values of object properties and assign them to variables with the same name:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { today: { low, high }} = LOCAL_FORECAST;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And here's how you can assign an object properties' values to variables with different names:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { today: { low: lowToday, high: highToday }} = LOCAL_FORECAST;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(lowToday); will display 64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just replace the two assignments with an equivalent destructuring assignment. It should still assign the variables lowToday and highToday the values of today.low and today.high from the LOCAL_FORECAST object.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>devops</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
