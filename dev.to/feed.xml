<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>my lua experience</title>
      <author>scoopydevy</author>
      <pubDate>Mon, 08 Nov 2021 01:39:46 +0000</pubDate>
      <link>https://dev.to/scoopydevy/my-lua-experience-5gm9</link>
      <guid>https://dev.to/scoopydevy/my-lua-experience-5gm9</guid>
      <description>&lt;p&gt;got to try the lua programming language and the love2d game framework for the first time... here are my thoughts...&lt;/p&gt;

&lt;p&gt;lua -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;its a cool lang&lt;/li&gt;
&lt;li&gt;the syntax is weird&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;love2d -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;its ez to implement things&lt;/li&gt;
&lt;li&gt;alot of open source stuff&lt;/li&gt;
&lt;li&gt;overall its a great game framework for beginners&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;my overall review is 8/10&lt;/p&gt;

&lt;p&gt;heres what i made: &lt;a href="https://github.com/scoopydevy/zelda-lua"&gt;https://github.com/scoopydevy/zelda-lua&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>gamedev</category>
      <category>github</category>
      <category>lua</category>
    </item>
    <item>
      <title>Bash script to make ECS Exec (aws ecs execute-command) useful</title>
      <author>yuki777</author>
      <pubDate>Mon, 08 Nov 2021 01:22:03 +0000</pubDate>
      <link>https://dev.to/yuki777/bash-script-to-make-ecs-exec-aws-ecs-execute-command-useful-1lba</link>
      <guid>https://dev.to/yuki777/bash-script-to-make-ecs-exec-aws-ecs-execute-command-useful-1lba</guid>
      <description>&lt;p&gt;Translated from &lt;a href="https://qiita.com/yuki777/items/e7bcb80e32eca355ddac"&gt;qiita.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source"&gt;
  &lt;/a&gt;
  Source
&lt;/h2&gt;

&lt;p&gt;Bash script(&lt;a href="https://gist.github.com/yuki777/640cba3e0a68587c36165b8a87d25390"&gt;gist&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c"&gt;# Bash script to run ecs-exec on Amazon ECS Fargate containers.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Usage: See --help.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Installation: Download the script and `chmod u+x the script`.&lt;/span&gt;
&lt;span class="c"&gt;#  curl https://gist.githubusercontent.com/yuki777/640cba3e0a68587c36165b8a87d25390/raw/5bfa8242ba00ed336da76711d602e6df4f76a452/sssh -o sssh &amp;amp;&amp;amp; chmod u+x sssh&lt;/span&gt;
&lt;span class="c"&gt;#  ./sssh&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Prerequisites (validated)&lt;/span&gt;
&lt;span class="c"&gt;# - aws cli&lt;/span&gt;
&lt;span class="c"&gt;# - session-manager-plugin&lt;/span&gt;
&lt;span class="c"&gt;# - jq&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Special thanks to contributor&lt;/span&gt;
&lt;span class="c"&gt;# - leewc&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nt"&gt;-eu&lt;/span&gt;

selectProfile&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="c"&gt;# profile parameter not supplied.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;+x&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c"&gt;# only works with AWS CLIv2.&lt;/span&gt;
        &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;aws configure list-profiles&lt;span class="sb"&gt;`&lt;/span&gt;
        &lt;span class="k"&gt;do
            &lt;/span&gt;&lt;span class="nb"&gt;break
        &lt;/span&gt;&lt;span class="k"&gt;done
        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
    &lt;span class="k"&gt;else
        &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$profile&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

params&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;profileParam&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;regionParam&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

profileParam&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$profile&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"--profile &lt;/span&gt;&lt;span class="nv"&gt;$profile&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

regionParam&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$region&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"--region &lt;/span&gt;&lt;span class="nv"&gt;$region&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

selectCluster&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;aws ecs list-clusters &lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt;|jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;".clusterArns[]"&lt;/span&gt;|sort|cut &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; 2&lt;span class="si"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;break
    &lt;/span&gt;&lt;span class="k"&gt;done
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

selectService&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;aws ecs list-services &lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--cluster&lt;/span&gt; &lt;span class="nv"&gt;$cluster&lt;/span&gt;|jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;".serviceArns[]"&lt;/span&gt;|sort&lt;span class="si"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;break
    &lt;/span&gt;&lt;span class="k"&gt;done
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

selectTask&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;aws ecs list-tasks &lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--cluster&lt;/span&gt; &lt;span class="nv"&gt;$cluster&lt;/span&gt; &lt;span class="nt"&gt;--service-name&lt;/span&gt; &lt;span class="nv"&gt;$service&lt;/span&gt; &lt;span class="nt"&gt;--desired-status&lt;/span&gt; RUNNING |jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s1"&gt;'.taskArns[]'&lt;/span&gt;|sort&lt;span class="si"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;break
    &lt;/span&gt;&lt;span class="k"&gt;done
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

selectContainer&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;select &lt;/span&gt;selected &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;aws ecs describe-tasks &lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--cluster&lt;/span&gt; &lt;span class="nv"&gt;$cluster&lt;/span&gt; &lt;span class="nt"&gt;--tasks&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt; | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="s2"&gt;".tasks[].containers[].name"&lt;/span&gt;|sort&lt;span class="si"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do
        &lt;/span&gt;&lt;span class="nb"&gt;break
    &lt;/span&gt;&lt;span class="k"&gt;done
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$selected&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

colorEcho&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nv"&gt;red&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[0;31m'&lt;/span&gt;
    &lt;span class="nv"&gt;green&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[0;32m'&lt;/span&gt;
    &lt;span class="nv"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[0;33m'&lt;/span&gt;
    &lt;span class="nv"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\033[0m'&lt;/span&gt;

    &lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; | egrep &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="s2"&gt;"prd|prod|production"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$red&lt;/span&gt;
    &lt;span class="k"&gt;elif &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt; | egrep &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="s2"&gt;"stg|stage|staging|beta|devo"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$yellow&lt;/span&gt;
    &lt;span class="k"&gt;else
        &lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$green&lt;/span&gt;
    &lt;span class="k"&gt;fi

    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;color&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;reset&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

echo_stderr&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;amp;2
&lt;span class="o"&gt;}&lt;/span&gt;

die&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    echo_stderr &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="o"&gt;}&lt;/span&gt;

validatePrereq&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; jq  &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; die &lt;span class="s2"&gt;"jq not installed on host. Please install jq. See https://stedolan.github.io/jq/download/"&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; session-manager-plugin &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; die &lt;span class="s2"&gt;"session-manager-plugin not installed. See https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; aws &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; die &lt;span class="s2"&gt;"AWS CLI not found, AWS CLI version 1.16.12 or later must be installed. See https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"&lt;/span&gt;
    &lt;span class="c"&gt;# Checks if AWS CLI is outdated or not., v1 of AWS CLI pipes to std error, redirect&lt;/span&gt;
    &lt;span class="nv"&gt;AWS_CLI_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;aws &lt;span class="nt"&gt;--version&lt;/span&gt; 2&amp;gt;&amp;amp;1 | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;'{ print $1 }'&lt;/span&gt; | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;/ &lt;span class="nt"&gt;-f2&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
    echo_stderr &lt;span class="s2"&gt;"You have AWS CLI v&lt;/span&gt;&lt;span class="nv"&gt;$AWS_CLI_VERSION&lt;/span&gt;&lt;span class="s2"&gt; installed."&lt;/span&gt;
    &lt;span class="c"&gt;# Do a best effort check for v1 (so that it's at least 1.10 and up.&lt;/span&gt;
    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$AWS_CLI_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^1.1[0-9] &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$AWS_CLI_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^2 &lt;span class="o"&gt;]]&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; die &lt;span class="s2"&gt;"AWS CLI version 1.16.12 or later must be installed to support ecs-exec, Run 'aws --version' to see what you have. See https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;print_help&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;amp;2 &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;END&lt;/span&gt;&lt;span class="sh"&gt;

This script simplifies the process of getting the required information to drop into an
interactive shell script on your container hosted on Fargate/ECS.

Example:

./sssh --region us-west-2
./sssh --profile default

Supported input parameters:
 -r | --region  : AWS Region to fetch the cluster, service, task
 -p | --profile : AWS Profile for credentials and region.
 -c | --command : Command to execute, defaults to '/bin/sh'/

The default command executed on the selected container is '/bin/sh'.
If a region is not provided, the script will attempt to use your region set in the profile.
If you want to execute a different command or shell, you can pass it in like so:

./sssh --command '/bin/bash'

You need active (unexpired) AWS credentials, otherwise, the script will crash.

Updates on https://gist.githubusercontent.com/leewc/e4c3a16551b06c2b0b4640fa5a3d9c00
&lt;/span&gt;&lt;span class="no"&gt;
END
&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

main&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/bin/sh'&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"$#"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; 0 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
        case&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="nt"&gt;-h&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;--help&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                print_help
                &lt;span class="nb"&gt;exit&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="nt"&gt;-r&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;--region&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;shift
                &lt;/span&gt;&lt;span class="nv"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;:?Region&lt;span class="p"&gt; must be specified in --region&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="nb"&gt;shift&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="nt"&gt;-p&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;--profile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;shift
                &lt;/span&gt;&lt;span class="nv"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;:?Profile&lt;span class="p"&gt; must be specified in --profile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="nb"&gt;shift&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="nt"&gt;-c&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="nt"&gt;--command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;shift
                command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;:?Command&lt;span class="p"&gt; must be specified in --command&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="nb"&gt;shift&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
            &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                die &lt;span class="s2"&gt;"Unknown param &lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;;;&lt;/span&gt;
        &lt;span class="k"&gt;esac&lt;/span&gt;
    &lt;span class="k"&gt;done

    &lt;/span&gt;echo_stderr &lt;span class="s2"&gt;"Validating pre-requisites...."&lt;/span&gt;
    validatePrereq

    &lt;span class="c"&gt;# spaces matter :)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$AWS_CLI_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ ^2 &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;echo_stderr &lt;span class="s2"&gt;"Select AWS Profile."&lt;/span&gt;
        &lt;span class="nv"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectProfile&lt;span class="sb"&gt;`&lt;/span&gt;
        colorEcho profile: &lt;span class="nv"&gt;$profile&lt;/span&gt;
    &lt;span class="k"&gt;else &lt;/span&gt;echo_stderr &lt;span class="s2"&gt;"[INFO] AWS CLI is not v2, unable to select profile. --region or --profile must be set."&lt;/span&gt;
    &lt;span class="k"&gt;fi
    &lt;/span&gt;echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Select cluster."&lt;/span&gt;
    &lt;span class="nv"&gt;cluster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectCluster&lt;span class="sb"&gt;`&lt;/span&gt;
    colorEcho cluster: &lt;span class="nv"&gt;$cluster&lt;/span&gt;
    echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Select service."&lt;/span&gt;
    &lt;span class="nv"&gt;service&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectService&lt;span class="sb"&gt;`&lt;/span&gt;
    colorEcho service: &lt;span class="nv"&gt;$service&lt;/span&gt;
    echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Select task."&lt;/span&gt;
    &lt;span class="nv"&gt;task&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectTask&lt;span class="sb"&gt;`&lt;/span&gt;
    colorEcho task: &lt;span class="nv"&gt;$task&lt;/span&gt;
    echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Select container."&lt;/span&gt;
    &lt;span class="nv"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;selectContainer&lt;span class="sb"&gt;`&lt;/span&gt;
    colorEcho container: &lt;span class="nv"&gt;$container&lt;/span&gt;
    echo_stderr

    echo_stderr &lt;span class="s2"&gt;"Executing command (you might have to upgrade your AWS CLI if this fails)"&lt;/span&gt;
    &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"aws ecs execute-command &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;params&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; --cluster &lt;/span&gt;&lt;span class="nv"&gt;$cluster&lt;/span&gt;&lt;span class="s2"&gt; --container &lt;/span&gt;&lt;span class="nv"&gt;$container&lt;/span&gt;&lt;span class="s2"&gt; --task &lt;/span&gt;&lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="s2"&gt; --interactive --command '&lt;/span&gt;&lt;span class="nv"&gt;$command&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;
    colorEcho &lt;span class="nv"&gt;$cmd&lt;/span&gt;

    &lt;span class="nv"&gt;$cmd&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Execute main function and pass all params over&lt;/span&gt;
main &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download it, save it any name you like, `chmod` it.&lt;/span&gt;
curl https://gist.githubusercontent.com/yuki777/640cba3e0a68587c36165b8a87d25390/raw/5bfa8242ba00ed336da76711d602e6df4f76a452/sssh &lt;span class="nt"&gt;-o&lt;/span&gt; sssh
&lt;span class="nb"&gt;chmod &lt;/span&gt;744 sssh
./sssh

&lt;span class="c"&gt;# Select aws profile from `aws configure list-profiles`&lt;/span&gt;
Select aws profile.
1&lt;span class="o"&gt;)&lt;/span&gt; default
2&lt;span class="o"&gt;)&lt;/span&gt; foo-bar
&lt;span class="c"&gt;#? 2&lt;/span&gt;
profile: foo-bar

&lt;span class="c"&gt;# Select cluster from `aws ecs list-clusters`&lt;/span&gt;
Select cluster.
1&lt;span class="o"&gt;)&lt;/span&gt; dev-foo-bar-cluster          9&lt;span class="o"&gt;)&lt;/span&gt; prod-foo-app-cluster
2&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-hoge-ad-cluster      10&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-app-cluster
3&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-hoge-cluster         11&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-hoge-cluster
4&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-piyo2021-ad-cluster  12&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-piyo2021-cluster
5&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-piyo2021-cluster     13&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-bar-cluster
6&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-bar-ad-cluster       14&lt;span class="o"&gt;)&lt;/span&gt; stg-foo-tags-cluster
7&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-bar-cluster          15&lt;span class="o"&gt;)&lt;/span&gt; hoge-foo-bar-cluster
8&lt;span class="o"&gt;)&lt;/span&gt; prd-foo-tags-cluster
&lt;span class="c"&gt;#? 1&lt;/span&gt;
cluster: dev-foo-bar-cluster

&lt;span class="c"&gt;# Select service from `aws ecs list-services`&lt;/span&gt;
 1&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1125-service
 2&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1206-service
 3&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1249-service
 4&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1275-service
 5&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1323-service
 6&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1348-service
 7&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1349-service
 8&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1384-service
 9&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1386-service
10&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1391-service
11&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1397-service
12&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1399-service
13&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1412-service
14&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1413-service
15&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1419-service
16&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-qa-1420-service
17&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-service
&lt;span class="c"&gt;#? 16&lt;/span&gt;
service: arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:service/dev-foo-bar-cluster/dev-foo-bar-qa-1420-service

&lt;span class="c"&gt;# Select task from `aws ecs list-tasks`&lt;/span&gt;
1&lt;span class="o"&gt;)&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:task/dev-foo-bar-cluster/&lt;span class="k"&gt;********************************&lt;/span&gt;
&lt;span class="c"&gt;#? 1&lt;/span&gt;
task: arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:task/dev-foo-bar-cluster/&lt;span class="k"&gt;********************************&lt;/span&gt;

&lt;span class="c"&gt;# Select container from `aws ecs describe-tasks`&lt;/span&gt;
1&lt;span class="o"&gt;)&lt;/span&gt; container-foo
2&lt;span class="o"&gt;)&lt;/span&gt; container-bar
3&lt;span class="o"&gt;)&lt;/span&gt; container-hoge
4&lt;span class="o"&gt;)&lt;/span&gt; container-piyo
&lt;span class="c"&gt;#? 1&lt;/span&gt;
container: container-foo

&lt;span class="c"&gt;# Show command&lt;/span&gt;
aws ecs execute-command &lt;span class="nt"&gt;--profile&lt;/span&gt; foo-bar &lt;span class="nt"&gt;--cluster&lt;/span&gt; dev-foo-bar-cluster &lt;span class="nt"&gt;--container&lt;/span&gt; container-foo &lt;span class="nt"&gt;--task&lt;/span&gt; arn:aws:ecs:ap-northeast-1:&lt;span class="k"&gt;************&lt;/span&gt;:task/dev-foo-bar-cluster/&lt;span class="k"&gt;********************************&lt;/span&gt; &lt;span class="nt"&gt;--interactive&lt;/span&gt; &lt;span class="nt"&gt;--command&lt;/span&gt; &lt;span class="s1"&gt;'/bin/sh'&lt;/span&gt;

The Session Manager plugin was installed successfully. Use the AWS CLI to start a session.

&lt;span class="c"&gt;# Start your session and run command from `aws ecs execute-command`&lt;/span&gt;
Starting session with SessionId: ecs-execute-command-&lt;span class="k"&gt;*****************&lt;/span&gt;
/path/to/home &lt;span class="c"&gt;# :)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>What were your favourite GitHub Universe moments? Here's mine</title>
      <author>Michelle Mannering</author>
      <pubDate>Mon, 08 Nov 2021 01:19:09 +0000</pubDate>
      <link>https://dev.to/github/what-were-your-favourite-github-universe-moments-heres-mine-25fi</link>
      <guid>https://dev.to/github/what-were-your-favourite-github-universe-moments-heres-mine-25fi</guid>
      <description>&lt;p&gt;GitHub Universe is now finished. What were your favourite moments? If you missed our post on all things Universe, check it out.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/github" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pM6fmKzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7fGFlBNG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2575/3da37f64-b46e-4fa5-bf86-01b63ba5f57b.png" alt="GitHub" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Rph_F4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ak56TdXS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/397557/4eb4ece3-2832-407c-b933-f1b4b58829e6.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/github/what-you-missed-at-github-universe-the-latest-feature-announcements-190l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What you missed at GitHub Universe, the latest feature announcements&lt;/h2&gt;
      &lt;h3&gt;Michelle Mannering for GitHub ・ Oct 29 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#product&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;If you haven't already, read all the cool announcements we made, and let us know your favourites. We had our &lt;a href="https://www.twitch.tv/videos/1189130769"&gt;APAC Watch parties&lt;/a&gt; and we loved all the things we saw.&lt;/p&gt;

&lt;p&gt;Here's my top announcements, as well as a few other awesome moments from GitHub Universe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codespaces"&gt;
  &lt;/a&gt;
  Codespaces
&lt;/h2&gt;

&lt;p&gt;I love the fact anyone can open Codespaces on their computer, laptop, iPad, phone, even a Tesla, and deploy fixes. I can do this anytime, anywhere in the world (as long as I have an internet connection). All my dependencies are added, and I can still use my VS Code settings. This has been a game changer for our team who works all over the world.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sX1KpLZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FDILcrGX0AcnAqc.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8p_8E6Z1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1410632439370641409/Pt-7RucE_normal.jpg" alt="Visual Studio Code profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Visual Studio Code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @code
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Check out what's new with Codespaces and how to more easily set it up for you and your team in this video from @GitHub Universe–with @2percentsilk and &lt;a href="https://twitter.com/notbaileybrooks"&gt;@notbaileybrooks&lt;/a&gt;&lt;br&gt;Watch now 👉 &lt;a href="https://t.co/c4DbxQ4S3P"&gt;youtube.com/watch?v=X9Z-rU…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:20 PM - 01 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1455238220237754374" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1455238220237754374" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1455238220237754374" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#copilot"&gt;
  &lt;/a&gt;
  Copilot
&lt;/h2&gt;

&lt;p&gt;GitHub Copilot has been an incredible asset in my coding journey. Copilot makes suggestions to my code on what I should include next, and even helps me write whole functions. It's super useful when starting out, or, if you're like me, and still learning along the way.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8JjVNFc2kK4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-github-issues"&gt;
  &lt;/a&gt;
  New GitHub Issues
&lt;/h2&gt;

&lt;p&gt;We've been using the new GitHub Issues for a while and they have been amazing. It's been great using the new project boards and tables, and being able to convert tasks to Issues. We've been tracking project ideas and building lists of things we might like to do in future. Once we're ready to put a list item into action, we convert it into an Issue and we're off planning.&lt;/p&gt;

&lt;p&gt;It's definitely a game changer for project planning!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ha1KHcPMAEk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-discussions"&gt;
  &lt;/a&gt;
  GitHub Discussions
&lt;/h2&gt;

&lt;p&gt;Discussions are a loved feature among the community. Maintainers use them to connect to their contributors, and many others use Discussions to collect ideas. The new features added to Discussions such as labels and announcements is something we've been using on a number of our repos. I can't wait until polls are implemented! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#papercuts"&gt;
  &lt;/a&gt;
  Papercuts
&lt;/h2&gt;

&lt;p&gt;There's never a GitHub Universe without announcing several changes to help make all our lives easier. The new table of contents to help navigate markdown files makes my life a whole lot better. I'm always looking at READMEs, and being able to navigate them easily is so useful.&lt;/p&gt;

&lt;p&gt;Being able to copy large pieces of code is perfect when looking through tutorials. And navigating the GitHub web got a whole lot easier with the Command Palette. I'll be pressing CTRL+K (yes I use Windows) all the time now!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-goodies-from-universe"&gt;
  &lt;/a&gt;
  Other Goodies from Universe
&lt;/h2&gt;

&lt;p&gt;It wouldn't be a GitHub Universe without a few other goodies. Whilst these aren't major feature announcements, these are all amazing things happening in the developer community and relevant to developers. Here's my favourites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#devops"&gt;
  &lt;/a&gt;
  DevOps
&lt;/h3&gt;

&lt;p&gt;This &lt;em&gt;What is DevOps&lt;/em&gt; video by &lt;a href="https://twitter.com/editingemily"&gt;Emily Freeman&lt;/a&gt; is epic! There's a lot of Easter eggs in this one, plus quirky analogies. This video (shown on Day 2 of Universe) certainly gave us a lot of laughs.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kBV8gPVZNEE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-depends"&gt;
  &lt;/a&gt;
  It Depends
&lt;/h3&gt;

&lt;p&gt;One of our GitHub Stars, &lt;a href="https://twitter.com/cassidoo"&gt;Cassidy Williams&lt;/a&gt;, did an awesome video for Universe. She went back in time and spoke to her younger self. The catch, "it depends". Sadly (or luckily), most things in life 'depend' on something else. This funny and loveable interaction had us all laughing, and resonating!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aMWh2uLO9OM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Fun fact, this one was filmed in one of the meeting rooms at GitHub. Yes, this is an actual room which exists... for meetings!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#djs-and-coding"&gt;
  &lt;/a&gt;
  DJs and coding
&lt;/h3&gt;

&lt;p&gt;At our last two Universe events, we've been lucky enough to have live performances from some DJ-coding extraordinaires. This year was no different. We had some amazing music produced for all our entertainment. Check out one of these awesome sets by DJ Dave.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JDxhkdm_t1U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-universe"&gt;
  &lt;/a&gt;
  GitHub Universe
&lt;/h2&gt;

&lt;p&gt;You'll find plenty more videos, cuts, and the full Universe live streams on our &lt;a href="https://www.youtube.com/channel/UC7c3Kb6jYCRj4JOHHZTxKsQ"&gt;GitHub YouTube channel&lt;/a&gt;. There are more being added, so make sure you like and subscribe so you don't miss out.&lt;/p&gt;

&lt;p&gt;What was your favourite Universe moment or feature announcement?&lt;/p&gt;

</description>
      <category>event</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Top 10 Smart Contract &amp; Solidity Developer Learning Resources </title>
      <author>Patrick Collins</author>
      <pubDate>Mon, 08 Nov 2021 01:04:39 +0000</pubDate>
      <link>https://dev.to/patrickalphac/top-10-smart-contract-solidity-developer-learning-resources-46db</link>
      <guid>https://dev.to/patrickalphac/top-10-smart-contract-solidity-developer-learning-resources-46db</guid>
      <description>&lt;p&gt;Learning to &lt;a href="https://betterprogramming.pub/how-to-become-a-blockchain-engineer-fa4386a0504f"&gt;become a Smart Contract and Blockchain Developer&lt;/a&gt; can seem like a daunting task, but it doesn't have to be!&lt;/p&gt;

&lt;p&gt;Just set aside some time each week, and get cracking on any of the tutorials and pieces of content below. Don't be afraid to ask a ton of questions, and don't feel imposter syndrome! Just by reading this article, you are already a welcomed member of the blockchain community. &lt;/p&gt;

&lt;p&gt;If anytime you get stuck, feel free to refer to &lt;a href="https://docs.chain.link/docs/getting-help/"&gt;this document&lt;/a&gt; on how to get unstuck in the blockchain space. It applies to everything in open source!&lt;/p&gt;

&lt;p&gt;In any case, let's go ahead and get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-solidity-blockchain-and-smart-contract-course-beginner-to-expert-python-tutorial"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.youtube.com/watch?v=M576WGiDBdQ"&gt;Solidity, Blockchain, and Smart Contract Course – Beginner to Expert Python Tutorial&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/M576WGiDBdQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now I'm a bit biased here, since I made this course! But I must say, it has everything you need. It goes through all the basics at the start, and then gets deeper and deeper into more and more advanced concepts like upgradeability, efficient testing, full stack development, and more. It's a project based learning resource, so at the end of each "lesson", you'll have a full project you can show off on your GitHub!&lt;/p&gt;

&lt;p&gt;Ideally it's for engineers who have a little bit of python in their back pocket, but &lt;a href="https://www.youtube.com/watch?v=rfscVS0vtbw"&gt;freecodecamp has a remedy for that&lt;/a&gt; as well! &lt;/p&gt;

&lt;p&gt;A lot of information is packed into this course, so don't do it all in one go! Remember to take breaks, and jump into the &lt;a href="https://github.com/smartcontractkit/full-blockchain-solidity-course-py"&gt;GitHub discussions&lt;/a&gt; and ask questions, or on Stack Overflow! This is easily one of, if not the most dense blockchain tutorial on the planet. &lt;/p&gt;

&lt;p&gt;Oh, and I have a javascript version on the distant horizon. Be sure to follow me on &lt;a href="https://twitter.com/PatrickAlphaC"&gt;Twitter&lt;/a&gt; and &lt;a href="https://medium.com/@patrick.collins_58673"&gt;Medium&lt;/a&gt; for updates!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-cryptozombies"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://cryptozombies.io/"&gt;Cryptozombies&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cryptozombies.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bxFmQJfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yntxcg2yqgskf21bh10p.png" alt="Cryptozombies" width="880" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the longest time, Cryptozombies has been one of the go-to courses for learning blockchain &amp;amp; solidity. This gamified platform brings you step by step through solidity programming as you build your zombie army!&lt;/p&gt;

&lt;p&gt;This course has a wonderful user interface that's fun for people of any age, and is one of the most approachable content on this list. The Cryptozombies team does a tremendous job showing NFTs, inheritance, and everything you'd need in basic solidity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dapp-university"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://www.youtube.com/watch?v=XLahq4qyors"&gt;Dapp University&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XLahq4qyors"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;YouTube university strikes again! Gregory has been making top quality content in the blockchain space for years now, and continues to do so. With a focus on both solidity / smart contracts and full stack development, taking his videos and his more hands-on bootcamp will for sure turn you into a "blockchain master". &lt;/p&gt;

&lt;p&gt;He has tons of videos on his youtube that can help you learn just about anything in this space, as well as a paid for bootcamp with him and his team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-chainshot"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.chainshot.com/courses"&gt;Chainshot&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.chainshot.com/courses"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRwsD_Po--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndmnx3w8xgm8b7ja8pvl.png" alt="Chainshot Website Homepage" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chainshot has everything you need, javascript tutorials, solidity tutorials, DeFi tutorials with &lt;a href="https://aave.com/"&gt;Aave&lt;/a&gt; and one of the best bootcamps this space has ever seen. &lt;/p&gt;

&lt;p&gt;Not only does Chainshot have self-paced courses, but they also have an on-hands bootcamp. Bootcamps are important for people who want to have that hands-on guided learning, and can be the difference in having "it all make sense". I highly recommend checking out their bootcamps if you want to take it another step. This team is incredibly knowledgeable about this space, and are an incredibly talented team at teaching people how to get their careers going in the blockchain world. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-consensys-bootcamp"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://consensys.net/academy/bootcamp/"&gt;Consensys Bootcamp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://consensys.net/academy/bootcamp/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jrVfT1EU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9q46322og0w2kcug6k67.png" alt="Consensys Bootcamp Webpage" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is another bootcamp that just always knocks it out of the park. &lt;/p&gt;

&lt;p&gt;The Consensys team is one of the teams that has been around from basically the start of this whole thing. They consistently deliver on bringing in some of the best in the space to give guest lectures to the students, have top quality content, and are another bootcamp that I highly recommend to anyone looking to get into this space with a hands-on learning approach, and a team to guide them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-ivan-on-tech-moralis"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.youtube.com/channel/UCgWS9Q3P5AxCWyQLT2kQhBw"&gt;Ivan On Tech / Moralis&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/txHnWDRB728"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCrYmtJBtLdtm2ov84ulV-yg"&gt;Ivan on Tech&lt;/a&gt; and his team at &lt;a href="https://moralis.io/"&gt;Moralis&lt;/a&gt; have just about everything.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://academy.moralis.io/"&gt;Moralis Academy&lt;/a&gt; | Blockchain courses&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://moralis.io/"&gt;Moralis&lt;/a&gt; | A tool designed for end-to-end Dapp building&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCgWS9Q3P5AxCWyQLT2kQhBw"&gt;YouTube Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Moralis team helps engineers do and learn everything under the sun when it comes to full stack development in blockchain. The focus a little less on the solidity and smart contract implementations, but they focus a lot on user experience so once you build your smart contracts, others can interact with them. Moralis is a must know tool for people looking to do anything in the blockchain space for full stack.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-ethernaut"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://ethernaut.openzeppelin.com/"&gt;Ethernaut&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ethernaut.openzeppelin.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VGian2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9g2jscu08ooydg5f1or.png" alt="Ethernaut Home Page" width="880" height="566"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the harder pieces in this space is Ethernaut. You need a little bit of a javascript background, but trudging your way through this course will teach you a lot of the ins and outs and "gotchas" of solidity, and is one of the quickest ways to become "advanced" in the ways of solidity. &lt;/p&gt;

&lt;p&gt;This was created by the &lt;a href="https://openzeppelin.com/"&gt;Openzeppelin&lt;/a&gt; team, who are top auditors and security researchers in the blockchain space, and they make contracts for people to fork into their own projects. Anyone in the blockchain space worth their "salt" knows who Openzeppelin is and how to work with their tools!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-the-ethereum-org-list"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://ethereum.org/en/developers/learning-tools/"&gt;The Ethereum Org List&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ethereum.org/en/developers/learning-tools/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Et_CK5j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pandr9ci7fz3kkwdtmzq.png" alt="Ethereum Org Site" width="880" height="943"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What better way to learn about web3 and Ethereum than from the community itself! &lt;/p&gt;

&lt;p&gt;The Ethereum org website is JAM packed with content, tutorials, and submissions from around the globe, in exactly the manner you'd expect. You can find just about anything here to &lt;a href="https://ethereum.org/en/developers/tutorials/"&gt;learn and grow&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-useweb3"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://www.useweb3.xyz/"&gt;useWeb3&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.useweb3.xyz/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1am5msz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqsioftnx9v1pt4ej77f.png" alt="useWeb3 Homepage" width="880" height="577"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;useWeb3, like the Ethereum org website, is dedicated to being a living document of updated courses and content to teach people how to build in the blockchain space. &lt;/p&gt;

&lt;p&gt;This open sourced project is constantly updated, and really any of the projects listed on their site is worthwhile for you to check and and put to the test!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-there-are-so-many"&gt;
  &lt;/a&gt;
  10. There are so many!!
&lt;/h2&gt;

&lt;p&gt;Ok, so I fibbed, this article has way more than just 10!!! Here is a list of tons of different places you can get started learning solidity, smart contracts, and blockchain. It doesn't matter where you go, just pick one, and go!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://eattheblocks.com/"&gt;EatTheBlocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chain.link/bootcamp"&gt;Chainlink Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCn-3f8tw_E1jZvhuHatROwA"&gt;Patrick Collins&lt;/a&gt; (That's me!)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/austingriffith"&gt;Austin Griffith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/boyindasouth"&gt;Nader Dabit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buildspace.so/"&gt;Buildspace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learnxinyminutes.com/docs/solidity/"&gt;Learn X in Y Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://remix.ethereum.org/"&gt;Remix with Learn ETH Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so much more.&lt;/p&gt;

&lt;p&gt;Well, as always, be sure to follow me on &lt;a href="https://twitter.com/PatrickAlphaC"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCn-3f8tw_E1jZvhuHatROwA"&gt;YouTube&lt;/a&gt;, &lt;a href="https://medium.com/@patrick.collins_58673"&gt;Medium&lt;/a&gt;, and &lt;a href="https://github.com/PatrickAlphaC"&gt;GitHub&lt;/a&gt;, and I hope to see you in the community!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>programming</category>
      <category>solidity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>100 días de código: 4 y 5, a veces los días son mas ocupados de lo que crees.</title>
      <author>Daro</author>
      <pubDate>Mon, 08 Nov 2021 00:49:39 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-4-y-5-a-veces-los-dias-son-mas-ocupados-de-lo-que-crees-4go3</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-4-y-5-a-veces-los-dias-son-mas-ocupados-de-lo-que-crees-4go3</guid>
      <description>&lt;p&gt;¡Hey hey hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a este nuevo blog despues de haberme saltado un día, he descubierto que a veces tengo el día demasiado ocupado. Apenas me pude permitir 4 horas de mi tiempo para codificar en estos dos días!!!! y eso para mi es una tragedia ya que es mi actividad favorita. &lt;/p&gt;

&lt;p&gt;Ahora volvamos al pasado para contarles el día de ayer...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkUj2mWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg630sftmqoxayma6ylt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkUj2mWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg630sftmqoxayma6ylt.jpg" alt="delorean" width="640" height="640"&gt;&lt;/a&gt;&lt;br&gt;
Photo by &lt;a href="https://unsplash.com/@deloreanrental?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Delorean Rental&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/back-to-the-future?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Diseñe algunos componentes de la interfaz móvil de mi portfolio.&lt;/li&gt;
&lt;li&gt;Aprendí que en diseño normalmente se crean paletas de color y de esas paletas se obtienen distintos tintes y sombras de cada color de la paleta. &lt;/li&gt;
&lt;li&gt;Aprendí las leyes de Gestalt las cuales son: Ley de figura y fondo, de semejanza, de proximidad, de la continuidad, de simetría o dirección común, de la simplicidad y ley de la continuidad.&lt;/li&gt;
&lt;li&gt;Aprendí a crear un servidor y a ejecutarlo en desarrollo.&lt;/li&gt;
&lt;li&gt;Aprendí las peticiones &lt;code&gt;http&lt;/code&gt; como son &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt; y &lt;code&gt;delete&lt;/code&gt; con express en un servidor de nodejs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Aprendí los códigos de estado de respuesta se agrupan por números de los cuales 

&lt;ul&gt;
&lt;li&gt;Las respuestas informativas van del código 100 al 199.&lt;/li&gt;
&lt;li&gt;Las respuestas satisfactorias van del 200 al 299.&lt;/li&gt;
&lt;li&gt;Las respuestas de redirección van 300 al 399.&lt;/li&gt;
&lt;li&gt;Las respuestas de error del cliente van del 400 al 499.&lt;/li&gt;
&lt;li&gt;Las respuestas de error de servidor van del 500 al 599.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Comencé a realizar pruebas de funciones asíncronas en una api backend.&lt;/li&gt;
&lt;li&gt;Obtener los parámetros de ruta personalizados y aprender el uso de los middlewares en el backend con nodejs y express.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora si regresemos al día de hoy...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmcVJHK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckmc1gu0uli0mhny7yq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmcVJHK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ckmc1gu0uli0mhny7yq.jpg" alt="meme back to the future" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No mencionare lo de ayer porque directamente esta en la parte de arriba 👆 pero si lo que realice...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Termine el diseño de mi pagina web en móvil y en Tablet.&lt;/li&gt;
&lt;li&gt;Aumente mi puntuación en &lt;em&gt;Problem solving&lt;/em&gt; en HackerRank.&lt;/li&gt;
&lt;li&gt;Comencé a ver algunos frameworks de Css tailwind, SASS, Foundation, Bulma y SemanticUI.&lt;/li&gt;
&lt;li&gt;Aprendí que Tailwind Css solo se puede instalar en &lt;code&gt;Nextjs&lt;/code&gt;, &lt;code&gt;Vuejs&lt;/code&gt;, &lt;code&gt;Laravel&lt;/code&gt;, &lt;code&gt;Nuxtjs&lt;/code&gt; &lt;code&gt;React&lt;/code&gt; y &lt;code&gt;Gatsby&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También comprendí despues de estos días que hay que establecer una serie de metas en el desarrollo semanales o mensuales para realizar un seguimiento del uso del tiempo asi que mañana comenzare con una planeación para la semana. &lt;/p&gt;

&lt;p&gt;¡Que tengan un gran día o noche y mucho éxito con sus proyectos!&lt;br&gt;
No olviden sonreír y es todo, hasta mañana.&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Day 2 of #100daysofcode: An exercise in React Modularity</title>
      <author>Ryan Whelchel</author>
      <pubDate>Mon, 08 Nov 2021 00:01:12 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-2-of-100daysofcode-an-exercise-in-react-modularity-252b</link>
      <guid>https://dev.to/rydwhelchel/day-2-of-100daysofcode-an-exercise-in-react-modularity-252b</guid>
      <description>&lt;p&gt;Life happens, so today will be a short post following a relatively short time period of practice today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todays-progress"&gt;
  &lt;/a&gt;
  Today's Progress
&lt;/h2&gt;

&lt;p&gt;Following yesterdays post, I used my time today to focus on learning more about how to be more modular in React and Javascript. You might recall that this project is the very first time I have been exposed to JS, let alone React... So my code was extremely ugly. &lt;/p&gt;

&lt;p&gt;I spent some free time today watching bits and pieces of the &lt;a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8"&gt;React JS Crash Course&lt;/a&gt; by Traversy Media. I would be shocked if you haven't seen or heard of it by now, but the tutorial lives up to its reputation. One of the best tutorials for any language or framework I have ever seen.&lt;/p&gt;

&lt;p&gt;I used what I learned to help shrink down and simplify the code in my project. I reduced the monstrous, main return statement of my &lt;code&gt;App.js&lt;/code&gt; from around 70 lines to just under 10. I also was able to move &lt;em&gt;all&lt;/em&gt; the state variables from &lt;code&gt;App.js&lt;/code&gt; to the relevant components. I still feel like I have too many state variables, but we're still making progress on cleaning up. &lt;/p&gt;

&lt;p&gt;Here's the results of my great Fall code-cleaning:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NHpSESoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ZdvXfFR/Screen-Shot-2021-11-07-at-6-50-25-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHpSESoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/ZdvXfFR/Screen-Shot-2021-11-07-at-6-50-25-PM.png" alt="Image displaying a shortened version of App.js" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrows-plans"&gt;
  &lt;/a&gt;
  Tomorrow's Plans
&lt;/h2&gt;

&lt;p&gt;I have more open time tomorrow, so barring any extraneous circumstances I will be making much more progress. Here's what is on the docket:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Re-review my components and see if any further simplification/modularization can be done&lt;/li&gt;
&lt;li&gt;Re-review my states, see if any states can be cleverly merged (I suspect that they can)&lt;/li&gt;
&lt;li&gt;Start digging on React-bootstrap and get to styling! Step 1 of this process will be finding a good way to split up the information into at least 2 columns&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations?
&lt;/h2&gt;

&lt;p&gt;As usual, I want to ask &lt;em&gt;you&lt;/em&gt; for your recommendations. I see that a lot you are very skilled at React and JS and I'd love to hear from you! If you have any suggested readings, tutorials, ideas for my project or journey, I'd love to hear about it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-and-suggested-readingwriting"&gt;
  &lt;/a&gt;
  Resources and Suggested Reading/Writing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=w7ejDZ8SWv8"&gt;React JS Crash Course 2021&lt;/a&gt;&lt;br&gt;
&lt;a href="https://react-bootstrap.github.io/"&gt;React-bootstrap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for today!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>python</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Week 11 Blog Post</title>
      <author>Francesca Ansell</author>
      <pubDate>Sun, 07 Nov 2021 22:45:47 +0000</pubDate>
      <link>https://dev.to/francescaansell/week-11-blog-post-76d</link>
      <guid>https://dev.to/francescaansell/week-11-blog-post-76d</guid>
      <description>&lt;p&gt;Time and money control everything in our lives. Have you ever thought about what you would do if neither where an issue? If I had the opportunity I would create an app to identify areas of need and direct supplies there. Now more than ever our healthcare industry is struggling to support the amount of people who need care, whether it be support with physical supplies or technologies to intake patient information. Often these 'supplies' are actually people like nurses. This application could help establish areas that need traveling nurses and connect potential employees there. In states of emergency hospitals could donate or sell extra equipment, ppe, etc. to hospitals in need. An application of this type would need multiple hospitals/facilities to adopt it for it to be useful. Or it could be used within networks of hospitals for example UPMC, or Allegany Health Network. I would not personally use this app but a company I work for in the future may use this app.  &lt;/p&gt;

&lt;p&gt;I have the programing skills, and knowledge of the healthcare industry to see this project through. I also have the user interface design, user experience, and software development life cycle skills. I know what areas of healthcare to target and the geographic areas that need the most attention, such as rural areas. I also have the leadership skills to identify what people, and resources are needed to make this app successful. &lt;/p&gt;

&lt;p&gt;I believe that technology has the power to improve the healthcare industry if used correctly. The most glaring issue now seems to be lack of communication between hospitals and doctor due to competition. Hospital administration often cares more about making money and bringing in new patients than perfecting the outcomes of their existing patients. Although this is not always true the bottom line is that hospitals need to make money to keep there doors open at all. &lt;/p&gt;

&lt;p&gt;I truly don't believe my life would drastically change if time and money where no issue. I would still want to be a UX/UI designer that works on the EHR system. Possibly I would pick a smaller, more patient oriented company that in the real world would offer less pay. If time where no issue I would be able to dedicate my life to my career and not have to worry about delegating my time for my family or friends.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>React Split Components: A new way of Function Components without Hooks</title>
      <author>南小北</author>
      <pubDate>Sun, 07 Nov 2021 22:30:53 +0000</pubDate>
      <link>https://dev.to/nanxiaobei/react-split-components-a-new-way-of-function-components-without-hooks-2aem</link>
      <guid>https://dev.to/nanxiaobei/react-split-components-a-new-way-of-function-components-without-hooks-2aem</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-the-problem-of-function-components-and-hooks"&gt;
  &lt;/a&gt;
  1. The Problem of Function Components and Hooks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Why Function Components?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why does React officially promote Functional Components? Class Components isn't "unusable".&lt;/p&gt;

&lt;p&gt;Because Functional Components are more in line with React's philosophy &lt;code&gt;UI = f(state)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So Hooks came, bringing "internal variables" and "side effects" to Function Components, making them fully functional. it's also a "logical sharing" solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. The problem of Function Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because every time the function is called, all the internal variables are created again, which is a bit wrong in the development intuition.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UI = f(state)&lt;/code&gt; looks like a pure function, pass &lt;code&gt;state&lt;/code&gt; and return &lt;code&gt;UI&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Like &lt;code&gt;rice = electricCooker(rice)&lt;/code&gt;, but if the &lt;code&gt;electricCooker&lt;/code&gt; rebuilds its "circuit system" every time it cooks, it's counter-intuitive.&lt;/p&gt;

&lt;p&gt;We hope that &lt;code&gt;f&lt;/code&gt; is simply "cooking", and other functions are already "carried" instead of "create" every time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. The problem of Hooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To solve the problem of re-creating variables, React provides &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useRef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;State needs to be created with &lt;code&gt;useState&lt;/code&gt;. For complex data types (function, array, object) passed to sub-components, use &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt; to wrap (for large calculations, use &lt;code&gt;useMemo&lt;/code&gt; too). To keep a variable, wrap it with &lt;code&gt;useRef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the implementation of &lt;code&gt;useEffect&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt; and &lt;code&gt;useMemo&lt;/code&gt;, there must be a thing called &lt;code&gt;deps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;All the above makes Hooks very counter-intuitive to write. Don't I just use a variable or a function, why do I have to wrap it?&lt;/p&gt;

&lt;p&gt;Can't write code like Svelte?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XIjSunVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s6.jpg.cm/2021/11/06/IjfqGp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIjSunVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s6.jpg.cm/2021/11/06/IjfqGp.jpg" alt="" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-solve-the-problem"&gt;
  &lt;/a&gt;
  2. Solve the Problem
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. The most intuitive &lt;code&gt;UI = f(state)&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. This is how React works:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. If the component needs to "carry" state and functions, instead of creating new ones each time, it cannot be written in the component:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Writing separately destroys the unity, which is not good. Is there a way to make the component hold external variables, and also write together in one function?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Naturally, we thought of closure (note that the component are returned internally):&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createDemo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDemo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simplified writing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;onClick&lt;/code&gt; function doesn't need to be wrapped with &lt;code&gt;useCallback&lt;/code&gt; because it will never be re-created. With closure, &lt;strong&gt;we successfully lifted the dependency on &lt;code&gt;useCallback&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So far, I'm actually finished... Huh? How to use this component?!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-make-abilities-complete"&gt;
  &lt;/a&gt;
  3. Make Abilities Complete
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Solve &lt;code&gt;useState&lt;/code&gt; and component update:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Public helper function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;setState&lt;/code&gt;, which is only in the component, is "re-assigned" to the external variable &lt;code&gt;render&lt;/code&gt; for use outside the component. If you need to update, manually call &lt;code&gt;render()&lt;/code&gt; (Of course, the function name is arbitrary, such as &lt;code&gt;update&lt;/code&gt;, here is the design pattern, there are no constraints on the specific implementation).&lt;/p&gt;

&lt;p&gt;As a result, &lt;strong&gt;we successfully lifted the dependency on &lt;code&gt;useState&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Above is already a usable component, try it here: &lt;a href="https://codesandbox.io/s/react-split-components-1-ycw80?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-1-ycw80&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Solve &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useRef&lt;/code&gt;, solve props:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;power&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// for useMemo&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// for useRef&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// "props" deconstruction must be written inside function,&lt;/span&gt;
    &lt;span class="c1"&gt;// because external initial value of "props" is undefined&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;power&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getPower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;countRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;props&lt;/code&gt; is passed out as "re-assignment" like &lt;code&gt;render&lt;/code&gt;. Then we think about it carefully: through closure, &lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useRef&lt;/code&gt; are actually no longer needed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useRef&lt;/code&gt; are because variables are created every time and need to be wrapped. With closure, variables won't be re-created, the component will naturally hold updated values of variables. All of these are the operating mechanism of JS, naturally.&lt;/p&gt;

&lt;p&gt;The calculation mechanism like computed of &lt;code&gt;useMemo&lt;/code&gt;, can be changed to manual trigger. Change declarative writing of &lt;code&gt;useMemo&lt;/code&gt;, to the imperative writing of "manual call", which is more intuitive (just like Class Components).&lt;/p&gt;

&lt;p&gt;Therefore, &lt;strong&gt;we successfully lifted the dependence on &lt;code&gt;useMemo&lt;/code&gt; and &lt;code&gt;useRef&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Try the above code here: &lt;a href="https://codesandbox.io/s/react-split-components-2-wl46b?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-2-wl46b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Solve &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useLayoutEffect&lt;/code&gt;:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Omit other code...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;layoutUpdated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLayoutUpdated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUpdated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;layoutUpdated&lt;/span&gt;&lt;span class="p"&gt;?.(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;layoutUpdated&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;?.(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;onUpdated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLayoutUpdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Omit other code...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;onUpdated&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLayoutUpdate&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;setLayoutUpdated&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;setUpdated&lt;/span&gt;&lt;span class="p"&gt;)(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onUpdated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Will be called in useEffect&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the existing &lt;code&gt;render&lt;/code&gt; function to implement &lt;code&gt;useEffect&lt;/code&gt;, which is more concise (of course you can add another function).&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;render()&lt;/code&gt; can be called directly, or passed in parameters &lt;code&gt;render(onUpdated, isLayoutUpdate)&lt;/code&gt;, &lt;code&gt;isLayoutUpdate&lt;/code&gt; determines &lt;code&gt;onUpdated&lt;/code&gt; called in &lt;code&gt;useEffect&lt;/code&gt; or &lt;code&gt;useLayoutEffect&lt;/code&gt;. Note: In theory &lt;code&gt;render&lt;/code&gt; can be called multiple times, but React only triggers one update, so if &lt;code&gt;onUpdated&lt;/code&gt; is passed in each time, only the last one will call.&lt;/p&gt;

&lt;p&gt;As a result, &lt;strong&gt;we successfully lifted the dependency on &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;useLayoutEffect&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Try it here: &lt;a href="https://codesandbox.io/s/react-split-components-3-zw6tk?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-3-zw6tk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Solve "useMount"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React components have a very basic requirement. Send API requests in didMount. After Hooks unified didMount and didUpdate to &lt;code&gt;useEffect&lt;/code&gt;, there was an additional step to understand this requirement, so "useMount" was implemented in countless projects.&lt;/p&gt;

&lt;p&gt;In the above scheme, external variables will be assigned after the first render of the component. This brings a problem: &lt;code&gt;render&lt;/code&gt; is only available after the first &lt;code&gt;useEffect&lt;/code&gt; (so the parameter is named as &lt;code&gt;onUpdated&lt;/code&gt;), then how to achieve "useMount"? Let's use the parameter of &lt;code&gt;useRender&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLayoutMount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Omit other code...&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;layoutMountedRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLayoutMount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mountedRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isLayoutMount&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;layoutMountedRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.(),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mountedRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.(),&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Omit other code...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, try it here: &lt;a href="https://codesandbox.io/s/react-split-components-4-y8hn8?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-4-y8hn8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Other Hooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far, we have solved &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useEffect&lt;/code&gt;, &lt;code&gt;useCallback&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, &lt;code&gt;useRef&lt;/code&gt;, &lt;code&gt;useLayoutEffect&lt;/code&gt;, these are the most commonly used in development. There are 4 remaining official Hooks: &lt;code&gt;useContext&lt;/code&gt;, &lt;code&gt;useReducer&lt;/code&gt;, &lt;code&gt;useImperativeHandle&lt;/code&gt;, &lt;code&gt;useDebugValue&lt;/code&gt;, I will not deal with them one by one.&lt;/p&gt;

&lt;p&gt;Make it simply: &lt;strong&gt;If a variable can only be obtained in the component, needs to be used outside, pass it out by re-assignment&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this design mode, any existing requirement can be realized, so-called "abilities complete".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-introducing-react-split-components-ric"&gt;
  &lt;/a&gt;
  4. Introducing React Split Components (RiC)
&lt;/h2&gt;

&lt;p&gt;Just like Higher-Order Components, this design pattern needs a name.&lt;/p&gt;

&lt;p&gt;Considering that closure splits "variables + logics" and "component code", learning the naming style of React Server Components, I named it &lt;strong&gt;React Split Components&lt;/strong&gt;, which can be abbreviated as &lt;strong&gt;RiC&lt;/strong&gt;, the small &lt;strong&gt;&lt;code&gt;i&lt;/code&gt;&lt;/strong&gt; here is a good expression of the "split" feature (Mainly after searching, I found that RSC, RPC, RLC, RTC are all occupied. Oh, the "split" has only 5 letters.).&lt;/p&gt;

&lt;p&gt;Features of React Split Components:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Remove the dependence on Hooks, but not purely Functional Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Through closure, no Hooks are required to wrap. This allows React developers to free themselves from the "counter-intuition of Functional Components" and "cumbersomeness of Hooks" and write pure JS intuitive code similar with Svelte.&lt;/p&gt;

&lt;p&gt;After all, closure is a natural feature of JS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Only at the writing level, no need for ESLint support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In fact, when designing the implementation of &lt;code&gt;useEffect&lt;/code&gt;, I thought of a way to use existing code: change &lt;code&gt;useEffect(fn, deps)&lt;/code&gt; to &lt;code&gt;watch(deps, fn)&lt;/code&gt;. But if like this, the &lt;code&gt;deps&lt;/code&gt; of &lt;code&gt;watch&lt;/code&gt; will need an ESLint plugin to support (because Hooks &lt;code&gt;deps&lt;/code&gt; needs plugin support, otherwise it will easy to make mistake).&lt;/p&gt;

&lt;p&gt;If not necessary, do not add entity. We want to achieve as natural as possible, as simple as possible, as intuitive as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Like High-Order Components, it's a "design pattern", not API, no lib needed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's not an official React API, doesn't need to be support by building tools (such as React Server Components).&lt;/p&gt;

&lt;p&gt;It doesn't need 3rd-party lib support (&lt;code&gt;useRender&lt;/code&gt; can be encapsulated to a npm package, but considering that everyone has different habits and needs, you can implement the helper function yourself, the above code can be a reference).&lt;/p&gt;

&lt;p&gt;React Split Components final code demo: &lt;a href="https://codesandbox.io/s/react-split-components-final-9ftjx?file=/src/App.js"&gt;codesandbox.io/s/react-split-components-final-9ftjx&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-hello-ric"&gt;
  &lt;/a&gt;
  5. Hello, RiC
&lt;/h2&gt;

&lt;p&gt;React Split Components (RiC) example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRender&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How Svelte, how intuitive, How performance is auto optimized and bye bye Hooks.&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/nanxiaobei/react-split-components"&gt;github.com/nanxiaobei/react-split-components&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Roadmap to learn Flutter Efficiently</title>
      <author>AasharWahla</author>
      <pubDate>Sun, 07 Nov 2021 22:12:33 +0000</pubDate>
      <link>https://dev.to/aasharwahla/roadmap-to-learn-flutter-efficiently-27l9</link>
      <guid>https://dev.to/aasharwahla/roadmap-to-learn-flutter-efficiently-27l9</guid>
      <description>&lt;p&gt;I am Aashar Wahla, a full-stack flutter developer. And I have been working with flutter for the better part of two and a half years. Recently I started to post some of my projects on GitHub and LinkedIn, where I have received a lot of queries. And almost ninety percent of them were related to how they can start their journey.&lt;/p&gt;

&lt;p&gt;If you are more of a visual learner, you can also see a video on the same topic on my &lt;a href="https://youtube.com/c/aasharwahla"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So in this blog, I will be sharing my suggestion on how you should learn flutter. I will like to mention here that this may not be the best method, but this is the one that worked for me.&lt;/p&gt;

&lt;p&gt;Let's start!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is Flutter?&lt;/strong&gt; You should know what you are getting yourself into. You should spend at least a day or two figuring out why you want to learn flutter in the first place. As this is not a tutorial I will not be telling you in detail, you will have to figure it out yourself.&lt;/p&gt;

&lt;p&gt;Now, after getting yourself motivated to learn flutter this is the part where you start the process of learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PART-1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So as you already know the flutter is a mobile development framework developed by Google, and it uses Dart language which is also developed by Google.&lt;/p&gt;

&lt;p&gt;The first step will be to get yourself to learn and understand dart.&lt;/p&gt;

&lt;p&gt;You will have to further divide this first step into three segments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Beginner&lt;/li&gt;
&lt;li&gt;  Intermediate&lt;/li&gt;
&lt;li&gt;  Advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's talk about things which you should cover in the beginner section of part 1:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  variables&lt;/li&gt;
&lt;li&gt;  Data types&lt;/li&gt;
&lt;li&gt;  And basic data structures like arrays&lt;/li&gt;
&lt;li&gt;  Operators (logical and arithmetic)&lt;/li&gt;
&lt;li&gt;  Conditional statement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we will move to the second section (intermediate)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Functions (define, call, return type, parameters)&lt;/li&gt;
&lt;li&gt;  Nested Functions&lt;/li&gt;
&lt;li&gt;  Classes&lt;/li&gt;
&lt;li&gt;  Constructor&lt;/li&gt;
&lt;li&gt;  Getter and Setter&lt;/li&gt;
&lt;li&gt;  Null safety&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And after both of these two sections, we will move to the last section (advanced)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Inheritance&lt;/li&gt;
&lt;li&gt;  Exception&lt;/li&gt;
&lt;li&gt;  Collections (list, set)&lt;/li&gt;
&lt;li&gt;  Asynchronous programming&lt;/li&gt;
&lt;li&gt;  Streams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PART-2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After clearing part 1, and practicing what you learned in part 1, we will move to part 2. In part 2 we will start the flutter. We will take a detailed look at the flutter, and again like part 1 we will divide part 2 into three segments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Beginner&lt;/li&gt;
&lt;li&gt;  Intermediate&lt;/li&gt;
&lt;li&gt;  Advanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's have a look at the beginner section of part 2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  What is hot reload&lt;/li&gt;
&lt;li&gt;  What is widget&lt;/li&gt;
&lt;li&gt;  Difference between stateful and stateless widget&lt;/li&gt;
&lt;li&gt;  Basic widgets which nicely text, row, column, container, stack and positioned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Section 1 is mostly based on making you understand the concepts, intermediate section is the section in which you will learn to build the UI. And if you will be motivated enough you will start to build yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Scaffold&lt;/li&gt;
&lt;li&gt;  Material Widgets - like button and dialogs&lt;/li&gt;
&lt;li&gt;  Layout builder&lt;/li&gt;
&lt;li&gt;  MediaQuery&lt;/li&gt;
&lt;li&gt;  ListView, GridView&lt;/li&gt;
&lt;li&gt;  CupertinoPageScaffold&lt;/li&gt;
&lt;li&gt;  TextField&lt;/li&gt;
&lt;li&gt;  Forms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After practicing sections 1 and 2 of part 2 you should start the advanced section which includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  State management&lt;/li&gt;
&lt;li&gt;  Routes and Navigation&lt;/li&gt;
&lt;li&gt;  Localization and Internalization&lt;/li&gt;
&lt;li&gt;  Animation&lt;/li&gt;
&lt;li&gt;  Working with JSON&lt;/li&gt;
&lt;li&gt;  Using community-packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PART-3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this part, you will start using third-party services like firebase. You will be considered a flutter developer even without this part, but this is a must-have in my point. In this part, I will only mention two things&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  rest API&lt;/li&gt;
&lt;li&gt;  Firebase&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will recommend you to get yourself very well familiar with these two things which will help you a lot in your career.&lt;/p&gt;

&lt;p&gt;So what’s next?&lt;/p&gt;

&lt;p&gt;This is not all of the things which you should learn, rather this is just a beginning. You will discover new paths, as you will continue your journey.&lt;/p&gt;

&lt;p&gt;Very best wishes for the start of your awesome journey.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>firstyearincode</category>
      <category>firebase</category>
      <category>beginners</category>
    </item>
    <item>
      <title>El problema de las SPA y la accesibilidad</title>
      <author>Adrian Benavente</author>
      <pubDate>Sun, 07 Nov 2021 22:04:55 +0000</pubDate>
      <link>https://dev.to/adrianbenavente/el-problema-de-las-spa-y-la-accesibilidad-54dk</link>
      <guid>https://dev.to/adrianbenavente/el-problema-de-las-spa-y-la-accesibilidad-54dk</guid>
      <description>&lt;p&gt;Las SPA son aplicaciones o sitios renderizados del lado del cliente, es decir, que en lugar de hacer una petición al servidor cada vez que el usuario interactúa con la página, los contenidos se cargan una única vez y son mostrados por JavaScript en el momento que sean requeridos, ya sea en su totalidad o de manera parcial y asíncrona, sin necesidad de recargar toda la página. Esto permite una navegación más fluida, con menor consumo de recursos y casi sin tiempos de carga.&lt;/p&gt;

&lt;p&gt;A su vez, a los desarrolladores nos permitió granularizar mucho más nuestra arquitectura, dejando de pensar en páginas, para pasar a verlo todo en términos de &lt;em&gt;componentes&lt;/em&gt;. También facilitó la depuración de errores ya que todo lo que necesitamos es un navegador y las developer tools del framework o librería que estemos usando.&lt;/p&gt;

&lt;p&gt;Sin embargo, y a pesar de todas sus bondades, de las que solo nombré las más superficiales ya que este no es un artículo dedicado enteramente a las SPA, se podría decir que de cierto modo &lt;em&gt;hicieron la web menos accesible por defecto&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Claro que, echarle toda la culpa de esto a las SPA, no sería lo más razonable. Un cambio de paradigma no es más que una nueva manera de pensar y hacer las cosas. Por eso quiero compartir una serie de implementaciones que deberemos hacer desde el comienzo del proceso del desarrollo, que, junto con las &lt;a href="https://webaim.org/standards/wcag/checklist"&gt;verificaciones básicas&lt;/a&gt; de siempre, garantizarán que nuestras SPA sean mínimamente &lt;a href="https://www.w3.org/TR/WCAG20/#accessibility-supporteddef"&gt;compatibles con la accesibilidad&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manejo-del-foco"&gt;
  &lt;/a&gt;
  Manejo del foco
&lt;/h2&gt;

&lt;p&gt;Como la pestaña no se recarga al navegar entre vistas, el lector de pantalla no avisará de ningún cambio de contenido a no ser que se le indique explícitamente. Para ello, una técnica muy común es &lt;strong&gt;ubicar el foco en el primer título&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onNavigate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;titulo-seccion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pero las etiquetas de encabezado no son elementos enfocables, por lo que hay que otorgarles esta característica, colocándoles el atributo &lt;code&gt;tabindex&lt;/code&gt;. Le daremos un valor de &lt;code&gt;-1&lt;/code&gt;, para evitar que interfiera en el orden natural de navegación de la tecla TAB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"titulo-seccion"&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Título de la sección&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Aquí el contenido...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lo anterior también aplica a los casos en donde un botón o enlace realiza un scroll dentro de la vista, hasta otra parte de la misma. Siempre se debería poner el foco donde comienza el contenido al que llevaremos al usuario.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#t%C3%ADtulo-del-documento"&gt;
  &lt;/a&gt;
  Título del documento
&lt;/h2&gt;

&lt;p&gt;Al existir un único documento HTML, este tendrá siempre el mismo título. El usuario podría no saber en qué pantalla se encuentra, en caso de irse a otra pestaña del navegador y luego volver. Por eso, debemos modificar el texto de la etiqueta &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; mediante JS, al cambiar de vista, para que refleje el contenido de esta.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mi maravilloso sitio | Quiénes somos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sem%C3%A1ntica-html"&gt;
  &lt;/a&gt;
  Semántica HTML
&lt;/h2&gt;

&lt;p&gt;A veces, los frameworks de desarrollo de SPA, si no son bien utilizados, pueden forzar malas prácticas como el uso excesivo de etiquetas &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, lo que puede degradar o hasta arruinar por completo la experienca de usuarios de tecnologías asistivas. &lt;strong&gt;Mantener siempre una correcta semántica HTML, resulta imprescindible.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Mi página&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Inicio&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/nosotros"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Nosotros&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/portfolio"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Portfolio&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/contacto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contacto&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Nosotros&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Bla, bla...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;@adrian.benavente.dev&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  Conclusión
&lt;/h2&gt;

&lt;p&gt;La tecnología avanza y con ella las formas de desarrollar software, y las tecnologías de asistencia también hacen lo propio para acompañar esta evolución. Seguro que en un futuro próximo cada vez encontraremos un mejor soporte para SPA por parte de los distintos agentes de usuario que utilizan las personas con discapacidades, o, tal vez, las herramientas de desarrollo de SPA incorporen mejoras de accesibilidad (me inclino más por lo primero). Mientras tanto, no podemos simplemente sentarnos a esperar que esto suceda, y mucho menos, cuando ocurra, dejar de lado la retrocompatibilidad.&lt;/p&gt;

&lt;p&gt;Por último, no olvidemos, según la WAI, en una &lt;a href="https://www.w3.org/WAI/planning/statements/"&gt;declaración de conformidad&lt;/a&gt; un documento es o no es accesible, pero nunca puede ser parcialmente accesible; en este último caso se consideraría que no lo es. Pues bien, una SPA consta de un solo documento. ¿Se va entendiendo el punto?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>a11y</category>
    </item>
    <item>
      <title>.NET, ASP.NET Core, APIs REST e desenvolvimento Back-End: dicas para o dia a dia | Novembro-2021</title>
      <author>Renato Groffe</author>
      <pubDate>Sun, 07 Nov 2021 21:59:53 +0000</pubDate>
      <link>https://dev.to/renatogroffe/net-aspnet-core-apis-rest-e-desenvolvimento-back-end-dicas-para-o-dia-a-dia-novembro-2021-1i4j</link>
      <guid>https://dev.to/renatogroffe/net-aspnet-core-apis-rest-e-desenvolvimento-back-end-dicas-para-o-dia-a-dia-novembro-2021-1i4j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gisy_H5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bly1crz6d0uhso446xp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gisy_H5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bly1crz6d0uhso446xp.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No dia &lt;strong&gt;27/09/2021&lt;/strong&gt; (uma &lt;strong&gt;segunda-feira&lt;/strong&gt;) realizei uma nova apresentação no &lt;a href="https://www.youtube.com/canaldotnet/"&gt;&lt;strong&gt;Canal .NET&lt;/strong&gt;&lt;/a&gt; trazendo diversas dicas e truques na utilização de &lt;strong&gt;.NET 5&lt;/strong&gt;, &lt;strong&gt;ASP.NET Core&lt;/strong&gt;, &lt;strong&gt;Azure Functions&lt;/strong&gt; e também novidades do &lt;strong&gt;.NET 6&lt;/strong&gt;, com foco principalmente na &lt;strong&gt;implementação de APIs REST e desenvolvimento Back-End&lt;/strong&gt;. As diversas demonstrações englobaram ainda tecnologias como &lt;strong&gt;Visual Studio Code, NuGet, Azure Functions, RabbitMQ, Swagger, JWT, Polly, .NET CLI, BenchmarkDotNet&lt;/strong&gt; e &lt;strong&gt;Redis&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=765s"&gt;&lt;strong&gt;gravação&lt;/strong&gt;&lt;/a&gt; está disponível no &lt;strong&gt;YouTube&lt;/strong&gt; e pode ser assistida gratuitamente:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Kxeu_OBtoIs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Se deseja assistir separadamente a cada um dos tópicos abordados acesse os links a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=1017s"&gt;&lt;strong&gt;Azure Functions + .NET 5 + RabbitMQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=1921s"&gt;&lt;strong&gt;ASP.NET Core + Swagger + JWT&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=2651s"&gt;&lt;strong&gt;NuGet Gallery: adicionando packages no Visual Studio Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=2880s"&gt;&lt;strong&gt;Version Lens: exibindo packages desatualizados no VS Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=3293s"&gt;&lt;strong&gt;Visual Studio Code + Console Apps: utilizando o Terminal&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=3842s"&gt;&lt;strong&gt;Resiliência com Polly: implementando o uso de Wait + Retry&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=4904s"&gt;&lt;strong&gt;Polly + Fallback: valores default no tratamento de falhas&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=5486s"&gt;&lt;strong&gt;dotnet run: como configurar a porta de execução de uma aplicação ASP.NET Core&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=5868s"&gt;&lt;strong&gt;BenchmarkDotNet: testando a performance de códigos .NET&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=7369s"&gt;&lt;strong&gt;.NET + Redis: utilizando Hashes&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Kxeu_OBtoIs&amp;amp;t=7924s"&gt;&lt;strong&gt;.NET 6 + Back-End: mudanças em templates&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Os projetos utilizados ao longo da apresentação foram disponibilizados no &lt;a href="https://github.com/renatogroffe"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/renatogroffe/DotNet5-AzureFunctions-RabbitMQ"&gt;&lt;strong&gt;.NET 5 + Azure Functions 3.x + RabbitMQ&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/renatogroffe/ASPNETCore5-REST_API-JWT-Swagger_ContagemAcessos"&gt;&lt;strong&gt;.NET 5 + ASP.NET Core + REST API + Contagem de Acessos + JWT + Configurações para uso do Swagger com JWT&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/renatogroffe/DotNet5-Worker-Polly-Wait-Retry_ConsumoAPIContagem"&gt;&lt;strong&gt;.NET 5 + Consumo de API REST de contagem de acessos + Código Resiliente com Polly + Wait and Retry&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/renatogroffe/DotNet5-Worker-Polly-Fallback_ConsumoAPIContagem"&gt;&lt;strong&gt;.NET 5 + Consumo de API REST de contagem de acessos + Código Resiliente com Polly + Fallback&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/renatogroffe/DotNet5-BenchmarkDotNet-Testes-JSON_Serialization-V2"&gt;&lt;strong&gt;.NET 5 + Console Application + BenchmarkDotNet (execução via classe BenchmarkSwitcher) + Newtonsoft + System.Text.Json&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/renatogroffe/DotNet5-BenchmarkDotNet-Testes-HttpRequests"&gt;&lt;strong&gt;.NET 5 + Console Application + BenchmarkDotNet + HttpClient + Refit&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/renatogroffe/ASPNETCore5-Redis-Kafka_APIAcoes"&gt;&lt;strong&gt;.NET 5 + ASP.NET Core + Swagger + FluentValidation + Apache Kafka + Redis + Cotações de Ações&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/renatogroffe/DotNet5-WorkerService-Kafka-Redis-IntegrationTests_Acoes"&gt;&lt;strong&gt;.NET 5 + Worker Service + Apache Kafka + Redis + Dockerfile + Integration Tests (.NET 5 + xUnit + FluentAssertions) + Manipulação de Ações&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deixo ainda aqui os links de alguns artigos que publiquei e que cobrem tópicos desta apresentação:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/asp-net-core-jwt-configurando-o-uso-do-swagger-para-testes-com-tokens-490d7169eaff"&gt;&lt;strong&gt;ASP.NET Core + JWT: configurando o uso do Swagger para testes com tokens&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/turbinando-o-desenvolvimento-net-no-vs-code-exibindo-packages-desatualizados-dica-1-e9af6f3f4df1"&gt;&lt;strong&gt;Turbinando o desenvolvimento .NET no VS Code: exibindo packages desatualizados | Dica 1&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/turbinando-o-desenvolvimento-net-no-vs-code-utilizando-o-terminal-com-console-apps-dica-2-216766f4d0c9"&gt;&lt;strong&gt;Turbinando o desenvolvimento .NET no VS Code: utilizando o Terminal com Console Apps | Dica 2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/renatogroffe/visual-studio-code-dicas-truques-conteudos-gratuitos-oln"&gt;&lt;strong&gt;Visual Studio Code: dicas, truques, conteúdos gratuitos...&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/tratamento-de-falhas-com-net-polly-implementando-o-uso-de-wait-and-retry-4896dae0f5d0"&gt;&lt;strong&gt;Tratamento de Falhas com .NET + Polly: implementando o uso de Wait and Retry&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/net-5-polly-exemplos-com-circuit-breaker-chaos-engineering-fallback-wait-retry-262bfa5b0cc8"&gt;&lt;strong&gt;.NET 5 + Polly: exemplos com Circuit Breaker, Chaos Engineering, Fallback, Wait-Retry...&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/asp-net-core-definindo-a-porta-de-execu%C3%A7%C3%A3o-via-dotnet-run-1447c7388e36"&gt;&lt;strong&gt;ASP.NET Core: definindo a porta de execução via dotnet run&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/performance-de-c%C3%B3digo-em-net-implementando-testes-com-benchmarkdotnet-4c6cabb82607"&gt;&lt;strong&gt;BenchmarkDotNet: testando a performance de códigos .NET&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/net-6-asp-net-core-novidades-nos-templates-de-projetos-450e93f559d5"&gt;&lt;strong&gt;.NET 6 + ASP.NET Core: novidades nos templates de projetos&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/net-6-guia-de-refer%C3%AAncia-artigos-v%C3%ADdeos-e-exemplos-de-utiliza%C3%A7%C3%A3o-6c548981bf25"&gt;&lt;strong&gt;.NET 6 - Guia de Referência: artigos, vídeos e exemplos de utilização&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;E concluo este post com um convite…&lt;/p&gt;

&lt;p&gt;Dia &lt;strong&gt;15/11 (segunda) às 21:00 — horário de Brasília&lt;/strong&gt; — teremos mais um &lt;strong&gt;evento online e gratuito&lt;/strong&gt; no canal &lt;a href="https://www.youtube.com/codingnight"&gt;&lt;strong&gt;Coding Night&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Será uma live abordando as principais novidades do &lt;strong&gt;.NET Conf 2021&lt;/strong&gt;, cobrindo anúncios de tecnologias como &lt;strong&gt;.NET 6, ASP.NET Core, MAUI, Blazor, Azure, Visual Studio&lt;/strong&gt; e muito mais!&lt;/p&gt;

&lt;p&gt;Para participar faça sua inscrição no link a seguir, a transmissão acontecerá via &lt;strong&gt;YouTube&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://bit.ly/novidades-dotnet-conf-2021"&gt;https://bit.ly/novidades-dotnet-conf-2021&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/renatogroffe/net-asp-net-core-apis-rest-e-desenvolvimento-back-end-dicas-para-o-dia-a-dia-julho-2021-1bh9"&gt;&lt;strong&gt;.NET 5, ASP.NET Core, APIs REST e desenvolvimento Back-End: dicas para o dia a dia | Julho-2021&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/net-5-asp-net-core-apis-rest-e-desenvolvimento-back-end-dicas-para-o-dia-a-dia-abril-2021-36fdd3fef866"&gt;&lt;strong&gt;.NET 5, ASP.NET Core, APIs REST e desenvolvimento Back-End: dicas para o dia a dia | Abril-2021&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renatogroffe.medium.com/net-5-asp-net-core-apis-rest-e-desenvolvimento-back-end-dicas-para-o-dia-a-dia-janeiro-2021-7caa0bc5d37f"&gt;&lt;strong&gt;.NET 5, ASP.NET Core, APIs REST e desenvolvimento Back-End: dicas para o dia a dia | Janeiro-2021&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>webdev</category>
      <category>azure</category>
    </item>
    <item>
      <title>C++ vocabulary for beginners.</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 07 Nov 2021 21:51:39 +0000</pubDate>
      <link>https://dev.to/baenencalin/c-vocabulary-for-beginners-4nlj</link>
      <guid>https://dev.to/baenencalin/c-vocabulary-for-beginners-4nlj</guid>
      <description>&lt;p&gt;When I first joined C++, I was confused about some terminology, but now that I've looked it up, I understand now.&lt;br&gt;
I'm here to share my wisdom in the form of a compilation of phrases I've learned.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-lvalue-endraw-and-raw-rvalue-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;lvalue&lt;/code&gt; and &lt;code&gt;rvalue&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;An lvalue, or properly cased, "LValue", stands for "Left Value". Same with "RValue"; it means "Right Value".&lt;br&gt;
A left value is any bit of code that can go on the left side of an expression, and is strictly limited to only being that left-hand of the expression.&lt;br&gt;
Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// `x` is an lvalue, and `10` is an rvalue.&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// `y` lvalue, `20` rvalue.&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// `y` is an lvalue, `y+x` is an rvalue.&lt;/span&gt;
&lt;span class="c1"&gt;// `y+x` is an rvalue because you can't do&lt;/span&gt;
&lt;span class="c1"&gt;// `int x+y = value`.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-reference-endraw-raw-lvalue-reference-endraw-and-raw-rvalue-reference-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;reference&lt;/code&gt;, &lt;code&gt;lvalue reference&lt;/code&gt;, and &lt;code&gt;rvalue reference&lt;/code&gt;.
&lt;/h2&gt;

&lt;p&gt;A reference is a tool that's used to pass a variable (or its value) around.&lt;br&gt;
Consider the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;updateYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2006&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;updateYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Prints `2021`.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They're basically similar to pointers (&lt;code&gt;T* name&lt;/code&gt;), except they're dereferenced when applicable, and are ensured never to be a &lt;code&gt;null&lt;/code&gt;-like value.&lt;br&gt;&lt;br&gt;
What's an lvalue reference? - Well, it's not hard to explain, it's what you you &lt;strong&gt;just&lt;/strong&gt; witnessed.&lt;br&gt;
Reference usually refers to any reference, it's not specific, but before &lt;a href="https://en.cppreference.com/w/cpp/language/reference"&gt;rvalues were added to C++ (in C++11)&lt;/a&gt;, "reference" referred to the only kind of references that existed, lvalue references.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#copy-constructor"&gt;
  &lt;/a&gt;
  Copy constructor.
&lt;/h2&gt;

&lt;p&gt;It's exactly what it sounds like, a constructor that copies.&lt;br&gt;&lt;br&gt;
What does it copy? Another instance of the same type.&lt;br&gt;
It creates a new instance of a type using an old instance.&lt;br&gt;&lt;br&gt;
Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The following constructor is a "copy constructor"&lt;/span&gt;
    &lt;span class="c1"&gt;// because it takes an argument of type `Point`,&lt;/span&gt;
    &lt;span class="c1"&gt;// which is the same type as the class it's in.&lt;/span&gt;
    &lt;span class="c1"&gt;// (NOTE: Copying data from `p` isn't a requirement&lt;/span&gt;
    &lt;span class="c1"&gt;//        for a copy-constructor, but doing otherwise&lt;/span&gt;
    &lt;span class="c1"&gt;//        defeats the purpose of having `p`.)&lt;/span&gt;
    &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// I'm not using a member-initializer list to&lt;/span&gt;
        &lt;span class="c1"&gt;// be beginner friendly.&lt;/span&gt;
        &lt;span class="c1"&gt;// More people know `this.name`/`this-&amp;gt;name` syntax.&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>cpp</category>
      <category>beginners</category>
      <category>programming</category>
      <category>watercooler</category>
    </item>
  </channel>
</rss>
