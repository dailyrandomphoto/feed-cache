<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How does AI bounding box detection work?</title>
      <author>Gant ‚Ñíùí∂ùí∑‚Ñ¥ùìáùíπ‚ÑØ </author>
      <pubDate>Fri, 13 Aug 2021 16:29:49 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-does-ai-bounding-box-detection-work-2je6</link>
      <guid>https://dev.to/aws-builders/how-does-ai-bounding-box-detection-work-2je6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#learn-in-30-seconds"&gt;
  &lt;/a&gt;
  üß† Learn in 30 seconds
&lt;/h3&gt;

&lt;p&gt;It looks so simple when AI does it right?&lt;/p&gt;

&lt;p&gt;But the AI doesn't give you an image, it gives you data.  It's up to you to make it look simple.  The results you get are presented in a way so you can choose specific items from all the returned results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sfZQctsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psdexutcx4a3vgzjkwg1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sfZQctsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psdexutcx4a3vgzjkwg1.jpg" alt="Object Detection Balloon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might think a box gives you four values, and you're right, but it only gives you TWO points.  From that you can infer a box to draw that identifies the object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo1RLlVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzwl92lixo78ckv2edfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fo1RLlVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzwl92lixo78ckv2edfg.png" alt="Object Detection Math 2 points"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However... it very rarely gives you one box.  Lots of times you get a whole bunch of boxes for you to chose from.&lt;/p&gt;

&lt;p&gt;This is because the model is often trained to return X results no matter what, and sometimes it's meant to detect a whole wide array of objects, not just one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8mgqoIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/haa609wnm0kqblp2eymq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8mgqoIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/haa609wnm0kqblp2eymq.png" alt="Overlap Object Detection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many boxes are identified by what they are detecting, like people or tables etc.  But you might have a photo with three people in it, and it returns 30 people boxes.  Each of these boxes generally give you a score of confidence, and it's your job to identify if they are identifying the same object, or separate objects.&lt;/p&gt;

&lt;p&gt;There's some well known algorithms to take the best of the best.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VazVR2gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3nr6z40b0sdn3u6r6h0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VazVR2gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3nr6z40b0sdn3u6r6h0.jpg" alt="Object Detection Scores"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have the boxes you're interested in, you can draw them easily with a canvas.  In JavaScript you just overlay a canvas on the image and draw rectangles there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJMYapvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zenkkd6wg65pp1y4et4j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJMYapvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zenkkd6wg65pp1y4et4j.jpg" alt="Detection overlay in JavaScript Web"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final result lets you draw clean object detection on websites.  It's pretty cool and easy to do this on images and video.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkqPd_Ft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts3jvnfktkldq36u781w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkqPd_Ft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts3jvnfktkldq36u781w.jpg" alt="Object Detection with nonMaxSuppression"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want the code to do this?  It's all in Chapter 6 of my book with a deep explanation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://amzn.to/3dR3vpY"&gt;Buy a copy of the book&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WvNuhv7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy96lrsdpbeuj8blrna0.jpg" alt="Book Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm looking forward to what you can do with your very own AI object detection!  Don't forget to tag your cool stuff with the #MadeWithTFJS Hashtag on Twitter!&lt;/p&gt;

&lt;p&gt;And don't forget to follow me for more AI tidbits like this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iOiplNHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7611cgyuta5vnupe1k73.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iOiplNHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7611cgyuta5vnupe1k73.gif" alt="Rock Paper Scissors in TensorFlow.js"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ai</category>
      <category>javascript</category>
      <category>tensorflowjs</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>I Joined the Contentful Developer Relations Team</title>
      <author>Brittany Walker</author>
      <pubDate>Fri, 13 Aug 2021 16:28:30 +0000</pubDate>
      <link>https://dev.to/contentful/i-joined-the-contentful-developer-relations-team-3ne6</link>
      <guid>https://dev.to/contentful/i-joined-the-contentful-developer-relations-team-3ne6</guid>
      <description>&lt;p&gt;We have welcomed Brittany, also known as &lt;a href="https://twitter.com/musicalwebdev"&gt;@musicalwebdev&lt;/a&gt;, to the Developer Relations team at Contentful! From event planning to legal administration to software development, Brittany‚Äôs path to developer relations has been an interesting one. Read on to learn more about her career journey, involvement in the tech community and love of musicals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-were-some-of-your-first-experiences-with-web-development"&gt;
  &lt;/a&gt;
  What were some of your first experiences with web development?
&lt;/h2&gt;

&lt;p&gt;I started learning how to code around the age of 11 through &lt;a href="https://www.neopets.com/"&gt;Neopets&lt;/a&gt;! Neopets is an online, virtual world where you take care of virtual animals. Within the world, you can participate in a variety of activities such as running a shop, playing games and chatting in discussion forums. One major feature of Neopets is guilds, which are private clubs where leaders create games and manage a private discussion board. &lt;/p&gt;

&lt;p&gt;Guild pages, along with user profiles and shops, are customizable using HTML and CSS. I started designing guild pages and, in exchange, I was paid in virtual paint brushes ‚Äî a very expensive and sought-after item in the Neopets world. Through Neopets, I learned HTML, CSS, Paint and eventually Photoshop. I had a ton of fun running my own Neopets guild design business. At the time, I had no idea that web development was an actual career! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-made-you-want-to-change-your-career-to-tech"&gt;
  &lt;/a&gt;
  What made you want to change your career to tech?
&lt;/h2&gt;

&lt;p&gt;I worked at a law firm in a legal practice management in 2016. My department at the firm was assigned specific practice areas (such as corporate, energy, etc.), and we helped lawyers manage those groups. Our tasks included writing marketing materials, creating financial reports and running meetings. Due to the nature of our jobs, we used a lot of different software programs and needed to combine data from many places to come up with one report. &lt;/p&gt;

&lt;p&gt;I started thinking that it would be nice if there were one program that could pull data from all of our different tools into one place. I wondered if I could build something like that. At the same time, I wanted to build a website where I could write reviews for musicals that I had seen, since I was regularly going to New York City to see shows a few times a year. I attempted to start a website but got confused with all of the unusual characters I saw everywhere (it was jQuery!). So with two goals in mind, I started learning how to code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-you-start-learning-how-to-code"&gt;
  &lt;/a&gt;
  How did you start learning how to code?
&lt;/h2&gt;

&lt;p&gt;After trying to learn how to code on my own for a few months through FreeCodeCamp, Udemy and other platforms, I decided to attend a meetup. In January 2017, I went to my first Meetup to learn about JavaScript and jQuery. I didn‚Äôt know at the time, but the Meetup was actually hosted by a coding bootcamp named &lt;a href="https://www.thinkful.com/"&gt;Thinkful&lt;/a&gt;. After the Meetup ‚Äî which I thought was awesome ‚Äî I signed up for a free trial for Thinkful and eventually signed up for the bootcamp.&lt;/p&gt;

&lt;p&gt;Sometime after starting the bootcamp, I created my Twitter account, and thus &lt;a href="https://twitter.com/musicalwebdev"&gt;musicalwebdev&lt;/a&gt; was born. The only downside to being known as the ‚ÄúMusical Web Dev‚Ä≥ is that many assume that I have some sort of musical ability. Unfortunately, my musical abilities when it comes to singing and dancing are pretty non-existent.However, I‚Äôm extremely good at rapping songs from Hamilton. üòé So of course, one of my first projects was a &lt;a href="https://brittanyrw.github.io/hamilton-quiz-app/"&gt;Hamilton Quiz&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I worked as a web developer at a digital agency and as a software engineer at a retail company after the bootcamp. I never ended up making anything related to legal tech, but I have made a lot of musical-related projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-you-get-involved-in-your-local-tech-community"&gt;
  &lt;/a&gt;
  How did you get involved in your local tech community?
&lt;/h2&gt;

&lt;p&gt;I started getting involved in the Washington, DC, tech community during my coding bootcamp. We had a requirement to go to two or three meetups per month; however, I misread the requirement and thought it was two per week (oops!). I ended up going to a ton of awesome DC meetups and meeting a lot of really cool people. &lt;/p&gt;

&lt;p&gt;Everyone had a mentor at the coding bootcamp. Although Thinkful operates online, it wants to establish an in-person presence in various cities. It hosts free beginner-level coding Meetups in the DC area. My mentor for Thinkful just so happened to be in charge of the DC meetups, so I went to many of his events over time. Eventually, I started teaching at the Meetups as well, and in 2018, became the main instructor for the Thinkful DC meetups and taught beginner coding Meetups almost every week. &lt;/p&gt;

&lt;p&gt;Around the same time, I started as a front-end lead for &lt;a href="https://www.womenwhocode.com/dc"&gt;Women Who Code DC&lt;/a&gt;. The front-end team plans two to three front-end related meetups per month for women in the DC area. Through both opportunities, I‚Äôve mentored many people from underrepresented groups that are learning to code or are still early in their tech careers. In addition to Women Who Code DC, I help plan events for &lt;a href="https://www.meetup.com/Black-Code-Collective/"&gt;Black Code Collective DC&lt;/a&gt; and have been an instructor and mentor for &lt;a href="https://www.thegcodehouse.com/"&gt;G{Code} House&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#musicals-have-been-playing-a-big-part-in-your-tech-journey-how-did-you-get-into-them"&gt;
  &lt;/a&gt;
  Musicals have been playing a big part in your tech journey, how did you get into them?
&lt;/h2&gt;

&lt;p&gt;In fifth grade, my mom bought a VHS tape of Grease that ‚Äî apparently ‚Äî I absolutely loved. I would carry the tape in my backpack and, when I went to friends‚Äô houses after school, I would make them watch it with me. Over the next few years, I watched as many movie musicals as possible and saw my first live musical, Lion King on Broadway, in my senior year of high school.&lt;/p&gt;

&lt;p&gt;In college, I studied government and was lucky to volunteer as an usher at theaters where Broadway touring shows were performed. Through volunteering, I saw Wicked 11 times. üòÖ Once I learned how to code, I wanted to make projects about my favorite hobby. My most recent musical-related project is &lt;a href="https://theaterlog.com/"&gt;TheaterLog&lt;/a&gt;, which I made to keep track of the musicals and plays I have seen since 2010.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wow-what-an-interesting-story-any-additional-words"&gt;
  &lt;/a&gt;
  Wow, what an interesting story! Any additional words?
&lt;/h2&gt;

&lt;p&gt;I feel lucky to join the awesome Developer Relations team at Contentful! If you want to keep up to date with what I am doing, you can find me on &lt;a href="https://twitter.com/musicalwebdev"&gt;Twitter&lt;/a&gt;, at a local Washington DC tech event or follow what shows I am seeing at &lt;a href="https://theaterlog.com/"&gt;TheaterLog&lt;/a&gt;. üéµ&lt;/p&gt;

</description>
      <category>career</category>
      <category>womenintech</category>
      <category>devrel</category>
    </item>
    <item>
      <title>3 Not-So-Obvious Ways to Stand Out On a Product Team As a Developer</title>
      <author>Michael Mangialardi</author>
      <pubDate>Fri, 13 Aug 2021 15:57:55 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/3-not-so-obvious-ways-to-stand-out-on-a-product-team-as-a-developer-2d20</link>
      <guid>https://dev.to/michaelmangial1/3-not-so-obvious-ways-to-stand-out-on-a-product-team-as-a-developer-2d20</guid>
      <description>&lt;p&gt;This article assumes the following:&lt;/p&gt;

&lt;p&gt;1) You are a developer on a software product&lt;br&gt;
2) You work closely with the ‚Äúproduct team‚Äù (product manager, UX designers, technical product manager) for said software product&lt;/p&gt;

&lt;p&gt;If you‚Äôre in this environment, then I have 5 not-so-obvious ways that you can stand out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-share-updates-about-your-personal-life"&gt;
  &lt;/a&gt;
  1) Share updates about your personal life
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUZFC9Ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1529518152792-d08317b26e22%3Fixid%3DMnwxMjA3fDB8MHxzZWFyY2h8MXx8dmFjYXRpb24lMjBzZWxmaWV8ZW58MHx8MHx8%26ixlib%3Drb-1.2.1%26w%3D1000%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUZFC9Ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1529518152792-d08317b26e22%3Fixid%3DMnwxMjA3fDB8MHxzZWFyY2h8MXx8dmFjYXRpb24lMjBzZWxmaWV8ZW58MHx8MHx8%26ixlib%3Drb-1.2.1%26w%3D1000%26q%3D80" alt="personal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might be thinking: ‚ÄúWhat does this have to do with software development?‚Äù&lt;/p&gt;

&lt;p&gt;Well, the thing is the product team, even a technical product manager, is not going to someone who knows who to write code, and if they do, they clearly aren‚Äôt super fascinated by it (otherwise they‚Äôd switch positions).&lt;/p&gt;

&lt;p&gt;The point is that developers deserve a different purpose, and therefore, their interests and routines are different.&lt;/p&gt;

&lt;p&gt;Product team members are usually more consumed with meetings. Developers are left alone.&lt;/p&gt;

&lt;p&gt;Meetings includes small talk, which includes opening up somewhat to your personal life (what‚Äôs everyone doing this weekend, my son won his baseball tournament, etc. etc.)&lt;/p&gt;

&lt;p&gt;Developers simply don‚Äôt have as much opportunity to talk about these things. And let‚Äôs face it, we‚Äôre thought of as more introverted and bearers of a technical skill that is foreign to others. We‚Äôre different.&lt;/p&gt;

&lt;p&gt;So, how do you stand out? Be different the normal different.&lt;/p&gt;

&lt;p&gt;What‚Äôs one way to do that?&lt;/p&gt;

&lt;p&gt;Open up about your personal life.&lt;/p&gt;

&lt;p&gt;Chime in on the small talk in your meetings. And/or, post photos about your life (house projects, vacations, food, etc.) in the Slack/Teams channel.&lt;/p&gt;

&lt;p&gt;The more you open up, the less foreign you‚Äôll seem as a developer. The less foregoing you seem, the more you‚Äôll be approached and trusted with product team members.&lt;/p&gt;

&lt;p&gt;The more trusted you are, the more valuable you are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-treat-product-input-as-a-vital-skill-of-your-role"&gt;
  &lt;/a&gt;
  2) Treat product input as a vital skill of your role
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs be honest. Learning new frameworks, technologies, libraries, coding patterns, etc. is great. I do it all the time.&lt;/p&gt;

&lt;p&gt;But, the product team doesn‚Äôt really care. I mean, they are in so far as they should let you work on tech debt and improvements. They should care that the technology is stable and scalable. They just don‚Äôt care whether it‚Äôs React or Vue, etc. That‚Äôs for the developers to decide.&lt;/p&gt;

&lt;p&gt;Quite frankly, the blogosphere moves faster into new frameworks and tools than a product team does, even when they prioritize tech debt.&lt;/p&gt;

&lt;p&gt;Given that a product team is not interested in the technical weeds per se, and that technological updates take time, it‚Äôs important to see how providing input on the direction of a product is arguably more important, certainly just as important as staying up with the latest technology trends.&lt;/p&gt;

&lt;p&gt;So, you should see providing input, from the perspective of a developer, as a vital skill.&lt;/p&gt;

&lt;p&gt;This means 1) attend all optional product meetings, 2) pay careful attention (don‚Äôt code with your camera off), 3) devour articles about UX/UI patterns, and 4) speak up (even if you just affirm what someone else said).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kl_RYn9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1609751352001-25b60439239c%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kl_RYn9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1609751352001-25b60439239c%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" alt="zoom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you treat this skill seriously, the product team will seriously see you as valuable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-focus-on-your-unique-perspective"&gt;
  &lt;/a&gt;
  3) Focus on your unique perspective
&lt;/h2&gt;

&lt;p&gt;Piggy-backing off the previous point, it‚Äôs important that you realize the uniqueness (and hence the value) of your perspective as someone who can provide product input with technical foreknowledge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLFAIyAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1517148815978-75f6acaaf32c%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLFAIyAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1517148815978-75f6acaaf32c%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1000%26q%3D80" alt="coder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meaning, developers know what is technically possible when providing input on the design and direction of a product. They can suggest what the product team and users won‚Äôt think of.&lt;/p&gt;

&lt;p&gt;Spend some time thinking about ways to improve the experience of a product with technical solutions that may not have been thought of.&lt;/p&gt;

&lt;p&gt;This is in addition to the usual input of saying what is or isn‚Äôt feasible in a newly design project/feature.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript Algorithms and Data Structures</title>
      <author>Alexandre Freire</author>
      <pubDate>Fri, 13 Aug 2021 15:54:50 +0000</pubDate>
      <link>https://dev.to/alexandrefreire/javascript-algorithms-and-data-structures-2pa2</link>
      <guid>https://dev.to/alexandrefreire/javascript-algorithms-and-data-structures-2pa2</guid>
      <description>&lt;p&gt;By &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;https://github.com/trekhleb/javascript-algorithms&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-algorithms-and-data-structures"&gt;
  &lt;/a&gt;
  JavaScript Algorithms and Data Structures
&lt;/h1&gt;

&lt;p&gt;This repository contains JavaScript based examples of many&lt;br&gt;
popular algorithms and data structures.&lt;/p&gt;

&lt;p&gt;Each algorithm and data structure has its own separate README&lt;br&gt;
with related explanations and links for further reading (including ones&lt;br&gt;
to YouTube videos).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚òù Note that this project is meant to be used for learning and researching purposes&lt;br&gt;
only, and it is **not&lt;/em&gt;* meant to be used for production.*&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#data-structures"&gt;
  &lt;/a&gt;
  Data Structures
&lt;/h2&gt;

&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can&lt;br&gt;
be accessed and modified efficiently. More precisely, a data structure is a collection of data&lt;br&gt;
values, the relationships among them, and the functions or operations that can be applied to&lt;br&gt;
the data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/linked-list"&gt;Linked List&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/doubly-linked-list"&gt;Doubly Linked List&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/queue"&gt;Queue&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/stack"&gt;Stack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/hash-table"&gt;Hash Table&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/heap"&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/priority-queue"&gt;Priority Queue&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/trie"&gt;Trie&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree"&gt;Tree&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/binary-search-tree"&gt;Binary Search Tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/avl-tree"&gt;AVL Tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/red-black-tree"&gt;Red-Black Tree&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/segment-tree"&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/tree/fenwick-tree"&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/graph"&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/disjoint-set"&gt;Disjoint Set&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/data-structures/bloom-filter"&gt;Bloom Filter&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#algorithms"&gt;
  &lt;/a&gt;
  Algorithms
&lt;/h2&gt;

&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is&lt;br&gt;
a set of rules that precisely define a sequence of operations.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#algorithms-by-topic"&gt;
  &lt;/a&gt;
  Algorithms by Topic
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Math&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/bits"&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/binary-floating-point"&gt;Binary Floating Point&lt;/a&gt; - binary representation of the floating-point numbers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/factorial"&gt;Factorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fibonacci"&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/prime-factors"&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan's theorem&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/primality-test"&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/euclidean-algorithm"&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/least-common-multiple"&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/sieve-of-eratosthenes"&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/is-power-of-two"&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/pascal-triangle"&gt;Pascal's Triangle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/complex-number"&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/radian"&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fast-powering"&gt;Fast Powering&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/horner-method"&gt;Horner's method&lt;/a&gt; - polynomial evaluation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/matrix"&gt;Matrices&lt;/a&gt; - matrices and basic matrix operations (multiplication, transposition, etc.)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/euclidean-distance"&gt;Euclidean Distance&lt;/a&gt; - distance between two points/vectors/matrices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/integer-partition"&gt;Integer Partition&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/square-root"&gt;Square Root&lt;/a&gt; - Newton's method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/liu-hui"&gt;Liu Hui œÄ Algorithm&lt;/a&gt; - approximate œÄ calculations based on N-gons&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fourier-transform"&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sets&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/cartesian-product"&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/fisher-yates"&gt;Fisher‚ÄìYates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/power-set"&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise and backtracking solutions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/permutations"&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/combinations"&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/longest-common-subsequence"&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/longest-increasing-subsequence"&gt;Longest Increasing Subsequence&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/shortest-common-supersequence"&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/knapsack-problem"&gt;Knapsack Problem&lt;/a&gt; - "0/1" and "Unbound" ones&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt; - "Brute Force" and "Dynamic Programming" (Kadane's) versions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/combination-sum"&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Strings&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/hamming-distance"&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/levenshtein-distance"&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/knuth-morris-pratt"&gt;Knuth‚ÄìMorris‚ÄìPratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/z-algorithm"&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/rabin-karp"&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/longest-common-substring"&gt;Longest Common Substring&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/regular-expression-matching"&gt;Regular Expression Matching&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Searches&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/linear-search"&gt;Linear Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/jump-search"&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/binary-search"&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/interpolation-search"&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sorting&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/bubble-sort"&gt;Bubble Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/selection-sort"&gt;Selection Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/insertion-sort"&gt;Insertion Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/heap-sort"&gt;Heap Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/merge-sort"&gt;Merge Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/quick-sort"&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/shell-sort"&gt;Shellsort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/counting-sort"&gt;Counting Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/radix-sort"&gt;Radix Sort&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Linked Lists&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/linked-list/traversal"&gt;Straight Traversal&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/linked-list/reverse-traversal"&gt;Reverse Traversal&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Trees&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/tree/depth-first-search"&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/tree/breadth-first-search"&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Graphs&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/depth-first-search"&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/breadth-first-search"&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/kruskal"&gt;Kruskal‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/dijkstra"&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/bellman-ford"&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/floyd-warshall"&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/detect-cycle"&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/prim"&gt;Prim‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/topological-sorting"&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/articulation-points"&gt;Articulation Points&lt;/a&gt; - Tarjan's algorithm (DFS based)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/bridges"&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/eulerian-path"&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury's algorithm - Visit every edge exactly once&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/hamiltonian-cycle"&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/strongly-connected-components"&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju's algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/travelling-salesman"&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cryptography&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/cryptography/polynomial-hash"&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/cryptography/rail-fence-cipher"&gt;Rail Fence Cipher&lt;/a&gt; - a transposition cipher algorithm for encoding messages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/cryptography/caesar-cipher"&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/cryptography/hill-cipher"&gt;Hill Cipher&lt;/a&gt; - substitution cipher based on linear algebra&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Machine Learning&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://github.com/trekhleb/nano-neuron"&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/ml/knn"&gt;k-NN&lt;/a&gt; - k-nearest neighbors classification algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/ml/k-means"&gt;k-Means&lt;/a&gt; - k-Means clustering algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Image Processing&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/image-processing/seam-carving"&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Uncategorized&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/hanoi-tower"&gt;Tower of Hanoi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/square-matrix-rotation"&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal's Triangle based examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/best-time-to-buy-sell-stocks"&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/n-queens"&gt;N-Queens Problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/knight-tour"&gt;Knight's Tour&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#algorithms-by-paradigm"&gt;
  &lt;/a&gt;
  Algorithms by Paradigm
&lt;/h3&gt;

&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class&lt;br&gt;
of algorithms. It is an abstraction higher than the notion of an algorithm, just as an&lt;br&gt;
algorithm is an abstraction higher than a computer program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/linear-search"&gt;Linear Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/travelling-salesman"&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fourier-transform"&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/knapsack-problem"&gt;Unbound Knapsack Problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/dijkstra"&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/prim"&gt;Prim‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/kruskal"&gt;Kruskal‚Äôs Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/search/binary-search"&gt;Binary Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/hanoi-tower"&gt;Tower of Hanoi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/pascal-triangle"&gt;Pascal's Triangle&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/euclidean-algorithm"&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/merge-sort"&gt;Merge Sort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sorting/quick-sort"&gt;Quicksort&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/tree/depth-first-search"&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/depth-first-search"&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/matrix"&gt;Matrices&lt;/a&gt; - generating and traversing the matrices of different shapes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fast-powering"&gt;Fast Powering&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/best-time-to-buy-sell-stocks"&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/permutations"&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/combinations"&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/fibonacci"&gt;Fibonacci Number&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/rain-terraces"&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/recursive-staircase"&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/image-processing/seam-carving"&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/levenshtein-distance"&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/longest-common-subsequence"&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/longest-common-substring"&gt;Longest Common Substring&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/longest-increasing-subsequence"&gt;Longest Increasing Subsequence&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/shortest-common-supersequence"&gt;Shortest Common Supersequence&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/knapsack-problem"&gt;0/1 Knapsack Problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/math/integer-partition"&gt;Integer Partition&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/maximum-subarray"&gt;Maximum Subarray&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/bellman-ford"&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/floyd-warshall"&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/string/regular-expression-matching"&gt;Regular Expression Matching&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate next solution you test
if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise, backtrack, and go on a
different path of finding a solution. Normally the DFS traversal of state-space is being used.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/jump-game"&gt;Jump Game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/unique-paths"&gt;Unique Paths&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;B&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/power-set"&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/graph/hamiltonian-cycle"&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/n-queens"&gt;N-Queens Problem&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/uncategorized/knight-tour"&gt;Knight's Tour&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt; &lt;a href="https://dev.tosrc/algorithms/sets/combination-sum"&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking
search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of
a least-cost solution to the problem, in order to discard partial solutions with costs larger than the
lowest-cost solution found so far. Normally BFS traversal in combination with DFS traversal of state-space
tree is being used.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-this-repository"&gt;
  &lt;/a&gt;
  How to use this repository
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may want to run it to check code quality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run lint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm test -- 'LinkedList'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In case if linting or testing is failing try to delete the &lt;code&gt;node_modules&lt;/code&gt; folder and re-install npm packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rm -rf ./node_modules
npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write&lt;br&gt;
tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then just simply run the following command to test if your playground code works as expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm test -- 'playground'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useful-information"&gt;
  &lt;/a&gt;
  Useful Information
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8"&gt;‚ñ∂ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#big-o-notation"&gt;
  &lt;/a&gt;
  Big O Notation
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows.&lt;br&gt;
On the chart below you may find most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFMX-xnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/./assets/big-o-graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFMX-xnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/./assets/big-o-graph.png" alt="Big O graphs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="http://bigocheatsheet.com/"&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Big O Notation&lt;/th&gt;
&lt;th&gt;Computations for 10 elements&lt;/th&gt;
&lt;th&gt;Computations for 100 elements&lt;/th&gt;
&lt;th&gt;Computations for 1000 elements&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(log N)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(N)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(N log N)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;9000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(N^2)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;10000&lt;/td&gt;
&lt;td&gt;1000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(2^N)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;1.26e+29&lt;/td&gt;
&lt;td&gt;1.07e+301&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;O(N!)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3628800&lt;/td&gt;
&lt;td&gt;9.3e+157&lt;/td&gt;
&lt;td&gt;4.02e+2567&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#data-structure-operations-complexity"&gt;
  &lt;/a&gt;
  Data Structure Operations Complexity
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data Structure&lt;/th&gt;
&lt;th&gt;Access&lt;/th&gt;
&lt;th&gt;Search&lt;/th&gt;
&lt;th&gt;Insertion&lt;/th&gt;
&lt;th&gt;Deletion&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Linked List&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Hash Table&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;In case of perfect hash function costs would be O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Binary Search Tree&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;In case of balanced tree costs would be O(log(n))&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Red-Black Tree&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;AVL Tree&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Bloom Filter&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;False positives are possible while searching&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#array-sorting-algorithms-complexity"&gt;
  &lt;/a&gt;
  Array Sorting Algorithms Complexity
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Best&lt;/th&gt;
&lt;th&gt;Average&lt;/th&gt;
&lt;th&gt;Worst&lt;/th&gt;
&lt;th&gt;Memory&lt;/th&gt;
&lt;th&gt;Stable&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Bubble sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Insertion sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Selection sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Heap sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n¬†log(n)&lt;/td&gt;
&lt;td&gt;n¬†log(n)&lt;/td&gt;
&lt;td&gt;n¬†log(n)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Merge sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n¬†log(n)&lt;/td&gt;
&lt;td&gt;n¬†log(n)&lt;/td&gt;
&lt;td&gt;n¬†log(n)&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Quick sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n¬†log(n)&lt;/td&gt;
&lt;td&gt;n¬†log(n)&lt;/td&gt;
&lt;td&gt;n&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;log(n)&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Quicksort is usually done in-place with O(log(n)) stack space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Shell sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n¬†log(n)&lt;/td&gt;
&lt;td&gt;depends on gap sequence&lt;/td&gt;
&lt;td&gt;n¬†(log(n))&lt;sup&gt;2&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Counting sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n + r&lt;/td&gt;
&lt;td&gt;n + r&lt;/td&gt;
&lt;td&gt;n + r&lt;/td&gt;
&lt;td&gt;n + r&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;r - biggest number in array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Radix sort&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;n * k&lt;/td&gt;
&lt;td&gt;n * k&lt;/td&gt;
&lt;td&gt;n * k&lt;/td&gt;
&lt;td&gt;n + k&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;k - length of longest key&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#project-backers"&gt;
  &lt;/a&gt;
  Project Backers
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You may support this project via ‚ù§Ô∏èÔ∏è &lt;a href="https://github.com/sponsors/trekhleb"&gt;GitHub&lt;/a&gt; or ‚ù§Ô∏èÔ∏è &lt;a href="https://www.patreon.com/trekhleb"&gt;Patreon&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/trekhleb/javascript-algorithms/blob/master/BACKERS.md"&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;‚àë = 0&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÑπÔ∏è A few more &lt;a href="https://trekhleb.dev/projects/"&gt;projects&lt;/a&gt; and &lt;a href="https://trekhleb.dev/blog/"&gt;articles&lt;/a&gt; about JavaScript and algorithms on &lt;a href="https://trekhleb.dev"&gt;trekhleb.dev&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Train a Deep Neural Network to recognize handwritten digits with Dannjs.</title>
      <author>Matias Vazquez-Levi</author>
      <pubDate>Fri, 13 Aug 2021 15:07:00 +0000</pubDate>
      <link>https://dev.to/matiasvlevi/train-a-deep-neural-network-to-recognize-handwritten-digits-with-dannjs-d5o</link>
      <guid>https://dev.to/matiasvlevi/train-a-deep-neural-network-to-recognize-handwritten-digits-with-dannjs-d5o</guid>
      <description>&lt;p&gt;A famous task performed by Deep models is handwritten digit recognition.&lt;br&gt;
Here is how you can create your model &amp;amp; train it with some images of digits.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Nodejs&lt;/li&gt;
&lt;li&gt;Some knowledge about neural networks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#using"&gt;
  &lt;/a&gt;
  Using
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/easy-mnist"&gt;easy-mnist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dannjs.org/"&gt;Dannjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/fs"&gt;fs&lt;/a&gt; (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mnist"&gt;
  &lt;/a&gt;
  MNIST
&lt;/h3&gt;

&lt;p&gt;We're going to use a dataset called MNIST. You can read more about it &lt;a href="https://en.wikipedia.org/wiki/MNIST_database"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;MNIST is a dataset containing a total of 70 000 28x28 images of handwritten digits.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29f1O4P0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/800/1%2ALyRlX__08q40UJohhJG9Ow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29f1O4P0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/800/1%2ALyRlX__08q40UJohhJG9Ow.png"&gt;&lt;/a&gt;&lt;br&gt;
It contains an image and a label in order to identify the digit.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#mnist-to-a-deep-model"&gt;
  &lt;/a&gt;
  MNIST to a Deep Model
&lt;/h3&gt;

&lt;p&gt;To show these images to our Deep model, we're going to need to feed every pixel with values ranging in-between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. A &lt;code&gt;0&lt;/code&gt; would represent a black pixel and a &lt;code&gt;1&lt;/code&gt; would represent a white pixel. &lt;/p&gt;

&lt;p&gt;The image below demonstrates this very well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S0yN4Jb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dudeperf3ct.github.io/images/mnist_cnn_files/mnist_cnn_keras_8_0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0yN4Jb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dudeperf3ct.github.io/images/mnist_cnn_files/mnist_cnn_keras_8_0.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could see a 28 by 28 image as an array of 784 values. This is how we are going to feed the images to our neural network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2DN89eHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BnqTxnh/mnist-Image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DN89eHy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BnqTxnh/mnist-Image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When feeding our model with image data, we also need to give the desired output in order to train it. In the image above, the neuron labeled 6 is circled to demonstrate this.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Now that we understand how we are going to train our MNIST model, let's get started!&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;Start by initiating an npm project with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to access the dataset, install the MNIST npm package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i easy-mnist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are also going to install our Neural Network library, &lt;a href="https://dannjs.org/"&gt;Dannjs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i dannjs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import-the-dataset"&gt;
  &lt;/a&gt;
  Import the dataset
&lt;/h3&gt;

&lt;p&gt;In our &lt;code&gt;index.js&lt;/code&gt; file, were going to require the dataset. We are creating a training set of &lt;code&gt;60 000&lt;/code&gt; images and a testing set of &lt;code&gt;10 000&lt;/code&gt; images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;easy-mnist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;makeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to create two sets, the training set &amp;amp; the testing set.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Luckily, our dataset of images already comes in 784-length array format and the labels come as a 10-length array.&lt;br&gt;
We can access those like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// For the training set&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;

&lt;span class="c1"&gt;// For the testing set&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;
&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;testdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-our-model"&gt;
  &lt;/a&gt;
  Creating our Model
&lt;/h3&gt;

&lt;p&gt;We first need to create a model, for this, we are going to import dannjs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dannjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;dann&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then create a Dann model with 784 inputs and 10 outputs. We're also going to add two hidden neuron layers with &lt;code&gt;leakyReLU&lt;/code&gt; activations and then set the learning rate to &lt;code&gt;0.0001&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;784&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHiddenLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;leakyReLU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHiddenLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;leakyReLU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeWeights&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then log the model to confirm the model creation was successful&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#training-the-model"&gt;
  &lt;/a&gt;
  Training the model
&lt;/h3&gt;

&lt;p&gt;For our model to be trained, we need to iterate through the whole training set. Having completed the entirety of the training set is what we call an epoch. In order to successfully train a model, we need multiple epochs.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;This is what 1 epoch looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then loop multiple epochs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;epochs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;epochs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;traindata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Completed epoch &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; with a loss of &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With 10 epochs, depending on the model you created &amp;amp; your CPU's performance, it might take a few minutes. 10 epochs might not even be enough to train a very accurate model.&lt;/p&gt;

&lt;p&gt;Around 100 epochs, your model might reach an acceptable level of accuracy.&lt;/p&gt;

&lt;p&gt;The number of epochs &amp;amp; training time all depend on a lot of factors about the model. Experiment with the creation of a neural network, try adding one more layer, changing activation functions, or changing the learning rate, and see what happens.&lt;/p&gt;

&lt;p&gt;Since it might take a while to train, it is a good idea to save a model in order to keep training progress.&lt;br&gt;
Here is how you can do so using &lt;code&gt;fs&lt;/code&gt;, (do not forget to install it with &lt;code&gt;npm i fs&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Import fs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Saving our model to &lt;code&gt;myModel.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myModel.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Loading back our model from &lt;code&gt;myModel.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myModel.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Dann&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFromJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So there you have it! How to train an MNIST model with Dannjs.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;We are hosting a MNIST model contest, the most accurate model wins!&lt;br&gt;
You can submit your model &lt;a href="https://dannjs.org/drawNumber"&gt;here&lt;/a&gt; &amp;amp; try it out live.&lt;br&gt;
Results are posted in our discord server here is the &lt;a href="https://discord.gg/yeAqHsGdtU"&gt;invite link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dannjs</category>
      <category>machinelearning</category>
      <category>node</category>
      <category>deeplearning</category>
    </item>
    <item>
      <title>Validando o schema de arquivos XML com .Net e C#</title>
      <author>Silvair L. Soares</author>
      <pubDate>Fri, 13 Aug 2021 15:05:06 +0000</pubDate>
      <link>https://dev.to/silvairsoares/validando-o-schema-de-arquivos-xml-com-net-e-c-58of</link>
      <guid>https://dev.to/silvairsoares/validando-o-schema-de-arquivos-xml-com-net-e-c-58of</guid>
      <description>&lt;p&gt;Embora muitas pessoas possam torcer o nariz ao ouvirem termos como: &lt;em&gt;Webservices&lt;/em&gt;, &lt;em&gt;SOAP&lt;/em&gt;, XML, &lt;em&gt;schema&lt;/em&gt;, XSD, WSDL, etc. S√£o tecnologias que teremos que lidar em algum momento da nossa vida profissional.&lt;/p&gt;

&lt;p&gt;Protocolos mais leves como REST, gRPC, GraphQL, etc est√£o cada vez mais se popularizando, mas existem grandes projetos (sem previs√£o de migra√ß√£o), consolidados que utilizam o protocolo SOAP para troca de informa√ß√µes entre sistemas.&lt;/p&gt;

&lt;p&gt;No Brasil, dois grandes exemplos s√£o a &lt;strong&gt;&lt;a href="https://www.nfe.fazenda.gov.br/portal/principal.aspx"&gt;Nota Fiscal Eletr√¥nica - NF-e&lt;/a&gt;&lt;/strong&gt; e o &lt;strong&gt;&lt;a href="https://www.correios.com.br/atendimento/ferramentas/sistemas/arquivos/web-service-de-rastreamento"&gt;Web Service de Rastreamento dos Correios&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O que vamos aprender neste artigo?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-entender-os-fundamentos-do-protocolo-soap"&gt;
  &lt;/a&gt;
  1 - Entender os fundamentos do protocolo SOAP;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#2-criar-um-servi%C3%A7o-gen%C3%A9rico-para-validar-qualquer-arquivo-xml-com-diferentes-schemas"&gt;
  &lt;/a&gt;
  2 - Criar um servi√ßo gen√©rico para validar qualquer arquivo XML, com diferentes schemas;
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#3-criar-uma-api-rest-em-net-para-fazer-a-valida%C3%A7%C3%A3o-de-arquivos-xml"&gt;
  &lt;/a&gt;
  3 - Criar uma API REST em .Net para fazer a valida√ß√£o de arquivos XML;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#1-o-protocolo-soap"&gt;
  &lt;/a&gt;
  1. O protocolo SOAP
&lt;/h2&gt;

&lt;p&gt;Se existe um requisito comum, para a maioria das aplica√ß√µes corporativas, √© a integra√ß√£o entre diferentes sistemas. Nenhum software √© (ou n√£o deveria ser) uma ilha!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nwtPK5sL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sl8fdo7xgrkk87l5zrg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nwtPK5sL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4sl8fdo7xgrkk87l5zrg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Se este for o seu caso, inevitavelmente em algum momento voc√™ precisar√° consumir algum servi√ßo remoto, implementado por terceiros, durante o ciclo de vida operacional do seu sistema.&lt;/p&gt;

&lt;p&gt;O protocolo &lt;em&gt;SOAP - Simple Object Access Protocol&lt;/em&gt; (em portugu√™s, Protocolo Simples de Acesso √† Objeto) possibilita que esta tarefa seja executada de forma bastante eficiente.&lt;/p&gt;

&lt;p&gt;SOAP utiliza o protocolo HTTP para transportar os dados. E devido ao fato de utilizar um protocolo padr√£o, permite que sistemas constru√≠dos com diferentes linguagens de programa√ß√£o e sendo executados em diferentes sistemas operacionais, troquem informa√ß√µes de forma transparente.&lt;/p&gt;

&lt;p&gt;Al√©m disso, permite que o produtor destes servi√ßos remotos, defina o formato da entrada de dados que ser√° aceito, utilizando para isto os &lt;em&gt;XML Schema - XML Schema Definition&lt;/em&gt; (em portugu√™s, Defini√ß√£o de Esquema XML).&lt;/p&gt;

&lt;p&gt;S√£o arquivos com a extens√£o .xsd, com os seguintes tipos de conte√∫do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsd:schema&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsd:complexType&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"TEndereco"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsd:sequence&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"logradouro"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"complemento"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"bairro"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CEP"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsd:simpleType&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;xsd:restriction&lt;/span&gt; &lt;span class="na"&gt;base=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;xsd:maxLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"9"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;xsd:minLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"9"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/xsd:restriction&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/xsd:simpleType&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/xsd:element&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/xsd:sequence&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsd:schema&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ÄÉ&lt;br&gt;
No exemplo acima, foi definido uma entrada de endere√ßos, chamada de &lt;strong&gt;TEndereco&lt;/strong&gt;, contendo os campos: &lt;strong&gt;Logradouro&lt;/strong&gt;, &lt;strong&gt;Numero&lt;/strong&gt;, &lt;strong&gt;Complemento&lt;/strong&gt;, &lt;strong&gt;Bairro&lt;/strong&gt; e &lt;strong&gt;CEP&lt;/strong&gt;, cada um com a sua respectiva regra de preenchimento. Atrav√©s deste modelo, poderemos utilizar o tipo &lt;strong&gt;TEndereco&lt;/strong&gt; em outros tipos de dados:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsd:schema&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsd:include&lt;/span&gt; &lt;span class="na"&gt;schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;"TEndereco.xsd"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pessoa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsd:complexType&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:sequence&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"nome"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;xsd:simpleType&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;xsd:restriction&lt;/span&gt; &lt;span class="na"&gt;base=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;xsd:maxLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"20"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;xsd:minLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/xsd:restriction&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/xsd:simpleType&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/xsd:element&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"sobrenome"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;xsd:simpleType&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;xsd:restriction&lt;/span&gt; &lt;span class="na"&gt;base=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;xsd:maxLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"20"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;xsd:minLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/xsd:restriction&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/xsd:simpleType&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/xsd:element&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"endereco"&lt;/span&gt; &lt;span class="na"&gt;minOccurs=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;maxOccurs=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"TEndereco"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/xsd:sequence&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsd:element&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsd:schema&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No exemplo acima, o tipo &lt;strong&gt;TEndereco&lt;/strong&gt; foi utilizado no tipo &lt;strong&gt;TPessoa&lt;/strong&gt;. Desta forma, √© poss√≠vel definir todas as regras do tipo de entrada aceito pelo webservice SOAP.&lt;/p&gt;

&lt;p&gt;Para quem trabalha com orienta√ß√£o a objetos, os &lt;em&gt;schemas&lt;/em&gt; seriam as classes, j√° os arquivos XML que transportam os dados, seriam uma inst√¢ncia desta classe.&lt;/p&gt;

&lt;p&gt;Esta foi apenas uma pequena introdu√ß√£o ao protocolo SOAP, como n√£o √© objetivo deste artigo aprofundar neste tema, deixo aqui a fonte oficial de informa√ß√µes, para quem pretende entender de forma mais ampla, este vasto conte√∫do:&lt;br&gt;
&lt;a href="https://www.w3.org/TR/soap/"&gt;https://www.w3.org/TR/soap/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-criando-um-servi%C3%A7o-gen%C3%A9rico-para-validar-qualquer-schema-de-diferentes-tipos-de-xml"&gt;
  &lt;/a&gt;
  2. Criando um servi√ßo gen√©rico para validar qualquer schema de diferentes tipos de XML
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#21-ambiente-necess%C3%A1rio"&gt;
  &lt;/a&gt;
  2.1. Ambiente necess√°rio
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt; (&lt;a href="https://code.visualstudio.com/Download"&gt;https://code.visualstudio.com/Download&lt;/a&gt;)&lt;br&gt;
&lt;strong&gt;.Net 5.0 SDK&lt;/strong&gt; (&lt;a href="https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.400-windows-x64-installer"&gt;https://dotnet.microsoft.com/download/dotnet/thank-you/sdk-5.0.400-windows-x64-installer&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Vamos criar uma API simples, que receber√° uma &lt;em&gt;string&lt;/em&gt; que representa um arquivo XML validar√° o &lt;em&gt;schema&lt;/em&gt;, e caso econtre alguma inconsist√™ncia, retornar√° uma mensagem detalhando todos os problemas encontrados.&lt;/p&gt;

&lt;p&gt;Para a cria√ß√£o da WEB API, ap√≥s a instala√ß√£o do &lt;strong&gt;.Net 5.0 SDK&lt;/strong&gt;, temos dispon√≠vel uma poderosa ferramenta de linha de comando que nos ajudar√° inclusive com a cria√ß√£o do projeto.&lt;/p&gt;

&lt;p&gt;Abra um diret√≥rio qualquer do seu computador, clique na barra de endere√ßos, digite o comando &lt;code&gt;CMD&lt;/code&gt; e tecle ENTER.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RV1KeHgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zgg2ldkz7eocatmat4s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RV1KeHgW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zgg2ldkz7eocatmat4s.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao fazer isto, o prompt de comando do Windows, abrir√° o respectivo diret√≥rio automaticamente:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jAYa8fCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfxu500jm2ul2vj9i9mg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jAYa8fCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfxu500jm2ul2vj9i9mg.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Digite o comando &lt;code&gt;dotnet new webapi --name web.api.xml.schema.validation&lt;/code&gt; e tecle ENTER.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75sCkaSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkzdjdehd5tldivjv4mt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75sCkaSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zkzdjdehd5tldivjv4mt.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ap√≥s alguns segundos, teremos um projeto do tipo &lt;strong&gt;WEB API&lt;/strong&gt;, criado e totalmente funcional.&lt;/p&gt;

&lt;p&gt;Para acess√°-lo no &lt;em&gt;Visual Studio Code&lt;/em&gt;, navegue para o diret√≥rio do projeto no prompt de comando, digite &lt;code&gt;code .&lt;/code&gt; e tecle e ENTER.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CG09T_qb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a8plqridbcex2tizs03.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CG09T_qb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a8plqridbcex2tizs03.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A tela do &lt;em&gt;Visual Studio Code&lt;/em&gt; ser√° aberta automaticamente, com o projeto previamente criado, j√° carregado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2ESluHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9dwh1euh8wypac9exiq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2ESluHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9dwh1euh8wypac9exiq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na primeira execu√ß√£o, o &lt;em&gt;Visual Studio Code&lt;/em&gt; identificar√° a linguagem na qual o projeto est√° sendo desenvolvida e perguntar√° se deseja incluir a extens√£o para o &lt;strong&gt;C#&lt;/strong&gt;, permita que ele fa√ßa a instala√ß√£o, clicando no bot√£o &lt;strong&gt;Install&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Para executar o projeto de teste, basta acessar o terminal do &lt;strong&gt;Visual Studio Code (CTRL + ‚Äò)&lt;/strong&gt; e digitar o comando: &lt;code&gt;dotnet run&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IHeRDerB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtdh4ks7ta4zl880s216.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IHeRDerB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtdh4ks7ta4zl880s216.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A partir deste momento, basta acessar o endere√ßo: &lt;a href="https://localhost:5001/swagger"&gt;https://localhost:5001/swagger&lt;/a&gt; no browser para ver a API sendo executada.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayYN8D6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7nbrytaen6dev4wrv1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayYN8D6W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7nbrytaen6dev4wrv1f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;√â incr√≠vel como √© f√°cil criar e executar uma API no .Net n√©!&lt;/p&gt;

&lt;p&gt;A seguir, criaremos um servi√ßo injet√°vel (inje√ß√£o de depend√™ncia) que ser√° utilizando no controller respons√°vel por receber e validar o arquivo xml.&lt;/p&gt;

&lt;p&gt;Crie o diret√≥rio &lt;strong&gt;Services&lt;/strong&gt; na raiz do projeto, com os seguintes subdiret√≥rios: &lt;strong&gt;ServiceInterfaces&lt;/strong&gt; e &lt;strong&gt;Services&lt;/strong&gt;.&lt;br&gt;
Crie o arquivo &lt;strong&gt;IXMLValidationService.cs&lt;/strong&gt; no diret√≥rio &lt;strong&gt;\Services\XMLValidation\ServiceInterfaces&lt;/strong&gt;, com o seguinte conte√∫do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.InterfacesServicos&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IXMLValidationService&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;        
        &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;XMLValidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aiMHQqpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kqbgvn9v9oc79uqu9bz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aiMHQqpj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kqbgvn9v9oc79uqu9bz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos criar uma classe que implementar√° o m√©todo &lt;strong&gt;XMLValidate&lt;/strong&gt; definido na interface &lt;strong&gt;IXMLValidationService&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Crie o arquivo &lt;strong&gt;XMLValidationService.cs&lt;/strong&gt; no diret√≥rio &lt;strong&gt;\Services\XMLValidation\Services&lt;/strong&gt;, com o seguinte conte√∫do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.InterfacesServicos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.Servicos&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XMLValidationService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IXMLValidationService&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;        

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neste momento, o Visual Studio Code exibir√° um erro, pois n√£o estamos ainda, implementando o &lt;strong&gt;XMLValidate&lt;/strong&gt; definido na interface &lt;strong&gt;IXMLValidationService&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qxrG-Na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfooq9xgh888zctl13ep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qxrG-Na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfooq9xgh888zctl13ep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para resolver este problema, posicione o mouse sobre o √≠cone da l√¢mpada amarela no in√≠cio da linha 5 e clique na op√ß√£o &lt;strong&gt;Implementar a interface&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YVEhQx9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zy0ozpchqfk62g02my13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YVEhQx9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zy0ozpchqfk62g02my13.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A assinatura do m√©todo ser√° criada automaticamente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.InterfacesServicos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.Servicos&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XMLValidationService&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IXMLValidationService&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;XMLValidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotImplementedException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos dar in√≠cio ao processo de valida√ß√£o do schema de fato. &lt;br&gt;
Para isto, crie o subdiret√≥rio &lt;strong&gt;Shemas&lt;/strong&gt; dentro do diret√≥rio &lt;strong&gt;\Services\XMLValidation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Crie no diret√≥rio &lt;strong&gt;\Shemas&lt;/strong&gt; os seguintes arquivos com seus respectivos conte√∫dos:&lt;/p&gt;

&lt;p&gt;Arquivo: &lt;strong&gt;TEndereco.xsd&lt;/strong&gt;&lt;br&gt;
Conte√∫do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsd:schema&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsd:complexType&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"TEndereco"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsd:sequence&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"logradouro"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"complemento"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"bairro"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"CEP"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsd:simpleType&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;xsd:restriction&lt;/span&gt; &lt;span class="na"&gt;base=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;xsd:maxLength&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"9"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;xsd:minLength&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"9"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/xsd:restriction&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/xsd:simpleType&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/xsd:element&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/xsd:sequence&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsd:schema&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arquivo: &lt;strong&gt;TPessoa.xsd&lt;/strong&gt;&lt;br&gt;
Conte√∫do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;xsd:schema&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsd=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsd:include&lt;/span&gt; &lt;span class="na"&gt;schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;"TEndereco.xsd"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"pessoa"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;xsd:complexType&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;xsd:sequence&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"nome"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;xsd:simpleType&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;xsd:restriction&lt;/span&gt; &lt;span class="na"&gt;base=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;xsd:maxLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"20"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;xsd:minLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/xsd:restriction&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/xsd:simpleType&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/xsd:element&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"sobrenome"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;xsd:simpleType&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;xsd:restriction&lt;/span&gt; &lt;span class="na"&gt;base=&lt;/span&gt;&lt;span class="s"&gt;"xsd:string"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;xsd:maxLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"20"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;xsd:minLength&lt;/span&gt; &lt;span class="na"&gt;value =&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/xsd:restriction&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/xsd:simpleType&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/xsd:element&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;xsd:element&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"endereco"&lt;/span&gt; &lt;span class="na"&gt;minOccurs=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;maxOccurs=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"TEndereco"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/xsd:sequence&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/xsd:element&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/xsd:schema&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Estes arquivos s√£o o schemas que validar√£o o conte√∫do do arquivo xml recebido pela nossa WEB API.&lt;/p&gt;

&lt;p&gt;O nosso m√©todo &lt;strong&gt;XMLValidate&lt;/strong&gt;, cont√©m um par√¢metro do tipo string que ser√° utilizada para criar um objeto do tipo &lt;strong&gt;System.Xml.XmlDocument&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Fa√ßa a seguinte modifica√ß√£o no m√©todo &lt;strong&gt;XMLValidate&lt;/strong&gt; da classe &lt;strong&gt;XMLValidationService&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Xml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.InterfacesServicos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.Servicos&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XMLValidationService&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IXMLValidationService&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;XMLValidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;XmlDocument&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;XmlDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;            
            &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;                
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Houve um erro ao gerar um documento XML com os dados recebidos. "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isto, teremos um servi√ßo que recebe uma string que representa um documento XML, tenta instanciar um &lt;strong&gt;XmlDocument&lt;/strong&gt; e retorna uma exce√ß√£o, caso o XML esteja com uma m√° forma√ß√£o.&lt;/p&gt;

&lt;p&gt;Lembre-se, o que validaremos √© um schema do XML e para isto, o conte√∫do XML dever√° no m√≠nimo ser um XML bem formado.&lt;/p&gt;

&lt;p&gt;Para criar o mecanismo de valida√ß√£o, utilizaremos o &lt;strong&gt;Validate(ValidationEventHandler validationEventHandler)&lt;/strong&gt; do namespace &lt;strong&gt;System.Xml.XmlDocument&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Portanto, fa√ßa as seguintes modifica√ß√µes na classe &lt;strong&gt;XMLValidationService&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Xml&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Xml.Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.InterfacesServicos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.Servicos&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XMLValidationService&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IXMLValidationService&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;falhas&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;XMLValidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;XmlDocument&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;XmlDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;LoadXml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XML&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;falhas&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;ValidarXmlPessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;falhas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;falhas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Arquivo validado com sucesso!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Houve um erro ao gerar um documento XML com os dados recebidos. "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Executa a valida√ß√£o de schema do XML do tipo "TPessoa", com base nos arquivos .xsd&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ValidarXmlPessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XmlDocument&lt;/span&gt; &lt;span class="n"&gt;dados&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;retorno&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// Inclui os shemas XSD para valida√ß√£o do documento do tipo "TPessoa" e suas depend√™ncias&lt;/span&gt;
            &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;XSDFiles&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;                
                &lt;span class="n"&gt;XSDFiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"Services\XMLValidation\Shemas\TPessoa.xsd"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;XSDFiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"Services\XMLValidation\Shemas\TEndereco.xsd"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//XSDFiles.Add(@"Services\XMLValidation\Shemas\TiposBasicos.xsd");                &lt;/span&gt;
                &lt;span class="c1"&gt;//XSDFiles.Add(@"Services\XMLValidation\Shemas\produto.xsd");&lt;/span&gt;
                &lt;span class="c1"&gt;//XSDFiles.Add(@"Services\XMLValidation\Shemas\produto.xsd");&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Aciona o m√©todo gen√©rico de valida√ß√µes de schemas, mas que neste contexto, estar√° validando apenas os tipos "TEndereco" e "TPessoa"&lt;/span&gt;
            &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;validacao&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;ValidarDocumentoXML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dados&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;XSDFiles&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validacao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;retorno&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Ocorreram os seguintes erros na valida√ß√£o:\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;validacao&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;retorno&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;retorno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Este √© um m√©todo gen√©rico, que serve para validar qualquer o schema de qualquer tipo de arquivo xml&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;ValidarDocumentoXML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XmlDocument&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ICollection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;XSDFiles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Limpa a lista de falhas de schema&lt;/span&gt;
            &lt;span class="n"&gt;falhas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Adiciona todos os arquivos .xsd ao fluxo de valida√ß√£o&lt;/span&gt;
                &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;XSDFiles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Schemas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Houve um erro ao incluir os arquivos XSD para validar o arquivo XML.\n"&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Delegate respons√°vel por manipular os erros ocorridos: ValidationCallBack()&lt;/span&gt;
                &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ValidationCallBack&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XmlSchemaValidationException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Houve um erro executar a valida√ß√£o do documento XML. "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;falhas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt; &lt;/span&gt;
        &lt;span class="c1"&gt;/// Manipulador de erros do xml&lt;/span&gt;
        &lt;span class="c1"&gt;/// Sua finalidade √© obter as mensagens de erro (disparadas pelo m√©todo "ValidarDocumentoXML") e as incluir a vari√°vel "falhas"&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt; &lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ValidationCallBack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ValidationEventArgs&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Podem ser gerados dois tipos de falhas ("XmlSeverityType"), portanto, a estrutura abaixo, separa os erros entre "Alerta (Warning)" ou "Erros (Error)"&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Severity&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;XmlSeverityType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Warning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;falhas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Alerta: "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;TraduzMensagensDeErro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" (Caminho: "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;ObtemCaminho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Severity&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;XmlSeverityType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;falhas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Erro: "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;TraduzMensagensDeErro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" (Caminho: "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;ObtemCaminho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Durante a valida√ß√£o do schema de um arquivo xml, este m√©todo auxilia na obten√ß√£o do caminho completo da tag que causou algum problema de valida√ß√£o&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;ObtemCaminho&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ValidationEventArgs&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Captura a refer√™ncia para a tag que causou o problema (falha de shema)&lt;/span&gt;
            &lt;span class="n"&gt;XmlSchemaValidationException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XmlSchemaValidationException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;sourceObject&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sourceObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XmlElement&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;XmlElement&lt;/span&gt; &lt;span class="n"&gt;tagProblema&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XmlElement&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;sourceObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;GetCaminhoTagXML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tagProblema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParentNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tagProblema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Devolve o caminho completo de um elemento de um documento XML, no padr√£o: "\elemento_raiz\elemento2\elemento3\..."&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;GetCaminhoTagXML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XmlNode&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParentNode&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ParentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NodeType&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;XmlNodeType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Elemento atual √© um n√≥ com mais itens&lt;/span&gt;
                &lt;span class="c1"&gt;// Chama o pr√≥prio m√©todo recursivamente, para obter toda a √°rvore da tag atual&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;GetCaminhoTagXML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;@"/"&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class="c1"&gt;/// Altera o texto das mensagens de valida√ß√£o do schema, de ingl√™s para portugu√™s&lt;/span&gt;
        &lt;span class="c1"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;TraduzMensagensDeErro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The value of the 'Algorithm' attribute does not equal its fixed value."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"O valor do atributo 'Algorithm' n√£o √© igual ao seu valor fixo."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The '"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"O elemento '"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"element is invalid"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"√© inv√°lido"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The value"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"O valor"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"is invalid according to its datatype"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"√© inv√°lido de acordo com o seu tipo de dados"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Pattern constraint failed."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The actual length is less than the MinLength value"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"O comprimento real √© menor que o valor MinLength"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" in namespace 'http://www.w3.org/2000/09/xmldsig#'."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The element"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"O elemento"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"has invalid child element"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"tem um elemento filho inv√°lido"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"List of possible elements expected:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Lista de poss√≠veis elementos esperados:"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Enumeration constraint failed."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/09/xmldsig#:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The input is not a valid Base-64 string as it contains a non-base 64 character, more than two padding characters, or an illegal character among the padding characters."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"A entrada n√£o √© uma string Base-64 v√°lida, pois cont√©m um caractere n√£o base 64, mais de dois caracteres de preenchimento ou um caractere ilegal entre os caracteres de preenchimento."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The required attribute"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"O atributo obrigat√≥rio"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"is missing"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"est√° ausente"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"has incomplete content"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"tem conte√∫do incompleto"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"as well as"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bem como"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como a classe ficou um pouco extensa, utilizei coment√°rios em pontos espec√≠ficos para explicar cada detalhe que est√° sendo executado.&lt;/p&gt;

&lt;p&gt;Ap√≥s estas modifica√ß√µes, temos o servi√ßo para valida√ß√£o de XML completamente funcional, para utilizarmos, basta injet√°-lo no controller, faremos isto no m√©todo &lt;strong&gt;ConfigureServices&lt;/strong&gt; da classe &lt;strong&gt;Startup&lt;/strong&gt;. Para isto, fa√ßa a seguinte modifica√ß√£o no arquivo &lt;strong&gt;Startup.cs&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Mas primeiro, vamos incluir uma refer√™ncia em nosso arquivo &lt;strong&gt;web.api.xml.schema.validation.csproj&lt;/strong&gt; para o pacote &lt;strong&gt;Microsoft.AspNetCore.Mvc.NewtonsoftJson&lt;/strong&gt;, que nos auxiliar√° a trabalhar com arquivos XML nos controllers da API.&lt;/p&gt;

&lt;p&gt;Edite o conte√∫do do arquivo &lt;strong&gt;web.api.xml.schema.validation.csproj&lt;/strong&gt; incluindo a linha:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.AspNetCore.Mvc.NewtonsoftJson"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.3"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deixando-o da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk.Web"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net5.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Swashbuckle.AspNetCore"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.6.3"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.AspNetCore.Mvc.NewtonsoftJson"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"5.0.3"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ap√≥s adicionar a refer√™ncia para a biblioteca de serializa√ß√£o &lt;strong&gt;NewtonSoft* edite o conte√∫do do arquivo **Startup.cs&lt;/strong&gt;, deixando-o da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Hosting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.Configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.DependencyInjection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.Hosting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.OpenApi.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Newtonsoft.Json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Newtonsoft.Json.Converters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Newtonsoft.Json.Serialization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.InterfacesServicos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.Servicos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Startup&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Startup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IConfiguration&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// This method gets called by the runtime. Use this method to add services to the container.&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ConfigureServices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Configura√ß√µes da inje√ß√£o de depend√™ncia do servi√ßo validador de documentos XML&lt;/span&gt;
            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IXMLValidationService&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XMLValidationService&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddSwaggerGen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SwaggerDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"v1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OpenApiInfo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"web.api.xml.schema.validation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"v1"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="c1"&gt;//Inclus√£o do framework de serializa√ß√£o NewtonSoft&lt;/span&gt;
            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddControllers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;AddNewtonsoftJson&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="c1"&gt;//Ajuste para permitir receber conteudos do tipo XML nos controllers da API&lt;/span&gt;
            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddMvc&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;SetCompatibilityVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CompatibilityVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Version_3_0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddNewtonsoftJson&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nf"&gt;AddXmlSerializerFormatters&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
              &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddXmlDataContractSerializerFormatters&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationBuilder&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IWebHostEnvironment&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsDevelopment&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSwagger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseSwaggerUI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SwaggerEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/swagger/v1/swagger.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"web.api.xml.schema.validation v1"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseEndpoints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoints&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MapControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-criando-o-endpoint-para-receber-os-arquivos-xml"&gt;
  &lt;/a&gt;
  3. Criando o endpoint para receber os arquivos XML
&lt;/h3&gt;

&lt;p&gt;A pr√≥xima e √∫ltima etapa, ser√° a cria√ß√£o do controller que receber√° a string do XML e ir√° submet√™-la √† valida√ß√£o, por meio do servi√ßo &lt;strong&gt;XMLValidationService&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Crie no diret√≥rio &lt;strong&gt;\Controllers&lt;/strong&gt; o arquivo &lt;strong&gt;XMLValidationController.cs&lt;/strong&gt; com o seguinte conte√∫do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.ComponentModel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;web.api.xml.schema.validation.Services.InterfacesServicos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Valida√ß√£o de XML"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XMLValidationController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Interface do servi√ßo que valida o arquivo XML e ser√° injetado automaticamente em tempo de execu√ß√£o&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IXMLValidationService&lt;/span&gt; &lt;span class="n"&gt;_XMLValidationService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;XMLValidationController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IXMLValidationService&lt;/span&gt; &lt;span class="n"&gt;XMLValidationService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_XMLValidationService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XMLValidationService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"api/validarxml/"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;Validar&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;FromBody&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;strDocumento&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_XMLValidationService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;XMLValidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strDocumento&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ÄÉ&lt;br&gt;
Todo o c√≥digo da aplica√ß√£o est√° pronto. Agora, ao executar nossa WEB API e navegar para o endere√ßo: &lt;strong&gt;&lt;a href="https://localhost:5001/swagger"&gt;https://localhost:5001/swagger&lt;/a&gt;&lt;/strong&gt;, teremos acesso ao novo endpoint &lt;strong&gt;XMLValidation&lt;/strong&gt; conforme mostra a imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lxOHkNaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsyea0i77pup9byz7loz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lxOHkNaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bsyea0i77pup9byz7loz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao clicar no bot√£o &lt;strong&gt;Try it out&lt;/strong&gt; podemos testar o nosso mecanismo de valida√ß√£o, usando o seguinte &lt;em&gt;payload&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;"&lt;span class="cp"&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pessoa&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nome&amp;gt;&lt;/span&gt;Silvair&lt;span class="nt"&gt;&amp;lt;/nome&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;sobrenome&amp;gt;&lt;/span&gt;Leite Soares&lt;span class="nt"&gt;&amp;lt;/sobrenome&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;endereco&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;logradouro&amp;gt;&lt;/span&gt;Rua Goia&lt;span class="nt"&gt;&amp;lt;/logradouro&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;complemento&amp;gt;&lt;/span&gt;Quadra e lote qualquer&lt;span class="nt"&gt;&amp;lt;/complemento&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;bairro&amp;gt;&lt;/span&gt;Setor Gentil Meirelles&lt;span class="nt"&gt;&amp;lt;/bairro&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;CEP&amp;gt;&lt;/span&gt;74575-200&lt;span class="nt"&gt;&amp;lt;/CEP&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/endereco&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pessoa&amp;gt;&lt;/span&gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O schema ser√° validado com sucesso, veja na imagem a seguir:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V1htJcSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32og7dheyn2hjcgrnpef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V1htJcSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32og7dheyn2hjcgrnpef.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
‚ÄÉ&lt;br&gt;
Mas se voc√™ fizer qualquer modifica√ß√£o no payload, de forma que o contrato (arquivos .xsd) seja quebrado, a API retornar√° todos os detalhes dos problemas ocorridos. Veja a seguir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;"&lt;span class="cp"&gt;&amp;lt;?xml version='1.0' encoding='UTF-8'?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;pessoa&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nome&amp;gt;&lt;/span&gt;Silvair&lt;span class="nt"&gt;&amp;lt;/nome&amp;gt;&lt;/span&gt;
    **&lt;span class="nt"&gt;&amp;lt;sobrenome/&amp;gt;&lt;/span&gt;**
    &lt;span class="nt"&gt;&amp;lt;endereco&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;logradouro&amp;gt;&lt;/span&gt;Rua Goia&lt;span class="nt"&gt;&amp;lt;/logradouro&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;complemento&amp;gt;&lt;/span&gt;Quadra e lote qualquer&lt;span class="nt"&gt;&amp;lt;/complemento&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;bairro&amp;gt;&lt;/span&gt;Setor Gentil Meirelles&lt;span class="nt"&gt;&amp;lt;/bairro&amp;gt;&lt;/span&gt;
        **&lt;span class="nt"&gt;&amp;lt;ElementoNaoPrevisto&amp;gt;&lt;/span&gt;Texto qualquer&lt;span class="nt"&gt;&amp;lt;/ElementoNaoPrevisto&amp;gt;&lt;/span&gt;**
        &lt;span class="nt"&gt;&amp;lt;CEP&amp;gt;&lt;/span&gt;74575-200&lt;span class="nt"&gt;&amp;lt;/CEP&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/endereco&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pessoa&amp;gt;&lt;/span&gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ÄÉ&lt;br&gt;
Omiti intencionalmente o conte√∫do da tag &lt;strong&gt;sobrenome&lt;/strong&gt; e inclui um elemento n√£o previsto na tag &lt;strong&gt;endereco&lt;/strong&gt;, veja o resultado:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJkhpaX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dss4r581pgjaf46e55p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJkhpaX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dss4r581pgjaf46e55p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Com este passo, conclu√≠mos o nosso projeto de teste. Lembrando que, por mais que estejamos validando os tipos "pessoa" e "endereco" durante este artigo, o servi√ßo que constru√≠mos servir√° para validar qualquer tipo de schema XML. Bastando para isso, incluir os respectivos arquivos .xsd no diret√≥rio &lt;strong&gt;\Shemas&lt;/strong&gt; e fazer algumas pequenas modifica√ß√µes, como por exemplo, criar um endpoint espec√≠fico para cada tipo de arquivo XML a ser validado.&lt;/p&gt;

&lt;p&gt;Todo o c√≥digo constru√≠do durante o projeto est√° dispon√≠vel no seguinte reposit√≥rio do GitHub: &lt;a href="https://github.com/silvairsoares/web.api.xml.schema.validation"&gt;https://github.com/silvairsoares/web.api.xml.schema.validation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Refer√™ncias:&lt;/p&gt;

&lt;p&gt;MACORATTI, Jos√© Carlos. XML - Validando um Documento XML com um Schema (C#). Dispon√≠vel em: &lt;a href="http://www.macoratti.net/11/10/c_vxml1.htm"&gt;http://www.macoratti.net/11/10/c_vxml1.htm&lt;/a&gt;. Acesso em: 13 de ago. de 2021.&lt;/p&gt;

</description>
      <category>webservices</category>
      <category>soap</category>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>üî• Vue Tips #21: A better way to write tests</title>
      <author>Michael Thiessen</author>
      <pubDate>Fri, 13 Aug 2021 15:03:20 +0000</pubDate>
      <link>https://dev.to/michaelthiessen/vue-tips-21-a-better-way-to-write-tests-1ld4</link>
      <guid>https://dev.to/michaelthiessen/vue-tips-21-a-better-way-to-write-tests-1ld4</guid>
      <description>&lt;p&gt;&lt;em&gt;This newsletter was sent out to my list on August 11, 2021. &lt;a href="https://michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt; to get emails like this each week!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;If you're liking these tips and want to go even deeper into Vue, I have two different courses based on your experience level:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beginner to Intermediate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://michaelnthiessen.com/clean-components"&gt;Clean Components&lt;/a&gt; is perfect for &lt;em&gt;all&lt;/em&gt; experience levels, and gives you the tools to be a more productive developer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The course is very well thought out and executed. It opened my eyes to certain things and changed the way I think about my components." ‚Äî¬†Edyta&lt;/p&gt;

&lt;p&gt;"It has brought me a lot of new insights and new perspectives. I just wanted to thank you for that. Totally worth the money." ‚Äî¬†Filip&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out &lt;a href="https://michaelnthiessen.com/clean-components"&gt;Clean Components here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you're more experienced with Vue and want to dive deep into reusability and abstractions, &lt;a href="https://michaelnthiessen.com/clean-components"&gt;Reusable Components&lt;/a&gt; is what you need.&lt;/p&gt;

&lt;p&gt;I give you tools, techniques, and patterns for creating highly reusable components, and for thinking about your code in totally new ways.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"This course is very informative, exceptionally well structured, and with excellent examples. Now I have a lot of ideas for refactoring some of my old code." ‚Äî¬†Ramona&lt;/p&gt;

&lt;p&gt;"Michael is an excellent teacher. He clearly explains each step in building reusable Vue components, and when those concepts should be implemented. Anyone who is interested in a more maintainable Vue codebase would benefit from this course." ‚Äî¬†Lindsay Wardell, host of Views on Vue&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check out &lt;a href="https://michaelnthiessen.com/reusable-components"&gt;Reusable Components here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;‚Äî¬†Michael&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vue-testing-library"&gt;
  &lt;/a&gt;
  üî• Vue Testing Library
&lt;/h2&gt;

&lt;p&gt;One of my favourite tools for testing is &lt;a href="https://testing-library.com/docs/vue-testing-library/intro/"&gt;Vue Testing Library&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;displays correct text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getByText&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Fail the test if this text doesn't exist/&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It builds on top of &lt;code&gt;vue-test-utils&lt;/code&gt;, making it easier to write tests that are closer to how users actually interact with your app.&lt;/p&gt;

&lt;p&gt;Users look for specific text, or look for a button to click. They don't look for the &lt;code&gt;nth child of a div with the class .booking-card-container&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Writing tests this way makes them easier to understand, simpler to write, and more robust against changes to your code. Nothing about this test is concerned with the implementation, so it's unlikely to break even under a heavy refactor.&lt;/p&gt;

&lt;p&gt;If this idea is new to you, I highly encourage you to read more about the Testing Library &lt;a href="https://testing-library.com/docs/guiding-principles"&gt;guiding principles&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-grids-without-holes"&gt;
  &lt;/a&gt;
  üî• Creating Grids Without Holes
&lt;/h2&gt;

&lt;p&gt;If you're using CSS grid with different sized items, you'll find that you end up with gaps here and there. You can force the browser to fill those holes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-auto-flow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;dense&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind, this will break the ordering of your elements, which also breaks the tab order.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;grid-auto-flow&lt;/code&gt; property also takes two other interesting values: &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;. By default it will fill each row one by one, but you can set it to fill by column instead.&lt;/p&gt;

&lt;p&gt;You can also combine the two and get a dense column-based ordering!&lt;/p&gt;

&lt;p&gt;More details and a good example illustrating how this works &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow"&gt;on MDN&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#25-vue-tips-you-need-to-know"&gt;
  &lt;/a&gt;
  üìú 25 Vue Tips You Need to Know
&lt;/h2&gt;

&lt;p&gt;I collected 25 of the tips from this newsletter and compiled them into one (long) article. Great for reference or for reading through some tips you may have missed (or forgotten about!).&lt;/p&gt;

&lt;p&gt;Surprisingly, it's already become the 9th most popular Vue article on DEV of all time!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/michaelthiessen/25-vue-tips-you-need-to-know-2h70"&gt;25 Vue Tips You Need to Know&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%9E-news-vue-32-released"&gt;
  &lt;/a&gt;
  üóû News: Vue 3.2 Released
&lt;/h2&gt;

&lt;p&gt;The latest version of Vue, &lt;em&gt;Quintessential Quintuplets&lt;/em&gt;, was just released this week!&lt;/p&gt;

&lt;p&gt;It comes with a ton of performance improvements, pushing Vue towards the top of fastest frameworks. The new &lt;code&gt;v-memo&lt;/code&gt; directive helps a lot with that ‚Äî¬†it's like a computed prop but in your template, and only re-computes when its dependencies change.&lt;/p&gt;

&lt;p&gt;This release also includes the stable versions of &lt;code&gt;script setup&lt;/code&gt; and reactive &lt;code&gt;style&lt;/code&gt; blocks (example borrowed from the article):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"color = color === 'red' ? 'green' : 'red'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Color is: {{ color }}
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;scoped&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v-bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a lot more in the &lt;a href="https://blog.vuejs.org/posts/vue-3.2.html"&gt;release announcement&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#users"&gt;
  &lt;/a&gt;
  üí¨ "Users"
&lt;/h2&gt;

&lt;p&gt;"There are only two industries that refer to their customers as 'users'." ‚Äî¬†Edward Tufte&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spacedrepetition-defining-your-own-utility-classes-in-tailwind"&gt;
  &lt;/a&gt;
  üß† Spaced-repetition: Defining your own utility classes in Tailwind
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews üë®‚Äçüî¨&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actually remembering these tips is much more useful than just a quick distraction, so here's a tip from a couple weeks ago to jog your memory.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the best parts of using Tailwind is defining your own utility functions.&lt;/p&gt;

&lt;p&gt;I recently needed a negative &lt;code&gt;z-index&lt;/code&gt;, but Tailwind doesn't have one, so I created my own:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@layer&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.-z-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anything wrapped with &lt;code&gt;@layer utilities { ... }&lt;/code&gt; will be &lt;a href="https://tailwindcss.com/docs/adding-new-utilities"&gt;picked by Tailwind&lt;/a&gt; as a utility class.&lt;/p&gt;

&lt;p&gt;If you need to use a custom utility class responsively, you can wrap it in a &lt;code&gt;@variants responsive { ... }&lt;/code&gt; block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@layer&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@variants&lt;/span&gt; &lt;span class="n"&gt;responsive&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.-z-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lets you write &lt;code&gt;md:-z-1 lg:z-0&lt;/code&gt; and have the utility class respond to screen size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exclusive-tips-and-insights-every-week"&gt;
  &lt;/a&gt;
  Exclusive tips and insights every week
&lt;/h2&gt;

&lt;p&gt;Join 8135 other Vue devs and &lt;a href="//michaelnthiessen.com/newsletter"&gt;get exclusive tips and insights&lt;/a&gt; like these delivered straight to your inbox, every week.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have great content in your emails. I seriously learn something from every one of them. ‚Äî¬†Titus Decali&lt;/p&gt;

&lt;p&gt;Thanks for another beautiful tip üôè ‚Äî¬†Victor Onuoha&lt;/p&gt;

&lt;p&gt;Loving these, and the spaced repetition ‚Äî¬†Mark Goldstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="//michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ficha b√°sica responsive con Tailwindcss üìú</title>
      <author>dux</author>
      <pubDate>Fri, 13 Aug 2021 14:58:29 +0000</pubDate>
      <link>https://dev.to/duxtech/ficha-basica-responsive-con-tailwindcss-2mg5</link>
      <guid>https://dev.to/duxtech/ficha-basica-responsive-con-tailwindcss-2mg5</guid>
      <description>&lt;p&gt;Hace pocos d√≠as que estoy probando Tailwindcss como framework css para realizar proyectos personales y hasta ahora con lo poco que se estoy m√°s que complacido.&lt;/p&gt;

&lt;p&gt;A continuaci√≥n les comparto un ficha responsive bastante b√°sica que pude hacer, espero les sirva de algo.&lt;/p&gt;

&lt;p&gt;La ficha como tal se ve de la siguiente manera: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-H1E4e5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/crisdux/ficha-responsive-tailwindcss/main/public/img/ficha.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-H1E4e5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/crisdux/ficha-responsive-tailwindcss/main/public/img/ficha.gif" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El c√≥digo del &lt;code&gt;index.html&lt;/code&gt; es el siguiente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./css/styles.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-overpass-mono"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"min-h-screen bg-gray-200 flex justify-center items-center "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"gradiente px-8 py-6 rounded-lg space-y-5 max-w-md"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center space-x-5 sm:flex-col sm:space-y-5 "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"uppercase text-3xl font-semibold text-white text-center pl-2
                                    sm:font-bold sm:text-gray-800"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            Cristian Fernando
                        &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./img/user.svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-40 w-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center text-gray-900"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Nam
                        esse perspiciatis ad ullam. Magnam, quibusdam!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"py-2 px-3 w-full bg-indigo-500 text-white rounded-lg uppercase hover:bg-indigo-600
                        sm:w-40"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            Ver m√°s
                        &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Y el repositorio completo en Github puedes verlo ac√°:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/crisdux"&gt;
        crisdux
      &lt;/a&gt; / &lt;a href="https://github.com/crisdux/ficha-responsive-tailwindcss"&gt;
        ficha-responsive-tailwindcss
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Ficha en taildwind css responsive 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Ficha con Tailwind css&lt;/h1&gt;
&lt;h2&gt;
&lt;strong&gt;Descripci√≥n:&lt;/strong&gt;
&lt;/h2&gt;
&lt;p&gt;Ficha b√°sica responsive programada con Tailwindcss.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/crisdux/ficha-responsive-tailwindcss./public/img/ficha.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cJLGWA09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/crisdux/ficha-responsive-tailwindcss./public/img/ficha.gif" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/crisdux/ficha-responsive-tailwindcss"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>css</category>
      <category>tailwindcss</category>
      <category>html</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Learn Javascript array methods with the help of emojis</title>
      <author>sakethk</author>
      <pubDate>Fri, 13 Aug 2021 14:37:13 +0000</pubDate>
      <link>https://dev.to/sakethkowtha/learn-javascript-array-methods-with-the-help-of-emojis-57gl</link>
      <guid>https://dev.to/sakethkowtha/learn-javascript-array-methods-with-the-help-of-emojis-57gl</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//Concat&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üèãüèª‚Äç‚ôÇÔ∏è&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üèÉüèª&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üßòüèª&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üèãüèª‚Äç‚ôÇÔ∏è&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üèÉüèª&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üßòüèª&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 

&lt;span class="c1"&gt;//Join&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§¥üèª&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üë∏üèª&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üíç&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§¥üèªüíçüë∏üèª&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;//Slice&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üò≠&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üò∂&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÄ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÄ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;//Index of&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;//Includes&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;//Every&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emoji&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emoji&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emoji&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emoji&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;emoji&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;//Some&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;//Fill&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÄ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÉ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÑ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§™&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§™&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§™&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§™&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Map&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0Ô∏è‚É£ -&amp;gt; 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£ -&amp;gt; 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2Ô∏è‚É£ -&amp;gt; 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3Ô∏è‚É£ -&amp;gt; 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Map&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;//Reduce&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0Ô∏è‚É£1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;//Push&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§¨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üò°&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üôÇ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòä&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÑ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// it will insert 'üòÑ' to list at last&lt;/span&gt;

&lt;span class="c1"&gt;//unshift&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üò°&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üôÇ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòä&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÑ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§¨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// it will insert 'ü§¨' to list at first&lt;/span&gt;

&lt;span class="c1"&gt;//Pop&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§¨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üò°&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üôÇ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòä&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÑ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÑ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÑ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// it will remove 'üòÑ' from list&lt;/span&gt;

&lt;span class="c1"&gt;//Shift&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§¨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üò°&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üôÇ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòä&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÑ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§¨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// it will remove 'ü§¨' from list&lt;/span&gt;

&lt;span class="c1"&gt;//Reverse&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§¨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üò°&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üôÇ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòä&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÑ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòÑ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üòä&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üôÇ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;üò°&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ü§¨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to learn Javascript easily</title>
      <author>Sergiy</author>
      <pubDate>Fri, 13 Aug 2021 14:32:34 +0000</pubDate>
      <link>https://dev.to/sergchr/how-to-learn-javascript-easily-2dfb</link>
      <guid>https://dev.to/sergchr/how-to-learn-javascript-easily-2dfb</guid>
      <description>&lt;p&gt;&lt;em&gt;tl;dr search for "learn javascript theory" in Google and pick any website. Go repeat what they teach in Codepen. Repeat for every theory section.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So you're prepared to learn something exciting! The first thing you need: a theory on how those things work. Only basic things such as syntax and programming fundamentals. Like what? Understand why do we need programming it at all. What things are possible, what aren't&lt;/p&gt;

&lt;p&gt;Step 0. &lt;strong&gt;A place where to write and execute code&lt;/strong&gt;. To see the result of your code. Go to Codepen and create a pen. Or choose another code editor. This is where you'll be writing programs while studying.&lt;/p&gt;

&lt;p&gt;Step 1. &lt;strong&gt;Choose any website where you can learn about the language syntax&lt;/strong&gt;. Google "javascript tutorial", "learn js" and so. The source doesn't matter at this point, pick any.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://javascript.info/"&gt;This&lt;/a&gt; is a great resource.&lt;/p&gt;

&lt;p&gt;Get familiar with how to write code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to create a variable;&lt;/li&gt;
&lt;li&gt;how to make a function;&lt;/li&gt;
&lt;li&gt;how to call a function;&lt;/li&gt;
&lt;li&gt;how to read function arguments, handle them, and return something useful;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congrats on this milestone! You now can write basic code. Note that it isn't so straightforward to write it though in the beginning. It's okay you can't follow tutorials. Try to write basic things. Get used to the style and then go further.&lt;/p&gt;

&lt;p&gt;Don't go to the next step until you code the practice tasks in the tutorials you followed. It's important! Don't skip the tasks!&lt;/p&gt;

&lt;p&gt;Step 2. &lt;strong&gt;Learn about data structures and when to use them.&lt;/strong&gt; There are primitive structures such as numbers, strings, booleans. And there are more complex types such as arrays, objects. You should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;understand when to use arrays and objects;&lt;/li&gt;
&lt;li&gt;know the difference between the two;&lt;/li&gt;
&lt;li&gt;write a lot of code using various data structures;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't go further if you aren't comfortable with writing Javascript code. Functions, operations with objects, arrays. If you don't understand some part, it's okay and it doesn't mean you're dumb. I was trying to learn to code a lot of times and it was hard. Go back and read the theory, then solve the practical tasks. If you can't deal with them, go to Stackoverflow and see solutions. Understand how they work.&lt;/p&gt;

&lt;p&gt;Most of the time if you don't understand something, it's because you skipped a section. Or, didn't read it carefully. Or, the information isn't simple enough. Try following a different source. See a video tutorial. Still, finding it difficult? Write me.&lt;/p&gt;

&lt;p&gt;Step 3. &lt;strong&gt;Deciding your niche in applying Javascript.&lt;/strong&gt; With JS, you can program:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;front-ends(interactive visual representation). It's websites with logic. You need HTML, CSS to create visual blocks and JS to say a browser what to do. For example, when you press a button, JS handles the press and does something useful. Sends your data to a server to save in a database;&lt;/li&gt;
&lt;li&gt;back-ends(server-side code: Node.JS). This is where you can handle the data a website sends you. Store it in a database, or send it somewhere else. Or, transform it and save it;&lt;/li&gt;
&lt;li&gt;mobile apps. With React Native framework you can do such, isn't that cool?&lt;/li&gt;
&lt;li&gt;desktop apps;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Step 4. &lt;strong&gt;When you decide what path you want to take, learn the specifics of that environment.&lt;/strong&gt;&lt;br&gt;
For browsers(front-end path) you need to learn DOM. I.e. how to interact with visual elements on a website page. Think what projects you'd want to create - a personal website, an online store. Or something else. And create it! Make only a super simple and tiny version. Find a theory you will need when you encounter unknowns. E.g. how to find all buttons on a page and handle clicks on every one of them.&lt;/p&gt;

&lt;p&gt;If you prefer server-side coding, you should learn Node.JS. It's a thing that helps you to run Javascript in a server-side environment. Learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a basic HTTP server;&lt;/li&gt;
&lt;li&gt;handle the HTTP requests. E.g. when calling &lt;code&gt;GET /api/hello&lt;/code&gt; to return "Hi!";Then practice. Pick up the Express library. It simplifies creating code on a server. Make some HTTP routes, do some transformations of data you receive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, of course, create an interesting project! A server for an online store website? A Discord bot?&lt;/p&gt;

&lt;p&gt;For mobile and desktop apps, the strategy is the same. Learn specifics about the frameworks(React Native for mobiles or Electron for desktops). Create pet projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;The most important thing in learning Javascript fast enough is to practice a lot. Don't skip it. Thus you learn applicable things that solidify what you've been reading a lot.&lt;/p&gt;

&lt;p&gt;Focus on one area. Solidify your knowledge in one niche, then go further after understanding the basics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/sergchr"&gt;Follow me on Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>learning</category>
    </item>
    <item>
      <title>How to set env parameters conditionally in GitHub Actions‚öô</title>
      <author>Ryo Kuroyanagi</author>
      <pubDate>Fri, 13 Aug 2021 14:27:29 +0000</pubDate>
      <link>https://dev.to/ku6ryo/how-to-set-env-parameters-conditionally-in-github-actions-1g6a</link>
      <guid>https://dev.to/ku6ryo/how-to-set-env-parameters-conditionally-in-github-actions-1g6a</guid>
      <description>&lt;p&gt;Sometimes we want to set environment variables conditionally in GitHub Actions. For instance, setting build parameters of web server depending on setup like staging, acceptance and release. Here, I show an easy way to set environment variables conditionally depending on what git tag is created on a repo in GitHub Actions workflow.&lt;/p&gt;

&lt;p&gt;Let's assume that we want to build Docker images and push them to a Docker registry. The trigger to run workflow is git tags. &lt;code&gt;release-XXX&lt;/code&gt; tags are for release env and &lt;code&gt;staging-XXX&lt;/code&gt; tags are for staging respectively. In actual cases, the tags can be like &lt;code&gt;release-v1.0.1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;release-*&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;staging-*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go to env setting steps. I use &lt;code&gt;if&lt;/code&gt; grammar to judge if the env is release or staging and using &lt;code&gt;echo "VAR=XXX" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/code&gt; sentence to set environment variables throughout a job. &lt;code&gt;startsWith&lt;/code&gt; is &lt;a href="https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#startswith"&gt;a built-in function&lt;/a&gt; which can be used in &lt;code&gt;if&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Docker Image&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Pulls my code&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="c1"&gt;# This step is run when the tag is release-XXX&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sets env vars for release&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo "DOCKER_IMAGE_NAME=my.docker.repo/awesome-image:release" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;startsWith(github.ref, 'refs/tags/release-*')&lt;/span&gt;

      &lt;span class="c1"&gt;# This step is run when the tag is staging-XXX&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sets env vars for release&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo "DOCKER_IMAGE_NAME=my.docker.repo/awesome-image:staging" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;startsWith(github.ref, 'refs/tags/staging-*')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Variables are used with &lt;code&gt;env.XXX&lt;/code&gt; expression, that is &lt;code&gt;env.DOCKER_IMAGE_NAME&lt;/code&gt; in my example. Use &lt;code&gt;${{ &amp;lt;expression&amp;gt; }}&lt;/code&gt; to use the variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Image&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker build -t ${{env.DOCKER_IMAGE_NAME}} .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. Pretty easy and it's very clean code. By replacing &lt;code&gt;startsWith&lt;/code&gt; with &lt;code&gt;endsWith&lt;/code&gt;, you can use a tag rule like &lt;code&gt;XXX-staging&lt;/code&gt;. If the condition to decide env is very complicated, you may want to write a dedicated step with shell script and &lt;a href="https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter"&gt;set output parameters&lt;/a&gt; to detect environment and use the output in &lt;code&gt;if&lt;/code&gt; grammar in steps to set env variables.&lt;/p&gt;

&lt;p&gt;However, I recommend not to use complicated rule because it makes it hard to manage environments.&lt;/p&gt;

&lt;p&gt;Hope you like it! See you :)&lt;/p&gt;

</description>
      <category>github</category>
      <category>actions</category>
    </item>
    <item>
      <title>An easy method of fucking annoying danmakus in videos on Bilibili</title>
      <author>CreeperBlyat</author>
      <pubDate>Fri, 13 Aug 2021 14:25:33 +0000</pubDate>
      <link>https://dev.to/creeperblin/an-easy-method-of-fucking-annoying-danmakus-in-videos-on-bilibili-4fbd</link>
      <guid>https://dev.to/creeperblin/an-easy-method-of-fucking-annoying-danmakus-in-videos-on-bilibili-4fbd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#warning"&gt;
  &lt;/a&gt;
  Warning
&lt;/h3&gt;

&lt;p&gt;The program may trigger the security system of Bilibili if you send too much requests rapidly especially when you want to report danmakus, comments, etc.&lt;br&gt;
The program is restricted for learning use. &lt;strong&gt;Do not use it to do anything against policies of Bilibili.&lt;/strong&gt;&lt;br&gt;
And the author is innocent for any third party use, legal or illegal.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#0-abstract"&gt;
  &lt;/a&gt;
  0. Abstract
&lt;/h2&gt;

&lt;p&gt;Because of the commercialization of Bilibili, a lot of new users joined it. These new users enriches the variety of the community but it turned out that this action has side effects. New users don't follow the rules and send danmakus subjectively. And it's annoying to see those meaningless danmakus. Here is a solution to it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#11-what-makes-a-danmaku-danmaku"&gt;
  &lt;/a&gt;
  1.1 What makes a  danmaku danmaku?
&lt;/h2&gt;

&lt;p&gt;When a user sends a danmaku, he sends a requests to the server of Bilibili. And we can get history danmakus in xml format. For example:&lt;br&gt;
&lt;code&gt;&amp;lt;d p="490.19100,1,25,16777215,1584268892,0,a16f**dd,299508*****521095"&amp;gt;ËíôÂè§‰∏äÂçïÂØπ‰ΩçÂáªÊùÄÁùøÈ©¨‰∏ÄÁ≤•Á≤ò&amp;lt;/d&amp;gt;&lt;/code&gt;&lt;br&gt;
In this joint we can get some information including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The time the danmaku can appear on screen;&lt;/li&gt;
&lt;li&gt;The type of the danmaku;&lt;/li&gt;
&lt;li&gt;The font size of danmaku;&lt;/li&gt;
&lt;li&gt;The time stamp;&lt;/li&gt;
&lt;li&gt;The pool the danmaku belongs to;&lt;/li&gt;
&lt;li&gt;The encrypted uid of the user(a16f**dd);&lt;/li&gt;
&lt;li&gt;The id of the danmaku(299508*****521095);&lt;/li&gt;
&lt;li&gt;The content of danmaku;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the last 3 items are all things we need!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#12-how-to-get-danmaku"&gt;
  &lt;/a&gt;
  1.2 How to get danmaku
&lt;/h2&gt;

&lt;p&gt;To get the danmakus in a video, you need to call api of Bilibili.&lt;br&gt;
Here is a method to get danmakus in a video.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;GetCid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="c1"&gt;#convert bv to cid.
&lt;/span&gt;    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'user-agent'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'api.bilibili.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'application/x-www-form-urlencoded'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bvid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#print(data)
&lt;/span&gt;    &lt;span class="n"&gt;rslt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://api.bilibili.com/x/player/pagelist'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rsltJson&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;rslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rsltJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'cid'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cid&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;GetDanmaku&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'user-agent'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'api.bilibili.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'application/x-www-form-urlencoded'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rslt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://api.bilibili.com/x/v1/dm/list.so'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rslt&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#21-preparations-before-reporting-the-danmakus"&gt;
  &lt;/a&gt;
  2.1 Preparations before reporting the danmakus
&lt;/h2&gt;

&lt;p&gt;Before you report the danmakus, you need to log in to Bilibili.&lt;br&gt;
Here is a method to get the info you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loginQr&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ÊâìÂºÄbÁ´ôÂÆ¢Êà∑Á´ØÔºåÊâ´Á†ÅÂπ∂Á°ÆËÆ§ÂêéÂÖ≥Èó≠Êâ´Á†ÅÁ™óÂè£Âç≥ÂèØ„ÄÇ'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'user-agent'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'passport.bilibili.com'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rslt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://passport.bilibili.com/qrcode/getLoginUrl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;urlJson&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'['&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;rslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;']'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;urlJson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
    &lt;span class="n"&gt;myqr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'M'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;save_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Tk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resizable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'QrCode'&lt;/span&gt;
    &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'‰ΩøÁî®bÁ´ôÂÆ¢Êà∑Á´ØÊâ´Á†ÅÔºåÊâ´ÂÆåÂÖ≥ÊéâÁ™óÂè£'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'qrcode.png'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ImageTk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PhotoImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;imglabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;imglabel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;columnspan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainloop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;urlJson&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loginRslt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'user-agent'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'passport.bilibili.com'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;postData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oauthKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'data'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'oauthKey'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="c1"&gt;#print(postData)
&lt;/span&gt;    &lt;span class="n"&gt;loginInfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://passport.bilibili.com/qrcode/getLoginInfo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#print(loginInfo.text)
&lt;/span&gt;    &lt;span class="c1"&gt;#print(str(loginInfo.cookies))
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;loginInfo&lt;/span&gt;
&lt;span class="n"&gt;loginInfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loginRslt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loginQr&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;sessdata&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loginInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SESSDATA'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;bili_jct&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loginInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'bili_jct'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#22-report-danmaku"&gt;
  &lt;/a&gt;
  2.2 Report danmaku
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reportdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;csrf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dmid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'user-agent'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'Host'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'api.bilibili.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'application/x-www-form-urlencoded'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'csrf'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;csrf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'SESSDATA'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;postData&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'csrf'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;csrf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'cid'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'dmid'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dmid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'reason'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'9'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rslt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://api.bilibili.com/x/dm/report/add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;postData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rslt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"csrf" is the bili_token.&lt;br&gt;
"key" is the session data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-conclusion"&gt;
  &lt;/a&gt;
  3. Conclusion
&lt;/h2&gt;

&lt;p&gt;Although a lot of users send annoying damakus, and it's not easy to report them manually, we can still find another way to accomplish our goal with the help of this program. But most importantly, a good environment cannot be created by keep reporting and banning users. However, it seems that the old days are gone, and Bilibili is no longer Mikufans. Nothing will stop Mr. Chen's commercialization plan. Then what we'll have tomorrow will be a Brave New Bilibili.&lt;/p&gt;

&lt;p&gt;references:&lt;br&gt;
&lt;a href="https://github.com/SocialSisterYi/bilibili-API-collect"&gt;https://github.com/SocialSisterYi/bilibili-API-collect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/creeper2333/bilibili-danmaku-auto-report"&gt;Download source code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>bilibili</category>
      <category>api</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
