<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Trying out one of the most cursed gba games. Shrek Swamp Kart Speedway</title>
      <author>Cybear Tron</author>
      <pubDate>Fri, 30 Jul 2021 03:58:20 +0000</pubDate>
      <link>https://dev.to/cybeartron/trying-out-one-of-the-most-cursed-gba-games-shrek-swamp-kart-speedway-3c2n</link>
      <guid>https://dev.to/cybeartron/trying-out-one-of-the-most-cursed-gba-games-shrek-swamp-kart-speedway-3c2n</guid>
      <description>&lt;p&gt;Hwlo there!!!! So today I will try this game called Shrek Swamp Kart Speedway which is considered very damn cursed!!&lt;/p&gt;

&lt;p&gt;The Visual Boy Advance (VBA) emulator will help us here on our journey!!! Cuz I dont have a real game boy advance lol!&lt;/p&gt;

&lt;p&gt;Ok So I heard that this is one of the worst games and was jus a Mario Kart with a Shrek Skin. I have personally never watched Shrek or played Mario Kart.. So lets try.. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tf3o6h6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554789132/Ob6NxpySK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tf3o6h6y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554789132/Ob6NxpySK.png" alt="Shrek---Swamp-Kart-Speedway-(U)-[!].png"&gt;&lt;/a&gt;&lt;br&gt;
This is where I am... Wish me luck&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41FDDDmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554832455/dEVz3MkRV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41FDDDmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554832455/dEVz3MkRV.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
OH MY FRICKING GOD!! THATS CURSED ALREADY OH NO!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ved1-tP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554870849/N9meMhJef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ved1-tP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627554870849/N9meMhJef.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Watching these weirdos bobbing their head is giving me anxiety.&lt;br&gt;
I will just go with the gingerbread. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FYtF60kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627555086669/9OQVkyyO4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYtF60kb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627555086669/9OQVkyyO4.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
ITS FRICKING HARD AND AS I WAS TOLD, THE CONTROLS ARE BAD!! ITS TOO SPEED !! I have never been a good car game player so maybe to an extent its my incopetence.&lt;br&gt;
Ok So I will rather Jus do a gameplay video here ok?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/3azFgxaytZ8"&gt;https://youtu.be/3azFgxaytZ8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check it out here.... I got the hang of it quick and came 2nd while I could come 1st but got stuck. It was actually hard and it took me like 5 attempts after which I started recording. The Graphics were the worst!!! And the controls the hardest!! AND THE FRICKING HEAD BOBBING I SHOWED IN THE VIDEO!! I WAS DAMN FEELING WEIRD!!!&lt;/p&gt;

&lt;p&gt;I mean thats it for today.. I forgot to save it... There are a lot of levels I guess in this game...&lt;/p&gt;

&lt;p&gt;Bye!!!&lt;/p&gt;

</description>
      <category>cursed</category>
      <category>gba</category>
      <category>game</category>
      <category>review</category>
    </item>
    <item>
      <title>Updates on dev.to clone in Angular - July 30</title>
      <author>Ajit Singh</author>
      <pubDate>Fri, 30 Jul 2021 03:53:13 +0000</pubDate>
      <link>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-july-30-514f</link>
      <guid>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-july-30-514f</guid>
      <description>&lt;p&gt;Github Repo - &lt;a href="https://github.com/ajitsinghkaler/devto-clone"&gt;https://github.com/ajitsinghkaler/devto-clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deployed on Firebase - &lt;a href="https://dev-toclone.firebaseapp.com/"&gt;https://dev-toclone.firebaseapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last week I added article section dev.to clone.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8edw7kdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syxzk0w3xwwqjylu0wsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8edw7kdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syxzk0w3xwwqjylu0wsy.png" alt="Dev.to clone July 30"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week we added the tags store and joined the tags to the api. We mostly follow a pattern to add an api service which makes all the api calls and a store service which sores al the data related to that service. &lt;/p&gt;

&lt;p&gt;We also added listings using the same pattern. This is the first time we used *rxLet. It really makes working with all Observable in the templates easier do &lt;a href="https://github.com/rx-angular/rx-angular/blob/master/libs/template/docs/api/let-directive.md"&gt;check&lt;/a&gt; it out. It allows you four states for an observable suspense, error. complete so that you can handle each one of them separately and gets rid of the *ngIf with async pipe. Like if you want to display something else while loading and error is a big disadvantage of the async pipe when used with an api.&lt;/p&gt;

&lt;p&gt;There was one interesting thing we did this time we created a reusable component which when passed a tag will show all the top articles from these tags in the last 3 days if you want to check &lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/4a031584b9008c2733c64d1e61fb00883d5db94f"&gt;this&lt;/a&gt; out. &lt;/p&gt;

&lt;p&gt;This is how it looks now&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWwFl1bN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iag6222gych0y86ts846.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWwFl1bN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iag6222gych0y86ts846.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Next week we will start working on article details page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/issues/6"&gt;Issue&lt;/a&gt;&lt;br&gt;
The article tag store and article store are quite common can we make them one. Same for listings HTML and article-tag HTML. I'm not sure what to do about this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commits-done-in-this-update"&gt;
  &lt;/a&gt;
  Commits done in this update
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/4a031584b9008c2733c64d1e61fb00883d5db94f"&gt;added right side tags articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/6889840004204b4ae0997dc52abc6cc95824b16f"&gt;add listings to homepage &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/359198b4cd2154cfe46aeefd8f7cf6f2d4c7fdba"&gt;add tags store&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/che_off"&gt;Chellappan&lt;/a&gt; has also offered some help. He will raise a detailed feature request on what he will work on Waiting for that. &lt;/p&gt;

&lt;p&gt;If you want to contribute too. I've created a lot of issues. Anyone can work on issues but for feature requests you have to raise a detailed feature request before working on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/VakilSunny"&gt;Sunny&lt;/a&gt; also raised his first pr on the project. Thank you sunny.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>4 Less used HTML tags and their uses</title>
      <author>Kritika Pattalam Bharathkumar</author>
      <pubDate>Fri, 30 Jul 2021 00:42:29 +0000</pubDate>
      <link>https://dev.to/kritikapattalam/4-less-used-html-tags-and-their-uses-2df6</link>
      <guid>https://dev.to/kritikapattalam/4-less-used-html-tags-and-their-uses-2df6</guid>
      <description>&lt;p&gt;As part of this blog we are going to see 4 less used HTML tags during web development&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-refresh-the-browser-or-redirect-the-page"&gt;
  &lt;/a&gt;
  1) Refresh the browser or redirect the page
&lt;/h3&gt;

&lt;p&gt;Did you know that you can refresh the browser automatically every few seconds with just a single line of code?.&lt;/p&gt;

&lt;p&gt;Yes, this can be done using the  http-equiv="refresh" attribute on the meta tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta http-equiv="refresh" content="30"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;content value for 30 here means , the page will refresh every 30 seconds. Enter the value you want and see the page refresh every few seconds. &lt;/li&gt;
&lt;li&gt;if you add a url value followed by the integer, the page will redirect to the given url after the specified time.
eg:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta http-equiv="refresh" content="3;url=https://dev.to"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Refresh might have accessibility concerns so use with caution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-calculating-with-output-tag"&gt;
  &lt;/a&gt;
  2) Calculating with output tag
&lt;/h3&gt;

&lt;p&gt;Output tag is used to represent the result of a calculation. In the below example we can calculate sum of two input fields and display it in the output field directly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;for attribute eg: for="a b"&lt;br&gt;
is used to tell the output tag, which fields are used for the manipulation. In the below code pen for attribute value is the id of the two input fields. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;using the name attribute value, the results from the oninput javascript is populated into the output tag. eg: output tag name value is result hence in javascript you can pass the result after calculation using result.value&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form oninput="result.value=parseInt(a.value)+parseInt(b.value)"&amp;gt;
    &amp;lt;input type="range" id="a" value="50"&amp;gt; +
    &amp;lt;input type="number" id="b" value="100"&amp;gt; =
    &amp;lt;output name="result" for="a b"&amp;gt;&amp;lt;/output&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kpattalam/embed/QWpRKez?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-base-tag"&gt;
  &lt;/a&gt;
  3) base tag
&lt;/h3&gt;

&lt;p&gt;This tag is very useful when your entire webpage points to the same base URL&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The base HTML element specifies the base URL to use for all relative URLs in a document. There can be only one  element in a document.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;head&amp;gt;
     &amp;lt;base href="https://kritika-pattalam.hashnode.dev/" target="_blank"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
      &amp;lt;a href="2-simple-ways-you-can-truncate-text-using-css"&amp;gt;Click on this url&amp;lt;/a&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#how-to-use-it-"&gt;
  &lt;/a&gt;
  How to use it ?.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In the below codepen, I have specified the base href attribute to my hashnode main blog page. eg: &lt;a href="https://kritika-pattalam.hashnode.dev/"&gt;https://kritika-pattalam.hashnode.dev/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;In the anchor tag instead of specifying the absolute URL, I have used the relative URL of my blog post eg : 2-simple-ways-you-can-truncate-text-using-css 
And the entire blog URL is : &lt;a href="https://kritika-pattalam.hashnode.dev/2-simple-ways-you-can-truncate-text-using-css"&gt;https://kritika-pattalam.hashnode.dev/2-simple-ways-you-can-truncate-text-using-css&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kpattalam/embed/dyvEOVZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-template-tag-in-html-the-content-template-element"&gt;
  &lt;/a&gt;
  4) Template tag in HTML - The Content Template element
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The HTML &lt;strong&gt;template&lt;/strong&gt; tag permits you to declare pieces of HTML sections that can be cloned and embedded into the DOM using script. &lt;/li&gt;
&lt;li&gt;The contents of the template tag are not added to the DOM on page load, they are only inserted based on some user interaction. Eg: Lets say there is an image inside the template tag, the image does not get downloaded until the template is cloned and inserted into the DOM structure.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kpattalam/embed/vYxwgGb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Leave me a comment below if you know about other rarely used HTML tags.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references-mdn-docs"&gt;
  &lt;/a&gt;
  References - mdn docs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base"&gt;Base Tag&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"&gt;http-equiv="refresh"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output"&gt;output tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template"&gt;template tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets connect on  &lt;a href="https://twitter.com/KritikaPattalam"&gt;Twitter&lt;/a&gt;  | &lt;a href="https://www.linkedin.com/in/kritika-p-296739155/"&gt;LinkedIn&lt;/a&gt; for more web development related chats.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Next.js E-Commerce Tutorial: SPA Example</title>
      <author>Pierre-Guillaume Laurin</author>
      <pubDate>Fri, 30 Jul 2021 00:32:07 +0000</pubDate>
      <link>https://dev.to/pierreguillaumelaurin/next-js-e-commerce-tutorial-spa-example-2mf9</link>
      <guid>https://dev.to/pierreguillaumelaurin/next-js-e-commerce-tutorial-spa-example-2mf9</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In a rush? Skip to the &lt;a href="#tutorial"&gt;tutorial&lt;/a&gt; or &lt;a href="https://snipcart-next-2021.vercel.app/"&gt;live example&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like many web developers, I have been doing quite a lot of React stuff recently. The last few years have seen its usage in the industry grow in a trajectory commensurate to its &lt;a href="https://www.facebook.com/"&gt;parent company&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These days, there isn’t much you can’t do with React, whether you’re a seasoned developer or a complete beginner.&lt;/p&gt;

&lt;p&gt;This is mostly due to the creation of tools such as Next.js that have successfully simplified React frontend development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpVDhiCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205932/nextjs_simplify_react_2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpVDhiCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205932/nextjs_simplify_react_2.gif" alt="Next.js Simplified React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, today, we'll &lt;strong&gt;explore how to craft a Next.js e-commerce single-page application quickly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the technical tutorial below, I’ll show you how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up a Next.js development environment&lt;/li&gt;
&lt;li&gt;Create new pages &amp;amp; components&lt;/li&gt;
&lt;li&gt;Fetch data &amp;amp; import components&lt;/li&gt;
&lt;li&gt;Create serverless API routes in Next&lt;/li&gt;
&lt;li&gt;Add a shopping cart to a Next.js app&lt;/li&gt;
&lt;li&gt;Style the app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But before we go through this, let’s make sure we understand what Next.js is and how it can improve your next e-commerce projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-nextjs"&gt;
  &lt;/a&gt;
  What's Next.js?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In a nutshell, Next.js is a lightweight framework for React applications that allows you to build server-side rendering and static applications in React easily.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It takes all the good parts of React and makes it even easier to get an app running with optimized rendering performance. Next.js does this thanks to multiple built-in configurations—automatic code-splitting, file-system routing, server-side rendering, static files exporting, and styling solutions.&lt;/p&gt;

&lt;p&gt;Trust me when I say that you can build a LOT of different things with Next.js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Static websites—we’ve listed it as one of the &lt;a href="https://snipcart.com/blog/choose-best-static-site-generator"&gt;top static site generators for 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://snipcart.com/blog/pwa-example-ecommerce-gatsby"&gt;Progressive Web Apps&lt;/a&gt; (PWAs)&lt;/li&gt;
&lt;li&gt;Server-rendered applications&lt;/li&gt;
&lt;li&gt;SEO-friendly websites—as we’ve demonstrated &lt;a href="https://snipcart.com/blog/react-seo-nextjs-tutorial"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mobile apps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was built by &lt;a href="https://zeit.co/"&gt;Zeit&lt;/a&gt; (now Vercel) back in 2016 and has quickly gained traction to the point of becoming one of the &lt;a href="https://jamstack.org/generators/"&gt;most popular tools&lt;/a&gt; of its kind. I mean, it’s used by Marvel, Netflix, Uber, Nike… and the list goes on.&lt;/p&gt;

&lt;p&gt;Okay, this is all great, and I’m genuinely excited to play with Next.js here. But is it any good for e-commerce?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-amp-ecommerce-a-good-fit"&gt;
  &lt;/a&gt;
  Next.js &amp;amp; e-commerce: a good fit?
&lt;/h2&gt;

&lt;p&gt;Like any static site generator or JavaScript framework out there, one of its most significant advantages, vs. more traditional e-commerce platforms, is the options it gives to developers to create a kickass shopping UX while removing the burden of many implementation details required for building a web app. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uw7ElDIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205928/kickass.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uw7ElDIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://snipcart.com/media/205928/kickass.gif" alt="Next.js kickass for e-commerce"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on your need, you can easily build a server-side or statically rendering app with Next, which implements those for you while also abstracting other details such as &lt;a href="https://webpack.js.org/"&gt;app-bundling&lt;/a&gt; and &lt;a href="https://babeljs.io/"&gt;transcompilation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The power of the &lt;a href="https://snipcart.com/blog/jamstack"&gt;Jamstack&lt;/a&gt; right here!&lt;/p&gt;

&lt;p&gt;We’ve covered the general &lt;a href="https://snipcart.com/blog/react-ecommerce-tutorial"&gt;React e-commerce ecosystem&lt;/a&gt; and its benefits in an earlier post. I would strongly suggest reading it to understand further why it’s a great fit.&lt;/p&gt;

&lt;p&gt;But on the probable chance that you're pressed for time, here’s a TL;DR:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;→ The use of components for flexibility.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Component-based development enables easy code reuse through your app but also the writing of small features. Or, in our case, small e-commerce functionalities. This comes in handy once you start scaling and expanding your shopping cart integration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;→ Virtual DOM (document object model) for performance.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React’s &lt;a href="https://www.rigelnetworks.com/using-virtual-dom-react-js-top-5-benefits/"&gt;virtual DOM&lt;/a&gt; provides a more efficient way of updating the view in a web application. Performance is Everything in e-commerce; all milli-seconds count.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y54doITV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205929/speed-uxplusseo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y54doITV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205929/speed-uxplusseo.png" alt="Better Speed = Better UX &amp;amp; SEO = More profit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;→ Popularity &amp;amp; vast community.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Any issue has probably been documented already, so you're likely to find a solution to any potential pitfalls in your way.&lt;/p&gt;

&lt;p&gt;Next.js features like server-side rendering and static exporting push these React benefits even further by guaranteeing that &lt;strong&gt;your website/app will be SEO-friendly&lt;/strong&gt;. This is something vital to any e-commerce business.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Still need social proof? Here are some &lt;a href="https://nextjs.org/showcase#e-commerce"&gt;Next.js e-commerce site examples&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="tutorial"&gt;Technical tutorial: a Next.js e-commerce SPA&lt;/h2&gt;

&lt;p&gt;Okay, time to jump into code and create our own handcrafted Next.js e-commerce app with the help of Snipcart. For you fish aficionados — or really anyone waiting for the beta of any cool software library — rest assured because we will make a betta fish store today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qpmiksaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205930/nextjs-ecommerce-fish-store.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpmiksaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://snipcart.com/media/205930/nextjs-ecommerce-fish-store.png" alt="https://snipcart.com/media/205930/nextjs-ecommerce-fish-store.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basic understanding of &lt;a href="https://snipcart.com/blog/react-nextjs-single-page-application-seo#spa"&gt;single-page applications&lt;/a&gt; (SPAs)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://app.snipcart.com/register"&gt;A Snipcart account&lt;/a&gt; (forever free in test mode)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/"&gt;Npm&lt;/a&gt; and &lt;a href="https://nodejs.org/en/"&gt;node.js&lt;/a&gt; installed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basic knowledge of &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;React&lt;/a&gt; &amp;amp; &lt;a href="https://snipcart.com/blog/learn-typescript-why-use-ts"&gt;TypeScript&lt;/a&gt; will also help you here, but it is not mandatory to follow along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setting-up-the-development-environment"&gt;
  &lt;/a&gt;
  1. Setting up the development environment
&lt;/h3&gt;

&lt;p&gt;First, let set up our environment so that we can start building.&lt;/p&gt;

&lt;p&gt;Open a terminal and type the following command:&lt;br&gt;
&lt;code&gt;npx create-next-app --typescript&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A prompt will appear asking you for the project's name. It will then install all of the project dependencies for you and create files and folders. We'll look into these further in this tutorial.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Beginner note: The command's &lt;code&gt;--typescript&lt;/code&gt; options will set up a Typescript project, which I often favor. The typing system helps prevent many runtime errors and perky bugs. It also allows for better refactoring in the long run!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, run &lt;code&gt;npm run dev&lt;/code&gt;. Your app should now be served at &lt;code&gt;localhost:3000&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-defining-a-layout"&gt;
  &lt;/a&gt;
  2. Defining a layout
&lt;/h3&gt;

&lt;p&gt;With our environment ready, let's create a layout for our store. It will include a Header and a Footer with links to our cart and contact information.&lt;/p&gt;

&lt;p&gt;We will add this layout to the app's main entry point. In &lt;code&gt;Next&lt;/code&gt;, this entry point is located at &lt;code&gt;pages/_app.tsx&lt;/code&gt;. You can see that the &lt;code&gt;MyApp&lt;/code&gt; function returns the &lt;code&gt;pageProps&lt;/code&gt;. We will use this function to create our app's layout:&lt;/p&gt;

&lt;p&gt;At the project's root, create a &lt;code&gt;components&lt;/code&gt; directory in which — you guessed it — we will create our components.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-creating-components"&gt;
  &lt;/a&gt;
  1. Creating components
&lt;/h3&gt;

&lt;p&gt;Now let's create the components we need.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;components&lt;/code&gt; directory, create a &lt;code&gt;Header.tsx&lt;/code&gt; file with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Header.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/static/logo.svg"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;FishCastle&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;textDecoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"31"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"27"&lt;/span&gt; &lt;span class="na"&gt;viewBox&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0 0 31 27"&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;http://www.w3.org/2000/svg&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#9094FF"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Link&lt;/code&gt; component from Next.js allows us to convert most HTML elements into in-website links.&lt;/p&gt;

&lt;p&gt;Still in the &lt;code&gt;components&lt;/code&gt; directory, create a &lt;code&gt;Footer.tsx&lt;/code&gt; file with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Footer.tsx&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Next.js app with a&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://snipcart.com&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Snipcar        t&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;- powered store
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://github.com/snipcart/snipcart-nextjs&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Github&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-integrating-components"&gt;
  &lt;/a&gt;
  2. Integrating components
&lt;/h3&gt;

&lt;p&gt;Let's now integrate those components into our app. First, create a &lt;code&gt;Layout&lt;/code&gt; component and put the &lt;code&gt;Header&lt;/code&gt; and &lt;code&gt;Footer&lt;/code&gt; in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Footer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;  &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Footer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With your layout components created, all that's left to do is to add it to the &lt;code&gt;_app.tsx&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// _app.tsx&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;AppProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run your app's dev mode and go to your localhost page, you should now see your app's layout created. Later in this tutorial, we will see how to add style to it and give it that &lt;strong&gt;drip&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;But first things first, let's give our homepage the content it deserves.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-customizing-your-homepage"&gt;
  &lt;/a&gt;
  3. Customizing your homepage
&lt;/h3&gt;

&lt;p&gt;As we need to display both information about our store and the products we will sell, we will create a few different components to keep things modular and maintainable. Then, we will look at how to assemble them:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creating-required-components"&gt;
  &lt;/a&gt;
  1. Creating required components
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#the-product-component"&gt;
  &lt;/a&gt;
  The product component
&lt;/h3&gt;

&lt;p&gt;As this is a Next.js tutorial for an e-commerce app, you will need a &lt;code&gt;Product&lt;/code&gt; component to show on your homepage.&lt;/p&gt;

&lt;p&gt;The component will output whatever information you need to display about our particular product. You can create an &lt;code&gt;IProduct&lt;/code&gt; interface that matches &lt;a href="https://docs.snipcart.com/v3/setup/products"&gt;Snipcart's product definition&lt;/a&gt; and an &lt;code&gt;IProductProps&lt;/code&gt; interface to define the types of our props, which will be pass as a parameter to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Product.tsx&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StaticImageData&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Underneath the interface, add this component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/Product.tsx&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IProductProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProductProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Image&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product__price-button-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;$&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
                    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`snipcart-add-item &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__button&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    Add to cart
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-note-on-the-image-component"&gt;
  &lt;/a&gt;
  A note on the Image component
&lt;/h3&gt;

&lt;p&gt;Notice in the block below we are using Next.js's &lt;a href="https://nextjs.org/docs/basic-features/image-optimization"&gt;Image component&lt;/a&gt; instead of a good ol' &lt;code&gt;img&lt;/code&gt; tag. The former is actually an extension of the latter. It allows automatic image optimization, lazy loading by default, and providing images in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types"&gt;WebP&lt;/a&gt; when the browser allows it, which optimizes images to the client device. Moreover, the component optimizes image on requests, which saves you build time. This helps to reduce your website loading time and thus keep your users' interest! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-product-list-component"&gt;
  &lt;/a&gt;
  2. The product list component
&lt;/h3&gt;

&lt;p&gt;We will integrate this product component into a &lt;code&gt;ProductList&lt;/code&gt; component, whose name is quite self-explanatory. The &lt;code&gt;ProductList.tsx&lt;/code&gt; component will be used to display our list of products on the homepage. Therefore, you can create an &lt;code&gt;IProductListProps&lt;/code&gt; interface that describes an array of &lt;code&gt;IProduct&lt;/code&gt;, which is eventually going to be passed by our website:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IProduct&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IProductListProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ProductList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProductListProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"product-list"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="na"&gt;product&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ProductList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-prerendering-data-and-importing-components"&gt;
  &lt;/a&gt;
  4. Pre-rendering data and importing components
&lt;/h3&gt;

&lt;p&gt;At this stage, you'll probably want to populate your products to the ProductList component. In pure React, you could use &lt;a href="https://reactjs.org/docs/hooks-reference.html#useeffect"&gt;React's useEffect lifecycle&lt;/a&gt; inside the &lt;code&gt;ProductList&lt;/code&gt; to fill the data. However, this method won't get called on the server during a static or server-side rendering.&lt;/p&gt;

&lt;p&gt;Thankfully Next.js adds two ways to pre-render the data: &lt;code&gt;getStaticProps&lt;/code&gt;, which fetches data at build time, and &lt;code&gt;getServerSideProps&lt;/code&gt;, which fetches data &lt;em&gt;on each request&lt;/em&gt;. The latter may be useful, for example, for an auction store where the price may be rapidly fluctuating. In our use case, since the product doesn't change often, we will use the former as the pre-rendering will decrease loading time by saving the user a request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Jumbotron&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProductList&lt;/span&gt; &lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;halfmoon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Halfmoon Betta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;25.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;halfmoonBettaPicture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Halfmoon betta is arguably one of the prettiest betta species. It is recognized by its large tail that can flare up to 180 degrees.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/products/halfmoon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(...)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;veiltail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Veiltail Betta&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;veiltailBettaPicture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;By far the most common betta fish. You can recognize it by its long tail aiming downwards.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/products/veiltail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GetStaticProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;products&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-importing-snipcart"&gt;
  &lt;/a&gt;
  5. Importing Snipcart
&lt;/h3&gt;

&lt;p&gt;Now, let's install Snipcart into our website. First, you'll need to import the &lt;code&gt;Head&lt;/code&gt; component from next/head inside your index.tsx page, which will allow you to add HTML inside the &lt;code&gt;&amp;lt;Head&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;You can do so by adding the following code inside the Index function return clause:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;My awesome store&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://app.snipcart.com&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://cdn.snipcart.com&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;https://cdn.snipcart.com/themes/v3.2.0/default/snipcart.css&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"../public/favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;For more information on how to use the &lt;code&gt;Head&lt;/code&gt; component to optimize for SEO, have a look at our &lt;a href="https://snipcart.com/blog/react-nextjs-single-page-application-seo"&gt;article regarding SEO using Next.js&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now need to load Snipcart's script content. Next.js offers a Script component in the &lt;code&gt;next/script&lt;/code&gt;, module to do so. It allows for performance optimization by offering &lt;a href="https://nextjs.org/docs/basic-features/script"&gt;different loading strategies&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.snipcart.com/themes/v3.2.0/default/snipcart.js"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"snipcart"&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;api&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"YOUR_PUBLIC_API_KEY"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to swap the &lt;code&gt;data-api-key&lt;/code&gt; attribute with your own API key ;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-product-validation"&gt;
  &lt;/a&gt;
  6. Product validation
&lt;/h3&gt;

&lt;p&gt;Now that Snipcart is installed, the last step before completing orders is to validate your products.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-html-validation"&gt;
  &lt;/a&gt;
  1. HTML validation
&lt;/h3&gt;

&lt;p&gt;The first way to do that is by simply changing the URL in your product list to &lt;code&gt;/&lt;/code&gt; for each product to the homepage for Snipcart's &lt;a href="https://docs.snipcart.com/v3/setup/order-validation"&gt;HTML validation&lt;/a&gt;. It will read the &lt;code&gt;/&lt;/code&gt; on our homepage and crawl it in order to validate the products if you want. You can do just that and skip to the next section, and you will have a working e-commerce site!&lt;/p&gt;

&lt;p&gt;If you are curious, let's take the opportunity to check out a neat Next.js feature:&lt;br&gt;
&lt;a href="https://nextjs.org/docs/api-routes/dynamic-api-routes"&gt;serverless API routes&lt;/a&gt; combined with Snipcart's &lt;a href="https://babeljs.io/"&gt;JSON validation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-json-validation-using-nextjs-serverless-api"&gt;
  &lt;/a&gt;
  2. JSON validation using Next.js serverless API
&lt;/h3&gt;

&lt;p&gt;For more complex scenarios, it might be useful to have an API returning our products information in JSON format. To do so, we will need to have a unique URL for each product that will return its information in a JSON file.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configuring static API routes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While technically we only need a dynamic API route returning each product, let's make this API &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;RESTful&lt;/a&gt; and have a route returning the whole product list.&lt;/p&gt;

&lt;p&gt;You may have noticed that an API folder was created with the project. In this folder, create another one called &lt;code&gt;products&lt;/code&gt; and add an &lt;code&gt;index.ts&lt;/code&gt; file to it with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In pages/api/products/index.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now go to &lt;code&gt;https://localhost:3000/${YOUR_PORT}&lt;/code&gt;, you will get a JSON file containing your product list.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Configuring dynamic API routes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the &lt;code&gt;products&lt;/code&gt; folder, add the following to the &lt;code&gt;[productId].ts&lt;/code&gt; file. Notice the brackets. This special syntax tells Next.js that [productid] is a dynamic parameter. Hence if you go to &lt;code&gt;/api/products/ONE_OF_YOUR_PRODUCTS_ID&lt;/code&gt;, you should get the JSON information of one of our products.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;IProduct&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../../components/Product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ISnipcartProduct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
    &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="c1"&gt;// Hack to pass the image URL instead of the StaticImage object we required&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProduct&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;productId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snipcartProduct&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ISnipcartProduct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snipcartProduct&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to complete a test order! &lt;/p&gt;

&lt;p&gt;It's time to style our website, so it's more appealing to our future customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-styling-your-nextjs-spa"&gt;
  &lt;/a&gt;
  7. Styling your Next.js SPA
&lt;/h3&gt;

&lt;p&gt;If you paid attention, you saw that most of the components in this tutorial already had classnames. We will now look at 2 different ways to apply them:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setting-up-a-global-stylesheet"&gt;
  &lt;/a&gt;
  1. Setting up a global stylesheet
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;style&lt;/code&gt;s folder, create a &lt;code&gt;global.scss&lt;/code&gt; style sheet. Afterwards, simply import it to &lt;code&gt;pages/_app.tsx&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in pages/_app.tsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/globals.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Global stylesheets can only be imported in the &lt;code&gt;_app.tsx&lt;/code&gt; file.&lt;br&gt;
I used SCSS, which does not come built-in with Next.js, but can be easily integrated simply by running &lt;code&gt;npm install sass&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-setting-up-css-modules-for-our-components"&gt;
  &lt;/a&gt;
  2. Setting up CSS modules for our components
&lt;/h3&gt;

&lt;p&gt;Next.js also supports CSS modules, which can become quite handy if your CSS file gets larger. To use it, simply create a file respecting the &lt;code&gt;[name].module.css&lt;/code&gt; convention, for example, &lt;code&gt;Product.module.css&lt;/code&gt; or &lt;code&gt;Product.module.scss&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Afterward, you can import it as a &lt;code&gt;styles&lt;/code&gt; object in the component's file and access the styles with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Product.module.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IProductProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product__description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      (...)
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For further examples of how these styles are applied, have a look at the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/snipcart/snipcart-next"&gt;&lt;strong&gt;Github Repo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snipcart-next-2021.vercel.app/"&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Allow me a shout-out to Michael from Snipcart, who came up with the neat UI design!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And voilà! You're server-side rendered Next.js e-commerce store should be ready to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h3&gt;

&lt;p&gt;I liked how easy it was to create a static website with great performance using Next.js. I did notice some parts of the Next.js documentation could be more up-to-date.&lt;/p&gt;

&lt;p&gt;We could have explored Image optimization on mobile using the &lt;code&gt;Image&lt;/code&gt; component or Next's dynamic imports to push this demo further.&lt;/p&gt;

&lt;p&gt;Are you up to it? If so, let us know how it goes in the comments below!&lt;/p&gt;




&lt;p&gt;Liked this article? Hit the share buttons below.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>next</category>
    </item>
    <item>
      <title>Diving In to Team-Based Development</title>
      <author>Becca Peckman</author>
      <pubDate>Thu, 29 Jul 2021 23:53:07 +0000</pubDate>
      <link>https://dev.to/becpeck/diving-in-to-team-based-development-59pe</link>
      <guid>https://dev.to/becpeck/diving-in-to-team-based-development-59pe</guid>
      <description>&lt;p&gt;I just finished my largest and most involved experience working on a development team, and I’m here to reflect on my takeaways. This experience consisted of a month-long internship, working on an already established software project, while I had previously only worked on teams where we built the project from the ground up, so many of the conventions around development process and communication were new to me. The project my team inherited was a data collation and exploration tool for asylum court case outcomes, which we were building on behalf of &lt;a href="https://www.humanrightsfirst.org/"&gt;Human Rights First&lt;/a&gt;, an international human rights organization. They noticed that many asylum case outcomes were highly dependent on the legal opinions of the judge hearing the case, and that in cases where multiple potential avenues of legal argument were possible, some framings did better with many judges than others did. &lt;/p&gt;

&lt;p&gt;The goal of this product was to scrape this case information from files uploaded by authorized attorneys in an automated process, and have it available to explore and filter to other lawyers and legal researchers, so they could be better informed on the big-picture statistics of what cases had been approved, denied, or appealed. I requested and fulfilled the role of a back-end developer on this project, as I had less experience in that role on the projects I’d worked on previously and wanted to broaden my experience. Other members of the team consisted of 12 other interns, in front-end, back-end, data science, UX, or project management roles, as well as several supporting mentors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-initial-goals"&gt;
  &lt;/a&gt;
  Our Initial Goals
&lt;/h2&gt;

&lt;p&gt;I addressed two major issues during my time on the project, one planned, and one discovered in process: first, my team had been asked to create a third role with designated permissions within the application. There were already pre-existing ‘user’ and ‘admin’ roles that had been implemented by the previous team, but our clients wanted a third ‘moderator’ role, which could perform every function a user could, as well as approve or deny case uploads like an admin, but could not manage users themselves or site functionality and changes. While implementing the necessary back-end changes to add this feature, I discovered a major security vulnerability in how the application verified a user’s role and subsequent permissions, discussed the possibilities for how to fix it, and implemented the plan we agreed was best.&lt;/p&gt;

&lt;p&gt;At first, when approaching the task of adding a new role to the ones already within the app, I discussed the database schema with the rest of my team. As we inherited it, the database stored role information as a column within the table for user profiles, as a string. This was not ideal because it could allow for typos to be entered, and user permissions to break as a result, so we decided to update the database to include a roles column, with a primary key integer and a role name, and have each profile contain a column that pointed to a role id as a foreign key. I began working on this directly with another back-end developer and a project manager over a video call, and it turned out to be much more difficult than we expected.&lt;/p&gt;

&lt;p&gt;At first, we attempted my idea of simply adding an additional migration using &lt;a href="https://knexjs.org/"&gt;Knex.js&lt;/a&gt;, a library which allowed us to build and query our &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt; database inside a &lt;a href="https://nodejs.org/"&gt;Node&lt;/a&gt; framework. This required saving the existing role information from the database, deleting that column, creating a new table and column, and repopulating it with foreign keys from the new table. Unfortunately, we kept running into different errors with deleting or adding columns to the existing profiles table, and at one point had to delete the local database altogether, starting over with the preexisting Knex migration and seed files. After being unable to find a solution to these errors, one of my teammates tried a different approach, starting over on our goal. Eventually we gave up on modifying the database with additional files, and decided to rewrite the original migrations and seeds, adding in one for the roles table as well, and running functions to remove and rebuild the database entirely before seeding it with new sample data. We had chosen not to try this approach at first because it is risky in a production environment, where important data already exists in the database that could easily be lost in the process, but we decided there was no risk with only sample data that could be repopulated with a single npm command. This approach worked, much to all of our relief! We then quickly built new models and API endpoints for the new roles table in &lt;a href="https://expressjs.com/"&gt;Express.js&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-vulnerability-and-redirecting-focus"&gt;
  &lt;/a&gt;
  Security Vulnerability and Redirecting Focus
&lt;/h2&gt;

&lt;p&gt;While digging through the repositories to find out how user permissions were implemented, I realized it seemed like they weren’t referred to at all in the back-end codebase, and it also didn’t seem like our identity management provider, &lt;a href="https://www.okta.com/"&gt;Okta&lt;/a&gt;, was even storing role information. Confused, I started looking through the browser development tools as I navigated through the local live instance of the app. I found that there were three things being saved to the browser local storage, two &lt;a href="https://jwt.io/"&gt;JWTs&lt;/a&gt; related to Okta authentication, and one ‘role’ variable. Curious, I logged in as one of our test accounts designated with user permissions. By editing the string stored under ‘role’ from ‘user’ to ‘admin’, and continuing to navigate through the application, I was able to unlock special pages that should have only been accessible to admins, and to add, delete, and change data without any sort of verification. &lt;/p&gt;

&lt;p&gt;Immediately on realizing this, and verifying that the wrongfully edited data was in fact getting saved into the database, I notified the rest of my team that it seemed like a huge issue for the security of the application, and that it should be a high priority issue to be fixed. While it seemed unlikely that any authenticated users would be malicious enough to try vandalizing the data, all it could take was one compromised account by one motivated attacker to completely wipe out the entire app’s information. In our team discussion, we decided it would be excessively complicated to change how the front-end was handling role information, that it had the potential for breaking parts of the app that already worked, and that our best course of action was to patch the back-end, verifying on each endpoint request that a user had the permissions required to access it. I volunteered to write middleware to implement this solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-issues-one-solution"&gt;
  &lt;/a&gt;
  Two Issues, One Solution
&lt;/h2&gt;

&lt;p&gt;The actual middleware function ended up being very simple, once I realized a call to the database was already being made by another middleware function attached to every endpoint, which simply verified that any user was logged in and authenticated with Okta at all. This function queried the database for the profile of the authenticated user, and attached that information to the request headers before continuing the request. My function ended up taking an array of role ids which designated the roles who were allowed access to the endpoint, checking each of those ids against the role of the authenticated user, and allowing or forbidding access as a result. After testing the function, I had to add in some special cases to allow access for users to read or update their own information or their own uploaded cases. I chose to write the function to handle an array of roles, rather than a specific role id, in order to simultaneously implement the new moderator role in the backend. The function could still take an array with only one role id, as for the endpoints that only admins should access, but it could also take two or more ids, as for endpoints that should be accessible to admins and moderators. This flexibility in how the function worked would also allow easy changes in the future if more roles were added to the application.&lt;/p&gt;

&lt;p&gt;After the middleware function was added to all the appropriate endpoints, I tested the vulnerability to see if it was patched. While I could still change my role in local storage and gain access to pages for admin-only tools, none of the data would load within them, and no new data could be changed or added! Even sending a direct request to the endpoint was denied without a valid token from a user with the required roles, and I considered this a success. In addition, all of the back-end setup for the moderator role was complete, and only a bit of work needed to be done on the front-end to conditionally display these tools in a manner that already existed for admins. Moving forward, the next team might have issues if they decided to strengthen the patch on the front-end as well, if they decided to prevent the admin tool pages from displaying at all to unauthorized users. As far as I can tell, that would require a separate JWT to be created upon login on the back-end, and sent to the front-end local storage, which would allow a user’s role information to be stored and queried on the front-end in a more secure and less editable fashion. This might be complicated and increase the overhead of the app’s runtime, especially on login, and would require cross-collaboration between segments of the new team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-takeaways"&gt;
  &lt;/a&gt;
  My Takeaways
&lt;/h2&gt;

&lt;p&gt;I grew a lot more as a developer and professional than I expected to throughout this experience. While I had worked on teams before, it had always been more ad-hoc, without explicitly declared roles on the team, for periods of only about a week, and never on an established project. I’d also never experienced meeting with clients who were investing in actually using the product, and in having it ship as soon as possible. These weekly meetings, as well as the level of communication I needed to have with my team over Zoom and Slack, helped me realize the importance of communication on a team, why things can take so long to get done in a larger production environment, and how easy it was for one or more people on the team to get lost without reconnecting over our shared goals and priorities. The feedback I got from my team, praising my technical skills and my attention to detail, helped me feel more confident in my abilities and contributions, both on this project and future ones I plan to work on. The last month has made me realize how much I care about working on something that matters which will help people, how much more motivating it is and how I would like to look for these kinds of projects in my future career. Working in a back-end role, which I had little experience with in previous projects, and collaborating with data scientists and front-end developers has broadened my skills and given me a better understanding of how different parts of a team need to work together to accomplish shared goals. I hope that the development in my technical and professional skills will help me achieve my future goals, and that I can continue to learn and grow in these areas throughout the years to come.&lt;/p&gt;

</description>
      <category>node</category>
      <category>react</category>
      <category>postgres</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Azure DevOps: Limit User Visibility and Collaboration to Specific Projects</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Thu, 29 Jul 2021 23:24:05 +0000</pubDate>
      <link>https://dev.to/n3wt0n/azure-devops-limit-user-visibility-and-collaboration-to-specific-projects-2mgg</link>
      <guid>https://dev.to/n3wt0n/azure-devops-limit-user-visibility-and-collaboration-to-specific-projects-2mgg</guid>
      <description>&lt;p&gt;Ever had the need to restrict some users to just specific projects in Azure DevOps? Today I'm gonna show you how to do that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Today we talk about a new feature that has been released recently in Azure DevOps and that allows you to limit the user visibility and collaboration to specific projects. I'm talking about the &lt;em&gt;Limit user visibility and collaboration to specific projects&lt;/em&gt; Preview Feature&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yftHyHW32fM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/yftHyHW32fM"&gt;Link to the video: https://youtu.be/yftHyHW32fM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;By default, users added to an organization &lt;strong&gt;can view all organization metadata and settings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IoUDLm78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcr9xpetxtinq23bdxcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IoUDLm78--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcr9xpetxtinq23bdxcd.png" alt="Org Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This includes viewing the list of users in the organization, list of projects, &lt;strong&gt;billing details&lt;/strong&gt;, usage data, and anything that's accessible through the organization settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OH-6bsS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ep2oko4gjf66i1o6vzuf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OH-6bsS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ep2oko4gjf66i1o6vzuf.png" alt="Users Selection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This includes viewing the list of users in the organization, list of projects, billing details, usage data, and anything that's accessible through the organization settings.&lt;/p&gt;

&lt;p&gt;This is because people pickers provide support for searching &lt;strong&gt;all users and groups added to Azure AD&lt;/strong&gt;, not just those users and groups added to your project&lt;/p&gt;

&lt;p&gt;And until now there was no effective way to change this behavior. As I said, &lt;strong&gt;&lt;em&gt;until now&lt;/em&gt;&lt;/strong&gt; :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h3&gt;

&lt;p&gt;To restrict users from this information, you can enable the "&lt;strong&gt;&lt;em&gt;Limit user visibility and collaboration to specific projects&lt;/em&gt;&lt;/strong&gt;" preview feature for your organization. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8e84faez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95vkcb5jlsbvzjuhkfhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8e84faez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95vkcb5jlsbvzjuhkfhe.png" alt="Feature Enabled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once enabled, the &lt;em&gt;Project-Scoped Users&lt;/em&gt; group, which is an organization-level security group, will be added to your Azure DevOps organization. It can be found by navigating to the Organization &lt;code&gt;Settings -&amp;gt; Permissions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When you add Users and groups to this new group, they will see a banner stating that the administrator has limited their visibility.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5z4B6WKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxmh5kg8gr8tw8pps9to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5z4B6WKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxmh5kg8gr8tw8pps9to.png" alt="Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, they will have two limitations. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNTpy4q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oeq01rj10x5kuc976ao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNTpy4q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oeq01rj10x5kuc976ao.png" alt="Limited Org Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When accessing the Organization Settings, most of the items will be hidden. &lt;/p&gt;

&lt;p&gt;And about the people selection, the people-picker search will be limited to only the AAD Users that have been added to the project the user is scoped to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-aRPHWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w18dcw01ffali918cr33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-aRPHWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w18dcw01ffali918cr33.png" alt="Limited User Selection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this applies also to the tagging of users in Work Items and Comments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Comment down below&lt;/strong&gt; and let me know if this new feature solves any issue you had in the past with user management.&lt;/p&gt;

&lt;p&gt;Also, checkout &lt;a href="https://youtu.be/nrYSu_046cw"&gt;this video&lt;/a&gt;, where I talk about how to properly secure and Azure DevOps Organization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yftHyHW32fM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>azuredevops</category>
      <category>security</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>5 Helpful Html Global Attributes</title>
      <author>Aya Bouchiha</author>
      <pubDate>Thu, 29 Jul 2021 23:02:35 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/5-helpful-html-global-attributes-e8a</link>
      <guid>https://dev.to/ayabouchiha/5-helpful-html-global-attributes-e8a</guid>
      <description>&lt;p&gt;Hello,&lt;br&gt;
I'm &lt;a href="https://t.me/AyaBouchiha"&gt;&lt;strong&gt;Aya Bouchiha&lt;/strong&gt;&lt;/a&gt;,&lt;br&gt;
today, we'll talk about some useful HTML global attributes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#definition-of-global-attributes"&gt;
  &lt;/a&gt;
  Definition of global attributes
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;global attributes&lt;/em&gt;: are Html attributes that can be used on any HTML elements, like &lt;em&gt;title&lt;/em&gt; and &lt;em&gt;hidden&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#heplful-html-global-attributes"&gt;
  &lt;/a&gt;
  Heplful HTML Global Attributes
&lt;/h2&gt;
&lt;h2&gt;
  &lt;a href="#accesskey"&gt;
  &lt;/a&gt;
  accesskey
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;accesskey&lt;/strong&gt;: this attribute lets you specify a keyboard shortcut to focus an element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey"&gt;The way to activate the accesskey depends on the browser and its platform&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Code example&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Lorem&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipiscing &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;accesskey=&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"product/10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;more details!&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dir"&gt;
  &lt;/a&gt;
  dir
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;dir&lt;/strong&gt;: lets you specify the text's direction.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Code example&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"content-type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"text/html; charset=utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;"rtl"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;right-to-left&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;"ltr"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;left-to-right&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;"auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;السلام عليكم&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gzt8KI1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zg2nir27p8g8o5kls3fg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gzt8KI1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zg2nir27p8g8o5kls3fg.PNG" alt="Aya Bouchiha global attributes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data"&gt;
  &lt;/a&gt;
  data-
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;data-&lt;/strong&gt;: this is one of the most useful attributes, it lets you store extra and custom data on your HTML tag. In addition, You can access this attribute in &lt;strong&gt;CSS&lt;/strong&gt;, and also &lt;strong&gt;Javascript&lt;/strong&gt;. It should be at least one character, and must not contain any uppercase letters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"all"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nc"&gt;.address&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-user-country&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'Morocco'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-user-country&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;address&lt;/span&gt; 
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"address"&lt;/span&gt;
      &lt;span class="na"&gt;data-full-name=&lt;/span&gt;&lt;span class="s"&gt;"Aya Bouchiha"&lt;/span&gt;  
      &lt;span class="na"&gt;data-email=&lt;/span&gt;&lt;span class="s"&gt;"developer.aya.b@gmail.com"&lt;/span&gt;
      &lt;span class="na"&gt;data-job=&lt;/span&gt;&lt;span class="s"&gt;"full stack web developer"&lt;/span&gt;
      &lt;span class="na"&gt;data-user-country=&lt;/span&gt;&lt;span class="s"&gt;"Morocco"&lt;/span&gt;
      &lt;span class="na"&gt;data-id=&lt;/span&gt;&lt;span class="s"&gt;"26989"&lt;/span&gt;
      &lt;span class="na"&gt;data-bg=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Posted by
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://t.me/AyaBouchiha"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Aya Bouchiha &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      Email Address:
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:developer.aya.b@gmail.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          developer.aya.b@gmail.com
      &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      Phone Number:
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"tel:+212600000000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+212600000000 &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addressElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-id="26989"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/address&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
      &lt;span class="c1"&gt;// Aya Bouchiha&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addressElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="c1"&gt;// developer.aya.b@gmail.com&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addressElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4fZCsbkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chht1t6qsyxv6yqacao5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fZCsbkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chht1t6qsyxv6yqacao5.PNG" alt="Aya Bouchiha global attributes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#title"&gt;
  &lt;/a&gt;
  title
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;title&lt;/strong&gt;: lets you show more information about an HTML element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Sport&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;ed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"sport/"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"more details about sport"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;more details&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VzRUUDep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltb9x9fwordkivcfdijn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VzRUUDep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltb9x9fwordkivcfdijn.PNG" alt="Aya Bouchiha global attributes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hidden"&gt;
  &lt;/a&gt;
  hidden
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;hidden&lt;/strong&gt;: indicates that that the element is not yet, or is no longer, relevant, browsers do not display the element with a hidden attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Title&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Hi, &lt;span class="nt"&gt;&amp;lt;mark&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;I'm Aya Bouchiha&lt;span class="nt"&gt;&amp;lt;/mark&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    This is a simple paragraph
 &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;more details&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QzG9Wh4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quln2u8drtpu5psdt6xj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QzG9Wh4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quln2u8drtpu5psdt6xj.PNG" alt="Aya Bouchiha global attributes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;accesskey&lt;/strong&gt;: specify a keyboard shortcut to focus an element.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;dir&lt;/strong&gt;: specify the text's direction.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;data-&lt;/strong&gt;: store extra and custom data on your html tag.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;title&lt;/strong&gt;: shows  more information about an HTML element.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;hidden&lt;/strong&gt;: hide an element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are your biggest performance engineering hacks? Answer to be featured on our podcast 🎧  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Thu, 29 Jul 2021 21:48:59 +0000</pubDate>
      <link>https://dev.to/devteam/what-are-your-biggest-performance-engineering-hacks-answer-to-be-featured-on-our-podcast-3009</link>
      <guid>https://dev.to/devteam/what-are-your-biggest-performance-engineering-hacks-answer-to-be-featured-on-our-podcast-3009</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-are-your-biggest-performance-engineering-hacks"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are your biggest performance engineering hacks?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Wednesday, August 4th at 1 PM, ET (5 PM UTC, 10 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement 😉
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt;. The new season premieres soon 👀  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>performance</category>
    </item>
    <item>
      <title>Got Bots? 4: Making Bots with the Azure Portal</title>
      <author>Chloe Condon 🎀</author>
      <pubDate>Thu, 29 Jul 2021 21:42:49 +0000</pubDate>
      <link>https://dev.to/azure/got-bots-4-making-bots-with-the-azure-portal-23jn</link>
      <guid>https://dev.to/azure/got-bots-4-making-bots-with-the-azure-portal-23jn</guid>
      <description>&lt;p&gt;Thanks to everyone who joined me live for my 4th episode of &lt;a href="https://dev.to/azure/got-bots-a-weekly-bots-series-with-the-microsoft-reactor-2b2h"&gt;Got Bots?&lt;/a&gt; with the Microsoft Reactor last week. It was such a joy to have y'all give your bot suggestions for our Clippy bot, and taking your questions on bots!&lt;/p&gt;

&lt;p&gt;If you missed the fun live, don't worry- you can watch the replay &lt;a href="https://youtu.be/2oAsXTS92LM"&gt;here&lt;/a&gt;, and in the embedded video below! 🤖⤵️&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2oAsXTS92LM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pssst! 🙋‍♀️ If you've missed any previous episode, check out my &lt;strong&gt;Got Bots?&lt;/strong&gt; &lt;a href="https://dev.to/azure/got-bots-a-weekly-bots-series-with-the-microsoft-reactor-2b2h"&gt;series summary dev.to post&lt;/a&gt; to get caught up!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On this episode we cover:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=235"&gt;3:55&lt;/a&gt; Previously on... &lt;em&gt;Got Bots?&lt;/em&gt; (a short recap)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=580"&gt;9:40&lt;/a&gt; A review of &lt;a href="https://docs.microsoft.com/en-us/learn/modules/build-qna-solution-qna-maker/?WT.mc_id=academic-33454-chcondon"&gt;QnA Maker&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=646"&gt;10:46&lt;/a&gt; &lt;a href="https://twitter.com/learnwdaniel"&gt;Daniel&lt;/a&gt; joins the stream for a brief cameo!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=1240"&gt;20:40&lt;/a&gt; We talk about my &lt;a href="https://dev.to/azure/building-an-animal-crossing-turnip-timer-video-2dni"&gt;Azure Functions Turnip Timer&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=1513"&gt;25:13&lt;/a&gt; Testing and training out QnA Maker bot&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=1579"&gt;26:19&lt;/a&gt; Selecting &lt;a href="https://docs.microsoft.com/en-us/azure/cognitive-services/qnamaker/how-to/chit-chat-knowledge-base/?WT.mc_id=academic-33454-chcondon"&gt;chit-chat&lt;/a&gt; for your bot&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://youtu.be/2oAsXTS92LM?t=2799"&gt;46:39&lt;/a&gt; Follow-up prompts with &lt;a href="https://docs.microsoft.com/en-us/learn/modules/build-qna-solution-qna-maker/?WT.mc_id=academic-33454-chcondon"&gt;QnA Maker&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Did you have fun? Thanks for joining me this month for &lt;a href="//aka.ms/gotbotslinks"&gt;Got Bots&lt;/a&gt;! Join me next month for Beep Boop: an AI/ML series (more details coming soon!)&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Fetching Teams User Info from Microsoft Graph with TeamsFx SDK</title>
      <author>Tomomi Imura 🐱 </author>
      <pubDate>Thu, 29 Jul 2021 21:26:21 +0000</pubDate>
      <link>https://dev.to/azure/fetching-teams-user-info-from-microsoft-graph-with-teamsfx-sdk-301c</link>
      <guid>https://dev.to/azure/fetching-teams-user-info-from-microsoft-graph-with-teamsfx-sdk-301c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  😘 TL;DR
&lt;/h2&gt;

&lt;p&gt;First of all, this tutorial became far longer than I initially intended, so I decided to include this quick summary of the article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are various tools and SDKs for Teams app develpment so you need to pick the right &amp;amp; prefered tools!&lt;/li&gt;
&lt;li&gt;TeamsFx is a great tool when you build app that uses Microsoft Graph API for fetching data, such as basic user info&lt;/li&gt;
&lt;li&gt;TeamsFx handles the OAuth 2.0 authorization code grant flow, getting an access token, and use the token to make Graph API calls&lt;/li&gt;
&lt;li&gt;Use the Graph wrapper, &lt;code&gt;client.api(path).get&lt;/code&gt; to make the call&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, proceed to the main content!&lt;/p&gt;




&lt;p&gt;In my &lt;a href="https://dev.to/azure/using-vs-code-toolkit-for-teams-app-development-2o0g"&gt;previous tutorial&lt;/a&gt;, I showed you how to use a VS Code extension, Teams Toolkit to start buidling a Teams bot. In this tutotial, I walk you through the sample bot app from Toolkit and introduce you Microsoft Graph and TeamsFx. But before getting into the code, let me quickly explain about development tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teams-development-tools"&gt;
  &lt;/a&gt;
  🔧 Teams Development Tools
&lt;/h2&gt;

&lt;p&gt;In my other Microsoft Teams-related tutorials, I mentioned &lt;strong&gt;Teams SDK&lt;/strong&gt; to build Tabs core user interface, &lt;strong&gt;Bot Framework&lt;/strong&gt; to build bots and messaging extensions, &lt;strong&gt;Adaptive Cards&lt;/strong&gt; for UI components in messages, and &lt;strong&gt;Teams Toolkit&lt;/strong&gt; VSCode extention for quick scaffolding all types of Teams apps.&lt;/p&gt;

&lt;p&gt;Some of the tools are not only created for Teams development, but for multiple Microsoft products. Here's a quick table of available tools for Teams:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Product&lt;/th&gt;
&lt;th&gt;What it is&lt;/th&gt;
&lt;th&gt;What it does for Teams app development&lt;/th&gt;
&lt;th&gt;What else it is used for&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href="https://docs.microsoft.com/en-us/javascript/api/overview/msteams-client?view=msteams-client-js-latest&amp;amp;WT.mc_id=m365-35902-timura"&gt;Teams SDK&lt;/a&gt; (Teams.js)&lt;/td&gt;
&lt;td&gt;Teams Client SDK&lt;/td&gt;
&lt;td&gt;Tabs development (Front-end)&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://dev.botframework.com/?WT.mc_id=m365-35902-timura"&gt;Bot Framework&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Bot SDK&lt;/td&gt;
&lt;td&gt;Teams bots development&lt;/td&gt;
&lt;td&gt;Web &amp;amp; mobile chat, Skype, Facebook, Amazon Alexa, Slack, Twilio, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://adaptivecards.io/?WT.mc_id=m365-35902-timura"&gt;Adaptive Cards&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Platform-agnostic UI snippets (JSON)&lt;/td&gt;
&lt;td&gt;Rich-format messages &amp;amp; cards&lt;/td&gt;
&lt;td&gt;Web &amp;amp; mobile UI, Outlook messages, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/app-studio-overview/?WT.mc_id=m365-35902-timura"&gt;App Studio&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Visual tool&lt;/td&gt;
&lt;td&gt;Create &amp;amp; configurate Teams app packages&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=TeamsDevApp.ms-teams-vscode-extension&amp;amp;WT.mc_id=m365-35902-timura"&gt;Teams Toolkit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;VS Code Extension&lt;/td&gt;
&lt;td&gt;Register &amp;amp; configure app. App scaffoldig.&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.microsoft.com/en-us/javascript/api/@microsoft/teamsfx/?view=msteams-client-js-latest&amp;amp;WT.mc_id=m365-35902-timura"&gt;TeamsFx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;SDK &amp;amp; CLI&lt;/td&gt;
&lt;td&gt;Implement identity and access to Graph resources&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.microsoft.com/en-us/graph/?WT.mc_id=m365-35902-timura"&gt;Microsoft Graph&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;REST API&lt;/td&gt;
&lt;td&gt;Provides access to data stored across Microsoft 365 services, icluding Teams&lt;/td&gt;
&lt;td&gt;Access &amp;amp; manage calendar, mail, oneDrive, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href="https://dev.teams.microsoft.com/home"&gt;Developer Portal for Microsoft Teams&lt;/a&gt; (Preview)&lt;/td&gt;
&lt;td&gt;Web tool&lt;/td&gt;
&lt;td&gt;Configurations &amp;amp; references&lt;/td&gt;
&lt;td&gt;(Teams-specific)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;There are more tools you can use for Teams, but I am not covering everything in this tutorial!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Usually during development, you would use a combination of some of them. For example, in this tutorial we are going to use Teams Toolkit, Bot Framework (that includes wrapper methods for Adaptive Cards), and TeamsFx (that includes Graph API wrappers). &lt;/p&gt;

&lt;p&gt;Now, let's start off where we left off in the previous tutorial, &lt;a href="https://dev.to/azure/using-vs-code-toolkit-for-teams-app-development-2o0g"&gt;Using VS Code Teams Toolkit Extension for Teams App Development&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-microsoft-bot-framework"&gt;
  &lt;/a&gt;
  🤖 Using Microsoft Bot Framework
&lt;/h2&gt;

&lt;p&gt;After you build and run the template code from the Toolkit, let's take a look at &lt;strong&gt;bot&lt;/strong&gt; directory, where the bot code is stored.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--63VbLqae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ngd7tbfbq2y3ra1iq7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--63VbLqae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ngd7tbfbq2y3ra1iq7d.png" alt="Screenshot - VS Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's walk through the template code together quickly—&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#botindexjs"&gt;
  &lt;/a&gt;
  📄 bot/index.js
&lt;/h3&gt;

&lt;p&gt;In &lt;strong&gt;index.js&lt;/strong&gt;, notice &lt;a href="https://docs.microsoft.com/en-us/javascript/api/botbuilder/?view=botbuilder-ts-latest&amp;amp;WT.mc_id=m365-35902-timura"&gt;&lt;code&gt;botbuilder&lt;/code&gt;&lt;/a&gt; (Microsoft Bot Framework) is imported.&lt;/p&gt;

&lt;p&gt;This is where the adapter is created so that it allows your bot to communicate with the user and send responses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BotFrameworkAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ConversationState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MemoryStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;botbuilder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BotFrameworkAdapter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BOT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;appPassword&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BOT_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Teams Toolkit already has handled registering your bot to Azure Active Directory so you don't need to manually configure your Bot ID and password&lt;/em&gt; 🙌&lt;/p&gt;

&lt;p&gt;Also, &lt;code&gt;Restify&lt;/code&gt; is set up to HTTP server and routing HTTP requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;restify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Listen for incoming requests.&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/messages&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To simplify the tutorial, I am not explaining how to manage states, and what &lt;em&gt;trun&lt;/em&gt; means. If you would like to learn the concept of bot, read &lt;a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-basics?view=azure-bot-service-4.0&amp;amp;WT.mc_id=m365-35902-timura"&gt;How bot works&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#botteamsbotjs"&gt;
  &lt;/a&gt;
  📄 bot/teamsBot.js
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;bot/teamsBot.js&lt;/strong&gt; is the main entry point for the bot.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;TeamsBot&lt;/code&gt; class is being created here. Its &lt;code&gt;run&lt;/code&gt; function is called by the adapter and routed to bot's activity logic through &lt;code&gt;Restify&lt;/code&gt; middleware (from &lt;strong&gt;index.js&lt;/strong&gt;). &lt;/p&gt;

&lt;p&gt;In the constructor, it overrides some of the &lt;a href="https://docs.microsoft.com/en-us/javascript/api/botbuilder/teamsactivityhandler?view=botbuilder-ts-latest&amp;amp;WT.mc_id=m365-35902-timura"&gt;&lt;code&gt;TeamsActivityHandler&lt;/code&gt;&lt;/a&gt; methods by extending it to customize bot behavior and message text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TeamsBot&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;TeamsActivityHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conversationState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMembersAdded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, methods overridden are &lt;code&gt;onMessage&lt;/code&gt; and &lt;code&gt;onMembersAdded&lt;/code&gt; in this sample. They register the event handlers for the &lt;code&gt;message&lt;/code&gt; event, emitted for every incoming message activity, and &lt;code&gt;MembersAdded&lt;/code&gt; event emitted when a new member is added to the conversation, respectively.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#message-event"&gt;
  &lt;/a&gt;
  Message event
&lt;/h4&gt;

&lt;p&gt;When a message is sent to bot from a user (like, &lt;code&gt;show&lt;/code&gt; command), &lt;code&gt;onMessage&lt;/code&gt; gets triggered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dialogState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, it runs the &lt;code&gt;Dialog&lt;/code&gt; with the new message Activity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#botdialogsmaindialogsjs"&gt;
  &lt;/a&gt;
  📄 bot/dialogs/mainDialogs.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DialogSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;DialogTurnStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WaterfallDialog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;botbuilder-dialogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-dialog?view=azure-bot-service-4.0&amp;amp;WT.mc_id=m365-35902-timura"&gt;dialogs library&lt;/a&gt; 💬 provides a state-based model to manage a long-running conversation with the user. A dialog performs a task that can represent conversational thread. &lt;/p&gt;




&lt;p&gt;Okay, this was a quick walk-through of what some of the code does. Now, let's get to the main topic, &lt;strong&gt;TeamsFx&lt;/strong&gt; and &lt;strong&gt;Graph&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-teamsfx"&gt;
  &lt;/a&gt;
  🪅 What is TeamsFx?
&lt;/h2&gt;

&lt;p&gt;TeamsFx is a framework, created to make the integrations of &lt;strong&gt;Microsoft Graph API&lt;/strong&gt; and implementing identity and access with Teams easier. For example, it handles the OAuth 2.0 authorization code grant flow, getting an access token, and use the token to make Graph API calls.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microsoft-graph-api"&gt;
  &lt;/a&gt;
  Microsoft Graph API
&lt;/h3&gt;

&lt;p&gt;So what is &lt;a href="https://docs.microsoft.com/en-us/graph/?WT.mc_id=m365-35902-timura"&gt;Microsoft Graph API&lt;/a&gt;, first of all? It is a REST API lets you to connect the data from Microsoft 365 services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1VeIC_fS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/graph/images/microsoft-graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VeIC_fS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.microsoft.com/en-us/graph/images/microsoft-graph.png" alt="Microsoft Graph API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;M365 platform holds various people-centric data and insights across the Microsoft cloud services, including Teams, Outlook, Calendars, etc. It means whenever you want to access to the data within your Teams app, you need to use Graph to access the data. &lt;/p&gt;

&lt;p&gt;For example, in this sample app, when a user asks a bot to display the user's info with the &lt;code&gt;show&lt;/code&gt; command, the app make an API call to fetch the data from Graph.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-teamsfx-to-call-graph-api"&gt;
  &lt;/a&gt;
  🪅 Using TeamsFx to call Graph API
&lt;/h2&gt;

&lt;p&gt;In &lt;strong&gt;bot/dialogs/mainDialogs.js&lt;/strong&gt;, both TeamsFx and Graph libraries are imported:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createMicrosoftGraphClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loadConfiguration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnBehalfOfUserCredential&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TeamsBotSsoPrompt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@microsoft/teamsfx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ResponseType&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@microsoft/microsoft-graph-client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#user-authentication-amp-authorization"&gt;
  &lt;/a&gt;
  🔏 User Authentication &amp;amp; Authorization
&lt;/h3&gt;

&lt;p&gt;The app creates and authenticates a &lt;code&gt;MicrosoftGraphClient&lt;/code&gt; by calling &lt;code&gt;loadConfiguration()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Then, a new instance of &lt;code&gt;TeamsBotSsoPrompt&lt;/code&gt; is added as a named dialog. &lt;code&gt;TeamsBotSsoPrompt&lt;/code&gt; is integrated with Bot Framework to simplify the authentication process for bots:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;loadConfiguration&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;dialogs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TeamsBotSsoPrompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TeamsBotSsoPrompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;scopes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User.Read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;scopes&lt;/code&gt; are the types of permission it requires to call Graph APIs for Teams. The resource-specific permissions are granular and define what an application can do within a specific resource.&lt;/p&gt;

&lt;p&gt;There are various permission scopes that can &lt;em&gt;read&lt;/em&gt; or &lt;em&gt;write&lt;/em&gt; (create, edit, delete). For instance, &lt;code&gt;User.Read&lt;/code&gt; is the scope needed to read users info, as the name suggests. And to enable the permissions, the app must ask the user for their consent.&lt;/p&gt;

&lt;p&gt;This operation creates a new prompt that leverages Teams Single Sign On (SSO) support for bot to automatically sign in user to receive OAuth token 🏅.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aLyfFpfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--h3bHmAbq--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r80t4cvr4fdxt9vyx3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aLyfFpfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--h3bHmAbq--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r80t4cvr4fdxt9vyx3k.png" alt="Screenshot - permissions dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Authentication and authorization are big topics here. I would need another tutorial to explain deeply about Microsoft identity platform. In the meantime, please read &lt;a href="https://docs.microsoft.com/en-us/graph/auth/auth-concepts/?WT.mc_id=m365-35902-timura"&gt;Authentication and authorization basics for Microsoft Graph&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calling-graph-api"&gt;
  &lt;/a&gt;
  📇 Calling Graph API
&lt;/h3&gt;

&lt;p&gt;In the app, when a user sends the "show" command to the bot, the app calls an API from Graph to fetch the user info. (The app asks the user a permission by popping up a SSO window before fetching the user's info, as explained in the previous section.)&lt;/p&gt;

&lt;p&gt;Every API call requires the access token 🏅 that has been aqcuired at the SSO sign-in process. (The token is attached in the Authorization header of the request). &lt;/p&gt;

&lt;p&gt;Also, to access the Microsoft Graph API for Teams, you will need the Teams credentials to do authentication to create a Graph client object.&lt;/p&gt;

&lt;p&gt;3 credential classes that are used to help simplifying authentication in TeamsFx:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;TeamsUserCredential&lt;/code&gt; - Teams current user's identity. Using this credential will request user consent at the first time. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;M365TenantCredential&lt;/code&gt; - Microsoft 365 tenant identity. It is usually used when user is not involved like time-triggered automation job. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;OnBehalfOfUserCredential&lt;/code&gt; - on-behalf-of flow. It needs an access token and you can get a new token for different scope. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For bot scenarios, we are using &lt;code&gt;OnBehalfOfUserCredential&lt;/code&gt; here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oboCredential&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OnBehalfOfUserCredential&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ssoToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;graphClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createMicrosoftGraphClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;oboCredential&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User.Read&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you have authentication setup and an instance of Graph client, you can finally begin to make calls to the service! &lt;/p&gt;

&lt;p&gt;This is how you can fetch the basic user information, then making the bot to send a message to Teams client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stepContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`You're logged in as &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and your job title is: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jobTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this is the simplified flow of what you have just learned:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0s14dAnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x77ebyoyygnxmij1cuh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0s14dAnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x77ebyoyygnxmij1cuh2.png" alt="Teams bot flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/azure/using-vs-code-toolkit-for-teams-app-development-2o0g#running-a-sample-bot-locally"&gt;Build and run&lt;/a&gt; on Teams client if you haven't. Try the &lt;code&gt;show&lt;/code&gt; command to ask the bot to display your info. &lt;br&gt;
When everything goes well, this is how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mChQ1Y0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjn7n2z1dy9vx6557lvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mChQ1Y0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjn7n2z1dy9vx6557lvu.png" alt="Screenshot - bot showing user info"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ta-da 🎉&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-with-graph"&gt;
  &lt;/a&gt;
  🧺 More with Graph
&lt;/h2&gt;

&lt;p&gt;Try making more Graph calls with the &lt;code&gt;api&lt;/code&gt; method. All requests start with &lt;code&gt;client.api(path)&lt;/code&gt; and end with an action, &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;post&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;To get the Teams group the user have joined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;me/joinedTeams&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response gives you a list of groups including the group IDs.&lt;/p&gt;

&lt;p&gt;To get the members of a Teams group:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;graphClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;groups/{Teams group ID}/members&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, try &lt;a href="https://developer.microsoft.com/en-us/graph/graph-explorer/?WT.mc_id=m365-35902-timura"&gt;Graph Explorer&lt;/a&gt; to test out the REST API and visualize the response!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9gJOqqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rd4gan1mhpdmm4jzuyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y9gJOqqD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rd4gan1mhpdmm4jzuyx.png" alt="Screenshot - Graph Explorer"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope you enjoyed the tutorial. There are many things you would want to know, such as concepts of bots, OAuth, identity management, etc. but I tried not to make this tutorial too wordy by flooding with info, so I simplified everything by not diving deep into the details on purpose. But hopefully, this tutorial still made sense to you!&lt;/p&gt;

&lt;p&gt;If you would like to dive deep, please check out the docs and code repos listed below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  📚 Learn More
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.botframework.com/?T.mc_id=m365-35902-timura"&gt;Microsoft Bot Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bot Services Documentation - &lt;a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-basics?view=azure-bot-service-4.0&amp;amp;tabs=javascript&amp;amp;WT.mc_id=m365-35902-timura"&gt;How bot works?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/javascript/api/@microsoft/teamsfx/?view=msteams-client-js-latest&amp;amp;T.mc_id=m365-35902-timura"&gt;TeamsFx SDK references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/OfficeDev/TeamsFx"&gt;TeamsFx GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/graph/?WT.mc_id=m365-35902-timura"&gt;Microsoft Graph API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/graph/auth/auth-concepts/?WT.mc_id=m365-35902-timura"&gt;Authentication and authorization basics for Microsoft Graph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>msteams</category>
      <category>m365</category>
      <category>node</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Building Microservices in Go: Graceful Shutdown</title>
      <author>Mario Carrion</author>
      <pubDate>Thu, 29 Jul 2021 21:23:02 +0000</pubDate>
      <link>https://dev.to/mariocarrion/building-microservices-in-go-graceful-shutdown-4adf</link>
      <guid>https://dev.to/mariocarrion/building-microservices-in-go-graceful-shutdown-4adf</guid>
      <description>&lt;p&gt;When building any &lt;em&gt;long-term running&lt;/em&gt; process, like a webserver or a program importing data, we should consider providing a way to gracefully shut it down, the idea behind this is to provide a way to exit the process cleanly, to clean up resources and to properly cancel that said running process.&lt;/p&gt;

&lt;p&gt;The steps to support &lt;code&gt;Graceful Shutdown&lt;/code&gt; in Go consist of two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Listen for OS signals, and&lt;/li&gt;
&lt;li&gt;Handle those signals.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Go those signals are provided by the &lt;a href="https://pkg.go.dev/os/signal"&gt;&lt;code&gt;os/signal&lt;/code&gt; package&lt;/a&gt;. Starting with &lt;a href="https://mariocarrion.com/2021/02/17/what-is-new-in-go-1-16.html"&gt;Go 1.16&lt;/a&gt; the way I like to implement &lt;em&gt;Graceful Shutdown&lt;/em&gt; is by using &lt;code&gt;os/signal.NotifyContext&lt;/code&gt;, this function provides an idiomatic way to propagate cancellation when using goroutines, which is usually the case when dealing with long-term running processes.&lt;/p&gt;

&lt;p&gt;Keep in mind that depending on how our &lt;code&gt;main&lt;/code&gt; package is implemented you may need to refactor it, having the &lt;code&gt;main&lt;/code&gt; function to reach the following objectives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Call a &lt;code&gt;Parse&lt;/code&gt; function, if needed, like &lt;code&gt;flag.Parse()&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;Call a &lt;code&gt;run&lt;/code&gt;-like function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; function is the one orchestrating all the different types, initializing everything, connecting all the dots and perhaps using explicit &lt;em&gt;Dependency Injection&lt;/em&gt;, and more importantly it may run a few goroutines to implement the call to &lt;code&gt;signal.NotifyContext&lt;/code&gt; that in the end is going to handle the logic for implementing &lt;em&gt;Graceful Shutdown&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's look at some concrete examples.&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VXxe7-b5euo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-raw-signalnotifycontext-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;signal.NotifyContext&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Starting in Go 1.16 &lt;code&gt;signal.NotifyContext&lt;/code&gt; is the way I like to recommend when handling signals, this replaces the previous way where a channel was required.&lt;/p&gt;

&lt;p&gt;For example having the same &lt;code&gt;main()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;errC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"exiting..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using &lt;code&gt;signal.Notify&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Signal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interrupt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"waiting for signal..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"signal received"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errC&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And when using &lt;code&gt;signal.NotifyContext&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotifyContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interrupt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGQUIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}()&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"waiting for signal..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"signal received"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errC&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In practice both of them work achieve the same goal because both of them are meant to listen to signals, however the biggest difference is that &lt;code&gt;signal.NotifyContext&lt;/code&gt; provides a context &lt;code&gt;ctx&lt;/code&gt; that could be used for creating more complex propagation rules (like timeouts for example) that we can use to cancel other goroutines, instead of doing more work manually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-graceful-shutdown-in-http-servers"&gt;
  &lt;/a&gt;
  Implementing Graceful Shutdown in HTTP Servers
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code used for this post is &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/tree/76509a58cabf95bb8329da4e8bf41986885ba814"&gt;available on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Included in the standard library, in &lt;code&gt;net/http&lt;/code&gt;, Go includes its own HTTP Server in &lt;a href="https://pkg.go.dev/net/http#Server"&gt;&lt;code&gt;net/http.Server&lt;/code&gt;&lt;/a&gt;, this server defines a method called &lt;a href="https://pkg.go.dev/net/http#Server.Shutdown"&gt;&lt;code&gt;Shutdown&lt;/code&gt;&lt;/a&gt; meant to be called when the server is supposed to exit and it shutdowns the server gracefully.&lt;/p&gt;

&lt;p&gt;If we use the snippet we defined above we can write our code to handle &lt;em&gt;Graceful Shutdown&lt;/em&gt; for HTTP servers in &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/76509a58cabf95bb8329da4e8bf41986885ba814/cmd/rest-server/main.go#L117-L150"&gt;the following way&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="c"&gt;// ... other code initializing things used by this HTTP server&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Shutdown signal received"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;ctxTimeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}()&lt;/span&gt;

        &lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetKeepAlivesEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Shutdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctxTimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Shutdown completed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Listening and serving"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// "ListenAndServe always returns a non-nil error. After Shutdown or Close, the returned error is&lt;/span&gt;
        &lt;span class="c"&gt;// ErrServerClosed."&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;srv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ErrServerClosed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;errC&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The goal of implementing &lt;em&gt;Graceful Shutdowns&lt;/em&gt; is to allow defining some clean-up steps when dealing with a long-running process, in cases where perhaps we need to commit some database transactions, remove some used files or maybe trigger an event to indicate some other process should take over the subsequent events.&lt;/p&gt;

</description>
      <category>go</category>
      <category>microservices</category>
    </item>
    <item>
      <title>Build a CRUD API using the Google Sheets API</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 29 Jul 2021 21:20:15 +0000</pubDate>
      <link>https://dev.to/logrocket/build-a-crud-api-using-the-google-sheets-api-923</link>
      <guid>https://dev.to/logrocket/build-a-crud-api-using-the-google-sheets-api-923</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/georgeyvb/"&gt;Georgey V B&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;As the name suggests, the Google Sheets API lets you connect an existing spreadsheet, parse its available data, and pass it to your web application. The latest is version 4.0, which provides the user control over many other properties — such as complete access to cell formatting, including setting colors, text styles, and more. Imagine having a completely free database with an intuitive user interface that helps you view your data and organize it according to your needs while acting as a CMS. How cool is that?&lt;/p&gt;

&lt;p&gt;Without further ado, let’s jump right into creating your own CRUD API using the Google Sheets API.&lt;/p&gt;

&lt;p&gt;Here’s what we’ll cover in this article:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#setting-up-new-project-google-cloud-console"&gt;Setting up a new project in Google Cloud Console&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#linking-google-sheet"&gt;Linking the Google Sheet&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#setting-up-crud-api"&gt;Setting up the CRUD API&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#making-your-first-request"&gt;Making your first request&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#implementing-crud-operation"&gt;Implementing CRUD operations&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-new-project-in-google-cloud-console"&gt;
  &lt;/a&gt;
  Setting up a new project in Google Cloud Console
&lt;/h2&gt;

&lt;p&gt;As with accessing any API service, we must first set up authentication and authorization. Head over to &lt;a href="https://cloud.google.com"&gt;Google Cloud&lt;/a&gt; and sign up if you haven't made an account yet. Then, follow the steps below to make a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1CBuRQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/new-project-google-cloud-console.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1CBuRQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/new-project-google-cloud-console.png" alt="Setting up a new project in Google Cloud Console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;New Project&lt;/strong&gt;, give it a suitable name, and click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, click the navigation menu and go to &lt;strong&gt;APIs&lt;/strong&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;strong&gt;Services&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQqo2xsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/apis-services-google-cloud-console.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQqo2xsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/apis-services-google-cloud-console.png" alt="APIs and Services panel in Google Cloud Console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be then redirected to the API library. Search for the Google Sheets API and enable it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clddZrYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/google-sheets-api-download.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clddZrYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/google-sheets-api-download.png" alt="Enable the Google Sheets API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Head back to the APIs and Services dashboard. Go to &lt;strong&gt;Credentials&lt;/strong&gt; and create a new credential.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXP6z_TU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/credentials-apis-services.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXP6z_TU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/credentials-apis-services.png" alt="Credentials panel in APIs and Services tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Service Account&lt;/strong&gt;. Give it a name, set the rest as it is, and click &lt;strong&gt;Done&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You have now created a bot account for the spreadsheet that has permissions to read and write operations on the sheet.&lt;/p&gt;

&lt;p&gt;Copy the service email we created. This will come into use when we connect the spreadsheet to the Google Cloud project.&lt;/p&gt;

&lt;p&gt;Click the service account email, and then move along to &lt;strong&gt;Keys&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_5n2cG-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/keys-google-cloud-console.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_5n2cG-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/keys-google-cloud-console.png" alt="Create a new key in Google Cloud Console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go ahead and create a new key, setting the file type as JSON. A file will be downloaded shortly, and if possible you should move it to the folder where you expect to set up the starting files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linking-the-google-sheet"&gt;
  &lt;/a&gt;
  Linking the Google Sheet
&lt;/h2&gt;

&lt;p&gt;Now we’ll connect our spreadsheet to the Google Cloud project. Head over to &lt;a href="https://docs.google.com/spreadsheets"&gt;Google Docs&lt;/a&gt; and make a new spreadsheet. Name the spreadsheet.&lt;/p&gt;

&lt;p&gt;Enter in some dummy data so that we have something to fetch while testing the API.&lt;/p&gt;

&lt;p&gt;Now, let’s add the service account and assign it the Editor role, which gives it permissions to read, write, update, and delete data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Or4XU_Bj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/service-email-google-sheet-access.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Or4XU_Bj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/service-email-google-sheet-access.png" alt="Giving the service email editor privileges in the Google Sheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Share&lt;/strong&gt; and add the service email we recently copied, make sure you give it editor access, and un-check &lt;strong&gt;Notify People.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s all you have to do! Now let’s head over to the code editor and set up the starting files for the API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-crud-api"&gt;
  &lt;/a&gt;
  Setting up the CRUD API
&lt;/h2&gt;

&lt;p&gt;We’ll be using a couple of packages for the API: &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/dotenv"&gt;dotEnv&lt;/a&gt;, and &lt;a href="https://www.npmjs.com/package/googleapis"&gt;googleapis&lt;/a&gt;. Before we download those, let’s initialize npm using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now install the packages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express dotenv googleapis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add nodemon as a dev dependency (this will ensure the development server restarts whenever we make any code changes):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;nodemon &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all that done, create a new file called &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Start by requiring &lt;code&gt;dotenv&lt;/code&gt; and then initialize &lt;code&gt;express&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Up and running!!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new script in the &lt;code&gt;package.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if all works fine, nodemon will restart the server every time we save the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-your-first-request"&gt;
  &lt;/a&gt;
  Making your first request
&lt;/h2&gt;

&lt;p&gt;With all that done, let’s see whether or not our spreadsheet is actually linked with the Google Cloud project.&lt;/p&gt;

&lt;p&gt;Import the following from the googleapis package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;googleapis&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a GET route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello Google!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an &lt;code&gt;auth&lt;/code&gt; token next, consisting of a &lt;code&gt;keyFile&lt;/code&gt; that points to the &lt;code&gt;credentials.json&lt;/code&gt; file we downloaded and &lt;code&gt;scopes&lt;/code&gt; that provide complete access to perform read and write operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GoogleAuth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;keyFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;credentials.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;scopes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.googleapis.com/auth/spreadsheets&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-AWCI7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/auth-tokens-google-sheets-dev.png" alt="Auth tokens in Google Sheets"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Source: &lt;a href="https://developers.google.com/sheets/api/guides/authorizing"&gt;Google Sheets for Developers&lt;/a&gt;.&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can always refer to the &lt;a href="https://developers.google.com/sheets/api/quickstart/nodejs"&gt;official Google Developers documentation&lt;/a&gt; for additional help with this.&lt;/p&gt;

&lt;p&gt;Next up, define &lt;code&gt;client&lt;/code&gt;, the latest version of the API, and the &lt;code&gt;spreadsheetId&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;googleSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sheets&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spreadsheetId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;your_spreadsheetid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get the spreadsheet ID from the URL of the Google spreadsheet, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://docs.google.com/spreadsheets/d/{_your_database_id_}/edit#gid=0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, &lt;code&gt;gid&lt;/code&gt; is the sheet ID.&lt;/p&gt;

&lt;p&gt;You should probably store this sensitive information in an environment file. Create a &lt;code&gt;.env&lt;/code&gt; file and store the spreadsheet ID as shown:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SPREADSHEET_ID=your_spreadsheet_id
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, point it out to the environment variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const spreadsheetId = process.env.SPREADSHEET_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all that done, let’s now finally make a request!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getMetaData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;googleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spreadsheets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;spreadsheetId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sheet1!A:B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getMetaData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you name the variables as we did above because it is also the shorthand for writing &lt;code&gt;auth: auth&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Every API call takes in two parameters, which are &lt;code&gt;auth&lt;/code&gt; and the &lt;code&gt;spreadsheetId&lt;/code&gt;. The &lt;code&gt;range&lt;/code&gt; defines the range of cells to be edited. If you’re not sure of the values, you can always make use of the spreadsheet’s interface. We’ll be using when it comes to reading cell values in the next section.&lt;/p&gt;

&lt;p&gt;For now, go ahead and make a GET request to the root URL on &lt;code&gt;localhost:3000&lt;/code&gt;. If you have followed through with all the steps, you’ll get a long response back from the API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qwUcbuBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/get-request-response.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwUcbuBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/get-request-response.png" alt="GET request response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-crud-operation"&gt;
  &lt;/a&gt;
  Implementing CRUD operation
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-read-cell-values"&gt;
  &lt;/a&gt;
  1. Read cell values
&lt;/h3&gt;

&lt;p&gt;For now, comment out the previous request, and let’s actually read the cell values we have entered.&lt;/p&gt;

&lt;p&gt;To read cell values, we’ll use the &lt;code&gt;spreadsheets.values.get&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getSheetData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;googleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spreadsheets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;spreadsheetId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sheet1!A:B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getSheetData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I said before, the method always takes in &lt;code&gt;auth&lt;/code&gt; and &lt;code&gt;spreadsheetId&lt;/code&gt;. The &lt;code&gt;range&lt;/code&gt; parameter defines the cell area to read and write upon. In this case, we’ll only make changes to the first two columns, A and B.&lt;/p&gt;

&lt;p&gt;Go ahead and make a GET request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uS_nKbQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/get-request-info-unrestricted.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uS_nKbQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/get-request-info-unrestricted.png" alt="Make a GET request without restricting cell values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response contains a bunch of information, including the cell values, the color of the cells, geo-location, and time zone. Let’s target the cell values here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getSheetData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The response looks much more concise now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZH5KhPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/get-request-response-concise.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZH5KhPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/get-request-response-concise.png" alt="GET request response with concise cell values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that we are also getting the actual column headings in these results. You may want to omit those and send back only the cell values underneath the first row.&lt;/p&gt;

&lt;p&gt;Here’s how we can change the &lt;code&gt;range&lt;/code&gt;. Select the area you want to include in your response. The selected area is denoted by a range. In our example, it’s from column A to column B.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rChQeyoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/google-sheets-range.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rChQeyoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/google-sheets-range.png" alt="Select the range in your Google Sheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we need to include the cell values under the column headings in row one, we can start selecting from row two instead. Hence, the new range is now &lt;code&gt;Sheet1!A2:B&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The response looks much better now!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QwEXKB4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/final-get-request.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QwEXKB4p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/final-get-request.png" alt="The final GET request, with all changes made"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-create-and-post-data"&gt;
  &lt;/a&gt;
  2. Create and post data
&lt;/h3&gt;

&lt;p&gt;With that done, let’s move on to posting data into the spreadsheet.&lt;/p&gt;

&lt;p&gt;Set up a POST route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Data submitted!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Follow the same procedure as above, setting up the &lt;code&gt;auth&lt;/code&gt; token and defining the spreadsheet ID.&lt;/p&gt;

&lt;p&gt;To post data, we’ll use the &lt;code&gt;spreadsheets.values.append&lt;/code&gt; method. The Google API will append values into the spreadsheet depending on the number of values passed into the request.&lt;/p&gt;

&lt;p&gt;The method remains the same. We’ll pass in &lt;code&gt;auth&lt;/code&gt;, &lt;code&gt;spreadsheetId&lt;/code&gt;, and a &lt;code&gt;range&lt;/code&gt;. Along with that, we now pass in two more properties: &lt;code&gt;valueInputOption&lt;/code&gt; and &lt;code&gt;resource&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;googleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spreadsheets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;spreadsheetId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sheet1!A2:B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;valueInputOption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USER_ENTERED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NextJS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The framework for Production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;valueInputOption&lt;/code&gt; can take two options, &lt;code&gt;"RAW"&lt;/code&gt; or &lt;code&gt;"USER_ENTERED"&lt;/code&gt;. If &lt;code&gt;"RAW"&lt;/code&gt;, then whatever the user has entered will be stored as it is. If you use &lt;code&gt;"USER_ENTERED"&lt;/code&gt;, the user input will always be parsed when passed — if the user enters a number, it’ll be parsed as a number.&lt;/p&gt;

&lt;p&gt;This is really helpful in certain use cases — for instance, let’s say you’re building a React form that sends in the submitted data to a spreadsheet. I’ll use the example of a simple spreadsheet with a score corresponding to each subject.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8fEUGtaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/create-and-post-data.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8fEUGtaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/create-and-post-data.png" alt="Example for creating and posting data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;valueInputOption&lt;/code&gt; is set to &lt;code&gt;"USER_ENTERED"&lt;/code&gt;, the data gets posted and is recognized as a number. But if I set the parameter to &lt;code&gt;"RAW"&lt;/code&gt; and pass the score as a string, the data gets posted, but Google Sheets doesn’t appear to treat the score as a number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU2QGTcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/create-and-post-data-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU2QGTcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/create-and-post-data-2.png" alt="Parsing strings and numbers in post data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;resource&lt;/code&gt; takes in the cell values to be added to the spreadsheet. You can also enter multiple entries by adding another set of arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NextJS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The framework for Production&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The testing framework for React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and make a POST request. You can make use of any API tester like &lt;a href="https://postman.com"&gt;Postman&lt;/a&gt; for help with this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-update-cell-values"&gt;
  &lt;/a&gt;
  3. Update cell values
&lt;/h3&gt;

&lt;p&gt;To update cell values, we will use the &lt;code&gt;spreadsheets.values.update&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Go ahead and make a PUT route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/update&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Updated cell!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method takes in &lt;code&gt;auth&lt;/code&gt; and &lt;code&gt;spreadsheetId&lt;/code&gt; as usual. Make sure the &lt;code&gt;range&lt;/code&gt; points out to a single row only, unless you’re updating multiple rows.&lt;/p&gt;

&lt;p&gt;Here, I will specify &lt;code&gt;range:&lt;/code&gt; &lt;code&gt;"Sheet1!A2:B2"&lt;/code&gt;, which is the second row only. The rest all remains the same. You can set &lt;code&gt;valueInputOption&lt;/code&gt; to either &lt;code&gt;"RAW"&lt;/code&gt; or &lt;code&gt;"USER_ENTERED"&lt;/code&gt;. And finally, enter the cell values you want to replace through &lt;code&gt;resource&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;googleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spreadsheets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;spreadsheetId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sheet1!A2:B2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;valueInputOption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USER_ENTERED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jamstack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Future of the Web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and make a PUT request on the API tester. The cell values should be updated now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-delete-cell-values"&gt;
  &lt;/a&gt;
  4. Delete cell values
&lt;/h3&gt;

&lt;p&gt;The Sheets API recommends using a POST request in order to use the &lt;code&gt;spreadsheets.values.clear&lt;/code&gt; method.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KExPBN5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/google-sheets-api-documentation.png" alt="Deleting cell values"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;Source: &lt;a href="https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/clear"&gt;Google Sheets API documentation&lt;/a&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So, we’ll make a new POST route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Deleted Cell successfully!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is quite straightforward. All you need to do is specify the spreadsheet row and column through the &lt;code&gt;range&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;googleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spreadsheets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;spreadsheetId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sheet1!A5:B5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make a new request to the &lt;code&gt;/delete&lt;/code&gt; route to see the changes.&lt;/p&gt;

&lt;p&gt;Well, congratulations! That’s something new! We have implemented CRUD operations using Google Sheets. If you ever get stuck, you can take a look at &lt;a href="https://github.com/GeoBrodas/google-sheets-crud"&gt;this repo on my GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Looks like we discovered a whole new database that is free and has a clean interface for managing data. You can use it with a range of languages, including Python, Go, Ruby, and many more.&lt;/p&gt;

&lt;p&gt;Although there is a limit on the number of requests you can make — 100 requests per 100 seconds — if you look at the bright side, the Google Sheets API provides a great way for you to start learning APIs and can be used to integrate small-scale projects.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and ngrx/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>googlecloud</category>
    </item>
  </channel>
</rss>
