<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>In Search of the Best Drag-and-Drop App Builder: 10 Contenders, One Winner</title>
      <author>Alesia Traichuk</author>
      <pubDate>Thu, 11 Nov 2021 08:10:45 +0000</pubDate>
      <link>https://dev.to/atraichuk/in-search-of-the-best-drag-and-drop-app-builder-10-contenders-one-winner-25e3</link>
      <guid>https://dev.to/atraichuk/in-search-of-the-best-drag-and-drop-app-builder-10-contenders-one-winner-25e3</guid>
      <description>&lt;p&gt;If you’ve ever thought about creating a mobile app from scratch, you know that it takes some searching to find the right tools. Drag-and-drop app development is often a good fit, so let’s talk about how to find the best drag-and-drop app builder to get you started. But before we get into specific platforms, let’s ask and answer some basic questions: &lt;/p&gt;

&lt;p&gt;1) What is drag-and-drop app development?&lt;br&gt;
2) What are the advantages of drag-and-drop app builders?&lt;/p&gt;

&lt;p&gt;Drag-and-drop app development is one of the easiest and smartest ways to create your own app from scratch. This method doesn’t require programming skills and includes pre-built services and templates to simplify the creation process. Drag-and-drop mobile app builders usually offer opportunities for further customization and state-of-the-art features. Although their popularity is skyrocketing, there are a few advantages and disadvantages that are worth considering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drag-and-drop app builders&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;*Are an affordable app development solution. App development costs can be a barrier for many businesses, but the majority of drag-and-drop builders have several pricing options. This will give you the flexibility to choose a suitable price.&lt;/p&gt;

&lt;p&gt;*Are quicker than a development team. Drag-and-drop app builders allow you to save time by keeping development in-house rather than relying on external development resources. This means that you are fully in charge of the execution of your idea, and there’s no need to work with a team that doesn’t share your point of view.&lt;/p&gt;

&lt;p&gt;*Make it easy to create a mobile application. Customization can be difficult, but drag-and-drop app builders make it easy. With the help of pre-built templates available with a platform, you can customize and implement them without being a tech expert.&lt;/p&gt;

&lt;p&gt;*Provide multiple features for different business niches. App development platforms are usually packed with a bunch of cool features and templates that meet almost every business need. Whether you’re a retailer or a small makeup studio, a drag-and-drop app builder will make it easy to achieve your goals.&lt;/p&gt;

&lt;p&gt;*Have an easy-to-understand interface. You don’t need to worry about spending loads of time learning the basics. They’re built for people with minimal technical experience, which makes them easy to use and highly intuitive.&lt;/p&gt;

&lt;p&gt;There are some disadvantages to drag-and-drop mobile app builders, but not very many. The most common complaint is that there is a limited number of features, which can prevent you from making your complex idea happen. You may also find it difficult to build an application that requires a lot of user interaction.&lt;/p&gt;

&lt;p&gt;Now that you have an idea of what drag-and-drop app builders are like, let’s move on to a list of the best drag-and-drop app builders.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The 10 Best Drag-and-Drop App Builders&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appery.io/appbuilder"&gt;&lt;strong&gt;Appery.io&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a cloud-based drag-and-drop app builder for creating hybrid mobile and responsive web applications. Since it’s cloud-based, you don’t need to download it or install anything, so you can start building your applications quickly. The drag-and-drop functionality and the power of Javascript can easily turn your idea into an application. The app builder is a web, PWA, and mobile app development platform which enables applications built with Appery.io to run smoothly and look cool on all popular devices and operating systems. Additionally, app data can be stored by instantly adding a cloud database and back end to your app whenever needed.&lt;/p&gt;

&lt;p&gt;Other advantages of this UI builder include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ease of usage. Even complete beginners can grasp the basics and start using this app builder. Full-fledged developers can also work with the frameworks they enjoy.&lt;/li&gt;
&lt;li&gt;Integrated back-end services such as server-side scripting, cloud database, push notifications, and authentication.&lt;/li&gt;
&lt;li&gt;Easy integration of your own back end. This drag-and-drop app builder provides the tools to create RESTful APIs from various enterprise systems including Oracle, SQL Server, and more.&lt;/li&gt;
&lt;li&gt;Collaboration made simple. You can share your project with developers, business users, and customers in real time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pricing plans are reasonable and are justified by great functionality and quality of the product: beginners - $25/month, pro - $70/month, team - $135/month, and ultimate - $500/month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.appypie.com/"&gt;&lt;strong&gt;Appy Pie&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This app-building platform is one of the leading drag-and-drop app builders in the world. It’s swiftly gaining popularity and now has over 3 million users across the globe. So what makes this drag-and-drop app development software so special? The secret lies in its step-by-step process for creating successful business apps and the kit of features it offers. Let’s take a quick look at them:&lt;/p&gt;

&lt;p&gt;-API&lt;br&gt;
-Access controls/permissions&lt;br&gt;
-Alerts/notifications&lt;br&gt;
-Application management&lt;br&gt;
-Change management&lt;br&gt;
-Collaboration tools&lt;br&gt;
-Custom development&lt;br&gt;
-Debugging&lt;br&gt;
-Drag &amp;amp; drop&lt;br&gt;
-Graphical user interface&lt;br&gt;
-Mobile development&lt;br&gt;
-Reporting/analytics&lt;br&gt;
-Software development&lt;br&gt;
-Web app development&lt;/p&gt;

&lt;p&gt;Another bonus of Appy Pie is that they develop a wide range of tutorials for customers that explain the process of creating an application and guide users through each step. Additionally, the platform offers a three-step process for creating an application. All you need to do is enter your app name, add necessary features for Android/iOS, and publish the app on Google Play and iTunes. Voila, your app is ready!&lt;/p&gt;

&lt;p&gt;The pricing plans are quite reasonable: basic - $15/app/month, gold - $36/app/month, platinum - $60/app/month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mobincube.com/"&gt;&lt;strong&gt;Mobincube&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s not easy to find a drag-and-drop mobile app builder which offers both value and an affordable price, but Mobincube is one of these rare pocket-friendly platforms. You can start building as many apps with ads as you want without being limited by space and at no cost. Other pricing plans include: small - $2.99/month, medium - $9.99/month, large - $19.99/month, XL - $49.99/month, and XXL - $99.99/month.&lt;/p&gt;

&lt;p&gt;Although the editor doesn’t look as modern as some, it does boast of a unique set of features:&lt;/p&gt;

&lt;p&gt;-Advanced customization&lt;br&gt;
-Online store integration&lt;br&gt;
-Monetization with in-app ads&lt;br&gt;
-Navigation bars&lt;br&gt;
-Database Integration&lt;br&gt;
-Third-party solution integration&lt;br&gt;
-Audio and video&lt;br&gt;
-Remote content updates&lt;br&gt;
-Push notifications&lt;br&gt;
-Google Maps&lt;br&gt;
-Google Analytics&lt;/p&gt;

&lt;p&gt;Competitive prices and a wide variety of templates are serious bonuses that make this app builder stand out from other apps. While there is still room for improvement, this drag-and-drop app builder is definitely in the top ten.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.swiftic.com/"&gt;&lt;strong&gt;Swiftic&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This drag-and-drop app builder positions itself as a platform that caters to both big and small businesses. The main categories this platform suits best are retail and commerce, health and beauty, and professional services. Their platform and its layout are crystal clear with a combination of seven different templates that can be combined with six different styles of navigation. What makes it unique is that all the colors on the app and the icons can be adapted with your own artwork. Swiftic also provides a large number of features:&lt;/p&gt;

&lt;p&gt;-In-app coupons&lt;br&gt;
-Mobile store&lt;br&gt;
-Push notifications&lt;br&gt;
-Scratch cards&lt;br&gt;
-Loyalty cards&lt;br&gt;
-Deliveries&lt;br&gt;
-Catalogues&lt;br&gt;
-Menus &lt;br&gt;
-Social integration&lt;br&gt;
-Customer engagement (surveys, contests, and more)&lt;br&gt;
-Branches (outlets)&lt;br&gt;
-Scheduling&lt;/p&gt;

&lt;p&gt;Their pricing plans are quite different from the previous drag-and-drop UI builders. They have one tier that has either a monthly ($57), yearly ($48), or biannual subscription ($29). Probably the most appealing thing is their six-month success guarantee, which means that if you were unable to achieve “any meaningful business result” with your app, Swiftic will give you six months of service for free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://appinstitute.com/"&gt;&lt;strong&gt;AppInstitute&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AppInstitute is another drag-and-drop mobile app builder for busy small business owners. The UI builder offers templates for more than 20 business types, so it’s a wonderful opportunity to take advantage of! The process of creating an application is clear even for beginners and involves only four steps. First, you pick a template with all the features you need. Then brand your application, edit content (all without writing a single line of code), and easily make it live.&lt;/p&gt;

&lt;p&gt;The range of AppInstitute’s features is promising. They include:&lt;br&gt;
-Full brand control&lt;br&gt;
-Calendar and booking system&lt;br&gt;
-Rich media&lt;br&gt;
-Drag-and-drop app builder&lt;br&gt;
-Online payments&lt;br&gt;
-Push notifications and messaging&lt;br&gt;
-Social media integration&lt;br&gt;
-GEO listings&lt;/p&gt;

&lt;p&gt;This platform will be especially appreciated by eCommerce businesses, as it allows them to make payments from within the app, without navigating out of it for any reason. The apps built with this platform are available for a monthly subscription of $42 per month (PWA), $66 per month (PWA + iOS and Android), $84 per month (PWA, iOS and Android + iPad), and $340 per month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.appmachine.com/"&gt;&lt;strong&gt;AppMachine&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one’s name speaks for itself. AppMachine drag-and-drop app builder is impressive both in its design and functionality. The interface looks like a lego block, which makes the whole process of planning and constructing an application appealing and unintimidating. Although not every component is intuitive from the beginning, anyone can get the hang of it and eventually succeed. With AppMachine, you can use over 35 pre-coded apps to build your own. It also provides templates for schools, travel and tourism, music, sports, and restaurant apps. &lt;/p&gt;

&lt;p&gt;The list of AppMachine’s features is impressive too. They offer:&lt;br&gt;
-Web application builder&lt;br&gt;
-Support for iOS, Android, and Windows mobile devices&lt;br&gt;
-User-friendly interface&lt;br&gt;
-Pre-built templates&lt;br&gt;
-Easy publishing&lt;br&gt;
-Free signup&lt;br&gt;
-Multilingual interface&lt;br&gt;
-Live app preview&lt;br&gt;
-Connect to web services&lt;br&gt;
-Auto submission to AppStore and PlayStore&lt;/p&gt;

&lt;p&gt;In terms of cost, Appmachine offers two different plans, with Plus at $49 a month and Pro at $69 a month. By the way, they don’t charge any fees for monetizing your app. You just pay for your subscription and pocket all the revenue from app monetization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buildfire.com/"&gt;&lt;strong&gt;BuildFire&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BuildFire mobile app builder is definitely easy and user-friendly. It offers an easy-to-use dashboard and admin control panel that smoothes the whole process of releasing updates. A vast number of customization options allow users to make changes to the app on the go and test them in a real environment. The drag-and-drop app builder allows users to create fully custom mobile apps, business workflow, employee communications, eCommerce, fitness, and many other apps. The features kit is extensive as well. It includes:&lt;/p&gt;

&lt;p&gt;-Drag &amp;amp; drop&lt;br&gt;
-Reporting/analytics&lt;br&gt;
-Access controls/permissions&lt;br&gt;
-Compatibility testing&lt;br&gt;
-Deployment management&lt;br&gt;
-Mobile development&lt;br&gt;
-Source control&lt;br&gt;
-Design templates&lt;br&gt;
-Feature library&lt;br&gt;
-Visual interface&lt;/p&gt;

&lt;p&gt;Their pricing plan is quite democratic. They offer a free plan and a premium plan that is available for $49 a month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mobileroadie.com/"&gt;&lt;strong&gt;MobileRoadi&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MobileRoadi is considered one of the most robust drag-and-drop app builders available on the market today. The platform offers a collection of nine categories for pre-built app templates. Among them are music, entertainment, events, sport, government and education, hospitality and travel, business, media, and religious organizations. The process of creating an application takes five steps and includes building, designing, managing, engaging, and analyzing. The interface of this app builder is professionally designed and planned, however it takes some time to adapt.&lt;/p&gt;

&lt;p&gt;The range of features include:&lt;br&gt;
-Push notifications&lt;br&gt;
-Mailing list&lt;br&gt;
-Chat wall&lt;br&gt;
-API&lt;br&gt;
-Social unlock&lt;br&gt;
-Top users&lt;br&gt;
-Polls&lt;br&gt;
-Pop-up promos&lt;br&gt;
-Geofencing&lt;br&gt;
-Location and directions&lt;/p&gt;

&lt;p&gt;Due to the wide array of features, their pricing plans start from a CORE plan at $149 a month and go up to their PRO plan at $799 a month. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://shoutem.com/"&gt;&lt;strong&gt;Shoutem&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new version of the Shoutem app builder offers a lot of template designs with a vast number of options to customize them so that each app looks unique. This platform is especially suitable for communities because of its social wall where users can share photos and add comments. The process of building Android and iOS apps takes just four steps. First, you pick up a template, then brand your app, import necessary content, and publish it to stores. The number of features here is lower in comparison with other builders, but it should have everything you need to create an application. Among them are:&lt;/p&gt;

&lt;p&gt;-Push notifications&lt;br&gt;
-Location-based services&lt;br&gt;
-A Shopify feature or product catalogue&lt;br&gt;
-RSS feed options&lt;br&gt;
-Ability to add your own HTML code&lt;br&gt;
-Social media integration &lt;br&gt;
-Loyalty features&lt;br&gt;
-API available&lt;br&gt;
-Custom analytics&lt;br&gt;
-Testing for Android only&lt;br&gt;
-Reseller program&lt;/p&gt;

&lt;p&gt;Shoutem makes their code available to developers to involve more and more people in building additional extensions and developing more features. Shoutem pricing starts at $49.00 per month. They do not have a free version, but do offer a free trial. The cheapest of their plans that allow you to publish your app on the Apple App Store begins at $79.00.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ibuildapp.com/"&gt;&lt;strong&gt;iBuildApp&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iBuildApp drag-and-drop application builder has a super easy drop editor, a built-in content management system, and over a thousand app templates to choose from. This platform is specifically designed for people with absolutely no programming skills. Although their website doesn’t inspire confidence, the builder does boast some great features:&lt;/p&gt;

&lt;p&gt;-White label solution&lt;br&gt;
-Reseller payment plans&lt;br&gt;
-Environment setup&lt;br&gt;
-Payment system&lt;br&gt;
-Custom pricing&lt;br&gt;
-Customer support&lt;br&gt;
-Website localization and customization&lt;br&gt;
-Custom templates for reseller website&lt;/p&gt;

&lt;p&gt;They also offer a bunch of advanced features, including push and GPS notifications, mobile ads, social media sharing, mobile analytics, and eCommerce opportunities. In terms of cost, there’s a basic plan ($9.99/ month), a business plan ($39 per month), and an enterprise or agency plan ($99 a month).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrapping It Up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Choosing the best drag-and-drop app builder might seem a bit scary, and it does require a bit of effort. But once you determine your priorities and clearly define your business needs, it doesn’t need to be a complicated task. If you are a complete beginner who wants to try creating an application, Shoutem and iBuiltApp drag-and-drop UI builders might be a good option for you. However, if you’re a seasoned developer looking for new challenges or somebody interested in new functionality and a wide range of features, go with Appery.io or MobileRoadi.&lt;/p&gt;

</description>
      <category>mobile</category>
      <category>appbuilder</category>
      <category>draganddrop</category>
      <category>lowcode</category>
    </item>
    <item>
      <title>Leveraging Logic Apps to prevent over-provisioning owner access to subscriptions</title>
      <author>Stefano d'Antonio</author>
      <pubDate>Thu, 11 Nov 2021 08:06:51 +0000</pubDate>
      <link>https://dev.to/unosd/leveraging-logic-apps-to-prevent-over-provisioning-owner-access-to-subscriptions-36aa</link>
      <guid>https://dev.to/unosd/leveraging-logic-apps-to-prevent-over-provisioning-owner-access-to-subscriptions-36aa</guid>
      <description>&lt;p&gt;Often happens that agility and freedom conflict with security.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aaron-paul-voice-has-this-ever-happened-to-you"&gt;
  &lt;/a&gt;
  (Aaron Paul voice) Has this ever happened to you?
&lt;/h4&gt;

&lt;p&gt;Have you ever had developer teams request ownership of a full &lt;strong&gt;subscription&lt;/strong&gt; to be able to freely experiment?&lt;/p&gt;

&lt;p&gt;You still want to keep isolation, segregate responsibilities and permissions.&lt;/p&gt;

&lt;p&gt;Ability to experiment freely is paramount to innovation, but uncontrolled proliferation of &lt;strong&gt;subscriptions&lt;/strong&gt; can bear a significant management overhead.&lt;/p&gt;

&lt;p&gt;Can we have the best of both worlds? The short answer is: yes.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;resource group&lt;/strong&gt; can be an effective boundary as it allows its &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#contributor"&gt;contributors&lt;/a&gt; to yet create any resource, but also restrict the scope of access within a &lt;strong&gt;subscription&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can also enforce &lt;strong&gt;tags&lt;/strong&gt; and &lt;strong&gt;Azure policies&lt;/strong&gt; to control costs and enforce security.&lt;/p&gt;

&lt;p&gt;But now a team is restricted to creating resources within a single &lt;strong&gt;resource group&lt;/strong&gt; and it can get messy quite quickly and permission-wise is not so granular within teams.&lt;/p&gt;

&lt;p&gt;What if we could allow teams to create their own &lt;strong&gt;resource groups&lt;/strong&gt; within a subscription with &lt;strong&gt;contributor&lt;/strong&gt; access and not being able to read/write other &lt;strong&gt;resource groups&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;We can quickly set up a &lt;strong&gt;Logic App&lt;/strong&gt; to enable this. Orchestrating creation and role assignment of &lt;strong&gt;resource groups&lt;/strong&gt; within a single workflow, this enables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Invoking the &lt;strong&gt;Logic App&lt;/strong&gt; manually through a &lt;strong&gt;REST API&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Invoking from a &lt;strong&gt;DevOps&lt;/strong&gt; pipeline to create resources as part of a dev/test automated environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;Logic App&lt;/strong&gt; can create a &lt;strong&gt;resource group&lt;/strong&gt; and assign a certain &lt;strong&gt;contributor&lt;/strong&gt; based on the input payload from the &lt;strong&gt;HTTP trigger&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Setting up this workflow could lead to a security loophole: What if someone uses the name of an existing &lt;strong&gt;resource group&lt;/strong&gt; so the workflow grants access to other teams' resources? We need to make sure we address this concern when building our &lt;strong&gt;Logic App&lt;/strong&gt; as, usually, &lt;strong&gt;Azure management&lt;/strong&gt; operations are idempotent and the &lt;strong&gt;Logic App&lt;/strong&gt; won't fail if we pass the name of an existing &lt;strong&gt;resource group&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-logic-app"&gt;
  &lt;/a&gt;
  The Logic App
&lt;/h3&gt;

&lt;p&gt;Let's have a look at the flow:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSL5p2uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwdlqd640foct4sczm9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSL5p2uf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwdlqd640foct4sczm9t.png" alt="Image description" width="880" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logic is pretty simple and most of the operations we require have a native &lt;strong&gt;connector&lt;/strong&gt;; the only missing one is "Create role assignment", but we can easily perform the operation by invoking the &lt;strong&gt;Azure REST API&lt;/strong&gt; and we do not have to worry about authentication as the &lt;strong&gt;managed identity&lt;/strong&gt; will do this for us.&lt;/p&gt;

&lt;p&gt;Now, you may have noticed that there is no condition stating: "If the group already exists, interrupt the flow"; but if you look at the picture above, you may notice a red dotted line between two operations, this is because we changed the &lt;code&gt;Run after&lt;/code&gt; settings of our create operation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vu6ccGxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfdhcsqm4yriknx97a8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vu6ccGxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfdhcsqm4yriknx97a8r.png" alt="Image description" width="880" height="377"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XEuMOT0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st0paar2hit118lzziex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XEuMOT0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st0paar2hit118lzziex.png" alt="Image description" width="880" height="935"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the operation of creation (and so the role assignment after) will only occur if the &lt;code&gt;Read resource group&lt;/code&gt; failed, hence the group does not exist; this will block the loophole described above.&lt;/p&gt;

&lt;p&gt;Now, we can prevent people from having broad access, but our &lt;strong&gt;Logic App's managed identity&lt;/strong&gt; still requires &lt;strong&gt;owner&lt;/strong&gt; permissions on the &lt;strong&gt;subscription&lt;/strong&gt;; more secure, but we can do even better. Let's create a &lt;strong&gt;custom role&lt;/strong&gt; that has only enough permissions to read/create a &lt;strong&gt;resource group&lt;/strong&gt; and assign permissions to it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BUcgV2ms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fyeboby4irz9kfksngc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUcgV2ms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fyeboby4irz9kfksngc.png" alt="Image description" width="880" height="145"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now use the UI to create a &lt;strong&gt;custom role&lt;/strong&gt;, but we may also want to script it and define it in JSON format:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--177X8rOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uawl707bx43x38m6728.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--177X8rOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uawl707bx43x38m6728.png" alt="Image description" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's now assign that to the &lt;strong&gt;managed identity&lt;/strong&gt; of our &lt;strong&gt;Logic App&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_UJ3mvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qa5aslbmf8h4fedpdtlt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_UJ3mvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qa5aslbmf8h4fedpdtlt.png" alt="Image description" width="880" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we should have all permissions in place. If you also want to use a &lt;strong&gt;security group&lt;/strong&gt;, your &lt;strong&gt;Logic App&lt;/strong&gt; identity may also require &lt;code&gt;Directory.Read.All&lt;/code&gt; permissions on your &lt;strong&gt;Azure AD&lt;/strong&gt; instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-role-assignment"&gt;
  &lt;/a&gt;
  Creating role assignment
&lt;/h3&gt;

&lt;p&gt;I mentioned above that all the other actions can be performed with native &lt;strong&gt;Logic App connectors&lt;/strong&gt;, but the &lt;strong&gt;role assignment&lt;/strong&gt;, at the time of writing, requires the &lt;strong&gt;HTTP&lt;/strong&gt; connector to invoke the &lt;strong&gt;Azure REST API&lt;/strong&gt;, let's have a look at that:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ntsw49Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntr7n35qcj9uv9oe65ki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ntsw49Ff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntr7n35qcj9uv9oe65ki.png" alt="Image description" width="880" height="905"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even if we cannot do it in idiomatic &lt;strong&gt;Logic App&lt;/strong&gt;, that is yet pretty simple.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;API&lt;/strong&gt; documentation: &lt;a href="https://docs.microsoft.com/en-us/rest/api/authorization/role-assignments/create"&gt;https://docs.microsoft.com/en-us/rest/api/authorization/role-assignments/create&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just need to set the right method (&lt;code&gt;PUT&lt;/code&gt;), the correct &lt;strong&gt;URL&lt;/strong&gt;, using the &lt;strong&gt;resource group ID&lt;/strong&gt; as scope from the output of the previous &lt;strong&gt;connector&lt;/strong&gt; and we can auto-generate a random &lt;strong&gt;GUID&lt;/strong&gt; as name for the assignment using &lt;strong&gt;Logic App&lt;/strong&gt; expressions (&lt;code&gt;guid()&lt;/code&gt;). The body must contain the &lt;code&gt;role definition ID&lt;/code&gt;, which needs to be the built-in &lt;code&gt;contributor&lt;/code&gt; &lt;strong&gt;GUID&lt;/strong&gt; under our &lt;strong&gt;subscription ID&lt;/strong&gt;, I have used a variable for that to improve clarity:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cj2eu-w1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z827fnwr7rq3c2cel1xh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cj2eu-w1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z827fnwr7rq3c2cel1xh.png" alt="Image description" width="880" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;subscription ID&lt;/strong&gt; is one of the input of our workflow and the hardcoded &lt;strong&gt;GUID&lt;/strong&gt; can be found here: &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#contributor"&gt;Contributor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get values as input from the workflow invocation, we need to set the input &lt;strong&gt;JSON schema&lt;/strong&gt; in the &lt;strong&gt;HTTP trigger&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OOjWsN59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y561ryxxpqdaxcepd2b8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OOjWsN59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y561ryxxpqdaxcepd2b8.png" alt="Image description" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;principalId&lt;/code&gt; The object ID of the assignee of the &lt;strong&gt;contributor&lt;/strong&gt; role, this can be found looking up the user in &lt;strong&gt;Azure AD&lt;/strong&gt; from the portal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resourceGroupLocation&lt;/code&gt;, &lt;code&gt;resourceGroupName&lt;/code&gt;, &lt;code&gt;subscriptionId&lt;/code&gt; Quite self-explanatory arguments
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"principalId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"resourceGroupLocation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"resourceGroupName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"subscriptionId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding the schema above to the trigger, those values will be available as variables in the rest of the workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;All there is left now is to test, let's run our workflow with the following input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"subscriptionId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;Target subscription ID to create groups&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"resourceGroupName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rg-test2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"resourceGroupLocation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"West Europe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"principalId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;Object ID GUID of your user from AAD&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is what happens, assuming &lt;code&gt;rg-test2&lt;/code&gt; does not exist:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HI7lALA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qr20p3alwm0dfu1o94c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HI7lALA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qr20p3alwm0dfu1o94c.png" alt="Image description" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks good, all the steps we wanted to run were successful.&lt;/p&gt;

&lt;p&gt;Now, let's try and run this again with the same inputs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bd7gIVRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcqqsn78yxylzomr6y16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bd7gIVRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcqqsn78yxylzomr6y16.png" alt="Image description" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OK, as you can see from the grey circles next to the actions below &lt;code&gt;Read a resource group&lt;/code&gt;, none of the other operations were performed, exactly as expected.&lt;/p&gt;

&lt;p&gt;Now let's have a look at our newly created &lt;strong&gt;resource group IAM blade&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3neqNb13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4blcaco3h5f91gdrqitf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3neqNb13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4blcaco3h5f91gdrqitf.png" alt="Image description" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exactly what we wanted; a new &lt;strong&gt;resource group&lt;/strong&gt; of which I am &lt;strong&gt;contributor&lt;/strong&gt; without requiring any permission on the &lt;strong&gt;subscription&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The full template for the &lt;strong&gt;Logic App&lt;/strong&gt; is available on my &lt;a href="https://github.com/UnoSD/ResourceGroupsLogicApp"&gt;GitHub&lt;/a&gt; so you can save the extra 5 minutes it took me to create it to enable this security feature for your teams.&lt;/p&gt;

&lt;p&gt;You can also enhance security of the &lt;strong&gt;Logic App&lt;/strong&gt; to prevent unauthorised users from calling it by fronting it with &lt;strong&gt;API Management&lt;/strong&gt; or you can use &lt;strong&gt;Azure Active Directory Authorization Policies&lt;/strong&gt; on the &lt;strong&gt;Logic App&lt;/strong&gt; itself or a combination of the two.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>logicapps</category>
      <category>security</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>HacktoberFest Badge</title>
      <author>Rishabh Singh</author>
      <pubDate>Thu, 11 Nov 2021 08:02:33 +0000</pubDate>
      <link>https://dev.to/rishi098/hacktoberfest-badge-kd</link>
      <guid>https://dev.to/rishi098/hacktoberfest-badge-kd</guid>
      <description>&lt;p&gt;Now i have one more Hacktoberfest Badge&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>devlive</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Developing with VS Code on WSL 2</title>
      <author>Dev Sharma</author>
      <pubDate>Thu, 11 Nov 2021 07:44:39 +0000</pubDate>
      <link>https://dev.to/cryptus_neoxys/developing-with-vs-code-on-wsl-2-51o8</link>
      <guid>https://dev.to/cryptus_neoxys/developing-with-vs-code-on-wsl-2-51o8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#vs-code"&gt;
  &lt;/a&gt;
  VS Code 🤯
&lt;/h1&gt;

&lt;p&gt;VS Code seems to be the &lt;em&gt;1 size fit all&lt;/em&gt; code editor. VS Code offers really seamless integration to develop on a remote connection such as the WSL 2 with the simple installation of an extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#develop-in-wsl-2-on-vs-code"&gt;
  &lt;/a&gt;
  Develop in WSL 2 on VS Code
&lt;/h2&gt;

&lt;p&gt;If you don't have it already, install VS Code from the &lt;a href="https://code.visualstudio.com/download"&gt;official site&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---maA7y-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621194556751/qXcxC8p1A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---maA7y-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621194556751/qXcxC8p1A.png" alt="https://code.visualstudio.com/download" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(You can also download the &lt;em&gt;&lt;a href="https://code.visualstudio.com/insiders/"&gt;insiders build&lt;/a&gt;&lt;/em&gt; if you like living on the bleeding edge)&lt;/p&gt;

&lt;p&gt;While installing VS Code, make sure to check the Add to Path option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6iUEgEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621194916519/6hMyzB6CD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y6iUEgEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621194916519/6hMyzB6CD.png" alt="VS Code add to path" width="500" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All you need to do is install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl"&gt;Remote - WSL Extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_YdsCZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621196950216/E3JWnuL8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_YdsCZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621196950216/E3JWnuL8u.png" alt="image.png" width="766" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Start a WSL 2 remote session&lt;br&gt;
Press &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;P&lt;/code&gt; and type in &lt;strong&gt;new wsl window&lt;/strong&gt; to open up a new WSL 2 window and select the option&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55J5RoAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621197393442/o0wKeZjdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55J5RoAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621197393442/o0wKeZjdp.png" alt="image.png" width="748" height="364"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new WSL 2 window should open up from the directory you were using.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRmWIkg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621197539772/KZlrPwvGk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRmWIkg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621197539772/KZlrPwvGk.png" alt="VS Code WSL 2 window" width="738" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is advised to use VS Code from the Linux file system instead of the windows'. To do this just use the &lt;strong&gt;Open Folder&lt;/strong&gt; option from the File menu.&lt;/p&gt;

&lt;p&gt;Just traverse to &lt;code&gt;~ or $HOME&lt;/code&gt; directory and then add the projects to the Linux file system and use them from there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkP0Ifr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621197806272/PKmEZRLGPP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkP0Ifr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621197806272/PKmEZRLGPP.png" alt="Open projects from Linux directory" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upon opening any projects in WSL window, you will see the WSL 2.0  connection on the bottom-left as well as the title bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHayu6sl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621198384965/OtkL2cLG6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHayu6sl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621198384965/OtkL2cLG6.png" alt="Project on WSL 2.png" width="880" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎉🎉🎉&lt;br&gt;
That was it, now you can work on any project with VS Code inside WSL.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on Twitter &lt;a href="https://twitter.com/cryptus_neoxys"&gt;@cryptus_neoxys&lt;/a&gt; and connect with me on &lt;a href="https://www.linkedin.com/in/cryptus-neoxys/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#refs-amp-resources"&gt;
  &lt;/a&gt;
  Refs &amp;amp; Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/dev-environment/javascript/nodejs-on-wsl#install-visual-studio-code"&gt;Microsoft Docs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>vscode</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>TOSS: 1 Secret to Achieve Eventual Consistency of Edges in Nebula Graph</title>
      <author>lisahui</author>
      <pubDate>Thu, 11 Nov 2021 07:35:27 +0000</pubDate>
      <link>https://dev.to/lisahui/toss-1-secret-to-achieve-eventual-consistency-of-edges-in-nebula-graph-1h92</link>
      <guid>https://dev.to/lisahui/toss-1-secret-to-achieve-eventual-consistency-of-edges-in-nebula-graph-1h92</guid>
      <description>&lt;p&gt;Nebula Graph has just released v.2.6. In this version, TOSS is certainly one of the important features. Here a detailed explanation about TOSS will be given.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-start-from-a-go-statement"&gt;
  &lt;/a&gt;
  Let’s start from a GO statement
&lt;/h3&gt;

&lt;p&gt;As we all know, there are two types of edges, directed and undirected edges. When traversing directed edges, you can traverse forward or reversely. Nebula Graph also supports this semantics. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go from "101" over known reversely yield known.kdate, id($$);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above statement starts from Vertex 101 to find all the corresponding neighbors reversely. However, when you insert an edge into Nebula Graph, the command will be like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;insert edge known(degree) VALUES "100" -&amp;gt; "101":(299792458);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seemingly, the above statement only specifies the outgoing edge. This is because Nebula Graph will specify the incoming edge in the background when you insert an edge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-insert-an-edge-into-nebula-graph"&gt;
  &lt;/a&gt;
  How to insert an edge into Nebula Graph
&lt;/h3&gt;

&lt;p&gt;Take the INSERT statement above as an example, the background execution process contains the following:&lt;/p&gt;

&lt;p&gt;Nebula Console sends the INSERT request to the Nebula Graph server.&lt;/p&gt;

&lt;p&gt;After the Nebula Graph server receives the request, it adds an incoming edge for each outgoing edge and sends AddEdgeRequest to their hosts respectively.&lt;/p&gt;

&lt;p&gt;After the host (Nebula Storage server) receives AddEdgeRequest, it inserts the edge locally (via the Raft protocol) and returns the result to the Nebula Graph server.&lt;/p&gt;

&lt;p&gt;The Nebula Graph server then returns the results from both hosts to the Nebula Console for querying purpose.&lt;/p&gt;

&lt;p&gt;The flow diagram is as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yTDIF2J_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/141245971-9d62e48b-7646-4d9c-a929-d8ac7d45c737.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yTDIF2J_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/90186547/141245971-9d62e48b-7646-4d9c-a929-d8ac7d45c737.png" alt="How to insert an edge into Nebula Graph" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are familiar with network/distributed programming, you may see the problem now. The graph service uses RPC to call both storage services. When the INSERT operation is executed enough times, one RPC succeeds while the other fails due to timeout. In other words, an INSERT operation may succeed on the outgoing edge while fail on the incoming-edge.&lt;/p&gt;

&lt;p&gt;If now a user requires consistent property settings for both outgoing edge and incoming edge, the client has to retry the query infinitely. It is inappropriate for Nebula Graph, s a database product, to rely on the client for data atomicity.&lt;/p&gt;

&lt;p&gt;A requirement thus comes into being, that is, to ensure the atomicity of outgoing edge and incoming edge. This means that the outgoing edge and incoming edge should be updated either successfully or they should fail at the same time. And TOSS (Transaction On Storage Side) is the feature to ensure the eventual consistency of edges upon INSERT, UPDATE, and UPSERT operations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-toss"&gt;
  &lt;/a&gt;
  How to use TOSS
&lt;/h3&gt;

&lt;p&gt;With the release of Nebula Graph v2.6.0, the TOSS function has also been launched. The feature is set to Disabled by default due to performance and stability considerations. You can find the enable_experimental_feature option in the Nebula Graph server configuration file and set it to True. Then you need to restart the graphd service for the feature to take effect. The command is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--enable_experimental_feature=true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the operations CREATE SPACE / CREATE EDGE / INSERT / UPDATE will achieve eventual consistency of edges in Nebula Graph. (Just execute the operations as before)&lt;/p&gt;

&lt;p&gt;Note: The TOSS feature will be only applied to incremental data after it is enabled.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>database</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>HTML tags | iframe</title>
      <author>Carlos Espada</author>
      <pubDate>Thu, 11 Nov 2021 07:21:59 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-iframe-d56</link>
      <guid>https://dev.to/carlosespada/html-tags-iframe-d56</guid>
      <description>&lt;p&gt;It is used to &lt;strong&gt;represent a nested browsing context, embedding another HTML page into the current one&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each embedded browsing context has its own session history and document. The browsing context that embeds the others is called the "&lt;em&gt;parent browsing context&lt;/em&gt;". The "&lt;em&gt;topmost&lt;/em&gt;" browsing context — the one with no parent — is usually the browser window, represented by the &lt;code&gt;Window&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Because each browsing context is a complete document environment, every &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; in a page requires increased memory and other computing resources. While theoretically you can use as many &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;s as you like, check for performance problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#allow"&gt;
  &lt;/a&gt;
  allow
&lt;/h3&gt;

&lt;p&gt;Specifies a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy"&gt;feature policy&lt;/a&gt; for the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;. The policy defines what features are available to the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; based on the origin of the request (e.g. access to the microphone, camera, battery, web-share API, etc.).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#allowfullscreen"&gt;
  &lt;/a&gt;
  allowfullscreen
&lt;/h3&gt;

&lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; can activate fullscreen mode by calling the &lt;code&gt;requestFullscreen()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This attribute is considered a legacy attribute and redefined as &lt;code&gt;allow="fullscreen"&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#allowpaymentrequest"&gt;
  &lt;/a&gt;
  allowpaymentrequest
&lt;/h3&gt;

&lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; if a cross-origin &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; should be allowed to invoke the Payment Request API.&lt;/p&gt;

&lt;p&gt;This attribute is considered a legacy attribute and redefined as &lt;code&gt;allow="payment"&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#height"&gt;
  &lt;/a&gt;
  height
&lt;/h3&gt;

&lt;p&gt;The height of the frame in CSS pixels. Default is &lt;code&gt;150&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading"&gt;
  &lt;/a&gt;
  loading
&lt;/h3&gt;

&lt;p&gt;Indicates how the browser should load the iframe:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;eager&lt;/code&gt;: load the iframe immediately, regardless if it is outside the visible viewport (this is the default value).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lazy&lt;/code&gt;: defer loading of the iframe until it reaches a calculated distance from the viewport, as defined by the browser.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#name"&gt;
  &lt;/a&gt;
  name
&lt;/h3&gt;

&lt;p&gt;A targetable name for the embedded browsing context. This can be used in the target attribute of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; elements; the &lt;code&gt;formtarget&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; elements; or the &lt;code&gt;windowName&lt;/code&gt; parameter in the &lt;code&gt;window.open()&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#referrerpolicy"&gt;
  &lt;/a&gt;
  referrerpolicy
&lt;/h3&gt;

&lt;p&gt;Indicates which referrer to send when fetching the frame's resource:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-referrer&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;no-referrer-when-downgrade&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent to origins without TLS (HTTPS).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin&lt;/code&gt;: the sent referrer will be limited to the origin of the referring page: its scheme, host and port.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin-when-cross-origin&lt;/code&gt;: the referrer sent to other origins will be limited to the scheme, the host and the port. Navigations on the same origin will still include the path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;same-origin&lt;/code&gt;: a referrer will be sent for same origin, but cross-origin requests will contain no referrer information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin&lt;/code&gt;: only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt; (&lt;em&gt;default&lt;/em&gt;): send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unsafe-url&lt;/code&gt;: the referrer will include the origin and the path (but not the fragment, password or username). &lt;strong&gt;This value is unsafe&lt;/strong&gt;, because it leaks origins and paths from TLS-protected resources to insecure origins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sandbox"&gt;
  &lt;/a&gt;
  sandbox
&lt;/h3&gt;

&lt;p&gt;Applies extra restrictions to the content in the frame. The value of the attribute can either be empty to apply all restrictions, or space-separated tokens to lift particular restrictions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;allow-downloads-without-user-activation&lt;/code&gt;: allows for downloads to occur without a gesture from the user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-downloads&lt;/code&gt;: allows for downloads to occur with a gesture from the user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-forms&lt;/code&gt;: allows the resource to submit forms. If this keyword is not used, form submission is blocked.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-modals&lt;/code&gt;: lets the resource open modal windows.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-orientation-lock&lt;/code&gt;: lets the resource lock the screen orientation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-pointer-lock&lt;/code&gt;: lets the resource use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API"&gt;Pointer Lock API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-popups&lt;/code&gt;: allows popups (such as &lt;code&gt;window.open()&lt;/code&gt;, &lt;code&gt;target="_blank"&lt;/code&gt; or &lt;code&gt;showModalDialog()&lt;/code&gt;). If this keyword is not used, the popup will silently fail to open.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-popups-to-escape-sandbox&lt;/code&gt;: lets the sandboxed document open new windows without those windows inheriting the sandboxing. For example, this can safely sandbox an advertisement without forcing the same restrictions upon the page the ad links to.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-presentation&lt;/code&gt;: lets the resource start a presentation session.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-same-origin&lt;/code&gt;: if this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy (potentially preventing access to data storage/cookies and some JavaScript APIs).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-scripts&lt;/code&gt;: lets the resource run scripts (but not create popup windows).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-storage-access-by-user-activation&lt;/code&gt;: lets the resource request access to the parent's storage capabilities with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API"&gt;Storage Access API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-top-navigation&lt;/code&gt;:lets the resource navigate the top-level browsing context (the one named &lt;code&gt;_top&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;allow-top-navigation-by-user-activation&lt;/code&gt;: lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the embedded document has the same origin as the embedding page, it is strongly discouraged to use both &lt;code&gt;allow-scripts&lt;/code&gt; and &lt;code&gt;allow-same-origin&lt;/code&gt;, as that lets the embedded document remove the &lt;code&gt;sandbox&lt;/code&gt; attribute — making it no more secure than not using the &lt;code&gt;sandbox&lt;/code&gt; attribute at all.&lt;/p&gt;

&lt;p&gt;Sandboxing is useless if the attacker can display content outside a sandboxed iframe — such as if the viewer opens the frame in a new tab. Such content should be also served from a separate origin to limit potential damage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#src"&gt;
  &lt;/a&gt;
  src
&lt;/h3&gt;

&lt;p&gt;The URL of the page to embed. Use a value of &lt;code&gt;about:blank&lt;/code&gt; to embed an empty page that conforms to the same-origin policy. Also note that programmatically removing an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;'s &lt;code&gt;src&lt;/code&gt; attribute (e.g. via &lt;code&gt;Element.removeAttribute()&lt;/code&gt;) causes &lt;code&gt;about:blank&lt;/code&gt; to be loaded in the frame in Firefox (from version 65), Chromium-based browsers and Safari/iOS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srcdoc"&gt;
  &lt;/a&gt;
  srcdoc
&lt;/h3&gt;

&lt;p&gt;Inline HTML to embed, overriding the &lt;code&gt;src&lt;/code&gt; attribute. If a browser does not support the &lt;code&gt;srcdoc&lt;/code&gt; attribute, it will fall back to the URL in the &lt;code&gt;src&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#width"&gt;
  &lt;/a&gt;
  width
&lt;/h3&gt;

&lt;p&gt;The width of the frame in CSS pixels. Default is &lt;code&gt;300&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element"&gt;replaced element&lt;/a&gt;, the position, alignment and scaling of the embedded document within the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; element's box, can be adjusted with the &lt;code&gt;object-position&lt;/code&gt; and &lt;code&gt;object-fit&lt;/code&gt; properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;p&gt;People navigating with assistive technology such as a screen reader can &lt;strong&gt;use the&lt;/strong&gt; &lt;code&gt;title&lt;/code&gt; &lt;strong&gt;attribute on an&lt;/strong&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;strong&gt;to label its content&lt;/strong&gt;. The title's value should concisely describe the embedded content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;iframe title="Wikipedia page for Avocados" src="https://en.wikipedia.org/wiki/Avocado"&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without this &lt;code&gt;title&lt;/code&gt;, they have to navigate into the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; to determine what its embedded content is. This context shift can be confusing and time-consuming, especially for pages with multiple &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;s and/or if embeds contain interactive content like video or audio.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;block&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_iframe.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_iframe"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_iframe"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>iframe</category>
    </item>
    <item>
      <title>Get Started with Java's Wicket Framework</title>
      <author>coder4life</author>
      <pubDate>Thu, 11 Nov 2021 07:20:14 +0000</pubDate>
      <link>https://dev.to/coder4_life/get-started-with-javas-wicket-framework-2le5</link>
      <guid>https://dev.to/coder4_life/get-started-with-javas-wicket-framework-2le5</guid>
      <description>&lt;p&gt;Create your first Hello World (or Hello Wicket) application with Apache Wicket (Java serverside web framework).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cbXlMMNjgwA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Difference between for...of and for...in loop in JavaScript.</title>
      <author>Swastik Yadav</author>
      <pubDate>Thu, 11 Nov 2021 07:19:59 +0000</pubDate>
      <link>https://dev.to/swastikyadav/difference-between-forof-and-forin-loop-in-javascript-j2o</link>
      <guid>https://dev.to/swastikyadav/difference-between-forof-and-forin-loop-in-javascript-j2o</guid>
      <description>&lt;p&gt;Hello Everyone,&lt;/p&gt;

&lt;p&gt;The difference between for-of and for-in loop really troubled me when I was learning JavaScript. And with this blog I will try to clear the confusion once and for all.&lt;/p&gt;

&lt;p&gt;Let's understand them one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forof-loop"&gt;
  &lt;/a&gt;
  for...of Loop
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"&gt;The MDN Definition&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The for...of statement creates a loop iterating over iterable objects, including: built-in String, Array, array-like objects (e.g., arguments or NodeList), TypedArray, Map, Set, and user-defined iterables.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know that's not the explanation you came here for, So let me explain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for...of&lt;/strong&gt; loop works only with iterable objects. In JavaScript, iterables are objects which can be looped over.&lt;/p&gt;

&lt;p&gt;String, Array, TypedArray, Map, and Set are all built-in iterables, because each of their prototype objects implements an @@iterator method. So, for...of loop works on the mentioned object types.&lt;/p&gt;

&lt;p&gt;Object in JavaScript is not iterable by default. So, for...of loop does not work on objects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In simple words, for...of works with strings and arrays but not with objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cosnt&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// H e l l o " " W o r l d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#forin-loop"&gt;
  &lt;/a&gt;
  for...in Loop
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"&gt;The MDN Definition&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The for...in statement iterates over all enumerable properties of an object that are keyed by strings (ignoring ones keyed by Symbols), including inherited enumerable properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;p&gt;So, for...of does not work with objects (non iterables), Then how do we loop over keys and values of an object? And the answer is &lt;strong&gt;for...in&lt;/strong&gt; loop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for...in&lt;/strong&gt; works with those properties whose enumerable flag is set to true.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enumerable flag for properties created via simple assignment or property initializer are by default true.&lt;/li&gt;
&lt;li&gt;Enumerable flag for properties created via Object.defineProperty are by default false.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123456&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sandeep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
registration "123465"

name "Sandeep"

age 33
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add a new property (marks) to student object and set it's enumerable flag to false. With enumerable flag set to false, marks key won't appear in result of for...in loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;registration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123456&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sandeep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Objec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 98&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
registration "123465"

name "Sandeep"

age 33
*/&lt;/span&gt;

&lt;span class="c1"&gt;// marks key does not show up in the for...in loop result.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for...in also works with strings and arrays, because enumerable flag for string and array properties are also by default true.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In simple words use for...in to loop over objects. Although for...in works with strings and arrays, but it is not suggested to use that way.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;for...of - Use to loop over strings and arrays.&lt;/li&gt;
&lt;li&gt;for...in - Use to loop over objects.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;That's it for this post.&lt;/p&gt;

&lt;p&gt;I am starting a Newsletter where I will share epic weekly content to build your skillset. If you are interested please subscribe to &lt;a href="https://www.getrevue.co/profile/8020lessons"&gt;8020 NewsLetter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank You!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to fix background scroll issues in CSS</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 11 Nov 2021 06:37:43 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/how-to-fix-background-scroll-issues-in-css-4930</link>
      <guid>https://dev.to/dailydevtips1/how-to-fix-background-scroll-issues-in-css-4930</guid>
      <description>&lt;p&gt;I'm sure you've seen this before. You have a long page and perhaps a modal with a scroll inside of it.&lt;/p&gt;

&lt;p&gt;Super annoying if the background scrolls with when you hit bottom right?&lt;/p&gt;

&lt;p&gt;See this example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v54DDc1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635662922659/TWVbDSc4K.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v54DDc1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635662922659/TWVbDSc4K.gif" alt="How to fix background scroll issues in CSS" width="500" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, scrolling inside the modal and hitting bottom or top of the content will also scroll the background.&lt;/p&gt;

&lt;p&gt;This is not really what we want as we are scrolling inside the modal content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-overscrollbehavior"&gt;
  &lt;/a&gt;
  Introducing overscroll-behavior
&lt;/h2&gt;

&lt;p&gt;Say hello to &lt;code&gt;overscroll-behavior&lt;/code&gt;, the welcome addition to scroll element which tells how the over scroll behavior should be handled.&lt;/p&gt;

&lt;p&gt;It takes one of the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;auto&lt;/code&gt;: What it used to be, so back to normal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;contain&lt;/code&gt;: Inside the element, your scroll is as usual, but no outside elements are affected&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;none&lt;/code&gt;: No outside elements are affected, and default scroll overflow behavior is prevented.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With every overflow, you can specify on which axis it should occur.&lt;/p&gt;

&lt;p&gt;For horizontal scrolling, use: &lt;code&gt;overscroll-behavior-x&lt;/code&gt;.&lt;br&gt;
And for vertical scroll use: &lt;code&gt;overscroll-behavior-y&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Let's try it out on our demo modal by adding the following CSS to our modal element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;overscroll-behavior-y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;contain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now try it out in this Codepen example to see what happens!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/OJjxRby?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h2&gt;

&lt;p&gt;The support is becoming pretty good. Unfurtionally it's not a solid feature to rely on.&lt;/p&gt;

&lt;p&gt;Let's hope we get full support soon, as this is a real live saver 👀.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nbA01xM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/css-overscroll-behavior.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbA01xM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/image/css-overscroll-behavior.jpg" alt="The browser support for the overscroll-behavior feature" width="800" height="388"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Learn SQL: Microsoft SQL Server - Episode 10: Joining Multiple Columns and Strings</title>
      <author>Goran Kortjie</author>
      <pubDate>Thu, 11 Nov 2021 06:02:59 +0000</pubDate>
      <link>https://dev.to/ifierygod/learn-sql-microsoft-sql-server-episode-10-joining-multiple-columns-and-strings-216l</link>
      <guid>https://dev.to/ifierygod/learn-sql-microsoft-sql-server-episode-10-joining-multiple-columns-and-strings-216l</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiLUfnWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhgyhg6y7rvsud0zs9bs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiLUfnWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhgyhg6y7rvsud0zs9bs.gif" alt="demon-bunny-greets" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sometimes we need to join the data from multiple columns or string values to get the desired result&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Without wasting anytime lets dive into SSMS and see it in practice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Wc8JhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeel8wwp1s6tlqzqqyov.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Wc8JhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeel8wwp1s6tlqzqqyov.gif" alt="skid-3" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using the &lt;strong&gt;Person.Person&lt;/strong&gt; table. This time however we will be joining the &lt;strong&gt;firstName&lt;/strong&gt; and &lt;strong&gt;lastName&lt;/strong&gt; columns to make a new &lt;strong&gt;Full Name&lt;/strong&gt; column. &lt;/p&gt;

&lt;p&gt;To accomplish this we first need to write a &lt;strong&gt;SELECT&lt;/strong&gt; statement to select the &lt;strong&gt;firstName&lt;/strong&gt; and &lt;strong&gt;lastName&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x2XWLb2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6uhpr2m3vpf0mz2q8t5s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x2XWLb2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6uhpr2m3vpf0mz2q8t5s.gif" alt="discuss-1" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here in our result set we have the &lt;strong&gt;firstName&lt;/strong&gt; and &lt;strong&gt;lastName&lt;/strong&gt; of all the people in our &lt;strong&gt;Person.Person&lt;/strong&gt; table. If we need to join the &lt;strong&gt;firstName&lt;/strong&gt; and &lt;strong&gt;lastName&lt;/strong&gt; to form a &lt;strong&gt;Full Name&lt;/strong&gt; we can do this via two different syntaxes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVyyDUmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qytlqle665p7oovu0y6f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVyyDUmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qytlqle665p7oovu0y6f.gif" alt="skid-1" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-plus-sign-"&gt;
  &lt;/a&gt;
  Using the Plus sign +
&lt;/h3&gt;

&lt;p&gt;Quite literally we add a plus sign between the &lt;strong&gt;firstName&lt;/strong&gt; and &lt;strong&gt;lastName&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firstName + lastName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what result we get in SSMS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S6Ii9LnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vm3aikcwjffov7d71nsd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S6Ii9LnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vm3aikcwjffov7d71nsd.gif" alt="discuss-2" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Did you see?&lt;/code&gt; When we added the plus sign it joined the two string values, however it did not add a space in-between. Therefore we needed to add an empty string &lt;code&gt;' '&lt;/code&gt; by ourselves between the &lt;strong&gt;firstName&lt;/strong&gt; and &lt;strong&gt;lastName&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firstName + ' ' + lastName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Wc8JhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeel8wwp1s6tlqzqqyov.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Wc8JhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeel8wwp1s6tlqzqqyov.gif" alt="skid-3" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we added an &lt;strong&gt;Alias&lt;/strong&gt; to make things more simple to understand.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have to use the plus sign syntax if you are using older versions of SSMS. For newer versions after SSMS 2008, use the &lt;strong&gt;Concat&lt;/strong&gt; syntax. The plus syntax works in all versions thus far.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVyyDUmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qytlqle665p7oovu0y6f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVyyDUmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qytlqle665p7oovu0y6f.gif" alt="skid-1" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-concat-function"&gt;
  &lt;/a&gt;
  Using the Concat function
&lt;/h3&gt;

&lt;p&gt;We can also use what is called the &lt;strong&gt;Concat&lt;/strong&gt; function, similar to other functions, we wrap our arguments inside the function. In this case we wrap the &lt;strong&gt;firstName&lt;/strong&gt;, the &lt;strong&gt;empty string&lt;/strong&gt;, and the &lt;strong&gt;lastName&lt;/strong&gt; inside our &lt;strong&gt;Concat&lt;/strong&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Concat(firstName, ' ', lastName)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Wc8JhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeel8wwp1s6tlqzqqyov.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Wc8JhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aeel8wwp1s6tlqzqqyov.gif" alt="skid-3" width="879" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can add a many arguments or columns/strings inside the &lt;strong&gt;Concat&lt;/strong&gt; function as we please. However notice that all of them have to be separated by a &lt;code&gt;comma&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ubYiTM12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqg1p3z4cib8mzfjaiaa.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubYiTM12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqg1p3z4cib8mzfjaiaa.gif" alt="discuss-3" width="600" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we run these two syntaxes side by side, we can see they produce the exact same result. Now we have two ways of combining data from columns and string values.&lt;/p&gt;

&lt;p&gt;Pretty cool stuff! I really enjoyed this one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b6xEKzeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oebvj1dym3j8lh0628s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6xEKzeh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oebvj1dym3j8lh0628s.gif" alt="skelly" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>sql</category>
      <category>database</category>
      <category>datascience</category>
    </item>
    <item>
      <title>How to make a GUI Password manager using Python</title>
      <author>Naem Azam </author>
      <pubDate>Thu, 11 Nov 2021 05:59:11 +0000</pubDate>
      <link>https://dev.to/naemazam/how-to-make-a-gui-password-manager-using-python-3adn</link>
      <guid>https://dev.to/naemazam/how-to-make-a-gui-password-manager-using-python-3adn</guid>
      <description>&lt;p&gt;R-Pass is a Python GUI based Password Store and Generator System , Save and Easy Useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Clone from github&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  git clone https://github.com/naemazam/Remember-Password.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;  &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Pass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;## User Guide&lt;br&gt;
  For save Data: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put Your website name
&lt;/li&gt;
&lt;li&gt;Mail address or  UserId &lt;/li&gt;
&lt;li&gt;Put Password or Genarate It. &lt;/li&gt;
&lt;li&gt;Click on Save to Save it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Find Data: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put Your website name&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Search&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>gui</category>
      <category>password</category>
      <category>naemazam</category>
    </item>
    <item>
      <title>Cross-platform Build Automation with Nuke</title>
      <author>Dalibor Kundrat</author>
      <pubDate>Thu, 11 Nov 2021 05:56:29 +0000</pubDate>
      <link>https://dev.to/damikun/the-cross-platform-build-automation-with-nuke-1kmc</link>
      <guid>https://dev.to/damikun/the-cross-platform-build-automation-with-nuke-1kmc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;The build process involves a series of automated tasks performed on raw source code to prepare that code for future deployment.&lt;/p&gt;

&lt;p&gt;Instead of manually calling the compiler and package manager as &lt;code&gt;dotnet restore&lt;/code&gt;/&lt;code&gt;dotnet build&lt;/code&gt;, you can automate this process, especially if you are working with multiple solutions/projects that depend on each other and require certain steps to be built.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-automation-is-not-just-about-building-the-code"&gt;
  &lt;/a&gt;
  Build automation is not just about building the code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GS_qvDOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwuka7h8al9n8jrxshos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GS_qvDOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwuka7h8al9n8jrxshos.png" alt="Build automation process" width="880" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rather, it provides many features and rich tools that help with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cleanup&lt;/li&gt;
&lt;li&gt;Restore packages and dependencies&lt;/li&gt;
&lt;li&gt;Compilation&lt;/li&gt;
&lt;li&gt;Test automation&lt;/li&gt;
&lt;li&gt;Post-build processing&lt;/li&gt;
&lt;li&gt;Generating production builds&lt;/li&gt;
&lt;li&gt;Packaging, creating Docker images, etc. &lt;/li&gt;
&lt;li&gt;Deployment between different environments&lt;/li&gt;
&lt;li&gt;Notifications and reporting&lt;/li&gt;
&lt;li&gt;Integration of 3-party applications&lt;/li&gt;
&lt;li&gt;Version control&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#githubactions-azurepipelines-teamcity-and-what-else"&gt;
  &lt;/a&gt;
  GithubActions, AzurePipelines, TeamCity and what else?
&lt;/h3&gt;

&lt;p&gt;You know these build servers are widely used, but there are also many online tools as &lt;em&gt;SonarCloud&lt;/em&gt; etc. used by companies and OSS projects.&lt;/p&gt;

&lt;p&gt;😎&lt;strong&gt;They are cool, no reason to stop using them&lt;/strong&gt;, but the way how you configure them is not a daily pleasure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw5het4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j82kp3ndh9azgoz3mqf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw5het4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j82kp3ndh9azgoz3mqf.jpg" alt="Yaml is trash" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problems:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They provide several pre-built actions, and each time you have to decide what to use and how to configure it, what arguments to enter, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Yaml&lt;/code&gt; as a common configuration definition really sucks. Once I read &lt;em&gt;that it's there to make developers feel at home&lt;/em&gt;... 🤣 Where is intelisense and strong typecheck? i am .Net developer.&lt;/li&gt;
&lt;li&gt;You can not build software locally and on CI/CD server equally. We need to create helper scripts for local development.&lt;/li&gt;
&lt;li&gt;Stack changes require studying new documentation and bending the existing solution.&lt;/li&gt;
&lt;li&gt;Cross-platform issues with custom scripts and paths&lt;/li&gt;
&lt;li&gt;Configuring the build process is something you do not want to do every day. It's best not to touch it until it's working because it's so complex and you can not remember exactly what each part does because you picked it up from the first post on the internet.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nuke-build"&gt;
  &lt;/a&gt;
  Nuke build
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CA7wU-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnekvuqnxsw2pf9uee8e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CA7wU-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnekvuqnxsw2pf9uee8e.PNG" alt="Nuke Build logo" width="344" height="117"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nuke is hire to provide a nice typed and cross-platform experience by setting up the build process using console application. The oficial documentation can be found on &lt;a href="https://nuke.build/docs/getting-started/philosophy.html"&gt;www.nuke.build&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It helps you define dependencies between different actions (targets) and automatically generate code for CI/CD in advance, from your C# code using the code base you know from your daily work.&lt;/p&gt;

&lt;p&gt;Since nuke runs as console app it provides nice strongly typed intellisense with documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nddByz4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kotl5sxaygznvlysvtv0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nddByz4f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kotl5sxaygznvlysvtv0.png" alt="Nuke build intelisense" width="822" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nuke is not a compiler, it's just an abstraction that gives you a pleasant experience with your code. It provides built-in functionality with source generators driven by attributes and builder patterns.&lt;/p&gt;

&lt;p&gt;It's also extensible and currently offers a variety of integrations. So you get a beautiful API that works across platforms and is not just for C# programmers!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-setup"&gt;
  &lt;/a&gt;
  Quick setup
&lt;/h3&gt;

&lt;p&gt;To install &lt;code&gt;Nuke.GlobalTool&lt;/code&gt;, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet tool &lt;span class="nb"&gt;install &lt;/span&gt;Nuke.GlobalTool &lt;span class="nt"&gt;--global&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can run the quickstart setup with &lt;code&gt;nuke:setup&lt;/code&gt; from your project root directory. This is usually the folder where you have the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMiSWqZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibwgw2uhx076s9i39nn3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMiSWqZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibwgw2uhx076s9i39nn3.gif" alt="Nuke build setup/init" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⠀&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; As you can see, you can customize the root folder and the location of the build project! Make sure that the defined paths/folders are not part of &lt;code&gt;.gitignore&lt;/code&gt;. They must be part of source-control!&lt;br&gt;
⠀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can skip the QuickStart if you want, but it generates some important cross-platform execution scripts that help install the SDK!&lt;/p&gt;

&lt;p&gt;Let us take a look at the generated files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7o03Hlw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsc9ithjxiwfiqyw8p0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7o03Hlw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsc9ithjxiwfiqyw8p0n.png" alt="Nuke generated files" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.build&lt;/code&gt; - Contains a C# console application where you can define your build process.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.nuke&lt;/code&gt; - Contains the nuke schema and temporary files (These are generated).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;build.cmd&lt;/code&gt; - Is a cross-platform script (runs on Mac/Win/Linux) that triggers a concrete OS script to install the .Net SDK and required dependencies to get Nuke running properly as a console application.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;build.sh&lt;/code&gt; - Linux/MacOS init script&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;build.ps1&lt;/code&gt; - Windows init script&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;./build/Build.cs&lt;/code&gt; file is the entry point of the Nuke console applicati.&lt;/p&gt;

&lt;p&gt;This is some dummy example of build:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CheckBuildProjectConfigurations&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ShutdownDotNetAfterServerBuild&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NukeBuild&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Compile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Clean&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Action you wanna perform in clean&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Compile&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Action you wanna perform in copile&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Pack&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Action you wanna perform in pack&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It contains the console &lt;code&gt;Main()&lt;/code&gt; with the default &lt;code&gt;Target&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the abaw example, the default target is &lt;code&gt;Compile&lt;/code&gt; = &amp;gt; (&lt;code&gt;Run(x = &amp;gt; x.Compile)&lt;/code&gt;). This means when you run the script &lt;code&gt;./build.cmd&lt;/code&gt;, it will use &lt;code&gt;Compile&lt;/code&gt; and create the execution plan for it!&lt;/p&gt;

&lt;p&gt;To visualize the dependency between the defined targets, you can run &lt;code&gt;nuke --plan&lt;/code&gt; and get the following visualization in your browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6kkTHUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgdwln8r3573zmct2o8s.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6kkTHUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgdwln8r3573zmct2o8s.PNG" alt="Nuke example plan" width="367" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-complex-demo-example"&gt;
  &lt;/a&gt;
  More complex Demo example
&lt;/h3&gt;

&lt;p&gt;To show an example of a build system, I will use &lt;a href="https://github.com/damikun/trouble-training"&gt;free opnesource demo app&lt;/a&gt; which I have on my github.&lt;/p&gt;

&lt;p&gt;The demo contains several projects that are interconnected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2p1SFlna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfv7ztnxpt3sq999wd8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2p1SFlna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfv7ztnxpt3sq999wd8c.png" alt="Trouble-Training Repository" width="729" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to build the frontend and the backend separately and do this on each push on &lt;em&gt;Github&lt;/em&gt; to verify that the code build is possible and bug-free, and to ensure that all backend tests can be run OK.&lt;/p&gt;

&lt;p&gt;This is the Nuke build plan for this project (&lt;code&gt;nuke --plan&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--48WQgBxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9r7z75mzg1x9dsfgx85.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--48WQgBxo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9r7z75mzg1x9dsfgx85.gif" alt="Nuke trouble demo build plan" width="880" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there are multiple Targets and dependencies between them. Sometimes you just want to build the frontend, other times the backend, or all together.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⠀&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; With Nuke you define tarets and it is up to you how you define the relationships between the tarets with the builder patterns &lt;code&gt;.DependsOn(...)&lt;/code&gt;, &lt;code&gt;.Before(...)&lt;/code&gt; , &lt;code&gt;.After(...)&lt;/code&gt; and so on..&lt;br&gt;
⠀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since the demo consists of several parts (frontend, backend, tests), you want to avoid putting all the code in one file. Instead, you can use &lt;code&gt;partial class&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.build/Build.cs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NukeBuild&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// All concat targets&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.build/Build.Backend.cs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NukeBuild&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c1"&gt;// All related to backend Clen/Build/Compile&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.build/Build.Backend.Test.cs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NukeBuild&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c1"&gt;// All related to backend Unit/Integration/API Tests&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.build/Build.Frontend.cs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NukeBuild&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c1"&gt;// All related to frontend Clean/Restore/Compile/Build&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main &lt;code&gt;Build&lt;/code&gt; class derived from base &lt;code&gt;NukeBuild&lt;/code&gt; provides some event callbacks that can be overridden:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Method that is invoked after the instance of the build was created.&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnBuildCreated&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Method that is invoked after the build has finished (succeeded or failed).&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnBuildFinished&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Method that is invoked after build instance is initialized. I.e., value injection&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnBuildInitialized&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Method that is invoked when a target has failed.&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnTargetFailed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Method that is invoked before a target is about to start.&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnTargetRunning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Method that is invoked when a target is skipped.&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnTargetSkipped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Method that is invoked when a target has been executed successfully.&lt;/span&gt;
&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnTargetSucceeded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnBuildInitialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"🚀 Build process started"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnBuildInitialized&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us take a look at Main &lt;code&gt;Build.cs&lt;/code&gt; for this demo:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.build/Build.cs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;GitHubActions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"backend-restore-build-and-test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;GitHubActionsImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowsLatest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;GitHubActionsImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MacOsLatest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;InvokedTargets&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_All&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;On&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;GitHubActionsTrigger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;GitHubActionsTrigger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Push&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;AutoGenerate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;GitHubActions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"frontend-restore-and-build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;GitHubActionsImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowsLatest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;GitHubActionsImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MacOsLatest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;InvokedTargets&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Frontend_All&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;On&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;GitHubActionsTrigger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;GitHubActionsTrigger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Push&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;AutoGenerate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CheckBuildProjectConfigurations&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ShutdownDotNetAfterServerBuild&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NukeBuild&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Backend_Compile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//---------------&lt;/span&gt;
    &lt;span class="c1"&gt;// Params and Definitions&lt;/span&gt;
    &lt;span class="c1"&gt;//---------------&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Parameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Configuration to build - Default is 'Debug' (local) or 'Release' (server)"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IsLocalBuild&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Debug&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Solution&lt;/span&gt; &lt;span class="n"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//---------------&lt;/span&gt;
    &lt;span class="c1"&gt;// Enviroment&lt;/span&gt;
    &lt;span class="c1"&gt;//---------------&lt;/span&gt;

    &lt;span class="n"&gt;AbsolutePath&lt;/span&gt; &lt;span class="n"&gt;SourceDirectory&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RootDirectory&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Src"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//---------------&lt;/span&gt;
    &lt;span class="c1"&gt;// Build process&lt;/span&gt;
    &lt;span class="c1"&gt;//---------------&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnBuildInitialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"🚀 Build process started"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnBuildInitialized&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Backend_All&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Backend_Clean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Backend_Test&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Frontend_All&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Frontend_Clean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Frontend_TryBuild&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Backend_All&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Frontend_All&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;GitHubActions&lt;/code&gt; attribute ensures that the correct Github workflow &lt;code&gt;.yaml&lt;/code&gt; is created under the root directory &lt;code&gt;./github/workflows/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is very handy as you do not have to write it yourself. Same goes for &lt;code&gt;AzurePipelines&lt;/code&gt;, &lt;code&gt;SonarCloud&lt;/code&gt; or any other tools out there! (supported by nuke)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;GitHubActions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"backend-restore-build-and-test"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;-- Workflow Name&lt;/span&gt;
    &lt;span class="n"&gt;GitHubActionsImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WindowsLatest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;-- Runs on Windows&lt;/span&gt;
    &lt;span class="n"&gt;GitHubActionsImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MacOsLatest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;// &amp;lt;-- Runs on MacOs&lt;/span&gt;
    &lt;span class="n"&gt;InvokedTargets&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_All&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;           &lt;span class="c1"&gt;// &amp;lt;-- What targets we wanna triger&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;  
    &lt;span class="n"&gt;On&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;GitHubActionsTrigger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Push&lt;/span&gt;      &lt;span class="c1"&gt;// &amp;lt;-- Trigger event&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;AutoGenerate&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;              &lt;span class="c1"&gt;// &amp;lt;-- Regenerate `.yaml` on change&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This informs Nuke to generate the source code as &lt;code&gt;.github/workflows/backend-restore-build-and-test.yaml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend-restore-build-and-test&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;windows-latest&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache .nuke/temp, ~/.nuget/packages&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;.nuke/temp&lt;/span&gt;
            &lt;span class="s"&gt;~/.nuget/packages&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-${{ hashFiles('**/global.json', '**/*.csproj') }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run './build.cmd Backend_All'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./build.cmd Backend_All&lt;/span&gt;
  &lt;span class="na"&gt;macOS-latest&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macOS-latest&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;macOS-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache .nuke/temp, ~/.nuget/packages&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;.nuke/temp&lt;/span&gt;
            &lt;span class="s"&gt;~/.nuget/packages&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-${{ hashFiles('**/global.json', '**/*.csproj') }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run './build.cmd Backend_All'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./build.cmd Backend_All&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the &lt;code&gt;.yaml&lt;/code&gt; definition, Nuke uses the coross-platform script &lt;code&gt;./build.cmd&lt;/code&gt; that I mentioned at the beginning of this article.&lt;/p&gt;

&lt;p&gt;After you commit your code, Github will use this file to perform the build process for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d-FUhx47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agxqsvguwf8jxeuhff7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d-FUhx47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agxqsvguwf8jxeuhff7u.png" alt="nuke build flow" width="880" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8HKQTeHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3qcuycpe3wb60fg4qj8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8HKQTeHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3qcuycpe3wb60fg4qj8.png" alt="nuke build flow detail" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us go ahead and look in detail at how the backendtargets Clean, Build, and Compile are configured:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.build/Build.Backend.cs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NukeBuild&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Backend_Clean&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_Restore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;SourceDirectory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GlobDirectories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"**/bin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"**/obj"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s"&gt;"node_modules"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s"&gt;"ClientApp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeleteDirectory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;Backend_TestsDirectory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GlobDirectories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"**/bin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"**/obj"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"node_modules"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeleteDirectory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Backend_Restore&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;DotNetRestore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetProjectFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Backend_Compile&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_Restore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;DotNetBuild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetProjectFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableNoRestore&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are backend test targets&lt;/p&gt;

&lt;p&gt;The project contains unit, integration and API tests. They need to be executed together or separately!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.build/Build.Backend.Test.cs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NukeBuild&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//---------------&lt;/span&gt;
    &lt;span class="c1"&gt;// Enviroment&lt;/span&gt;
    &lt;span class="c1"&gt;//---------------&lt;/span&gt;

    &lt;span class="n"&gt;AbsolutePath&lt;/span&gt; &lt;span class="n"&gt;Backend_TestsDirectory&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RootDirectory&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Src"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Tests"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;AbsolutePath&lt;/span&gt; &lt;span class="n"&gt;Backend_Unit_Tests_Directory&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RootDirectory&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Src"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Tests"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"APIServer.Aplication.Unit"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;AbsolutePath&lt;/span&gt; &lt;span class="n"&gt;Backend_Integration_Tests_Directory&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RootDirectory&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Src"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Tests"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"APIServer.Aplication.Integration"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;AbsolutePath&lt;/span&gt; &lt;span class="n"&gt;Backend_API_Tests_Directory&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RootDirectory&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Src"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Tests"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"APIServer.API"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//---------------&lt;/span&gt;
    &lt;span class="c1"&gt;// Build process&lt;/span&gt;
    &lt;span class="c1"&gt;//---------------&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Backend_Test&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Backend_UnitTest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Backend_IntegrationTest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Backend_APITest&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Backend_UnitTest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_Compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;DotNetTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetProjectFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_Unit_Tests_Directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableNoRestore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableNoBuild&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Backend_IntegrationTest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_Compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;DotNetTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetProjectFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_Integration_Tests_Directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableNoRestore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableNoBuild&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Backend_APITest&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_Compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;DotNetTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetProjectFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Backend_API_Tests_Directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableNoRestore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableNoBuild&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are front end targets&lt;/p&gt;

&lt;p&gt;The frontend needs to be restored (packages installed) and compiled in a few steps, as you can see in the code below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.build/Build.Frontend.cs&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Build&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;NukeBuild&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//---------------&lt;/span&gt;
    &lt;span class="c1"&gt;// Enviroment&lt;/span&gt;
    &lt;span class="c1"&gt;//---------------&lt;/span&gt;

    &lt;span class="n"&gt;AbsolutePath&lt;/span&gt; &lt;span class="n"&gt;FrontendDirectory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RootDirectory&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"Src"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"BFF"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"API"&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="s"&gt;"ClientApp"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//---------------&lt;/span&gt;
    &lt;span class="c1"&gt;// Build process&lt;/span&gt;
    &lt;span class="c1"&gt;//---------------&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Frontend_Clean&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Frontend_Restore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="n"&gt;SourceDirectory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GlobDirectories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"**/BFF/API/ClientApp/node_modules"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeleteDirectory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Frontend_Restore&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Ecample of intsall packages based on package.json&lt;/span&gt;
            &lt;span class="n"&gt;NpmTasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NpmInstall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;settings&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableProcessLogOutput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetProcessWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FrontendDirectory&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Frontend_AddTailwind&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Frontend_Restore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Example of dirrcty npm install command&lt;/span&gt;
            &lt;span class="n"&gt;NpmTasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Npm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"install -D tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;FrontendDirectory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Frontend_RelayCompile&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;After&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Frontend_Restore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Compile relay&lt;/span&gt;
            &lt;span class="n"&gt;NpmTasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NpmRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"relaycompile_presisted_js"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetProcessWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FrontendDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="n"&gt;Frontend_TryBuild&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DependsOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Frontend_AddTailwind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Frontend_RelayCompile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Executes&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;NpmTasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NpmLogger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomLogger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;NpmTasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NpmRun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class="n"&gt;settings&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetProcessWorkingDirectory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FrontendDirectory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// Helper&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;CustomLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OutputType&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;OutputType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Std&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;OutputType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="s"&gt;"npmWARN"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrdinalIgnoreCase&lt;/span&gt;
                        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt;

                        &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="s"&gt;"npm WARN"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;StringComparison&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrdinalIgnoreCase&lt;/span&gt;
                        &lt;span class="p"&gt;))&lt;/span&gt;

                        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                    &lt;span class="k"&gt;else&lt;/span&gt;

                        &lt;span class="n"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;Next time I will show you packing and notification process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h2&gt;

&lt;p&gt;You can find the full source code under &lt;code&gt;.build&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/damikun/trouble-training"&gt;https://github.com/damikun/trouble-training&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>cicd</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
