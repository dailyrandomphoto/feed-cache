<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Removing people using UTF-8 👩‍👩‍👦‍👦</title>
      <author>Jan Cizmar</author>
      <pubDate>Thu, 25 Nov 2021 15:37:32 +0000</pubDate>
      <link>https://dev.to/jancizmar/removing-people-using-utf-8-3d2f</link>
      <guid>https://dev.to/jancizmar/removing-people-using-utf-8-3d2f</guid>
      <description>&lt;p&gt;While I was writing my new article I found out about really cool thing I am going to share with you.&lt;/p&gt;

&lt;p&gt;Check out this emoji containing 4 people 👩‍👩‍👦‍👦.&lt;/p&gt;

&lt;p&gt;While I was trying to delete 👩‍👩‍👦‍👦 in VSCode using backspace it &lt;br&gt;
didn't disappear, but it just changed to this 👩‍👩‍👦. After hitting another backspace it changed to 👩‍👩 then to 👩 and then it finally disappeared. So it goes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;👩‍👩‍👦‍👦 ⌫ 👩‍👩‍👦 ⌫ 👩‍👩 ⌫ 👩 ⌫
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-this-happens"&gt;
  &lt;/a&gt;
  Why this happens?
&lt;/h2&gt;

&lt;p&gt;When we look on the decoded symbols, we can see that the symbols are equal to this in hex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;👩‍👩‍👦‍👦:  0x1f469 0x200d 0x1f469 0x200d 0x1f466 0x200d 0x1f466
👩‍👩‍👦‍👦:  0x1f469 0x200d 0x1f469 0x200d 0x1f466
👩‍👩:    0x1f469 0x200d 0x1f469
👩:   0x1f469
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While 0x200d character is a "ZERO WIDTH JOINER" which tells the renderer, that the preceding and following characters should join each other. 🎉&lt;/p&gt;

&lt;p&gt;So it is like 👩 + 👩 + 👦 + 👦.&lt;/p&gt;

&lt;p&gt;Cool isn't it?&lt;/p&gt;

&lt;p&gt;PS:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Removing of single woman works as well, so this 👩‍👦‍👦 can transformed to the hex code like this: 0x1f469 0x200d 0x1f466 0x200d 0x1f466&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>programming</category>
    </item>
    <item>
      <title>I made a working Gameboy CSS art: try it out 🕹</title>
      <author>Mustapha Aouas</author>
      <pubDate>Thu, 25 Nov 2021 15:19:55 +0000</pubDate>
      <link>https://dev.to/mustapha/i-made-a-working-gameboy-css-art-try-it-out-4m1j</link>
      <guid>https://dev.to/mustapha/i-made-a-working-gameboy-css-art-try-it-out-4m1j</guid>
      <description>&lt;p&gt;Here is the story. Last year, I went to a interview (for an Angular position) and the interviewer asked me about a maze solving algorithm. So I completed the algorithm and just for fun I went ahead and did an Angular project where you had to solve a maze (generating a maze is also a good exercise).&lt;/p&gt;

&lt;p&gt;So, I had a fully working maze game in my laptop, and I also had a CSS art of a Gameboy 👉 I figured I would be fun to merge these two together.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try it out &lt;a href="https://theangularguy.github.io/playable-gameboy"&gt;here&lt;/a&gt; (if you're on laptop you can use your keyboard)&lt;/li&gt;
&lt;li&gt;Contribute &lt;a href="https://github.com/TheAngularGuy/playable-gameboy"&gt;here&lt;/a&gt; (or if you'd like to give a ⭐️)&lt;/li&gt;
&lt;li&gt;Demo here 👇&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHTNZkhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1463889718962237456/pu/img/2YZCPE2GGbFiAPdR.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVJIksBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1456240428014096389/IcJJ9Ot6_normal.jpg" alt="Mustapha Aouas profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Mustapha Aouas
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @theangularguy
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Check out this CSS art of a Gameboy I made with a small peculiarity, it's actually playable 🕹&lt;br&gt;Link 👉  &lt;a href="https://t.co/NhuY6SguLv"&gt;theangularguy.github.io/playable-gameb…&lt;/a&gt;&lt;br&gt;&lt;br&gt;What's your highest score? Mine is 90...almost 💯&lt;br&gt;&lt;br&gt;Use your keyboard if you're on a laptop&lt;br&gt;Made with the &lt;a href="https://twitter.com/hashtag/angular"&gt;#angular&lt;/a&gt; game engine &amp;amp; &lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/html"&gt;#html&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:18 PM - 25 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1463889796158398466" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1463889796158398466" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1463889796158398466" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;Follow me on Twitter at &lt;a href="https://twitter.com/TheAngularGuy"&gt;twitter.com/theAngularGuy&lt;/a&gt; as I tweet (almost) every day about the things I learned in my 6+ years journey in web development ✅&lt;/p&gt;




&lt;p&gt;In this post we will talk about a couple of things that went into this project. First we will talk about the maze generation algorithm, and the maze solving algorithm. Then we will talk about some CSS art key concepts.&lt;/p&gt;

&lt;p&gt;&lt;br&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maze-generation-algorithm"&gt;
  &lt;/a&gt;
  Maze generation algorithm
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPtHxema--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb2oma02wvi8fw8mcpcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPtHxema--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb2oma02wvi8fw8mcpcb.png" alt="Steps" width="880" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a lot of algorithm for this. The one I went with is the recursive generation, for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Because I love solving problems with recursion (&lt;a href="https://tinyurl.com/3dv9rvwc"&gt;Scheme&lt;/a&gt; changed me)&lt;/li&gt;
&lt;li&gt;Because the generated maze is prettier to look at (with long alleys)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There's four steps in this algorithm:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delimit the maze area&lt;/li&gt;
&lt;li&gt;Divide the area vertically in the middle (or at a random point) and make an opening in the division&lt;/li&gt;
&lt;li&gt;Take the two halves and divide them horizontally in the middle, and make an opening in each division&lt;/li&gt;
&lt;li&gt;Take each new portion and go to step. 2 &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will go on and on until there's not enough room to make a division.&lt;br&gt;
Here is a gif with the full process of generation 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwyLfcnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul9y79rszzvh2oxywcm2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwyLfcnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul9y79rszzvh2oxywcm2.gif" alt="Generation gif" width="220" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can visualize the maze as a binary tree, each node represents a part / division of the maze.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#maze-solving-algorithm"&gt;
  &lt;/a&gt;
  Maze solving algorithm
&lt;/h2&gt;

&lt;p&gt;For solving the maze I used the depth-first search algorithm. It's not the most performant algorithm for solving a maze but it get's the job done and it's fairly easy to implement. Also I use it to go thought the maze and find the longest path possible, then I use that as the exit point (goal location some might call it) of the maze. Here is a gif illustrating this algorithm:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAuIRVsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiuflcqg891k6glszmf2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAuIRVsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiuflcqg891k6glszmf2.gif" alt="maze solving algorithm" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won't go too many details here, but tell me in the comments if you would be interested in a maze solving article.&lt;/p&gt;

&lt;p&gt;&lt;br&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-art-key-concepts"&gt;
  &lt;/a&gt;
  CSS art: key concepts
&lt;/h2&gt;

&lt;p&gt;We are gonna talk about some CSS properties I wanted to highlight. We can divide these properties into two categories. Shape and Lightening (impression of light and shadows).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#shape"&gt;
  &lt;/a&gt;
  Shape
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#-raw-borderradius-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;border-radius&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The first one is the good old &lt;code&gt;border-radius&lt;/code&gt;. You might use it to make circle or ellipses. But this property can achieve more. You can specify horizontal and vertical radius of each border. Have a look at this snippet bellow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.plate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt; &lt;span class="m"&gt;49%&lt;/span&gt; &lt;span class="m"&gt;49%&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2%&lt;/span&gt; &lt;span class="m"&gt;2%&lt;/span&gt; &lt;span class="m"&gt;6.5%&lt;/span&gt; &lt;span class="m"&gt;6.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I used this to shape the gameboy plate and the black screen.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-aspectratio-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;aspect-ratio&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;This property is very useful, it sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes.&lt;br&gt;
For example I can set the &lt;code&gt;width&lt;/code&gt; and an aspect ratio, and the height will be calculated automatically. Have a look:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.plate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* The height will be 1000px */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I used this on almost every element. Yeah I know I love this property!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-transform-skew-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;transform: skew&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;You might use &lt;code&gt;transform&lt;/code&gt; for rotations, scaling (resizing), or translation (moving), but you can also use it for distortion (skewing).&lt;br&gt;
The &lt;code&gt;skew&lt;/code&gt; CSS property defines a transformation that skews an element on the 2D plane.&lt;/p&gt;

&lt;p&gt;I use this for the sound holes grid. Have a look at the image bellow with skewing (right) and without (left):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BkC8GBqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26wlceitm5a6owfy5o0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BkC8GBqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26wlceitm5a6owfy5o0s.png" alt="comparison skew or not" width="880" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's also a rotation that is applied on the grid in both pictures. &lt;br&gt;
Also, for the sound grid, I used a grid layout. If you want to learn more about CSS grid I wrote an article where I explain every concept of it 👇&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rogKjLRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tXIALQ8l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/cb831252-9db8-4f7a-a600-0bf8db47b92f.png" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/css-grid-illustrated-introduction-52l5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS Grid: illustrated introduction&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Sep 12 '19 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#light-and-shadow"&gt;
  &lt;/a&gt;
  Light and shadow
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-boxshadow-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;box-shadow&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;To give an impression of volume, lighting is essential. Look at the two examples bellow, left is without shadow and right is using shadows (&lt;code&gt;text-shadow&lt;/code&gt; &amp;amp; &lt;code&gt;box-shadow&lt;/code&gt;):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ov7k9uaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoq7ip0z6d8ikb1xghmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ov7k9uaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoq7ip0z6d8ikb1xghmb.png" alt="box-shadow comparison" width="880" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve this effect of lighting we have to understand where to put light and where to put some shadow, and that depends on if something is in relief or depression. Have a look at the image bellow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hcjI6k2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqs7pfy5v9umdtzbkonm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hcjI6k2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqs7pfy5v9umdtzbkonm.png" alt="light effect" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we apply this to the buttons, we would have something like this (assuming the light is at the top left of the screen):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LKAEy-tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekf8ikt9s19dn6bula85.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKAEy-tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekf8ikt9s19dn6bula85.gif" alt="lighting and shadow for buttons" width="470" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That translates to this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;99%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="m"&gt;2.5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The inset keyword changes the shadow to one inside the frame.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-textshadow-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;text-shadow&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Fo the texts we use the same principle either the text is in relief or depression. Here is an example of a text that is in relief:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;1.2px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;7%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;br&gt;
That's it for this post. I hope you liked it. If you did, please share it with your friends &amp;amp; colleagues and follow me on Twitter at &lt;a href="https://twitter.com/TheAngularGuy"&gt;@theAngularGuy&lt;/a&gt; where I tweet about web development and computer science.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-to-read-next"&gt;
  &lt;/a&gt;
  What to read next?
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rogKjLRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tXIALQ8l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/cb831252-9db8-4f7a-a600-0bf8db47b92f.png" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/7-amazing-css-properties-you-may-not-know-yet-eej" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 amazing CSS properties you may not know  (yet)&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Apr 20 '20 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>css</category>
      <category>javascript</category>
      <category>algorithms</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Getting started with Web Sockets in NodeJS</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 25 Nov 2021 15:18:49 +0000</pubDate>
      <link>https://dev.to/codesphere/getting-started-with-web-sockets-in-nodejs-49n0</link>
      <guid>https://dev.to/codesphere/getting-started-with-web-sockets-in-nodejs-49n0</guid>
      <description>&lt;p&gt;In the day and age of live streaming, video conferencing, and remote work, one of the primary concerns of any user is latency. A seamless experience is the name of the game.&lt;/p&gt;

&lt;p&gt;Traditional HTTP, being dependent on client requests, is simply not capable of fulfilling this need. They're simply too slow. It needs to be upgraded, literally.&lt;/p&gt;

&lt;p&gt;Let me introduce you to Websockets - An event-driven, web-friendly alternative to HTTP. Websockets don't require a client request to fetch data from the server every time, fulfilling the need for real-time updates. Wondering how? Let's find it out.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-are-websockets"&gt;
  &lt;/a&gt;
  What are Websockets?
&lt;/h3&gt;

&lt;p&gt;In simple terms, websockets are an upgrade to traditional HTTP.&lt;/p&gt;

&lt;p&gt;Whenever a websocket request is made to regular HTTP, it is actually upgraded to a websocket connection. However, this happens only at the protocol level, meaning that your underlying TCP connection will remain the same as it was when working on HTTP protocol.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In order to use a websocket, a client first sends a request to upgrade the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the server supports websockets, which these days it usually does, it will accept the request and switch the protocols from HTTP to websocket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the protocol switching is successful, the http server becomes a websocket server and a persistent connection is created between the client and the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, the websocket server waits for an event to happen and once it does it performs the function attached to the event. For example, in a chat application you don't have to place a request for the next message every time. Being a websocket connection (event-driven), the server simply pushes every new message (the event) it receives directly to the client.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Websockets are mostly used at places where real time updates are necessary. For example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Chat applications.&lt;/li&gt;
&lt;li&gt;Location based apps.&lt;/li&gt;
&lt;li&gt;Social feeds.&lt;/li&gt;
&lt;li&gt;Collaborative work.&lt;/li&gt;
&lt;li&gt;Multi player gaming.&lt;/li&gt;
&lt;li&gt;Live streaming.&lt;/li&gt;
&lt;li&gt;Financial and sports updates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of the above renders an enhanced user experience thanks to WebSockets. Websockets always maintain their state (unlike HTTP, which is stateless) and utilize a full-duplex connection. Furthermore, headers in WebSockets are sent only once while sending the upgrade request. This is why WebSockets have speeds 5–7 times better than traditional HTTP.&lt;/p&gt;

&lt;p&gt;Sounds exciting? It does but this is all well and good in theory. Nothing like the feeling than to see it in action and better yet implementing it yourself. So let's get right to it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-the-development-environment"&gt;
  &lt;/a&gt;
  Setting up the development environment
&lt;/h3&gt;

&lt;p&gt;First things first, we need to set up our development environment by installing the required files and packages and creating our workspace. We will be using the ws library to create a simple chat application using websockets in NodeJS.&lt;br&gt;
First, in our project folder create two folders named client and server.&lt;/p&gt;

&lt;p&gt;Now fire up the node terminal and go to the server directory and run the following commands one by one&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;br&gt;
//initializes node and creates a package.json file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install websocket&lt;/code&gt;&lt;br&gt;
//installs websocket library&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install ws&lt;/code&gt;&lt;br&gt;
//installs ws library - a websocket implementation&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install express&lt;/code&gt;&lt;br&gt;
//installs express for creating a simple http server&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install nodemon&lt;/code&gt;&lt;br&gt;
//installs nodemon package to track changes in our code and restart server&lt;/p&gt;

&lt;p&gt;After this is done, create a file named &lt;code&gt;index.js&lt;/code&gt; inside your server folder. This &lt;code&gt;index.js&lt;/code&gt; will be our server-side javascript file.&lt;/p&gt;

&lt;p&gt;Now we move on to the client folder. In the client folder create a file called &lt;code&gt;index.html&lt;/code&gt; and another file called &lt;code&gt;script.js&lt;/code&gt;. The HTML file will be the frontend for the application and &lt;code&gt;script.js&lt;/code&gt; will be the client-side javascript file.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#implementing-the%C2%A0server"&gt;
  &lt;/a&gt;
  Implementing the server
&lt;/h3&gt;

&lt;p&gt;Now let's code the server-side javascript. Add the following code to &lt;code&gt;index.js&lt;/code&gt; in the server folder.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Implementing the client&lt;br&gt;
As we are done with the server-side, time to implement the client. We start with &lt;code&gt;index.html&lt;/code&gt;. Add the following code to it.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Moving to the script.js file. Add the following code to it.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#websockets-in%C2%A0action"&gt;
  &lt;/a&gt;
  Websockets in Action
&lt;/h3&gt;

&lt;p&gt;And there you have it!&lt;/p&gt;

&lt;p&gt;When you deploy your app (make sure to run both the server and client sides), your HTML page will open up. If you type anything in the input box and click "Send Message" the server will echo it back to you. But where's the fun in that? We want to see two clients chatting.&lt;/p&gt;

&lt;p&gt;Open another browser or another instance of the same browser. Now go to the same URL as above.&lt;/p&gt;

&lt;p&gt;Place both browsers side by side on your screen. Now when you send a message from one it will reflect in the other while echoing in the same as well. You can try the same with both browsers and it will work just the same. You can notice that the echo and the message in the other browser appear at practically the same time. That's your WebSocket at work.&lt;/p&gt;

&lt;p&gt;There you go! I hope you found this simple implementation of a chat application using WebSockets in NodeJS fun to work with. Get creative with it!&lt;/p&gt;




&lt;p&gt;When you're ready to show off your project, deploy it on &lt;a href="https://link.codesphere.com/GI"&gt;Codesphere&lt;/a&gt;, the only cloud platform that takes the headache out of configuring your cloud services.&lt;/p&gt;

&lt;p&gt;It only takes minutes to deploy!&lt;/p&gt;

&lt;p&gt;That was it from our side. Let us know what amazing real-time application you're going to build down below!&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Short-Circuiting in JavaScript</title>
      <author>Lars Grammel</author>
      <pubDate>Thu, 25 Nov 2021 14:23:16 +0000</pubDate>
      <link>https://dev.to/lgrammel/short-circuiting-in-javascript-1d7c</link>
      <guid>https://dev.to/lgrammel/short-circuiting-in-javascript-1d7c</guid>
      <description>&lt;p&gt;In JavaScript, &lt;strong&gt;short-circuiting refers to the partial evaluation of expressions to avoid unnecessary computation&lt;/strong&gt;. This blog post describes the short-circuiting operators and assignments in JavaScript and how to use them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shortcircuiting-operators-ampamp-and-"&gt;
  &lt;/a&gt;
  Short-Circuiting Operators: &amp;amp;&amp;amp;, ||, and ??
&lt;/h3&gt;

&lt;p&gt;Short-circuiting operators only evaluate the right side of an expression when necessary. &lt;/p&gt;

&lt;p&gt;For example, for the logical AND operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, when the left side of the operator is false, the right side of the operator will not change the result. The result is false regardless of whether the right side is true or false. Therefore JavaScript skips the evaluation of the right side and uses the value from the left side.&lt;/p&gt;

&lt;p&gt;There are three short-circuiting binary operators in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND"&gt;Logical AND&lt;/a&gt;&lt;/strong&gt; (&lt;code&gt;A &amp;amp;&amp;amp; B&lt;/code&gt;): &lt;code&gt;B&lt;/code&gt; is only evaluated if &lt;code&gt;A&lt;/code&gt; is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy"&gt;truthy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR"&gt;Logical OR&lt;/a&gt;&lt;/strong&gt; (&lt;code&gt;A || B&lt;/code&gt;): &lt;code&gt;B&lt;/code&gt; is only evaluated if &lt;code&gt;A&lt;/code&gt; is &lt;a href="https://developer.mozilla.org/en-US/docsGlossary/Falsy"&gt;falsy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;Nullish coalescing&lt;/a&gt;&lt;/strong&gt; (&lt;code&gt;A ?? B&lt;/code&gt;): &lt;code&gt;B&lt;/code&gt; is only evaluated if &lt;code&gt;A&lt;/code&gt; is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Nullish"&gt;nullish&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; can be any expression. Their evaluation might invoke function and getter calls that can contain complex calculations or have side effects.&lt;br&gt;
Because &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; can return any value, the three short-circuiting operators evaluate and return any value, not just booleans.&lt;/p&gt;

&lt;p&gt;This means that you can use the short-circuiting operators for &lt;strong&gt;providing defaults&lt;/strong&gt; (&lt;code&gt;||&lt;/code&gt; and &lt;code&gt;??&lt;/code&gt;), for checking nullish values (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, before the optional chaining operator &lt;code&gt;?.&lt;/code&gt; was available), and for &lt;strong&gt;&lt;a href="https://reactjs.org/docs/conditional-rendering.html#inline-if-with-logical--operator"&gt;conditional rendering in React&lt;/a&gt;&lt;/strong&gt; (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// default values&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// assigns 123 to a if a is falsy&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// assigns 123 to b if b is nullish&lt;/span&gt;

&lt;span class="c1"&gt;// optional chaining with &amp;amp;&amp;amp; ( .? is a modern alterative)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// React: conditional rendering&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;  
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shortcircuiting-assignments-ampamp-and-"&gt;
  &lt;/a&gt;
  Short-Circuiting Assignments: &amp;amp;&amp;amp;=, ||=, and ??=
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Short-circuiting also applies if you use the above operators in assignment expressions&lt;/strong&gt; (&lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;, and &lt;code&gt;??=&lt;/code&gt;). When you use short-circuiting assignments, the assignment is only carried out when the current value does not lead to short-circuiting. This can help avoid unnecessary updates.&lt;/p&gt;

&lt;p&gt;Here is an example(&lt;code&gt;-Infinity&lt;/code&gt; is &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy"&gt;truthy&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -Infinity&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3 (short-circuiting ||, because 3 is truthy)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 0 (short-circuiting &amp;amp;&amp;amp;, because 0 is falsy)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -Infinity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#refactoring-assignments-with-shortcircuiting-operators"&gt;
  &lt;/a&gt;
  Refactoring Assignments with Short-Circuiting Operators
&lt;/h3&gt;

&lt;p&gt;Short-circuiting assignments look very similar to regular assignments with short-circuiting operator expressions. One might think that they can be refactored as follows without changing the behavior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* becomes */&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* becomes */&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* becomes */&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, when I was developing the safety evaluation for the &lt;br&gt;
'&lt;a href="https://p42.ai/documentation/code-action/push-operator-into-assignment"&gt;Push Operator into Assignment&lt;/a&gt;' and '&lt;a href="https://p42.ai/documentation/code-action/pull-operator-out-of-assignment"&gt;Pull Operator Out of Assignment&lt;/a&gt;' refactorings in &lt;a href="https://p42.ai/"&gt;P42&lt;/a&gt;, I discovered that those refactorings can lead to behavioral changes in some situations.&lt;/p&gt;

&lt;p&gt;Consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`set &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.x to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// nullish coalescing operator&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// nullish assignment &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Surprisingly, moving the operator into the assignment changes what operations are executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// output for nullish coalescing operator&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;set a.x to 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;set a.x to 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// output for nullish assignment &lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;set b.x to 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While these minor differences won't matter most of the time, it's good to be aware of them for two reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they can cause breakages during refactoring because they change existing behavior&lt;/li&gt;
&lt;li&gt;they can be beneficial to reduce the number of operations in performance hotspots&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Short-circuiting operators in JavaScript (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;??&lt;/code&gt;) evaluate their right-hand side expression only when necessary. Their assignment equivalents (&lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;||=&lt;/code&gt;, &lt;code&gt;??=&lt;/code&gt;) only update a value when the current value would &lt;br&gt;
cause the execution of the right side of the short-circuiting operator.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>node</category>
    </item>
    <item>
      <title>AWS Step Function vs. AWS Lambda - Part 2</title>
      <author>Christian Bonzelet</author>
      <pubDate>Thu, 25 Nov 2021 13:49:46 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-step-function-vs-aws-lambda-part-2-1dgk</link>
      <guid>https://dev.to/aws-builders/aws-step-function-vs-aws-lambda-part-2-1dgk</guid>
      <description>&lt;p&gt;Do you also feel the tension of the cover image? It is time for a battle again. 🥊 After I published &lt;a href="https://dev.to/aws-builders/aws-step-function-vs-aws-lambda-benchmark-54hj"&gt;the first part&lt;/a&gt; of my comparison, I was overwhelmed about the amount of feedback I received. May it be comments on my post, discussions on twitter or LinkedIn.&lt;/p&gt;

&lt;p&gt;The fact that the initial post triggered a lot of inspiring discussions is very valuable. While reading through your feedback it was kind of obvious that there is a need for a second part. &lt;/p&gt;

&lt;p&gt;I received a lot of feedback about optimizations for AWS Lambda and that people are curious how this affects the performance in comparison to our state machine. We will also take a closer look on the perspective of costs to get a more complete view how the services differ.&lt;/p&gt;

&lt;p&gt;Here we are. &lt;/p&gt;

&lt;p&gt;Like in our first part, again all experiments are triggered using &lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html"&gt;Apache Bench&lt;/a&gt; with the following parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ab -n 15000 -c 1 https://hash.execute-api.eu-central-1.amazonaws.com/.../&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-n&lt;/code&gt; configures the total amount of requests that are triggered - in our case 15.000&lt;br&gt;
&lt;code&gt;-c&lt;/code&gt; is the number of concurrent requests - in our setup 1&lt;/p&gt;

&lt;p&gt;⚠️ &lt;strong&gt;IMPORTANT:&lt;/strong&gt; it is important to consider, that the results from apache-bench are not 100% accurate. The measured throughput depends on the hardware and network capabilities of my local workstation. For upcoming benchmarks, I consider to use something like CloudShell. &lt;br&gt;
But apache-bench gives some very early feedback and potential indications. Hence we use these results in combination with the Lambda duration and Step-Function execution duration.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#optimizing-our-lambda-function"&gt;
  &lt;/a&gt;
  🔋 Optimizing our Lambda function
&lt;/h2&gt;

&lt;p&gt;So what is the goal of our upcoming experiments? We want to &lt;br&gt;
apply some optimizations on our Lambda function with a clear focus to decrease latencies. Based on the feedback I got, there were two main approaches for optimization:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reusing downstream http connections by activating keep-alive settings.&lt;/li&gt;
&lt;li&gt;Improving overall execution performance by increasing the allocated memory.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#reusing-connections-with-keepalive-in-nodejs"&gt;
  &lt;/a&gt;
  Reusing Connections with Keep-Alive in Node.js
&lt;/h3&gt;

&lt;p&gt;For short-lived operations, such as in our case writing and reading to and from S3, the latency overhead of setting up a TCP connection might be greater than the operation itself. To activate http keep-alive you simply have to set an environment variable in your Lambda function configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Environment:
  Variables:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you already use v3 of the AWS JS SDK, this setting is &lt;a href="https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-reusing-connections.html"&gt;enabled by default&lt;/a&gt;. For v2 you have to &lt;a href="https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html"&gt;explicitly activate it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let us deploy the change and start our first test. Let us first start with analyzing the Apache Bench reports. The complete reporting is available on &lt;a href="https://github.com/cremich/aws-sf-lambda-benchmark/tree/main/benchmark"&gt;GitHub&lt;/a&gt;. Here some highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Lambda function was able to process all requests 43 seconds faster compared to the state machine.&lt;/li&gt;
&lt;li&gt;Both the state machine and the Lambda function were able to process round about 7 requests per second&lt;/li&gt;
&lt;li&gt;The mean time per request for the Lambda function was 131ms and 134ms for state machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking at these results, this little tweak of activating TCP keep-alive helped a lot to speed up the Lambda function. In terms of end-2-end performance and latency, both solutions are now very close to each other.&lt;/p&gt;

&lt;p&gt;Let us take a closer look into CloudWatch and X-Ray to confirm the observations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr_Qs9Hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aysa1t8hlox1s73vb6gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr_Qs9Hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aysa1t8hlox1s73vb6gd.png" alt="latencies with keep-alive" width="880" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The average execution time of the state-machine is 46.4ms and Lambda performs with 49ms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d-AKaqJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt9uhcwylc7ujpjnr8ow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d-AKaqJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt9uhcwylc7ujpjnr8ow.png" alt="x-ray service map with keep alive" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here things are still looking interesting. The Lambda function duration on average still has some up and downs during the execution of the test while the duration of the state-machine is stable. Both solutions show some cold-start behavior while it seems that the state-machine needs less time to become "warm".&lt;/p&gt;

&lt;p&gt;But in total the impact on the Lambda function performance is very impressive compared to the results in the first part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#give-the-lambda-function-some-ram"&gt;
  &lt;/a&gt;
  Give the Lambda function some RAM
&lt;/h3&gt;

&lt;p&gt;But the question is: how much memory does my Lambda function need? The range is quite large from 128 MB to 10.240 MB. &lt;br&gt;
There is an awesome open source tool called "&lt;a href="https://github.com/alexcasalboni/aws-lambda-power-tuning"&gt;Lambda Power Tuner&lt;/a&gt;" that helps you to determine your memory settings based on different strategies like speed, cost or balanced.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you use "cost" the state machine will suggest the cheapest option (disregarding its performance), while if you use "speed" the state machine will suggest the fastest option (disregarding its cost). When using "balanced" the state machine will choose a compromise between "cost" and "speed"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href="https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:451282441545:applications~aws-lambda-power-tuning"&gt;Lambda Power Tuner @ AWS Serverless Application Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case the "Lambda Power Tuner" suggested 256 MB as "Best cost" and 2048 MB as "Best Time". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rmfFIp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0v4xxyzdlvi7x79gfvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rmfFIp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0v4xxyzdlvi7x79gfvc.png" alt="lambda-power-tuner-output" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome, now we have a good start for the final tests.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#best-time-setting"&gt;
  &lt;/a&gt;
  Best time setting
&lt;/h4&gt;

&lt;p&gt;As we aim to reduce latency, let us first start with the proposed "Best Time" setting of 2048 MB memory and let us have a look at the apache-bench metrics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Lambda function was able to process all requests 81 seconds faster compared to the state machine.&lt;/li&gt;
&lt;li&gt;Both the state machine and the Lambda function were able to process round about 8 requests per second&lt;/li&gt;
&lt;li&gt;The mean time per request for the Lambda function was 121ms and 127ms for state machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compared to our first test, there are some improvement but they seem to be marginally on average. Let us try to get some more insights using CloudWatch and X-Ray.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DRajtx_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mf2qilnwy8s087eeldh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRajtx_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mf2qilnwy8s087eeldh.png" alt="cloudwatch-latencies-2048" width="880" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the most parts, the duration of the Lambda function is just below the execution time of the state-machine. &lt;br&gt;
The average execution time of the state-machine is 45.1ms and Lambda shines with 41.8ms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n6OyN18m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma1m8l4tv1x4m9emw9q4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6OyN18m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma1m8l4tv1x4m9emw9q4.png" alt="xray-service-map-2048" width="880" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What would happen, if we set our memory configuration to the setting considered as "Best cost"? Let us review the results in the next chapter.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#best-cost-setting"&gt;
  &lt;/a&gt;
  Best cost setting
&lt;/h4&gt;

&lt;p&gt;In short again our apache-bench metrics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Lambda function was able to process all requests 155 seconds faster compared to the state machine.&lt;/li&gt;
&lt;li&gt;The state machine was able to process 7.5 requests per second while the Lambda function processes 8 requests per second&lt;/li&gt;
&lt;li&gt;The mean time per request for the Lambda function was 122ms and 132ms for state machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CloudWatch and X-Ray results also confirm very close results. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4EA8a4FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlbnp90x0645ljlc2jjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EA8a4FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlbnp90x0645ljlc2jjq.png" alt="cloudwatch-256" width="880" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The average execution time of the state-machine is 54.8ms and Lambda is just in the lead with 50.5ms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mD8-lGuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjifyz7mgjxujcivhhse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mD8-lGuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjifyz7mgjxujcivhhse.png" alt="xray-256" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#cost-comparison"&gt;
  &lt;/a&gt;
  💰 Cost comparison
&lt;/h2&gt;

&lt;p&gt;Based on the scale of my test, the AWS Cost Explorer was not really helpful as the load I generated was too low. The AWS calculator is a helpful tool to better compare the costs of both services. &lt;/p&gt;

&lt;p&gt;The estimate is &lt;a href="https://calculator.aws/#/estimate?id=16d3b9fd0f064aac0f7d743fb47ad2b2044ad91e"&gt;publicly available&lt;/a&gt; if you want to have a detailed look. &lt;/p&gt;

&lt;p&gt;I calculated with 5 million invocations per month per service. Based on our test results, I was able to determine very precise values for the parameter that influence pricing like Lambda invocation duration/state-machine execution or consumed memory. The monthly costs are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8 USD for AWS Lambda with 2048MB memory (Best time)&lt;/li&gt;
&lt;li&gt;1.83 USD for AWS Lambda with 265MB memory (Best cost)&lt;/li&gt;
&lt;li&gt;5.52 USD for the AWS Step Function express workflow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  💡 Conclusion
&lt;/h2&gt;

&lt;p&gt;In this part we covered some important aspects like options to improve the performance of a Lambda function. I think it is again very important to mention, that this benchmark should not be interpreted as "use Step Functions whenever you can". &lt;/p&gt;

&lt;p&gt;My goal was more to raise discussions about the importance to not build you decision based on hypothesis or rumors. Make your decision based on data to make the best of all kind of  decisions you can make.&lt;/p&gt;

&lt;p&gt;I would again like to point out a quote from &lt;a href="https://twitter.com/edjgeek"&gt;Eric Johnson&lt;/a&gt; at the &lt;a href="https://www.youtube.com/watch?v=zdmCYPvOHoo"&gt;serverless office hours&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use Lambda to transform not to transport&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or in my words: the best code is the code that is never written.&lt;/p&gt;

&lt;p&gt;☝️ And here come the thing and this is very important to keep in mind:&lt;/p&gt;

&lt;p&gt;BOTH SERVICES ARE AWESOME.&lt;/p&gt;

&lt;p&gt;If you have the need to write a Lambda function, you will be able to solve a lot of problems. But depending on what you want to achieve, Step Functions give you a lot of power to get the same results without writing ANY line of code, while making up your mind about things like TCP keep-alive or how to figure out what the best memory setting is. In all tests, AWS Lambda showed the well-known cold-start behavior that is something you should keep in mind. AWS Step Function also needs some warm-up time but it is not really comparable to AWS Lambda cold-starts. There was an interesting discussion around this on twitter:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_VIlTi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/487409001047420928/lwn7_0Pp_normal.jpeg" alt="Diego Santiviago profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Diego Santiviago
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @diegosantiviago
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/marekq"&gt;@marekq&lt;/a&gt; &lt;a href="https://twitter.com/Cremich"&gt;@Cremich&lt;/a&gt; &lt;a href="https://twitter.com/__steele"&gt;@__steele&lt;/a&gt; &lt;a href="https://twitter.com/chrismunns"&gt;@chrismunns&lt;/a&gt; &lt;a href="https://twitter.com/IamStan"&gt;@IamStan&lt;/a&gt; &lt;a href="https://twitter.com/ben11kehoe"&gt;@ben11kehoe&lt;/a&gt; &lt;a href="https://twitter.com/alexbdebrie"&gt;@alexbdebrie&lt;/a&gt; &lt;a href="https://twitter.com/richdevelops"&gt;@richdevelops&lt;/a&gt; not a runtime/platform cold-start, but Step Functions needs the state machine definition.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:39 PM - 28 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453733187666857985" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453733187666857985" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453733187666857985" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It only remains to say: happy coding AND happy orchestrating! 🥳 I really hope that my analysis and the approach to decision-making helps you in deciding towards or against one of these services for your individual use cases.&lt;/p&gt;




&lt;p&gt;About the author: &lt;/p&gt;

&lt;p&gt;👋 Hi my name is Christian. I am working as an AWS Solution Architect at &lt;a href="https://www.dfl.de/en/about/subsidiaries/about-dfl-digital-sports-gmbh/"&gt;DFL Digital Sports GmbH&lt;/a&gt;. Based in cologne with my beloved wife and two kids. I am interested in all things around ☁️ (cloud), 👨‍💻 (tech) and 🧠 (AI/ML).&lt;/p&gt;

&lt;p&gt;With 10+ years of experience in several roles, I have a lot to talk about and love to share my experiences. I worked as a software developer in several companies in the media and entertainment business, as well as a solution engineer in a consulting company. &lt;/p&gt;

&lt;p&gt;I love those challenges to provide high scalable systems for millions of users. And I love to collaborate with lots of people to design systems in front of a whiteboard.&lt;/p&gt;

&lt;p&gt;You can find me on &lt;a href="https://www.linkedin.com/in/christian-bonzelet/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://www.twitter.com/cremich"&gt;Twitter&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Cover Image by &lt;a href="https://tenor.com/users/miguelangelvenegasgordillo"&gt;miguelangelvenegasgordillo&lt;/a&gt; on &lt;a href="https://tenor.com/view/civilwar-captainamerica-gif-14387051"&gt;Tenor&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>lambda</category>
      <category>stepfunction</category>
    </item>
    <item>
      <title>Backtracking in JAVA</title>
      <author>Nikhilesh2601</author>
      <pubDate>Thu, 25 Nov 2021 13:37:36 +0000</pubDate>
      <link>https://dev.to/nikhilesh2601/backtracking-in-java-3la0</link>
      <guid>https://dev.to/nikhilesh2601/backtracking-in-java-3la0</guid>
      <description>&lt;p&gt;Backtracking is an algorithmic-technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions that fail to satisfy the constraints of the problem at any point of time (by time, here, is referred to the time elapsed till reaching any level of the search tree)&lt;/p&gt;

&lt;p&gt;There are three types of problems in backtracking –  &lt;/p&gt;

&lt;p&gt;1)Decision Problem – In this, we search for a feasible solution.&lt;br&gt;
2)Optimization Problem – In this, we search for the best solution.&lt;br&gt;
3)Enumeration Problem – In this, we find all feasible solutions.&lt;br&gt;
4)How to determine if a problem can be solved using Backtracking?&lt;/p&gt;

&lt;p&gt;Generally, every constraint satisfaction problem which has clear and well-defined constraints on any objective solution, that incrementally builds candidate to the solution and abandons a candidate (“backtracks”) as soon as it determines that the candidate cannot possibly be completed to a valid solution, can be solved by Backtracking. However, most of the problems that are discussed, can be solved using other known algorithms like Dynamic Programming or Greedy Algorithms in logarithmic, linear, linear-logarithmic time complexity in order of input size, and therefore, outshine the backtracking algorithm in every respect (since backtracking algorithms are generally exponential in both time and space). However, a few problems still remain, that only have backtracking algorithms to solve them until now. &lt;/p&gt;

&lt;p&gt;Consider a situation that you have three boxes in front of you and only one of them has a gold coin in it but you do not know which one. So, in order to get the coin, you will have to open all of the boxes one by one. You will first check the first box, if it does not contain the coin, you will have to close it and check the second box and so on until you find the coin. This is what backtracking is, that is solving all sub-problems one by one in order to reach the best possible solution. &lt;/p&gt;

&lt;p&gt;Consider the below example to understand the Backtracking approach more formally, &lt;/p&gt;

&lt;p&gt;Given an instance of any computational problem P  and data D  corresponding to the instance, all the constraints that need to be satisfied in order to solve the problem are represented by C  . A backtracking algorithm will then work as follows: &lt;/p&gt;

&lt;p&gt;The Algorithm begins to build up a solution, starting with an empty solution set S  . S = {} &lt;/p&gt;

&lt;p&gt;Add to S  the first move that is still left (All possible moves are added to S  one by one). This now creates a new sub-tree s  in the search tree of the algorithm.&lt;br&gt;
Check if S+s  satisfies each of the constraints in C  . &lt;br&gt;
If Yes, then the sub-tree s  is “eligible” to add more “children”.&lt;br&gt;
Else, the entire sub-tree s  is useless, so recurs back to step 1 using argument S  .&lt;br&gt;
In the event of “eligibility” of the newly formed sub-tree s  , recurs back to step 1, using argument S+s  .&lt;br&gt;
If the check for S+s  returns that it is a solution for the entire data D  . Output and terminate the program. &lt;br&gt;
If not, then return that no solution is possible with the current s  and hence discard it.&lt;/p&gt;

&lt;p&gt;Difference between Recursion and Backtracking:&lt;br&gt;
In recursion, the function calls itself until it reaches a base case. In backtracking, we use recursion to explore all the possibilities until we get the best result for the problem.&lt;/p&gt;

&lt;p&gt;Pseudo Code for Backtracking :  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Recursive backtracking solution. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;void findSolutions(n, other params) :&lt;br&gt;
    if (found a solution) :&lt;br&gt;
        solutionsFound = solutionsFound + 1;&lt;br&gt;
        displaySolution();&lt;br&gt;
        if (solutionsFound &amp;gt;= solutionTarget) : &lt;br&gt;
            System.exit(0);&lt;br&gt;
        return&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (val = first to last) :
    if (isValid(val, n)) :
        applyValue(val, n);
        findSolutions(n+1, other params);
        removeValue(val, n);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Finding whether a solution exists or not &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;boolean findSolutions(n, other params) :&lt;br&gt;
    if (found a solution) :&lt;br&gt;
        displaySolution();&lt;br&gt;
        return true;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (val = first to last) :
    if (isValid(val, n)) :
        applyValue(val, n);
        if (findSolutions(n+1, other params))
            return true;
        removeValue(val, n);
    return false;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Let us try to solve a standard Backtracking problem, N-Queen Problem. &lt;br&gt;
The N Queen is the problem of placing N chess queens on an N×N chessboard so that no two queens attack each other. For example, following is a solution for 4 Queen problem. &lt;/p&gt;

&lt;p&gt;The expected output is a binary matrix which has 1s for the blocks where queens are placed. For example, following is the output matrix for the above 4 queen solution. &lt;/p&gt;

&lt;p&gt;{ 0,  1,  0,  0}&lt;br&gt;
{ 0,  0,  0,  1}&lt;br&gt;
{ 1,  0,  0,  0}&lt;br&gt;
{ 0,  0,  1,  0}&lt;/p&gt;

&lt;p&gt;Backtracking Algorithm: The idea is to place queens one by one in different columns, starting from the leftmost column. When we place a queen in a column, we check for clashes with already placed queens. In the current column, if we find a row for which there is no clash, we mark this row and column as part of the solution. If we do not find such a row due to clashes then we backtrack and return false. &lt;/p&gt;

&lt;p&gt;1) Start in the leftmost column&lt;br&gt;
2) If all queens are placed&lt;br&gt;
    return true&lt;br&gt;
3) Try all rows in the current column.  Do following for every tried row.&lt;br&gt;
    a) If the queen can be placed safely in this row then mark this [row, &lt;br&gt;
        column] as part of the solution and recursively check if placing&lt;br&gt;&lt;br&gt;
        queen here leads to a solution.&lt;br&gt;
    b) If placing the queen in [row, column] leads to a solution then return &lt;br&gt;
        true.&lt;br&gt;
    c) If placing queen doesn't lead to a solution then unmark this &lt;a href="https://dev.toBacktrack"&gt;row, &lt;br&gt;
        column&lt;/a&gt; and go to step (a) to try other rows.&lt;br&gt;
4) If all rows have been tried and nothing worked, return false to trigger &lt;br&gt;
    backtracking.&lt;/p&gt;

&lt;p&gt;**Examples for backtracking:&lt;/p&gt;

&lt;p&gt;Program-1:&lt;/p&gt;

&lt;p&gt;import java.util.Scanner;&lt;br&gt;
public class pro1 {&lt;br&gt;
public static void main(String[] args){&lt;br&gt;
Scanner scanner = new Scanner(System.in);&lt;br&gt;
System.out.println("Enter the values of m and n:");&lt;br&gt;
int m = scanner.nextInt();&lt;br&gt;
int n = scanner.nextInt();&lt;br&gt;
int result = grid(1,1, m, n);&lt;br&gt;
System.out.println("Result: "+ result);&lt;br&gt;
}&lt;br&gt;
public static int grid(int x, int y, int m, int n){&lt;br&gt;
if(x == m &amp;amp;&amp;amp; y == n){&lt;br&gt;
return 1;&lt;br&gt;
}&lt;br&gt;
else if(x &amp;lt;= m &amp;amp;&amp;amp; y &amp;lt;= n){&lt;br&gt;
return grid(x+1, y, m, n) + grid(x, y+1, m, n);&lt;br&gt;
}&lt;br&gt;
else{&lt;br&gt;
return 0;&lt;br&gt;
}&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Program-2:&lt;/p&gt;

&lt;p&gt;import java.util.Scanner;&lt;br&gt;
import java.lang.Math;&lt;br&gt;
public class pro2 {&lt;br&gt;
private static double MAX = Math.pow(10, 9) + 7;&lt;br&gt;
public static int countOrders(int n) {&lt;br&gt;
int sumTillNow = 1;&lt;br&gt;
double productTillNow = 1;&lt;br&gt;
for (int i = 2; i &amp;lt;= n; i++) {&lt;br&gt;
for (int j = 2*i - 2; j &amp;lt;= 2*i - 1; j++) {&lt;br&gt;
sumTillNow += j;&lt;br&gt;
}&lt;br&gt;
productTillNow *= sumTillNow;&lt;br&gt;
productTillNow = productTillNow % MAX;&lt;br&gt;
}&lt;br&gt;
return (int)productTillNow;&lt;br&gt;
}&lt;br&gt;
public static void main(String[] args){&lt;br&gt;
Scanner scanner = new Scanner(System.in);&lt;br&gt;
System.out.println("Enter the values of n:");&lt;br&gt;
int n = scanner.nextInt();&lt;br&gt;
System.out.println("Result : "+ countOrders(n));&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Program-3:&lt;/p&gt;

&lt;p&gt;import java.util.Scanner;&lt;br&gt;
public class pro3 {&lt;br&gt;
private static int mod = 1000000007;&lt;br&gt;
public static void main(String[] args) {&lt;br&gt;
Scanner scanner = new Scanner(System.in);&lt;br&gt;
System.out.println("Enter n and k:");&lt;br&gt;
int n = scanner.nextInt();&lt;br&gt;
int k = scanner.nextInt();&lt;br&gt;
System.out.println("Result: " + rearrangeSticks(n, k));&lt;br&gt;
}&lt;br&gt;
public static int rearrangeSticks(int n, int k) {&lt;br&gt;
int[][] dp=new int[n+1][k+1];&lt;br&gt;
return helper(n,k,dp);&lt;br&gt;
}&lt;br&gt;
public static int helper(int n, int k, int[][] dp){&lt;br&gt;
int result=0;&lt;br&gt;
if(n==k){&lt;br&gt;
return 1;&lt;br&gt;
}&lt;br&gt;
if(k==0){&lt;br&gt;
return 0;&lt;br&gt;
}&lt;br&gt;
if(dp[n][k]==0){&lt;br&gt;
dp[n][k]=(int)((1L * helper(n - 1, k - 1,dp) + 1L * helper(n - 1, k,dp) * (n - 1)) % mod);&lt;br&gt;
}&lt;br&gt;
return dp[n][k];&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Note:&lt;br&gt;
For more examples, just visit leetcode and practice..!&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to mock environment variables with Jest</title>
      <author>Alessio Michelini</author>
      <pubDate>Thu, 25 Nov 2021 13:31:41 +0000</pubDate>
      <link>https://dev.to/darkmavis1980/how-to-mock-environmental-variables-with-jest-2j3c</link>
      <guid>https://dev.to/darkmavis1980/how-to-mock-environmental-variables-with-jest-2j3c</guid>
      <description>&lt;p&gt;If you use Jest as your trusty testing framework for your Node.js application, you probably ended up in the situation where the code you are trying to test, uses environmental variables that you access with &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The simplest way to do is to create a file, to be called &lt;code&gt;setEnvVars.js&lt;/code&gt;, and to populate it with the env variables you need, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .jest/setEnvVars.js&lt;/span&gt;
&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SOME_VAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;something&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shh-do-not-tell-to-anyone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// etc...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What I consider a good practice is also to place this file under a &lt;code&gt;.jest&lt;/code&gt; folder, so we know that everything inside that, is related to Jest.&lt;/p&gt;

&lt;p&gt;And just to make it more clear, you should have a file structure similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|-- .jest
|   `-- setEnvVars.js
|-- jest.config.js
|-- package-lock.json
|-- package.json
|-- server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the next thing to set up is to update your &lt;code&gt;jest.config.js&lt;/code&gt; and tell it to use that file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// jest.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;setupFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;rootDir&amp;gt;/.jest/setEnvVars.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="c1"&gt;// ... other configurations&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! Now when you will run the tests, the code will able to access to those mock environmental variables.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>unittest</category>
      <category>jest</category>
    </item>
    <item>
      <title>#Multithreading in Java</title>
      <author>ritwin59</author>
      <pubDate>Thu, 25 Nov 2021 13:25:14 +0000</pubDate>
      <link>https://dev.to/ritwin59/multithreading-in-java-5265</link>
      <guid>https://dev.to/ritwin59/multithreading-in-java-5265</guid>
      <description>&lt;h2&gt;
  &lt;a href="#multithreading"&gt;
  &lt;/a&gt;
  Multithreading
&lt;/h2&gt;

&lt;p&gt;Multithreading is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of CPU. Each part of such program is called a thread. So, threads are light-weight processes within a process.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#threads-can-be-created-by-using-two-mechanisms-"&gt;
  &lt;/a&gt;
  Threads can be created by using two mechanisms :
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1.Extending the Thread class &lt;br&gt;
2.Implementing the Runnable Interface&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
&lt;br&gt;
  &lt;a href="#extending-the-thread-class"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Extending the Thread class&lt;br&gt;
&lt;/h1&gt;

&lt;p&gt;Thread creation by extending the Thread class&lt;br&gt;
We create a class that extends the java.lang.Thread class. This class overrides the run() method available in the Thread class. A thread begins its life inside run() method. We create an object of our new class and call start() method to start the execution of a thread. Start() invokes the run() method on the Thread object.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h1&gt;

&lt;p&gt;class MultithreadingDemo extends Thread {&lt;br&gt;
    public void run()&lt;br&gt;
    {&lt;br&gt;
        try {&lt;br&gt;
            // Displaying the thread that is running&lt;br&gt;
            System.out.println(&lt;br&gt;
                "Thread " + Thread.currentThread().getId()&lt;br&gt;
                + " is running");&lt;br&gt;
        }&lt;br&gt;
        catch (Exception e) {&lt;br&gt;
            // Throwing an exception&lt;br&gt;
            System.out.println("Exception is caught");&lt;br&gt;
        }&lt;br&gt;
    }&lt;br&gt;
} &lt;br&gt;
// Main Class&lt;br&gt;
public class Multithread {&lt;br&gt;
    public static void main(String[] args)&lt;br&gt;
    {&lt;br&gt;
        int n = 8; // Number of threads&lt;br&gt;
        for (int i = 0; i &amp;lt; n; i++) {&lt;br&gt;
            MultithreadingDemo object&lt;br&gt;
                = new MultithreadingDemo();&lt;br&gt;
            object.start();&lt;br&gt;
        }&lt;br&gt;
    }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;p&gt;Thread 15 is running&lt;br&gt;
Thread 14 is running&lt;br&gt;
Thread 16 is running&lt;br&gt;
Thread 12 is running&lt;br&gt;
Thread 11 is running&lt;br&gt;
Thread 13 is running&lt;br&gt;
Thread 18 is running&lt;br&gt;
Thread 17 is running&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementing-the-runnable-interface"&gt;
  &lt;/a&gt;
  Implementing the Runnable Interface
&lt;/h1&gt;

&lt;p&gt;Thread creation by implementing the Runnable Interface&lt;br&gt;
We create a new class which implements java.lang.Runnable interface and override run() method. Then we instantiate a Thread object and call start() method on this object. &lt;/p&gt;

&lt;p&gt;// Java code for thread creation by implementing&lt;br&gt;
// the Runnable Interface&lt;br&gt;
class MultithreadingDemo implements Runnable {&lt;br&gt;
    public void run()&lt;br&gt;
    {&lt;br&gt;
        try {&lt;br&gt;
            // Displaying the thread that is running&lt;br&gt;
            System.out.println(&lt;br&gt;
                "Thread " + Thread.currentThread().getId()&lt;br&gt;
                + " is running");&lt;br&gt;
        }&lt;br&gt;
        catch (Exception e) {&lt;br&gt;
            // Throwing an exception&lt;br&gt;
            System.out.println("Exception is caught");&lt;br&gt;
        }&lt;br&gt;
    }&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;// Main Class&lt;br&gt;
class Multithread {&lt;br&gt;
    public static void main(String[] args)&lt;br&gt;
    {&lt;br&gt;
        int n = 8; // Number of threads&lt;br&gt;
        for (int i = 0; i &amp;lt; n; i++) {&lt;br&gt;
            Thread object&lt;br&gt;
                = new Thread(new MultithreadingDemo());&lt;br&gt;
            object.start();&lt;br&gt;
        }&lt;br&gt;
    }&lt;br&gt;
}&lt;br&gt;
Output&lt;/p&gt;

&lt;p&gt;Thread 13 is running&lt;br&gt;
Thread 11 is running&lt;br&gt;
Thread 12 is running&lt;br&gt;
Thread 15 is running&lt;br&gt;
Thread 14 is running&lt;br&gt;
Thread 18 is running&lt;br&gt;
Thread 17 is running&lt;br&gt;
Thread 16 is running&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thread-class-vs-runnable-interface"&gt;
  &lt;/a&gt;
  Thread Class vs Runnable Interface
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;If we extend the Thread class, our class cannot extend any other class because Java doesn’t support multiple inheritance. But, if we implement the Runnable interface, our class can still extend other base classes.&lt;/li&gt;
&lt;li&gt;We can achieve basic functionality of a thread by extending Thread class because it provides some inbuilt methods like yield(), interrupt() etc. that are not available in Runnable interface.&lt;/li&gt;
&lt;li&gt;Using runnable will give you an object that can be shared amongst multiple threads. &lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>multithreading</category>
    </item>
    <item>
      <title>React: different types of state management</title>
      <author>Michael Gustus</author>
      <pubDate>Thu, 25 Nov 2021 13:15:50 +0000</pubDate>
      <link>https://dev.to/mgustus/react-different-types-of-state-management-3m6n</link>
      <guid>https://dev.to/mgustus/react-different-types-of-state-management-3m6n</guid>
      <description>&lt;p&gt;This is my categorization of different types of state management in React.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-react-context"&gt;
  &lt;/a&gt;
  1. React context
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This is a &lt;a href="https://reactjs.org/docs/context.html"&gt;native mechanism&lt;/a&gt; in react core.&lt;/em&gt; &lt;br&gt;
Actually context is not exactly state management tool, it is kind of Dependency Injection. Context provides a way to pass data through the component tree without having to pass props down manually at every level. It is best used when you have some value that is rarely changed and you want to make it accessible to a portion of your React component tree (without passing that value down as props through each level of components).&lt;/p&gt;

&lt;p&gt;Issues: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making a change in some inner param of the state object that is stored in a context will rerender all the consumers of this context (even if they don't use this specific param). So context can only store a single value, not an indefinite set of values each with its own consumers.&lt;/li&gt;
&lt;li&gt;Context hell - using this approach as a state management tool will lead us to many nested contexts in different places in react tree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-global-store"&gt;
  &lt;/a&gt;
  2. Global store
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://redux.js.org/"&gt;&lt;em&gt;redux&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://zustand.surge.sh/"&gt;&lt;em&gt;zustand&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
Centralized application state and logic.&lt;/p&gt;

&lt;p&gt;Notes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;redux: One of the most known state management solutions in JS world. Lots of boilerplate - actions, reducers, selectors.&lt;/li&gt;
&lt;li&gt;zustand: A small, fast and scalable state-management solution using simplified flux principles. It requires much less boilerplate code due to its opinionated approach. In zustand the store doesn't have to be global, but still..&lt;/li&gt;
&lt;li&gt;Complicated store mutation. Need to create immutable path when modifying some nested state. Using utils like &lt;em&gt;immer or immutable&lt;/em&gt; may help to manipulate the store.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-magic-store"&gt;
  &lt;/a&gt;
  3. Magic store
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://mobx.js.org/"&gt;&lt;em&gt;MobX&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://github.com/pmndrs/valtio"&gt;&lt;em&gt;Valtio&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
This state management solution wraps the store params in a proxy. So you deal with a proxy and not with the object directly. You perform some simple operation and &lt;strong&gt;&lt;em&gt;magically&lt;/em&gt;&lt;/strong&gt; behind the scene, the shared state changes.&lt;/p&gt;

&lt;p&gt;Notes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need to be aware of the fact that it is proxy and of the specific rules of this kind of state management.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-atomic-model"&gt;
  &lt;/a&gt;
  4. Atomic model
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://recoiljs.org/"&gt;&lt;em&gt;recoil&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://jotai.org/"&gt;&lt;em&gt;jotai&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
A bottom-up approach to React state management with an atomic model. Atoms are units of state. They're updateable and subscribable. One can build state by combining atoms and renders are optimized based on atom dependency. This solves the extra re-render issue of React context and eliminates the need for the memoization technique.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A boilerplate-free API where shared state has the same simple get/set interface as React local state (useState/useAtom).&lt;/li&gt;
&lt;li&gt;recoil is not production ready yet (11/2021).&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#network-request-global-cache"&gt;
  &lt;/a&gt;
  Network request global cache
&lt;/h2&gt;

&lt;p&gt;These libraries help to perform network requests in React. One of the main features of these libraries is to keep the requests in cache. So next time you perform the same request, you will get a cached response. It doesn't metter where in the react tree you perform this request, the cache is global and behaves like a global state management solution for network requests.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-rest-cache"&gt;
  &lt;/a&gt;
  5. REST cache
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://react-query.tanstack.com/"&gt;&lt;em&gt;react-query&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://swr.vercel.app/"&gt;&lt;em&gt;swr&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
These libraries have many features based on their sophisticated cache mechanism like: Request Retry, Revalidation, Polling, Prefetching and more.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SWR (stale-while-revalidate) is a strategy to first return the data from cache (stale), then send the fetch request (revalidate), and finally come with the up-to-date data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-graphql-cache"&gt;
  &lt;/a&gt;
  6. Graphql cache
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.apollographql.com/"&gt;&lt;em&gt;apollo&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://formidable.com/open-source/urql/"&gt;&lt;em&gt;urql&lt;/em&gt;&lt;/a&gt;&lt;br&gt;
These are graphql clients that keep cache of graphql network requests. Their behavior is similar to the REST cache solutions from above. The cache is global and behaves like a global state management solution for graphql requests.&lt;/p&gt;

&lt;p&gt;Notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apollo uses normalized cache which reduces data redundancy but is more complicated.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;P.S. In my latest project I chose jotai, react-query and apollo.&lt;br&gt;
&lt;code&gt;:)&lt;/code&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>apollo</category>
      <category>jotai</category>
    </item>
    <item>
      <title>Automatic scrolling for Chat app in 1 line of code + React hook</title>
      <author>Deepankar Bhade</author>
      <pubDate>Thu, 25 Nov 2021 13:10:18 +0000</pubDate>
      <link>https://dev.to/deepcodes/automatic-scrolling-for-chat-app-in-1-line-of-code-react-hook-3lm1</link>
      <guid>https://dev.to/deepcodes/automatic-scrolling-for-chat-app-in-1-line-of-code-react-hook-3lm1</guid>
      <description>&lt;p&gt;While using WhatsApp, twitch, or any social media application your chat feed automatically scrolls to the bottom when a new message is sent/received. While building an application with a chat feature this is definitely an important feature you should ship.&lt;/p&gt;

&lt;p&gt;If you don't understand what I am actually talking about try out this little demo I made. Type a message and press enter, as you send a new message it goes out of view and you have to scroll to view it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to try this interactive demo live head over to my &lt;a href="https://dpnkr.in/blog/scroll-chat-react"&gt;original blog post&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dExqtM2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rmyzcxzbbw7922zc731.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dExqtM2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rmyzcxzbbw7922zc731.gif" alt="Chat before" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's actually pretty simple to fix this, firstly we should know the container element which is wrapping all the chats. Then select the element, get the height using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight"&gt;&lt;code&gt;scrollHeight&lt;/code&gt;&lt;/a&gt; then set the element's vertical scroll height using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop"&gt;&lt;code&gt;scrollTop&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chat-feed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// id of the chat container ---------- ^^^&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the new demo with this thing implemented. Now it scrolls to the bottom when a new message comes in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VvBBh59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52wsl5cfdi57p654gop7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VvBBh59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52wsl5cfdi57p654gop7.gif" alt="Chat After" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now coming to the react implementation, we will use &lt;code&gt;useRef&lt;/code&gt; &amp;amp; &lt;code&gt;useEffect&lt;/code&gt; to get access to the element and handle the side effect.&lt;/p&gt;

&lt;p&gt;This would take &lt;code&gt;dep&lt;/code&gt; as an argument which will be the dependency for the &lt;code&gt;useEffect&lt;/code&gt; and returns a &lt;code&gt;ref&lt;/code&gt; which we will pass to the chat container element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useChatScroll&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dep&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dep&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usage of the above hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Chat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMessages&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useChatScroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Chat feed here */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Continuous Integration for Monorepos
</title>
      <author>Tomas Fernandez</author>
      <pubDate>Thu, 25 Nov 2021 13:08:18 +0000</pubDate>
      <link>https://dev.to/semaphore/continuous-integration-for-monorepos-28e3</link>
      <guid>https://dev.to/semaphore/continuous-integration-for-monorepos-28e3</guid>
      <description>&lt;p&gt;&lt;em&gt;Monorepos are highly-active code repositories spanning many projects. These can test the limits of conventional continuous integration. Semaphore is the only CI/CD around with easy out-of-the-box support for monorepos.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monorepo-workflows-should-be-easy-to-set-up"&gt;
  &lt;/a&gt;
  Monorepo workflows should be easy to set up
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://semaphoreci.com/blog/what-is-monorepo"&gt;monorepo&lt;/a&gt; is a repository holding many projects, each maintained by a separate developer or team. Most times, these code repositories, while independent, will share a common &lt;a href="https://semaphoreci.com/cicd"&gt;CI/CD workflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Monorepos workflows present their own set of challenges. By default, a CI/CD &lt;a href="https://semaphoreci.com/blog/cicd-pipeline"&gt;pipeline&lt;/a&gt; will run from beginning to end on every commit. This is expected. After all, that’s the &lt;em&gt;continuous&lt;/em&gt; in &lt;a href="https://semaphoreci.com/continuous-integration"&gt;continuous integration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acMXJ_IK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2akqqhohbob5p5niu6p6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acMXJ_IK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2akqqhohbob5p5niu6p6.png" alt="Image description" width="659" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running every job in the pipeline is perfectly logical on single-project repositories. But monorepos see a lot more activity than usual. Even the smallest change will re-run the entire pipeline — &lt;strong&gt;it is time-consuming and needlessly expensive&lt;/strong&gt;.  It just doesn’t make sense.&lt;/p&gt;

&lt;p&gt;Semaphore &lt;a href="https://semaphoreci.com/product/whats-new-2021"&gt;recently introduced&lt;/a&gt; the &lt;code&gt;change_in&lt;/code&gt; function. Thus adding the capability for change-based execution. With change criteria, you can skip jobs when the relevant code has not been updated. This will let you ignore parts of the pipeline you’re not interested in re-running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPnnOokC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtwl8uz1rm92qaa89ibg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPnnOokC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtwl8uz1rm92qaa89ibg.png" alt="Image description" width="731" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-set-up-monorepo-workflows"&gt;
  &lt;/a&gt;
  How to set up monorepo workflows
&lt;/h2&gt;

&lt;p&gt;In this section, we’ll set up a monorepo pipeline. We’ll use the &lt;a href="https://github.com/semaphoreci-demos/semaphore-demo-monorepo"&gt;semaphore-demo-monorepo&lt;/a&gt; project as a starting point, but you can adapt these steps to any CI/CD workflow on Semaphore.&lt;/p&gt;

&lt;p&gt;To follow this guide, you’ll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A GitHub account.&lt;/li&gt;
&lt;li&gt;  A &lt;a href="https://semaphoreci.com"&gt;Semaphore&lt;/a&gt; account. Click on &lt;strong&gt;Sign up with GitHub&lt;/strong&gt; to create a free trial account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go ahead and fork the &lt;a href="https://github.com/semaphoreci-demos/semaphore-demo-monorepo"&gt;repository&lt;/a&gt; on GitHub. It contains three projects, each one in a separate folder:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;/service/billing&lt;/code&gt;: written in Go, calculates user payments.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;/service/user&lt;/code&gt;: a Ruby-based user registration service. Exposes a HTTP REST endpoint.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;/service/ui&lt;/code&gt;: which is a web UI component. Written in Elixir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these parts are meant to work together, but each one may be maintained by a separate team and written in a different language.&lt;/p&gt;

&lt;p&gt;Next, log in with your Semaphore account and click on &lt;strong&gt;Create New&lt;/strong&gt; on the upper left corner:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lYSWp_JP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx27q9oxixkas011xs7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lYSWp_JP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx27q9oxixkas011xs7d.png" alt="Image description" width="679" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, choose the repository you forked.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7J8_mii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4rystmpg9rzh701b2pp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7J8_mii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4rystmpg9rzh701b2pp.png" alt="Image description" width="880" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add people to the project at this point. When you’re done, click &lt;strong&gt;Continue&lt;/strong&gt; and select “I want to configure this project from scratch.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qpEiOiks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/toomn8uzgqi08r5pdlxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpEiOiks--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/toomn8uzgqi08r5pdlxl.png" alt="Image description" width="762" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll start with the billing application. Find the Go starter workflow and click on customize:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_K36jqNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mufpxtmv1b4qv4zsufm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_K36jqNc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mufpxtmv1b4qv4zsufm.png" alt="Image description" width="718" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have to modify the job a bit before it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; The billing app uses Go version 1.12. So, change the first line to &lt;code&gt;sem-version go 1.12&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; The code is located in the &lt;code&gt;services/billing&lt;/code&gt; folder, add &lt;code&gt;cd services/billing&lt;/code&gt; after &lt;code&gt;checkout&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The full job should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sem-version go 1.12
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GO111MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GOPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/go
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/semaphore/go/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
checkout
&lt;span class="nb"&gt;cd &lt;/span&gt;services/billing
go get ./...
go &lt;span class="nb"&gt;test&lt;/span&gt; ./...
go build &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFG7xwo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g1dfmath8tinvkh80fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFG7xwo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g1dfmath8tinvkh80fs.png" alt="Image description" width="749" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now click on &lt;strong&gt;Run the workflow&lt;/strong&gt;. Type “master” in Branch and click on &lt;strong&gt;Start&lt;/strong&gt;. Choosing the right branch matters because it affects how commits are calculated. We’ll talk about that in a bit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8las5Ejg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/475q2ojohys5j35jcsmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8las5Ejg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/475q2ojohys5j35jcsmj.png" alt="Image description" width="639" height="363"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Semaphore should start building and testing the application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofXJdNhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjo9z2a5bojlibednupc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofXJdNhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjo9z2a5bojlibednupc.png" alt="Image description" width="710" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s add a second application in the pipeline. Open editor by clicking on &lt;strong&gt;Edit Workflow&lt;/strong&gt; on the upper right corner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jx6VXi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0trwt7a1zy2v42oxzb7l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jx6VXi_D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0trwt7a1zy2v42oxzb7l.png" alt="Image description" width="664" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add a new block. Then, add the commands to install and test a Ruby application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sem-version ruby 2.5
checkout
&lt;span class="nb"&gt;cd &lt;/span&gt;services/users
cache restore
bundle &lt;span class="nb"&gt;install
&lt;/span&gt;cache store
bundle &lt;span class="nb"&gt;exec &lt;/span&gt;ruby test.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;strong&gt;uncheck&lt;/strong&gt; all the checkboxes under Dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmVNfclT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g69lensdqmh1p4fb7yv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmVNfclT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5g69lensdqmh1p4fb7yv.png" alt="Image description" width="706" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add a third block to test the UI service. The following installs and tests the app. Remember to &lt;strong&gt;uncheck&lt;/strong&gt; all block dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;checkout
&lt;span class="nb"&gt;cd &lt;/span&gt;services/ui
sem-version elixir 1.9
cache restore
mix local.hex &lt;span class="nt"&gt;--force&lt;/span&gt;
mix local.rebar &lt;span class="nt"&gt;--force&lt;/span&gt;
mix deps.get
mix deps.compile
cache store
mix &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ukzfi4Fz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3ok66ramfvbvbgsuwdd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ukzfi4Fz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3ok66ramfvbvbgsuwdd.png" alt="Image description" width="701" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, can you guess what happens if we change a file inside the &lt;code&gt;/services/ui&lt;/code&gt; folder?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iEfz4o7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dkua8d2t17cyf56qqaf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iEfz4o7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dkua8d2t17cyf56qqaf.png" alt="Image description" width="226" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeah, despite only one of the projects has changed, all the blocks are running. This is… not optimal. For a big monorepo with hundreds of projects, you can imagine &lt;strong&gt;that’s a lot of wasted CPU cycles&lt;/strong&gt;. The good news is that this is a perfect fit for trying out change-based execution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changebased-execution-with-changein"&gt;
  &lt;/a&gt;
  Change-based execution with change_in
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;change_in&lt;/code&gt; function calculates if recent commits have changed code in a given file or folder. We must call this function at the block level. If it detects changes, then all the jobs in the block will be executed. Otherwise, the whole block is skipped. &lt;code&gt;change_in&lt;/code&gt; allows us to tie a specific block to parts of the repository.&lt;/p&gt;

&lt;p&gt;We can call the function from any block by opening the &lt;strong&gt;Skip/Run Conditions&lt;/strong&gt; section and enabling the option: “Run this block when conditions are met.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a-61DhbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2qkf6ye29bqmiiizcw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a-61DhbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2qkf6ye29bqmiiizcw0.png" alt="Image description" width="682" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The basic usage of the function is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;change_in('/web/')&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will run the block if any files inside the &lt;code&gt;web&lt;/code&gt; folder change. Absolute paths start with &lt;code&gt;/&lt;/code&gt; and reference the root of the repository. Relative paths don’t start with a slash, they are relative to the pipeline file, which is located inside the &lt;code&gt;/.semaphore&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;We can also target a specific file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;change_in('../package-lock.json')&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wildcards are supported too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;change_in('/**/package.json')&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, you're not limited to monitoring one path, you may define lists of files or folders. This block, for instance, will run when the &lt;code&gt;/web/&lt;/code&gt; folder &lt;strong&gt;or&lt;/strong&gt; the &lt;code&gt;/manifests/kubernetes.yml&lt;/code&gt; file changes (both simultaneously changing work too):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;change_in(&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;'/web/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'/manifests/kubernetes.yml'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function can take a second optional argument to change its behavior. For instance, if your repository default branch is &lt;code&gt;main&lt;/code&gt; instead of &lt;code&gt;master&lt;/code&gt; (&lt;a href="https://github.com/github/renaming"&gt;GitHub’s new default&lt;/a&gt;), you’ll need to add &lt;code&gt;default_branch: 'main'&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;change_in('/web/',&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;default_branch:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'main'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Semaphore will re-run all jobs when we update the pipeline. We can disable this behavior with &lt;code&gt;pipeline_file: 'ignore'&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;change_in('/web/',&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;pipeline_file:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'ignore'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another useful option is &lt;code&gt;exclude&lt;/code&gt;, which lets us ignore files or folders. This option also supports wildcards. For example, to ignore all Markdown files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;change_in('/web/',&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;exclude:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'/web/**/*.md'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see the rest of the options, check the &lt;a href="https://docs.semaphoreci.com/reference/conditions-reference/"&gt;conditions YAML reference&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#speeding-up-pipelines-with-changein"&gt;
  &lt;/a&gt;
  Speeding up pipelines with change_in
&lt;/h2&gt;

&lt;p&gt;Let’s see how &lt;code&gt;change_in&lt;/code&gt; can help us speed up the pipeline.&lt;/p&gt;

&lt;p&gt;Open the workflow editor again. Pick one of the blocks and open the &lt;strong&gt;Skip/Run conditions&lt;/strong&gt; section. Add some change criteria:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;change_in('/services/billing')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repeat the procedure for the rest of the blocks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;change_in('/services/ui')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;change_in('/services/users')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the pipeline again. The first thing you’ll notice is that there's a new initialization step. Here, Semaphore is calculating the differences to decide what blocks should run. You can check the log to see what is happening behind the scenes.&lt;/p&gt;

&lt;p&gt;Once the workflow is ready, Semaphore will start running all jobs one more time (this happens because we didn’t set &lt;code&gt;pipeline_file: 'ignore'&lt;/code&gt;). The interesting bit comes later, when we change a file in one of the applications. This is what happens:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mz_7OoFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wms6yojr6fsv78dq27m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mz_7OoFz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wms6yojr6fsv78dq27m.png" alt="Image description" width="253" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you guess which application I changed? Yes, that’s right. I added a file in the billing app. As a result, thanks to &lt;code&gt;change_in&lt;/code&gt;, the rest of the blocks have been skipped because they didn't meet the change conditions.&lt;/p&gt;

&lt;p&gt;If we make a change outside any of the monitored folders, then all the blocks are skipped and the pipeline completes in just a few seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lxTNJfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nivwlp53hxdv66vvowo3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lxTNJfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nivwlp53hxdv66vvowo3.png" alt="Image description" width="257" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calculating-commit-ranges"&gt;
  &lt;/a&gt;
  Calculating commit ranges
&lt;/h2&gt;

&lt;p&gt;To understand what blocks will run, we must recognize how &lt;code&gt;change_in&lt;/code&gt; calculates the changed files in recent commits. The commit range varies depending on if you’re working on &lt;code&gt;main/master&lt;/code&gt; or a topic branch.&lt;/p&gt;

&lt;p&gt;For the main branch, Semaphore compares the changes in all the commits for the push, then skips the &lt;code&gt;change_in&lt;/code&gt; blocks that do not have at least one match.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Kp--MHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a6j9tr41erw9yenuuzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Kp--MHQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a6j9tr41erw9yenuuzk.png" alt="Image description" width="798" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Semaphore takes a broader criteria for branches. The commit range goes from the point of the first commit that branched off the mainline to the branch’s head. This means that Semaphore may re-run blocks even on commits that seemingly don’t match the change criteria.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zRtc2y9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccrzqmhgcmrf13y60v1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zRtc2y9g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccrzqmhgcmrf13y60v1f.png" alt="Image description" width="846" height="817"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pull requests behave similarly. The commit range is defined from the first commit that branched off the branch targeted for merging to the head of the branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5Z77ZK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01papaksgagua3wcod2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5Z77ZK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01papaksgagua3wcod2j.png" alt="Image description" width="830" height="817"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changebased-automatic-promotions"&gt;
  &lt;/a&gt;
  Change-based automatic promotions
&lt;/h2&gt;

&lt;p&gt;We can also use &lt;code&gt;change_in&lt;/code&gt; on &lt;a href="https://docs.semaphoreci.com/guided-tour/deploying-with-promotions/"&gt;autopromotions&lt;/a&gt;, which let us automatically start additional pipelines on certain conditions.&lt;/p&gt;

&lt;p&gt;To create a new pipeline, open the workflow editor once more and click on &lt;strong&gt;Add First Promotion&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBHEG-yI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9iaf74ugzp4im7imw5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBHEG-yI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9iaf74ugzp4im7imw5t.png" alt="Image description" width="507" height="372"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check &lt;strong&gt;Enable automatic promotion&lt;/strong&gt;. You should see an example snippet you can use as a starting point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQi3R8mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1cf743hroscd5fm9w6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQi3R8mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1cf743hroscd5fm9w6z.png" alt="Image description" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can combine &lt;code&gt;change_in&lt;/code&gt; and &lt;code&gt;branch = 'master' AND result = 'passed'&lt;/code&gt; to start the pipeline when all jobs pass on the default branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;change_in('/services/billing/')&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;branch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'master'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;AND&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'passed'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JIUn130k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt2vq9abllirs81kt1p2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JIUn130k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt2vq9abllirs81kt1p2.png" alt="Image description" width="859" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once done, run the workflow to save the changes. From now on, when you make a change to the billing app, the new pipeline will start automatically if all tests pass on &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lq2Y2Qxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppdecyaq9ex77pf472tw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lq2Y2Qxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppdecyaq9ex77pf472tw.png" alt="Image description" width="832" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-for-using-raw-changein-endraw-effectively"&gt;
  &lt;/a&gt;
  Tips for using &lt;code&gt;change_in&lt;/code&gt; effectively
&lt;/h2&gt;

&lt;p&gt;Scaling up large monorepos with &lt;code&gt;change_in&lt;/code&gt; is easier if you follow these tips for organizing your code and pipelines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Define a unified folder organization, so you can use clean change conditions.&lt;/li&gt;
&lt;li&gt;  Design your blocks around project folders.&lt;/li&gt;
&lt;li&gt;  When needed, add multiple files and folders to &lt;code&gt;change_in&lt;/code&gt;. Use this to rebuild all the connected project components within a monorepo.&lt;/li&gt;
&lt;li&gt;  Keep branches small, and merge them frequently to cut build times.&lt;/li&gt;
&lt;li&gt;  Use &lt;code&gt;exclude&lt;/code&gt; and wildcards to ignore files that are not relevant, such as documentation or READMEs.&lt;/li&gt;
&lt;li&gt;  Use &lt;code&gt;change_in&lt;/code&gt; in auto-promotions to selectively trigger continuous delivery or deployment pipelines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#monorepo-workflows-got-a-lot-faster"&gt;
  &lt;/a&gt;
  Monorepo workflows got a lot faster
&lt;/h2&gt;

&lt;p&gt;We’ve learned how to best take advantage of Semaphore’s features to run CI/CD pipelines on monorepos. With the &lt;code&gt;change_in&lt;/code&gt; function, you may design faster pipelines that don’t waste time or money re-building already-tested code.&lt;/p&gt;

&lt;p&gt;Read more about monorepo CI/CD workflows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/what-is-monorepo"&gt;What is monorepo?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.semaphoreci.com/essentials/building-monorepo-projects/"&gt;Monorepo workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.semaphoreci.com/reference/conditions-reference/#change_in"&gt;Change_in reference page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cicd</category>
      <category>monorepo</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Amazon Integration: Benefits, Pitfalls, and Solution to Implement It</title>
      <author>Khrystyna Oliinyk</author>
      <pubDate>Thu, 25 Nov 2021 13:04:34 +0000</pubDate>
      <link>https://dev.to/khrystyna_oliinyk_97b06d1/amazon-integration-benefits-pitfalls-and-solution-to-implement-it-1e2o</link>
      <guid>https://dev.to/khrystyna_oliinyk_97b06d1/amazon-integration-benefits-pitfalls-and-solution-to-implement-it-1e2o</guid>
      <description>&lt;p&gt;For any SaaS App provider, the implementation of Amazon integration is of vital importance. Such a connection opens the doors to a wide range of online store owners. Thus, you can expand your market share and increase your customer base dramatically.&lt;/p&gt;

&lt;p&gt;In this article, you will find out more about Amazon integration, the pitfalls of integration development and the solution to easily integrate with this marketplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-is-amazon-integration"&gt;
  &lt;/a&gt;
  What Exactly Is Amazon Integration
&lt;/h2&gt;

&lt;p&gt;The process of building a connection between any SaaS software or application and Amazon is known as &lt;strong&gt;Amazon integration&lt;/strong&gt;. It allows accessing and transferring data between Amazon and the particular SaaS software. By connecting your SaaS solution with Amazon, you'll be able to effortlessly manage all of the data related to products, customers, orders, baskets, and any other important data that online retailers have.&lt;/p&gt;

&lt;p&gt;Amazon is among the most well-known brands in the market, being the world's biggest retailer. Integrating your SaaS software with Amazon allows you to give your customers a variety of features such as order tracking, customer management, shipping management, and so on. Furthermore, with outstanding Amazon integration, merchants will regard you as a valuable business associate, and you'll be able to offer your services within the Amazon marketplace. So whether you operate a multi-channel, shipment, order management, or localization system, you'll need a reliable Amazon integration to gain access to Amazon's network of merchants and eCommerce shops. &lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://www.marketplacepulse.com/amazon/number-of-sellers"&gt;almost 2 million merchants&lt;/a&gt; on Amazon. They are all looking for SaaS software or application vendors who can help them better handle their customer data, improve their processes, and grow their businesses. With the unified API integration solution developed by API2Cart, you can support all Amazon merchants to benefit from using Amazon. It is a win-win scenario for all parties involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-advantages-of-amazon-integration"&gt;
  &lt;/a&gt;
  What Are the Advantages of Amazon Integration
&lt;/h2&gt;

&lt;p&gt;When we speak about Amazon integration, there are indeed many advantages to take into account. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Integrating your SaaS application with Amazon allows you to get all data relating to categories, products, customers, orders, and baskets belonging to online merchants. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With over 16 million Amazon retailers in 2021, you may get into this huge market by having an effective Amazon integration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can improve your performance and increase your market share. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-most-common-amazon-integration-challenges"&gt;
  &lt;/a&gt;
  What Are the Most Common Amazon Integration Challenges
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--teIe0Jcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8tah41l9xqyof5pqgl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--teIe0Jcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8tah41l9xqyof5pqgl1.png" alt="amazon integration challenges" width="750" height="350"&gt;&lt;/a&gt;&lt;br&gt;
Trying to connect your SaaS solution with Amazon without the help of a third-party service is a time-consuming process. SaaS vendors encounter &lt;a href="https://api2cart.com/business/6-difficulties-api-integration-way-avoid/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=amazonkh.ol"&gt;several problems and issues&lt;/a&gt; while attempting to establish an integration with the Amazon platform.&lt;/p&gt;

&lt;p&gt;The integration process is lengthy and necessitates hiring a specialized programmer who can devote around two months to its development. If the programmer is unfamiliar with Amazon's specifics, he might have to invest considerably more time. Moreover, the Amazon API is quite old and necessitates a certain level of expertise and knowledge. Only a CSV or XML file may be used to work with products, shipments, and other data.&lt;/p&gt;

&lt;p&gt;Another issue you may experience during integration is with Amazon's API documentation, which is challenging to use and handle due to the lack of practical examples. Furthermore, Amazon's customer support department is not as fast as needed, so you may have to wait longer than 24 hours to get a problem resolved. Also, you must hire experienced programmers to create and support a seamless Amazon integration. A programmer's annual salary can range from $80k to more than $120k. Additionally, because this is a lengthy process, you will require ongoing assistance after integration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-improve-the-integration-process-significantly"&gt;
  &lt;/a&gt;
  How to Improve the Integration Process Significantly
&lt;/h2&gt;

&lt;p&gt;Luckily, there is a solution that will help you to easily integrate with Amazon and avoid the outlined above challenges. &lt;a href="https://api2cart.com/supported-platforms/amazon-integration/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=amazonkh.ol"&gt;Using API2Cart&lt;/a&gt;, you can integrate with 40+ eCommerce platforms and marketplaces at once. Its unified API works with any kind of app and system. For example, this list includes PIM, order management systems, shipping and supply chain management software, data feed management software, mobile app development, price comparison solutions, chatbots, multi-channel software, email marketing, and a wide range of &lt;a href="https://api2cart.com/use-cases/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=amazonkh.ol"&gt;other industries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We provide simple integration with many platforms at the same time, as well as over 100 API methods for managing data from multiple eCommerce platforms. In addition, we provide flexible pricing options and a &lt;a href="https://app.api2cart.com/#register?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=amazonkh.ol"&gt;30-day free testing period&lt;/a&gt;. Please &lt;a href="https://api2cart.com/contact-us/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=amazonkh.ol"&gt;contact us&lt;/a&gt; if you would like to learn more about our service, or register a free API2Cart account right now and try our unified API solution for free.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
