<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Google Auth/Signin in React Native without Firebase.</title>
      <author>Suyash Vashishtha</author>
      <pubDate>Sun, 19 Dec 2021 22:04:19 +0000</pubDate>
      <link>https://dev.to/suyashvash/google-authsignin-in-react-native-without-firebase-43n</link>
      <guid>https://dev.to/suyashvash/google-authsignin-in-react-native-without-firebase-43n</guid>
      <description>&lt;p&gt;Google auth is one of the most commonly used Authentication methods in Mobile and web apps. Well, it is also a tricky one as compared to normal user email and password auth.&lt;/p&gt;

&lt;p&gt;In this post, we will learn how to integrate Fully working Google auth with React Native (Without Firebase).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-creating-you-react-native-app"&gt;
  &lt;/a&gt;
  1. Creating you React Native app
&lt;/h2&gt;

&lt;p&gt;Let's start by creating our react-native project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx react-native init myapp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now install the &lt;code&gt;@react-native-google-signin/google-signin&lt;/code&gt; module using &lt;code&gt;npm i @react-native-google-signin/google-signin&lt;/code&gt; in your project folder.&lt;/p&gt;

&lt;p&gt;``&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-setting-up-android-environment"&gt;
  &lt;/a&gt;
  2. Setting up Android environment
&lt;/h2&gt;

&lt;p&gt;After installing the required module, let's set up some android files to make it work properly.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update &lt;code&gt;android/build.gradle&lt;/code&gt; with the following configuration:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add &lt;code&gt;classpath 'com.google.gms:google-services:4.3.10'&lt;/code&gt; into your &lt;code&gt;dependencies&lt;/code&gt; in &lt;code&gt;buildscript&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Update &lt;code&gt;android/app/build.gradle&lt;/code&gt; with the following configuration:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add &lt;code&gt;apply plugin: 'com.android.application'&lt;/code&gt; at the top of your build gradle (android/app).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add&lt;br&gt;
&lt;code&gt;implementation 'com.google.android.gms:play-services-auth:20.0.0'&lt;br&gt;
implementation "androidx.browser:browser:1.2.0"&lt;/code&gt; in dependencies in the same.&lt;br&gt;
`&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-importing-module-in-our-app"&gt;
  &lt;/a&gt;
  3. Importing module in our App
&lt;/h2&gt;

&lt;p&gt;Now import the installed module like this &lt;/p&gt;

&lt;pre&gt;
import { GoogleSignin, statusCodes } from '@react-native-google-signin/google-signin';
&lt;/pre&gt;

&lt;p&gt;then after importing the module let's set up a configuration code for our sign-up.&lt;/p&gt;

&lt;pre&gt;
React.useEffect(() =&amp;gt; {
    GoogleSignin.configure({
      webClientId: "Your-web-client-id", 
      offlineAccess: true
    });
  }, [])
&lt;/pre&gt;

&lt;p&gt;Let's not worry about the client Id, for now, we will generate it later on in this tutorial.&lt;/p&gt;

&lt;p&gt;Now after configuration is done, it's time to make our sign-up function using the Google Auth module we just imported.&lt;/p&gt;

&lt;pre&gt;
const GoogleSingUp = async () =&amp;gt; {
    try {
      await GoogleSignin.hasPlayServices();
      await GoogleSignin.signIn().then(result =&amp;gt; { console.log(result) });
    } catch (error) {
      if (error.code === statusCodes.SIGN_IN_CANCELLED) {
        // user cancelled the login flow
        alert('User cancelled the login flow !');
      } else if (error.code === statusCodes.IN_PROGRESS) {
        alert('Signin in progress');
        // operation (f.e. sign in) is in progress already
      } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {
        alert('Google play services not available or outdated !');
        // play services not available or outdated
      } else {
        console.log(error)
      }
    }
  };

&lt;/pre&gt;

&lt;p&gt;Now Connect this function to your button with &lt;code&gt;onPress={GoogleSingUp}&lt;/code&gt; prop &lt;br&gt;
``&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-generating-web-client-id-and-sha1-key-for-sign-up"&gt;
  &lt;/a&gt;
  4. Generating Web client ID and SHA1 key for Sign up
&lt;/h2&gt;

&lt;p&gt;Now, this is the main part where most of the developer gets stuck or get a pretty common and irritating error -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Error: Status{statusCode=DEVELOPER_ERROR}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But what is causing this error?&lt;/strong&gt;. It is quite simple, the &lt;strong&gt;SHA1 key of Debug Keystore&lt;/strong&gt;. Yeah, according to google, you have to put your Release Keystore key in Google Console. But most blogs and articles forget to mention this point which is very important no matter which module you are using.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-generate-release-keystore-and-its-sha"&gt;
  &lt;/a&gt;
  1) Generate Release keystore and it's SHA
&lt;/h3&gt;

&lt;p&gt;Now assuming you have already installed JDK in your system, let's move to generating the Release key. In your android/app run this command in cmd -&lt;/p&gt;

&lt;pre&gt; keytool -genkey -v -keystore my_release_key.keystore -alias my_key_alias -keyalg RSA -keysize 2048 -validity 10000 &lt;/pre&gt;

&lt;p&gt;It will ask for some detail so fill them in carefully and remember the password you entered in it.&lt;/p&gt;

&lt;p&gt;This command will generate a release key in your &lt;code&gt;android/app&lt;/code&gt; directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Now in your &lt;code&gt;android/gradle.properties&lt;/code&gt; add &lt;/p&gt;

&lt;pre&gt;
MYAPP_UPLOAD_STORE_FILE=my_release_key.keystore
MYAPP_UPLOAD_KEY_ALIAS= my_key_alias
MYAPP_UPLOAD_STORE_PASSWORD=yourPassword
MYAPP_UPLOAD_KEY_PASSWORD=yourPassword
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And this in your &lt;code&gt;android/app/build.gradle&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
signingConfigs {
    debug {
        // storeFile file('debug.keystore')
        // storePassword 'android'
        // keyAlias 'androiddebugkey'
        // keyPassword 'android'

         storeFile file(MYAPP_UPLOAD_STORE_FILE)
         storePassword MYAPP_UPLOAD_STORE_PASSWORD
         keyAlias MYAPP_UPLOAD_KEY_ALIAS
         keyPassword MYAPP_UPLOAD_KEY_PASSWORD
    }

    release {
        if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
            storeFile file(MYAPP_UPLOAD_STORE_FILE)
            storePassword MYAPP_UPLOAD_STORE_PASSWORD
            keyAlias MYAPP_UPLOAD_KEY_ALIAS
            keyPassword MYAPP_UPLOAD_KEY_PASSWORD
        }
    }
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Now this will generate release SHA as your debug keystore SHA, so you don't have to worry about that error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now generate release SHA1 using this command in &lt;code&gt;android/app&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;
keytool -list -v -keystore app/my_release_key.keystore -alias my_key_alias
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Copy that SHA1 key and paste it somewhere for the next step.&lt;/strong&gt;&lt;br&gt;
``&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-inserting-sha1-key-in-google-developer-console"&gt;
  &lt;/a&gt;
  2) Inserting SHA1 key in Google Developer Console.
&lt;/h3&gt;

&lt;p&gt;Now, after doing that much hard work, let's do this final part. We have to paste this key into the Google Developer console to tell google about our app and its authentication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After signing up in the Google Developer console or Google cloud platform, head over to the Credential tab. There you will find a button saying "Create Credential", choose OAth Client ID.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mDcDeoWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5ixlwwb19ycyfzc9073.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDcDeoWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p5ixlwwb19ycyfzc9073.JPG" alt="Google console screenshot for oath id creation " width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then choose Application type- Android and enter the package name and then the SHA1 key you copied in the previous step. Hit create and your Android API is ready.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YufkZnke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94jo6jkimbscgqt9hj3b.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YufkZnke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94jo6jkimbscgqt9hj3b.JPG" alt="Android oath creation with SHA1 key" width="850" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now Similarly create an OathID for Web client instead of Android and leave all other fields as it is.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--84snnFyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czmcesm9qw4qftqlo0mi.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--84snnFyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czmcesm9qw4qftqlo0mi.JPG" alt="Web client ID creation" width="854" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now copy the &lt;strong&gt;Web client ID&lt;/strong&gt; from the Oath you just created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8k2V3V6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goz3jc6r7gygl0ar5035.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8k2V3V6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/goz3jc6r7gygl0ar5035.JPG" alt="Copt Web client id" width="520" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it we got the Web client ID we needed for Step 3 above.&lt;br&gt;
&lt;code&gt;&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-finalizing"&gt;
  &lt;/a&gt;
  5. Finalizing
&lt;/h2&gt;

&lt;p&gt;Now paste this Web Client ID into your Google config object in Step 3 above and run the app.&lt;/p&gt;

&lt;p&gt;After pressing the Sign-in Button, A pop-up should appear. Select the account you want to login with and after selecting the account it will return an object containing IdToken and some other stuff.&lt;/p&gt;

&lt;p&gt;If you did everything exactly the same and didn't mess up anywhere, we should see some results like this&lt;/p&gt;

&lt;pre&gt;
{
    "idToken": "Your-google-auth-token",
    "scopes": [
        "https://www.googleapis.com/auth/userinfo.email",
        "https://www.googleapis.com/auth/userinfo.profile"
    ],
    "serverAuthCode": "your-server-auth-code",
    "user": {
        "email": "youremail@gmail.com",
        "familyName": "your-last-name",
        "givenName": "your-first-name",
        "id": "some-id",
        "name": "your-full-name",
        "photo": "a-url-for-profile-photo"
    }
}

&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;And with that, we successfully integrated the Google auth into our React Native app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please leave a comment if you liked the post or just want to add something valuable.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>googlecloud</category>
      <category>react</category>
      <category>appdevelopment</category>
    </item>
    <item>
      <title>Give Us Some JavaScript Challenges!!!</title>
      <author>Akram Bouzoualegh</author>
      <pubDate>Sun, 19 Dec 2021 21:52:26 +0000</pubDate>
      <link>https://dev.to/akrambzgh/give-us-some-javascript-challenges-2pi2</link>
      <guid>https://dev.to/akrambzgh/give-us-some-javascript-challenges-2pi2</guid>
      <description>&lt;p&gt;I Want The Challenges Be For Beginners And Professional. Thank For You!!!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Python Keras | Transformation to multilabel classification</title>
      <author>F1-bot</author>
      <pubDate>Sun, 19 Dec 2021 21:47:39 +0000</pubDate>
      <link>https://dev.to/f1bot/python-keras-transformation-to-multilabel-classification-36go</link>
      <guid>https://dev.to/f1bot/python-keras-transformation-to-multilabel-classification-36go</guid>
      <description>&lt;p&gt;Hi. I'm trying to implement a neural network in Python (Keras) that will predict the probability of multiple outcomes. There is no need to delve into the essence of the classes themselves, so I reduced the code to 3 input and 3 outgoing, in fact there are more of them.&lt;/p&gt;

&lt;p&gt;At the moment I have the following code:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;import keras as k&lt;br&gt;
import pandas as pd&lt;br&gt;
import numpy as np&lt;br&gt;
import matplotlib.pyplot as plt&lt;/p&gt;

&lt;p&gt;data_frame = pd.read_csv("123.csv")&lt;br&gt;
input_names = ["Sex", "Age", "IQ"]&lt;br&gt;
output_names = ["OUTPUT1", "OUTPUT2", "OUTPUT3"]&lt;/p&gt;

&lt;p&gt;raw_input_data = data_frame[input_names]&lt;br&gt;
raw_output_data = data_frame[output_names]&lt;/p&gt;

&lt;p&gt;max_age = 100&lt;br&gt;
encoders = {"Age": lambda age: [age/max_age],&lt;br&gt;
            "Sex": lambda gen: {"male": [0], "female": [1]}.get(gen),&lt;br&gt;
            "IQ": lambda iq_value: [iq_value],&lt;br&gt;
            "OUTPUT1": lambda output1_value: [output1_value],&lt;br&gt;
            "OUTPUT2": lambda output2_value: [output2_value],&lt;br&gt;
            "OUTPUT3": lambda output3_value: [output3_value]}&lt;/p&gt;

&lt;p&gt;def dataframe_to_dict(df):&lt;br&gt;
    result = dict()&lt;br&gt;
    for column in df.columns:&lt;br&gt;
        values = data_frame[column].values&lt;br&gt;
        result[column] = values&lt;br&gt;
    return result&lt;/p&gt;

&lt;p&gt;def make_supervised(df):&lt;br&gt;
    raw_input_data = data_frame[input_names]&lt;br&gt;
    raw_output_data = data_frame[output_names]&lt;br&gt;
    return {"inputs": dataframe_to_dict(raw_input_data),&lt;br&gt;
            "outputs": dataframe_to_dict(raw_output_data)}&lt;/p&gt;

&lt;p&gt;def encode(data):&lt;br&gt;
    vectors = []&lt;br&gt;
    for data_name, data_values in data.items():&lt;br&gt;
        encoded = list(map(encoders[data_name], data_values))&lt;br&gt;
        vectors.append(encoded)&lt;br&gt;
    formatted = []&lt;br&gt;
    for vector_raw in list(zip(*vectors)):&lt;br&gt;
        vector = []&lt;br&gt;
        for element in vector_raw:&lt;br&gt;
            for e in element:&lt;br&gt;
                vector.append(e)&lt;br&gt;
        formatted.append(vector)&lt;br&gt;
    return formatted&lt;/p&gt;

&lt;p&gt;supervised = make_supervised(data_frame)&lt;br&gt;
encoded_inputs = np.array(encode(supervised["inputs"]))&lt;br&gt;
encoded_outputs = np.array(encode(supervised["outputs"]))&lt;/p&gt;

&lt;p&gt;train_x = encoded_inputs[:300]&lt;br&gt;
train_y = encoded_outputs[:300]&lt;/p&gt;

&lt;p&gt;test_x = encoded_inputs[300:]&lt;br&gt;
test_y = encoded_outputs[300:]&lt;/p&gt;

&lt;p&gt;model = k.Sequential()&lt;br&gt;
model.add(k.layers.Dense(units=5, activation="relu"))&lt;br&gt;
model.add(k.layers.Dense(units=1, activation="sigmoid"))&lt;br&gt;
model.compile(loss="mse", optimizer="sgd", metrics=["accuracy"])&lt;/p&gt;

&lt;p&gt;fit_results = model.fit(x=train_x, y=train_y, epochs=100, validation_split=0.2)&lt;/p&gt;

&lt;p&gt;plt.title("Losses train/validation")&lt;br&gt;
plt.plot(fit_results.history["loss"], label="Train")&lt;br&gt;
plt.plot(fit_results.history["val_loss"], label="Validation")&lt;br&gt;
plt.legend()&lt;br&gt;
plt.show()&lt;/p&gt;

&lt;p&gt;plt.title("Accuracies train/validation")&lt;br&gt;
plt.plot(fit_results.history["accuracy"], label="Train")&lt;br&gt;
plt.plot(fit_results.history["val_accuracy"], label="Validation")&lt;br&gt;
plt.legend()&lt;br&gt;
plt.show()&lt;/p&gt;

&lt;p&gt;predicted_test = model.predict(test_x)&lt;br&gt;
real_data = data_frame.iloc[300:][input_names+output_names]&lt;br&gt;
real_data["POUTPUT1", "POUTPUT2", "POUTPUT3"] = predicted_test&lt;br&gt;
print(real_data)&lt;br&gt;
real_data.to_csv('C:/***/133.csv')&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Help implement the output of probabilities for all 3 outcomes [POUTPUT1, POUTPUT2, POUTPUT3] to the console (currently outputs only 1 predicate). Saving to a new table should also save 3 new predicates.&lt;/p&gt;

&lt;p&gt;Visually, I'm counting on this representation of the result&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Va8Qqpm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1s45bga4irwdpcljivu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Va8Qqpm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1s45bga4irwdpcljivu.png" alt="Image description" width="880" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will be very grateful for your help.&lt;/p&gt;

</description>
      <category>help</category>
      <category>python</category>
      <category>keras</category>
    </item>
    <item>
      <title>AWS Connect and Lex the future of customer services</title>
      <author>Augusto Valdivia</author>
      <pubDate>Sun, 19 Dec 2021 21:41:39 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-connect-and-lex-the-future-of-customer-services-2g68</link>
      <guid>https://dev.to/aws-builders/aws-connect-and-lex-the-future-of-customer-services-2g68</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;What is Customer Service?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Customer service is the service provided by companies in order to interact with customers and anticipate the satisfaction of their needs. It is a very effective tool for interacting with customers, providing adequate advice to ensure the correct use of a product or service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What is Amazon connect and Amazon Lex?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Lex&lt;/strong&gt; is a service for building conversational interfaces in any application that uses voice and text. Amazon Lex provides advanced automatic speech recognition deep learning capabilities for converting speech to text and Natural Language Understanding. It also allows you to create applications with highly attractive user experiences. Amazon Lex uses the same deep learning technology that powers &lt;strong&gt;Amazon &lt;em&gt;Alexa.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BY0Zs4H4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bbjd934hj8d13sz0vwt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BY0Zs4H4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bbjd934hj8d13sz0vwt.jpeg" alt="Natural Language Understanding" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Connect&lt;/strong&gt; is a fully cloud-based call center platform that can be configured in minutes, customized, and used by the customer service department. You can accept incoming calls and make outgoing calls, including optional toll-free numbers.&lt;/p&gt;

&lt;p&gt;Let's all go throughout an scenario where Connect and Lex could help your company's contact center.  &lt;/p&gt;

&lt;p&gt;Title: &lt;strong&gt;The unexpected day&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When: &lt;strong&gt;Today&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Perfect world&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Three months prior to this day, it has been predicted that 250 agents were need it to work for 8 hours. The goal is to assist with 2500 possible calls based on historical data. 80% of these calls have to be answered between 20-30 seconds this service level benchmarks can varied depending on the customer service center. If the forecast is in place and all goes as planned the service level agreement will be at 90% which is consider a good day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Chaos&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Like any other type of service, there are always unexpected days where you have no control of what is happening.&lt;/p&gt;

&lt;p&gt;Some the scenarios that frequently affect customer service levels usually are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The volume of calls is higher than forecast. This scenario impacts customer service levels (SL) by not having enough full-time equivalents (FTEs) to help with the number of uncalculated calls.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The volume of calls is lower than forecast. This scenario affects the investment budget by having extra full time equivalent (FTE), Part timers and other agents that were offert over time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A higher number of absenteeism than calculated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extreme weather conditions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Average Transaction Duration (AHT) in a nutshell poor time management during a transaction whether on the phone, responding to an email or in person.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Taking these factors into account, a great solution that could be integrated to help during this unplanned moments is Amazon Lex assistant with a priority level 2.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;what do I mean by this?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It means that when your company is short in agents or some aspect of your WFM team plan did not go as it was planned Amazon Lex could compensate with the required assistant need it during this hard times. &lt;/p&gt;

&lt;p&gt;Although technology offers other options, human interaction is vital to maintaining relationships between clients and servers.&lt;/p&gt;

&lt;p&gt;Here is a list of leading companies that offer a fully cloud-based customer service center - (The order of this list does not represent that one company is better than another in this article).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Connect&lt;/li&gt;
&lt;li&gt;Talkdesk&lt;/li&gt;
&lt;li&gt;Genesys PureCloud&lt;/li&gt;
&lt;li&gt;LiveAgent eTollFree&lt;/li&gt;
&lt;li&gt;Predictive Dialer&lt;/li&gt;
&lt;li&gt;Greenlight CRM&lt;/li&gt;
&lt;li&gt;AuguTech&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-an-amazon-connect-and-amazon-lex"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to create an Amazon Connect and Amazon Lex?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In this demo I am building from start to finish a Amazon Connect contact center with an Amazon Lex assistant.&lt;/p&gt;

&lt;p&gt;Amazon Lex is in charge of directing calls to corresponding groups according to the request.&lt;/p&gt;

&lt;p&gt;Amazon Lex will understand natural language at the time of the request.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to establish Amazon Connect.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6 steps&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select Amazon Connect&lt;/li&gt;
&lt;li&gt;Identity Management&lt;/li&gt;
&lt;li&gt;Administrator&lt;/li&gt;
&lt;li&gt;Telephony Option&lt;/li&gt;
&lt;li&gt;Data Storage&lt;/li&gt;
&lt;li&gt;Review and Create&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Under Customer Engagement Select Amazon Connect&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6H4s3pS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by06gsx5pjgr60dveii2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6H4s3pS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by06gsx5pjgr60dveii2.png" alt="connect" width="222" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Identity Management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this step it is necessary to establish a unique name. Example "Support" - click on next (Next step).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJgDnuVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1esy9kzhl1ibceewaxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJgDnuVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1esy9kzhl1ibceewaxe.png" alt="Image description" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Administrator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enter your personal information or the respective administrator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3FpV8jSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz20js9cvxig5gndj9vb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3FpV8jSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz20js9cvxig5gndj9vb.png" alt="Image description" width="527" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Telephony Options&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You could establish a few type of connections: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;service lines to receive calls only&lt;/li&gt;
&lt;li&gt;service lines to contact clients only&lt;/li&gt;
&lt;li&gt;you can also set the two types of services if the company needs it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QSPsBo6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfzn11iru98ava7u41xx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QSPsBo6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dfzn11iru98ava7u41xx.png" alt="Image description" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Storage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Connect stores all information directly in S3 so you don't need to create a new database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3lZiNGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5fg2ndeni7hfhmi64ly.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3lZiNGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5fg2ndeni7hfhmi64ly.png" alt="Image description" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final step review and create&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZivgbPFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4wy7ocyf760oadkqk7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZivgbPFB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4wy7ocyf760oadkqk7y.png" alt="Image description" width="827" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-lex-bot"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to create a Lex Bot&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Click Amazon Lex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6wuev-AT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts2iwcbv0tbpmtxb4n57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wuev-AT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ts2iwcbv0tbpmtxb4n57.png" alt="Image description" width="216" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazon Lex allows any developer to create chatbots quickly and easily. With Amazon Lex, to get started, you can choose one of the sample bots provided below and build a new custom robot from scratch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create Lex&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select Custom Bot&lt;/li&gt;
&lt;li&gt;Select a name (Bot name)&lt;/li&gt;
&lt;li&gt;Select voice (OutpuT voice)&lt;/li&gt;
&lt;li&gt;Connection time assignment. 5 minutes (Session timeout)&lt;/li&gt;
&lt;li&gt;Data Storage&lt;/li&gt;
&lt;li&gt;Children's Online Privacy Protection Rule ("COPPA") (Important to click yes / yes)&lt;/li&gt;
&lt;li&gt;Create&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bDtd-NE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xecq7r4cbkj5nc0tytv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDtd-NE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xecq7r4cbkj5nc0tytv6.png" alt="Image description" width="880" height="1062"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create an Intent&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Assign a unique name
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xEZbafQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hhic3jh9uwjhhrtzxtj.png" alt="Image description" width="880" height="763"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sample expressions (Sample utterances)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Phrases to use for example. How can I help you?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oWBS-2zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vipykdokfnjy0hgme57r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oWBS-2zf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vipykdokfnjy0hgme57r.png" alt="Image description" width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connet-amp-lex-hand-by-hand"&gt;
  &lt;/a&gt;
  Connet &amp;amp; Lex hand by hand
&lt;/h2&gt;

&lt;p&gt;Now that the two services are established, it is time to bring them together. Now it's time to go back and open Amazon Connect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3RknINYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5haum4wwyarzaf6tjlgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3RknINYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5haum4wwyarzaf6tjlgp.png" alt="Image description" width="879" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next is to choose the phone number from a predetermined list.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Du4nQmLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsi6v2v9j5zlfo60z2yb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Du4nQmLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsi6v2v9j5zlfo60z2yb.png" alt="Image description" width="600" height="137"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how the agent's control panel will look on AWS Connect UI.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ub9cc7tw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0y9bjagg8t2h3gp4tdv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ub9cc7tw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0y9bjagg8t2h3gp4tdv6.png" alt="Image description" width="329" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next go to the configuration guide.&lt;/p&gt;

&lt;p&gt;The first step will be to create a customer service department with a new number. Click Queue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iOaxEo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upybmvjuol4uzmby6ile.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iOaxEo8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/upybmvjuol4uzmby6ile.png" alt="Image description" width="880" height="760"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Complete the department setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDQhf3jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29skx6bmciqo5wrlc8mm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDQhf3jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29skx6bmciqo5wrlc8mm.png" alt="Image description" width="880" height="536"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then Create an agent profile. Click on Users (Routing profile)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0Abe3MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xou32745wnj19g4b4j8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0Abe3MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xou32745wnj19g4b4j8g.png" alt="Image description" width="273" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set up the agent profile.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkDiPD8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoqsvzec9qbn8j4hemgn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkDiPD8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoqsvzec9qbn8j4hemgn.png" alt="Image description" width="304" height="678"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that your agent was created. The agent can be assigned to any department.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6raqwnhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy4i6cn64j8uzwxif763.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6raqwnhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy4i6cn64j8uzwxif763.png" alt="Image description" width="786" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next click on contact flow&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zf5bRRmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfbolvhoh7wdd3iwfsu0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zf5bRRmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfbolvhoh7wdd3iwfsu0.png" alt="Image description" width="272" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assign the contact flow&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OEXLdeNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh4vc7f1trpqw970yvfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OEXLdeNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rh4vc7f1trpqw970yvfx.png" alt="Image description" width="869" height="861"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the flow is created, you would able to see the contact flow connection create for you and ready to use out of the box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75Nrgk0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3t5rh220wp7mhx6cu28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75Nrgk0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u3t5rh220wp7mhx6cu28.png" alt="Image description" width="880" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hanging in there we are almost ready. Next step is to connect Amazon Lex ​​with the phone number created earlier.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Srbc7cIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d00cl4p0ray5xlgb1tmn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Srbc7cIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d00cl4p0ray5xlgb1tmn.png" alt="Image description" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Testing the Amazon Lex&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LDlEWFIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chfr09pmjabzrmf1e6et.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LDlEWFIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chfr09pmjabzrmf1e6et.png" alt="Image description" width="401" height="596"&gt;&lt;/a&gt;&lt;br&gt;
 You could also dial the phone number created earlier and hear the commands that you set during this project creation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this article has shown you a simpler side of how easy it is to create an extraordinary and safe service in a short period of time and at a low price.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>contactcenter</category>
      <category>awsbuilders</category>
      <category>amazonconnectandamazonlex</category>
    </item>
    <item>
      <title>A day in life of a senior (UI) engineer</title>
      <author>Bojan Todorović</author>
      <pubDate>Sun, 19 Dec 2021 21:30:05 +0000</pubDate>
      <link>https://dev.to/bojant987/a-day-in-life-of-a-senior-ui-engineer-5bja</link>
      <guid>https://dev.to/bojant987/a-day-in-life-of-a-senior-ui-engineer-5bja</guid>
      <description>&lt;p&gt;I am a Lead Frontend Engineer in a team of 13 people at &lt;a href="https://en.wikipedia.org/wiki/Redbox"&gt;Redbox&lt;/a&gt;.&lt;br&gt;
Redbox is a streaming service, we offer a wide variety of movies and TV shows on demand. Those of you in US might recognize the name from the red kiosks all around for renting DVDs and Blurays.&lt;/p&gt;

&lt;p&gt;Being a streaming service we have apps covering many TV platforms, Samsung, Vizio, LG, VewD, PS4/5, Xbox, Roku, and more to come.&lt;br&gt;
Our main projects are native Roku app, and web app that supports every other platform besides Roku.&lt;/p&gt;

&lt;p&gt;But business occupies a whole spectrum, from customer facing, to internal tooling. My team has about 10 projects we maintain.&lt;/p&gt;

&lt;p&gt;I often encounter beginners that think seniors write thousands of lines of code daily, deploy it to millions of users, and somehow it is all stable all the time by itself.&lt;br&gt;
I even forget I was once a beginner that thought something similar.&lt;br&gt;
But, those of us in the "trenches" know better.&lt;/p&gt;

&lt;p&gt;So, how do engineers manage to create stable apps people use every day?&lt;br&gt;
How does a day of a senior frontend engineer look like?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-check-email"&gt;
  &lt;/a&gt;
  Step 1: check email
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkkHZzwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh9s0ljual3mcpa5fzog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkkHZzwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh9s0ljual3mcpa5fzog.png" alt="Email inbox" width="223" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, my morning starts simple enough.&lt;br&gt;
I quickly check my email. It takes 5-10 minutes, I got stuff organized in folders so I can make easier and quicker sense of stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-check-metrics"&gt;
  &lt;/a&gt;
  Step 2: check metrics
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZkJhxb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewqvs11j0d44mrl6qwqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZkJhxb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ewqvs11j0d44mrl6qwqw.png" alt="Image description" width="880" height="585"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drShBI7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhsnye8bytq84nn0xdh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drShBI7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhsnye8bytq84nn0xdh1.png" alt="Image description" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I move onto taking a short look at Grafana charts for performance of our backend services that my (frontend) team maintains. These are small in terms of backend code, but important, as they deliver stuff like feature flags and various misc content from CMS(like Terms &amp;amp; Conditions texts).&lt;br&gt;
We do have alerts setup for critical scenarios, but that doesn't excuse not manually checking for trends.&lt;br&gt;
This is what some of these charts may look like, they're fed by &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; into &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt;.&lt;br&gt;
We got error percentage, Redis used memory, event loop lag, and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-check-bug-monitoring"&gt;
  &lt;/a&gt;
  Step 3: check bug monitoring
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-c-epnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsoedvmg6bm13m137jnj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-c-epnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsoedvmg6bm13m137jnj.png" alt="Bugsnag dashboard" width="880" height="263"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3tpEk3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e87bzrcvjmo3ksx95sqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3tpEk3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e87bzrcvjmo3ksx95sqw.png" alt="Bugsnag dashboard" width="880" height="261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, I move onto the bug monitoring.&lt;br&gt;
We use &lt;a href="https://www.bugsnag.com/"&gt;Bugsnag&lt;/a&gt;.&lt;br&gt;
Again, alerts for critical stuff are setup here too, but manual checks are desired.&lt;br&gt;
There's a timeline of bug trends and view of bug events themselves, with all the good stuff like stacktraces, breadcrumbs, custom event data an app might attach, etc.&lt;br&gt;
Unhandled errors are setup so they automatically open bugs in Jira, handled stuff usually not. But, just because an error is handled, does not mean it's okay for it to occur. It might, for example be a symptom of some issues at the backend, like on the data sync side.&lt;/p&gt;

&lt;p&gt;These 2 monitoring steps are not something that all team members are required to do every day, but we encourage everyone to be comfortable with them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-deployments"&gt;
  &lt;/a&gt;
  Step 4: deployments
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P3I4wGzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e3elc0abhrtr79h4u4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P3I4wGzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e3elc0abhrtr79h4u4e.png" alt="Jenkins logo" width="796" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, if there are any deployments to be done, I like to do it now.&lt;br&gt;
This is not something I alone do.&lt;br&gt;
We encourage everyone to be comfortable with the process of deploying to production. As in CI/CD, deployment is something to be seen as (daily) routine, not a big deal.&lt;br&gt;
After merge to master, &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt; builds our code, and when build is done &lt;a href="https://spinnaker.io/"&gt;Spinnaker&lt;/a&gt; automatically deploys it to staging.&lt;br&gt;
Test automation starts running right away on freshly built stage instance, and our manual QA folks are automatically alerted by a webhook in a chat about the new build in staging, so they can pick it up too.&lt;br&gt;
Once everything is greenlighted, production is just a click away in Spinnaker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-code-reviews"&gt;
  &lt;/a&gt;
  Step 5: code reviews
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMA4lmPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljb1lekw1lqfa1w22ilm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMA4lmPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljb1lekw1lqfa1w22ilm.png" alt="Merge requests list" width="880" height="131"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After all these usually short endeavors, I move onto code reviews. Since we have many projects, that are in separate repos, we have a Gitlab CLI utility that lists open merge requests on all our projects.&lt;br&gt;
This is what that looks like, it's a simple script but quite helpful.&lt;br&gt;
We have a rule, code review takes priority if you're in between tasks, and having opened merge request more than a day old is considered a red alert for taking up code review.&lt;br&gt;
This is because we embrace the &lt;a href="https://trunkbaseddevelopment.com/"&gt;trunk based development&lt;/a&gt;, with short lived branches only.&lt;br&gt;
Merge request =&amp;gt; code review =&amp;gt; merge to master/main =&amp;gt; test =&amp;gt; deploy as soon as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-daily-team-meeting"&gt;
  &lt;/a&gt;
  Step 6: daily team meeting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udCeLa5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4954n4xdxlthya01eal5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udCeLa5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4954n4xdxlthya01eal5.jpg" alt="Meeting" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this point, we usually have a short daily meeting.&lt;br&gt;
A short status update and getting rid of various misc doubts and blockers people might have.&lt;br&gt;
We encourage people to also do this by a chat at any time they have doubts about some approach and would like to get a consensus from team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-actual-coding"&gt;
  &lt;/a&gt;
  Step 7: actual coding
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HitL3kFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7z7o2qc2nj4crmi2rjsg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HitL3kFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7z7o2qc2nj4crmi2rjsg.png" alt="Jira board" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And finally, we got to the actual coding.&lt;br&gt;
I'm not going to get into the details of coding, but just an overview of the process.&lt;br&gt;
Every one of our projects has it's own &lt;a href="https://www.atlassian.com/software/jira"&gt;Jira&lt;/a&gt; board, but as a rule we don't venture there for picking up a task, as that would be too chaotic.&lt;br&gt;
We a have a team Jira board, that pulls tickets from all Jira boards of projects our team maintains.&lt;br&gt;
A master board, if you will.&lt;br&gt;
As a developer, this is your taking off point.&lt;br&gt;
In this board, priority is by sorted top to bottom, so developer doesn't have to go "window shopping" for a ticket. First ticket in TO DO column is yours for the taking.&lt;br&gt;
We are doing &lt;a href="https://en.wikipedia.org/wiki/Kanban_(development)"&gt;Kanban&lt;/a&gt; with a backlog, also called &lt;a href="https://www.wrike.com/kanban-guide/faq/what-is-kanplan/"&gt;Kanplan&lt;/a&gt;. &lt;br&gt;
The spin is we embrace what is called &lt;a href="https://hilton.org.uk/blog/zero-bug-policy#:~:text=Fixing%20bugs%20before%20you%20write,bugs%20unfixed%20for%20'later'."&gt;zero bug policy&lt;/a&gt;. Meaning, bugs can't be in backlog, and they take priority over stories/features.&lt;br&gt;
This does not mean our UIs have literally 0 bugs at all times, or at any one time for that matter, only that bugs don't get to live happily ever after in the backlog. We either fix the bug ASAP, or declare it as not relevant and close it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-8-afternoon-meetings"&gt;
  &lt;/a&gt;
  Step 8: afternoon meetings
&lt;/h2&gt;

&lt;p&gt;In the afternoon, as a lead I usually attend some meetings. &lt;br&gt;
This is usually for various planning/grooming purposes with product people.&lt;br&gt;
We all know how fun this is, so we try to spare other team members from it as much as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-9-misc"&gt;
  &lt;/a&gt;
  Step 9: misc
&lt;/h2&gt;

&lt;p&gt;Some other things that can pop up here and there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triage&lt;/strong&gt;, which I sometimes do by myself, but also bring in other team members when needed. We have no strong rules here, we do it when and if it is needed when bringing tickets from backlog into TO DO world. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retrospective&lt;/strong&gt; once a month to review our team practices and processes, and try to improve.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature flags&lt;/strong&gt; are setup for most of major features, with optional A/B testing. As soon as work on a major feature is started, feature flag for it is set up. In this way, doing parts of a new feature and opening small merge requests is doable, because unless feature flag is turned on, partially done feature won't be visible to users. It goes hand in hand with trunk based development, since everything is on master/main and in production all the time, but we have control over what users see.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-10-and-thats-pretty-much-it-now-you-know-almost-everything"&gt;
  &lt;/a&gt;
  Step 10: And that's pretty much it. Now you know (almost) everything
&lt;/h2&gt;

&lt;p&gt;Thank you for your attention and take this inspirational quote to go.&lt;br&gt;
”What one programmer can do in one month, two programmers can do in two months.”&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frederick P. Brooks&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Creating React “Widgets” that can be embedded on any website, by anyone</title>
      <author>Saba beigi</author>
      <pubDate>Sun, 19 Dec 2021 21:30:04 +0000</pubDate>
      <link>https://dev.to/sababg/creating-react-widgets-that-can-be-embedded-on-any-website-by-anyone-5fmf</link>
      <guid>https://dev.to/sababg/creating-react-widgets-that-can-be-embedded-on-any-website-by-anyone-5fmf</guid>
      <description>&lt;p&gt;Why would I do this?&lt;br&gt;
One example is for versatility in a widget you’re making. Either for a client or for the world. A widget should be embeddable in as many places as possible, regardlesss of the software. Whether that website is made using WebFlow, WordPress, Shopify, Drupal, doesn’t matter. Additionally, its common for a widget to exist multiple times on the same page. Let’s imagine a widget where we display the last 5 posts of a given subreddit. I should be able to embed that widget multiple times, for multiple subreddits, on the same page.&lt;/p&gt;

&lt;p&gt;Keep in mind, we aren’t building this widget for React developers. If that were the case, we’d just build a React Component and publish it on npm. Instead, we’re building a widget that can be used by anyone, even a non-coder, outside of React.&lt;/p&gt;

&lt;p&gt;We’ll go over exactly how to do this. We’ll start off by teaching you how to initialize multiple versions of your React App on the same page. Then, we’ll learn how to pass data down the DOM, into our React App. This will allow us to present each of those widgets in different ways, by setting some attributes. Attributes which your customers can easily configure, without knowing how to code.&lt;/p&gt;

&lt;p&gt;To get started, let’s initialize a typical react app, using create-react-app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app reddit-widget
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ReactDOM’s Render Function&lt;br&gt;
When you first initialize a React App using create-react-app, you’ll notice React attaches itself to a single element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ReactDOM‘s render function primarily takes two arguments. The first is the React Component you’ll be injecting into the DOM. The second is the actual DOM element you’ll be injecting the React Component into.&lt;/p&gt;

&lt;p&gt;In the case above, we’re injecting our  component (wrapped in React’s Strict Mode), into the #root div container in the DOM. Which you can find by navigating to public/index.html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multiple Instanes of React&lt;br&gt;
Now, what happens if we want multiple instances of this React App? We know how ReactDOM’s render function works. Instead of injecting our app into a single div in the DOM, let’s inject it into multiple.&lt;/p&gt;

&lt;p&gt;First, we’ll update index.js to iterate over multiple divs. To do this, we’ll use document.querySelectorAll and search for all divs with a reddit_widget class specified. Then, we’ll inject our React App into each of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Find all widget divs&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WidgetDivs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.reddit_widget&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Inject our React App into each&lt;/span&gt;
&lt;span class="nx"&gt;WidgetDivs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Div&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Div&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, our React App will be blank. That’s because we don’t have any divs with the reddit_widget class yet. Let’s update our public/index.html file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now we have multiple versions of our React App running at the same time!&lt;/p&gt;

&lt;p&gt;Passing Data Attributes&lt;br&gt;
So we have our React App rendering multiple times in a page. This within itself isn’t useful. We want each instance of our app to contain different data or functionality.&lt;/p&gt;

&lt;p&gt;There are tons of ways to pass data to and from a React App. In this article, we’ll cover using data attributes.&lt;br&gt;
Reading DOM attributes in a React component&lt;br&gt;
In React, we use Props to attach useful data to our components. In HTML, we have data attributes. Which, together with a bit of JavaScript, can be just as powerful.&lt;/p&gt;

&lt;p&gt;First, let’s attach some data attributes to our DOM elements in public/index.html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget"&lt;/span&gt; &lt;span class="na"&gt;data-subreddit=&lt;/span&gt;&lt;span class="s"&gt;"javascript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget"&lt;/span&gt; &lt;span class="na"&gt;data-subreddit=&lt;/span&gt;&lt;span class="s"&gt;"reactjs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s read those data attributes in our React App. There are a number of ways we can do this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can use Div.getAttribute("data-subreddit") to get our attribute from each DOM element. We can pass this a subreddit prop to our React  component.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.Similar to option 1, but using the dataset property (IE: Div.dataset.subreddit).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can pass the entire DOM element as a prop, to our React  component. Allowing us to access the entire DOM element for each App. From there, we can do anything with the dom element. Including getting the attributes.
For more information, check out using &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes"&gt;data attributes&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For this article, We’ll go with option 3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js &lt;/span&gt;

&lt;span class="nx"&gt;WidgetDivs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Div&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="na"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Div&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Div&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/App.js &lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;domElement&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subreddit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-subreddit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-logo"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          My favorite subreddit is /r/&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subreddit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-link"&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://reactjs.org"&lt;/span&gt;
          &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;
          &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Learn React
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now we are successfully passing data from the DOM to our React App. This opens the door to tons of possibilities. We can create entirely different versions of our app, based on the attributes passed from the DOM&lt;/p&gt;

&lt;p&gt;Example of a "real world" reddit widget&lt;br&gt;
For the sake of this article, I’ll assume you’re already familiar with a few basic React concepts. IE: Data Fetching as well as Components and Props. So I won’t dive into the changes made to pull data from Reddit’s API &amp;amp; display the lists. If you’d like a separate article on this, please comment below. However, I feel this is already covered extensively.&lt;/p&gt;

&lt;p&gt;To make this widget even more useful and "complete", we’ll fetch some data from Reddit’s API. We want to include some of the latest posts, along with links to them. We also want to include a link to the subreddit itself. Finally, it’s common practice for widgets to include a "powered by" notice. Especially in a "freemium" pricing model. This allows other people to discover your widget and also become customers. Maybe even paying customers.&lt;/p&gt;

&lt;p&gt;Here’s an example of what that looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Render each post&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authorUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://www.reddit.com/u/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget__post"&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget__posted_by"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        posted by &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;authorUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget__posted_by"&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;u/&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget__title"&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Filter, since reddit always returns stickied posts up top&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nonStickiedOnly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stickied&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;domElement&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subreddit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;domElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-subreddit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Fetch data from reddit&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://www.reddit.com/r/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;subreddit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.json`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error fetching from reddit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;subreddit&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget__app"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget__header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Latest posts in &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`https://reddit.com/r/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;subreddit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;/r/&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subreddit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget__inner"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nonStickiedOnly&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"reddit_widget__powered_by"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        This widget is powered by&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://javascriptpros.com"&lt;/span&gt;
          &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;
          &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          JavaScriptPros.com
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Building our widget&lt;br&gt;
We initialized our app using create-react-app. For the sake of getting our entire bundle into a single JS &amp;amp; CSS file, we’ll build using parcel. Instead of completely replacing our build script, we’ll add a new one called build:widget. In this article, we won’t dive too deep into how parcel works, but feel free to check it out.&lt;/p&gt;

&lt;p&gt;First, add parcel as a dependency&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add --dev parcel-bundler

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update package.json with a new build script. This tells parcel to build our JS (which will also build our css) into our docs directory. Source maps won’t be needed, to keep our build small. We chose the docs directory, so that we can publish our widget using GitHub pages, but any directory works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"build:widget": "parcel build src/index.js --no-source-maps -d docs",

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may also want to ignore the cache directory parcel uses in .gitignore&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .gitignore

# parcel 
.cache
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The full code, including styling, can be seen &lt;a href="https://github.com/GioLogist/article-react-reddit-widget"&gt;here&lt;/a&gt;. You can also demo the widget itself &lt;a href="https://codesandbox.io/s/react-widget-xj78i?file=/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Gentle Explanation for CSS Combinators</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Sun, 19 Dec 2021 21:12:58 +0000</pubDate>
      <link>https://dev.to/aravsanj/gentle-explanation-for-css-combinators-1c1a</link>
      <guid>https://dev.to/aravsanj/gentle-explanation-for-css-combinators-1c1a</guid>
      <description>&lt;p&gt;Combinators in CSS are used to combine multiple CSS selectors. Combinators can be used in creative ways to select large groups of elements or increase specificity. The four types of combinators are,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Descendant combinator (space)&lt;/li&gt;
&lt;li&gt;Child combinator (&amp;gt;)&lt;/li&gt;
&lt;li&gt;General sibling combinator (~)&lt;/li&gt;
&lt;li&gt;Adjacent sibling combinator (+)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Watch video instead:&lt;/strong&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mDWMNSNpEmw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#descendant-combinator"&gt;
  &lt;/a&gt;
  Descendant combinator
&lt;/h2&gt;

&lt;p&gt;Descendant combinator is simply the space character. As the name implies, it selects the descendants.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS selects all paragraph that are descendants of &lt;code&gt;div&lt;/code&gt; element. You can combine multiple descendant combinators to increase specifcity. CSS rules are overrided depending on specifcity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#child-combinator"&gt;
  &lt;/a&gt;
  Child combinator
&lt;/h2&gt;

&lt;p&gt;Child combinator selects the direct children of the parent combinator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference between above two codes is that the the first one will select all paragraph elements that comes under a div. The second one will only select the direct children. So if there are paragraphs nested inside some other tags, styles won't be applied to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-sibling-combinator"&gt;
  &lt;/a&gt;
  General sibling combinator
&lt;/h2&gt;

&lt;p&gt;General sibling combinator selects all elements that comes after a specified element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS will select all paragraphs that comes after a div. It doesn't matter even if there is other html tags in between. All paragraphs the comes after a div will be selected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adjacent-sibling-combinator"&gt;
  &lt;/a&gt;
  Adjacent sibling combinator
&lt;/h2&gt;

&lt;p&gt;Adjacent sibling combinator selects the element that comes after a specified element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS selects all paragraphs that comes just after a div. This is useful for spacing purposes. For example, if you want to add space on top of images that comes just after a section.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Weekly Digest 50/2021</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 19 Dec 2021 20:23:09 +0000</pubDate>
      <link>https://dev.to/marcobiedermann/weekly-digest-502021-2i3o</link>
      <guid>https://dev.to/marcobiedermann/weekly-digest-502021-2i3o</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #50 and Happy Holidays everyone!&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, podcasts, and designs I consumed during this week.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#http-compression"&gt;
  &lt;/a&gt;
  HTTP compression
&lt;/h3&gt;

&lt;p&gt;HTTP compression is an important part of the big web performance picture. We’ll cover the history, the current state, and the future of web compression.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://calendar.perfplanet.com/2021/http-compression/"&gt;HTTP compression&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-write-a-binary-search-algorithm-in-javascript"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to write a binary search algorithm in JavaScript&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The binary search algorithm is a classic algorithm that lets us find an item in a &lt;em&gt;sorted&lt;/em&gt; array in O(log n) time complexity. In this post, we’ll review how the algorithm works and learn how to implement it in Javascript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://typeofnan.dev/how-to-write-a-binary-search-algorithm-in-javascript/"&gt;How to write a binary search algorithm in JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-conf-2021-recap"&gt;
  &lt;/a&gt;
  &lt;strong&gt;React Conf 2021 Recap&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Last week we hosted our 6th React Conf. In previous years, we’ve used the React Conf stage to deliver industry-changing announcements such as &lt;em&gt;React Native&lt;/em&gt; and &lt;em&gt;React Hooks&lt;/em&gt;. This year, we shared our multi-platform vision for React, starting with the release of React 18 and the gradual adoption of concurrent features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/blog/2021/12/17/react-conf-2021-recap.html"&gt;React Conf 2021 Recap - React Blog&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#monorepos-how-the-pros-scale-huge-software-projects"&gt;
  &lt;/a&gt;
  Monorepos - How the Pros Scale Huge Software Projects
&lt;/h3&gt;

&lt;p&gt;Big companies, like Google &amp;amp; Facebook, store all their code in a single monolithic repository or monorepo… but why? Learn how to use tools like NPM or Yarn workspaces, Lerna, Nx, and Turborepo to scale your codebase&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9iU_IE6vnJ8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dark-mode-designing-in-the-browser"&gt;
  &lt;/a&gt;
  Dark mode - Designing in the Browser
&lt;/h3&gt;

&lt;p&gt;On this episode of Designing in the Browser, we’re going to take a look at dark mode with our host Una Kravets.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xococe8wq_g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChromiumDev"&gt;Google Chrome Developers&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authoring-colors-with-devtools"&gt;
  &lt;/a&gt;
  Authoring colors with DevTools
&lt;/h3&gt;

&lt;p&gt;Let’s take a look at some of the color features in DevTools.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TuR27BxCRVk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChromiumDev"&gt;Google Chrome Developers&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tech-interview-cheat-sheet"&gt;
  &lt;/a&gt;
  Tech Interview Cheat Sheet
&lt;/h3&gt;

&lt;p&gt;Studying for a tech interview sucks. Here's an open-source cheat sheet to help&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/TSiege"&gt;
        TSiege
      &lt;/a&gt; / &lt;a href="https://github.com/TSiege/Tech-Interview-Cheat-Sheet"&gt;
        Tech-Interview-Cheat-Sheet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Studying for a tech interview sucks. Here's an open source cheat sheet to help
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Tech Interview Cheat Sheet&lt;/h1&gt;
&lt;p&gt;This list is meant to be both a quick guide and reference for further research into these topics. It's basically a summary of that comp sci course you never took or forgot about, so there's no way it can cover everything in depth.&lt;/p&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;This is an open source, community project, and I am grateful for all the help I can get. If you find a mistake make a PR and please have a source so I can confirm the correction. If you have any suggestions feel free to open an issue.&lt;/p&gt;
&lt;h2&gt;
Challenges&lt;/h2&gt;
&lt;p&gt;This project now has actual code challenges! This challenges are meant to cover the topics you'll read below. Maybe you'll see them in an interview and maybe you won't. Either way you'll probably learn something new. &lt;a href="https://github.com/TSiege/Tech-Interview-Cheat-Sheet./challenges/README.md"&gt;Click here for more&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Table of Content&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/TSiege/Tech-Interview-Cheat-Sheet#asymptotic-notation"&gt;Asymptotic Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/TSiege/Tech-Interview-Cheat-Sheet#data-structures"&gt;Data Structures&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/TSiege/Tech-Interview-Cheat-Sheet#array"&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TSiege/Tech-Interview-Cheat-Sheet#linked-list"&gt;Linked List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/TSiege/Tech-Interview-Cheat-Sheet#hash"&gt;Hash Table or&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/TSiege/Tech-Interview-Cheat-Sheet"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#react-native-skia"&gt;
  &lt;/a&gt;
  React Native Skia
&lt;/h3&gt;

&lt;p&gt;High-performance React Native Graphics using Skia&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Shopify"&gt;
        Shopify
      &lt;/a&gt; / &lt;a href="https://github.com/Shopify/react-native-skia"&gt;
        react-native-skia
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      High-performance React Native Graphics using Skia
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
@shopify/react-native-skia&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/306134/146549218-b7959ad9-0107-4c1c-b439-b96c780f5230.png"&gt;&lt;img width="400" alt="skia" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lb7i1Szi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/306134/146549218-b7959ad9-0107-4c1c-b439-b96c780f5230.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Checkout the full documentation &lt;a href="https://shopify.github.io/react-native-skia" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;React Native Skia brings the Skia Graphics Library to React Native. Skia serves as the graphics engine for Google Chrome and Chrome OS, Android, Flutter, Mozilla Firefox and, Firefox OS, and many other products.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is an alpha release. Use with caution.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;React Native Skia brings the &lt;a href="https://skia.org/" rel="nofollow"&gt;Skia Graphics Library&lt;/a&gt; to React Native
Skia serves as the graphics engine for Google Chrome and Chrome OS, Android, Flutter, Mozilla Firefox and, Firefox OS, and many other products.&lt;/p&gt;
&lt;p&gt;When reading these lines, the package is not yet available on npm
Use the link below to install the package.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ yarn add https://github.com/Shopify/react-native-skia/releases/download/v0.1.43-alpha/shopify-react-native-skia-0.1.43.tgz&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Or using npm:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;$ npm install https://github.com/Shopify/react-native-skia/releases/download/v0.1.43-alpha/shopify-react-native-skia-0.1.43.tgz&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
iOS&lt;/h3&gt;
&lt;p&gt;Run &lt;code&gt;pod install&lt;/code&gt; on the &lt;code&gt;ios/&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3&gt;
Android&lt;/h3&gt;
&lt;p&gt;Currently, you will need Android NDK to be installed
If you have Android Studio installed, make sure &lt;code&gt;$ANDROID_NDK&lt;/code&gt; is available.
&lt;code&gt;ANDROID_NDK=/Users/username/Library/Android/sdk/ndk-bundle&lt;/code&gt; for instance.&lt;/p&gt;
&lt;p&gt;If the NDK…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Shopify/react-native-skia"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ride-booking"&gt;
  &lt;/a&gt;
  Ride Booking
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_w4PFRy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4205502/screenshots/17092583/media/d17b997aa32387e8d48e5e7cd4b9a687.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_w4PFRy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/4205502/screenshots/17092583/media/d17b997aa32387e8d48e5e7cd4b9a687.png" alt="by [Raju Husen](https://dribbble.com/shots/17092583-Ride-Booking)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/17092583-Ride-Booking"&gt;Raju Husen&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazy-daisy-ui"&gt;
  &lt;/a&gt;
  Lazy Daisy UI
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E7iKSgOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/26642/screenshots/17090995/media/6fd8c2f4200c2df1117c94b572dec575.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7iKSgOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/26642/screenshots/17090995/media/6fd8c2f4200c2df1117c94b572dec575.png" alt="by [Halo Mobile](https://dribbble.com/shots/17090995-Lazy-Daisy-UI)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/17090995-Lazy-Daisy-UI"&gt;Halo Mobile&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#online-course-dashboard"&gt;
  &lt;/a&gt;
  Online Course Dashboard
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9dJtjzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/5963189/screenshots/17087509/media/77ede34aabbea5e38654cb70c6435c78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9dJtjzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/5963189/screenshots/17087509/media/77ede34aabbea5e38654cb70c6435c78.png" alt="by [Nela Rosdiana](https://dribbble.com/shots/17087509-Ajarin-Online-Course-Dashboard)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/17087509-Ajarin-Online-Course-Dashboard"&gt;Nela Rosdiana&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFJuoyTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FGf4zOGWQAQahLT.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_mWGQEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1455203587840266249/XSdJ8r1L_normal.jpg" alt="Josh W. Comeau (🛑🤏🧛) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Josh W. Comeau (🛑🤏🧛)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/joshwcomeau"&gt;@joshwcomeau&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      😮 Framer Motion now has bindings for react-three-fiber, meaning you can use it to animate 3D stuff instead of the DOM.&lt;br&gt;&lt;br&gt;Very, very cool. 🔥❤️‍🔥🔥&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/pbOoR9GaBL"&gt;framer.com/docs/three-int…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:37 PM - 13 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1470417701931728909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1470417701931728909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1470417701931728909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nn1ib1Vw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FGrPCKVXMAcFkB9.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrqJXnpO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1465780299380502537/pptBYF44_normal.jpg" alt="Stefan Judis profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stefan Judis
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/stefanjudis"&gt;@stefanjudis&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      For the git CLI users. 🙈 &lt;br&gt;&lt;br&gt;Today I learned that the `patch` options (e.g. when using `git add -p`) are quite useful. 👏 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:30 PM - 15 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1471216118236954630" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1471216118236954630" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1471216118236954630" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-lHemQM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FGqaq5aWQAskdi8.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tB0fWGN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/846106819391115264/iZAxk4qr_normal.jpg" alt="🔎Julia Evans🔍 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        🔎Julia Evans🔍
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @b0rk
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I built a new tool where you can experiment with DNS called Mess With DNS! It's at &lt;a href="https://t.co/LKicvZcOkx"&gt;messwithdns.net&lt;/a&gt;.&lt;br&gt;&lt;br&gt;I made this with &lt;a href="https://twitter.com/omarieclaire"&gt;@omarieclaire&lt;/a&gt;, and there's a blog post about how we built it here: &lt;a href="https://t.co/dmkI4d4Hnq"&gt;jvns.ca/blog/2021/12/1…&lt;/a&gt;. Here's a gif: 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:42 PM - 15 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1471158826288226306" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1471158826288226306" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1471158826288226306" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrbyWH-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FGytYS9VgAEb92r.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgNdW7xD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1471646681082990593/DBu9tgLk_normal.jpg" alt="Addy Osmani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Addy Osmani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/addyosmani"&gt;@addyosmani&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Tip: Name your JavaScript exports. This ensures they show up named in DevTools and compile time errors.&lt;br&gt;&lt;br&gt;A helpful ESLint rule can enforce it &lt;a href="https://t.co/eZQZnOZroo"&gt;bit.ly/eslint-de&lt;/a&gt; ✅ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:27 AM - 17 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1471743877916737537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1471743877916737537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1471743877916737537" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4ENhehE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1459894503058386950/7bReqzlP_normal.jpg" alt="Ada Rose Cannon profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ada Rose Cannon
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/adarosecannon"&gt;@adarosecannon&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Damn i love the CSS inset property, it's short hand for top, left, bottom and right:&lt;br&gt;&lt;br&gt;stick to bottom:&lt;br&gt;        position: absolute;&lt;br&gt;        inset: auto 0 0 0;&lt;br&gt;&lt;br&gt;full screen:&lt;br&gt;        position: absolute;&lt;br&gt;        inset: 0;&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/fCcmDbRcgM"&gt;developer.mozilla.org/en-US/docs/Web…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:51 PM - 17 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1471855546580049925" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1471855546580049925" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1471855546580049925" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#3d-stopwatch"&gt;
  &lt;/a&gt;
  3D Stopwatch
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/JjrNZXa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jh3yy"&gt;Jhey&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#progress-clock"&gt;
  &lt;/a&gt;
  Progress Clock
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jkantner/embed/MWEmExB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jonkantner"&gt;Jon Kantner&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#podcasts-worth-listening"&gt;
  &lt;/a&gt;
  Podcasts worth listening
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax-how-to-do-things-in-svelte"&gt;
  &lt;/a&gt;
  Syntax – How To Do Things In Svelte
&lt;/h3&gt;

&lt;p&gt;In this Hasty Treat, Wes and Scott talk about how to do things in Svelte.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5ToWTCq4n54SAET5pJYVmR"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codepen-radio-with-ben-evans"&gt;
  &lt;/a&gt;
  CodePen Radio – With Ben Evans
&lt;/h3&gt;

&lt;p&gt;You might recognize &lt;a href="https://codepen.io/ivorjetski"&gt;Ben Evans&lt;/a&gt; from his absolutely incredible CSS “paintings”, like the &lt;a href="https://codepen.io/ivorjetski/pen/dBYWWZ"&gt;portrait of his daughter&lt;/a&gt; or the &lt;a href="https://codepen.io/ivorjetski/pen/xMJoYO"&gt;still life&lt;/a&gt;. Paintings aren’t the quiet word as Ben designs them all to be entirely scalable.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5AhpnyteZEq9lgfyboqAq7"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Create a Web API with ASP.NET and MongoDB</title>
      <author>Patrick Tshibanda</author>
      <pubDate>Sun, 19 Dec 2021 20:11:55 +0000</pubDate>
      <link>https://dev.to/techwithpat/create-a-web-api-with-aspnet-and-mongodb-1a94</link>
      <guid>https://dev.to/techwithpat/create-a-web-api-with-aspnet-and-mongodb-1a94</guid>
      <description>&lt;p&gt;This video will cover how ASP.NET and MongoDB are used to create a Web API.&lt;/p&gt;

&lt;p&gt;Watch the video here : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VSsAsA6_-GE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Common algorithms and data structures in JavaScript: objects and hashing</title>
      <author>Matvey Romanov</author>
      <pubDate>Sun, 19 Dec 2021 20:09:01 +0000</pubDate>
      <link>https://dev.to/ra1nbow1/common-algorithms-and-data-structures-in-javascript-objects-and-hashing-1kdj</link>
      <guid>https://dev.to/ra1nbow1/common-algorithms-and-data-structures-in-javascript-objects-and-hashing-1kdj</guid>
      <description>&lt;p&gt;When we talk about data structures in JavaScript, we can't get past the most important structure of this language – the object. Let's take a look at what it has under the hood and why hashing algorithms are needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#associative-array"&gt;
  &lt;/a&gt;
  Associative array
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript objects are an example of an associative array. Unlike regular arrays, associative arrays do not have indexes, but rather keys (usually strings). Otherwise, there is almost no difference – the keys are unique and each corresponds to a certain value. Associative arrays are also called dictionaries or maps (from the English map). They allow you to conveniently represent complex data of various types (for example, user information) and are very popular in JavaScript programming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In terms of efficiency, associative arrays are superior to other data structures: all basic operations in them are performed in constant time O(1). For example, to add a new element to the middle of a simple array, you will have to reindex it (we talked about this in the first part). The complexity of this operation is O (n). In an associative array, you simply add a new key to which the value is associated.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hash-tables"&gt;
  &lt;/a&gt;
  Hash tables
&lt;/h2&gt;

&lt;p&gt;However, associative arrays have their own weakness – they cannot be stored in the computer's memory as it is, unlike a regular indexed array. For storing associative arrays, a special structure is used – a hash table (hash map).&lt;/p&gt;

&lt;p&gt;Associative arrays are in a sense syntactic sugar, a more convenient add-on to the hash table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nKYPYZ1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy8bgh5yoybaru4f65dk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKYPYZ1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy8bgh5yoybaru4f65dk.png" alt="Hash table" width="644" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Schematic diagram of the hash table operation&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hashing"&gt;
  &lt;/a&gt;
  Hashing
&lt;/h2&gt;

&lt;p&gt;To turn the key of an associative array into an index of a regular one, you need to perform 2 operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find hash (hash the key);&lt;/li&gt;
&lt;li&gt;Convert the found hash to the index of the resulting array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is, the final task is to convert the key to a numeric index, but it is usually performed in two steps.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#calculating-the-hash"&gt;
  &lt;/a&gt;
  Calculating the hash
&lt;/h2&gt;

&lt;p&gt;The hash function receives input data and converts it to a fixed – length hash string or number. You've probably heard about some of the hash algorithms: CRC32, MD5, and SHA. The key can be represented by any data type that the hash function can handle.&lt;/p&gt;

&lt;p&gt;Example hash-ID of a commit in git. When you save changes, they are hashed and you get something like &lt;code&gt;0481e0692e2501192d67d7da506c6e70ba41e913&lt;/code&gt;. This is the hash calculated for your changes.&lt;/p&gt;

&lt;p&gt;The implementation of a hash function can be very different. For example, you can use the simplest identity function, which takes an input parameter and returns it unchanged:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the keys are strings, you can calculate the sum of the codes of all characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, &lt;strong&gt;name&lt;/strong&gt; the hash value for a key is 417, and the hash value for a key &lt;strong&gt;age&lt;/strong&gt; is 301.&lt;/p&gt;

&lt;p&gt;All of these are not very good examples of hash functions, they are usually more complex in real life, but it is important for us to understand the general principle. If you know what data your hash table is going to work with, you can choose a more specific hash function than in the general case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Important&lt;/u&gt;&lt;/strong&gt;: for the same input value, the hash function always returns the same result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#casting-to-an-index"&gt;
  &lt;/a&gt;
  Casting to an index
&lt;/h3&gt;

&lt;p&gt;Usually, the size of the resulting array is determined immediately, so the index must be within the specified limits. The hash is usually larger than the index, so it needs to be further converted.&lt;/p&gt;

&lt;p&gt;To calculate the index, you can use the remainder of dividing the hash by the size of the array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is important to remember that the longer the array is, the more space it takes up in memory.&lt;/p&gt;

&lt;p&gt;Let's use our hash function and convert an associative array to a regular one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// associative array&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// default array, length = 5&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key &lt;strong&gt;name&lt;/strong&gt; corresponds to index 2, and the key &lt;strong&gt;age&lt;/strong&gt; corresponds to index 1.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We store not only the values in the resulting array, but also the original keys. Why this is necessary, we will find out very soon.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If we now want to get an array element with a key &lt;strong&gt;name&lt;/strong&gt;, then we need to hash this key again to find out at what index the associated element is located in the array.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#collisions"&gt;
  &lt;/a&gt;
  Collisions
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Do you already see the weak point of such transformations?&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The key in an associative array can be absolutely any string of any length – the number of options is infinite. And the number of indexes in the array is limited. In other words, there are not enough indexes for all keys, and for some input data, the hash function will return the same result. This is called a collision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two common ways to resolve collisions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-addressing"&gt;
  &lt;/a&gt;
  Open addressing
&lt;/h3&gt;

&lt;p&gt;Let's assume that we passed the hash function some key of an associative array (&lt;strong&gt;key1&lt;/strong&gt;) and received from it the 2-index of a regular array that corresponds to this key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we pass it another key – &lt;strong&gt;key2&lt;/strong&gt; – and again we get &lt;u&gt;2&lt;/u&gt; – there was a collision. We can't write new data under the same index, so we just start looking for the first free space in the array. This is called linear probing. The next index after 2-3 – is free, we write new data to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the third key &lt;strong&gt;key3&lt;/strong&gt;, the hash function returns index 3 – but it is already occupied by the key &lt;strong&gt;key2&lt;/strong&gt;, so we have to search for free space again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The record is clear, but how can you find the desired key in such a hash table, for example, &lt;strong&gt;key3&lt;/strong&gt;? Similarly, we first run it through the hash function and get &lt;u&gt;3&lt;/u&gt;. We check the array element at this index and see that this is not the key we are looking for. That's why we store the source key in a hash table, so that we can make sure that the found element is exactly the one we need. We just start moving further through the array, iterating over each element and comparing it with the key we are looking for.&lt;/p&gt;

&lt;p&gt;The more densely populated the hash table is, the more iterations you need to do to detect a key that is out of place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chain-method"&gt;
  &lt;/a&gt;
  Chain method
&lt;/h3&gt;

&lt;p&gt;In this approach, values corresponding to a single index are stored as a linked list. each index of the array corresponds not to one element, but to a whole list of elements for which the hash function calculated one index. If a collision occurs, the new element is simply added to the end of the list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68dW3ujY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1yqy86tv037niw7vk67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68dW3ujY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1yqy86tv037niw7vk67.png" alt="Hash table scheme" width="589" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When searching for an element with a specific key in such a hash table, we first calculate its hash, determine the desired array index, and then look through the entire list until we find the desired key.&lt;/p&gt;

&lt;p&gt;This implementation makes it easy to delete items from the table, because in a linked list, the delete operation takes constant time.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#implementing-a-hash-table-in-javascript"&gt;
  &lt;/a&gt;
  Implementing a hash table in JavaScript
&lt;/h2&gt;

&lt;p&gt;The hash table must implement the associative array interface, i.e. provide three main methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adding a new key-value pair;&lt;/li&gt;
&lt;li&gt;search for a value by key;&lt;/li&gt;
&lt;li&gt;deleting a pair by key.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The smaller the hash table size (array length), the more frequent collisions will occur. We'll take a small number, 32, as an example. In practice, prime numbers (which are divisible only by one and by themselves) are often used for the size of a hash table. It is assumed that this results in fewer collisions.&lt;/p&gt;

&lt;p&gt;To resolve collisions, we will use the chain method. To do this, we need the linked list class &lt;strong&gt;LinkedList&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HashTable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buckets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hashTableSize&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;hashTableSize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// calculating the hash for the key&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// create if there is no list for this hash yet&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// check if the key was added earlier&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;nodeValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;nodeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// updating the value for the key&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// adding a new item to the end of the list&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// calculating the hash for the key&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// we find the corresponding list in the array&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// we are looking for an item with the desired key in the list&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;nodeValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;nodeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buckets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;nodeValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;nodeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#efficiency-of-basic-operations-in-the-hash-table"&gt;
  &lt;/a&gt;
  Efficiency of basic operations in the hash table
&lt;/h2&gt;

&lt;p&gt;The main operations in a hash table consist of two stages::&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;calculating the hash for a key and checking the element corresponding to this hash in the resulting array.&lt;/li&gt;
&lt;li&gt;iterate through other elements if you didn't find the right one right away.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first stage always takes constant time, the second – linear, that is, it depends on the number of elements that need to be sorted.&lt;/p&gt;

&lt;p&gt;The effectiveness of a hash table depends on three main factors::&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hash function that calculates indexes for keys. Ideally, it should distribute indexes evenly across the array;&lt;/li&gt;
&lt;li&gt;The size of the table itself – the larger it is, the fewer collisions there are;&lt;/li&gt;
&lt;li&gt;Collision resolution method. For example, the chaining method reduces the operation of adding a new element to constant time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, the fewer collisions, the more efficient the table works, since you don't need to iterate through many elements if the search was not found immediately by hash. In general, the hash table is more efficient than other data structures.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#using-hash-tables"&gt;
  &lt;/a&gt;
  Using hash tables
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Hash tables are widely used in programming, for example, for authorization mechanisms, indexing large amounts of information (databases), caching, or searching. Another common case is the implementation of unordered sets, which we will discuss in the next part of the cycle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In JavaScript, hash tables in their pure form are rarely used. Usually, all their work is successfully performed by ordinary objects (associative arrays) or more complex &lt;strong&gt;Maps&lt;/strong&gt;. At the same time, at a lower level (program interpretation) hash tables are used to represent objects.&lt;/p&gt;

&lt;p&gt;Objects and hash tables are often used as auxiliary structures when optimizing various actions. For example, to count the number of occurrences of different characters in a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;countSymbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;countSymbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/*
{ " ": 1, "!": 1, ",": 1, d: 1, e: 1, h: 1, l: 3, o: 2, r: 1, w: 1 }
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#hashing-encoding-and-encryption"&gt;
  &lt;/a&gt;
  Hashing, encoding, and encryption
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Hashing is an algorithm that works only in one direction. It is impossible to get the original value from the hash, and there is no practical need for this, because the main task of hashing is to distinguish input data, not to save it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In some cases, we need a two-way transformation. For example, you want to leave a secret message to a friend that no one else can read. This is where encryption algorithms come to the rescue.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You convert the source text to some other sequence of characters using a cipher. Such a sequence is either completely unreadable (just a set of letters), or it has a completely different meaning. If someone intercepts this email, they simply won't understand what you were trying to say. Your friend knows that the message is encrypted and knows how to decrypt it. Thus, the main purpose of encryption is to hide information from unauthorized persons. To do this, use a secret key or even two keys – one for encryption, the second for decryption.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In addition to encryption, there is also encoding. It is close to encryption in essence, but different in purpose. Encoding is used to simplify the transmission of information, for example, over telecommunication lines. Your message is converted to a sequence of bits, delivered to the recipient over the wire, and restored again at the other end. No keys are used in this case. Such codes not only solve the problem of communication, but also often try to deal with possible interference during transmission, that is, they have the ability to repair damage. One of the most famous codes is Morse code.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While dealing with hash tables, we once again made sure that almost everything in programming is done through ... arrays. So associative objects under the hood also use them, calculating the index for each key using hash functions.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>security</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>How to combine SSR and pagination with react-query</title>
      <author>Elisabeth Leonhardt</author>
      <pubDate>Sun, 19 Dec 2021 19:45:00 +0000</pubDate>
      <link>https://dev.to/elisabethleonhardt/how-to-combine-ssr-and-pagination-with-react-query-4ihp</link>
      <guid>https://dev.to/elisabethleonhardt/how-to-combine-ssr-and-pagination-with-react-query-4ihp</guid>
      <description>&lt;p&gt;If you read my latest post about pagination with react query, you might have noticed that everything was client-side rendered. That's fine for some cases, but in others, you might require server-side rendering for better speed or SEO. Today, I want to adapt the code we built last time to set up a server-side rendered pagination with Next.js and react-query:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-setting-up-the-project"&gt;
  &lt;/a&gt;
  1. Setting up the project
&lt;/h2&gt;

&lt;p&gt;To not bore you with a new project setup, we will just modify the code from the previous &lt;a href="https://dev.to/elisabethleonhardt/implementing-pagination-with-nextjs-mui-and-react-query-2ab"&gt;article I wrote&lt;/a&gt;. Go ahead and clone the &lt;a href="https://github.com/elisabeth-leonhardt/react-query-pagination"&gt;repository&lt;/a&gt;: you can inspect the finished code inside the PaginationSSR.js file in the pages directory or you copy the code from PaginationCSR.js inside a new page and follow along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-evaluating-two-ways-to-obtain-data-on-the-serverside"&gt;
  &lt;/a&gt;
  2. Evaluating two ways to obtain data on the server-side
&lt;/h2&gt;

&lt;p&gt;As detailed in the &lt;a href="https://react-query.tanstack.com/guides/ssr"&gt;react-query docs&lt;/a&gt; on SSR, there are two ways of passing data into your page:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-using-initialdata"&gt;
  &lt;/a&gt;
  a. using initialData
&lt;/h3&gt;

&lt;p&gt;This is very easy: We just fetch the needed data on the server-side and give it to react-query as initalData and we are all set. There are some disadvantages though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we won't know when exactly the data was fetched, it could be stale already&lt;/li&gt;
&lt;li&gt;react-query won't know what exactly this initialData is. If you pass the data for the first page as initialData on the server-side, react-query will also fetch the same data on the client-side, adding an unnecessary API request. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#b-using-hydration"&gt;
  &lt;/a&gt;
  b. using hydration
&lt;/h3&gt;

&lt;p&gt;The mentioned issues are avoided using hydration, but the setup is a little more complex. However, I want to provide you with a solution that is bulletproof and production-ready, so we will go with option b.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-setting-up-hydration"&gt;
  &lt;/a&gt;
  3. Setting up Hydration
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The first change has to be done in _app.js: We want to create the QueryClient inside of the app instead of outside. We also need to wrap our app inside an additional Hydrate component and pass in the dehydrated state as prop. The result should look like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query/devtools&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Hydrate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Hydrate&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dehydratedState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ReactQueryDevtools&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Hydrate&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now, if you didn't do it yet, create a new file in the pages folder called paginationSSR.js and copy and paste all the code that is inside paginationCSR.js. Only change the name of the component and verify that everything is working as expected.&lt;/li&gt;
&lt;li&gt;Let's start with the getServerSideProps function: We need to define a new QueryClient and make use of the prefetchQuery function. The result is returned as dehydratedState inside props to our page. Keep in mind that the query we write here has to have the same name and dependency array like the one inside the page component, otherwise, it will be treated as a prefetch for a non-existing query, and its data will be garbage-collected. The resulting code looks like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prefetchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;characters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://rickandmortyapi.com/api/character/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dehydratedState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dehydrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We are almost done! There are only some tiny adjustments left. On one hand, you will notice in the react-query devtools that when you enter &lt;code&gt;localhost:3001/paginationSSR?page=14&lt;/code&gt; to go directly to page 14 for example, will also fetch the data for page 1. This happens because our default value for page is set to 1, so it fetches the data for page 1 immediately after rendering. We will fix it like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now you can delete the useEffect hook. Since this page is server-side rendered, it has access to the page parameter immediately.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;last but not least, don't forget to change the base-URL inside the hanldePaginationChange-function. Things can get very confusing when you test the server-side rendering and it suddenly redirects you to the client-side rendered version of the page... 🤦🏼‍♀️
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handlePaginationChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`paginationSSR/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;shallow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#some-additional-comments"&gt;
  &lt;/a&gt;
  some additional comments
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;react-query has some very aggressive defaults for refetching data, which are overkill for the application I am working with. This is why I set &lt;code&gt;refetchonMount&lt;/code&gt; and &lt;code&gt;refetchOnWindowFocus&lt;/code&gt; to false. You will have to evaluate your use case to see whether it's best to leave them activated.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;characters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://rickandmortyapi.com/api/character/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;keepPreviousData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;refetchOnMount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;refetchOnWindowFocus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In a real application, it would be best to encapsulate the pagination component together with the grid into a separate component and reuse it, but this is meant to be a playground. However, always take a minute to think about code-reusability to make your future and your colleagues' life's easier. ❤️&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it for today. Feel free to drop any questions in the comments section and have an amazing week!&lt;/p&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>What's your chrome day to day extensions list?</title>
      <author>Yury Troynov</author>
      <pubDate>Sun, 19 Dec 2021 19:36:04 +0000</pubDate>
      <link>https://dev.to/yutro/whats-your-chrome-day-to-day-extensions-list-380l</link>
      <guid>https://dev.to/yutro/whats-your-chrome-day-to-day-extensions-list-380l</guid>
      <description>&lt;p&gt;For many years I've been installing and removing a bunch of different chrome extensions in order to boost productivity, reduce distractions. &lt;/p&gt;

&lt;p&gt;Here is my most used list.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco"&gt;Extension manager&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tfdHpJe7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qew0ocflo1cszmmgq8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfdHpJe7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qew0ocflo1cszmmgq8u.png" alt="Image description" width="546" height="366"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Nowadays typical chrome user has a bunch of extensions always enabled, even if some of those extensions are not needed right now, they still there eating your ram.&lt;/p&gt;

&lt;p&gt;Here extension manager comes to the game :) it allows you group extensions and enables them conditionally only when needed :) &lt;/p&gt;

&lt;p&gt;ex. I have a set of extensions that I enable only when I'M at work, another set when I'm at home :) or you can enable/disable some of them based on different conditions :)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/bitwarden-free-password-m/nngceckbapebfimnlniiiahkandclblb"&gt;BitWarden&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRnlEqoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h40cc7ik2vakww32px1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRnlEqoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h40cc7ik2vakww32px1u.png" alt="Image description" width="601" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amazing free open-source password manager :) works everywhere. Personally, I use it on my android, windows, mac. It's just works that's it :) also have the possibility to be deployed to personal VPS if needed.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/checker-plus-for-google-c/hkhggnncdpfibdhinjiegagmopldibha"&gt;Checker plus for Google calendar&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--joyIhQLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfsz7k3rbzgw224q3vl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--joyIhQLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfsz7k3rbzgw224q3vl1.png" alt="Image description" width="544" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a developer I have meetings at my work and it's always difficult to track them, and this amazing extension simplifies this giving you constant notification how much time is left for the next meeting right on the icon, or calendar bird eye if you click on this, also brings pop-ups and notifications for events with an ability to postpone notifications for 1,2... etc. minutes.&lt;br&gt;
 This extension saved my ass so many times :)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg"&gt;AdGuard&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mm7QeVdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jjs93bauc8n12jra0ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mm7QeVdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jjs93bauc8n12jra0ui.png" alt="Image description" width="616" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the best ad blocker extensions so far (IMO), can block ads not only on web pages but also right in you tube videos ❤ &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/grid-ruler/joadogiaiabhmggdifljlpkclnpfncmj"&gt;GridRuller&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9AjXtqyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4yn92omrnlg9f1zn8xb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9AjXtqyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4yn92omrnlg9f1zn8xb.png" alt="Image description" width="537" height="334"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple but very useful extension for those who work with frontend :) It brings guidelines like in Photoshop right into a web page (helps to fight with designers)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/dimensions/baocaagndhipibgklemoalmkljaimfdj"&gt;Dimensions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYSoYzvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz7gjxbjgud7vf4ee8rj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYSoYzvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz7gjxbjgud7vf4ee8rj.png" alt="Image description" width="624" height="384"&gt;&lt;/a&gt;&lt;br&gt;
 Another very useful ruler 📏 for web developers. Together with Grid Ruler (1) becomes super power. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/toby-for-chrome/hddnkoipeenegfoeaoibdmnaalmgkpip"&gt;Toby&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SFU2Ccbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc76vqyh4ibol30qwng6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SFU2Ccbw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc76vqyh4ibol30qwng6.png" alt="Image description" width="607" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extension manager bro but for tabs :) helps organize tabs into namespaces, groups, workspaces. Also, you can create a team there and share tabs, groups within the team.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/notion-web-clipper/knheggckgoiihginacbkhaalnibhilkk"&gt;Notion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-HrIvz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndpgv36vvlapj1fxbgh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-HrIvz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndpgv36vvlapj1fxbgh9.png" alt="Image description" width="540" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notion is my own personal Wikipedia to organize everything I need to organize :) it has a free account for 1 user.  &lt;/p&gt;

&lt;p&gt;What are your day-to-day extensions which make your life easier?&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>tooling</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
