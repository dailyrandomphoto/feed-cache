<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Holiday is over 😭 Back to Reality 😱</title>
      <author>Let's Code</author>
      <pubDate>Thu, 30 Dec 2021 00:25:08 +0000</pubDate>
      <link>https://dev.to/frontendengineer/holiday-is-over-back-to-reality-4op</link>
      <guid>https://dev.to/frontendengineer/holiday-is-over-back-to-reality-4op</guid>
      <description>&lt;p&gt;While some of us might be back to work already after a glorious holiday, some of us will be back after the New Year's holiday and will face the inevitable. I am one of the latter and is definitely not quite ready yet.&lt;/p&gt;

&lt;p&gt;I am curious on what did you do during the long holiday - either personal and professional wise. Below is my story. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Spent my leave on staycation. I hang out with the family and in-laws. Lots of shopping and ice skating.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ate a bunch of unhealthy food I shouldn't be eating - more than what I imagined. Major diet after New Year to follow. 😊&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, wrote couple of ReactJS articles here at dev.to and created a video version that I am very proud of (still honing my video recording skills). Below are the links if you want to check it out. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for the dev.to community for a great, warm support of the articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/frontendengineer/react-interview-questions-part-2-mid-senior-level-cal"&gt;Advance React Interview Questions&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/frontendengineer/common-react-interview-questions-50gm"&gt;Basic React Interview Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that is my story. What is yours - No right/wrong answers.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>HTML ignored knowledge</title>
      <author>Mohammed Sobhi</author>
      <pubDate>Wed, 29 Dec 2021 23:34:07 +0000</pubDate>
      <link>https://dev.to/mohammedsobhi/html-ignored-knowledge-1b03</link>
      <guid>https://dev.to/mohammedsobhi/html-ignored-knowledge-1b03</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;An HTML Document is mainly divided into two parts: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;HEAD&lt;/strong&gt;: This contains the information about the HTML document. For Example, Title of the page, version of HTML, Metadata etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;BODY&lt;/strong&gt;: This contains everything you want to display on the Web Page.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;     
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;: This is called HTML root element and used to wrap all the code.&lt;/p&gt;

&lt;p&gt;All the HTML elements that can be used inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;element are:&lt;br&gt;
&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-document-base-url-element-raw-ltbasegt-endraw-"&gt;
  &lt;/a&gt;
  The Document Base URL element&lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; HTML element specifies the base URL to use for all relative URLs in a document. There can be only one  element in a document.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;base&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.example.com/"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"images/bolika.gif"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"osos bolika"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"tags/tag_base.asp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML base Tag&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#the-metadata-element-raw-ltmetagt-endraw-"&gt;
  &lt;/a&gt;
  The metadata element &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag defines metadata about an HTML document. Metadata is data (information) about data.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Free Web tutorials"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"keywords"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"HTML, CSS, JavaScript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Meta tag attributes:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6k9mdv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm4hd88uobct01ybetme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6k9mdv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lm4hd88uobct01ybetme.png" alt="Meta tag attributes" width="880" height="396"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-httpequiv-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;http-equiv&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;usually used to solve legacy browsers problems, but nowadays, you only need it to instruct Internet Explorer to use its latest rendering engine. By writing the following meta tag in the head:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-name-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;name&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; attributes can be used together to provide document metadata in terms of name-value pairs, with the name attribute giving the metadata name, and the content attribute giving the value.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-noscript-tag-raw-ltnoscriptgt-endraw-"&gt;
  &lt;/a&gt;
  The noscript tag &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;:
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support script.&lt;/p&gt;

&lt;p&gt;The  element can be used in both  and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. When used inside &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, the  element could only contain &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; elements.&lt;br&gt;
For example, in create-react-app template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;You need to enable JavaScript to run this app.&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#what-are-raw-data-endraw-attributes-good-for"&gt;
  &lt;/a&gt;
  What are &lt;code&gt;data-&lt;/code&gt; attributes good for?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;data-*&lt;/code&gt; attributes allow us to store extra information on standard, semantic HTML elements without other hacks or extra properties on DOM.&lt;/p&gt;

&lt;p&gt;These days, using &lt;code&gt;data-&lt;/code&gt; attributes is generally not encouraged. One reason is that users can modify the data attribute easily by using inspect element in the browser. The data model is better stored within JavaScript itself and stay updated with the DOM via data binding, possibly through a library or a framework.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-difference-between-raw-ltscriptgt-endraw-raw-ltscript-asyncgt-endraw-and-raw-ltscript-defergt-endraw-"&gt;
  &lt;/a&gt;
  The difference between &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;script async&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script defer&amp;gt;&lt;/code&gt;.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ltscriptgt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;HTML parsing is blocked, the script is fetched and executed immediately, HTML parsing resumes after the script is executed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ocnwc7Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0m6hhptkb2jic68p6cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ocnwc7Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0m6hhptkb2jic68p6cf.png" alt="Script timeline" width="854" height="147"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"javascript.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltscript-asyncgt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;script async&amp;gt;&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;The script will be fetched in parallel to HTML parsing and executed as soon as it is available (potentially before HTML parsing completes). Use async when the script is independent of any other scripts on the page, for example, analytics and adds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1yViyGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdtzbqaacgh2jcvzdk4z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1yViyGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdtzbqaacgh2jcvzdk4z.png" alt="Script async" width="705" height="146"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"javascript.js async"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltscript-defergt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;script defer&amp;gt;&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;The script will be fetched in parallel to HTML parsing and executed when the page has finished parsing. If there are multiple of them, each deferred script is executed in the order they were encountered in the document. If a script relies on a fully-parsed DOM, the defer attribute will be useful in ensuring that the HTML is fully parsed before executing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y54cdOU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj2nv682jydnrsagqp5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y54cdOU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj2nv682jydnrsagqp5c.png" alt="Script defer" width="705" height="153"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"javascript.js defer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#why-is-it-generally-a-good-idea-to-position-css-raw-ltlinkgt-endraw-s-between-raw-ltheadgtltheadgt-endraw-"&gt;
  &lt;/a&gt;
  Why is it generally a good idea to position CSS &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;s between &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Putting s in the &lt;/p&gt; is part of proper specification in building an optimized website. When a page first loads, HTML and CSS are being parsed simultaneously; HTML creates the DOM (Document Object Model) and CSS creates the CSSOM (CSS Object Model). Both are needed to create the visuals in a website, allowing for a quick "first meaningful paint" timing. This progressive rendering is a category optimization sites are measured in their performance scores. Putting stylesheets near the bottom of the document is what prohibits progressive rendering in many browsers. Some browsers block rendering to avoid having to repaint elements of the page if their styles change. The user is then stuck viewing a blank white page. Other times there can be flashes of unstyled content (FOUC).

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--El8ikvpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/955esn6zkijrb81ts5u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--El8ikvpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/955esn6zkijrb81ts5u0.png" alt="Rendering timeline" width="611" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Java Complete Roadmap 2022</title>
      <author>Ashish Yadav</author>
      <pubDate>Wed, 29 Dec 2021 23:32:47 +0000</pubDate>
      <link>https://dev.to/expoashish/java-complete-roadmap-2022-3be1</link>
      <guid>https://dev.to/expoashish/java-complete-roadmap-2022-3be1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#java-complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Java Complete Roadmap 2022
&lt;/h2&gt;

&lt;p&gt;In this blog we are going to discuss complete roadmap for Java Programming in 2022. I will give you only topics and if you like my post then follow my Blogs. Lets Start:-👇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#java-complete-roadmap-2022"&gt;
  &lt;/a&gt;
  &lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#new-amp-trending-topics"&gt;
  &lt;/a&gt;
  New &amp;amp; Trending Topics:👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-trending-technologies-to-learn.html"&gt;Top 10 Trending Technologies to Learn in 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-programming-languages-you-must.html"&gt;Top 10 Programming Languages You Must Know In 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-👇
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:👇
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🤔 How should I build my Frontend for a huge project?</title>
      <author>William McGonagle</author>
      <pubDate>Wed, 29 Dec 2021 22:44:02 +0000</pubDate>
      <link>https://dev.to/williammcgonagle/how-would-you-connect-a-frontend-and-backend-3p30</link>
      <guid>https://dev.to/williammcgonagle/how-would-you-connect-a-frontend-and-backend-3p30</guid>
      <description>&lt;p&gt;I’ve been working on building a non-profit, open-source organization for a while now and we have gotten to a solid point in the backend code. We have authentication, an event and rsvp system, profile picture generator, etc. If you want to check it out, you can &lt;a href="https://github.com/fairfield-programming/backend-server/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I’m also working on a frontend, but I’m at a stage where I can change the stack for it completely, so I wanted to hear your suggestions! You can check out the code so far &lt;a href="https://github.com/fairfield-programming/fairfield-programming.github.io/"&gt;here&lt;/a&gt;, and the domain for the website is &lt;a href="https://fairfieldprogramming.org"&gt;fairfieldprogramming.org&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Do you think I should switch to react, pure html/css, or should I use vue? And how do you think I should communicate with the server? &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>A printable, PDF - Git cheatsheet</title>
      <author>tq-bit</author>
      <pubDate>Wed, 29 Dec 2021 22:40:55 +0000</pubDate>
      <link>https://dev.to/tqbit/a-printable-pdf-git-cheatsheet-33bd</link>
      <guid>https://dev.to/tqbit/a-printable-pdf-git-cheatsheet-33bd</guid>
      <description>&lt;p&gt;Hello guys, &lt;/p&gt;

&lt;p&gt;instead of a new article, I'd like to share two printable cheatsheets with you. &lt;/p&gt;

&lt;p&gt;I hope you'll find these useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cheatsheet-1-common-git-commands-for-local-development"&gt;
  &lt;/a&gt;
  Cheatsheet 1: Common Git commands for local development
&lt;/h2&gt;

&lt;p&gt;The first cheatsheet shows a common development workflow when working on a development project. Among these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to initialize a Git repository&lt;/li&gt;
&lt;li&gt;How to add and remove files from the Git repos&lt;/li&gt;
&lt;li&gt;How to manage code changes over several new features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFqXX3C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u6kwij7r55y4tgnjuj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFqXX3C9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u6kwij7r55y4tgnjuj3.png" alt="Git cheatsheet one" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get the PDF from my Git repos: &lt;a href="https://github.com/tq-bit/dev-cheatsheets/blob/main/q-bit_cheatsheets_git_and_github_IGit%20Cheatsheet_I.pdf"&gt;https://github.com/tq-bit/dev-cheatsheets/blob/main/q-bit_cheatsheets_git_and_github_IGit%20Cheatsheet_I.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cheatsheet-2-remote-git-servers"&gt;
  &lt;/a&gt;
  Cheatsheet 2: Remote Git Servers
&lt;/h2&gt;

&lt;p&gt;The second cheatsheet shows you a common, distributed development pattern and visualizes how several maintainers work on the same codebase. &lt;/p&gt;

&lt;p&gt;It attempts to answer the questions about: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How does a pull request work?&lt;/li&gt;
&lt;li&gt;How are local and remote repositories synchronized?&lt;/li&gt;
&lt;li&gt;How to delete a remote branch?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GLZ1FjA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq8v3239ifeocsvvsvkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLZ1FjA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq8v3239ifeocsvvsvkd.png" alt="Image description" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get the PDF from my Git repos: &lt;a href="https://github.com/tq-bit/dev-cheatsheets/blob/main/q-bit_cheatsheets_git_and_github_IGit%20Cheatsheet_II.pdf"&gt;https://github.com/tq-bit/dev-cheatsheets/blob/main/q-bit_cheatsheets_git_and_github_IGit%20Cheatsheet_II.pdf&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How I started my Web Development career in 2021</title>
      <author>Margarita Vlachou</author>
      <pubDate>Wed, 29 Dec 2021 22:33:05 +0000</pubDate>
      <link>https://dev.to/mvlachou/how-i-started-my-web-development-career-in-2021-58aa</link>
      <guid>https://dev.to/mvlachou/how-i-started-my-web-development-career-in-2021-58aa</guid>
      <description>&lt;p&gt;2021 has been a very challenging and exciting year at the same time but at the end I managed to do the switch I always wanted... &lt;/p&gt;

&lt;p&gt;10 years ago I started my bachelor's degree in Information Technology but due to life circumstances I was never able to pursue that career as sometimes life gets in the middle you see. &lt;/p&gt;

&lt;p&gt;I remember, 6 years ago, I was talking with friends and they were asking me what I want to do, what is the dream job for me.. and I remember I was just smiling and I was saying "Web development" and everyone was telling me that I need to focus on that and follow my heart. But in life things aren't as straight forward sometimes. &lt;/p&gt;

&lt;p&gt;I was at a point in my life where I didn't have the space to think or dream about anything, but I had to do what I had to do in order to pay my bills. But every time I was closing my eyes ... I was keep dreaming and thinking about that dream career and job and I was instantly smiling.&lt;/p&gt;

&lt;p&gt;In 2020... and when the pandemic started, I realized that life can be too short and there is no reason to waste our time and do things we don't enjoy. For that reason, I decided to apply for a master's degree in Software Development. I was studying full time my online course, while I was working full time as well and sometimes without days off for weeks. But I said to myself that if I can push through this, then I will be unstoppable. &lt;/p&gt;

&lt;p&gt;I only new the basic of C++, HTML, CSS , JS and I just started learning React when I applied for my Masters. The challenge I had in front of me was unreal and many times I was getting frustrated and I was asking myself why I did this as I didn't have the knowledge required for that degree. I had to do python, develop a full stack application and all that while I had to learn the technologies as I go. It was tough...&lt;/p&gt;

&lt;p&gt;The first 2 semesters gone and I have been successful so far. In addition to that I had a full stack application in my hands as a project I could add to my portfolio. And that was the point when I started applying for jobs. I applied for over 100 jobs in 3 months time with no luck. And suddenly I've been offered a position as full stack developer position. I couldn't believe it. And few months later, I realized that I do enjoy more front end development and I moved to a different company as front end developer.&lt;/p&gt;

&lt;p&gt;The lesson I've learnt from that process is that you will never be 100% ready for any job but apply anyway. Employers are looking for skills and experience, but also they are looking for the right attitude and willingness to learn. Skills get be taught, but the right attitude can't.&lt;/p&gt;

&lt;p&gt;So if you are starting out now, make a portfolio and showcase some of the projects you have created, create an attractive resume to show your skills and personality and go get it !! You will fail, you will get rejected at the beginning....but this will help you to learn more and prepare you for the next interview. &lt;/p&gt;

&lt;p&gt;"In order to succeed you must have willing to fail"&lt;/p&gt;

&lt;p&gt;Good Luck :) &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why we used Docker for testing </title>
      <author>Nitzan Hen</author>
      <pubDate>Wed, 29 Dec 2021 21:11:09 +0000</pubDate>
      <link>https://dev.to/nitzanhen/why-we-used-docker-for-testing-p1d</link>
      <guid>https://dev.to/nitzanhen/why-we-used-docker-for-testing-p1d</guid>
      <description>&lt;p&gt;Perhaps the greatest lesson I've learned from creating &lt;a href="https://github.com/NitzanHen/agrippa"&gt;Agrippa&lt;/a&gt; so far is just how important tests are. Of course I knew they were important before - everybody does - but it's so easy to just push it aside and focus on more exciting code, or write some perfunctory tests that don't really, well, test anything. Eventually, however, slacking off on testing comes back to bite you; for me, luckily, it did when things were only getting started, but the point was clear - writing good tests is a top priority.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-challenging-tool-to-test"&gt;
  &lt;/a&gt;
  A challenging tool to test
&lt;/h2&gt;

&lt;p&gt;For Agrippa, however, writing good tests is far from trivial - it's a CLI for generating React components based on a project's environment (dependencies, existence of config files, etc.), as well as an optional &lt;code&gt;.agripparc.json&lt;/code&gt; config. In other words, a lot of its work is reading &amp;amp; parsing command-line arguments, looking up and reading certain files, and its end result is writing additional files. All of those are non-pure side effects, which are difficult to cover properly with just unit tests. &lt;/p&gt;

&lt;p&gt;Additionally, because Agrippa's defaults greatly depend on the project's environment, it's easy for tests to return false results because of the presence of an unrelated file or dependency. &lt;br&gt;
This is best explained with an example: when run, Agrippa auto-detects whether a project uses Typescript or not, by the existence of a &lt;code&gt;tsconfig.json&lt;/code&gt; file in it. However, Agrippa itself is written in Typescript, which means there's a &lt;code&gt;tsconfig.json&lt;/code&gt; file at its root. As a result, whenever running Agrippa in any sub directory of the project root, &lt;em&gt;it generates Typescript (&lt;code&gt;.ts&lt;/code&gt;/&lt;code&gt;.tsx&lt;/code&gt;) files unless explicitly told otherwise.&lt;/em&gt; And, if tests were stored, for example, in a &lt;code&gt;test&lt;/code&gt; folder in the project repository - they would all be tampered with (at least, those where files are looked up). A similar problem is cause by the existence Agrippa's own &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this in mind, when planning the implementation of testing I decided on these two key principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There need to be good &lt;em&gt;integration&lt;/em&gt; tests which test the process - including all of its non pure effects (parsing CLI options, reading files, writing files) - from start to finish, under different conditions and in different environments.&lt;/li&gt;
&lt;li&gt;The integration tests have to be executed in a space as &lt;em&gt;isolated&lt;/em&gt; as possible, due to the process being greatly dependent on the environment it's run in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second point is where you can see the need for &lt;em&gt;Docker&lt;/em&gt; - initially, I tried implementing the tests in a temporary directory created by Node and running the tests there, but this turned out to be too much work to build and maintain, and the created directory could still theoretically be non-pure. &lt;br&gt;
Docker, on the other hand, is all about spinning up isolated environments with ease - we have complete control over the OS, the file structure, the present files, and we're more explicit about it all. &lt;/p&gt;

&lt;p&gt;In our case, then, &lt;strong&gt;running the tests inside a docker container would get us the isolation we need&lt;/strong&gt;. So that's what we went with:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Solution file structure (simplified)&lt;/span&gt;
&lt;span class="nb"&gt;test&lt;/span&gt;/integration/
├─ case1/
│  ├─ solution/
│  │  ├─ ComponentOne.tsx
│  │  ├─ component-one.css
│  ├─ testinfo.json
├─ case2/
│  ├─ solution/
│  │  ├─ ComponentTwo.tsx
│  │  ├─ component-two.css
│  ├─ testinfo.json
├─ case3/
│  ├─ ...
├─ integration.test.ts
├─ jest.integration.config.js
Dockerfile.integration
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The end solution works like so:&lt;br&gt;
Integration test cases are stored under &lt;a href="https://github.com/NitzanHen/agrippa/tree/main/test/integration"&gt;&lt;code&gt;test/integration&lt;/code&gt;&lt;/a&gt;, in the &lt;a href="https://github.com/NitzanHen/agrippa"&gt;Agrippa repository&lt;/a&gt;. Each case contains a &lt;code&gt;testinfo.json&lt;/code&gt; file, which declares some general info about the test - a &lt;code&gt;name&lt;/code&gt;, a &lt;code&gt;description&lt;/code&gt; and the &lt;code&gt;command&lt;/code&gt; to be run - and a directory &lt;code&gt;solution&lt;/code&gt;, with the directories and files that are meant to be created by the command. The &lt;code&gt;test/integration&lt;/code&gt; directory also contains a Jest config, and &lt;a href="https://github.com/NitzanHen/agrippa/blob/main/test/integration/integration.test.ts"&gt;&lt;code&gt;integration.test.ts&lt;/code&gt;&lt;/a&gt;, which contains the test logic itself.&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;test:integration&lt;/code&gt; Node script is run, it builds a Docker image from &lt;a href="https://github.com/NitzanHen/agrippa/blob/main/Dockerfile.integration"&gt;&lt;code&gt;Dockerfile.integration&lt;/code&gt;&lt;/a&gt;, located at the project root. This is a two-stage build: the first stage copies the project source, builds it and packs it into a tarball, and the second copies &amp;amp; installs that tarball, then copies the &lt;code&gt;test/integration&lt;/code&gt; directory. After building the image, a container is created from it, which runs the tests inside.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/NitzanHen/agrippa/blob/main/test/integration/integration.test.ts"&gt;testing logic&lt;/a&gt; is non-trivial, too. It scans the &lt;code&gt;test/integration&lt;/code&gt; directory for cases, and creates a test suite for each (using &lt;code&gt;describe.each()&lt;/code&gt;). The test suite for each case starts by running the case - scanning the &lt;code&gt;solution&lt;/code&gt; directory, running the &lt;code&gt;agrippa&lt;/code&gt; command, then scanning the output directory - then compares the two results. A case is considered successful if (and only if) both &lt;code&gt;solution&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; have exactly the same directories, the same files, and the content in each file is the same.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-improvements"&gt;
  &lt;/a&gt;
  Further improvements
&lt;/h2&gt;

&lt;p&gt;So far, the solution has been working well. The script takes longer to run than a standard testing script, because of the time it takes for Docker to set up (about 60-70 seconds if Docker needs to build the image, a few seconds otherwise). However, it's simpler, more robust, and safer than implementing a custom solution (with temporary directories, for example), and adding new test cases is easy and boilerplate-free. &lt;/p&gt;

&lt;p&gt;The output (shortened for display purposes) looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJCBSOJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpe3u42rt7b4tnad42gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJCBSOJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rpe3u42rt7b4tnad42gl.png" alt="output, shortened" width="880" height="767"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One problem with the implementation, unrelated to Docker, is about using Jest as the testing framework. As it turns out, Jest is limited when it comes to asynchronous testing, and combining a dynamic number of test suites (one for each case), a dynamic number of tests in each, as well as asynchronous setup before all tests (scanning &lt;code&gt;test/integration&lt;/code&gt; for cases) and before each test (running the case) simply doesn't work out.&lt;/p&gt;

&lt;p&gt;When I get to it, I hope to switch to a different testing framework - &lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt; looks good for this particular scenario, and seems fun to get into.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Since Agrippa is greatly sensitive to the environment it's run in, &lt;br&gt;
we needed complete isolation of our testing environment for the tests to truly be accurate. Docker provides exactly that - and therefore we turned to it. The solution using it took some time to properly implement - but it turned out well.&lt;/p&gt;

&lt;p&gt;What do you think? do you have an improvement to suggest, or something to add? I'd love to hear from you!&lt;br&gt;
Thanks for your time.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>docker</category>
      <category>testing</category>
    </item>
    <item>
      <title>Functional Programming in Ruby with Blocks and Procs</title>
      <author>Karson Kalt</author>
      <pubDate>Wed, 29 Dec 2021 21:00:57 +0000</pubDate>
      <link>https://dev.to/karsonkalt/functional-programming-in-ruby-with-blocks-and-procs-362g</link>
      <guid>https://dev.to/karsonkalt/functional-programming-in-ruby-with-blocks-and-procs-362g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#objectoriented-programming-vs-functional-programming"&gt;
  &lt;/a&gt;
  Object-Oriented Programming vs Functional Programming
&lt;/h2&gt;

&lt;p&gt;Ruby is a true object-oriented programming language. Generally, we love object-oriented (OOP) programming! Object-oriented programming makes our code readable, reusable, modular, and is generally pretty simple paradigm to get our heads around.&lt;/p&gt;

&lt;p&gt;In Ruby, &lt;strong&gt;everything&lt;/strong&gt; is an object. We generally divide up our code into Classes and Instances, so this isn't an unfamiliar concept. Really, everything!&lt;/p&gt;

&lt;p&gt;Let's try it out!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;self&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; main&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; Object&lt;/span&gt;

&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; NilClass&lt;/span&gt;

&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; TrueClass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even &lt;code&gt;nil&lt;/code&gt;? Yes, &lt;code&gt;nil&lt;/code&gt; is the &lt;a href="https://www.rubyguides.com/2018/05/singleton-pattern-in-ruby/"&gt;singleton&lt;/a&gt; instance of &lt;code&gt;NilClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Okay, what is this &lt;code&gt;main&lt;/code&gt; thing? Well, &lt;code&gt;main&lt;/code&gt; is the default &lt;a href="https://codequizzes.wordpress.com/2014/04/23/rubys-main-object-top-level-context/"&gt;top level context&lt;/a&gt; provided to us in Ruby. Since everything is an object, we call this the &lt;strong&gt;global object&lt;/strong&gt;. But even our global object is an instance of &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In fact, the class &lt;code&gt;Object&lt;/code&gt; is an instance of the class &lt;code&gt;Class&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; Class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can override the class of Class and confirm for ourselves!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Class&lt;/span&gt;
  &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;prev_new&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Creating a new &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; class. &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;prev_new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; ...&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; Creating a new Text class.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-about-methods"&gt;
  &lt;/a&gt;
  What About Methods?
&lt;/h3&gt;

&lt;p&gt;When we this is where things get a little tricky. A Ruby method is just a snippet of code and &lt;strong&gt;not&lt;/strong&gt; an object.&lt;/p&gt;

&lt;p&gt;In other languages that consider the functional paradigm (in this case TypeScript), we can assign functions to variables and call them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ourFunction&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ourFunction&lt;/span&gt;
&lt;span class="nx"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// "hello"&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try a similar approach in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;

&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# NoMethodError (undefined method `variable' for main:Object)&lt;/span&gt;
&lt;span class="n"&gt;variable&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Ruby, &lt;code&gt;variable&lt;/code&gt; is assigned the return value of &lt;code&gt;method&lt;/code&gt;. As we call &lt;code&gt;method&lt;/code&gt;, it is implicitly invoked. Calling &lt;code&gt;method&lt;/code&gt;, the method is invoked, the same as &lt;code&gt;method()&lt;/code&gt;. In our current paradigm, there is no way we can pass the function itself to another variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#higherorder-functions"&gt;
  &lt;/a&gt;
  Higher-order functions
&lt;/h3&gt;

&lt;p&gt;In some ways, this limitation impedes our ability to create &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt; code.&lt;/p&gt;

&lt;p&gt;We also lose the ability to create higher-order functions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Higher-order function&lt;/strong&gt;: a function that takes a function as a parameter or returns a function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's take a look at a simple higher-order function in TypeScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;number2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;doubler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;doubler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Ruby, we can echo some of the principles of functional programming using the powers of &lt;strong&gt;blocks&lt;/strong&gt; and &lt;strong&gt;Procs&lt;/strong&gt;! Let's give it a shot!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proc-101"&gt;
  &lt;/a&gt;
  Proc 101
&lt;/h2&gt;

&lt;p&gt;Before we get into the nitty-gritty code, let's pause and better understand &lt;code&gt;procs&lt;/code&gt;. A &lt;code&gt;Proc&lt;/code&gt; is a special type of Ruby object that allows us to store a block of code as an object. As we instantiate our &lt;code&gt;Proc&lt;/code&gt; instance, we can pass a block to the instantiation immediately following any method parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;print_greetings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Welcome!"&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Bonjour!"&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"¡Bienvenidas!"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;print_greetings&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Proc:0x00007fe0ff042a08&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can call out proc in a few different ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chaining the method &lt;code&gt;.call&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Chaining method &lt;code&gt;.yield&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Using bracket notation &lt;code&gt;[]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Invoking &lt;code&gt;.call&lt;/code&gt; with syntactic sugar &lt;code&gt;.()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;print_greetings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
&lt;span class="n"&gt;print_greetings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;yield&lt;/span&gt;
&lt;span class="n"&gt;print_greetings&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;print_greetings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Welcome!&lt;/span&gt;
&lt;span class="c1"&gt;# Bonjour!&lt;/span&gt;
&lt;span class="c1"&gt;# Bienvenidas!&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#block-parameters"&gt;
  &lt;/a&gt;
  Block Parameters
&lt;/h2&gt;

&lt;p&gt;Similar to regular methods, a blocks can receive a parameter. In fact, they have a few things in common:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Block parameters can have default values&lt;/li&gt;
&lt;li&gt;Block parameters can be set up to accept a keyword&lt;/li&gt;
&lt;li&gt;We can use the splat operator &lt;code&gt;*&lt;/code&gt; to allow an undetermined amount of arguments to be captured.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a few different rules when it comes to block parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If an argument is not provided, &lt;code&gt;nil&lt;/code&gt; will be assigned to the parameter&lt;/li&gt;
&lt;li&gt;Arguments are placed inside the pipes following the opening of the block&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's create a proc that receives an argument as a proc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;multiply_by_two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To transform our &lt;code&gt;Proc&lt;/code&gt; back into a block, we can use the &lt;code&gt;&amp;amp;&lt;/code&gt; operator inside of our method calls that expect a block. The two examples below are equivalent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
     &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;multiply_by_two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How cool is that! Let's review a few rules passing blocks to a method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When passing a proc transformation, it must come as the final argument of the method e.g. &lt;code&gt;.ourFunction(1, 2, &amp;amp;multiply_by_two)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We can only pass one block to a method. Trying to call &lt;code&gt;[1,2,3,4,5].map(&amp;amp;multiply_by_two, &amp;amp;multiply_by_three)&lt;/code&gt; would produce a SyntaxError.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#recreating-higherorder-functions-with-procs"&gt;
  &lt;/a&gt;
  Re-creating Higher-order Functions with Procs
&lt;/h2&gt;

&lt;p&gt;Let's revisit the higher-order function from our example above and re-create it with our newfound knowledge of blocks and Procs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;number2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;number2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;doubler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Proc:0x00007fe7719b91b8&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;doubler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#understanding-raw-yield-endraw-"&gt;
  &lt;/a&gt;
  Understanding &lt;code&gt;yield&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you're familiar with Rails, you have likely seen the &lt;code&gt;yield&lt;/code&gt; keyword. Allowing you to inject parts of your &lt;code&gt;.erb&lt;/code&gt; inside of templates. Similarly, in plain old Ruby, the &lt;code&gt;yield&lt;/code&gt; pauses execution of the current code and yields to the block that was passed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;our_method&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"top of method"&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"bottom of method"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;our_method&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"we are inside the block"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# top of method&lt;/span&gt;
&lt;span class="c1"&gt;# we are inside the block&lt;/span&gt;
&lt;span class="c1"&gt;# bottom of method&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can pass parameters to the block by passing them following yield.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;our_method_w_parameters&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"top of method"&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"karson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"nyc"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"bottom of method"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;our_method_w_parameters&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"my name is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, and I live in &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# top of method&lt;/span&gt;
&lt;span class="c1"&gt;# my name is karson, and I live in nyc&lt;/span&gt;
&lt;span class="c1"&gt;# bottom of method&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But how reusable is this code when it's hard coded? Let's pair this newfound power with principles of OOP to use instance attributes with &lt;code&gt;yield&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proc-scope"&gt;
  &lt;/a&gt;
  Proc Scope
&lt;/h2&gt;

&lt;p&gt;Procs exist in the scope where they are defined, not in the scope where they are called. This can lead to some misleading and confusing references to &lt;code&gt;this&lt;/code&gt;. Let's take a look at the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:loc&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
        &lt;span class="vi"&gt;@loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ex_block&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"karson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"nyc"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Person:0x00007fded014edb0 @name="karson", @loc="nyc"&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ex_block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# NoMethodError (undefined method `name' for main:Object)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;self&lt;/code&gt; refers to the &lt;code&gt;main&lt;/code&gt; object which tells us that we are in the global scope. If we want to bind &lt;code&gt;self&lt;/code&gt; to the instance where the block is called, it must be defined upon instantiation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
    &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:instance_proc&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
        &lt;span class="vi"&gt;@loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;
        &lt;span class="vi"&gt;@instance_proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;loc&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ex_proc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"karson"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"nyc"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Person:0x00007ff6aa94c228 @name="karson", @loc="nyc", @instance_proc=#&amp;lt;Proc:0x00007ff6aa94c1d8&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ex_proc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_proc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# karson&lt;/span&gt;
&lt;span class="c1"&gt;# nyc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ending-challenge"&gt;
  &lt;/a&gt;
  Ending Challenge
&lt;/h2&gt;

&lt;p&gt;Using what you now know about &lt;code&gt;Procs&lt;/code&gt; and &lt;code&gt;blocks&lt;/code&gt;, let's re-create the method &lt;code&gt;.map&lt;/code&gt; on our custom class &lt;code&gt;MArray&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MArray&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;newMArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
      &lt;span class="n"&gt;newMArr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;newMArr&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt;[1, 2, 3, 4, 5]&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Procs are a powerful Ruby concept that allow us to keep code DRY and implement features that play of OOP concepts and functional programming. Check out the official &lt;a href="https://ruby-doc.org/core-2.6/Proc.html#method-i-call"&gt;Ruby-Doc&lt;/a&gt; documentation on Procs and let me know your thoughts in the comments blow!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>functional</category>
      <category>beginners</category>
    </item>
    <item>
      <title>AWS Reserved Instances: Exchange To The Rescue</title>
      <author>Facets Cloud</author>
      <pubDate>Wed, 29 Dec 2021 20:55:09 +0000</pubDate>
      <link>https://dev.to/facetscloud/aws-reserved-instances-exchange-to-the-rescue-3d7k</link>
      <guid>https://dev.to/facetscloud/aws-reserved-instances-exchange-to-the-rescue-3d7k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;At &lt;a href="//facets.cloud"&gt;Facets.cloud&lt;/a&gt; we are planning to have a series of articles that aim to explain some of the complex cloud pricing logic and when you need to use them.&lt;br&gt;
In this first part, we take up cost implications of exchange of RI (Reserved Instances).&lt;/p&gt;

&lt;p&gt;AWS RIs are a great way to obtain a discount on your always running workloads (base compute) by committing for certain duration like 1 year or 3 years. Typically, you would look at your base on-demand compute to determine how many RIs to purchase at any time. This is all great in the normal course i.e. your business is growing and you are increasing the cloud spend and possibly buying more RIs time-to-time.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#aws-cost-logic"&gt;
  &lt;/a&gt;
  AWS Cost Logic
&lt;/h2&gt;

&lt;p&gt;For AWS too, it is a good deal as they get assured future business and lock-in. Another important point to note is that for cloud providers, the cost of an instance, storage or any other services reduces year on year. This is mainly due to technological advancements and scaling benefits.&lt;/p&gt;

&lt;p&gt;So if AWS is offering you an instance for 10$ today, let’s say that if it costs AWS 9$ today, a year on it would cost them 7$ and two years later maybe 6$. It makes sense for AWS to sell you 3 year reserved instance at 27$ (9*3) today. A win-win situation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#exigency-scenario"&gt;
  &lt;/a&gt;
  Exigency Scenario
&lt;/h2&gt;

&lt;p&gt;Looking at discounts , say you have bought some RIs. But now consider an exigency like a large customer churn, or a great re-architecture, or a Covid on-set that leads to a reduction in your on-demand compute base. In these cases, your On-demand RIs will not get fully utilized, thus leading to cost leakage.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-avoid-cost-leakage"&gt;
  &lt;/a&gt;
  How to Avoid Cost Leakage
&lt;/h2&gt;

&lt;p&gt;Here is a tip to spread your No-upfront, Convertible RI commitments over a longer duration and reduce immediate $/hr spend for temporary relief.&lt;br&gt;
Say, you have 3 RI Line-items purchased sometime in the past, amounting to 26 m5.2xlarge machines, expiring on June 30th, 2022. Assume today to be 15th Oct 2021. Due to an exigency, your current requirement has reduced drastically by 70%.&lt;br&gt;
You can simply reserve one t3.nano (the smallest instance) as of today for 3 years (no upfront, Convertible), thus expiring on 15th Oct 2024. When you select all 4 RIs Line-items and put them for exchange, the number of machines reduces to 6 from 26 with an expiration date as 15th Oct 2024. You now have to worry about utilizing these 6 machines instead of 26.&lt;/p&gt;

&lt;p&gt;This video demonstrates the same.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JX3BYryW2OA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ri-exchange-scenario"&gt;
  &lt;/a&gt;
  RI Exchange Scenario
&lt;/h2&gt;

&lt;p&gt;The way RI exchanges work is that AWS takes the SUM $ commitment value of the RIs to be exchanged and spreads it over the Max expiration date of the RIs to be exchanged. What we have essentially done is spread the 8.5 months of leftover commitment over 36 months. (8.5*26 is roughly 36*6).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-aws-allows-exchanges-to-extend-but-not-shortened"&gt;
  &lt;/a&gt;
  Why AWS Allows Exchanges to Extend but not Shortened
&lt;/h2&gt;

&lt;p&gt;Can you do the reverse, i.e., buy 6 machines for 36 months and then later exchange them for 26 machines for 8.5 months? No. For AWS, this is a loss making proposition. Remember, future cloud costs are always reducing for AWS. If you take the first example above, one machine spread over three year (9 + 7 + 6 = 22$) is cheaper for AWS than equivalent three machine for the current year (9*3=27). Hence AWS will always stretch the exchange to maximum expiring item but never do the reverse.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-and-summary"&gt;
  &lt;/a&gt;
  Conclusion and Summary
&lt;/h2&gt;

&lt;p&gt;Nonetheless, in times of unforeseen bad luck, it still makes a lot of sense for you to use RI exchanges and control costs and leakages.&lt;br&gt;
&lt;strong&gt;Few points to note here&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This process is irreversible as explained earlier. So if your usage is back, you have to purchase new RIs.&lt;/li&gt;
&lt;li&gt;You have a longer commitment with smaller $/hour than earlier. The total commitment remains the same.&lt;/li&gt;
&lt;li&gt;Applies to No-upfront, convertible RIs only and not for other mechanism like AWS Savings plan.&lt;/li&gt;
&lt;li&gt;You can of course sell RIs but some restrictions apply like you can’t sell Convertible RIs at the moment. AWS docs here.
Stay tuned for more tips on how to choose wisely between different reservation instruments like Standard, Convertible and Savings Plan.
Initial version of this article was published at &lt;a href="//facets.cloud"&gt;Facets.Cloud blog here.&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
    </item>
    <item>
      <title>8 Ways To Drastically Boost Your Developer Productivity</title>
      <author>Robbie Cahill</author>
      <pubDate>Wed, 29 Dec 2021 20:54:24 +0000</pubDate>
      <link>https://dev.to/robbiecahill/8-ways-to-drastically-boost-your-developer-productivity-1l0b</link>
      <guid>https://dev.to/robbiecahill/8-ways-to-drastically-boost-your-developer-productivity-1l0b</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;These eight productivity tips will supercharge your productivity as developer. You'll save hours of time which you can then invest in other activities.&lt;/p&gt;

&lt;p&gt;This is not a complete list of everything you should be doing, but these things alone will drastically improve your productivity if you are not already doing them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-small-amounts-of-time-from-repetitive-tasks-adds-up"&gt;
  &lt;/a&gt;
  How small amounts of time from repetitive tasks adds up
&lt;/h4&gt;

&lt;p&gt;Lets say you are writing code in an old Java monolith and your flow for every change you make looks something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Save file (1 second)&lt;/li&gt;
&lt;li&gt; Build Project in IDE (5 seconds)&lt;/li&gt;
&lt;li&gt; Deploy application war file into old J2EE container (30 seconds)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For every change it takes 36 seconds before you can get feedback and try out your changes. This might not sound like a lot, but if you are doing this for every change this might happen 50 or more times per day. That's 1800 seconds, or a half an hour that you could have spent doing other things.&lt;/p&gt;

&lt;p&gt;Over a 5 day working week, this adds up to 25 hours or just over a day of time lost. So if you can solve this problem, it will be as if you worked 6 days a week instead of 5 when all you did is remove a repetitive task.&lt;/p&gt;

&lt;p&gt;How would I solve this specific problem? Use a newer framework with Hot Reload support. Just save your file and the change is automatically compiled and deployed without the need to restart the container. Newer Java frameworks such as Spring Boot support this feature. We'll go into more detail about Hot Reload later in the article.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automating-repetitive-tasks-with-scripts"&gt;
  &lt;/a&gt;
  Automating repetitive tasks with scripts
&lt;/h4&gt;

&lt;p&gt;If there is one thing that could boost your productivity the most, its automating repetitive tasks with scripts. I highly recommend writing &lt;a href="https://linuxconfig.org/bash-scripting-tutorial-for-beginners"&gt;Bash Scripts&lt;/a&gt; because it makes it easy to chain multiple commands together and these are the same commands you might frequently run on a day to day basis.&lt;/p&gt;

&lt;p&gt;A lot of modern development is done on the command line with commands like &lt;code&gt;npm install&lt;/code&gt;. There is IDE integration for some of these things, but I highly recommend learning and using the command line for one reason: Its scriptable. Generally its also faster to type a command than it is to point and click several times in your IDE to perform the same task.&lt;/p&gt;

&lt;p&gt;Whenever you find yourself repeatedly doing the same thing or typing in the same set of commands, consider putting this into a script. Once this is done properly, the script will always run the commands in the correct order and will never make a mistake.&lt;/p&gt;

&lt;p&gt;It might run in under a second compared with you taking say 30 seconds (which as we mentioned before, can add up over time).&lt;/p&gt;

&lt;p&gt;Scripts also mean you don't have to remember complex syntax for common commands, although you can also use shell aliases for that.&lt;/p&gt;

&lt;p&gt;A few random scripts I have set up locally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Back up my local database&lt;/li&gt;
&lt;li&gt;Dump the latest copy of the testing database and automatically import it to my local database. It calls the previous script to take a backup first, of course!&lt;/li&gt;
&lt;li&gt;Start and configure multiple interdependent microservices locally. Its a pain to do this manually but easy with a script.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#use-a-real-debugger-instead-of-printing-variables"&gt;
  &lt;/a&gt;
  Use a real debugger instead of printing variables
&lt;/h4&gt;

&lt;p&gt;Back when I was a mid level engineer, learning how to use a debugger was one thing by itself that supercharged my productivity. I could do in a couple of hours work that might have taken me a day to do. Fixing bugs and building out features was much easier.&lt;/p&gt;

&lt;p&gt;I've found debugging especially useful when exploring unfamiliar codebases that I didn't write. You can easily see the results of even the most complex logic written in weird ways. Its much easier to reason out complex, convoluted logic when you can run it line by line and see how things change.&lt;/p&gt;

&lt;p&gt;If you've ever used &lt;code&gt;console.log()&lt;/code&gt; in JavaScript, &lt;code&gt;var_dump()&lt;/code&gt; in PHP, &lt;code&gt;System.out.println()&lt;/code&gt; in Java or a similar function in another language to print a value to the console so that you can see whats going on inside your code, you might know how tedious it can get if you are trying to debug something complex.&lt;/p&gt;

&lt;p&gt;You print one value at a time and you generally need to write a new log statement for each value you want to see. If the value you are looking at changes, you need to log it again. Its a bit like poking around with a blindfold or in the dark. Lets not forget the possibility that you might accidentally commit your debug statements!.&lt;/p&gt;

&lt;p&gt;Human working memory is limited so once you've manually printed enough variables, the values will start to disappear from your mind and then you'll have to print them again or write them down somewhere and update them as they change. Trying to keep everything in working memory takes valuable brain resources that you could redirect towards making your code work the way you want it to, following best practice or writing clean code.&lt;/p&gt;

&lt;p&gt;Enter the debugger: Set a breakpoint in your code then run your app. When your app reaches the line you set a breakpoint on, you'll be able to see all variables in scope in the debug tab.&lt;/p&gt;

&lt;p&gt;There is no more need to juggle lots of values in your working memory. With just one action, you can now see everything instead of just one value at a time.&lt;/p&gt;

&lt;p&gt;I started with just debugging my own application code but as time went by and I became more experienced, I found I could get great insights by debugging framework and library code (such as the code for &lt;code&gt;express&lt;/code&gt;). I was able to find answers to questions that weren't even listed in the documentation for various frameworks and libraries, which was often incomplete or poorly written. &lt;/p&gt;

&lt;p&gt;The debugger always tells you what these frameworks and libraries are really doing, regardless of the accuracy or completeness of their documentation. I often find it faster to debug a framework or library before I read their documentation - complex concepts can take lots of words to explain but a debugger can get you the answers quickly.&lt;/p&gt;

&lt;p&gt;If you are using Node want to learn how to set up your debugger in vscode, see my other article &lt;a href="https://dev.to/ciphercode/debug-a-nodejs-express-app-with-vscode-2bh2"&gt;Supercharge Your Node Productivity With Debugging&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-the-fuzzy-finder"&gt;
  &lt;/a&gt;
  Use the fuzzy finder
&lt;/h4&gt;

&lt;p&gt;Many of us are still working with large monolithic codebases that sometimes have thousands of files.&lt;/p&gt;

&lt;p&gt;How are you supposed to find &lt;code&gt;Employee.js&lt;/code&gt;, hidden in &lt;code&gt;/src/authentication/userTypes/Employee.js&lt;/code&gt; amongst the thousands of &lt;code&gt;.js&lt;/code&gt; files and hundreds of folders in your project? Manually go looking for the file through the directory tree? Ask another developer who is more familiar with the codebase?&lt;/p&gt;

&lt;p&gt;Nope, just use the fuzzy finder! Type in &lt;code&gt;Employee.js&lt;/code&gt; and you'll have found your file in seconds.&lt;/p&gt;

&lt;p&gt;Here's how it works. In &lt;code&gt;vscode&lt;/code&gt;, press &lt;code&gt;Alt+P&lt;/code&gt; and then type in the name of the file you are looking for. The result will appear instantly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The fuzzy finder in vscode&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lHVfjvNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://expose.sh/blog/8-ways-to-drastically-boost-your-developer-productivity/vscode-fuzzy-finder.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lHVfjvNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://expose.sh/blog/8-ways-to-drastically-boost-your-developer-productivity/vscode-fuzzy-finder.png" alt="the fuzzy finder in vscode" width="880" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are using IntelliJ or WebStorm, press &lt;code&gt;shift&lt;/code&gt; twice quickly (aka double shift) instead of pressing &lt;code&gt;Alt+P&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#use-hot-reload-and-autosave"&gt;
  &lt;/a&gt;
  Use Hot Reload and autosave
&lt;/h4&gt;

&lt;p&gt;If you are writing code for a web application or service and you are not using PHP (which has the benefits of hot reload built in), you probably need to do one or more of the following for every change you make to your code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make your change&lt;/li&gt;
&lt;li&gt;Save file&lt;/li&gt;
&lt;li&gt;Compile code (for compiled languages)&lt;/li&gt;
&lt;li&gt;Restart server&lt;/li&gt;
&lt;li&gt;For some environments, re deploy your code and wait for it to be deployed&lt;/li&gt;
&lt;li&gt;Test your code&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybe this takes you 30 seconds to a minute each time, but remember this adds up to days and weeks over time.&lt;/p&gt;

&lt;p&gt;With hot reload and autosave, you can reduce this to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make your change

&lt;ul&gt;
&lt;li&gt;Your IDE automatically saves your file&lt;/li&gt;
&lt;li&gt;In the background, the change is automatically detected and compiled (if needed) and your running server is either restarted or updated with the new code, typically in less than 5 seconds&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test your code&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Java, Hot Reload this is often referred to as &lt;a href="https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/howto-hotswapping.html"&gt;Hot Swapping&lt;/a&gt;. For Node you can use &lt;a href="https://www.npmjs.com/package/nodemon"&gt;nodemon&lt;/a&gt; and point it at your entry point script.&lt;/p&gt;

&lt;p&gt;I have more detailed instructions on setting up &lt;code&gt;nodemon&lt;/code&gt; for Node in my other article &lt;a href="https://dev.to/robbiecahill/six-ways-to-drastically-boost-your-productivity-as-a-node-developer-1mjd"&gt;Six Ways To Drastically Boost Your Productivity As A Node developer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most IDEs have an auto save feature. In vscode, its as simple as selecting &lt;code&gt;File &amp;gt; Auto Save&lt;/code&gt;. Check your IDEs documentation for how to enable it.&lt;/p&gt;

&lt;p&gt;If you are afraid of autosave saving mistakes, you should be using source control like &lt;code&gt;git&lt;/code&gt; and regularly commit your code. Then you can quickly revert back to working versions of your code.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#automate-your-testing"&gt;
  &lt;/a&gt;
  Automate your testing
&lt;/h4&gt;

&lt;p&gt;Manual testing is one of the most time consuming and least enjoyable tasks your average developer does as a part of their work.&lt;/p&gt;

&lt;p&gt;Back when developers followed the old clunky SDLC model (Now mostly replaced by Agile) it was often said testing takes the around same amount of time as the "analysis" and code writing phases combined.&lt;/p&gt;

&lt;p&gt;You might make a one line change that is high impact, then you need to spend hours testing it.&lt;/p&gt;

&lt;p&gt;There are different types of automated tests, from browser tests that can point and click through an application like a real user, to unit tests. How to write each type would take another whole guide (let me know in the comments below if I should write one?). All types of automated testing are faster than manual testing.&lt;/p&gt;

&lt;p&gt;Even for the slowest common type of automated test (browser tests) you can sit back and watch the test run, then go off and grab a coffee or do something productive.&lt;/p&gt;

&lt;p&gt;There are some cases where manual testing is unavoidable, but if you find yourself testing the same thing repeatedly consider writing an automated test to save your time.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#share-your-work-early-with-a-public-url"&gt;
  &lt;/a&gt;
  Share your work early with a public URL
&lt;/h4&gt;

&lt;p&gt;Did you know you can get a public URL for a Node application being served from &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;127.0.0.1&lt;/code&gt; on your local machine, even if its behind a firewall or corporate network? It doesn't require any networking config and you can do it in a single command with &lt;code&gt;expose&lt;/code&gt;, for example &lt;code&gt;expose 80 as myapi.expose.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This lets you share your work early with your collaborators - such as other engineers, customers or product managers and get fast feedback without needing to set up a full deployment pipeline. The earlier you share your work the less rework you'll need to do in the long run.&lt;/p&gt;

&lt;p&gt;You could be writing a back end API, share a public URL for that and then do live debugging as the React front end developer you are collaborating with sends a request from their application to your API.&lt;/p&gt;

&lt;p&gt;Why not do live debugging while webhook providers send you webhook requests, instead of spending hours reading their (often not so great) documentation?&lt;/p&gt;

&lt;p&gt;If you are on Linux, run this to install &lt;code&gt;expose&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; https://expose.sh/sh/install-linux.sh | &lt;span class="nb"&gt;sudo &lt;/span&gt;bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are on a Mac, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; https://expose.sh/sh/install-mac.sh &lt;span class="nt"&gt;--output&lt;/span&gt; install-mac.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;bash install-mac.sh&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Windows head over to the &lt;a href="https://expose.sh/install/"&gt;Installation Page&lt;/a&gt; and download the &lt;code&gt;exe&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then you can run &lt;code&gt;expose &amp;lt;port&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;port&amp;gt;&lt;/code&gt; is the port number your app is running on (for example, &lt;code&gt;expose 80&lt;/code&gt;). More detailed instructions are available in the &lt;a href="https://expose.sh/docs/"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-vimium-and-test-your-web-applications-without-a-mouse"&gt;
  &lt;/a&gt;
  Use Vimium and test your web applications without a mouse
&lt;/h4&gt;

&lt;p&gt;Sometimes, manual testing is unavoidable. Its well known that the keyboard is faster than the mouse. Normally, web browsing including testing web applications requires you to use your mouse. But not anymore!&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en"&gt;Vimium&lt;/a&gt;. Its a an extension available for Chrome and Firefox which allows you to use websites and web apps using your keyboard.&lt;/p&gt;

&lt;p&gt;This means you can do different types of manual testing (such as placing an order) entirely with the keyboard and without any mouse input, saving you time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;This isn't a complete list of things you can do to increase your developer productivity but its a good starting point.&lt;/p&gt;

&lt;p&gt;These simple things can save you hours of unnecessary work which over time scales as little as a week can add up to days.&lt;/p&gt;

&lt;p&gt;If you found this article useful, please consider sharing around it to help others.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h5&gt;

&lt;p&gt;If you'd like more productivity tips specific to NodeJS and JavaScript, see my other article &lt;a href="https://dev.to/robbiecahill/six-ways-to-drastically-boost-your-productivity-as-a-node-developer-1mjd"&gt;Six Ways To Drastically Boost Your Productivity As A Node developer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For NodeJS specific debugging instructions, read &lt;a href="https://dev.to/robbiecahill/debug-a-nodejs-express-app-with-vscode-2bh2"&gt;Supercharge Your Node Productivity With Debugging &lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Simplifying Null Safety in Flutter </title>
      <author>Olamide Gabriel</author>
      <pubDate>Wed, 29 Dec 2021 20:43:42 +0000</pubDate>
      <link>https://dev.to/lordlamee/simplifying-null-safety-in-flutter-cph</link>
      <guid>https://dev.to/lordlamee/simplifying-null-safety-in-flutter-cph</guid>
      <description>&lt;p&gt;&lt;strong&gt;INTRODUCTION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Have you ever run into the red screen of horror while debugging a flutter app?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3cwngwOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637047117922/TjKlGFJap.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3cwngwOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637047117922/TjKlGFJap.jpeg" alt="null.jpg" width="250" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I mean, if you haven’t, are you a Flutter developer at all?&lt;/p&gt;

&lt;p&gt;Out of numerous reasons for your app to relay your error in such a manner, null errors are one of the most common. In an attempt to eliminate this and the numerous null errors that occur while building/debugging your app, the great Flutter and Dart team introduced Null Safety.&lt;/p&gt;

&lt;p&gt;In simple terms, Null Safety allows the dart analyser to detect possible null errors pre-compilation, that is, before you even run your app. It ensures proper notifications of possible null data that could break your app while running.&lt;/p&gt;

&lt;p&gt;This article is for you, if&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You understand the basics of data types in Dart.&lt;/li&gt;
&lt;li&gt;You know a bit about classes, objects, i.e. the basics of OOP in Dart.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Else, you might want to go through the  &lt;a href="https://dart.dev/docs"&gt;Dart documentation.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we will discuss the syntax changes and what they mean with the introduction of Null Safety.&lt;/p&gt;

&lt;p&gt;You may have seen characters such as "?", "!", and "??", and keywords such as "late".They are the main code additions you are required to understand.&lt;/p&gt;

&lt;p&gt;For the dart analyser to help you convert your runtime errors to "code time" errors, it needs some information. Before Null Safety, all variables were particularly nullable, so developers may forget to check if these variables are null, causing the red screen of death during debugging quite often or crash during production in the worst-case scenario. The analyser needs to know what variables might be null or will never be null.&lt;/p&gt;

&lt;p&gt;Before Null Safety, you would create a variable like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;///BEFORE
int myFavoriteNumber = 5;
//OR
int myFavoriteNumber;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first instance, we assigned myFavoriteNumber a value of 5. Although, along the line, we could assign it a value of null by writing&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;myFavoriteNumber = null;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And in the second instance, myFavoriteNumber was null from the start.&lt;/p&gt;

&lt;p&gt;However, with Null Safety present, the rules have changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Instance 1
int favoriteNonNull = 7;
# Instance 2
int? favoriteNullable;
#Instance 3
int? favoriteNullabe2 = 10;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instance 1: We created a non-nullable variable and assigned it a value of 7. What does this mean? We have simply told the dart analyser that this variable can and must &lt;strong&gt;NEVER&lt;/strong&gt; be null. It means you must assign it a value at the point of creation, and you could &lt;strong&gt;NEVER&lt;/strong&gt; assign it a null value in the future. Going against any of these would force the dart analyser to scream in your face.&lt;/p&gt;

&lt;p&gt;Instance 2&amp;amp;3: We added a "?" right in front of the data type. It tells the analyser that "favoriteNullable" can be null. Thus, in cases where a non-nullable variable is required, the dart analyser should remind us to do a &lt;strong&gt;null check&lt;/strong&gt;. You can mess with this variable and assign it a null value. The analyser is your guide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you perform null checks?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While writing Dart, which is an OOP language, you might find yourself using objects a lot with attributes/properties that may have null values. Your objects could be null as well as variables. Not to worry, "?" and "??" help with this issue.&lt;/p&gt;

&lt;p&gt;Let us examine a simple class "Dog" with attributes "name", "colour", and "weight".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Dog{
String? name;
String? colorName;
int? weight;
Dog({this.name,this.colorName,this.weight});
}

Dog? nullableDog;
Dog? nullableDog2 = Dog(
name :  "Jack",
colorName:  "Brown",
weight : 20,
);
Dog nonNullableDog = Dog(
name :  "Finn",
weight : 18,
);
#Extra variable for demo purposes
int? demoVariable = 30;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The easiest and most common way to perform a null check is using an &lt;strong&gt;if&lt;/strong&gt; statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(variable != null){
//use variable
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we want to explore how the characters mentioned above can help us instead.&lt;br&gt;
For instance, say you're to use a nullable String in a Text widget which would not take nullable strings as a parameter. "??" comes in handy as you can use it to perform a quick null check and provide an alternative for the widget, thereby preventing possible crashes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;String? parameter;
//Some Widget Tree
...
Text(
parameter ?? "Alternative Text",
)
...
//Some Widget Tree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: The dart analyser won't be too happy about an absence of a null check and alternative in this scenario.&lt;/p&gt;

&lt;p&gt;What if we wanted the name of our "nullableDog2" created above?&lt;/p&gt;

&lt;p&gt;Recall that "nullableDog2" is a nullable object with the nullable attribute "name". Did that confuse you? It simply means our "nullableDog2" may be null, and even if it isn't, its attribute name may be null as well. If we use this value in our Text widget, we would need to perform some extra checks. "?" allows you to perform a quick null check on an object while accessing its attributes. It saves you a couple of lines of code and makes objects easier to use within widgets.&lt;/p&gt;

&lt;p&gt;Here’s a brief demonstration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Some Widget Tree
...
Text(
nullableDog2?.name ?? "Alternative Text",
)
...
//Some Widget Tree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The dart analyser isn't perfect and sometimes would not realise some things a developer would. For example, you might be 100% sure a variable you have created to be nullable would not be null at the point you wish to use it. You want to shut the analyser up and tell it you know better. That's fine, but it comes with the risk of crashing your app. You need to be  100% sure. Dart has provided "!" to help silence the edit time warnings.&lt;/p&gt;

&lt;p&gt;A quick demo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;String? parameter;

//Written some magic somewhere to make sure "parameter" isn't null when I need it...
//Some Widget Tree
...
Text(
parameter!,
)
...
//Some Widget Tree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;String? parameter;

//Some Widget Tree
...
if(parameter != null) //the analyzer may not detect this check
Text(
parameter!,
)
...
//Some Widget Tree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's talk about the &lt;strong&gt;late&lt;/strong&gt; keyword. Referencing the meaning of the word “late”, which means "not on time", by using this keyword, you are simply telling Dart that your variable is not going to be null, but you are not going to assign a value immediately it's created. You're going to assign it a value a little bit &lt;strong&gt;late&lt;/strong&gt;r before it is used.&lt;br&gt;
This is useful for variables that are expensive to create.&lt;br&gt;
Note: Failure to assign a value to late variables would cause your app to crash/errors during debugging.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Inside some stateful widget
...
late AnimationController controller;
@override
initState(){
super.initState();
controller = AnimationController(
vsync:this,
);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have covered the basics of null safety and the keywords you would mainly be dealing with. I hope this will help you prevent more null errors in the future!&lt;/p&gt;

&lt;p&gt;For more examples and active practice, check out &lt;a href="https://dartpad.dev/workshops.html?webserver=https://dartpad-workshops-io2021.web.app/null_safety_workshop"&gt;intro to null safety by the Dart team&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If this was useful for you, be sure to leave a like and comment, and please share. Thank you!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>nullsafety</category>
      <category>dart</category>
    </item>
    <item>
      <title>Highlighting: sync-contribution-graph</title>
      <author>Matthew Foley</author>
      <pubDate>Wed, 29 Dec 2021 20:39:25 +0000</pubDate>
      <link>https://dev.to/mtfoley/highlighting-sync-contribution-graph-6o8</link>
      <guid>https://dev.to/mtfoley/highlighting-sync-contribution-graph-6o8</guid>
      <description>&lt;p&gt;A couple of weeks ago, I nearly scrolled past this gem on my twitter feed: &lt;a href="https://github.com/kefimochi/sync-contribution-graph"&gt;sync-contribution-graph&lt;/a&gt;, by &lt;a class="mentioned-user" href="https://dev.to/kefimochi"&gt;@kefimochi&lt;/a&gt;. Go have a look! &lt;/p&gt;

&lt;p&gt;You can use this tool to have your GitHub contribution graph accurately reflect contributions from other accounts you make use of. For example, outside of work I use the handle &lt;a href="https://github.com/mtfoley"&gt;mtfoley&lt;/a&gt;, but I have a separate account I use for my job. I like the idea that I could use this to accurately reflect my activity level, and that no private information about that work handle is revealed.&lt;/p&gt;

&lt;p&gt;The way it works is pretty straightforward.  When you configure it with a username and a time frame (year), it performs an HTTP request to the appropriate URL, and parses the HTML in the response for the dates/counts of contributions (these correspond to those little green squares).  Based on this data, it creates appropriate &lt;code&gt;git&lt;/code&gt; shell commands. The shell commands are saved to a file that can optionally be run immediately. Here's a snippet that's the meat of it in &lt;a href="https://github.com/kefimochi/sync-contribution-graph/blob/main/src/index.js"&gt;src/index.js&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-html-parser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shelljs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// Gathers needed git commands for bash to execute per provided contribution data.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCommand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contribution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`GIT_AUTHOR_DATE=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;contribution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;T12:00:00 GIT_COMMITER_DATE=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;contribution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;T12:00:00 git commit --allow-empty -m "Rewriting History!" &amp;gt; /dev/null\n`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;contribution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Returns contribution graph html for a full selected year.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`https://github.com/users/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/contributions?tab=overview&amp;amp;from=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-12-01&amp;amp;to=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-12-31`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="c1"&gt;// Retrieves needed data from the html, loops over green squares with 1+ contributions,&lt;/span&gt;
  &lt;span class="c1"&gt;// and produces a multi-line string that can be run as a bash command.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-count]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;contribution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;contribution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;contribution&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contribution&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git pull origin main&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git push -f origin main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;script.sh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;File was created successfully.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This might take a moment!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sh ./script.sh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I made some suggestions in the setup workflow on the repo and submitted a &lt;a href="https://github.com/kefimochi/sync-contribution-graph/pull/8"&gt;PR to update the README&lt;/a&gt;.  I hope you find this and other work by &lt;a class="mentioned-user" href="https://dev.to/kefimochi"&gt;@kefimochi&lt;/a&gt; to be of interest!&lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>bash</category>
      <category>git</category>
    </item>
  </channel>
</rss>
