<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Class And Object Concept</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Fri, 04 Jun 2021 02:12:41 +0000</pubDate>
      <link>https://dev.to/amritanshu/class-and-object-concept-2h28</link>
      <guid>https://dev.to/amritanshu/class-and-object-concept-2h28</guid>
      <description>&lt;p&gt;Task: You have to build a house on empty land.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first thing - create structure (how the house will look like) - will go to the architect for a blueprint of the house&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iS_IOkRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622770201057/R7hm299Vs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iS_IOkRY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622770201057/R7hm299Vs.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So, &lt;strong&gt;the blueprint is the class&lt;/strong&gt;, you only have a blueprint it's not the actual house.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, gather all the materials and other stuff to &lt;strong&gt;build the house according to the blueprint&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cl7UBR7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622771634908/ZLZwAq1DP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cl7UBR7c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622771634908/ZLZwAq1DP.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
The final build product - &lt;strong&gt;House&lt;/strong&gt; - is Object&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>javascript</category>
      <category>java</category>
      <category>programming</category>
    </item>
    <item>
      <title>OOP: Object Oriented Programming</title>
      <author>Joseph Maurer</author>
      <pubDate>Fri, 04 Jun 2021 01:28:58 +0000</pubDate>
      <link>https://dev.to/mwrpwr/oop-object-oriented-programming-36jh</link>
      <guid>https://dev.to/mwrpwr/oop-object-oriented-programming-36jh</guid>
      <description>&lt;p&gt;Object Oriented Programming (&lt;a href="https://www.educative.io/blog/object-oriented-programming"&gt;OOP&lt;/a&gt;) is a programming paradigm that is the cornerstone of modern software development. While OOP isn’t the only programming paradigm that exists, I would argue it is the most important to have a firm foundation of, and when used correctly, can lead to stronger and more robust software. But what is OOP and how can you make sure to understand it well? Let’s explore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;High Level&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At a high level, in OOP there are 3 main pillars to understand for getting OOP down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Encapsulation with classes&lt;/li&gt;
&lt;li&gt;  Inheritance&lt;/li&gt;
&lt;li&gt;  Polymorphism (the most important by far)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Encapsulation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Encapsulation is the ability to enclose data that describes the object and the functions used to manipulate that data into one module container. &lt;/p&gt;

&lt;p&gt;In OOP these are typically called classes and are at the center of the paradigm. The resulting variable when the variable is declared is called an &lt;em&gt;object&lt;/em&gt;. An important part is abstraction so that only necessary features are exposed. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Private/Internal: Methods and properties are accessible from other methods of the same class. Anything outside of the class shouldn’t be able to access these members/methods. This is typically denoted by Private or Protected. &lt;/li&gt;
&lt;li&gt;  Public/External: Methods and properties are accessible from outside the class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example would be if you were programming a card game. In your card dec class, would you want someone else to modify the number of cards in the deck? Probably not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inheritance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inheritance is the ability to take an existing class and extend its functionality to form another class. &lt;/p&gt;

&lt;p&gt;Why is this important? Because it supports reusability with code reuse. This is because the new class has access to all of the parent functionality. The child class just needs to add new attributes and methods that are specific to its needs. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Generalization is the relation such that the subclass is a variation of the parent. I.e. a pickup truck “is-a” automobile.&lt;/li&gt;
&lt;li&gt;  Specialization is the relationship such that the class “has-a” subclass. I.e. an automobile “has-a” engine. &lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvBEiqrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xcwue2a26ayw127ue3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvBEiqrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xcwue2a26ayw127ue3n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Polymorphism is the ability of similar objects to respond differently to the same message.&lt;/p&gt;

&lt;p&gt;The final pillar of OOP is closely related to inheritance and yet is arguably far more important. The prefix poly means many; morph means form. Polymorphism then refers to the ability of a single type or class to take many forms. &lt;/p&gt;

&lt;p&gt;How is this done? With method overriding:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4BOfQ9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5aw00vyj8l2mg1y5px0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4BOfQ9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5aw00vyj8l2mg1y5px0g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the example above, you can see that both the electric car and the pickup truck inherit from Automobile and both override the Start behavior since both have vastly different needs. An electric car doesn’t need to start an engine while a pickup truck would (assuming it’s of the gas variety). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key Takeaways&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Well designed objects manipulate the data or state of an object by passing messages through the object’s interface.

&lt;ol&gt;
&lt;li&gt;Controlling an object through its interface guarantees it behaves in a safe manner and that the internal state remains valid. &lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;The ability to model the real world is an important advantage of OOP.&lt;/li&gt;
&lt;li&gt;Objects must be self-contained so that they can stand on their own.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OOP isn’t the only programming paradigm out there. Can you name any others? &lt;strong&gt;&lt;a href="https://twitter.com/maurerpwer"&gt;Follow me on twitter&lt;/a&gt; for more programming posts!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>oop</category>
      <category>csharp</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Export GitHub Issues, Commit History and More | GitHub Artifact Exporter</title>
      <author>Davide Benvegnù</author>
      <pubDate>Fri, 04 Jun 2021 01:18:42 +0000</pubDate>
      <link>https://dev.to/n3wt0n/export-github-issues-commit-history-and-more-github-artifact-exporter-2ok6</link>
      <guid>https://dev.to/n3wt0n/export-github-issues-commit-history-and-more-github-artifact-exporter-2ok6</guid>
      <description>&lt;p&gt;Today I'm going to show you how you can easily export Issue, Releases, Milestone, Commit History and more from GitHub, using the GitHub Artifact Exporter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;GitHub Artifact Exporter provides a CLI and a simple GUI for exporting GitHub Issues and related comments based on a date range, and it supports GitHub’s full search syntax, allowing you to filter results based on your search parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--niAQiGGP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngg6abxr9gnkqt6r5qff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--niAQiGGP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngg6abxr9gnkqt6r5qff.png" alt="GUI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The CLI also supports exporting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commits&lt;/li&gt;
&lt;li&gt;Milestones,&lt;/li&gt;
&lt;li&gt;Projects&lt;/li&gt;
&lt;li&gt;Pull requests, including comments&lt;/li&gt;
&lt;li&gt;Releases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_x2pO34w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz6a62uf32fujqrsnml1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_x2pO34w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz6a62uf32fujqrsnml1.png" alt="CLI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can export all of that in different formats: JSON, JSON lines, CSV, and Jira-formatted CSV. And of course if you export in CSV, it means that you can open it in Excel. Cool right?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xYIJLQB1YF4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/xYIJLQB1YF4"&gt;Link to the video: https://youtu.be/xYIJLQB1YF4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;There are few prerequisites to run the exporter.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lerna"&gt;
  &lt;/a&gt;
  Lerna
&lt;/h4&gt;

&lt;p&gt;First of all it is a lerna project, so you need to have lerna installed. If you don't know what lerna is don't worry because I didn't even know it existed until I started looking into the exporter project. Apparently it's a tool for managing JavaScript projects split within multiple repos and packages.&lt;/p&gt;

&lt;p&gt;All you need to do is install lerna via npm and then use it to build and run the project as directed from the instructions in the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; lerna
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, you've heard it right... The GitHub Artifact Exporter comes with the sources and you have to build it yourself. We will do it in a moment, and you can find the link to the repo in the video description.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#github-pat"&gt;
  &lt;/a&gt;
  GitHub PAT
&lt;/h4&gt;

&lt;p&gt;Second prerequisite is to generate a Personal Access Token with the "read packages" scope so you can pull from GitHub Package Registry.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Alright, let's quickly see how to install the tool... or better, build it since it comes with the source code :)&lt;/p&gt;

&lt;p&gt;First think we need is the code. Head to the &lt;a href="https://github.com/github/github-artifact-exporter"&gt;official repo&lt;/a&gt; and, download the package in the release.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gui"&gt;
  &lt;/a&gt;
  GUI
&lt;/h4&gt;

&lt;p&gt;To install the GUI, we need to execute the lerna commands to build the whole thing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;lerna &lt;span class="nb"&gt;exec &lt;/span&gt;npm &lt;span class="nb"&gt;install
&lt;/span&gt;lerna &lt;span class="nb"&gt;link
&lt;/span&gt;lerna bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  CLI
&lt;/h4&gt;

&lt;p&gt;The step above builds also the CLI part, and in fact you can go into the &lt;code&gt;/packages/cli/bin&lt;/code&gt; folder and there you will find the &lt;em&gt;cmd&lt;/em&gt; executable for it.&lt;/p&gt;

&lt;p&gt;But you can also install the CLI standalone using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @github/github-artifact-exporter-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;Alright, now that we have it installed let's see how to use it.&lt;/p&gt;

&lt;p&gt;For this, check the &lt;a href="https://youtu.be/xYIJLQB1YF4"&gt;video here&lt;/a&gt; for the explanation and the demo. (The demo starts at minute &lt;a href="https://youtu.be/xYIJLQB1YF4?t=220"&gt;3:40&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xYIJLQB1YF4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>devops</category>
      <category>export</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Setup Your Fastify Server With Logging The Right Way - No More Express</title>
      <author>Jay Wolfe</author>
      <pubDate>Fri, 04 Jun 2021 00:50:34 +0000</pubDate>
      <link>https://dev.to/wolfejw86/setup-your-fastify-server-with-logging-the-right-way-no-more-express-4n56</link>
      <guid>https://dev.to/wolfejw86/setup-your-fastify-server-with-logging-the-right-way-no-more-express-4n56</guid>
      <description>&lt;p&gt;Learning a new Node.js framework can be daunting given the speed at which the ecosystem moves these days. Also some of the information on learning new techniques with Node.js is outdated - for example the sheer number of Express tutorials you still find out there! Express is long overdue for a replacement, and Fastify fits right in!  One of the first things to consider when running a Node.js server is how to handle logging the right way. ExpressJS did not offer anything out of the box, forcing another bike shed to paint amongst your team.  Fastify on the other hand recognizes that this is a critical piece of running a server and provides sensible defaults - in the case of logging - the pino logger. Join me in this article where I walk through how to setup a Fastify Node.js logger the right way, the first time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-new-fastify-server-in-a-single-js-file"&gt;
  &lt;/a&gt;
  A New Fastify Server in a Single .js File
&lt;/h3&gt;

&lt;p&gt;First things first, you need a way to experiment! Learning new things can be challenging so setting yourself up for success is really important. For the duration of this article I'd recommend using the below single file fastify server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Server listening...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-the-logger-correctly"&gt;
  &lt;/a&gt;
  Setting Up The Logger Correctly
&lt;/h3&gt;

&lt;p&gt;Fastify uses the &lt;a href="https://getpino.io/"&gt;pino&lt;/a&gt; logging package under the hood. It is leaps and bounds ahead of pretty much all other Node.js loggers out there in my opinion. It has high performance, excellent configurability, and great sensible defaults that instantly put you in the "pit of success" when using it. If you want to start off with that "sensible" configuration, all you have to do is this in your fastify server's config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// default is false https://www.fastify.io/docs/latest/Server/#logger&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Server listening...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I really like the idea of sensible defaults, however it can still be a bit of overhead to figure out what they are and how they work. Here's what you get by just putting &lt;code&gt;logger: true&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easily accessed logger functions - ie &lt;code&gt;fastify.log.info(...args)&lt;/code&gt; | &lt;code&gt;fastify.log.error(...args)&lt;/code&gt; - also available as &lt;code&gt;request.log.info(...args)&lt;/code&gt; decorated on each request&lt;/li&gt;
&lt;li&gt;fast JSON string logging with built in request id generation and attachment to all logs "in between" requests/responses which formats great for integrations with kibana/elastic search or splunk (or name your centralize logging solution that "likes" to ingest JSON formatted strings)&lt;/li&gt;
&lt;li&gt;automatic request id attachment to any logs that happen in between the request/response log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;user A's client makes a request to the fastify backend - we get a logged incoming request with a request id&lt;/li&gt;
&lt;li&gt;user A's request makes it through, but our db query threw an error&lt;/li&gt;
&lt;li&gt;we logged that error using &lt;code&gt;fastify.log.error&lt;/code&gt; - this automatically attaches that request id to this error log&lt;/li&gt;
&lt;li&gt;Now when we get alerted that something went wrong with this user's request we see:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{ requestId: 999, url: "/my-endpoint-that-error's", sessionId: "session-123" }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ requestId: 999, message: "my helpful database related error message", sessionId: "session-123" }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ requestId: 999, statusCode: 500, duration: 150, sessionId: "session-123" }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see in a central logging system it would be easy to "correlate" the error with that user's request. Additionally you can modify the request/response logs that happen on each request to fit your use case - often times a client tracing id or a session id can add further debugging capabilities to your log stream.&lt;/p&gt;

&lt;p&gt;### Incremental Improvements - Better Log Correlation&lt;/p&gt;

&lt;p&gt;The first thing that catches my eye above is that the &lt;code&gt;url&lt;/code&gt; is only logged on the first log message while the &lt;code&gt;duration&lt;/code&gt; of the request is only logged at the end. While this makes logical sense, if you're making a dashboard from your logstream with your API endpoints and their average response times, correlating these inside of another tool can be quite frustrating. This is a great time to break out of the default mode and simply implement your own request/response logging.&lt;/p&gt;

&lt;p&gt;The high level process to achieve this type of custom request/response logging would be to &lt;a href="https://www.fastify.io/docs/v3.15.x/Server/#disablerequestlogging"&gt;disable the default request logging and replace it with your custom implementation&lt;/a&gt; to get the granular data inside the logs you need on each request.&lt;/p&gt;

&lt;p&gt;This will be a very common thing to do and should not be thought of as overly "risky" or "advanced":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;disableRequestLogging&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;received request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onResponse&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// add url to response as well for simple correlating&lt;/span&gt;
        &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;durationMs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// recreate duration in ms - use process.hrtime() - https://nodejs.org/api/process.html#process_process_hrtime_bigint for most accuracy&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Server listening...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the above re-implementation of request/response logging you'll be able to correlate your API urls more easily with the response times.&lt;/p&gt;

&lt;p&gt;### Incremental Improvements - Better Request-Id Generation&lt;/p&gt;

&lt;p&gt;The second thing I notice is that &lt;code&gt;requestId&lt;/code&gt;'s are generated based off of using autoincrementing integers. While this works great if you only have one server, in a world of containers and horizontal autoscaling this doesn't go very far as you'll get collisions which will hurt your logging accuracy and your ability to debug your log tracing. It is however really easy to override the default behavior:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;genReqId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// you get access to the req here if you need it - must be a synchronous function&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;uuidv4&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Server listening...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now with our logger and our &lt;code&gt;genReqId()&lt;/code&gt; implementation we will have a uuid generated for each request-id - algorithmically guaranteed to be unique!&lt;/p&gt;

&lt;p&gt;WARNING: &lt;a href="https://www.fastify.io/docs/v3.15.x/Server/#requestidheader"&gt;There is a caveat for request-id generation with some additional default behavior&lt;/a&gt;. It is also common in distributed systems to use a client-based request-id to correlate downstream API requests. Fastify supports this out of the box, however you need to know it's there. Normally with something like &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; you would have a request-id as well as span id's. OpenTelemetry is out of scope for this article, however just know that there is a default behavior that can allow a client sending trace ids as a header (default &lt;code&gt;request-id&lt;/code&gt;) is supported. In this case, you would want to work out this contract with your consumers ahead of time and potentially put something in place to ensure they adhere to this practice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;One excellent built in feature is &lt;a href="https://getpino.io/#/docs/redaction?id=redaction"&gt;the ability to redact sensitive information with pinojs&lt;/a&gt;. The fastify server's logger configuration is just a pass-through for pino so you can use all its features. If I know for example that I have a logger that will log sensitive information, I can easily redact it using string paths:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;redact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;headers.authorization&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// an object for redact is also supported - see the docs https://getpino.io/#/docs/redaction?id=redaction&lt;/span&gt;
    &lt;span class="c1"&gt;// redact: {&lt;/span&gt;
    &lt;span class="c1"&gt;//   paths: ["headers.authorization"],&lt;/span&gt;
    &lt;span class="c1"&gt;//   remove: true,&lt;/span&gt;
    &lt;span class="c1"&gt;//   censor: "Super Secret!!",&lt;/span&gt;
    &lt;span class="c1"&gt;// },&lt;/span&gt;
    &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Logging request headers for debugging...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Server listening...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// console.log used here only to log out a pre-baked curl request for you to make this example easy&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
  # Try a curl request with sensitive info as the auth header and watch it NOT get logged:
  curl http://localhost:3000 -H "Authorization: Bearer my-secret-token-that-will-not-get-logged" -H "X-Will-Get-Logged: This header will still get logged"
  `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the code example above - try running the built in curl request that gets logged out. You should see that the &lt;code&gt;authorization&lt;/code&gt; header got redacted while the other header still showed up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"time"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1622597119730&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"pid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;98721&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"reqId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"req-1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"headers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"host"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost:3000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"user-agent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"curl/7.64.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"accept"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*/*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"[Redacted]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;notice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;got&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;redacted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;customize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;too&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"x-will-get-logged"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This header will still get logged"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Logging request headers for debugging..."&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;This is really it - thankfully like most things with Fastify - logging is really simple to implement, even for the most complex of use cases. If you have a need for a larger abstraction to help prevent churn with log formatting, application specific static logging, and even the dreaded framework swap, it can be recommended to instantiate the logger separately rather than just passing the fastify server &lt;code&gt;{ logging: true }&lt;/code&gt;. Great news - you can easily bring your own logger. This is actually what I do for most of my larger projects at work. As long as it adheres to the logging interface (ie has a &lt;code&gt;.info, .warn, .error, etc.&lt;/code&gt;) it will pretty much just work. For what it's worth even if you bring your own logging solution I highly recommend using pino as it's the fastest logger in town. To bring your own logger (pino) as an example, simply do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pino&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-application-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// this will add `name` to every logged object&lt;/span&gt;
  &lt;span class="c1"&gt;// Check out the full list of pino options here:&lt;/span&gt;
  &lt;span class="c1"&gt;// https://getpino.io/#/docs/api?id=options&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Fastify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// simply pass your pino instance to the fastify config&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Server listening...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.fastify.io/docs/v3.15.x/"&gt;Fastify Docs Site&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://getpino.io/"&gt;Pino Docs Site&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>node</category>
      <category>fastify</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to create your virtual event platform with AWS IVS</title>
      <author>Tiffany</author>
      <pubDate>Fri, 04 Jun 2021 00:15:18 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-create-your-virtual-event-platform-with-aws-ivs-111a</link>
      <guid>https://dev.to/aws-builders/how-to-create-your-virtual-event-platform-with-aws-ivs-111a</guid>
      <description>&lt;p&gt;Over the last year, businesses were forced to make a sudden pivot towards virtual events, and most were very unprepared for the change. Instead of traveling for business functions and enjoyment, we logged into conferencing and digital platforms and services. The pivot to digital experiences is expected to be semi-permanent, and business are expected to delivery high quality digital experiences for their audiences.&lt;/p&gt;

&lt;p&gt;Reaching your market and growing your brand through video experiences doesn't have to be expensive, difficult, or time-consuming. In this blog post, we'll share how you can host your virtual event using Amazon Interactive Video Service (Amazon IVS). Follow along with this guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-amazon-interactive-video-service"&gt;
  &lt;/a&gt;
  Getting Started with Amazon Interactive Video Service
&lt;/h2&gt;

&lt;p&gt;Amazon Interactive Video Service (Amazon IVS) is a live video streaming service that offers low-latency video streaming and playback. Amazon IVS managed streaming services lowers the bar for businesses to offer high quality video streaming anywhere in the world. Amazon IVS is simple to use and scalable for large audiences. The IVS SDK lets viewers easily stream through the web, iOS, or Android.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WIF50wdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hmbvyjx9fhmgf0lovcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WIF50wdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hmbvyjx9fhmgf0lovcc.png" alt="image001"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this guide, we will create a virtual event platform using &lt;a href="https://obsproject.com/"&gt;Open Broadcast Software&lt;/a&gt; (OBS) and the Amazon IVS API and player SDK to embed the stream into a web-based application.&lt;/p&gt;

&lt;p&gt;As shown in the image above OBS is the streaming software that will broadcast a live video stream to the Amazon IVS service. The Amazon IVS API and player SDK will allow us to embed the stream into a web, iOS, or Android application and build additional interactive capabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-get-started-with-your-first-stream"&gt;
  &lt;/a&gt;
  To get started with your first stream
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://obsproject.com/download"&gt;Download and Install Open Broadcast Software&lt;/a&gt;. This streaming tool will help you get started with setting up your video stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/ivs/"&gt;Create an Amazon IVS channel&lt;/a&gt;. Navigate to the Amazon IVS service to create a new video stream channel called live-event-stream. Here, we used the preconfigured default configurations.  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syBh6i6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67k3c8y8whu9eccki3ss.png" alt="image002"&gt;
&lt;/li&gt;
&lt;li&gt;After creating a channel, you will see your stream configuration details in the Amazon IVS dashboard. Make a note of your stream configuration for the next step when we begin configuring our stream through OBS.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbfgrgRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnqoqu6fh088aii699nw.png" alt="image003"&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In OBS, enter the channel's stream configuration. The OBS Auto-Configuration Wizard will prompt you to set up a new stream. In the Service drop-down menu, select the Custom… option. Next, enter the corresponding ingest server and stream key provided by the Amazon IVS console.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0TJe3Hm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilwubki89t2426b1dwsa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0TJe3Hm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilwubki89t2426b1dwsa.png" alt="image005"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Next and wait for the OBS to validate your configurations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, set up your media sources and begin the streaming broadcast in OBS.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OvYdLuWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vavessydofhaw8iu3zji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OvYdLuWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vavessydofhaw8iu3zji.png" alt="image006"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If the setup is correct, your video stream will appear in the Amazon IVS console. As shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBLbnoVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h3b9oslvajvklpe59bp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBLbnoVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1h3b9oslvajvklpe59bp.png" alt="image008"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have set up our video stream to be used for our virtual event, let's use the Amazon IVS player SDK to build our virtual event application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-video-into-a-web-application-with-amazon-ivs"&gt;
  &lt;/a&gt;
  Integrating Video into a web application with Amazon IVS
&lt;/h2&gt;

&lt;p&gt;Amazon IVS offers two Player SDK types for developers to integrate with their framework of choice. The Amazon IVS Player SDK for Web is a lightweight option for developers looking to customize their applications. Alternatively, the Amazon IVS Player Tech for Video.js is the full-featured option for developers who may already be using &lt;a href="https://videojs.com/"&gt;Video.js&lt;/a&gt;. This guide will use the &lt;a href="https://docs.aws.amazon.com/ivs/latest/userguide/SPVJI.html"&gt;Video.js Amazon IVS Player&lt;/a&gt; to customize our live stream video player and add it to a simple web page.&lt;/p&gt;

&lt;p&gt;Below is a screenshot of a basic website created for the virtual event, {Unscripted}. There is little functionality for the event date itself, so we will need to use the player library to add our video stream to the webpage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mnMMV7Ku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abmpbsjv0rsqkaeic3ls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mnMMV7Ku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abmpbsjv0rsqkaeic3ls.png" alt="image009"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-amazon-ivs-videojs-player-sdk-to-load-the-stream-source"&gt;
  &lt;/a&gt;
  Using Amazon IVS Video.js Player SDK to load the stream source:
&lt;/h3&gt;

&lt;p&gt;In your application code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Include the following script tag (to add the latest version of the Amazon IVS player).
&lt;code&gt;&amp;lt;script src="https://player.live-video.net/1.2.0/amazon-ivs-player.min.js"&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Register the Amazon IVS tech with Video.js using the registerIVSTech function: &lt;code&gt;registerIVSTech(videojs);&lt;/code&gt; The videojs object is provided by Video.js.&lt;/li&gt;
&lt;li&gt;Create an instance of the player and set the source stream using the playblack url found in your channel's configuration dashboard.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Initialize player
var player = videojs('amazon-ivs-videojs', {
    techOrder: ["AmazonIVS"]
}, () =&amp;gt; {
    console.log('Player is ready to use!');
       // Play stream
    player.src(PLAYBACK_URL);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the PLAYBACK_URL variable should be replaced with the playback URL of the source stream you want to load for your application. In this guide, we used the playback URL found in our channel's configuration dashboard.&lt;/p&gt;

&lt;p&gt;After following these steps and starting live stream broadcast through OBS, the {Unscripted} event page now streams live content to its audience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-O6t3Yo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6p51brrxerv2zimg1tve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-O6t3Yo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6p51brrxerv2zimg1tve.png" alt="image011"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's worthwhile building additional capabilities and integrations into your virtual event platform solution, but this guide showcased an introduction to the Amazon IVS player. If you'd like more examples of using the Amazon IVS Player SDK, I recommend checking out additional &lt;a href="https://github.com/aws-samples/amazon-ivs-player-web-sample"&gt;Amazon IVS Player Web SDK samples&lt;/a&gt;. The Amazon IVS Player SDK also offers the ability to record sessions for playback later, allowing you video on-demand capabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We saw annual industry conference events like AWS: ReInvent move towards a virtual experience. Despite the pandemic, smaller business and individual conference organizers can still grow market awareness, reach their communities, and create lasting impressions by leveraging video services. This post shared a guide to building your own scalable virtual event platform using Amazon Interactive Video Service (Amazon IVS).&lt;/p&gt;

&lt;p&gt;If you'd like to try Amazon IVS, it is available for AWS customers. Check out the product page and get started &lt;a href="https://aws.amazon.com/ivs/"&gt;here&lt;/a&gt;. I hope this post helps you leverage IVS to create a memorable virtual experience!&lt;/p&gt;

&lt;p&gt;Here's to making virtual events a fulfilling experience!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
    </item>
    <item>
      <title>June 3rd, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Thu, 03 Jun 2021 23:28:47 +0000</pubDate>
      <link>https://dev.to/nickytonline/june-3rd-2021-what-did-you-learn-this-week-gfn</link>
      <guid>https://dev.to/nickytonline/june-3rd-2021-what-did-you-learn-this-week-gfn</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yDYAHbqe5DfyM/giphy.gif" alt="Yoda wooping someone's butt"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://i.giphy.com/media/6brH8dM3zeMyA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/6brH8dM3zeMyA/giphy.gif" alt='Little kid making a fist as if to say "Yes!"'&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>#DeepRacer - Kuei Raceway 05/21</title>
      <author>Daniel Dominguez</author>
      <pubDate>Thu, 03 Jun 2021 23:17:43 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/deepracer-kuei-raceway-05-21-3dco</link>
      <guid>https://dev.to/dominguezdaniel/deepracer-kuei-raceway-05-21-3dco</guid>
      <description>&lt;p&gt;&lt;strong&gt;2021 May Qualifier&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🏁 Position: 240/563&lt;br&gt;
⏱️ Time: 03:50.865&lt;/p&gt;

</description>
      <category>aws</category>
      <category>deepracer</category>
    </item>
    <item>
      <title>Beginners Guide To Higher Order Functions, Partial Functions and Currying</title>
      <author>Kingsley Ubah</author>
      <pubDate>Thu, 03 Jun 2021 22:00:36 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/beginners-guide-to-higher-order-functions-partial-functions-and-currying-2dm5</link>
      <guid>https://dev.to/ubahthebuilder/beginners-guide-to-higher-order-functions-partial-functions-and-currying-2dm5</guid>
      <description>&lt;p&gt;Before we begin with Higher Order Functions and Currying, we need to first establish what a normal function looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;  &lt;span class="nx"&gt;returnEven&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// returns a single value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;  &lt;span class="nx"&gt;addEven&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// returns an expression&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;strong&gt;Higher Order function&lt;/strong&gt; is simply a function which returns &lt;strong&gt;another function&lt;/strong&gt; just as a normal function would return a straight value. Since the function has another function in it, it would require at least two rounds of parameters for a higher order function to be fully resolved.&lt;/p&gt;

&lt;p&gt;You can use higher order functions to create partially applied functions. A partially applied function is a function which is partially applied and not fully resolved i.e hasn’t received the complete number of arguments it requires (arity) to fully resolve.&lt;/p&gt;

&lt;p&gt;With a partially applied function, you pass some parameters and you get back a function that locks those parameters in place while taking more parameters.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Analogy: Let’s assume you find a starving dog with pale skin and thin body amongst other typical gaunt features. For every kind of food you give to it (parameter), a new dog (new function) is formed. A new dog means that the dog becomes less pale, or maybe gains more weight etc. However, the dog is not fully healthy just as a partially applied function is not fully resolved yet. However at some point after supplying the right number of nutrients (and parameters), the dog becomes fully healthy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, the biggest use of partial functions is to create ** parameters of single responsibility**. For every parameter you supply to that function, a new function with new functionality is formed. That function thereby formed will take another set of parameter to make a new function and so on, until the function is fully resolved. &lt;/p&gt;

&lt;p&gt;Let’s take a look at some use case. Consider a scenario. We have two teams, a match venue and an official. The venue and official are fixed. Regardless of the game played, they both do not change. The teams however change. One team will make use of both the venue and official today, and another team will the next time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;venue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nx"&gt;Wembley&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;official&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Carl&lt;/span&gt; &lt;span class="nx"&gt;Mason&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;teamA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Man&lt;/span&gt; &lt;span class="nx"&gt;Utd&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="nx"&gt;nd&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;pm&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;teamB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Liverpool&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;th&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,
time: “2pm – 4pm”
}

function mergeBasicInfos(venue, official) {
const { capacity , address } = venue;
const { name } = official;
const basicInfo = {
capacity,
address,
referee: name,
};
return team =&amp;gt; {
return { ...basicInfo, ...team };
};
}

const GameWithVenueAndOfficial = mergeBasicInfos(venue, official);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The objective is very simple. Using the concepts of Higher Order Functions and Partial Applications, we want to create a partially applied function which already has one round of parameter (the base info - Venue and official) locked in and now has to take either of the two variable parameters (either of the teams) as the next round of argument. So when it’s time for teamA, we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TeamAGame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GameWithVenueAndOfficial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;teamA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//This is currying&lt;/span&gt;

&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;// name: 'Man Utd',&lt;/span&gt;
&lt;span class="c1"&gt;// position: '2nd'&lt;/span&gt;
&lt;span class="c1"&gt;// time: '12pm - 2pm',&lt;/span&gt;
&lt;span class="c1"&gt;// capacity: 65,000&lt;/span&gt;
&lt;span class="c1"&gt;// address: 'Wembley',&lt;/span&gt;
&lt;span class="c1"&gt;// referee: 'Carl Mason'&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it’s time for teamB, we do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TeamBGame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GameWithVenueAndOfficial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;teamB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Also currying&lt;/span&gt;

&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;// name: 'Liverpool',&lt;/span&gt;
&lt;span class="c1"&gt;// position: '4th'&lt;/span&gt;
&lt;span class="c1"&gt;// time: '2pm - 4pm',&lt;/span&gt;
&lt;span class="c1"&gt;// capacity: 65,000&lt;/span&gt;
&lt;span class="c1"&gt;// address: 'Wembley',&lt;/span&gt;
&lt;span class="c1"&gt;// referee: 'Carl Mason'&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The base information never changes. It remains locked thanks to the first action we called: &lt;strong&gt;mergeBasicInfos().&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And with that, we have multiple rounds of parameters which have a single responsibility:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First parameter is to establish the venue and match official,&lt;/li&gt;
&lt;li&gt;Second set of parameter is to supply the particular team to play the match &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, Higher Order Functions are quite apt when it comes to abstracting functionality and locking up parameters.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#currying"&gt;
  &lt;/a&gt;
  CURRYING
&lt;/h4&gt;

&lt;p&gt;Currying is the process of taking a function which requires multiple rounds of parameters and returning a series of functions which takes exactly one argument each.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Analogy: If I were to reuse the previous analogy of a dog, I could say that currying happens exactly at the time you feed the dog once and move it from one state to another state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Currying has to do with the time a function takes in &lt;strong&gt;one round&lt;/strong&gt; of argument to either &lt;strong&gt;fully resolve&lt;/strong&gt; or to &lt;strong&gt;create another partially applied function&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With Currying, you can pass in a round of argument into a higher order function, pass that function to a variable and pass in a new round of argument into that function before passing it to another variable and so on:&lt;br&gt;
Now, let’s illustrate currying in terms of code. To this so, I’ll refer to this simple code from  &lt;a href="https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339"&gt;medium&lt;/a&gt;  :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mul1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//A curry action&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mul2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mul1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Another curry&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mul2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Another curry, finally resolves&lt;/span&gt;
&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time you curry a function, you create a new function that has the previous parameter locked in and now takes in just one argument to either create another partially applied function or completely resolve. It’s really that simple.&lt;/p&gt;

&lt;p&gt;The ability to create single responsibility parameters is a very useful feature of HOC’s and currying, as we saw in my .Thanks to it, we created a form of abstract function which was now used in two different scenarios (two different teams playing). We can also replicate this with many other ideas and functionalities. The possibilities are limitless.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h4&gt;

&lt;p&gt;I am now going to conclude this article with the following points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A higher order function is a function which returns another function instead of a straight value or expression&lt;/li&gt;
&lt;li&gt;Partial application of a function occurs when a function receives a fresh round of argument and thus has a new form&lt;/li&gt;
&lt;li&gt;You can use currying to pass around partially applied functions until it is fully resolved.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: If you are looking for a good beginner friendly book for learning web development, I’ll highly recommend  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React (aff)&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To support my work, you can buy me my favourite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading and see you soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Wait for it: Implementing a sleep() function in JS</title>
      <author>Daniel Sasse</author>
      <pubDate>Thu, 03 Jun 2021 21:43:05 +0000</pubDate>
      <link>https://dev.to/dsasse07/wait-for-it-implementing-a-sleep-function-in-js-2oac</link>
      <guid>https://dev.to/dsasse07/wait-for-it-implementing-a-sleep-function-in-js-2oac</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/dsasse07/algorithm-practice-champagne-tower-explanation-414h"&gt;In my last blog entry&lt;/a&gt;, I had created a visualizer to model an approach to solving a Leetcode algorithm problem. I had planned to create a second entry in that series this week, however I ran into an obstacle:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How do I slow down the operation speed of a function to the point where I could create visual models and allow the viewer time to process them before it updated to the next step?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Most program languages have a &lt;code&gt;sleep&lt;/code&gt; function/method that can be invoked to delay the next operation in a function. For example, Ruby has &lt;code&gt;sleep(1000)&lt;/code&gt; and Python has &lt;code&gt;time.sleep(1)&lt;/code&gt; to "pause" operation for 1 second, but there is no direct correlate in Javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#settimeout-and-setinterval"&gt;
  &lt;/a&gt;
  setTimeout and setInterval
&lt;/h2&gt;

&lt;p&gt;Asynchronous actions in Javascript can usually call upon one of these two functions. &lt;a href="https://www.w3schools.com/jsref/met_win_settimeout.asp"&gt;setTimeout&lt;/a&gt; allows us to wait a specified amount of time before invoking a new callback function with &lt;a href="https://www.w3schools.com/jsref/met_win_setinterval.asp"&gt;setInterval&lt;/a&gt; operating similarly except the delay will reset and continue repeating.&lt;/p&gt;

&lt;p&gt;For the purposes of slowing down operation for something like a &lt;code&gt;while&lt;/code&gt; loop, neither of these are directly helpful since they delay the invocation of a new action rather than the delay the original function in which they were called.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#incorporating-promises"&gt;
  &lt;/a&gt;
  Incorporating Promises
&lt;/h2&gt;

&lt;p&gt;In Javascript, a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise object&lt;/a&gt; represents the eventual completion of an action. For example, if you have ever worked with an API call and made a request to the server, that request returns a "pending" Promise that will ultimately become "resolved" or "rejected". When creating a new Promise object, we can pass in two callback functions as arguments. The first argument is the function that will be invoked when the Promise is resolved, and the second (optional) is invoked if the Promise is rejected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the function accepts a single parameter which will reflect the time in milliseconds that we would like the function to sleep for. We then create a new Promise object and use &lt;code&gt;setTimeout&lt;/code&gt; in the callback function for the resolution of the Promise. We do not need a callback for the Promise reject here, as this will never arise in this use case.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setTimeout&lt;/code&gt; itself takes in two arguments: a callback function and a duration in milliseconds in which to delay invoking the callback. For the delay, we simply pass the &lt;code&gt;ms&lt;/code&gt; parameter of the sleep function. For the callback, we will use the resolve action of the Promise. This means that the state of the Promise will not be set to resolved until that delay time has passed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; keywords in our functions, we can tell a function to "await" the resolution of a Promise before continuing its next action. If we combine this with a setTimeout action, we can effectively create a &lt;code&gt;sleep()&lt;/code&gt; function in Javascript.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Round &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waiting for 500ms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Posting&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the final operation of each iteration will not run until the promise from the &lt;code&gt;sleep()&lt;/code&gt; function has been resolved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RE0d3gpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwzcrintrj0kzgaeq7h1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RE0d3gpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwzcrintrj0kzgaeq7h1.gif" alt="Sleep Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially the uses for this action compared a "regular" timeout or interval may seem limited. However, this allowed me to solve my initial challenge of trying to visualize the progress of an algorithm solution to create a visualizer. Normally, the speed at which a function runs would make it impossible for a viewer to see the incremental changes in values or current positions in a traversal. However, if we render a component, and provide a brief &lt;code&gt;sleep&lt;/code&gt; in each iteration it allows the user to view the changes occurring at each step.&lt;/p&gt;

&lt;p&gt;For example, we can visualize a depth first search process through a grid to map out the "land area" of islands in an "ocean":&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6opSry7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/far0edws3l49o1wyeyjg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6opSry7U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/far0edws3l49o1wyeyjg.gif" alt="Island Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully this implementation of a sleep function opens up new options for you in your coding. More information on the mapping algorithm above and the visualizer itself will come next week!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Should we replace webpack by 🗻 Snowpack 🗻?️</title>
      <author>Antoine Caron</author>
      <pubDate>Thu, 03 Jun 2021 21:27:34 +0000</pubDate>
      <link>https://dev.to/slashgear_/should-we-replace-webpack-by-snowpack-11de</link>
      <guid>https://dev.to/slashgear_/should-we-replace-webpack-by-snowpack-11de</guid>
      <description>&lt;p&gt;After webpack, esbuild and vitejs, let’s take a look at snowpack. The latter seems to be making a name for itself in the bundler ecosystem for a few years now. So I suggest that we study its functionalities, its strong points but also its weak points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#snowpack"&gt;
  &lt;/a&gt;
  Snowpack
&lt;/h2&gt;

&lt;p&gt;What is Snowpack? It is a web application packager that offers :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a rich and powerful development experience&lt;/li&gt;
&lt;li&gt;a &lt;em&gt;production&lt;/em&gt; mode that offers the features necessary to optimize the assets of the site.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# npm:&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; snowpack
&lt;span class="c"&gt;# yarn:&lt;/span&gt;
yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; snowpack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#esmodule-in-the-browser"&gt;
  &lt;/a&gt;
  ESModule in the browser
&lt;/h3&gt;

&lt;p&gt;Packagers such as webpack and rollup rely on the construction of a dependency tree that is analyzed and packaged at each modification. The build step of the modified files is still necessary, but the packaging operation (merging the different modules in the form of a bundle that is sent to the browser) is no longer necessary. Our browsers now know how to manage ESModules](&lt;a href="https://caniuse.com/?search=esmodule"&gt;https://caniuse.com/?search=esmodule&lt;/a&gt;), so it is no longer necessary to package our source modules to merge them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is the same idea that Evan You has taken up in &lt;a href="https://slashgear.github.io//vite-webpack-killer"&gt;Vite&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this principle, the modification of a file triggers only the build of this file, and this file only. You can have a project with thousands of javascript modules, the build time for each modification will not be affected. For dependencies (&lt;em&gt;vendors&lt;/em&gt;), Snowpack builds them once and caches them to do it again only if they have changed.&lt;/p&gt;

&lt;p&gt;Here is a diagram in the Snowpack doc showing the interest to avoid packaging in dev.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oaRx5KE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbew2a8ox5mml1wa6irb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oaRx5KE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbew2a8ox5mml1wa6irb.png" alt="explanation of the way snowpack works, which is based on the build only"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use a &lt;em&gt;Create React App&lt;/em&gt; project, you just have to add Snowpack as a dependency, you don’t have to change anything if you didn’t extend the webpack config. I invite you to test snowpack with the template generators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-snowpack-app react-snowpack &lt;span class="nt"&gt;--template&lt;/span&gt; @snowpack/app-template-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don’t worry! Snowpack is not only compatible with React, you can use Vue, Svelte or just javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-rich-configuration-maybe-too-much"&gt;
  &lt;/a&gt;
  A rich configuration (maybe too much)
&lt;/h3&gt;

&lt;p&gt;Like webpack, snowpack proposes to configure its use by an object. I must admit that &lt;a href="https://dev.to/vitejs-concurrent-performant-webpack-for-react/"&gt;after playing with it quickly&lt;/a&gt;, I am a bit disappointed. I see a meager &lt;a href="https://www.snowpack.dev/reference/configuration"&gt;documentation page&lt;/a&gt; that seems to describe many parameterizable keys.&lt;/p&gt;

&lt;p&gt;If you come from webpack, you won’t be lost, it’s very similar without being exactly the same.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not touching the default configuration can be an excellent idea.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-nice-collection-of-plugins"&gt;
  &lt;/a&gt;
  A nice collection of plugins
&lt;/h3&gt;

&lt;p&gt;Snowpack is not that new. A community has built up to create &lt;a href="https://www.snowpack.dev/plugins"&gt;a rich plugin ecosystem&lt;/a&gt;. Some of these plugins seem “core” because they are under the &lt;em&gt;@snowpack&lt;/em&gt; scope but many packages are ported by a few people independent of the project. It’s reassuring without being reassuring, I’ve personally experienced webpack updates being blocked/delayed while waiting for compatibility of some plugins that were no longer maintained.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jwZRsGCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjpo90at45n7mx66onb3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jwZRsGCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjpo90at45n7mx66onb3.png" alt="plugins list page screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Beware of the plugins you use!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contrary to Vite which natively offers a lot of nice features, snowpack works like webpack by relying on plugins to enrich the API. It’s a gamble, it can be complicated to keep this ecosystem of plugins up to date and efficient to continue to guarantee the interest of a migration to snowpack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#server-side-rendering"&gt;
  &lt;/a&gt;
  Server Side Rendering
&lt;/h3&gt;

&lt;p&gt;Snowpack offers a solution to implement your applications with server-side rendering. It is clear that the need for SSR is still felt on our frontend applications for SEO or rendering performance reasons. Unfortunately, on the application packaging side, it is still complicated and it is often necessary to make two builds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a build for the client aka the Browser&lt;/li&gt;
&lt;li&gt;a build for the Node server&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Double build, double punishment!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href="https://www.snowpack.dev/guides/server-side-render#option-3%3A-server-side-rendering-(ssr)"&gt;technique proposed by Snowpack&lt;/a&gt; remains limited but it’s still correct. I propose a slight improvement of the implementation by adding the buffered server rendering mechanics.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;startServer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snowpack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;startServer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getServerRuntime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;importedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dist/MyReactComponent.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyReactComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;importedComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOMServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderToNodeStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyReactComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="c1"&gt;// Directly write the head of page&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Hello 👋&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;div id="app"&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// Render bufferized version of App&lt;/span&gt;
  &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="c1"&gt;// When buffer end, we add the closing tags of page&lt;/span&gt;
  &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`
      &amp;lt;/div&amp;gt;
      &amp;lt;/body&amp;gt;
      &amp;lt;/html&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#webpack-esbuild-quick-or-snowpack-"&gt;
  &lt;/a&gt;
  Webpack, esbuild, quick, or snowpack ?
&lt;/h2&gt;

&lt;p&gt;Clearly after this series of articles where I tried to study this new generation of tools to bundle applications, I must admit that I am very surprised. We can clearly see that the support of ES Modules in the browser marks the entry into a new era. As Sindre Sorhus reminds us in &lt;a href="https://blog.sindresorhus.com/hello-modules-d1010b4e777b"&gt;his latest article&lt;/a&gt;, with the end of Node 10 support and the capabilities of our current browsers, it is no longer necessary to target CJS.&lt;/p&gt;

&lt;p&gt;Caching strategies and the use of CJS modules seem to be outdated for our needs in development environments. We can see that Vite and Snowpack offer this new mechanism which seems to be really efficient. Doing a &lt;em&gt;once for all&lt;/em&gt; build of the libraries and of each source file is a great idea to not suffer from a too slow startup time of our big web applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep an eye on Esbuild&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, the performance of these new tools also relies heavily on Esbuild. The idea of using a more optimized stack to read, parse, combine JS or TS modules with languages that allow for finer IO and memory management is really the keystone of this new generation of tools. Even before choosing whether to stay with webpack, or use Vite and Snowpack, it is certain that Esbuild will have to be followed closely. This lib has not finished surprising us. You should also look at a tool like &lt;a href="https://swc.rs/"&gt;SWC&lt;/a&gt; which is a direct competitor of Esbuild. There are certainly other tools being created at the moment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-use-webpack-and-have-configured-it-a-lot"&gt;
  &lt;/a&gt;
  I use webpack and have configured it a lot
&lt;/h3&gt;

&lt;p&gt;If you are in this situation, you may unfortunately be forced to keep webpack. This is not bad news, it is a very good tool that is far from being obsolete. It is likely that the webpack team will come up with new performance improvements, perhaps through the use of ESModules.&lt;/p&gt;

&lt;p&gt;You can also try to use snowpack in a development environment. There is &lt;a href="https://www.npmjs.com/package/@snowpack/plugin-webpack"&gt;a plugin to use webpack in the snowpack prod build&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-really-want-to-reduce-the-configuration-of-my-application-build"&gt;
  &lt;/a&gt;
  I really want to reduce the configuration of my application build
&lt;/h3&gt;

&lt;p&gt;If you don’t want to keep your webpack configuration files anymore, which can be sometimes difficult to maintain, the alternative proposed by Vite can be a great option. Just keep in mind that this solution is still young.&lt;/p&gt;

&lt;p&gt;If you are going to use Vite, I suggest that you minimize the configuration you can do to it. This will make it easier for you to keep up with the new versions that are likely to arrive in the coming months.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-use-a-cli-that-manages-my-build-configuration-for-me"&gt;
  &lt;/a&gt;
  I use a CLI that manages my build configuration for me
&lt;/h3&gt;

&lt;p&gt;You are using VueCLI, CRA, or other and you have not ejected your configuration. You don’t like to touch the build configuration of your application because the tools are complex and you don’t want to spend a lot of time configuring them. So I recommend you to stay as much as possible with the default configuration of your project as long as its performance does not bother you.&lt;/p&gt;

&lt;p&gt;However, nothing prevents you from testing tools like Vite that work directly without configuration with your already generated projects. If the startup time of your development environment becomes too important, this can really be an interesting solution for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-its-already-the-end"&gt;
  &lt;/a&gt;
  And it’s already the end?
&lt;/h2&gt;

&lt;p&gt;I think I’ve covered the new tools proposed by the community to package our web applications. If you have other tools that would be interesting to look at, don’t hesitate to suggest them to me on a social network like Twitter. See you soon for new &lt;em&gt;javascript peregrinations&lt;/em&gt; !👋&lt;/p&gt;

&lt;p&gt;Thanks to Jérémie for the review 🤗&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>snowpack</category>
      <category>vitejs</category>
      <category>bundler</category>
    </item>
    <item>
      <title>Bind methods</title>
      <author>James Sinkler</author>
      <pubDate>Thu, 03 Jun 2021 20:59:03 +0000</pubDate>
      <link>https://dev.to/jsinkler713/bind-methods-k8k</link>
      <guid>https://dev.to/jsinkler713/bind-methods-k8k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHeGSDII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98x0l1hkrubb5i7kad5u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHeGSDII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98x0l1hkrubb5i7kad5u.jpg" alt="moving forward"&gt;&lt;/a&gt;&lt;br&gt;
&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@manuelsardo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Manuel Sardo&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Given this little object, what should &lt;code&gt;game.play()&lt;/code&gt; return to us?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;lives&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isPlaying&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gameOver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GAME OVER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;play&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`It's on! You have &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lives&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; lives.`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We look inside the game method and see that this sets our game.lives property to true, and then returns a string, that also lets us know how many lives we have.&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;game.play()&lt;/code&gt; will run fine.&lt;/p&gt;

&lt;p&gt;But what if we want to export just this one method to some other file to run somewhere else. Maybe we have a pause.js file and we want to be able to access this method within it, to start back up after our play after a pause.&lt;/p&gt;

&lt;p&gt;If we do something like this we are not going to get what we want&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;playGame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem is that on the above line, we get access to playGame the method we want, but only the inner function. Our variable playGame has no idea what &lt;code&gt;this&lt;/code&gt; is anymore.&lt;/p&gt;

&lt;p&gt;Sometimes this is fine. Take for instance the other method we have in our game object. If we needed to export our gameOver function it will work just fine as is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gameOver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gameOver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But &lt;strong&gt;this&lt;/strong&gt; is because there is no reference to &lt;strong&gt;this&lt;/strong&gt; in &lt;strong&gt;this&lt;/strong&gt; method. The method &lt;strong&gt;gameOver&lt;/strong&gt;  doesn't need to know anything else about the object it came from.&lt;/p&gt;

&lt;p&gt;As an aside there's nothing particularly important about exporting like I have in my examples. It just seems this is when it comes up, because you lose sight of the object the method came from. &lt;/p&gt;

&lt;p&gt;So if we go ahead and try these both out&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;lives&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isPlaying&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;gameOver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GAME OVER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;play&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isPlaying&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`It's on! You have &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lives&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; lives.`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gameOver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gameOver&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gameOver&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// All good here&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;playGame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt; &lt;span class="c1"&gt;// WE WILL CHANGE THIS&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;playGame&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Not so good&lt;/span&gt;
&lt;span class="c1"&gt;// we need to tell it which object it should look at for the keyword this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we see that we get the incorrect response on our second call. The gameOver function works fine, with no &lt;strong&gt;this&lt;/strong&gt; referenced. But our second method returns the string &lt;code&gt;It's on! You have undefined lives&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we change our declaration to include a bind when we make the assignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// bind it  to the game object when saving to the variable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;playGame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// CHANGED&lt;/span&gt;
&lt;span class="c1"&gt;// now it prints nicely&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;playGame&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's what you need to know to use the bind method. Remember if you are trying to utilize a method from an object in this way, if it has the keyword &lt;strong&gt;this&lt;/strong&gt; than &lt;strong&gt;this&lt;/strong&gt; is what you can do to bind it properly.&lt;/p&gt;

&lt;p&gt;Happy coding,&lt;/p&gt;

&lt;p&gt;James&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating a toggleable dark mode theme</title>
      <author>Seth A Burleson</author>
      <pubDate>Thu, 03 Jun 2021 20:47:37 +0000</pubDate>
      <link>https://dev.to/sbrevolution5/creating-a-toggleable-dark-mode-theme-ned</link>
      <guid>https://dev.to/sbrevolution5/creating-a-toggleable-dark-mode-theme-ned</guid>
      <description>&lt;p&gt;Read it on &lt;a href="http://thecoderscodex.herokuapp.com/Posts/ViewPost/creating-a-toggleable-dark-mode-theme"&gt;My Blog, The Coder's Codex&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be surprisingly simple to add a dark mode toggle to your site, but the challenging part can be making that choice persist for the user throughout your app.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-allowing-the-toggle"&gt;
  &lt;/a&gt;
  Step 1: Allowing the toggle
&lt;/h1&gt;

&lt;p&gt;I'm using AdminLTE as a template(its free to download and its great), which luckily has a wonderful little class ("dark-mode") that can be applied to the body to quickly apply a dark theme to the whole site.  Adding a button with the onclick function "toggleDark()" allowed me to access the function I wrote in my site.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function toggleDark() {
    var element = document.getElementById("layoutBody")
    element.classList.toggle("dark-mode")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That was really all it took to be able to toggle, once I added the #layoutBody Id to my body element.  Then came the tougher part, making that persist across multiple pages&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-2-saving-user-preference-to-localstorage"&gt;
  &lt;/a&gt;
  Step 2: Saving user preference to Localstorage
&lt;/h1&gt;

&lt;p&gt;Using localstorage, we can save the user's preference to the browser.  &lt;/p&gt;

&lt;p&gt;I wrote a function called loadDark() that takes care of this, and called it using jquery.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function loadDark() {
    //default is light mode
    console.log("dark mode is ", JSON.parse(localStorage.getItem("jamesonDarkMode")))
    let dark = JSON.parse(localStorage.getItem("jamesonDarkMode"))
    if (dark === null) {
        localStorage.setItem("jamesonDarkMode", JSON.stringify(false))
    }
    else if (dark === true) {
        document.getElementById("layoutBody").classList.add("dark-mode")
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the Jquery:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script&amp;gt;
        $(window).on("load",loadDark());
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a default user preference, but theres no way to change it yet.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-3-changing-the-user-preference"&gt;
  &lt;/a&gt;
  Step 3: Changing the user preference
&lt;/h1&gt;

&lt;p&gt;Now back in our other function, we need to add some stuff to our toggleDark functionchange that localStorage variable.  Otherwise we will only ever have the default setting of false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function toggleDark() {
    var element = document.getElementById("layoutBody")
    element.classList.toggle("dark-mode")
    let dark = JSON.parse(localStorage.getItem("jamesonDarkMode")) 
    if (dark) {
        localStorage.setItem("jamesonDarkMode", JSON.stringify(false))
        console.log("Dark mode off")
    }
    else {
        localStorage.setItem("jamesonDarkMode", JSON.stringify(true))
        console.log("Dark mode on")
    }
    //optional to change fontawesome icon on button
    var buttonElement = document.getElementById("darkIcon")
    buttonElement.classList.toggle("fa-moon")
    buttonElement.classList.toggle("fas")
    buttonElement.classList.toggle("far")
    buttonElement.classList.toggle("fa-sun")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now whenever the user clicks the button the localstorage variable will be updated, and saved across your site.  &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
      <category>design</category>
    </item>
  </channel>
</rss>
