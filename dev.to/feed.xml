<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Streaming Analytics 
Using FlinkSQL Webinar</title>
      <author>Timothy Spann</author>
      <pubDate>Thu, 30 Sep 2021 20:13:30 +0000</pubDate>
      <link>https://dev.to/tspannhw/streaming-analytics-using-flinksql-webinar-3fa9</link>
      <guid>https://dev.to/tspannhw/streaming-analytics-using-flinksql-webinar-3fa9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UZIQo3i---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwdw49jdyv7sg1nc7d6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UZIQo3i---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwdw49jdyv7sg1nc7d6k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIu0Y2QF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8s9uwzp5qchhi2e7qhc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIu0Y2QF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8s9uwzp5qchhi2e7qhc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to share some resources from today's talk.&lt;/p&gt;

&lt;p&gt;Documentation on Using Flink SQL on StreamNative Cloud&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.streamnative.io/cloud/stable/compute/flink-sql-cookbook"&gt;https://docs.streamnative.io/cloud/stable/compute/flink-sql-cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My source code for the EdgeAI IoT application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tspannhw/StreamingAnalyticsUsingFlinkSQL"&gt;https://github.com/tspannhw/StreamingAnalyticsUsingFlinkSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the source code from the microservices applications&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/streamnative/streamnative-academy/tree/master/microservices-webinars"&gt;https://github.com/streamnative/streamnative-academy/tree/master/microservices-webinars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those free E-books we mentioned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://streamnative.io/en/download/manning-ebook-apache-pulsar-in-action/"&gt;https://streamnative.io/en/download/manning-ebook-apache-pulsar-in-action/&lt;/a&gt;
&lt;a href="https://streamnative.io/en/download/oreilly-ebook-mastering-apache-pulsar/"&gt;https://streamnative.io/en/download/oreilly-ebook-mastering-apache-pulsar/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Upcoming Events:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zCyppriC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lm2e3nvrmhbs0cqkc1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zCyppriC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lm2e3nvrmhbs0cqkc1g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pulsar-summit.org/"&gt;https://pulsar-summit.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5wAxgLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ug7amm82avf0k4u4hjp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5wAxgLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ug7amm82avf0k4u4hjp2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.starburst.io/info/trinosummit/#agenda"&gt;https://www.starburst.io/info/trinosummit/#agenda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just one last query to show you:&lt;/p&gt;

&lt;p&gt;select top1,&lt;br&gt;
        avg(CAST (cputempf as double)) as avgcputempf, avg( CAST(gputempf as double)) as avggpttempf&lt;br&gt;
from jetsoniot2 /*+ OPTIONS('scan.startup.mode'='earliest') */&lt;br&gt;
group by top1&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmiuzxg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pjhslfw36y1d6su3wy9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmiuzxg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pjhslfw36y1d6su3wy9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybLpAs_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv3xjcegpse9urv7wn8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybLpAs_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv3xjcegpse9urv7wn8x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cH4r31I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w2a49f6jp7t7ida1di4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH4r31I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w2a49f6jp7t7ida1di4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect with Us!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://streamnative.io/"&gt;https://streamnative.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/addisonj"&gt;https://github.com/addisonj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/addisonjh"&gt;https://twitter.com/addisonjh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/paasDev"&gt;https://twitter.com/paasDev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4b17eSFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i5bhjso9uh2mbyb2qfm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4b17eSFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i5bhjso9uh2mbyb2qfm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>20+ YouTube Channels for Designers/Front-End Developers</title>
      <author>Elijah Trillionz</author>
      <pubDate>Thu, 30 Sep 2021 20:12:59 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/20-youtube-channels-for-designers-front-end-developers-1792</link>
      <guid>https://dev.to/elijahtrillionz/20-youtube-channels-for-designers-front-end-developers-1792</guid>
      <description>&lt;p&gt;Tutorials, tips, advice, information helps a lot. While these things can be written they can also be in a video which some or most people find easier to understand and move along with.&lt;/p&gt;

&lt;p&gt;As a &lt;strong&gt;designer and/or a front-end developer&lt;/strong&gt;, &lt;a href="https://youtube.com"&gt;YouTube&lt;/a&gt; can play an important role in your career. For example, if you wanted to learn how to use &lt;a href="https://figma.com"&gt;Figma&lt;/a&gt; to design prototypes, there are videos to guide you on that.&lt;/p&gt;

&lt;p&gt;One of the benefits of video tutorials is the face-to-face learning atmosphere it provides. When watching these videos you feel like the instructor is there with you in your room or office. See more &lt;a href="http://4ts.org/blog/9-benefits-of-learning-with-video-tutorials"&gt;benefits of video tutorials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finding a good YouTube channel that is focused on UI/UX designs and/or Front-End web development can be tedious. That is why I have outlined these &lt;strong&gt;20+ YouTube channels for front-end web developers and/or UI/UX designers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, these YouTube channels are all active and they all have their uniqueness. Some of them are focused on improving your UI/UX design using Figma or Adobe XD as the case may be, some of them give you useful information on design trends that keeps you inspired.&lt;/p&gt;

&lt;p&gt;Others give useful advice on career paths, getting clients, making money, etc. Some others are focused on your front-end web development skills for example with CSS. So I would recommend you check as many as you can.&lt;/p&gt;

&lt;p&gt;And of course, some are "all in one" package. So they are all unique, that's the beautiful thing. So head up to their channels and subscribe.&lt;/p&gt;

&lt;p&gt;Permit me to sort this list based on the highest subscribers&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-designcourse-by-gary-simon"&gt;
  &lt;/a&gt;
  1. DesignCourse by Gary Simon
&lt;/h2&gt;

&lt;p&gt;This channel is one of the "all in one" channels. &lt;a href="https://www.youtube.com/c/DesignCourse"&gt;DesignCourse&lt;/a&gt; is an awesome interactive channel to learn design tips (the deep things of designs), get advice, watch tutorials of Figma, Adobe XD, Adobe Photoshop, Adobe Illustrator, HTML, and CSS, etc.&lt;/p&gt;

&lt;p&gt;Oftentimes Gary Simon often does a live review show, where he reviews websites from other developers, rates the website and tells them their errors if there are any.&lt;/p&gt;

&lt;p&gt;It's a great channel you definitely wanna check out and stick to.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;837k&lt;/strong&gt; (that's a lot of people)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/K7KIpLxN7ms"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dev-ed"&gt;
  &lt;/a&gt;
  2. Dev Ed
&lt;/h2&gt;

&lt;p&gt;Recently &lt;a href="https://www.youtube.com/c/DevEd"&gt;Dev Ed&lt;/a&gt; has been bombarding YouTube and the whole of the internet with great UI/UX designs on Figma and with HTML and CSS.&lt;/p&gt;

&lt;p&gt;Dev Ed as always has a way of making you smile while you learn which makes it very interactive. Videos on this channel vary from tutorials on prototypes, animations using tools like Figma and Adobe XD to CSS and HTML tutorials, every once in a while design tips and advice, etc.&lt;/p&gt;

&lt;p&gt;This channel is one of the fastest-growing channels for front-end developers and/or UI/UX designers. So you should definitely check it out.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;694k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FsbvGMkPHBQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-online-tutorials"&gt;
  &lt;/a&gt;
  3. Online Tutorials
&lt;/h2&gt;

&lt;p&gt;Want to learn CSS animations with CSS3? This is your channel. On this channel, you will get videos on animations and Website designs almost every day.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCbwXnUipZsLfUckBPsC7Jog"&gt;Online Tutorials&lt;/a&gt; is a channel for learning Complete responsive website design, creative CSS animation and hover effects, amazing Vanilla Javascript projects, creative UX and UI design using Html and CSS, and much more.&lt;/p&gt;

&lt;p&gt;
  
  &lt;p&gt;This channel has been viewed for a record of &lt;strong&gt;52,337,099 times&lt;/strong&gt; &lt;/p&gt;

&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;555k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/enBAFo2kEfE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-easy-tutorials"&gt;
  &lt;/a&gt;
  4. Easy Tutorials
&lt;/h2&gt;

&lt;p&gt;Another channel packed full of CSS3 animations is &lt;a href="https://www.youtube.com/c/EasyTutorialsVideo/featured"&gt;Easy Tutorials&lt;/a&gt;. With this channel you can learn different CSS3 effects, creating websites with awesome designs using HTML and CSS.&lt;/p&gt;

&lt;p&gt;Definitely check this out.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;529k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zmun7JzWGPE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-kevin-powell"&gt;
  &lt;/a&gt;
  5. Kevin Powell
&lt;/h2&gt;

&lt;p&gt;Wanna learn CSS tips and tricks? This channel is for you. With videos released twice a week, you can improve your CSS by subscribing and actively participating.&lt;/p&gt;

&lt;p&gt;Every so often &lt;a href="https://www.youtube.com/kepowob/playlists"&gt;Kevin Powell&lt;/a&gt; makes videos on how you can improve your UI designs, HTML and CSS core concepts, CSS fundamentals, CSS tips, and tricks, etc.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;363k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lvKK2fs6h4I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-bring-your-own-laptop"&gt;
  &lt;/a&gt;
  6. Bring Your Own Laptop
&lt;/h2&gt;

&lt;p&gt;Kind of a very funny and weird name. But ignore the name of the channel, let's talk about how it can benefit you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/ByolAuAdobe/featured"&gt;This channel&lt;/a&gt; provides information and tutorials for Adobe Photoshop, Adobe InDesign, Adobe XD, Adobe Illustrator. You can go from a beginner in Adobe XD or Photoshop to a pro with the videos from this channel.&lt;/p&gt;

&lt;p&gt;It's a perfect place to get tutorials on Adobe software for designs.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;289k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/68w2VwalD5w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-ajampsmart"&gt;
  &lt;/a&gt;
  7. AJ&amp;amp;Smart
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCeB_OpLspKJGiKv1CYkWFFw"&gt;AJ&amp;amp;Smart&lt;/a&gt; is a great resource for UI/UX Design tips and tutorials. Videos are uploaded on this channel weekly on different topics around design.&lt;/p&gt;

&lt;p&gt;Some of the videos include project reviews, product designs tutorials, Figma, and Adobe XD tutorials, live question and answer segments, product design advice, and tips.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;205k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FTFaQWZBqQ8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-jesse-showalter"&gt;
  &lt;/a&gt;
  8. Jesse Showalter
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/JesseShowalter/featured"&gt;Jesse Showalter&lt;/a&gt; shares Digital Design &amp;amp; Web Development videos each week focusing on tools, techniques, projects, and more to help you make amazing things.&lt;/p&gt;

&lt;p&gt;It includes top website reviews that can inspire you, Adobe XD live tutorials, Figma tutorials, design tips and tricks, 3D designs, tools recommendations, and so much more.&lt;/p&gt;

&lt;p&gt;I won't fail to mention that Jesse Showalter is a pretty lively instructor and as such you don't get bored while watching.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;193k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JttI6YpmPGI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-adrian-twarog"&gt;
  &lt;/a&gt;
  9. Adrian Twarog
&lt;/h2&gt;

&lt;p&gt;Honestly, I really wished I could have this channel among the top three, but the rule is the rule.&lt;/p&gt;

&lt;p&gt;It is one of the fastest-growing design channels on YouTube, it started in 2019 (that's just two years) and has had over 5,118,537 views. That's a lot of views in two years. No surprise the channel is growing fast but this is my reason:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/AdrianTwarog/featured"&gt;Adrian Twarog&lt;/a&gt; releases videos weekly on website design sketching, Figma tutorials, TailwindCSS, and Bootstrap tutorials, design tips and advice, general tips, website reviews, website redesign, website design with HTML and CSS, and lots more.&lt;/p&gt;

&lt;p&gt;Definitely check this channel out.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;120k&lt;/strong&gt; (now that's a lot of numbers for a two-year-old channel)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vUYSjI5re1I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-mike-locke"&gt;
  &lt;/a&gt;
  10. Mike Locke
&lt;/h2&gt;

&lt;p&gt;Want a channel where you can just get advice on UI/UX design? then you should definitely check this channel out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/MikeLocke/featured"&gt;Mike Locke's&lt;/a&gt; channel gives you interview tips, career advice, design tips and advice, zero tutorials, live question and answer segment.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;111k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/305OlxoVu98"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-punit-chawla"&gt;
  &lt;/a&gt;
  11. Punit Chawla
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/PunitChawla/featured"&gt;Punit Chawla&lt;/a&gt; is a channel for UI/UX design tutorials.&lt;/p&gt;

&lt;p&gt;Videos are released twice a week on design resources, UI/UX designs with Figma and Adobe XD, UI/UX design review, course recommendations, design tools update and so much more.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;82k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c6y4ok41rI0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-filip"&gt;
  &lt;/a&gt;
  12. Filip
&lt;/h2&gt;

&lt;p&gt;Another awesome channel with videos almost every week is &lt;a href="https://www.youtube.com/c/FilipDev/featured"&gt;Filip&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Videos on this channel are mostly based on CSS tutorials and tricks, front-end web development updates, UI/UX tools recommendations, and lots more.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;49.1k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BZqzhmlTkAc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-careerfoundry"&gt;
  &lt;/a&gt;
  13. CareerFoundry
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/user/careerfoundry"&gt;CareerFoundry&lt;/a&gt; is an online school that offers courses on UI/UX design on its site.&lt;/p&gt;

&lt;p&gt;On YouTube, they have a channel for sharing videos weekly on UI/UX design tips, advice, live portfolio review, CSS crash courses, Adobe XD, Sketch, Figma tutorials, design interview guides.&lt;/p&gt;

&lt;p&gt;They just hit 40k followers, the night before concluding this article it was 39.9k. So join them to celebrate, go check them out.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;40k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vu3xcQm7cEo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-keep-coding"&gt;
  &lt;/a&gt;
  14. Keep Coding
&lt;/h2&gt;

&lt;p&gt;Want courses and crash courses on Bootstrap? Give &lt;a href="https://www.youtube.com/c/Mdbootstrap/featured"&gt;Keep Coding&lt;/a&gt; a try.&lt;/p&gt;

&lt;p&gt;Apart from Bootstrap, there are videos on CSS tricks and tutorials, logo designs, design tips. Videos are uploaded almost twice a week.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;33.7k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rQryOSyfXmI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-antony-conboy"&gt;
  &lt;/a&gt;
  15. Antony Conboy
&lt;/h2&gt;

&lt;p&gt;This channel is for people interested in UX, UI, and Graphic Design.&lt;/p&gt;

&lt;p&gt;Videos from &lt;a href="https://www.youtube.com/channel/UCunujHJJR_W5OmDph5A3fEg"&gt;Antony Conboy&lt;/a&gt; are around design tools recommendations, portfolio reviews, UI/UX design tips, and career advice.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;25.9k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/I0-vBdh4sZ8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-sharon-onyinye"&gt;
  &lt;/a&gt;
  16. Sharon Onyinye
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/SharonOnyinye/featured"&gt;Sharon Onyinye&lt;/a&gt; shares videos on UI/UX design tips and career advice. &lt;/p&gt;

&lt;p&gt;Just as the other channels, Sharon shares her advice based on her experience; which is a good way for you to learn fast, knowing what is ahead.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;22.8k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/k_2ZIGw8wN8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-rachel-how"&gt;
  &lt;/a&gt;
  17. Rachel How
&lt;/h2&gt;

&lt;p&gt;Another female in the industry who is doing really well is &lt;a href="https://www.youtube.com/c/RachelHow/featured"&gt;Rachel How&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Videos on this channel are released almost every week on UI/UX design tips, Figma tutorials, and tips, portfolio reviews, tools recommendations.&lt;/p&gt;

&lt;p&gt;This channel started uploading videos about 4 months ago and has now been viewed over 267k+ times making it channel one of the fastest-growing channels on UI/UX design on YouTube.&lt;/p&gt;

&lt;p&gt;Definitely check it out.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;14.4k&lt;/strong&gt; (that's a lot of people for a 4-month-old channel)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ewRYw4pnKQU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-joy-shaheb"&gt;
  &lt;/a&gt;
  18. Joy Shaheb
&lt;/h2&gt;

&lt;p&gt;"Oh yes, another female", sorry to disappoint but ... hmm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCHG7IJuST_BXJkne-0u0Xtw"&gt;Joy Shaheb&lt;/a&gt; is a channel with videos on Figma tutorials, CSS tutorials in-depth. This channel is mostly on CSS tutorials.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;5.63k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RTEzXS_CT5w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-tutorial-tim"&gt;
  &lt;/a&gt;
  19. Tutorial Tim
&lt;/h2&gt;

&lt;p&gt;Where are all my Figma admirers? Let me hear you say Figma! Figma! Figma!&lt;/p&gt;

&lt;p&gt;For the past two years, videos on the &lt;a href="https://www.youtube.com/c/TutorialTim"&gt;Tutorial Tim&lt;/a&gt; channel have been on Figma tutorials, Figma plugin recommendations, Figma tips, and tricks, Figma crash courses, and master courses.&lt;/p&gt;

&lt;p&gt;Do you want to develop your Figma skills? Definitely check this channel out.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;3.05k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aXokV5In7YA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-code-and-dream"&gt;
  &lt;/a&gt;
  20. Code and Dream
&lt;/h2&gt;

&lt;p&gt;A mother in the house!! Am really excited I discovered this channel, honestly.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.youtube.com/c/CodeandDream/featured"&gt;Code and Dream&lt;/a&gt; channel uploads videos almost every week (recently) on CSS arts, tutorials, tips, recommendations, and advice.&lt;/p&gt;

&lt;p&gt;This channel is also one of the channels growing rapidly.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;2.22k&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/E_6rURSDRRg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-asli-aditi"&gt;
  &lt;/a&gt;
  21. Asli Aditi
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCnwcEa9319a-2Hehdm0jBsA/featured"&gt;Asli Aditi's&lt;/a&gt; channel shares videos majorly on opportunities as a designer.&lt;/p&gt;

&lt;p&gt;You want to be a UI/UX designer and you wish to study in a big university, with this channel you can get information on scholarships for designers.&lt;/p&gt;

&lt;p&gt;Videos on this channel also include design interviews tips, recommendations, design tips.&lt;/p&gt;

&lt;p&gt;Number of Subscribers: &lt;strong&gt;undefined&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uRXBXgm9PxA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Oh wow! That's a long list of great resources you should check out. I did all these deep downs for you (just for you). You really don't need to pay for courses to get started with UI/UX design or/and Front-end web development.&lt;/p&gt;

&lt;p&gt;There are tons of resources (some not even mentioned here) out there that can get you up and running. These channels are there to genuinely educate and inspire you for greater things.&lt;/p&gt;

&lt;p&gt;So let's follow them closely.&lt;/p&gt;

&lt;p&gt;Alright, that's it for today, tell me what you think in the comment section, also let me know who am missing out on (even if that's you).&lt;br&gt;
Also kindly share to anyone aspiring to become a designer or developer. Thank you for reading.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Building a type-safe dictionary in TypeScript</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 30 Sep 2021 18:58:13 +0000</pubDate>
      <link>https://dev.to/logrocket/building-a-type-safe-dictionary-in-typescript-1oli</link>
      <guid>https://dev.to/logrocket/building-a-type-safe-dictionary-in-typescript-1oli</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/gapurkassym/"&gt;Gapur Kassym&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;A dictionary is a common data structure in a programming language. As JavaScript developers, it’s important to work with type-safe dictionaries because there will be conflicts or unexpected issues if we store different types of data within the same dictionary.&lt;/p&gt;

&lt;p&gt;In this article, we’ll cover how to build a type-safe dictionary using TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-typesafe-dictionary"&gt;
  &lt;/a&gt;
  What is a type-safe dictionary?
&lt;/h2&gt;

&lt;p&gt;First of all, we need to know what a dictionary is. In a programming language, a dictionary is a typical data structure that stores data in key-value pairs. JavaScript, however, does not offer a &lt;code&gt;Dictionary&lt;/code&gt; type. Thankfully, we can create a type-safe dictionary in a few simple ways.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-raw-object-endraw-types-in-javascript"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;Object&lt;/code&gt; types in JavaScript
&lt;/h2&gt;

&lt;p&gt;There are two primary ways to create a dictionary in JavaScript: using the &lt;code&gt;Object&lt;/code&gt; type and using key-value pairs. The most popular implementation in JavaScript is to create one with the &lt;code&gt;Object&lt;/code&gt; type. Let’s create a dictionary using the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using the built-in Object&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Using the Object literal notation&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can create a dictionary with the initial data as key-value pairs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kazakhstan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created the &lt;code&gt;dictionaryViaLiteral&lt;/code&gt; dictionary with the key and value as string types.&lt;/p&gt;

&lt;p&gt;If you want to change or add the value to the dictionary, you can set the new value by calling on the dictionary key, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using bracket&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Using directly by property name via dot&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can access the value from the dictionary by directly calling the property name or indexer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using bracket/indexer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Using directly by property name via dot&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-raw-map-endraw-in-javascript"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;Map&lt;/code&gt; in JavaScript
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)&lt;/code&gt; is a collection of key-value pairs, just like an object. The main difference is that &lt;code&gt;Map&lt;/code&gt; allows you to use keys and values of any type. The &lt;code&gt;Map&lt;/code&gt; provides amazing instance methods to manipulate with a dictionary. If you are interested, you can read more &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#instance_methods"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using Map&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Add value using string key&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add value using number key&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     

&lt;span class="c1"&gt;// Add value using boolean key&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Map&lt;/code&gt; stores value by any type of key, and thus, they return the two different values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Return string1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Return number1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to update values in the &lt;code&gt;Map&lt;/code&gt; dictionary, we should call set method by key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Update the value&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;updatedString1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dictionary-type-errors-in-typescript"&gt;
  &lt;/a&gt;
  Dictionary type errors in TypeScript
&lt;/h2&gt;

&lt;p&gt;When we use the dictionary in TypeScript after previously using it in JavaScript, we’ll run into errors because TypeScript needs to know the data type of an object before it can be accessed.&lt;/p&gt;

&lt;p&gt;This means we will not have problems with the following code in JavaScript, but we will have problems with it in TypeScript. Let’s take a look.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Property 'firstName' does not exist on type '{}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;dictionary.lastName&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; in JavaScript, but in TypeScript, it will throw an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// Return the firstName Gapur&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Property 'lastName' does not exist on type '{ firstName: string; }'&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sure, we can use type &lt;code&gt;any&lt;/code&gt; in our code, but why use TypeScript without type checking?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// It works&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// It works&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-a-typesafe-dictionary-in-typescript"&gt;
  &lt;/a&gt;
  Building a type-safe dictionary in TypeScript
&lt;/h2&gt;

&lt;p&gt;There are three ways to avoid type issues in TypeScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-using-indexed-object-notation"&gt;
  &lt;/a&gt;
  1. Using indexed object notation
&lt;/h3&gt;

&lt;p&gt;We can check the type of data by using &lt;a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures"&gt;indexed object notation&lt;/a&gt;. Let’s create the dictionary with &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; as string types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// It works very well&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Type 'boolean' is not assignable to type 'string'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can call &lt;code&gt;key&lt;/code&gt; name whatever we want. For this example, I would like to name it &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, we can't leave out the key name or use union types, according to &lt;a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures"&gt;the syntax rule&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 'string' only refers to a type, but is being used as a value here.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionaryWithoutKeyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// An index signature parameter type cannot be a literal type or generic type. Consider using a mapped object type instead&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionaryWithUnionType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's complicate our example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="c1"&gt;// Create user with firstName and lastName&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// We can't add location property because User type doens't exist in the location&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jones&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Type '{ firstName: string; lastName: string; location: string; }' is not assignable to type 'User'.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to omit a property, we can use &lt;code&gt;[Partial](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)&lt;/code&gt; utils for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="c1"&gt;// Property 'lastName' is missing in type '{ firstName: string; }' but required in type 'User'.&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionaryWithPartial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="c1"&gt;// Works very well&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryWithPartial&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-using-the-raw-recordltkeys-typegt-endraw-utility"&gt;
  &lt;/a&gt;
  2. Using the &lt;code&gt;Record&amp;lt;Keys, Type&amp;gt;&lt;/code&gt; utility
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeystype"&gt;Record&lt;/a&gt; is a TypeScript utility for creating key-value objects. It is a great choice if you want to create a key type as &lt;code&gt;unions&lt;/code&gt; or &lt;code&gt;enums&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s use a &lt;code&gt;union&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserFields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dictionaryUnion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserFields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jones&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Works very well&lt;/span&gt;

&lt;span class="nx"&gt;dictionaryUnion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aidana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Type is not assignable to type 'Record&amp;lt;UserFields, string&amp;gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-using-raw-map-endraw-in-typescript"&gt;
  &lt;/a&gt;
  3. Using &lt;code&gt;Map&lt;/code&gt; in TypeScript
&lt;/h3&gt;

&lt;p&gt;We discussed using &lt;code&gt;Map&lt;/code&gt; for creating type-safe dictionaries in JavaScript. Let’s build a simple dictionary with the key as a string and value as a number in TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// No Error&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HTML&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Works&lt;/span&gt;
&lt;span class="c1"&gt;// Argument of type 'string' is not assignable to parameter of type 'number'&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use the key as the union type and the value as the object type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;JobInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workExperience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;JobPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Frontend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Backend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;JobPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JobInfo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Frontend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workExperience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Backend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workExperience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;How to best build a type-safe dictionary depends, as usual, on your use-case. If you want to build a simple dictionary, you can use the &lt;code&gt;indexed object&lt;/code&gt; notation. If you work with the unions, enums, or more complex data, employing the &lt;code&gt;Record&amp;lt;Keys, Type&amp;gt;&lt;/code&gt; util is best.&lt;/p&gt;

&lt;p&gt;In general, using &lt;code&gt;Map&lt;/code&gt; is a great practical way to solve type-safe issues with various types of data.&lt;/p&gt;

&lt;p&gt;Thanks for reading. I hope you found this piece useful. Happy coding!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and &lt;a class="mentioned-user" href="https://dev.to/ngrx"&gt;@ngrx&lt;/a&gt;
/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Creating a boilerplate Umbraco 9 site using project templates - part 1</title>
      <author>Jesper Mayntzhusen</author>
      <pubDate>Thu, 30 Sep 2021 18:46:19 +0000</pubDate>
      <link>https://dev.to/jemayn/creating-a-boilerplate-umbraco-9-site-using-project-templates-part-1-174k</link>
      <guid>https://dev.to/jemayn/creating-a-boilerplate-umbraco-9-site-using-project-templates-part-1-174k</guid>
      <description>&lt;p&gt;With Umbraco 9 freshly releases and running on .NET 5 lots of people need to change the way they work. One of those changes is probably to replace your current boilerplate solutions with a fresh one.&lt;/p&gt;

&lt;p&gt;This blogpost will show you how to leverage the built in dotnet templates to do that in a very nice and easy way - let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-basic-template-based-on-an-umbraco-site"&gt;
  &lt;/a&gt;
  Setting up a basic template based on an Umbraco site
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#set-up-the-site"&gt;
  &lt;/a&gt;
  Set up the site
&lt;/h3&gt;

&lt;p&gt;Before we turn it into a template - is to create the basic site you want to reuse. For the purpose of this tutorial I will use the wonderful demo site made by Dennis Adolfi as a starting point: &lt;a href="https://github.com/Adolfi/UmbracoNineDemoSite.git"&gt;https://github.com/Adolfi/UmbracoNineDemoSite.git&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-template-files"&gt;
  &lt;/a&gt;
  Create the template files
&lt;/h3&gt;

&lt;p&gt;In the root of the repository create a folder called &lt;code&gt;.template.json&lt;/code&gt;. Inside it create a &lt;code&gt;template.json&lt;/code&gt; file, with the following basic content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"http://json.schemastore.org/template"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Jesper Mayntzhusen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"classifications"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Umbraco"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"WebApp"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s"&gt;"identity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Testing.Boilerplate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Testing boilerplate solution"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"shortName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"test-bp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"project"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"language"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"C#"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"sourceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"UmbracoNineDemoSite"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDfBGbUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tpjvkivqlxq2omgzpvz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDfBGbUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tpjvkivqlxq2omgzpvz.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-out-the-basic-template"&gt;
  &lt;/a&gt;
  Testing out the basic template
&lt;/h2&gt;

&lt;p&gt;At this point we have what we need to pack the site up into a dotnet template - of course we will do lots more later. But first let's check that it works!&lt;/p&gt;

&lt;p&gt;First of all, let's run a &lt;a href="https://github.com/sayedihashimi/template-sample#how-to-test-template-changes-locally"&gt;super helpful PowerShell script&lt;/a&gt; created by Microsoft Program Manager Sayed Ibrahim Hashimi:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Templates&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cmdletbinding&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;$templateEngineUserDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt; &lt;span class="nx"&gt;$env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;USERPROFILE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ChildPath&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateengine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resetting dotnet new templates. folder: "{0}"&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="nx"&gt;$templateEngineUserDir&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;
        &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;childitem&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;$templateEngineUserDir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ExpandProperty&lt;/span&gt; &lt;span class="nx"&gt;FullName&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;recurse&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;dotnet&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;reinit&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this in a PowerShell terminal you can then run the function later on to clean up - more on that later.&lt;/p&gt;

&lt;p&gt;In the terminal navigate to a folder you want to install your new site based on the template.&lt;/p&gt;

&lt;p&gt;Install your new template with a path to your template repository - for me it in a sibling folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new --install ..\BoilerPlate\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ygE6gmTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wev1pvuuqwwm1e75bjsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ygE6gmTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wev1pvuuqwwm1e75bjsv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note the shorthand for creating the new template is &lt;code&gt;test-bp&lt;/code&gt; - which is what I set in the &lt;code&gt;template.json&lt;/code&gt; file in the beginning. &lt;/p&gt;

&lt;p&gt;Now that the template is installed we can use it to create our test site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new test-bp -o MyTestSite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;-o specifies an output folder, and if no name is specified it will use the foldername so don't have to set -n as well&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you look at the new project it created you will see it is a copy of the one we cloned from Github - except it renamed all instances of &lt;code&gt;UmbracoNineDemoSite&lt;/code&gt; to &lt;code&gt;MyTestSite&lt;/code&gt;. This is because that was what we set as the &lt;code&gt;sourceName&lt;/code&gt; in the template.json file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ntZRfm0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8fldr9fs6siviyn30jr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ntZRfm0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8fldr9fs6siviyn30jr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty easy so far!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-additional-parameters"&gt;
  &lt;/a&gt;
  Adding additional parameters
&lt;/h2&gt;

&lt;p&gt;The sourceName parameter is a standard required parameter for dotnet templates - but if your sites are set up like ours you may need to run replacements more than for just 1 name. For that we can add additional custom parameters - these will all be available as command line params or form fields in VS.&lt;/p&gt;

&lt;p&gt;There is another special parameter for setting the framework - for that we can add this in the template.json (remember to do this in the boilerplate solution - not the new one you created based on it):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Add it right at the end below sourceName:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"sourceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"UmbracoNineDemoSite"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"symbols"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Framework"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parameter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The target framework for the project."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"datatype"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"choice"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"choices"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"choice"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Target netcoreapp3.1"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"replaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"defaultValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also create a second symbol similar to the sourceName param that replaces a value in the template files. The UmbracoNineDemoSite has Products that has controllers, a composer, view models - etc. Let's say we use this as a baseline for different shop sites and this new site is going to be about selling Sofas - we may want to replace &lt;code&gt;Product&lt;/code&gt; with &lt;code&gt;Sofa&lt;/code&gt; then:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right below the Framework symbol we add the new ProductName param:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"symbols"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Framework"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parameter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The target framework for the project."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"datatype"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"choice"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"choices"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"choice"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Target netcoreapp3.1"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"replaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"defaultValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ProductName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parameter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"defaultValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"replaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Product"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"datatype"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"fileRename"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Product"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Product to be replaced"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;WARNING: This could mess up your site if you use something too generic, &lt;code&gt;Product&lt;/code&gt; is a terrible example - please use something that is way more specific!&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;replaces&lt;/code&gt; value is for within files, whereas the &lt;code&gt;fileRename&lt;/code&gt; value is for actual filenames being changed, so you have a bit of granular control if you only want one type.&lt;/p&gt;

&lt;p&gt;At this point we can reset and reinstall the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Reset-Templates; dotnet new --install ..\BoilerPlate\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can see the new param in the help description by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new test-bp --help
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dxe2lNpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gxbsoqk8ubqd9pahjge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxe2lNpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gxbsoqk8ubqd9pahjge.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's install it while using the new param:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new test-bp -o MyTestSiteTwo --ProductName Sofa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you open and compare your solution you can now see that filenames, namespace, etc have all been changed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qYPjqmkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tg04bn9311wusu8755r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qYPjqmkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tg04bn9311wusu8755r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-note"&gt;
  &lt;/a&gt;
  Closing note
&lt;/h2&gt;

&lt;p&gt;There are lots more you can do, but will leave it at this for part 1. I hope this gave a good first view of setting up your own dotnet templates!&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you like this post, have any feedback, suggestions, improvements to my hacky code or anything else please let me know on Twitter - &lt;a href="https://twitter.com/JesperMayn"&gt;@jespermayn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>umbraco</category>
      <category>csharp</category>
      <category>core</category>
    </item>
    <item>
      <title>Why You Should Switch to NextJS from ReactJS</title>
      <author>Enlear</author>
      <pubDate>Thu, 30 Sep 2021 18:44:20 +0000</pubDate>
      <link>https://dev.to/enlearacademy/why-you-should-switch-to-nextjs-from-reactjs-3lhh</link>
      <guid>https://dev.to/enlearacademy/why-you-should-switch-to-nextjs-from-reactjs-3lhh</guid>
      <description>&lt;p&gt;If you love frontend development, you should have some experience with React JS, this is because it’s one of the greatest frontend libraries out there. Due to its speed, flexibility, performance, etc… a majority of the developer tends to use React JS as for their frontends.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://enlear.academy/next-js-or-react-js-lets-find-out-60c77373da85"&gt;https://enlear.academy/next-js-or-react-js-lets-find-out-60c77373da85&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>My First PR</title>
      <author>Deepesha Burse</author>
      <pubDate>Thu, 30 Sep 2021 18:41:14 +0000</pubDate>
      <link>https://dev.to/deepeshaburse/my-first-pr-7mg</link>
      <guid>https://dev.to/deepeshaburse/my-first-pr-7mg</guid>
      <description>&lt;p&gt;Making your first pull request is definitely daunting. Whether you are taking part in some open source program or not, there are multiple things that go through your mind while making it. This blog is my experience and everything I learnt.&lt;/p&gt;

&lt;p&gt;I made my first PR through an open source program, so I was given a basic format in which we had to document everything. Now, I was familiar with putting my personal projects on GitHub, but I had never tried to make a contribution. Making the appropriate documentation/files wasn’t too hard for me, sure I had my doubts on whether it was good enough and I was ‘qualified’ enough to contribute, but with lots of research and my basic knowledge of the topic got me through it somehow.&lt;/p&gt;

&lt;p&gt;The part which I procrastinated the most was making the PR. I had this mental block of creating a PR and had somewhere decided that it would be very complicated. As someone who’s still new to open-source, let me tell you, it is not! It is actually one of the easiest parts of contributing (if not the easiest!).&lt;/p&gt;

&lt;p&gt;Another huge learning for me was patience. Having worked only on personal projects, I never had to think about others’ views too much. I would ask a few people to review my project once but that was it. When making contributions, we need to consider that it is not our project, we are only fixing a bug or adding something to an entire project of theirs. They may have different expectations from as simple files as README files or the documentation or whatever it is you are contributing to. Something that looks okay to you, may not look so to your mentor/supervisor/maintainer. Instead of taking it negatively, try to understand what they expect and tweak your files accordingly.&lt;/p&gt;

&lt;p&gt;Taking part in an open source program has helped me grow a lot, and I would definitely recommend you to try it out! The best part about it is, there is always something you can contribute to. Giving back to a community that has given us so much is such an amazing feeling, made me feel so grateful to everyone who has directly/indirectly helped me. Yes, it is a little scary, but once you make your first PR, there is no going back!&lt;/p&gt;

&lt;p&gt;Here are a few articles that helped me to understand the process better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/"&gt;How to make your first pull request on GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.better.dev/create-your-first-github-pull-request"&gt;Create Your First GitHub Pull Request&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/doctolib/make-your-first-pull-request-to-an-open-source-project-1m57"&gt;Make your first pull request to an open-source project&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this gave you a brief idea on how it is to make your first PR. &lt;/p&gt;

&lt;p&gt;If there are any tips you would like to share, please leave a comment!&lt;/p&gt;

&lt;p&gt;Until next time, Happy Coding! :))&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>github</category>
    </item>
    <item>
      <title>Product developers’ guide to getting started with AI — Part 3: Terraforming dataframes</title>
      <author>Mage</author>
      <pubDate>Thu, 30 Sep 2021 18:28:44 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-3-terraforming-dataframes-5bdk</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-3-terraforming-dataframes-5bdk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Terraforming a planet requires large scale projects to inhabit other planets for survival. We’ll begin by terraforming datasets to calculate the cost of survival on the Titanic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Functional programming&lt;/li&gt;
&lt;li&gt;Applying Function&lt;/li&gt;
&lt;li&gt;Aggregating Data&lt;/li&gt;
&lt;li&gt;Transforming Data&lt;/li&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the &lt;a href="https://m.mage.ai/how-to-interpret-and-explain-your-machine-learning-models-using-shap-values-471c2635b78e"&gt;SHAP&lt;/a&gt; article, we know that people in some groups were more likely to survive when the Titanic crashed. But what does it cost to survive the titanic?&lt;/p&gt;


&lt;center&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRkzMxf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfue71jxrb2d79yfplxk.jpeg" alt="Alt Text"&gt;&lt;em&gt;Titanic meets Iceberg (Source: &lt;a href="https://m.mage.ai/how-to-interpret-and-explain-your-machine-learning-models-using-shap-values-471c2635b78e"&gt;Britannica&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;In “Product developers’ guide to getting started with AI — Part 3: Terraforming dataframes”, we’ll look at the price point of a “golden ticket” that ensures the best chance of survival. Based on the SHAP values calculated there is a direct correlation between the sex, passenger class, fare, and age.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7h5N-Nki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wotn4nd9tnidp8ozdkg3.png" alt="Alt Text"&gt;&lt;em&gt;Mage Analyzer Page (Source: SHAP)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Manipulating datasets are a quick and easy way to rearrange data and extract everything. In this series we’ve gone over how to pick and search through data so it’s time to look at transforming the underlying data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we Begin
&lt;/h2&gt;

&lt;p&gt;It is highly advised to have read &lt;a href="https://m.mage.ai/product-developers-guide-to-getting-started-with-ai-part-2-surfing-through-dataframes-d86b3540c7dc"&gt;part 2&lt;/a&gt; before continuing forward. In this guide, we’ll be using the &lt;a href="https://github.com/pandas-dev/pandas/tree/master/doc/data/titanic.csv"&gt;Titanic dataset&lt;/a&gt; along with &lt;a href="https://colab.research.google.com/"&gt;Google Collab&lt;/a&gt;. I’ll be briefly reusing techniques from previous contents such as surfing and extracting to quickly start us off with an ideal dataframe for applying transformations and functions.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4wV4h1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt8u97zvcm7q21v8d4xf.png" alt="Alt Text"&gt;&lt;em&gt;Part 2: Surfing through dataframes&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h2&gt;

&lt;p&gt;Python is a functional programming language, which means that all operations can be expressed as a function. This is important as later on in this guide we’ll be looking at creating functions and passing lambda expressions to apply and transform. For those that are comfortable enough with Python, you may skip this section. Otherwise, keep reading for a quick refresher on the syntax for defining functions and lambda expressions.&lt;/p&gt;

&lt;p&gt;In Python, a function is created by the “def” keyword and takes in a number of arguments.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--do3r_8QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz4dzavkgsd1h0dc89dt.png" alt="Alt Text"&gt;&lt;em&gt;Basic Adder that adds 1 to the value&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Rewrite the adder function as a lambda expression to shorthand.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdM8Qcwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq26efazb0ceoye2tiix.png" alt="Alt Text"&gt;&lt;em&gt;Lambda expression of the adder&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;For a small operation, like the adder above, it’s best practice to use a lambda expression. But, for more complex calculations that are used multiple times use a function. When in doubt check if there is a simpler way or how much repeating will occur.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-function"&gt;
  &lt;/a&gt;
  Applying Function
&lt;/h2&gt;

&lt;p&gt;The simplest form of manipulating a dataframe is by using apply. Apply takes in a function and repeats it for either all columns or rows within a dataframe. The applications of this are for quickly calculating or encrypting data.&lt;/p&gt;

&lt;p&gt;Based on the SHAP values, we form a hypothesis that women and children are more likely to survive, possibly due to the fact that they can board first and when living in upper class areas of the ship there is less population density allowing them to quickly escape in comparison to the lower class.&lt;/p&gt;


&lt;center&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u58MEXSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggsxn22vvxihjzl5ehzc.jpeg" alt="Alt Text"&gt;&lt;em&gt;Lifeboats on the Titanic (Source: DailyMail)&lt;/em&gt; &lt;/center&gt;

&lt;p&gt;To find the average price point of the winning ticket: ticket for a young lady in 1st class, we first need to filter down our rows and columns. In the dataframe, “Pclass” represents whether a passenger is located in the 1st class, 2nd class, or 3rd class area of the Titanic. The average is calculated as the sum of the prices divided by the total number or count of items, but may also be calculated by the mean method.&lt;/p&gt;

&lt;p&gt;Using what we’ve learned in part 2, we filter the rows down to only contain items from the sex, passenger class, and age columns. We define our filter as&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Having the sex of a female&lt;/li&gt;
&lt;li&gt;Passenger class of only 1st class&lt;/li&gt;
&lt;li&gt;Age must be no lower than 40 years old&lt;/li&gt;
&lt;/ol&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wWIuTLLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex7qhtf652swi2qo6csa.png" alt="Alt Text"&gt;&lt;/center&gt;

&lt;p&gt;Then reduce it to only show the relevant information: ‘Fare’ or price of golden ticket.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyQ8Ubdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3he7r6oq95au018vq2h.png" alt="Alt Text"&gt;&lt;/center&gt;

&lt;p&gt;Then, we take the sum of the ‘Fare’ column and divide by the total number of items.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oUNCuga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy2avix0es4m85ie5j2b.png" alt="Alt Text"&gt;&lt;em&gt;The total price of all golden tickets are $6484.80&lt;/em&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BOJhL6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uivkqongv9d4s5hba9y1.png" alt="Alt Text"&gt;&lt;em&gt;Average price of $113.77&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Unlike &lt;a href="https://m.mage.ai/product-developers-guide-to-getting-started-with-ai-part-2-surfing-through-dataframes-d86b3540c7dc"&gt;part 2&lt;/a&gt;, where we overwrite the values, instead store the data inside a new variable called average_price to hold the results of the calculations. This lets us preserve the old data.&lt;/p&gt;

&lt;p&gt;We can confirm this is the same when calculating the mean of the prices.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozfeV7UY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o926xcmrv3yo7xu59o4.png" alt="Alt Text"&gt;&lt;em&gt;The mean matches the average price of $113.77&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Pandas has multiple other built-in mathematical functions, such as median and more.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Eag2lCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v44dllv9bctghqh9d37v.png" alt="Alt Text"&gt;&lt;em&gt;Median is $86.50&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Unfortunately, all of this must be done separately, which makes apply good for short functions, but what about longer functions? That’s where aggregate or agg shines in removing repeatability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aggregating-data"&gt;
  &lt;/a&gt;
  Aggregating Data
&lt;/h2&gt;

&lt;p&gt;If you know which aggregate you want to apply ahead of time, use agg instead. When doing multiple calculations of summation, mean, or standard deviation, aggregate is a neater way to calculate than using apply.&lt;/p&gt;

&lt;p&gt;For instance, if we were to use aggregate instead, we could grab multiple types all at once. For our next section, we’ll need the standard deviation so let’s calculate that as well. Note: The shorthand is agg, which is functionally equivalent to aggregate.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ux4dZABn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmqvcsdkamcz6mp1rf0t.png" alt="Alt Text"&gt;&lt;em&gt;1 liner for sum, mean, max, and median&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#transforming-data"&gt;
  &lt;/a&gt;
  Transforming Data
&lt;/h2&gt;

&lt;p&gt;Another way of manipulating a dataframe is by using transform. This is similar to apply, except that it applies the function to itself and repeats it for all columns within a dataframe. Since it can be applied to itself, the applications are more extended and can complete multiple operations by passing values back to itself.&lt;/p&gt;

&lt;p&gt;Because transform applies it to itself, the result must be the same length of the original input. This means that functions such as sum(), mean(), and max/min() don’t work as they condense or aggregate all the data into 1 value.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VvWcboY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eq6r2xdj06flstjtugl.png" alt="Alt Text"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sx8seoT3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad9oapysbn1rcu6wu4ir.png" alt="Alt Text"&gt;
&lt;/center&gt;

&lt;p&gt;Back to the original problem, find out what percentage of passengers have a “golden ticket”. Using transform, we can combine aggregation using a series to calculate the individual values. This makes transform more useful at looking at the finer details.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROuDl5m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ux2zdrbxtjpm3mt8koj.png" alt="Alt Text"&gt;&lt;em&gt;Calculate individual percentages&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Likewise, summing the individual results should result in 1.0 (100%)&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKSc2EtY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4oratww7d88ploc7m74.png" alt="Alt Text"&gt;&lt;em&gt;Sanity Check&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#data-analysis"&gt;
  &lt;/a&gt;
  Data Analysis
&lt;/h2&gt;

&lt;p&gt;To find out how many passengers paid top dollar, first we take the original dataset and calculate the percentages. We leverage transform’s ability to maintain length, along with groupby to sort our data.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vjifp2E---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qqez2y7yt8wdulkmev0.png" alt="Alt Text"&gt;&lt;/center&gt;

&lt;p&gt;What slice of the “pie” do the golden ticket passengers make out?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWxQ-Bao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q7gv9jjujxrvnhthqkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWxQ-Bao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q7gv9jjujxrvnhthqkp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;23% of all income on the ship is from golden ticket sales.&lt;/em&gt;&lt;/center&gt;

&lt;p&gt;What percentage of passengers own a golden ticket?&lt;/p&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec4ZV30n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f113fm8nnfxeg5wwto46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec4ZV30n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f113fm8nnfxeg5wwto46.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;Only 6% of all passengers purchased a golden ticket.&lt;/em&gt;&lt;/center&gt;

&lt;h3&gt;
  &lt;a href="#key-differences"&gt;
  &lt;/a&gt;
  Key Differences
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Transform returns based on self, the equal length must be satisfied. Therefore, transform can’t handle aggregate methods (sum, mean, std deviation, etc…)&lt;/li&gt;
&lt;li&gt;Apply doesn’t take in multiple aggregations (one column at a time), while agg can.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#highlights"&gt;
  &lt;/a&gt;
  Highlights
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Transform is best used to create a new entry into a table to see fine detail.&lt;/li&gt;
&lt;li&gt;Aggregate and apply are useful at calculating a single summary value.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;


&lt;p&gt;That’s it now, you’re ready to tackle future problems in data science. Using your newfound knowledge I suggest modifying the steps to calculate what percentage of golden ticket holders survive, as your next step in familiarizing yourself with these core AI concepts. As always, stay tuned for future guides where we’ll go over more topics ranging from joining datasets to deploying a machine learning model to the Cloud.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iBFI56M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y43q2ndwmphnu00g0t4.gif" alt="Alt Text"&gt;&lt;em&gt;I’ve got a Golden Ticket! (Source South Park)&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

</description>
    </item>
    <item>
      <title>Binary Search in other words</title>
      <author>haytam_7</author>
      <pubDate>Thu, 30 Sep 2021 18:28:22 +0000</pubDate>
      <link>https://dev.to/haytamkh7/binary-search-in-other-words-1n0e</link>
      <guid>https://dev.to/haytamkh7/binary-search-in-other-words-1n0e</guid>
      <description>&lt;p&gt;Imagine yourself holding a flashlight against a list of sorted numbers searching for your lottery number.&lt;/p&gt;

&lt;p&gt;Each time you turn on the flashlight it will automatically point to the &lt;strong&gt;middle of the list&lt;/strong&gt; and you can't change it.&lt;br&gt;
If at this point you see your lottery number then BOOM! you won the lottery.&lt;/p&gt;

&lt;p&gt;Otherwise you need to compare your lottery number with that number in the middle of the list and you will face one of two situations:&lt;/p&gt;

&lt;p&gt;Either your number is bigger, then you have to cut the lower part of the list and continue working with the upper part.&lt;/p&gt;

&lt;p&gt;Or your number is smaller, then you have to cut the upper part of the list and continue working with the lower part.&lt;/p&gt;

&lt;p&gt;Now let's try to translate this to a code (in Java):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static int myLotteryNumber(int[] list, int lotteryNumber) {
        int left = 0;
        int right = list.length - 1;
        while(left &amp;lt;= right){
            int mid = (left + right) / 2;
            if(list[mid] == lotteryNumber)
                return list[mid];
            else if(lotteryNumber &amp;gt; list[mid])
                left = mid + 1; //cut the lower part of the list
            else if(lotteryNumber &amp;lt; list[mid])
                right = mid - 1; //cut the upper part of the list
        }
        return -1;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The great thing about this algorithm is that at each iteration you &lt;strong&gt;cut down half of the list&lt;/strong&gt; and at the worst case this will cost you &lt;strong&gt;&lt;em&gt;O(Log n)&lt;/em&gt;&lt;/strong&gt; of time complexity and &lt;strong&gt;&lt;em&gt;O(1)&lt;/em&gt;&lt;/strong&gt; of space complexity!&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>coding</category>
      <category>binarysearch</category>
    </item>
    <item>
      <title>What is horizontal and vertical scaling?
</title>
      <author>Kedar.K</author>
      <pubDate>Thu, 30 Sep 2021 18:13:25 +0000</pubDate>
      <link>https://dev.to/kedark/what-is-horizontal-and-vertical-scaling-2139</link>
      <guid>https://dev.to/kedark/what-is-horizontal-and-vertical-scaling-2139</guid>
      <description>&lt;p&gt;&lt;em&gt;Scaling&lt;/em&gt; implies adding or removing resources from your machine/application to perform the underlying tasks with optimal cost and processing capability. Scalability is a challenge that every engineering team needs to go through.&lt;/p&gt;

&lt;p&gt;Various scenarios require an application to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grow/shrink in requests&lt;/li&gt;
&lt;li&gt;Increase/decrease in data&lt;/li&gt;
&lt;li&gt;Reduce processing power&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you will have two scaling options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Horizontal scaling&lt;/li&gt;
&lt;li&gt;Vertical scaling&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#horizontal-scaling-scaling-out"&gt;
  &lt;/a&gt;
  Horizontal scaling (scaling out)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Horizontal scaling&lt;/strong&gt; implies adding more machines to the existing system. The data is scattered across multiple machines, and each of them has its own capacity. As we are not modifying existing machines, this process involves less downtime.&lt;/p&gt;

&lt;p&gt;This method allows us to perform distributed programming, which entails distributing jobs across devices. Horizontal scaling can increase the complexity as the address space increases. Therefore, updating and sharing data across machines can be more expensive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3EFi_FSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fa4kjg4a50gs03t0ehp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3EFi_FSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fa4kjg4a50gs03t0ehp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vertical-scaling-scaling-up"&gt;
  &lt;/a&gt;
  Vertical scaling (scaling up)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Vertical scaling&lt;/strong&gt; implies attaching more resources to the existing machine. Let’s consider a server rack, as before. We add more things like RAM, for example, to the same server rack in this method. The data resides on the same machine and is not distributed as in horizontal scaling. Usually, the activities performed on these machines use multi-threading and in-process data passing methods. Vertical scaling will have limited capacity within the existing machine. Scaling beyond this capacity will cause downtime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t49d3t7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z6yvkdofd89iwkk7hem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t49d3t7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z6yvkdofd89iwkk7hem.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at the key differences between these methods:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Horizontal Scaling&lt;/th&gt;
&lt;th&gt;Vertical Scaling&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Maintainance&lt;/td&gt;
&lt;td&gt;Maintainance is complex as you will need to manage a lot of machines.&lt;/td&gt;
&lt;td&gt;Maintenance is cheaper and it is less complex because of the number of nodes you will need to manage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Costs&lt;/td&gt;
&lt;td&gt;Initial costs are high but buying a new machine with low processing power is more affordable.&lt;/td&gt;
&lt;td&gt;Adding a new machine is far more expensive than upgrading old ones.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fault Tolerance&lt;/td&gt;
&lt;td&gt;In case of failure in a machine, others can still provide the service.&lt;/td&gt;
&lt;td&gt;Failures will lead to loss of service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Communication Complexity&lt;/td&gt;
&lt;td&gt;Having multiple machines requires complex protocols for exchanging data between them.&lt;/td&gt;
&lt;td&gt;Data exchange becomes relatively straightforward as we only have one machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Load Balancing&lt;/td&gt;
&lt;td&gt;Traffic/programming tasks can be distributed between the machines.&lt;/td&gt;
&lt;td&gt;Since we have one device, tasks can't be spread. Some level of parallel processing is achievable using a multi-threading programming model, but it's limited to the machine's capacity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Examples&lt;/td&gt;
&lt;td&gt;Cassandra, Google Cloud Spanner&lt;/td&gt;
&lt;td&gt;MySQL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;That's all for the post guys. Hope you enjoyed it, don't forget to leave a like if you did :).&lt;/p&gt;

&lt;p&gt;Happy Learning. &lt;/p&gt;

</description>
      <category>database</category>
      <category>scaling</category>
    </item>
    <item>
      <title>Art of giving feedback</title>
      <author>Andriy Chemerynskiy</author>
      <pubDate>Thu, 30 Sep 2021 18:13:18 +0000</pubDate>
      <link>https://dev.to/andrewchmr/art-of-giving-feedback-2mdi</link>
      <guid>https://dev.to/andrewchmr/art-of-giving-feedback-2mdi</guid>
      <description>&lt;p&gt;How to give proper feedback? Although you might find this topic trivial, the majority of people struggle with it.&lt;/p&gt;

&lt;p&gt;Having this skill will not just improve your career, it will also improve your relationships with other people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-you-should-give-feedback"&gt;
  &lt;/a&gt;
  Why you should give feedback?
&lt;/h3&gt;

&lt;p&gt;There are two types of feedback. Positive and negative. Both of them have the same goal which is to improve the situation or the person's performance.&lt;/p&gt;

&lt;p&gt;By giving people feedback you make them grow. Often it involves criticism, but when it is given in the right way, it can help them evolve.&lt;/p&gt;

&lt;p&gt;The result of not sharing feedback within a group might result in gossips that would harm everyone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ideal-feedback-formula"&gt;
  &lt;/a&gt;
  Ideal feedback formula
&lt;/h3&gt;

&lt;p&gt;In 2003 executive coach and author Anna Carroll developed the the COIN Conversation Model. &lt;/p&gt;

&lt;p&gt;COIN stands for Context, Observation, Impact, and Next steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Context - define the situation&lt;/li&gt;
&lt;li&gt;Observation - describe the behavior&lt;/li&gt;
&lt;li&gt;Impact - clarify the impact&lt;/li&gt;
&lt;li&gt;Next steps - make a suggestion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me give you an example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;During our meeting&lt;/em&gt; (context)... &lt;em&gt;you interrupted me several times&lt;/em&gt; (observation)... &lt;em&gt;and it made me feel as though you don’t want to hear what I have to say&lt;/em&gt; (impact)... &lt;em&gt;Could you next time let me finish my thought so everybody has a chance to share their opinion, please?&lt;/em&gt; (next steps)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What's important here is not just to blame someone for something, but to let them know what it made you think or feel. &lt;/p&gt;

&lt;p&gt;Do not avoid giving feedback because you are afraid to upset another person. You cannot control the mood of the person you are giving your feedback to, but you will encourage honesty in the group and potentially fix the problem that another person cooperates with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feedback-receiver-maturity"&gt;
  &lt;/a&gt;
  Feedback receiver maturity
&lt;/h3&gt;

&lt;p&gt;You might become pro at giving feedback, but you have still to keep one thing in mind. Not everyone is used to receive feedback and maybe you too.&lt;/p&gt;

&lt;p&gt;There are different levels of maturity: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ro9ltsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tacenku87f06jh1myl8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ro9ltsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tacenku87f06jh1myl8m.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/the-ascent/how-to-master-yourself-and-win-at-receiving-feedback-b1dc757d02fe"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It doesn't mean that you can't disagree with someone's feedback. The goal is to lift yourself up the staircase towards understanding.&lt;/p&gt;




&lt;p&gt;As homework, try giving feedback to someone. It doesn't have to be necessarily positive or negative. Let’s make the world a better place by improving ourselves 💪&lt;/p&gt;

</description>
      <category>career</category>
      <category>communication</category>
      <category>softskills</category>
      <category>selfdevelopment</category>
    </item>
    <item>
      <title>I Design, You Build! - Frontend Challenge #2</title>
      <author>Zernonia</author>
      <pubDate>Thu, 30 Sep 2021 18:01:40 +0000</pubDate>
      <link>https://dev.to/zernonia/i-design-you-build-frontend-challenge-2-2egc</link>
      <guid>https://dev.to/zernonia/i-design-you-build-frontend-challenge-2-2egc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#appreciation"&gt;
  &lt;/a&gt;
  Appreciation
&lt;/h2&gt;

&lt;p&gt;What an overwhelming response from the first challenge! I really enjoy seeing every submission, and appreciate every feedback given. If you haven't give the challenge a try, I &lt;strong&gt;strongly encourage&lt;/strong&gt; you to join us in this fun challenge! 🤩✨&lt;/p&gt;

&lt;p&gt;I know everyone is in different level of HTML/CSS/Javascript, but don't worry, I will try to mix in different difficulties in the coming challenge, so stay tuned! 🔔&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;I have a confession to make, I'm kinda obsessed with Gradient Blob recently. If you check out my &lt;a href="https://www.zernonia.com/"&gt;website&lt;/a&gt;, you will know what I meant.&lt;/p&gt;

&lt;p&gt;So, in this challenge, we will be creating an awesome &lt;strong&gt;Gradient Blob and Text&lt;/strong&gt; Website for a web application. Create a homepage following the design. Fulfill Target and/or Extra below:&lt;/p&gt;

&lt;p&gt;Target:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🎯 Target : User can see the similar design&lt;/li&gt;
&lt;li&gt;🎯 Target : Responsive design&lt;/li&gt;
&lt;li&gt;🎯 Target : Gradient text&lt;/li&gt;
&lt;li&gt;🎯 Target : Gradient background (gradient blob)&lt;/li&gt;
&lt;li&gt;🎯 Target : On mobile, when I select the hamburger menu, I can see a navigation (use your own creativity)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🌟 Extra : Add animation to the Gradient blob&lt;/li&gt;
&lt;li&gt;🌟 Extra : Add animation to the image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📃 Icon : &lt;a href="https://icones.js.org/collection/all"&gt;https://icones.js.org/collection/all&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📃 Hosting: &lt;a href="https://vercel.com/"&gt;https://vercel.com/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠ It will defeat the purpose of learning if you just copy and paste someone else's answer 😭!&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#start-coding"&gt;
  &lt;/a&gt;
  Start Coding!
&lt;/h2&gt;

&lt;p&gt;If you are ready to take on the challenge, then&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Help 💖 this design on &lt;a href="https://dribbble.com/shots/16561170-UNX-Slick-Gradient-Landing-Page"&gt;Dribbble&lt;/a&gt;, and follow me! Please... 😳&lt;/li&gt;
&lt;li&gt;Bookmark this post so that you can submit it easier.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Right-click&lt;/strong&gt; &lt;a href="https://www.figma.com/file/nJMqfSZI2HZGjWHWV4jCnG/UNX-Slick-App?node-id=0%3A1"&gt;here&lt;/a&gt; and open &lt;strong&gt;Open link in a New Tab&lt;/strong&gt; to see the Figma Design.&lt;/li&gt;
&lt;li&gt;Enjoy coding! 🤩&lt;/li&gt;
&lt;li&gt;Come back to submit!&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;All the &lt;strong&gt;images&lt;/strong&gt; and &lt;strong&gt;assets&lt;/strong&gt; are free to use, and can be exported from the Figma Design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/nJMqfSZI2HZGjWHWV4jCnG/UNX-Slick-App?node-id=0%3A1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---82mp8JC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v42ksciemobwm90rp2xj.png" alt="Zernonia Frontend Challenge #2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#submission"&gt;
  &lt;/a&gt;
  Submission
&lt;/h2&gt;

&lt;p&gt;Once you've completed, come back to this post, and submit your solution using the following &lt;code&gt;template&lt;/code&gt; in the comment section. You are encouraged to &lt;strong&gt;comment&lt;/strong&gt; and &lt;strong&gt;upvotes&lt;/strong&gt; other's answer!&lt;/p&gt;

&lt;p&gt;Thank you!💘&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Feedback: This is awesome!

Demo: &amp;lt;url&amp;gt;
Github: &amp;lt;url&amp;gt;
Tech-Stack: Vue, TailwindCSS
Learning Outcome: 
  1. 
  2.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;I share these design freely so that anyone who wanted to practice or challenge Web design be able to do so without paying other platform (&lt;em&gt;ahem) to get their **Figma Design&lt;/em&gt;*🎨 file. &lt;/p&gt;

&lt;p&gt;You are free to use the Design you've created in your portfolio. No copyright claims or anything.&lt;/p&gt;

&lt;p&gt;But if you are loving my work, you are most welcomed to follow me on &lt;code&gt;Dev.to&lt;/code&gt; and &lt;a href="https://twitter.com/zernonia"&gt;Twitter&lt;/a&gt; 😄&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-your-time-and-attention-hope-youll-enjoy"&gt;
  &lt;/a&gt;
  Thank you for your time and attention! Hope you'll enjoy!
&lt;/h3&gt;

</description>
      <category>idesignyoubuild</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build A Simple Progress Bar</title>
      <author>Omkar B</author>
      <pubDate>Thu, 30 Sep 2021 17:51:02 +0000</pubDate>
      <link>https://dev.to/omkarscode/build-a-simple-progress-bar-4kcl</link>
      <guid>https://dev.to/omkarscode/build-a-simple-progress-bar-4kcl</guid>
      <description>&lt;p&gt;You might get this as an interview question for web development roles, especially front-end roles. I'll explain how you can ace it by creating a progress bar in minutes.&lt;/p&gt;

&lt;p&gt;Spoiler: You could do it under a minute with CSS ;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-the-structure"&gt;
  &lt;/a&gt;
  Step 1: Create the structure
&lt;/h2&gt;

&lt;p&gt;Create the progress bar with plain HTML and CSS as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Progress Bar Tutorial&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"progress-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"load_something(1)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Load&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="nc"&gt;.progress-bar-wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#D5C67A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.progress-bar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#06A77D&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This results in the following empty progress bar:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6GsaWir8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xobd9wtj5802vgq2wy85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6GsaWir8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xobd9wtj5802vgq2wy85.png" alt="Empty Progress Bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can already test it by manually increasing the width from &lt;code&gt;0%&lt;/code&gt; to &lt;code&gt;10%&lt;/code&gt; and so on!&lt;/p&gt;

&lt;p&gt;There's a button in there which will trigger the function &lt;code&gt;load_something(1)&lt;/code&gt; and pass seconds as value. In this case we are passing 1 second as the value.&lt;/p&gt;

&lt;p&gt;We'll create that function in the next step.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-add-javascript"&gt;
  &lt;/a&gt;
  Step 2: Add JavaScript
&lt;/h2&gt;

&lt;p&gt;Add the following JS code before the closing &lt;code&gt;body&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.progress-bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="nx"&gt;progress_bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;percent&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;load_something&lt;/code&gt; function will perform the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the element with the &lt;code&gt;progress-bar&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;percent&lt;/code&gt; to 0.&lt;/li&gt;
&lt;li&gt;Create an interval which repeats every &lt;code&gt;seconds/100&lt;/code&gt;. In each iteration it will set the width of the progress bar based on the value in &lt;code&gt;percent&lt;/code&gt; and then increase the &lt;code&gt;percent&lt;/code&gt; value by 1.&lt;/li&gt;
&lt;li&gt;It will clear this interval only when &lt;code&gt;percent&lt;/code&gt; is greater than &lt;code&gt;100&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's what that looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HlDGx6ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2chnphc832fd9gnge26v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlDGx6ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2chnphc832fd9gnge26v.gif" alt="Final Progress Bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-do-it-with-css"&gt;
  &lt;/a&gt;
  Step 3: Do it with CSS
&lt;/h2&gt;

&lt;p&gt;What if I tell you we can avoid the second step completely by using CSS? Here's how –&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;load_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress_bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.progress-bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;progress_bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;s linear width`&lt;/span&gt;
        &lt;span class="nx"&gt;progress_bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will achieve the same result but I personally prefer this one as it is much cleaner and done with CSS (instead of intervals which can be a bit messy).&lt;/p&gt;

&lt;p&gt;Let me know what you think about this in the comments. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
