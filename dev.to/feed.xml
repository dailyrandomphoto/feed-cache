<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>20+ Projects you can do to become a Frontend Master</title>
      <author>JavaScript</author>
      <pubDate>Fri, 05 Nov 2021 03:44:25 +0000</pubDate>
      <link>https://dev.to/reactjss/20-projects-you-can-do-to-become-a-frontend-master-56f0</link>
      <guid>https://dev.to/reactjss/20-projects-you-can-do-to-become-a-frontend-master-56f0</guid>
      <description>&lt;p&gt;Whatever you do, it's always beneficial to have the right tools at your disposal. I love working remotely and am a big advocate of doing remote software development. Therefore, I always strive to have the best equipment available to be as productive as possible. Writing posts like this constantly takes a lot of time. Luckily iVanky helped me out and sponsored this post so that I can concentrate on writing. I recently had the chance to test out one of their hottest products, a dual USB-C Docking Station that allows me to connect both my wide-screen monitors to my MacBook with Dual 4K@60Hz display connectivity. It also supports up to 96W laptop charging, which is awesome. If you are in a situation like me and want to upgrade your equipment, check out this and their other products! And now comes the article:&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/9-projects-you-can-do-to-become-a-front-end-master/&amp;amp;ved=2ahUKEwjB0KKXp4D0AhWGF3IKHe3LAacQFnoECAcQAQ&amp;amp;usg=AOvVaw2t7-_QAPDVzRhEVlb4h7WW"&gt;20+ Projects you can do to become a Frontend Master&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Web Development or App Development? Where to start?</title>
      <author>dee-ksha</author>
      <pubDate>Fri, 05 Nov 2021 03:09:19 +0000</pubDate>
      <link>https://dev.to/deeksha_51/web-development-or-app-development-where-to-start-59gl</link>
      <guid>https://dev.to/deeksha_51/web-development-or-app-development-where-to-start-59gl</guid>
      <description>&lt;p&gt;One common question that I have seen my peers ask is whether to start their development journey with Web development or App Development. Beginners in tech are often confused about the right choice to make because there is a wide variety of options and areas to explore.&lt;/p&gt;

&lt;p&gt;Web Development and App Development are emerging sectors for developers. Both the fields have their own benefits and complexities and require different skills, different markets and diversified usage. Therefore, there is no model answer to what you should be starting first.&lt;/p&gt;

&lt;p&gt;But according to my own experience I would suggest to go for web development first due to the following reasons:&lt;/p&gt;

&lt;p&gt;‚Ä¢ App development is the fastest leading trend but web development is something that will never disappear. The web is the best platform for acquiring new users and building a brand. Nearly all brands that opt for an app-based approach build a website too in order to market and promote their app. &lt;/p&gt;

&lt;p&gt;‚Ä¢ Web development is slightly easier to understand and apply than app development and it also lays down a framework which helps in many areas of app development as well like making an API, using different database technologies, working with server and backend etc.&lt;/p&gt;

&lt;p&gt;Whichever route you choose, you'll learn something great and there's no better time to kickstart your development journey than now. So, get yourself started now. Good luck!&lt;/p&gt;

&lt;p&gt;Be curious, Be Innovative and Keep Learning!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>appdev</category>
      <category>beginners</category>
      <category>developers</category>
    </item>
    <item>
      <title>Get Unlimitedüòç BTC With This Line Of Code üî•</title>
      <author>JavaScript</author>
      <pubDate>Fri, 05 Nov 2021 02:46:42 +0000</pubDate>
      <link>https://dev.to/reactjss/get-unlimited-btc-with-this-line-of-code-4lp6</link>
      <guid>https://dev.to/reactjss/get-unlimited-btc-with-this-line-of-code-4lp6</guid>
      <description>&lt;p&gt;Bitcoin inventor Satoshi Nakamoto capped the number of bitcoin at 21 million, meaning there will only ever be 21 million bitcoins in existence. On average, these bitcoins are introduced to the Bitcoin supply at a fixed rate of one block every 10 minutes. In addition, the number of bitcoins released in each of these aforementioned blocks is reduced by 50% every four years. By August 2021, 18.7 million bitcoins were available, leaving roughly 2.3 million to be mined.1 The supply limitation makes Bitcoin scarce and controls inflation that might arise from an unlimited supply of the cryptocurrency. &lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/the-best-beginner-javascript-projects-for-2021/&amp;amp;ved=2ahUKEwj-uLOnmoD0AhVHEncKHeIWDXwQFnoECBoQAQ&amp;amp;sqi=2&amp;amp;usg=AOvVaw16eIeKYPB8xzH6B1hMi2E6"&gt;Get Unlimited BTC With This Line Of Code&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Best programming languages to start your coding journey with</title>
      <author>dee-ksha</author>
      <pubDate>Fri, 05 Nov 2021 02:31:55 +0000</pubDate>
      <link>https://dev.to/deeksha_51/best-programming-languages-to-start-your-coding-journey-with-1lg5</link>
      <guid>https://dev.to/deeksha_51/best-programming-languages-to-start-your-coding-journey-with-1lg5</guid>
      <description>&lt;p&gt;Whether you are looking to start coding as a hobby or to pursue a career, the very first step is to decide which programming language to begin with.&lt;/p&gt;

&lt;p&gt;There are hundreds of programming languages in widespread use, each with it's own complexities, pros and cons. If you are a beginner then it might be confusing to choose where to start from, after all you will be putting time and efforts into learning so you would want to steer in the right direction.&lt;/p&gt;

&lt;p&gt;There are several things to consider while making your decision like: &lt;/p&gt;

&lt;p&gt;‚Ä¢ The fields which are accompanied by the language&lt;br&gt;
‚Ä¢ Speed and Efficiency&lt;br&gt;
‚Ä¢ Portability&lt;br&gt;
‚Ä¢ Degree of use&lt;br&gt;
‚Ä¢ Level of the language&lt;br&gt;
‚Ä¢ Developer Experience&lt;br&gt;
‚Ä¢ Level of difficulty&lt;br&gt;
‚Ä¢ Job opportunities&lt;br&gt;
‚Ä¢ Support and Resources&lt;/p&gt;

&lt;p&gt;You should do a thorough research about the benefits and drawbacks of the language you want to choose, consider the above mentioned conditions along with your requirements and kickstart your coding journey. &lt;/p&gt;

&lt;p&gt;Be Curious and Keep Learning!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>cpp</category>
      <category>java</category>
    </item>
    <item>
      <title>How to Create a Tinder Clone Dating Web App In Node JS</title>
      <author>Hiep Le</author>
      <pubDate>Fri, 05 Nov 2021 02:27:38 +0000</pubDate>
      <link>https://dev.to/cometchat/how-to-create-a-tinder-clone-dating-web-app-in-node-js-545k</link>
      <guid>https://dev.to/cometchat/how-to-create-a-tinder-clone-dating-web-app-in-node-js-545k</guid>
      <description>&lt;p&gt;What you‚Äôll be building, Git Repo &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/"&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mNw2kbja4GA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#featured-articles"&gt;
  &lt;/a&gt;
  Featured Articles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-an-uber-clone-app-with-react-1l73"&gt;Uber Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-a-social-networking-site-with-next-js-facebook-clone-3eke"&gt;Facebook Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-a-javascript-chat-app-493c"&gt;Javascript Chat App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-build-a-java-voice-video-chat-app-for-android-3hd7"&gt;Voice &amp;amp; Video Chat App for Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/cometchat/how-to-add-mentions-to-a-react-chat-app-37gm"&gt;Add @Mentions to a React Chat App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to see more tutorials like this, you can check my profile üòä&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;App and web development have come a long way over the last few years. We use a lot of dating sites every day, including Tinder, Bumble, OkCupid, Hinge, and so on. One of the most widely used features is Tinder. Using the &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start"&gt;CometChat&lt;/a&gt; &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=js-sdk"&gt;communications SDK&lt;/a&gt; and &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; backend services, you will learn how to build one of the best dating sites on the internet with minimal effort. This tutorial will help you to create a dating web app in Node.js.&lt;/p&gt;

&lt;p&gt;Follow along the steps to build a Tiner clone that will allow users:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Users

&lt;ul&gt;
&lt;li&gt;Functionality for end-users to login &amp;amp; register&lt;/li&gt;
&lt;li&gt;Functionality for users to create their own profiles like Tinder&lt;/li&gt;
&lt;li&gt;A way for users to look at other user-profiles and either accept or reject (swipe)&lt;/li&gt;
&lt;li&gt;A way for users to match and communicate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chat

&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=js-sdk"&gt;CometChat JavaScript SDK&lt;/a&gt; and configure it such that-&lt;/li&gt;
&lt;li&gt;Only matched users can text chat, as well as voice &amp;amp; video, call each other&lt;/li&gt;
&lt;li&gt;Login the logged-in user to CometChat.&lt;/li&gt;
&lt;li&gt;Add API call when a user registers so that the user is created in CometChat
## Prerequisites&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To follow this tutorial, you must have a degree of understanding of the general use of &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://www.mysql.com/"&gt;MySQL&lt;/a&gt; database. This will help you to improve your understanding of this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h2&gt;

&lt;p&gt;To create a new project, you just need to create a folder which is called ‚Äútinder-clone‚Äù and then run ‚Äúnpm init‚Äù. After following the instruction, you will a brand new Node.js project. The image below reveals the project structure of our Tinder clone application. Make sure you see the folder arrangement before proceeding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atCKGCyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632758373480_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atCKGCyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632758373480_image.png" alt="Figure 1. Project Structure" width="224" height="221"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each subfolder and file will be explained in detail in the following section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;public:&lt;/strong&gt; contains all html, css, javascript files for the UI.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;routes:&lt;/strong&gt; contains all files that will be used to handle the API requests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;screenshots:&lt;/strong&gt; this folder contains images that are used for README.md file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.env:&lt;/strong&gt; contains environment variables that will be used in the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.gitignore:&lt;/strong&gt; this file contains files that will be ignored when committing the code. In this case, we do not want to commit the ‚Äúconfig.js‚Äù file because it contains the secret keys of the Javascript chat application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;package.json:&lt;/strong&gt; contains all dependencies of the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;README.md:&lt;/strong&gt; describes the application and provides steps by steps to run the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;tinder_clone.sql:&lt;/strong&gt; contains scripts that you need to use to create the database and its tables.
## Installing the Tinder Clone Dependencies&lt;/li&gt;
&lt;li&gt;Step 1: You need to have &lt;a href="https://nodejs.org/en"&gt;Node.js&lt;/a&gt; installed on your machine&lt;/li&gt;
&lt;li&gt;Step 2: Copy dependencies from the &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/package.json"&gt;package.json&lt;/a&gt; file.&lt;/li&gt;
&lt;li&gt;Step 3: Run ‚Äúnpm i‚Äù to install the dependencies for the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;  &lt;em&gt;If your MySQL server is incopatible with the mysql package because while setting up the MySQL server, you chose ‚ÄúUse Strong Password Encryption‚Äù instead of ‚ÄúUse Legacy Password Encryption‚Äù. You need to use ‚Äúmysql2‚Äù package instead of mysql package.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-cometchat"&gt;
  &lt;/a&gt;
  Configuring CometChat
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Head to CometChat and &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=signup"&gt;create an account&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;From the &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=signup"&gt;dashboard&lt;/a&gt;, add a new app called "chat-widget".&lt;/li&gt;
&lt;li&gt;Select this newly added app from the list.&lt;/li&gt;
&lt;li&gt;From the Quick Start copy the APP_ID, REGION, and AUTH_KEY, which will be used later.&lt;/li&gt;
&lt;li&gt;Also, copy the REST_API_KEY from the API &amp;amp; Auth Keys tab.&lt;/li&gt;
&lt;li&gt;Navigate to the Users tab, and delete all the default users and groups leaving it clean &lt;em&gt;(very important)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Create a file called ‚Äúconfig.js‚Äù in the ‚Äùpublic/js‚Äù folder of your project.&lt;/li&gt;
&lt;li&gt;Import and inject your secret keys in the ‚Äúconfig.js‚Äù file containing your CometChat in this manner.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAppId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatRegion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAuthKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;CometChatAPIKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Make sure to include this file in your gitIgnore file from being exposed online.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-database"&gt;
  &lt;/a&gt;
  Setting Up Database
&lt;/h2&gt;

&lt;p&gt;As mentioned above, we will use the MySQL database. For this reason, this section describes how to create the database and its table. Before proceeding, you need to make sure that you have installed the MySQL database on your computer already. To create the database and its table, you need to get the SQL &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/tinder_clone.sql"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The above sql specifies that we need to create tables - ‚Äúuser‚Äù and ‚Äúmatch_request‚Äù. The user table is used to store user‚Äôs information for the application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;id - id of the user. It will be increased automatically when a new user has been created.&lt;/li&gt;
&lt;li&gt;user_email - email of the user.&lt;/li&gt;
&lt;li&gt;user_password - password of the user.&lt;/li&gt;
&lt;li&gt;user_full_name - full name of the user.&lt;/li&gt;
&lt;li&gt;user_age - age of the user.&lt;/li&gt;
&lt;li&gt;user_avatar - avatar of the user.&lt;/li&gt;
&lt;li&gt;user_gender - gender of the user.&lt;/li&gt;
&lt;li&gt;user_cometchat_uid - CometChat uid of the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, the requirement determines that we need a way for users to match and communicate. Therefore, the ‚Äúmatch_request‚Äù table is created to help us store the match requests in the application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;id - id of the match request. It will be increased automatically when a new user has been created.&lt;/li&gt;
&lt;li&gt;match_request_from - CometChat uid of the user who sent the match request.&lt;/li&gt;
&lt;li&gt;match_request_to - CometChat uid of the user who will receive the match request.&lt;/li&gt;
&lt;li&gt;match_request_sender - the sender name.&lt;/li&gt;
&lt;li&gt;match_request_receiver - the receiver name.&lt;/li&gt;
&lt;li&gt;match_request_status - status of the match request (0 is pending, 1 is accepted, -1 is rejected).&lt;/li&gt;
&lt;li&gt;created_date - the date that the match request has been sent.&lt;/li&gt;
&lt;li&gt;accepted_date - the date that the match_request has been accepted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aside from that, we are using Node.js with MySQL database. Hence, we need to connect to the database in our Node.js application, The best practice is to create a .env file and store environment variables. To create the .env file, please follow the below steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Create a file which is call ‚Äú.env‚Äù inside the root folder of your project.&lt;/li&gt;
&lt;li&gt;Step 2: Replace the below information with your database connection information.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_USER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_USER_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;span class="nx"&gt;DB_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xxx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#create-a-nodejs-server"&gt;
  &lt;/a&gt;
  Create a Node.js Server
&lt;/h2&gt;

&lt;p&gt;Inside the root folder of your project, you need to create a file which is called ‚Äúindex.js‚Äù. The full source code of the index.js file can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/index.js"&gt;here&lt;/a&gt;. It is the main file that will be ran when running the following statements&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;nodemon&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;nodemon&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;*&lt;em&gt;Note: In this project, we will use the ‚Äú&lt;/em&gt;&lt;a href="https://www.npmjs.com/package/nodemon"&gt;&lt;em&gt;nodemon&lt;/em&gt;&lt;/a&gt;&lt;em&gt;‚Äù library because  the application will be reloaded automatically whenever there is any change in your code.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The above code snippet specifies that we are including some libraries to help them create a server. In this case, we need to use the express framework and the multer library for uploading files because we are building a dating site in Node.js. Therefore, the application should allow the user to upload their avatar. Aside from that, the mysql library for connecting with the MySQL database and so on. The database connection information that will be read from the .env file and this file should be included in the .gitignore file.&lt;br&gt;
On the other hand, we are requiring all API routes of the application at line 53. However, we have not define it, yet. Please do not worry about it, we will discuss about it in the following section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./routes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dbConn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;constants&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-routes-folder"&gt;
  &lt;/a&gt;
  Creating the Routes Folder.
&lt;/h2&gt;

&lt;p&gt;The routes folder will contain API routes in the application. Inside this folder, we need to create another ‚Äúindex.js‚Äù file. We will export a function that will take responsibility for combining all API routes, that function accepts an object as a parameter. The object will contain the express app object, the database connector object, the upload object - created by the multer library, and the constants. Those objects will be used in different API routes as you can see in the below code snippet. The full source code of the ‚Äúindex.js‚Äù file can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;*&lt;em&gt;Note: We will define three API routes in the application. the ‚ÄúauthRoutes‚Äù is used for authenticated purpose, the ‚ÄúuserRoutes‚Äù is used for user management. The last but not least, the ‚ÄúmatchRequestRoutes‚Äù is used to manage the matching requests in the application. All of them will be discussed in the following section.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-apis-with-nodejs"&gt;
  &lt;/a&gt;
  Creating APIs with Node.js
&lt;/h2&gt;

&lt;p&gt;In this section, we will develop the APIs that will be needed to build our Tinder clone. The below endpoints describes the information about the APIs for the application. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/login&lt;/strong&gt;: check user‚Äôs credentials and ensure that the user can login to the application, or not.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hieptl@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123456&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/users/create&lt;/strong&gt;: create a new user in the application.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="nx"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hieptl&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123456&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt;
&lt;span class="nx"&gt;ccUid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uid1&lt;/span&gt;
&lt;span class="nx"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hiep&lt;/span&gt;
&lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;jpeg&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/users/recommend&lt;/strong&gt;: get the recommended users. In this application, the recommended users need to follow some criteria, each user, which is in the list, should not have any matching request with the current user. Following that, the gender of each user should be opposite to the current user‚Äôs gender.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gender&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ccUid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;/requests/create:&lt;/strong&gt; create a match requests between 2 users.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestFrom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestTo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestSender&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hiep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestReceiver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-login-api"&gt;
  &lt;/a&gt;
  The Login API
&lt;/h2&gt;

&lt;p&gt;The login API will receive the user‚Äôs credentials and validate that information. If the user‚Äôs information is valid, the user can log in to the application and vice versa. To create the login API, you need to create the ‚Äúauth.js‚Äù file inside the ‚Äúroutes‚Äù folder. The full source code of the login API can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/auth.js"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hieptl@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123456&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;its method is POST and the request payload should contain the user‚Äôs email and user‚Äôs password. If the user‚Äôs information is valid, the user‚Äôs gender and user‚Äôs CometChat uid will be returned back as a response object. Following that, a warning message will be returned if the user‚Äôs credentials are not valid. Your can refer to the code snippet below for more information. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-user-api"&gt;
  &lt;/a&gt;
  The User API
&lt;/h2&gt;

&lt;p&gt;This section will describe the APIs for user management. Firstly, we need to create the ‚Äúusers.js‚Äù file inside the ‚Äúroutes‚Äù folder. It will contains two API endpoints such as creating a new user account, recommend users based on the user‚Äôs gender and the CometChat uid. The full fouce code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/users.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-create-user-api"&gt;
  &lt;/a&gt;
  The Create User API
&lt;/h2&gt;

&lt;p&gt;In this part, we will develop an API to create a new account in the application. The API will have the below information. Its method is POST and we will send the form data format from the client side and the request should contain the user‚Äôs email, user‚Äôs password, user‚Äôs age, user‚Äôs gender, user‚Äôs avatar, user‚Äôs full name, and user‚Äôs CometChat uid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;Data&lt;/span&gt; &lt;span class="nx"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;hieptl&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;123456&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Male&lt;/span&gt;
&lt;span class="nx"&gt;ccUid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uid1&lt;/span&gt;
&lt;span class="nx"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hiep&lt;/span&gt;
&lt;span class="nx"&gt;avatar&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;jpeg&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The API should check the type of the avatar image. In this application, we allow the user to upload an image with jpeg format. Additionally, the above information is required. If you miss something in the request payload, a warning message will be returned back from the response. Moreover, the API will check the user‚Äôs email has been used in the application, or not. If it existed in the system, a warning message will be returned to inform the user about that. You can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-recommend-users-api"&gt;
  &lt;/a&gt;
  The Recommend Users API
&lt;/h2&gt;

&lt;p&gt;According to the requirements, we need to find a way for users to look at other user-profiles and either accept or reject (swipe). Hence, we will write an API to recommend users and show the list of recommended users on the UI. In this application, an user will be recommended if that user should not have any matching request with the current user. Following that, the gender of each user should be opposite to the current user‚Äôs gender. The full source code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/users.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-match-request-api"&gt;
  &lt;/a&gt;
  The Match Request API
&lt;/h2&gt;

&lt;p&gt;This section will describe the APIs for managing the matching requests. In the application, if the current user likes someone‚Äôs profile, the current user can swipe right or click on the heart icon. Firstly, we need to create the ‚Äúrequests.js‚Äù file inside the ‚Äúroutes‚Äù folder. It will contain an API endpoint and it is about creating a new matching request. The full source code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/routes/requests.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-create-match-request-api"&gt;
  &lt;/a&gt;
  The Create Match Request API
&lt;/h2&gt;

&lt;p&gt;In this part, we will develop an API to create a matching request in the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;POST&lt;/span&gt;
&lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestFrom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestTo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uid2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestSender&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hiep&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matchRequestReceiver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jane&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Its method is POST. The request payload will contain the below information.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;match_request_from - CometChat uid of the user who sent the match request.&lt;/li&gt;
&lt;li&gt;match_request_to - CometChat uid of the user who will receive the match request.&lt;/li&gt;
&lt;li&gt;match_request_sender - the sender name.&lt;/li&gt;
&lt;li&gt;match_request_receiver - the receiver name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The API will check the upcoming matching request has been created in the system, or not. If the matching request has been created, a warning message will be returned and let the user know about that. Following that, if the matching request has not been created, a new matching request will be created. You can refer to the code snippet below for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-client-side"&gt;
  &lt;/a&gt;
  Creating the Client Side
&lt;/h2&gt;

&lt;p&gt;We have finished creating APIs in the above sections. It is time to create the client side for our Tinder Clone. Inside the root folder, we need to create the ‚Äúpublic‚Äù folder. The structure of the public folder should be as follow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1nugRch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632819348931_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1nugRch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632819348931_image.png" alt="Figure 2. Folder Structure - Public Folder." width="222" height="158"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each subfolder and file will be explained in detail in the following section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;css:&lt;/strong&gt; contains all styling for our javascript chat application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;img:&lt;/strong&gt; contains images for the application such as logo, background, and so on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;js:&lt;/strong&gt; contains Javascript code and our business logic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;favicon.ico:&lt;/strong&gt; it is favicon.ico for the application.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;index.html:&lt;/strong&gt; root HTML file. HTML file for the home page.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;login.html:&lt;/strong&gt; HTML file for the login page.
## Configuring Styling for the Application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside our Tinder clone project structure, you need to create a styles.css file inside the ‚Äúcss‚Äù folder and paste the codes &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/css/styles.css"&gt;here&lt;/a&gt;. styles.css file will contain all CSS of the application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-images-for-the-application"&gt;
  &lt;/a&gt;
  Setting Up Images for the Application
&lt;/h2&gt;

&lt;p&gt;To store images for the application such as the logo and other images, you need to create the ‚Äúimg‚Äù folder inside your ‚Äúpublic‚Äù folder. Following that, if you can refer to this &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/tree/main/public/img"&gt;link&lt;/a&gt; to get the images that will be used in this tutorial. If someone uploaded the avatar, that avatar will be stored in this folder. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-login-page"&gt;
  &lt;/a&gt;
  The Login Page
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLwMjwT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829143358_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLwMjwT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829143358_image.png" alt="Figure 3. The Login Page." width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This page is responsible for authenticating users using the login API. It accepts the user credentials and either signs him/her up or in, depending on if he/she is new to our application. To create the login page for the Javascript chat application, you need to follow the below steps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Create login.html in the source folder. The source code can be found from &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/login.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You need to include some third-party libraries such as &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start"&gt;CometChat JS SDK&lt;/a&gt;, &lt;a href="https://github.com/uuidjs/uuid"&gt;Uuid&lt;/a&gt;, &lt;a href="https://github.com/validatorjs/validator.js/"&gt;Validator&lt;/a&gt; via CDN because you are building the Javascript chat app. Therefore, npm should not be used here. You need to add those libraries for some reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CometChat JS SDK: help us to integrate CometChat to the Javascript app. On the other hand, you need to use some other functionalities from CometChat such as registering a new user, letting the user log in to CometChat, or letting the user log out from CometChat.&lt;/li&gt;
&lt;li&gt;UUID: each created user should have a unique id. Hence, the UUID library is used to generate a unique key for each account.&lt;/li&gt;
&lt;li&gt;Validator: it is used to validate the login/sign-up form. Because you need to ensure that the input information is valid before creating a new account or letting a user log in to the chat application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides using third-party libraries, you need to build some files to handle the logic for the Tinder clone such as auth.js, config.js, util.js, login.js. Config.js were mentioned in the above sections. We will discuss auth.js, util.js, and login.js in the following parts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-authjs-file"&gt;
  &lt;/a&gt;
  The Auth.js File
&lt;/h2&gt;

&lt;p&gt;According to the requirements of the Tinder clone, the application needs to provide a way for users to login in and have a short profile. After the user has logged in to the application, the user cannot go back to the login page. On the other hand, if the user has not signed in to the application, the user cannot go to the home page. We need to define a solution to handle this case. Therefore, auth.js will be created to help us achieve that. The full source code can be found from &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/js/auth.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After the user has been logged in to the system, we will store the user‚Äôs information in the local storage. We will get the authenticated user from the local storage. Auth.js will be used on both the login page and the home page. It means that this file will be executed first before other actions. This file will take responsibility for checking the current user has logged in, or not. If the user has not logged in to the application, the user would be redirected to the login page. Otherwise, if the current user has logged in to the app, the user cannot go back to the login page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-utiljs-file"&gt;
  &lt;/a&gt;
  The Util.js File
&lt;/h2&gt;

&lt;p&gt;Some functionalities can be used across pages of the Javascript chat app such as showing or hiding the loading indicator or get the information of the authenticated user. To avoid duplicated code, you should store all common functionalities in a single file, and in this case, this file is called ‚Äúutil.js‚Äù. The full source code can found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/js/util.js"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-loginjs-file"&gt;
  &lt;/a&gt;
  The Login.js File
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqsb-A_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829191963_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yqsb-A_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829191963_image.png" alt="Figure 4. The Login Page" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_m_QyUra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829284202_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_m_QyUra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632829284202_image.png" alt="Figure 5. The Sign Up Form." width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The file will take responsibility for handling the business logic for the login page. This file contains functions which can let the user register a new account or log in to the application. The full source code can be found from &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/tree/main/public/js"&gt;here&lt;/a&gt;.&lt;br&gt;
After clicking the sign-up button, the ‚ÄúregisterNewAccount‚Äù function will be triggered. It accepts a JSON object as a parameter and the JSON object contains the user‚Äôs information including the user‚Äôs email, user‚Äôs password, user‚Äôs avatar, user‚Äôs age, user‚Äôs gender, and user‚Äôs full name. Before proceeding with further actions, the user‚Äôs information needs to be validated by using the ‚ÄúvalidateNewAccount‚Äù function. If the information is valid, a new account will be created by calling the create user API. After that, the application registers an account on CometChat by using the CometChat JS SDK. You can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To log in to the Tinder clone, the user needs to click on the ‚ÄúLogin‚Äù button. The below code snippet describes how to handle the business logic for the sign-in feature. the user‚Äôs credentials will be taken from the input elements first and the application validates that information. If the input information is valid, the application will let the user sign in by using the Login API. Aside from that, the authenticated user will be redirected to the home page.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-home-page"&gt;
  &lt;/a&gt;
  The Home Page
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zT-XQvWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633351251060_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zT-XQvWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633351251060_image.png" alt="Figure 6. The Home Page" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the user has logged in to the application, the user will be redirected to the home page and on this page, you will use CometChat JS SDK to build the application. To create the home page, you need to follow the below steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 1: Create index.html file in your project folder. The full source code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/index.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;As you can see on the code snippet above, you need to include the CometChat JS SDK from the CDN because we want to integrate the chat feature, and voice/video calling in the Tinder clone. Following that, jQuery, and jQuery mobile are also added to create the swipe effect. Moreover, the ‚Äútoastr‚Äù library will be included to show the notification in the application. You also need to include some common files, which were mentioned in the above sections, such as auth.js, config.js, util.js. The index.js file will be discussed in the following part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-indexjs-file"&gt;
  &lt;/a&gt;
  The Index.js File
&lt;/h2&gt;

&lt;p&gt;This file will take responsibility for showing greeting to the authenticated user on the header, showing the list of recommended users including the swipe effects, showing the list of friends, creating a match request, accepting the matching requests, handling the logic when clicking on the ‚ÄúLogout‚Äù button and integrating the chat feature and voice/video calling. The full source code can be found &lt;a href="https://github.com/cometchat-pro-tutorials/tinder-clone/blob/main/public/js/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-header"&gt;
  &lt;/a&gt;
  The Header
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5JnZkAd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633351291873_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5JnZkAd---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633351291873_image.png" alt="Figure 7. The Header." width="267" height="91"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to show greeting to the authenticated user on the header. To achieve that, we will get the information of the authenticated user from the local storage and then display that information on the header. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-recommended-users"&gt;
  &lt;/a&gt;
  The Recommended Users
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34GoBBVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632833757170_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34GoBBVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632833757170_image.png" alt="Figure 8. Recommended Users" width="429" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are building a dating site. Therefore, we need to show the list of recommended users to the current user. As mentioned before, the list of recommended users should not have any matching requests with the current user. Following that, the gender of each user should be opposite to the current user‚Äôs gender. To get the list of recommended users, we need to call the recommend user API. You can refer to the code snippet below for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Moreover, we need to handle the events when the user clicks on the heart icon or the cross icon, or swipe the suggested user‚Äôs profile to left/right. the ‚ÄúswipeRight‚Äù and ‚ÄúswipeLeft‚Äù functions will help us to achieve the swipe effect when the user swipes the suggested profiles to left/right. Following that, after swiping right, the application will create a matching request. If both of them accept each other. It means that the status of the match request is approved. We will call the ‚ÄúaddFriend‚Äù function. The ‚ÄúaddFriend‚Äù function will take responsibility for creating a new friendship on the CometChat service. Following that, we will show a toast message and call the ‚ÄúsendNotification‚Äù function. To receive the notification in real-time, we will create the ‚ÄúlistenForNotifications‚Äù function and then call it from the beginning. Following that, the custom type for the notification needs to be specified and in this case, it is ‚Äúmatch‚Äù. It means that whenever a new notification is coming with the ‚Äúmatch‚Äù type, the application needs to display the notification on the UI to inform the end-user about he/she has been matched with someone.  It will help us to increase the user experience of the application. You can refer to the below image and code snippet for more information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8K7mlE61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633667773070_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8K7mlE61--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633667773070_image.png" alt="Figure 9. Show a notification when two users have been matched." width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-matched-users-list"&gt;
  &lt;/a&gt;
  The Matched Users List
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DNSs84K3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632836315758_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DNSs84K3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1632836315758_image.png" alt="Figure 10. The Matched User List" width="434" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To show the list of matched users for the current user, we need to call the CometChat API. You can refer to the code snippet below for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-chat-box"&gt;
  &lt;/a&gt;
  The Chat Box
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7C9K5QPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633352094712_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7C9K5QPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633352094712_image.png" alt="Figure 11. The Chat Box." width="206" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the user selects any items from the matched users. The chatbox will be opened with support from the ‚ÄúopenChatBox‚Äù function. Aside from that, the ‚ÄúloadMessages‚Äù function will be called to fetch the past messages. The ‚ÄúlistenForMessages‚Äù function will be triggered to ensure that the current user will receive the messages from other users in real-time. To send the input message or make a call between different users, we will get support from the CometChat JS SDK. &lt;br&gt;
Your can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Furthermore, to increase the user experience of the application, we need to show a toast message when there is a new coming message. Therefore, the user will know about there is a new message from another user. In order to achieve that, we need to call the ‚ÄúsendNotification‚Äù function, and to receive the notification in real-time, the ‚ÄúlistenForNotification‚Äù will be called from the beginning. You can refer to the below UI for more information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K1X4w3TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633668659918_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K1X4w3TC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_CC8DEF8A2EB2A8072C68956E8B43C2672AB3AFA342317CBA618287A312CAB34F_1633668659918_image.png" alt="Figure 12. Show notification when there is a new coming message." width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also need to create a way to let the user make a audio call or video call. To achieve that features, you need to follow the guidelines from &lt;a href="https://prodocs.cometchat.com/docs/js-calling-default-calling?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=documentation"&gt;the CometChat documentation&lt;/a&gt;. You can refer to the below code snippet for more information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-logout-button"&gt;
  &lt;/a&gt;
  The Logout Button
&lt;/h2&gt;

&lt;p&gt;To logout from the system, the user needs to click on the ‚Äúexit‚Äù icon. We will call the logout function from the CometChat JS SDK and then the authenticated information will be cleared from the local storage.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, we have done an amazing job in developing a dating site by leveraging Node.js, and &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=js-sdk"&gt;CometChat JS SDK&lt;/a&gt;. You‚Äôve been introduced to the chemistry behind the Tinder clone and how the &lt;a href="https://prodocs.cometchat.com/docs/js-quick-start?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=js-sdk"&gt;CometChat JS SDK&lt;/a&gt; makes chat applications buildable.&lt;br&gt;
You have seen how to integrate most of the CometChat functionalities such as texting and real-time messaging. I hope you enjoyed this tutorial and that you were able to successfully build the Tinder clone. It's time to get busy and build other related applications with the skills you have gotten from this tutorial. You can start building your chat app for free by &lt;a href="https://app.cometchat.com/signup?utm_medium=referral&amp;amp;utm_source=dev.to&amp;amp;utm_campaign=hiep-lee&amp;amp;utm_content=nodejs-tinder-clone&amp;amp;utm_term=signup"&gt;signing up to the cometchat dashboard&lt;/a&gt; here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the Author
&lt;/h2&gt;

&lt;p&gt;Hiep Le is a software engineer. He takes a huge interest in building software products and is a full-time software engineer. Most of his work is focused on one thing - to help people learn.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>40+ ReactJS Projects for Beginners ‚Äì Easy Ideas to Get Started Coding [Beginners - Advance]</title>
      <author>JavaScript</author>
      <pubDate>Fri, 05 Nov 2021 02:19:01 +0000</pubDate>
      <link>https://dev.to/reactjss/40-reactjs-projects-for-beginners-easy-ideas-to-get-started-coding-beginners-advance-22i2</link>
      <guid>https://dev.to/reactjss/40-reactjs-projects-for-beginners-easy-ideas-to-get-started-coding-beginners-advance-22i2</guid>
      <description>&lt;p&gt;If you have decided to build your career in¬†&lt;span&gt;NodeJS¬†&lt;/span&gt;development, we have gathered a list of¬†&lt;span&gt;nodeJS projects for beginners&lt;/span&gt;¬†for all node enthusiasts to build highly scalable¬†&lt;a href="https://codersera.com/blog/native-apps-vs-web-apps-which-is-best-for-your-business/" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best¬†&lt;span&gt;nodeJS projects for beginners&lt;/span&gt;¬†will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it‚Äôs highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn¬†&lt;em&gt;git&lt;/em&gt;¬†and show your coding expertise to future employers.¬†&lt;/p&gt;
&lt;p&gt;Read More : &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/tag/reactjs-projects-for-beginners/&amp;amp;ved=2ahUKEwjAyN6D__7zAhWDf30KHcKYCAUQFnoECDIQAQ&amp;amp;usg=AOvVaw3aSVrBBd-RROVGkfKEip0e"&gt;40+ ReactJS Projects for Beginners ‚Äì Easy Ideas to Get Started Coding&lt;/a&gt;&lt;/b&gt;¬†¬†&lt;/p&gt;

</description>
    </item>
    <item>
      <title>5 reasons why you should use PropelAuth</title>
      <author>propelauthblog</author>
      <pubDate>Fri, 05 Nov 2021 01:45:35 +0000</pubDate>
      <link>https://dev.to/propelauth/5-reasons-why-you-should-use-propelauth-56b9</link>
      <guid>https://dev.to/propelauth/5-reasons-why-you-should-use-propelauth-56b9</guid>
      <description>&lt;p&gt;PropelAuth is a hosted, configurable authentication service. Below are five reasons why you should consider it for your product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-full-auth-ux-before-you-write-any-code"&gt;
  &lt;/a&gt;
  1. Full Auth UX before you write any code
&lt;/h2&gt;

&lt;p&gt;Once you sign up for PropelAuth, you immediately have your own authentication service. This includes a lot behind the scenes, but to your end-users, the first thing they will see is this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqmU0mlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmcgk9u65rl28tdvpfkq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqmU0mlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmcgk9u65rl28tdvpfkq.png" alt="Initial screen" width="300" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can brand your site easily by supplying your product's colors and a logo. This branding applies not only to all your auth pages, but also to any emails that we send (forgotten passwords, email confirmations, user invites, etc.).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ur8nqE8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcje2rhiabxyht7dla0z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ur8nqE8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tcje2rhiabxyht7dla0z.gif" alt="A user configuring hosted pages" width="800" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, this branding includes the URL your customers are on. We support custom domains so your users see your auth pages on &lt;code&gt;https://auth.yourdomain.com&lt;/code&gt;, not &lt;code&gt;https://yourname.propelauth.com&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-easily-extensible"&gt;
  &lt;/a&gt;
  2. Easily extensible
&lt;/h2&gt;

&lt;p&gt;Since PropelAuth hosts your auth pages, we simplify auth integrations. Below you can see a user adding a "Sign in with Google" button (commonly called social login). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m6v7ZewK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gspivfdul24qd4z89cr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m6v7ZewK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gspivfdul24qd4z89cr.gif" alt="A user configuring hosted pages" width="600" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don't need to worry about managing an OAuth flow or setting up redirect pages. Add your configuration, click save, and your users can sign in with Google.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-out-of-the-box-b2b-support"&gt;
  &lt;/a&gt;
  3. Out of the box B2B support
&lt;/h2&gt;

&lt;p&gt;For B2B auth, each user can belong to one or more "organizations". Most auth tools leave adding this as an exercise for you or there are a lot of missing features.&lt;/p&gt;

&lt;p&gt;With PropelAuth, B2B auth is a first-class feature. If enabled, your hosted pages includes customer portals so your end-users can create and manage their organizations. We provide hierarchical roles that are both easy to understand and supports most B2B auth use cases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--deAZOJjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcjzxap2rt9zm2ndkg0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--deAZOJjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcjzxap2rt9zm2ndkg0y.png" alt="A customer portal for managing FakeCorps org" width="700" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our libraries hide a lot of the complexities of B2B auth. For Flask (python), for example we have the &lt;code&gt;@auth.require_org_member&lt;/code&gt; decorator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/org/&amp;lt;org_id&amp;gt;/admin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;require_org_member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimum_required_role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;UserRole&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;admin_only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;org_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"You are at least an admin in &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;current_org&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which makes sure the request is from a valid user, that is a member of a specified organization, and is at least an &lt;code&gt;Admin&lt;/code&gt; within that organization.&lt;/p&gt;

&lt;p&gt;Since we are talking about libraries...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-easy-to-use-libraries"&gt;
  &lt;/a&gt;
  4. Easy to use libraries
&lt;/h2&gt;

&lt;p&gt;Once you've set up your auth pages, you need to integrate your product. It is our job to understand auth, not yours. Our libraries are easily used by anyone - security background or not.&lt;/p&gt;

&lt;p&gt;Our &lt;a href="https://docs.propelauth.com/getting-started/frontend-integration/"&gt;frontend libraries&lt;/a&gt; integrate with your PropelAuth auth instance, allowing you to easily do things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Determine if the current user is logged in or not&lt;/li&gt;
&lt;li&gt;Get metadata for the current user&lt;/li&gt;
&lt;li&gt;Make authenticated requests to your backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, our &lt;a href="https://docs.propelauth.com/getting-started/backend-integration/"&gt;backend libraries&lt;/a&gt; allow your backend to easily:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reject unauthenticated requests&lt;/li&gt;
&lt;li&gt;Understand which user made a request&lt;/li&gt;
&lt;li&gt;Get user metadata for any user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's more to discover, but with these building blocks you can quickly and easily build a secure product.&lt;/p&gt;

&lt;p&gt;We currently support React + vanilla Javascript on the frontend and Node/Express + Flask on the backend. If you want to use a language or framework that you use that we don't yet support, please reach out at &lt;a href="//mailto:support@propelauth.com"&gt;support@propelauth.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-clear-documentation"&gt;
  &lt;/a&gt;
  5. Clear documentation
&lt;/h2&gt;

&lt;p&gt;We consider documentation to be one of the most important parts of our product. &lt;/p&gt;

&lt;p&gt;Our &lt;a href="https://docs.propelauth.com"&gt;documentation&lt;/a&gt; includes &lt;a href="https://docs.propelauth.com/getting-started/"&gt;a step-by-step getting started guide&lt;/a&gt;, &lt;a href="https://docs.propelauth.com/example-apps/"&gt;example apps built from scratch&lt;/a&gt;, &lt;a href="https://blog.propelauth.com/adding-auth-to-b2c-comments/"&gt;guide where we added auth to an existing app&lt;/a&gt;, and &lt;a href="https://docs.propelauth.com/reference/"&gt;full references for our libraries&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-its-free-to-try"&gt;
  &lt;/a&gt;
  Bonus: It's free to try
&lt;/h2&gt;

&lt;p&gt;Lastly, it's free to try out locally. You only pay when you want to go live. Check us out at &lt;a href="https://www.propelauth.com"&gt;https://www.propelauth.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any questions/thoughts for us, please reach out at &lt;a href="//mailto:support@propelauth.com"&gt;support@propelauth.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>auth</category>
      <category>tooling</category>
      <category>security</category>
    </item>
    <item>
      <title>Windows Custom Terminal</title>
      <author>Ushieru Kokoran</author>
      <pubDate>Fri, 05 Nov 2021 01:35:20 +0000</pubDate>
      <link>https://dev.to/ushieru/windows-custom-terminal-2b1g</link>
      <guid>https://dev.to/ushieru/windows-custom-terminal-2b1g</guid>
      <description>&lt;p&gt;Hace poco que volv√≠ a usar windows por el anuncio de W11.&lt;br&gt;
Mientras buscaba terminales que funcionaran bien; me decid√≠ por &lt;strong&gt;Windows Terminal&lt;/strong&gt;, si bien esta ya cuenta con personalizaci√≥n de colores, no era exactamente lo que estaba buscando. As√≠ que hoy te mostrarte como pasar de esto -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sqQM8TgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20440dhtdn9f42lortxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sqQM8TgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20440dhtdn9f42lortxw.png" alt="Terminal" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a esto -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wja-a124--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67soo4npzu3htb88sq6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wja-a124--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67soo4npzu3htb88sq6f.png" alt="Custom Terminal" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#paso-1"&gt;
  &lt;/a&gt;
  Paso 1
&lt;/h3&gt;

&lt;p&gt;Asegur√©monos de tener &lt;strong&gt;winget&lt;/strong&gt; disponible en nuestra terminal, sino quiz√° deber√≠as actualizar tu &lt;a href="https://www.microsoft.com/store/productId/9NBLGGH4NNS1"&gt;App Installer&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#paso-2"&gt;
  &lt;/a&gt;
  Paso 2
&lt;/h2&gt;

&lt;p&gt;Instalar &lt;a href="https://ohmyposh.dev/"&gt;Oh My Posh&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;winget &lt;span class="nb"&gt;install &lt;/span&gt;JanDeDobbeleer.OhMyPosh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-3"&gt;
  &lt;/a&gt;
  Paso 3
&lt;/h2&gt;

&lt;p&gt;Crear un perfil de powershell, para esto el mismo Microsoft nos da unos pasos muy sencillos a seguir.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Para crear el perfil
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!(&lt;/span&gt;Test-Path &lt;span class="nt"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  New-Item &lt;span class="nt"&gt;-ItemType&lt;/span&gt; File &lt;span class="nt"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$PROFILE&lt;/span&gt; &lt;span class="nt"&gt;-Force&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Para editar el perfil
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;notepad &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-3"&gt;
  &lt;/a&gt;
  Paso 3
&lt;/h2&gt;

&lt;p&gt;Agregar la configuraci√≥n a $PROFILE para iniciar la terminal con oh-my-posh.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;oh-my-posh &lt;span class="nt"&gt;--init&lt;/span&gt; &lt;span class="nt"&gt;--shell&lt;/span&gt; pwsh &lt;span class="nt"&gt;--config&lt;/span&gt; ~&lt;span class="se"&gt;\A&lt;/span&gt;ppData&lt;span class="se"&gt;\L&lt;/span&gt;ocal&lt;span class="se"&gt;\P&lt;/span&gt;rograms&lt;span class="se"&gt;\o&lt;/span&gt;h-my-posh&lt;span class="se"&gt;\t&lt;/span&gt;hemes&lt;span class="se"&gt;\j&lt;/span&gt;andedobbeleer.omp.json | Invoke-Expression
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quiz√° para este punto te gastar√≠a reiniciar el perfil para ver el resultado.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;NOTE:&lt;br&gt;
Si no utilizas alguna &lt;a href="https://www.nerdfonts.com/"&gt;NERD FONT&lt;/a&gt; es probable que no veas los iconos y solo veas unos cuadros feos por ah√≠.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#paso-4"&gt;
  &lt;/a&gt;
  Paso 4
&lt;/h2&gt;

&lt;p&gt;Instala la nerd font de tu preferencia para este ejemplo usare la de Hack Nerd Font, por que se parece un poco a la Jetbrains Mono que es la que utilizo para mi editor. Si eres bastante nuevo en esto te recomiendo solo instalar la &lt;strong&gt;regular complete&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;para abrir las configuraciones de la terminal usa &lt;code&gt;ctrl + ,&lt;/code&gt; y busca &lt;strong&gt;Abrir archivo json&lt;/strong&gt; y lo modificamos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"profiles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"defaults"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"fontFace"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hack Nerd Font"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;AQUI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;VA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;TU&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;FUENTE&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-5"&gt;
  &lt;/a&gt;
  Paso 5
&lt;/h2&gt;

&lt;p&gt;Busca el tema que mas te agrade y c√°mbialo a tu gusto.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Get-ChildItem &lt;span class="nt"&gt;-Path&lt;/span&gt; &lt;span class="s2"&gt;"~&lt;/span&gt;&lt;span class="se"&gt;\A&lt;/span&gt;&lt;span class="s2"&gt;ppData&lt;/span&gt;&lt;span class="se"&gt;\L&lt;/span&gt;&lt;span class="s2"&gt;ocal&lt;/span&gt;&lt;span class="se"&gt;\P&lt;/span&gt;&lt;span class="s2"&gt;rograms&lt;/span&gt;&lt;span class="se"&gt;\o&lt;/span&gt;&lt;span class="s2"&gt;h-my-posh&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;hemes&lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-Include&lt;/span&gt; &lt;span class="s1"&gt;'*.omp.json'&lt;/span&gt; | Sort-Object Name | ForEach-Object &lt;span class="nt"&gt;-Process&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$esc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;char]27
    Write-Host &lt;span class="s2"&gt;""&lt;/span&gt;
    Write-Host &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$esc&lt;/span&gt;&lt;span class="s2"&gt;[1m&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;.BaseName&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$esc&lt;/span&gt;&lt;span class="s2"&gt;[0m"&lt;/span&gt;
    Write-Host &lt;span class="s2"&gt;""&lt;/span&gt;
    oh-my-posh &lt;span class="nt"&gt;--config&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$_&lt;/span&gt;.FullName&lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;--pwd&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;
    Write-Host &lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Una vez que te decidas que tema utilizar solo cambialo en tu $PROFILE.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;notepad &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;oh-my-posh &lt;span class="nt"&gt;--init&lt;/span&gt; &lt;span class="nt"&gt;--shell&lt;/span&gt; pwsh &lt;span class="nt"&gt;--config&lt;/span&gt; ~&lt;span class="se"&gt;\A&lt;/span&gt;ppData&lt;span class="se"&gt;\L&lt;/span&gt;ocal&lt;span class="se"&gt;\P&lt;/span&gt;rograms&lt;span class="se"&gt;\o&lt;/span&gt;h-my-posh&lt;span class="se"&gt;\t&lt;/span&gt;hemes&lt;span class="se"&gt;\A&lt;/span&gt;QUI_VA_EL_NOMBRE_DEL_TEMA_QUE_TE_HAYA_GUSTADO.omp.json | Invoke-Expression
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;reinicia el perfil&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$PROFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-6"&gt;
  &lt;/a&gt;
  Paso 6
&lt;/h2&gt;

&lt;p&gt;Quieres ir un poco mas all√°? modifica el tema predeterminado a tu gusto. Exporta una copia del tema, haz todas las modificaciones que quieras y cambia la direcci√≥n del archivo a cargar en tu $PROFILE, mucha suerte.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Export-PoshTheme &lt;span class="nt"&gt;-FilePath&lt;/span&gt; &lt;span class="s2"&gt;"~/.AQUI_VA_EL_NOMBRE_DEL_TEMA_QUE_QUIERAS_MODIFICAR.omp.json"&lt;/span&gt; &lt;span class="nt"&gt;-Format&lt;/span&gt; json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tienes alguna duda? D√©jala en los comentarios üëÄüëÄ&lt;br&gt;
Happy hacking üßë‚Äçüíª&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>windows</category>
      <category>spanish</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>November 4th, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 05 Nov 2021 00:21:09 +0000</pubDate>
      <link>https://dev.to/nickytonline/november-4th-2021-what-did-you-learn-this-week-54fm</link>
      <guid>https://dev.to/nickytonline/november-4th-2021-what-did-you-learn-this-week-54fm</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/qKltgF7Aw515K/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/qKltgF7Aw515K/giphy.gif" alt="Information flowing through your brain" width="496" height="419"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklyretro</category>
      <category>weeklylearn</category>
      <category>discuss</category>
    </item>
    <item>
      <title>First PR for Release 0.3</title>
      <author>Ahmad</author>
      <pubDate>Thu, 04 Nov 2021 23:55:01 +0000</pubDate>
      <link>https://dev.to/ar/first-pr-for-release-03-ii9</link>
      <guid>https://dev.to/ar/first-pr-for-release-03-ii9</guid>
      <description>&lt;p&gt;For release 0.3, I knew right away that I'd continue working on &lt;a href="https://github.com/takelley1/OCVBot"&gt;OCVBot&lt;/a&gt;, the project I last worked on for 0.2. OCVBot is a very interesting project that uses CV (computer vision) to automate tasks in the game &lt;a href="https://oldschool.runescape.com/"&gt;Old School RuneScape&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h1&gt;

&lt;p&gt;For 0.3, I wanted to work on an issue that was essential to the project. I looked around the project for TODOs that looked important and found one. &lt;code&gt;switch_worlds_logged_out()&lt;/code&gt;, a function that should click the world switcher button at the bottom of the client and select a new world. A "world" is a server for the game.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#world-switcher-button"&gt;
  &lt;/a&gt;
  World switcher button
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4NP6jsbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz1h4oy7me7ohruogjb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4NP6jsbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vz1h4oy7me7ohruogjb8.png" alt="Image description" width="115" height="62"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#world-selection-page"&gt;
  &lt;/a&gt;
  World selection page
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmqymRjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdde5irx1s90cpwoaqvs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmqymRjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdde5irx1s90cpwoaqvs.png" alt="Image description" width="708" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One solution to this would be to take screenshots of every world and use them as needles, but this would be a mess and take a ton of time. &lt;/p&gt;

&lt;p&gt;Because the world selection page is a grid, I had the idea to use each world as a cell. We could do some math on the cell's &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt; to figure out the pixel coordinates for it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt; values would have to be stored somewhere, as there's no other way to read this without using a bunch of needles as stated earlier. So I had to make a "world scraping" script that scrapes the world list on the &lt;a href="https://oldschool.runescape.com/a=13/slu?order=WMLPA"&gt;website&lt;/a&gt; of the game and sets &lt;code&gt;column&lt;/code&gt; and &lt;code&gt;row&lt;/code&gt; values as they appear.&lt;/p&gt;

&lt;p&gt;With a good idea on how to continue, I created an &lt;a href="https://github.com/takelley1/OCVBot/issues/7"&gt;issue&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#world-scraper"&gt;
  &lt;/a&gt;
  World Scraper
&lt;/h3&gt;

&lt;p&gt;I first got to work on the world scraper. I used the python library &lt;code&gt;urllib&lt;/code&gt; to get the html of the page and &lt;code&gt;BeautifulSoup&lt;/code&gt; to parse it. The main table could easily be found using it's class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Find the table rows
&lt;/span&gt;&lt;span class="n"&gt;tbody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tbody"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"server-list__body"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;trs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tr"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With a list of rows, we can iterate and pull the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Iterate each &amp;lt;tr&amp;gt; element
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;trs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Get all &amp;lt;td&amp;gt; elements in the row
&lt;/span&gt;    &lt;span class="n"&gt;tds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"td"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Parse out relevant data
&lt;/span&gt;    &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"slu-world-"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;world_members_only&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"Members"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;world_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The data can then be passed into a dict and stored:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# False and "None" by default
&lt;/span&gt;&lt;span class="n"&gt;world_pvp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;world_skill_requirement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"None"&lt;/span&gt;

&lt;span class="c1"&gt;# Check world description
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"PvP"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;world_description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;world_pvp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s"&gt;"skill total"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;world_description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;world_skill_requirement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" skill total"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;worlds_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"members_only"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;world_members_only&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"pvp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;world_pvp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"total_level_requirement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;world_skill_requirement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"column"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MAX_ROWS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;column&lt;/code&gt; variable is incremented whenever &lt;code&gt;row&lt;/code&gt; is incremented past the maximum number of rows per column, 24.&lt;/p&gt;

&lt;p&gt;I added some extra attributes such as &lt;code&gt;members_only&lt;/code&gt; because they'd surely be useful in the future.&lt;/p&gt;

&lt;p&gt;Once the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; list is done iterating, the &lt;code&gt;worlds_data&lt;/code&gt; dict is dumped to &lt;code&gt;worlds.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Write to json file
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"worlds.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;worlds_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#worldsjson"&gt;
  &lt;/a&gt;
  worlds.json
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"301"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"members_only"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"pvp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"total_level_requirement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"row"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"column"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"302"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"members_only"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"pvp"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"total_level_requirement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"row"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"column"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I submitted a &lt;a href="https://github.com/takelley1/OCVBot/pull/8"&gt;pull request&lt;/a&gt; for this which was merged after some quick review fixes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#back-to-the-main-issue"&gt;
  &lt;/a&gt;
  Back to the main issue
&lt;/h3&gt;

&lt;p&gt;With our &lt;code&gt;worlds.json&lt;/code&gt; in place, I continued on the main issue, &lt;code&gt;switch_worlds_logged_out()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I started by adding basic needles that I knew I'd need:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tL0nT4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8f32ybti7zpw85yw3xs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tL0nT4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8f32ybti7zpw85yw3xs.png" alt="Image description" width="98" height="18"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ncZnm-y1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0atdrhekizt32aa2qrp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ncZnm-y1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0atdrhekizt32aa2qrp5.png" alt="Image description" width="35" height="22"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sio9Er7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/239zkh09ms9a8y44e0nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sio9Er7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/239zkh09ms9a8y44e0nq.png" alt="Image description" width="53" height="13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last needle ensures the world selector is filtered in the correct way. &lt;/p&gt;

&lt;p&gt;I then had to figure out the offsets from the top of the client and the left side of the client to the middle of the first world in the selector, 301.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H4ojYx0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7u3qaqb0sjnkz6vzynn9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4ojYx0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7u3qaqb0sjnkz6vzynn9.png" alt="Image description" width="190" height="112"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using an AutoHotKey script,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CoordMode, Mouse, Screen
SetTimer, Check, 20
return

Check:
MouseGetPos, xx, yy
Tooltip %xx%`, %yy%
return

Esc::ExitApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I figured out the offsets to be 110 from the left and 43 from the top.&lt;/p&gt;

&lt;p&gt;Now I had to find the offsets from the middle of the first world, to the middle of the world below it and to the side of it, worlds 302 and 325. Using the same method, I found the offsets to be +19 on the &lt;code&gt;y&lt;/code&gt; coordinate to get the world below and +93 on the &lt;code&gt;x&lt;/code&gt; coordinate to get the world to the right.&lt;/p&gt;

&lt;p&gt;Using some math, we can now figure out the coordinates of any world using this formula:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Coordinates for the first world
&lt;/span&gt;&lt;span class="n"&gt;first_world_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;
&lt;span class="n"&gt;first_world_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;

&lt;span class="c1"&gt;# Apply offsets using the first world as a base
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_world_x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;X_OFFSET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;first_world_y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Y_OFFSET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mouse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;move_duration_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;click_coord&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the last line, &lt;code&gt;32&lt;/code&gt; and &lt;code&gt;6&lt;/code&gt; are the width and height originating from the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values. &lt;code&gt;click_coord()&lt;/code&gt; clicks on a random pixel in that region.&lt;/p&gt;

&lt;p&gt;This worked beautifully, but I had a problem. If the world we want to select is off the screen (on another page), we can't select it. So I added a simple if statement that checks if the column of the target world is greater than the maximum number of columns per page (7). If it is, find the &lt;code&gt;next page&lt;/code&gt; needle and click it the exact number of times needed for the world to be visible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# If the world is off screen
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_cols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;next_page_btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;needle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"needles/login-menu/next-page.png"&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;wait_for_needle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_tuple&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_page_btn&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to find next page button!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="c1"&gt;# Click next page until the world is on screen
&lt;/span&gt;    &lt;span class="n"&gt;times_to_click&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;max_cols&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times_to_click&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mouse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;next_page_btn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;move_duration_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;click_coord&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Set the world's col to max, it'll always be in the last col
&lt;/span&gt;    &lt;span class="c1"&gt;# after it's visible
&lt;/span&gt;    &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_cols&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#pull-request"&gt;
  &lt;/a&gt;
  Pull Request
&lt;/h1&gt;

&lt;p&gt;With everything working, I submitted a &lt;a href="https://github.com/takelley1/OCVBot/pull/9"&gt;PR&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#review"&gt;
  &lt;/a&gt;
  Review
&lt;/h3&gt;

&lt;p&gt;The project owner requested some changes.&lt;/p&gt;

&lt;p&gt;Notably, he wanted the script to automatically filter the world selector properly, if it hasn't been, and to use &lt;code&gt;click_needle()&lt;/code&gt; for clicking the next page button.&lt;/p&gt;

&lt;p&gt;I let him know that &lt;code&gt;click_needle()&lt;/code&gt; was giving me issues. Once the mouse was over the needle, it couldn't be found anymore because the image is altered. He expanded the function by adding a &lt;code&gt;number_of_clicks&lt;/code&gt; parameter to it, which solved the problem. &lt;/p&gt;

&lt;p&gt;He also provided a function for the world filtering, which I initially used, until he wanted it changed again to a more abstract function called &lt;code&gt;enable_button()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I made these changes and the PR was merged!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Wait for green world filter button, fails if filter is not set correctly
&lt;/span&gt;&lt;span class="n"&gt;world_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;needle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"needles/login-menu/world-filter-enabled.png"&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;wait_for_needle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;world_filter&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;enabled_filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enable_button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"needles/login-menu/world-filter-disabled.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s"&gt;"needles/login-menu/world-filter-enabled.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;enabled_filter&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# If the world is off screen
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MAX_COLUMNS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Click next page until the world is on screen
&lt;/span&gt;    &lt;span class="n"&gt;times_to_click&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;MAX_COLUMNS&lt;/span&gt;
    &lt;span class="n"&gt;next_page_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vision&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;needle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"needles/login-menu/next-page.png"&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;click_needle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_of_clicks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;times_to_click&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;next_page_button&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unable to find next page button!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="c1"&gt;# Set the world's col to max, it'll always be in the last col
&lt;/span&gt;    &lt;span class="c1"&gt;# after it's visible
&lt;/span&gt;    &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MAX_COLUMNS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_pmRaLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6caivjozv5tufsy7692r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_pmRaLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6caivjozv5tufsy7692r.gif" alt="Image description" width="600" height="396"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#outcomes"&gt;
  &lt;/a&gt;
  Outcomes
&lt;/h1&gt;

&lt;p&gt;This issue was a noticeable step up from any of my 0.2 PRs. I had no idea I'd be web scraping! I really enjoy working with this project owner because of his very insightful code reviews. I'm really learning a lot about good practices and Python in general from them.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Memory Management in V8, garbage collection and improvements</title>
      <author>Jennie</author>
      <pubDate>Thu, 04 Nov 2021 23:34:27 +0000</pubDate>
      <link>https://dev.to/jennieji/memory-management-in-v8-garbage-collection-and-improvements-18e6</link>
      <guid>https://dev.to/jennieji/memory-management-in-v8-garbage-collection-and-improvements-18e6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QxCHjAn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tFMayEZj--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eixp1flyvwotr4mr08no.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QxCHjAn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tFMayEZj--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eixp1flyvwotr4mr08no.png" alt="Out of memory" width="715" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe most of us have seen "Javascript heap out of memory" exception somewhere. What does it really mean?&lt;/p&gt;

&lt;p&gt;Well, to answer this question we need to talk a bit about the engine that powers both the Chromium browsers and Node.js - V8, and how it manages its memory consumption.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-memory-model"&gt;
  &lt;/a&gt;
  The memory model
&lt;/h2&gt;

&lt;p&gt;The memory space of V8 is categorised into 2 - Stack  memory and Heap memory, and the Heap memeory is further divided into multiple spaces to serve different purposes.&lt;/p&gt;

&lt;p&gt;Here is an comprehensive and complicated graph I found in a blog -&lt;a href="https://deepu.tech/memory-management-in-v8/"&gt;Visualizing memory management in V8 Engine&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J4DjsB_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kSgatSL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J4DjsB_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kSgatSL.png" alt="The memory model" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Put aside of the complication first and let's look at how is the memory allocated when running a simple piece of code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newVar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;myNumber&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final memory allocation will look like this (from blog &lt;a href="https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239"&gt;JavaScript‚Äôs Memory Model&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fx5aXpcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/SerbzvVKzhGd4x-yREx3PN4fXBcLW0BivGQ-tbcWAQ4d9SwKOz6iISRMCu6SXAEmkh9ZAmeTtx3G_ac6MkhHdRlhqGxIDXSS15PBoCzFaZEjg4yVylHvSoFahylVKc_kVaNK3FtkODY" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fx5aXpcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/SerbzvVKzhGd4x-yREx3PN4fXBcLW0BivGQ-tbcWAQ4d9SwKOz6iISRMCu6SXAEmkh9ZAmeTtx3G_ac6MkhHdRlhqGxIDXSS15PBoCzFaZEjg4yVylHvSoFahylVKc_kVaNK3FtkODY" alt="img" width="880" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The static values like number and string are pushed directly into the &lt;strong&gt;Stack&lt;/strong&gt; memory space in order, while the object value is stored into &lt;strong&gt;Heap&lt;/strong&gt; memory, and its Heap memory address is pushed into the Stack. This is generally how Stack and Heap divide the work. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-stack-memory"&gt;
  &lt;/a&gt;
  The stack memory
&lt;/h3&gt;

&lt;p&gt;The stack memory (or we often call it call stack) is pretty straight forward. The engine pushes static value in when it runs a line of code declaring new stuffs. If it enters a code block (basically those code wrapped by &lt;code&gt;{}&lt;/code&gt;), it may form a stack frame for the declarations inside.&lt;/p&gt;

&lt;p&gt;Once the engine finishes running a code block, it pops out the value or the frame to free up the memory space. &lt;/p&gt;

&lt;p&gt;(GIF from blog &lt;a href="https://deepu.tech/memory-management-in-programming/"&gt;Demystifying memory management in modern programming languages&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lInxMFo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/7KpvEn1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lInxMFo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/7KpvEn1.gif" alt="The call stack" width="880" height="517"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the nature of the call stack will clear itself, &lt;strong&gt;the memory consumption of the call stack is usually not a concern&lt;/strong&gt; though its space is limited. Unless you've written some function iterating code like I did in my blog &lt;a href="https://dev.to/jennieji/divide-and-conquer-could-be-tricky-in-js-27l2"&gt;Divide and conquer could be tricky in JS - tricks of avoiding maximum call stacks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To understand further about how Stack and Heap work together, I found this deck is really helpful: &lt;a href="https://speakerdeck.com/deepu105/v8-memory-usage-stack-and-heap"&gt;https://speakerdeck.com/deepu105/v8-memory-usage-stack-and-heap&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-heap-memory"&gt;
  &lt;/a&gt;
  The heap memory
&lt;/h3&gt;

&lt;p&gt;The heap memory stores dynamic data that may change anytime while code is running, and the data may refer to each other. It could be a chaos graph. As a result, in order to know whether a part of memory is still under usage, the engine have to traverse from a set of roots to figure out the the relationship.&lt;/p&gt;

&lt;p&gt;Traversing a graph and a potentially giant graph is much much slower than simply push/pop a stack. Therefore, the garbage collection methodologies kick in and play the critical roles in the engine. &lt;/p&gt;

&lt;p&gt;I found these methodologies are incredibly interesting.&lt;/p&gt;

&lt;p&gt;In V8, the garbage collector is named &lt;strong&gt;Orinoco&lt;/strong&gt;. It divides the heap memory space into 2 regions: young generation and old generation.&lt;/p&gt;

&lt;p&gt;This design is based on a generational hypothesis:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In most cases, young objects are much more likely to die than old objects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the young/old generation take different strategies.&lt;/p&gt;

&lt;p&gt;The minor GC for the young generation applies a much faster but space consuming algorithm called &lt;strong&gt;Scavenge&lt;/strong&gt;. V8 allocates much smaller space for the young generation and hence the algorithm runs much more frequently.&lt;/p&gt;

&lt;p&gt;The major GC for the old generation applies a slower &lt;strong&gt;Mark-Sweep-Compact&lt;/strong&gt;, and introduced various other methods to compensate for the issues caused by its slowness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scavenge-of-the-minor-gc-young-generation"&gt;
  &lt;/a&gt;
  Scavenge of the minor GC (young generation)
&lt;/h2&gt;

&lt;p&gt;The minor GC for the young generation applies a much faster but space consuming algorithm called &lt;strong&gt;Scavenge&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It's space consuming as it makes the young generation space split evenly into a &lt;strong&gt;from-space&lt;/strong&gt; and &lt;strong&gt;to-space&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;(Graph from &lt;a href="https://v8.dev/blog/trash-talk"&gt;Trash Talk&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WRyRG1mx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://v8.dev/_img/trash-talk/03.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WRyRG1mx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://v8.dev/_img/trash-talk/03.svg" alt="" width="880" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the process of Scavenge looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLEd3ttN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja4auf40hor2yo1msnox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLEd3ttN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja4auf40hor2yo1msnox.png" alt="Process of Scavenge" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The garbage collection process only starts when a new object comes in and find no more place for it in the from-space. Then it traverses a &lt;strong&gt;old-to new root set&lt;/strong&gt; to figure out whether the object is still alive and whether it has been survived from the last round.&lt;/p&gt;

&lt;p&gt;If the object is no longer used, leave it there. If it is still alive and has been survived from the garbage collecting twice, then it will be copied into the old generation. Otherwise, it will be copied into to-space.&lt;/p&gt;

&lt;p&gt;Once traversing finished, simply swap the to-space and from-space and update the wrting pointer of the "new" to-space to the start to drop everything left behind.&lt;/p&gt;

&lt;p&gt;For this old-to-new root set, I haven't yet dig further to understand completely.  According to &lt;a href="https://v8.dev/blog/trash-talk"&gt;Trash Talk&lt;/a&gt;, it is a small subset maintained by V8's &lt;strong&gt;write barriers&lt;/strong&gt; - the piece of code triggers when Javascript tries to update any object value, which is another long story... V8 has done a lot of other things in the write barriers to assist with the performance improvements according to &lt;a href="https://v8.dev/blog/concurrent-marking#write-barrier"&gt;Concurrent marking in V8&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#marksweepcompact-of-the-major-gc-old-generation"&gt;
  &lt;/a&gt;
  Mark-Sweep-Compact of the major GC (old generation)
&lt;/h2&gt;

&lt;p&gt;The major GC for the old generation applies &lt;strong&gt;Mark-Sweep-Compact&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#marksweep"&gt;
  &lt;/a&gt;
  Mark-Sweep
&lt;/h3&gt;

&lt;p&gt;The original and naive &lt;strong&gt;Mark-Sweep&lt;/strong&gt; simply traverses the the whole heap graph to mark the objects still alive and then another walk through of the memory space to remove those not alive any more.&lt;/p&gt;

&lt;p&gt;(GIF from Wiki &lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection"&gt;Tracing garbage collection&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0l2I7kbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/4/4a/Animation_of_the_Naive_Mark_and_Sweep_Garbage_Collector_Algorithm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0l2I7kbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/4/4a/Animation_of_the_Naive_Mark_and_Sweep_Garbage_Collector_Algorithm.gif" alt="Naive Mark-Sweep" width="420" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This naive approach will stop the world before it finishes its business, and the twice memory reading is not friendly for the memory unit itself.&lt;/p&gt;

&lt;p&gt;To improve this, a &lt;strong&gt;Tri-color Mark-Sweep&lt;/strong&gt; was born, and V8 uses this approach. It marks the objects with 3 status instead of simply alive/non-alive:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;White - the initial state of an object.&lt;/li&gt;
&lt;li&gt;Grey - the object is reachable from the root set, and going to be examined or is examining.&lt;/li&gt;
&lt;li&gt;Black - the object has been examined.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Write barriers will mark the new objects as white first. Then when a GC cycle starts, major GC traverses the heap graph from the root set and updates the reachable objects to grey. If all the subsequent paths of the object have been examined, major GC will update the object mark to black.&lt;/p&gt;

&lt;p&gt;(GIF from Wiki &lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection"&gt;Tracing garbage collection&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbvKaAoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/1/1d/Animation_of_tri-color_garbage_collection.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbvKaAoY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/1/1d/Animation_of_tri-color_garbage_collection.gif" alt="Tri-color Mark-Sweep" width="430" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this process, the grey color serves as an intermediate state, and white, black are the final states. Once a GC cycle finished, the objects left in the white set are not alive and could be recycled.&lt;/p&gt;

&lt;p&gt;Comparing to the naive approach, the tri-color approach could avoid the second time traversal in a GC cycle. In the meantime, it could wisely use the intermediate state to allow scripts keep running while marking at the same time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compact"&gt;
  &lt;/a&gt;
  Compact
&lt;/h3&gt;

&lt;p&gt;After a GC cycle, it could leave various small empty spaces in the memory, and V8 may not able to find a proper space to store a big object as it expects to find a continuous space instead of multiple small spaces. Therefore,  it is necessary to compact the memory fragments together and free up some large continuous space in the memory after GC.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u50Nsy-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d3i71xaburhd42.cloudfront.net/579ddc1c3fb50a554ac93a9d6d7095aa1f506a66/1-Figure1-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u50Nsy-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d3i71xaburhd42.cloudfront.net/579ddc1c3fb50a554ac93a9d6d7095aa1f506a66/1-Figure1-1.png" alt="Compact" width="656" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-improvements-for-the-major-gc"&gt;
  &lt;/a&gt;
  Performance improvements for the major GC
&lt;/h2&gt;

&lt;p&gt;The performance improvement battle never ends. And V8 applies several interesting approaches to improve the performance of the major GC, including intremental, concurrent, lazy sweeping and lazy compacting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#incremental"&gt;
  &lt;/a&gt;
  Incremental
&lt;/h3&gt;

&lt;p&gt;As Javascript runs in single thread, any extra processes may interrup the script and affect the user experiences. &lt;/p&gt;

&lt;p&gt;To minimize the impact, the first thing we can think of is to split the works into smaller sub tasks and runs in between of the script process. So the pauses will be small enough to not be noticed:&lt;/p&gt;

&lt;p&gt;(Image from &lt;a href="https://v8.dev/blog/concurrent-marking"&gt;Concurrent Marking&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZs7ghY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://v8.dev/_img/concurrent-marking/05.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZs7ghY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://v8.dev/_img/concurrent-marking/05.svg" alt="Incremental" width="595" height="50"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This approach is called incremental. Sounds familiar? Yes! React Fibre is doing this as well.&lt;/p&gt;

&lt;p&gt;However, it has side-effects according to &lt;a href="https://v8.dev/blog/concurrent-marking"&gt;Concurrent Marking&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The application has to notify the garbage collector about all operations that change the object graph. V8 implements the notification using a Dijkstra-style write-barrier.&lt;/p&gt;

&lt;p&gt;Because of the write-barrier cost, incremental marking may reduce throughput of the application. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#parrarel-concurrent"&gt;
  &lt;/a&gt;
  Parrarel / Concurrent
&lt;/h3&gt;

&lt;p&gt;To reduce the side-effects caused by incremental, V8 team introduces multiple threads to help.&lt;/p&gt;

&lt;p&gt;This includes parallel:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Parallel&lt;/strong&gt; marking happens on the main thread and the worker threads. The application is paused throughout the parallel marking phase. It is the multi-threaded version of the stop-the-world marking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--la_fLUQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://v8.dev/_img/concurrent-marking/06.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--la_fLUQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://v8.dev/_img/concurrent-marking/06.svg" alt="Parallel" width="595" height="120"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And concurrent:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Concurrent&lt;/strong&gt; marking happens mostly on the worker threads. The application can continue running while concurrent marking is in progress.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zGrqlY2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://v8.dev/_img/concurrent-marking/07.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zGrqlY2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://v8.dev/_img/concurrent-marking/07.svg" alt="Concurrent" width="595" height="120"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it's another long long story of how these approaches are implemented. If you are interested in more details, you may read the blog &lt;a href="https://v8.dev/blog/concurrent-marking#parallel-marking"&gt;Concurrent Marking&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazy-sweeping"&gt;
  &lt;/a&gt;
  Lazy sweeping
&lt;/h3&gt;

&lt;p&gt;When we talk about sweeping and freeing up the memory, we usually mean overwrite the memory chunk to "empty", which involves writing and writing consumes resources.&lt;/p&gt;

&lt;p&gt;In V8, instead of clearing the space, GC records these "free" memory chunks down into a list, and organize them by the chunk sizes. When a new object comes in, it looks up in this list for an appropriate place to allocate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazy-compacting"&gt;
  &lt;/a&gt;
  Lazy compacting
&lt;/h3&gt;

&lt;p&gt;If you have ever played with the Windows memory compaction program, you will know how slow that compaction could be.&lt;/p&gt;

&lt;p&gt;To reduce the impact on performance, GC will only compact some of the highly fragmented pages. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-amp-references"&gt;
  &lt;/a&gt;
  Conclusion &amp;amp; References
&lt;/h2&gt;

&lt;p&gt;This learning opened my eyes of how much complicated things are going on behind our scripts. And I am also wondering whether the complication could be simplified as more mechanisms introduced, may also introduce more consumption of resources. How could we define the balance point?&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@ethannam/javascripts-memory-model-7c972cd2c239"&gt;Javascript‚Äôs Memory Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v8.dev/blog/trash-talk"&gt;Trash talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://deepu.tech/memory-management-in-v8/"&gt;Visualizing memory management in V8 Engine (JavaScript, NodeJS, Deno, WebAssembly)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection"&gt;Tracing garbage collection - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v8.dev/blog/concurrent-marking"&gt;Concurrent marking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>v8</category>
      <category>memory</category>
      <category>gc</category>
    </item>
    <item>
      <title>My First JavaScript REST API: Dog Facts Deployed To Heroku</title>
      <author>mrsharm</author>
      <pubDate>Thu, 04 Nov 2021 23:20:47 +0000</pubDate>
      <link>https://dev.to/mrsharm/my-first-javascript-rest-api-dog-facts-deployed-to-heroku-522p</link>
      <guid>https://dev.to/mrsharm/my-first-javascript-rest-api-dog-facts-deployed-to-heroku-522p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8uXRDkLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7efdyzuarzo4x9fxlrcw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uXRDkLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7efdyzuarzo4x9fxlrcw.jpg" alt="Dogs" width="880" height="664"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I recently deployed my first Javascript REST API that returns facts about dogs. The impetus behind creating this project was to get a working front end solution with the API providing the data. While working on the front end, I started making use of the python API by DukeNgn that can be found &lt;a href="https://github.com/DukeNgn/Dog-facts-API"&gt;here&lt;/a&gt; and ran into &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORs&lt;/a&gt; issues that prevented me from getting the data. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h2&gt;

&lt;p&gt;My main goal was to get the API deployed as quickly as possible and therefore, relied on the simplest solution making use of &lt;code&gt;Express&lt;/code&gt; and the Javascript &lt;code&gt;fs&lt;/code&gt; library to read a JSON file with all the facts. I also used the &lt;code&gt;cors&lt;/code&gt; javascript library to make sure I wouldn't run into the same issue as the python library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// App config.
const app = express();
app.use(express.json());
app.use(Cors());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the code is available &lt;a href="https://github.com/MokoSan/DogFacts-API"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-with-heroku"&gt;
  &lt;/a&gt;
  Deployment with Heroku
&lt;/h2&gt;

&lt;p&gt;The deployment to Heroku was smooth following &lt;a href="https://devcenter.heroku.com/articles/git"&gt;this&lt;/a&gt; tutorial. The only issue I got into was hardcoding a port that wasn't agreeable with Heroku for which configuring the listening port accordingly did the trick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const port = process.env.PORT || 5000;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One of the coolest Heroku features was to hook up my GitHub repository to Heroku resulting in an automatic deployment whenever I pushed changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hpEzyBZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cd56u85y7574nejuw10n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hpEzyBZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cd56u85y7574nejuw10n.png" alt="Image description" width="880" height="221"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dogfacts-api.herokuapp.com/api/v1/resources/dogs"&gt;https://dogfacts-api.herokuapp.com/api/v1/resources/dogs&lt;/a&gt; for all the dog facts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dogfacts-api.herokuapp.com/api/v1/resources/dogs?number=%7Bnumber%7D"&gt;https://dogfacts-api.herokuapp.com/api/v1/resources/dogs?number={number}&lt;/a&gt; for a particular number of random dog facts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dogfacts-api.herokuapp.com/api/v1/resources/dogs?index=%7Bindex%7D"&gt;https://dogfacts-api.herokuapp.com/api/v1/resources/dogs?index={index}&lt;/a&gt; for a dog fact associated with the index - there are 435 total facts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dogfacts-api.herokuapp.com/api/v1/resources/dogs?number=2"&gt;https://dogfacts-api.herokuapp.com/api/v1/resources/dogs?number=2&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
    {"fact":"Dogs are direct descendants of wolves."},
    {"fact":"Small quantities of grapes and raisins can cause renal failure in dogs. Chocolate, macadamia nuts, cooked onions, or anything with caffeine can also be harmful."}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Building the API was an awesome learning experience! Any feedback about the code or this blogpost would be greatly appreciated.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>opensource</category>
      <category>heroku</category>
    </item>
  </channel>
</rss>
