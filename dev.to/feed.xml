<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Creating PowerShell Cmdlets in VSCode</title>
      <author>Daniel R. Przybylski</author>
      <pubDate>Wed, 19 Jan 2022 23:19:59 +0000</pubDate>
      <link>https://dev.to/alfetta159/creating-powershell-cmdlets-in-vscode-3gap</link>
      <guid>https://dev.to/alfetta159/creating-powershell-cmdlets-in-vscode-3gap</guid>
      <description>&lt;p&gt;Nothing has ever made Linux so exciting for me than Microsoft's recent push to make many of their development tools and frameworks cross-platform. With the exception of ordering on-line, checking email, research.., oh, and a few social media sites, I'm just a coder. Not a gamer, not a TikToker, just a coder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-this-article-about-linux"&gt;
  &lt;/a&gt;
  Is This Article about Linux?
&lt;/h2&gt;

&lt;p&gt;Now I mentioned Linux. This article isn't about Linux, but it's not about Windows either. It's about writing PowerShell cmdlets in VSCode. And PowerShell, .NET, and VSCode all work across those two operating systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why"&gt;
  &lt;/a&gt;
  But Why?
&lt;/h2&gt;

&lt;p&gt;Why do we need PowerShell when Linux normally relies on Bash? Because if you're an enterprise coder like me, it's nice to be able to rely on familiar and stalwart platforms, languages and tools like Windows, .NET, C# and VisualStudio/Code to create APIs, SDKs and cmdlets that help other programmers including those who might be scripting in JavaScript or PowerShell. In other words, not .NET. Notice that I didn't use the term low-code? JS, PS and whatever else can be very sophisticated, and I'm looking for cross-platform capability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What?
&lt;/h2&gt;

&lt;p&gt;Recently I wanted to unify a lot of our emailing that was happening from various applications in various ways. We want to move to the cloud, and while some of our new apps have, others haven't. We also wanted to have basic endpoints that would handle the vast majority of our standard emails. We wanted email templates that were more about just notifying the correct folks that more information was available to them and show them where to log on to see the important and private stuff all the while being careful to not display this proprietary information in the email itself. After all, you don't want to see a subject line saying something like, "That test you took came back positive!" in an email from your HMO, do you?&lt;/p&gt;

&lt;p&gt;We rely on &lt;a href="https://sendgrid.com/"&gt;SendGrid&lt;/a&gt; as a cloud SMTP provider, but creating a nice looking email in HTML takes a bit of prep in their API. So we created a template that would handle input like recipients: to, cc, bcc and then sections of the email: subject, what the email is about, why you're receiving it, instructions on what to do, and then even an email link that would take all of that information and send it to our internal help desk system in a plain-text email in case the recipient had a problem. Then this was hosted as an Azure Function project.&lt;/p&gt;

&lt;p&gt;So now that JavaScript people and anyone who wants to talk directly to our API thru HTTPS can by posting ordinary information in form of strings without any styling metadata. Then we created a .NET-base SDK allowing the .NET folks to access the same Azure Functions but without all that mucking about with HTTP clients, URI concatenation or POST body encoding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-about-the-others"&gt;
  &lt;/a&gt;
  But What about the Others?
&lt;/h2&gt;

&lt;p&gt;The others? You know, folks who have to maintain systems that might run on Linux or are simple console apps that are triggered by scheduled tasks in Windows or are actually Powershell scripts or modules. Wouldn't it be nice to be able to just install a cmdlet and start sending shiny, branded, HTML-based emails that have corporate logos and convenient links for those not so tech savvy?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#then-how-finally"&gt;
  &lt;/a&gt;
  Then How? (Finally!)
&lt;/h2&gt;

&lt;p&gt;First, install &lt;a href="https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell?view=powershell-7.2"&gt;PowerShell&lt;/a&gt; and &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt; on your system. If you're really installing VSCode for the first time, then you'll probably need &lt;a href="https://dotnet.microsoft.com/en-us/download/dotnet/6.0"&gt;.NET&lt;/a&gt; as well.&lt;br&gt;
Then you'll need a project. This should be a class library. You can base it in .NET Framework or .NET Standard, but I use the latest .NET. I swore off .NET Framework some time ago, and this is a cmdlets, not a library. Okay, it's a library, but not one that lends itself well to derivation by other assemblies. Oh, and .NET (Core) runs on Linux as well as Windows and something called MacOS.&lt;/p&gt;

&lt;p&gt;So we run (in whatever terminal you like):&lt;br&gt;
`dotnet new classlib --name "MyCmdletProject" &lt;/p&gt;

&lt;p&gt;There are far more options to this command, but that's not what this post is about. Then you'll need to reference the System.Management.Automation NuGet package:&lt;br&gt;
`dotnet add package System.Management.Automation &lt;/p&gt;

&lt;p&gt;You'll need a tasks.json file as well as a launch.json file that are placed in that .vscode folder that VSCode places in certain project folders.&lt;/p&gt;

&lt;p&gt;The task.json file can look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;See&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;https://go.microsoft.com/fwlink/?LinkId=&lt;/span&gt;&lt;span class="mi"&gt;733558&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;documentation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tasks.json&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;format&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tasks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"process"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dotnet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}/MyCmdletProject.csproj"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"/property:GenerateFullPaths=true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"/consoleloggerparameters:NoSummary"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"group"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"presentation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Reveal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;only&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;unrecognized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;errors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;occur.&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"reveal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"silent"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;standard&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;MS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;compiler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;pattern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;detect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;warnings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;infos&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"problemMatcher"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$msCompile"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the launch.json should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;IntelliSense&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;learn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;possible&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;attributes.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Hover&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;view&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;descriptions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;existing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;attributes.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;For&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;more&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;information&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;visit:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;https://go.microsoft.com/fwlink/?linkid=&lt;/span&gt;&lt;span class="mi"&gt;830387&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"configurations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PowerShell cmdlets: pwsh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"coreclr"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"request"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"launch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"preLaunchTask"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"program"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pwsh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"-NoExit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"-NoProfile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"-Command"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"Import-Module ${workspaceFolder}/bin/Debug/net6.0/&amp;lt;output&amp;gt;.dll"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"cwd"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"${workspaceFolder}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"stopAtEntry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"console"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"integratedTerminal"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind that just like in Visual Studio, we need to debug by launching the PowerShell application and immediately importing the cmdlet that we just created when we called the build &lt;code&gt;task&lt;/code&gt; in the &lt;code&gt;preLaunchTask&lt;/code&gt; of our &lt;code&gt;launch.json&lt;/code&gt; file. And the arguments are where the magic happens: &lt;code&gt;NoExit&lt;/code&gt; so we effectively don't close the terminal, &lt;code&gt;NoProfile&lt;/code&gt; so we don't inadvertently cause any harm to our system, and then &lt;code&gt;Command&lt;/code&gt; telling pwsh to run the arguments for that option: &lt;code&gt;Import-Module ${workspaceFolder}/bin/Debug/net6.0/MyCmdletProject.dll&lt;/code&gt;. So we're not only launching our own instance of PowerShell, but we're telling it to import our resulting library file so we can then call it in the terminal. And the process for doing this in Visual Studio is similar. It's just that the same information (command and arguments) are entered into the Debug section of the properties of the cmdlet project.&lt;/p&gt;

&lt;p&gt;So enjoy the freedom of not only running PowerShell scripts with custom cmdlets in any of the major operating systems, enjoy the freedom of writing and debugging them too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/powershell/scripting/dev-cross-plat/vscode/using-vscode-for-debugging-compiled-cmdlets?view=powershell-7.2"&gt;Using Visual Studio Code to debug compiled cmdlets&lt;/a&gt;&lt;/p&gt;

</description>
      <category>powershell</category>
      <category>vscode</category>
      <category>cmdlet</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Getting Started with YugabyteDB and Docker
</title>
      <author>Shawn Sherwood</author>
      <pubDate>Wed, 19 Jan 2022 23:18:24 +0000</pubDate>
      <link>https://dev.to/ssherwood/getting-started-with-yugabytedb-and-docker-5263</link>
      <guid>https://dev.to/ssherwood/getting-started-with-yugabytedb-and-docker-5263</guid>
      <description>&lt;p&gt;When developing modern applications, it is important to maintain &lt;a href="https://12factor.net/dev-prod-parity"&gt;dev/prod parity&lt;/a&gt; (that is, keep development, staging, and production as similar as possible).  This should also extend to the local development environment.  Containerization makes it easy to achieve consistency across all environments, even with more complicated components such as databases.&lt;/p&gt;

&lt;p&gt;YugabyteDB is a cloud-native, &lt;a href="https://blog.yugabyte.com/what-is-distributed-sql/"&gt;distributed SQL database&lt;/a&gt; that is also &lt;a href="https://blog.yugabyte.com/is-your-distributed-database-postgresql-compatible/"&gt;PostgreSQL compatible&lt;/a&gt;.  This interoperability makes it possible for developers to leverage existing tools, languages, and frameworks to quickly become productive with a modern distributed RDBMS.&lt;/p&gt;

&lt;p&gt;In this blog post, we’ll show you how to run YugabyteDB on your local machine with the convenience of a Docker container and not require manual installation.  It is useful to have a fully working database running locally to explore YugabyteDB features and for application development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#download-options"&gt;
  &lt;/a&gt;
  Download Options
&lt;/h2&gt;

&lt;p&gt;YugabyteDB can be &lt;a href="https://download.yugabyte.com/"&gt;downloaded and installed manually&lt;/a&gt;, but for many scenarios, it is easier to use an OCI compliant Docker container on Mac, Linux or the Windows Subsystem for Linux (WSL).&lt;/p&gt;

&lt;p&gt;As a convenience, this guide uses &lt;a href="https://podman.io/"&gt;podman&lt;/a&gt; as a replacement for the Docker CLI.  Podman has the distinct advantage of being a daemonless container engine that can run without requiring root privilege escalation.  It is still possible to use the Docker CLI with this guide by replacing the Podman command "podman" with "docker".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#downloading-the-yugabytedb-oci-docker-image"&gt;
  &lt;/a&gt;
  Downloading the YugabyteDB OCI Docker Image
&lt;/h3&gt;

&lt;p&gt;To review available YugabyteDB versions, use the "Filter Tags" feature on the DockerHub &lt;a href="https://hub.docker.com/r/yugabytedb/yugabyte/tags"&gt;tags&lt;/a&gt; page to find the specific version tag desired.  It is also possible to use the DockerHub API directly (if on Linux or Mac):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-L&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s1"&gt;'https://registry.hub.docker.com/v2/repositories/yugabytedb/yugabyte/tags?page_size=5'&lt;/span&gt; | jq &lt;span class="s1"&gt;'."results"[]["name"]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command fetches all the images tag metadata and limits the result to the first 5. If you don’t already have jq installed, please refer to the &lt;a href="https://stedolan.github.io/jq/download/"&gt;installation documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In most cases, it is desirable to use a specific version of the database and not rely on the &lt;em&gt;latest&lt;/em&gt; tag.  For example, to download the 2.8.0 release use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;podman pull yugabytedb/yugabyte:2.8.0.0-b37
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;YugabyteDB stable releases use an even numbered minor version (e.g. 2.6, 2.8, etc.).  Odd numbered minor versions are considered more experimental.  Read more about &lt;a href="https://docs.yugabyte.com/latest/releases/versioning/"&gt;YugabyeDB Release Versioning&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-yugabytedb-container"&gt;
  &lt;/a&gt;
  Running the YugabyteDB Container
&lt;/h2&gt;

&lt;p&gt;Once the YugabteDB image is local, run it using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;podman run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; yugabyte-2.8.0 &lt;span class="nt"&gt;-p7000&lt;/span&gt;:7000 &lt;span class="nt"&gt;-p9000&lt;/span&gt;:9000 &lt;span class="nt"&gt;-p5433&lt;/span&gt;:5433 &lt;span class="nt"&gt;-p9042&lt;/span&gt;:9042 yugabytedb/yugabyte:2.8.0.0-b37 bin/yugabyted start &lt;span class="nt"&gt;--base_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/yugabyte/yb_data &lt;span class="nt"&gt;--daemon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is a breakdown of the options:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The detach option runs the container as a background process and displays the container ID.  This option is needed to regain control of the shell since the yugabyted process is intended to be long-lived.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--name yugabyte-2.8.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This option gives the container a user-friendly name that can be used later.  Adding the version to the name makes it easier to keep track of different versions of the database.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-p7000:7000 -p9000:9000 -p5433:5433 -p9042:9042&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These options expose internal ports to the host so they can be interacted with from outside the container.  These are YugabyteDB &lt;a href="https://docs.yugabyte.com/latest/reference/configuration/default-ports/"&gt;significant ports&lt;/a&gt; and will be discussed later. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;yugabytedb/yugabyte:2.8.0.0-b37&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the container image and version (tag) to run.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bin/yugabyted start --base_dir=/home/yugabyte/yb_data --daemon=false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command starts &lt;a href="https://docs.yugabyte.com/latest/reference/configuration/yugabyted/"&gt;yugabyted&lt;/a&gt;, the parent process for YugabyteDB and passes additional options to set the base directory for the YugabyteDB data folder and directs the process to not run in the background (the default behavior which would cause the container to stop).&lt;/p&gt;

&lt;p&gt;It is important to note that YugabyteDB is a distributed SQL database and that the image used is only a single node deployment (i.e. a &lt;a href="https://docs.yugabyte.com/latest/architecture/docdb-replication/replication/#replication-factor"&gt;replication factor&lt;/a&gt; of 1).  This is not typical for a production environment which would usually be RF=3 or even RF=5.  Running a multi-node environment locally is possible but beyond the scope of this guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-yugabytedb-container"&gt;
  &lt;/a&gt;
  Testing the YugabyteDB Container
&lt;/h2&gt;

&lt;p&gt;Next, validate that the container process is running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;podman ps
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0a3mAGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bu5gqvq1l620vy7zdn7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0a3mAGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bu5gqvq1l620vy7zdn7k.png" alt="Bash shell with podman ps output" width="880" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If not, it likely errored due to a port conflict with another process.  Review any local running processes and ports, stopping anything that conflicts and try again.&lt;/p&gt;

&lt;p&gt;Next, exec a Bash session on the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;podman &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; yugabyte-2.8.0 bash 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default starting directory should be &lt;code&gt;/home/yugabyte&lt;/code&gt;.  This folder contains the YugabyteDB installation as well as the &lt;code&gt;yb_data&lt;/code&gt; directory (from the &lt;code&gt;--base_dir&lt;/code&gt; option).  This directory contains all the runtime data and logs from the YugabyteDB processes, specifically in three sub directories:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls -ls yb_data/
total 12
4 drwxr-xr-x 2 root root 4096 Nov 17 20:38 conf
4 drwxr-xr-x 4 root root 4096 Nov 17 20:39 data
4 drwxr-xr-x 2 root root 4096 Nov 17 20:30 logs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The conf directory contains the &lt;code&gt;yugabyted.conf&lt;/code&gt; file that can be used to customize the behavior of the system via various settings called &lt;a href="https://docs.yugabyte.com/latest/reference/configuration/yb-tserver/"&gt;"GFlags"&lt;/a&gt;.  This configuration file will be important later to enable YSQL logging.&lt;/p&gt;

&lt;p&gt;The data and logs directories respectively contain the database data files and process logs.  To view the current Postgres logs, use this command from the &lt;code&gt;yb_data&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;data/pg_data/current_logfiles | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-c7-&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Postgres process frequently rotates its log but the &lt;code&gt;current_logfiles&lt;/code&gt; file contains the name of the current one.  It is also possible to navigate directly to the log file under &lt;code&gt;/home/yugabyte/yb_data/data/yb-data/tserver/logs/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, it is possible to bind mount a volume into the container and map it to a local directory (e.g. &lt;code&gt;-v ~/yb_data:/home/yugabyte/yb_data&lt;/code&gt;).  This option can be added to the original command to run the container.  This option is useful if you want to use native desktop tools to edit or view the config or log files or reuse an existing database across multiple versions of the YugabyteDB container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reviewing-the-yugabytedb-admin-uis"&gt;
  &lt;/a&gt;
  Reviewing the YugabyteDB Admin UIs
&lt;/h2&gt;

&lt;p&gt;YugabyteDB is made up of several distinct processes including the &lt;a href="https://docs.yugabyte.com/latest/architecture/concepts/yb-master/"&gt;YB-Master&lt;/a&gt; and &lt;a href="https://docs.yugabyte.com/latest/architecture/concepts/yb-tserver/"&gt;YB-TServer&lt;/a&gt;.  Once started, these processes each have an administrative UI exposed at &lt;a href="http://localhost:7000"&gt;http://localhost:7000&lt;/a&gt; and &lt;a href="http://localhost:9000"&gt;http://localhost:9000&lt;/a&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--leGk7JY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt5epce9u0yp2h2fdhmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--leGk7JY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt5epce9u0yp2h2fdhmp.png" alt="YugabyteDB Admin UI" width="880" height="706"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These views provide a comprehensive overview of the database that was just deployed.  Feel free to explore both servers, but now let’s focus on interacting with the database via command line interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-yugabyte-ysql-command"&gt;
  &lt;/a&gt;
  Using the Yugabyte YSQL Command
&lt;/h2&gt;

&lt;p&gt;From the Bash prompt, type &lt;code&gt;ysqlsh&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@05a7aef6fd68 yugabyte]# ysqlsh
ysqlsh &lt;span class="o"&gt;(&lt;/span&gt;11.2-YB-2.8.0.0-b0&lt;span class="o"&gt;)&lt;/span&gt;
Type &lt;span class="s2"&gt;"help"&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;help.

&lt;span class="nv"&gt;yugabyte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c"&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;ysqlsh&lt;/code&gt; command is similar to the Postgres psql command and most commands will be exactly the same.  This CLI will mainly be used to issue DDL statements to the database or experiment with query performance using the explain command.&lt;/p&gt;

&lt;p&gt;To quit &lt;code&gt;ysqlsh&lt;/code&gt;, type backslash q (e.g. &lt;code&gt;\q&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Note, it is possible to execute the &lt;code&gt;ysqlsh&lt;/code&gt; command directly from podman and skip the Bash shell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;podman &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; yugabyte-2.8.0 ysqlsh
ysqlsh &lt;span class="o"&gt;(&lt;/span&gt;11.2-YB-2.8.0.0-b0&lt;span class="o"&gt;)&lt;/span&gt;
Type &lt;span class="s2"&gt;"help"&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;help.

&lt;span class="nv"&gt;yugabyte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c"&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-yugabyte-ycql-command"&gt;
  &lt;/a&gt;
  Using the Yugabyte YCQL Command
&lt;/h2&gt;

&lt;p&gt;From the container’s Bash prompt, type &lt;code&gt;ycqlsh&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@05a7aef6fd68 yugabyte]# ycqlsh
Connected to &lt;span class="nb"&gt;local &lt;/span&gt;cluster at 127.0.0.1:9042.
&lt;span class="o"&gt;[&lt;/span&gt;ycqlsh 5.0.1 | Cassandra 3.9-SNAPSHOT | CQL spec 3.4.2 | Native protocol v4]
Use HELP &lt;span class="k"&gt;for &lt;/span&gt;help.
ycqlsh&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://docs.yugabyte.com/latest/admin/ycqlsh/"&gt;ycqlsh&lt;/a&gt; command is equivalent to &lt;code&gt;cqlsh&lt;/code&gt; from which it is derived.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-ysql-logging"&gt;
  &lt;/a&gt;
  Enable YSQL Logging
&lt;/h2&gt;

&lt;p&gt;To enable the YSQL Postgres query logging, edit the &lt;code&gt;yugabyted.conf&lt;/code&gt; file (using vi) and add the &lt;code&gt;ysql_log_statement=all&lt;/code&gt; GFlag.  Editing config files may be unusual for immutable containers, but it is useful for debugging in development.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;/home/yugabyte/yb_data/conf&lt;/code&gt; directory and open the &lt;code&gt;yugabyted.conf&lt;/code&gt; file, it should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tserver_webserver_port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"master_rpc_port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"universe_uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"099c3df0-011b-47c5-83e3-4a1e286986bb"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"webserver_port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ysql_enable_auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ycql_port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9042&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data_dir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/home/yugabyte/yb_data/data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tserver_uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"767e00774ade4e9f90728eaf6fb3a13e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"use_cassandra_authentication"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"log_dir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/home/yugabyte/yb_data/logs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"polling_interval"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"listen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"callhome"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"master_webserver_port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;7000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"master_uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"587434752fc74cba85ea27fea81164bd"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"master_flags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"node_uuid"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1be46681-4047-4278-b6c4-040ff1f5897c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"join"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ysql_port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5433&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tserver_flags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tserver_rpc_port"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9100&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This configuration file can be edited to modify the behavior of YugabyteDB as well as the YB-Master and YB-TServer process individually.&lt;/p&gt;

&lt;p&gt;Add the log parameter to the &lt;code&gt;tsever_flags&lt;/code&gt; as shown:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"tserver_flags": "ysql_log_statement=all"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This parameter accepts &lt;code&gt;none&lt;/code&gt; (default), &lt;code&gt;ddl&lt;/code&gt;, or &lt;code&gt;all&lt;/code&gt;.  With the value set to &lt;code&gt;all&lt;/code&gt;, the Postgres logs will contain every SQL statement that is executed by the database.  This is particularly helpful when using a higher level database abstraction (e.g. ORM) that generates SQL statements or manages transactional elements in an application.&lt;/p&gt;

&lt;p&gt;Once modified, the configuration change won’t take place without exiting and restarting the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;podman restart yugabyte-2.8.0 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the restart, execute another Bash command on the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;podman &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; yugabyte-2.8.0 bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then &lt;code&gt;tail&lt;/code&gt; the logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;yb_data/data/pg_data/current_logfiles | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-c7-&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use any program that can connect to the database and execute a few SQL commands, the statements should start showing up in the logs (e.g.):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-11-01 17:58:26.591 UTC [50477] LOG:  statement: select 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#howto-connect-with-a-data-tool"&gt;
  &lt;/a&gt;
  How-to: Connect with a Data Tool
&lt;/h2&gt;

&lt;p&gt;If you have a favorite DB client like DBeaver or DataGrip, you can establish a connection to the database now using the exposed ports (just remember that 5433 is the default for the YSQL / Postgres interface).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-dbeaver"&gt;
  &lt;/a&gt;
  Using DBeaver
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dbeaver.io/"&gt;DBeaver (Community Edition)&lt;/a&gt; is a free database tool that can be used with Yugabyte YSQL (for YCQL consider using &lt;a href="https://www.tableplus.io/"&gt;TablePlus&lt;/a&gt;).  Once DBeaver is installed, select the "New Database Connection" option and in the filter field, type "yuga" and it will filter out the other database drivers.&lt;/p&gt;

&lt;p&gt;Select the "YugabyteDB" tile and click Next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iBHbNnQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iojret4sbcxgrmt5calc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iBHbNnQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iojret4sbcxgrmt5calc.png" alt="DBeaver UI" width="831" height="761"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The default settings will set localhost and port &lt;code&gt;5433&lt;/code&gt; correctly.  No other configuration changes are required.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhMwzU2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef6396etg16tyk9zzts9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhMwzU2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef6396etg16tyk9zzts9.png" alt="DBeaver UI" width="831" height="761"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click "Test Connection..." to validate the connection as configured.  A message should appear that displays relevant information about the connection.  If it connects successfully, select "Finish".&lt;/p&gt;

&lt;p&gt;In DBeaver, it is advisable to rename the connection to be relevant to the use case (e.g. "yugabyte-ysql-local").&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-intellij"&gt;
  &lt;/a&gt;
  Using IntelliJ
&lt;/h3&gt;

&lt;p&gt;Both the commercial version of &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; and the stand-alone product &lt;a href="https://www.jetbrains.com/datagrip/"&gt;DataGrip&lt;/a&gt; can be used to connect to YugabyteDB.&lt;/p&gt;

&lt;p&gt;Open the Database tab and select "New" &amp;gt; "Datasource". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03dlIc2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm7vcwemf92m72ti0ldr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03dlIc2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sm7vcwemf92m72ti0ldr.png" alt="IntelliJ UI" width="518" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pick the PostgreSQL driver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZ_yZZyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ahjjt2yryfj7q6p0y0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZ_yZZyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ahjjt2yryfj7q6p0y0q.png" alt="IntelliJ UI" width="880" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to name the datasource appropriately to the use case and change the Port to &lt;code&gt;5433&lt;/code&gt;, User and Database to &lt;code&gt;yugabyte&lt;/code&gt;.  Use the "Test Connection" to validate the configuration and then Okay. &lt;/p&gt;

&lt;p&gt;If this error appears:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ERROR: System column with id -3 is not supported yet.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit the configuration and go to the Advanced tab.  Check the "Other: Introspect with JDBC metadata" option and click Apply and then refresh.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RfBmKdqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfdaen0rzwak57e3kohf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RfBmKdqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfdaen0rzwak57e3kohf.png" alt="IntelliJ UI" width="880" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This should be enough information to get started using YugabyteDB locally in a Docker container.&lt;/p&gt;

&lt;p&gt;Using YugabyteDB locally can help streamline all phases of the application development process and help ensure dev/prod parity.  It is also a great way to experiment with new versions and features as they become available.&lt;/p&gt;

</description>
      <category>yugabytedb</category>
      <category>sql</category>
      <category>docker</category>
    </item>
    <item>
      <title>Task Management App Tutorial with Python
</title>
      <author>Arctype Team</author>
      <pubDate>Wed, 19 Jan 2022 22:59:55 +0000</pubDate>
      <link>https://dev.to/arctype/task-management-app-tutorial-with-python-4ne9</link>
      <guid>https://dev.to/arctype/task-management-app-tutorial-with-python-4ne9</guid>
      <description>&lt;p&gt;In this tutorial, we'll first build a simple to-do app in Django using Python. Then we'll explore some ways we can visualize the resulting data in our database client. Want to build an analytics dashboard or twitter scraper instead? Check out these previous tutorials:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://arctype.com/blog/analytics-dashboard-django/"&gt;Build an Analytics Dashboard with Django and Arctype&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://arctype.com/blog/twitter-api-python/"&gt;Build Twitter Heat Maps with Tweepy, Django and Arctype&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To fully understand this tutorial, you will need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.python.org/downloads/"&gt;Python 3.8&lt;/a&gt; or newer&lt;/li&gt;
&lt;li&gt;A basic understanding of &lt;a href="https://docs.djangoproject.com/en/4.0/intro/overview/"&gt;Django 3.0 or newer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An IDE (&lt;a href="https://www.jetbrains.com/pycharm/features/"&gt;PyCharm&lt;/a&gt;, &lt;a href="https://code.visualstudio.com/docs"&gt;VS Code&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;A SQL client like &lt;a href="https://arctype.com"&gt;Arctype&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Basic working knowledge of &lt;a href="https://sqlbolt.com/"&gt;SQL&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-setup"&gt;
  &lt;/a&gt;
  Python setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#installing-python"&gt;
  &lt;/a&gt;
  Installing Python
&lt;/h3&gt;

&lt;p&gt;First, let's install Python using &lt;a href="https://www.python.org/downloads/"&gt;this link&lt;/a&gt;. Then, we can select our OS and download it. This tutorial was built on Windows. We can run the command &lt;code&gt;Python --version&lt;/code&gt; to check if Python is successfully installed on our system. If Python is installed, we get a response as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B_1zrLnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ZDMUI2glWJtZPNDk_xdnxjONe6-lW6TC3SEZeG193Bub-DHam2nhkoW2GA-K5rnkfe2MbQWTgARo53daANiLZeJ1cmSZTlvaSlRtFfaKWZQQIqpBtvoWmkHW-4JBEhs0wnEvin_g" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B_1zrLnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ZDMUI2glWJtZPNDk_xdnxjONe6-lW6TC3SEZeG193Bub-DHam2nhkoW2GA-K5rnkfe2MbQWTgARo53daANiLZeJ1cmSZTlvaSlRtFfaKWZQQIqpBtvoWmkHW-4JBEhs0wnEvin_g" alt="Screenshot of a successful Python install." width="880" height="214"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-virtual-environment"&gt;
  &lt;/a&gt;
  Creating a virtual environment
&lt;/h3&gt;

&lt;p&gt;Let's create an isolated &lt;a href="https://docs.python.org/3/library/venv.html"&gt;virtual environment&lt;/a&gt; for this project. Virtual environments help us avoid installing dependencies globally on our system. This helps to make sure that the dependencies of other projects won't be included within the dependencies of our current project, even though they're all on the same local machine. To do that run the following command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qWD0TcYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/SB-UqqY5hTLmo54_liPAmH8C_PIVc6K5PTJipEomow7A4sk214o63WRRftixrm5lXOBe2_kzSEDi5DRcPGAcOVw4n-J71V8KKk_sLJvw-upV-VcXnZbpqErhUNLW5zF_CUI4v40m" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qWD0TcYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/SB-UqqY5hTLmo54_liPAmH8C_PIVc6K5PTJipEomow7A4sk214o63WRRftixrm5lXOBe2_kzSEDi5DRcPGAcOVw4n-J71V8KKk_sLJvw-upV-VcXnZbpqErhUNLW5zF_CUI4v40m" alt="Screenshot of a virtual environment." width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, activate the virtual environment by navigating to the base directory of our new virtual environment (in our example, it has the name "env"). Then, navigate into the Scripts folder and run the executable file "activate."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKFMS35L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/Ov550gmHo0jVqK92R5JAy08uYTtfGAdnQWe_XXnrcgdkbQKQ48GscrI2gj9gGbMeVfNYuZhQOyMkM-iCTSEZ_52lCxDYvgpPKj0DJh30HBurI24MLQpTndUUgderFhpfoljSZrnO" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKFMS35L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/Ov550gmHo0jVqK92R5JAy08uYTtfGAdnQWe_XXnrcgdkbQKQ48GscrI2gj9gGbMeVfNYuZhQOyMkM-iCTSEZ_52lCxDYvgpPKj0DJh30HBurI24MLQpTndUUgderFhpfoljSZrnO" alt="Screenshot of a command line." width="880" height="108"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#django-setup"&gt;
  &lt;/a&gt;
  Django Setup
&lt;/h2&gt;

&lt;p&gt;You can &lt;a href="https://www.djangoproject.com/download/"&gt;install Django Web Framework&lt;/a&gt; with pip and then follow these steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-project"&gt;
  &lt;/a&gt;
  Create a project
&lt;/h3&gt;

&lt;p&gt;Now, let's create the project. We can do this by running the command &lt;code&gt;django-admin startproject&lt;/code&gt; followed by the name of the project (in this case, &lt;code&gt;taskmanagement&lt;/code&gt;). The full command should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;django-admin startproject taskmanagement
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we can name the project however we like, but be sure to be descriptive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-an-app"&gt;
  &lt;/a&gt;
  Create an app
&lt;/h3&gt;

&lt;p&gt;Let's navigate to the &lt;code&gt;taskmanagement&lt;/code&gt; folder and create an application. To do that we use the command &lt;code&gt;python manage.py startapp&lt;/code&gt; then the name of the app, which in our case we've named &lt;code&gt;task_management_app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrMOarUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/-DzFjj8Sg61ge1CKwhKkZulLzfdodEmjgs93dyXfsK6RuX_c6lGonulm0D7S2PLLzu0F_pTz7uaIIk_j-kUX7Io1C-sLmKQ_WQR3pdPFn_ygn6rt5aFW5vT84eZlnSw9Xp2z4Xrd" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrMOarUY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/-DzFjj8Sg61ge1CKwhKkZulLzfdodEmjgs93dyXfsK6RuX_c6lGonulm0D7S2PLLzu0F_pTz7uaIIk_j-kUX7Io1C-sLmKQ_WQR3pdPFn_ygn6rt5aFW5vT84eZlnSw9Xp2z4Xrd" alt="Screenshot of Python code." width="880" height="101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app is created successfully. We can now open the project in our favorite IDE.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migrations"&gt;
  &lt;/a&gt;
  Migrations
&lt;/h3&gt;

&lt;p&gt;In Django, we use migrations to move changes we make to our models (adding a field, deleting a model, etc.) into our database schema. First, we need to make migrations to our database. Run the command &lt;code&gt;python manage.py makemigrations&lt;/code&gt;. &lt;code&gt;makemigrations&lt;/code&gt; are used to create new migrations based on the changes made to the models in a project. The output is as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T35QNpua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/3sd-lPpah-N9_9WV5tMom_RaJo--oLGv4DSiEHjEg_wD-rJipfVJtdP-jLrLrAIjet9g-JpFlzPOL-Rd5Ovq0Hyo4FE6cGp5MTp6eDkg6taffStg-yuZ5WtUYOAfgKmJ6QyBpuXF" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T35QNpua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/3sd-lPpah-N9_9WV5tMom_RaJo--oLGv4DSiEHjEg_wD-rJipfVJtdP-jLrLrAIjet9g-JpFlzPOL-Rd5Ovq0Hyo4FE6cGp5MTp6eDkg6taffStg-yuZ5WtUYOAfgKmJ6QyBpuXF" alt="Screenshot of Python code" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's run our app to see if we have successfully installed and our project properly set up. To do this, we are to change the directory into our project and run the command &lt;code&gt;python manage.py runserver&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FG29t6rL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/lvgNzmE501CAK5s92zm5MhvX4cTlwXXF8cDpWoxE3gDPLKPLwOa3XgxOwK0h7kU7vAXbZgzEHvZgnWRu_J-mlEjbrjtjPyz96vEzQXr1YnTELRoCQ6vRpKG0sW-RpvbWVDtI5azQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FG29t6rL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/lvgNzmE501CAK5s92zm5MhvX4cTlwXXF8cDpWoxE3gDPLKPLwOa3XgxOwK0h7kU7vAXbZgzEHvZgnWRu_J-mlEjbrjtjPyz96vEzQXr1YnTELRoCQ6vRpKG0sW-RpvbWVDtI5azQ" alt="Screenshot of server spinup." width="880" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have started our development server at &lt;a href="https://dev.toabout:blank"&gt;http://127.0.01:8000/&lt;/a&gt;! So we can now open our browser to access our app using this URL. If everything works fine, the screen with the same image below is displayed as the default Django page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gx3xsdia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/sWPPYvhFN7AP7lPjI_NdgslgQeJLDuDHMUxOAAiGuEk36b2V2C9raqEs4H--6lp9aEKXeCcgYEfSp--blS4_OUkqxnyjEdmOND8Ht_-QiAvu-kXIcJAnWJ9kkv9T3sALfYah5oV9" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gx3xsdia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/sWPPYvhFN7AP7lPjI_NdgslgQeJLDuDHMUxOAAiGuEk36b2V2C9raqEs4H--6lp9aEKXeCcgYEfSp--blS4_OUkqxnyjEdmOND8Ht_-QiAvu-kXIcJAnWJ9kkv9T3sALfYah5oV9" alt="Default project landing page." width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we want to make some configurations inside the &lt;code&gt;settings.py&lt;/code&gt; file. The primary thing we will do is add the app's name in the installed apps, as seen directly below, and then add the MySQL database to Django.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3TFi_Z1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/wnwcqyvAiP7JjUJda_dcbimRrbw6pAVp9nFyo1rM3zj26E8m58JEMEy9P_wRoZJfLh_m91XxvlTArotlnyz6w3xbA3Z95GGd3Y93wlz9XSf2MuYWta64Y4bcNiuMMtHQadl97Oi2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3TFi_Z1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/wnwcqyvAiP7JjUJda_dcbimRrbw6pAVp9nFyo1rM3zj26E8m58JEMEy9P_wRoZJfLh_m91XxvlTArotlnyz6w3xbA3Z95GGd3Y93wlz9XSf2MuYWta64Y4bcNiuMMtHQadl97Oi2" alt="Adding app to the list of installed apps." width="880" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editing-settingspy-to-add-mysql-to-django"&gt;
  &lt;/a&gt;
  Editing Settings.py to add MySQL to Django
&lt;/h3&gt;

&lt;p&gt;In your &lt;code&gt;settings.py&lt;/code&gt; file, edit the code below and replace it with the details required to connect to your SQL server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'database_name',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'USER': 'username',
        'PASSWORD': 'password',
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#todo-list-app-data-model"&gt;
  &lt;/a&gt;
  Todo list app data model
&lt;/h2&gt;

&lt;p&gt;Next, we want to create a model. This model will determine how the task will be stored on the database. The task will have seven properties, a &lt;code&gt;title&lt;/code&gt;, a &lt;code&gt;description&lt;/code&gt; of the task, a &lt;code&gt;startTime&lt;/code&gt;, an &lt;code&gt;endTime&lt;/code&gt;, a &lt;code&gt;completed&lt;/code&gt; status, and a &lt;code&gt;created on&lt;/code&gt; and an &lt;code&gt;updated on&lt;/code&gt; column to mark when our task was first created and updated. &lt;/p&gt;

&lt;p&gt;Note: our &lt;code&gt;startTime&lt;/code&gt; and &lt;code&gt;endTime&lt;/code&gt; use the &lt;code&gt;DateTime&lt;/code&gt; class. This will hold the date and time in which the task was started and completed respectively. We have set &lt;code&gt;created_on&lt;/code&gt; field's &lt;code&gt;auto_now_add&lt;/code&gt;property to true. This automatically fills this field with the current date and time in which the task was created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8qO4XRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/cTD33gZxcANzp4YWBq-goJ8AQ_75pqnbHobbkedwJjtySSYub8ElFp5vaE4A_VojIfrlYZCFRkVOYvPBmMwD6IXWBQVV8YJ6LcnLXCKRka0hCtiF5ah2ZqiaiCNfb3J1qV8fUS7S" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8qO4XRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/cTD33gZxcANzp4YWBq-goJ8AQ_75pqnbHobbkedwJjtySSYub8ElFp5vaE4A_VojIfrlYZCFRkVOYvPBmMwD6IXWBQVV8YJ6LcnLXCKRka0hCtiF5ah2ZqiaiCNfb3J1qV8fUS7S" alt="Screenshot of defining the fields." width="880" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's go ahead and make migrations. Any time changes are made to our models, we need to make migrations. Once that is completed, we will find a new file inside the migrations folder as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxCgCXeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/XDCEXJdkzFTkhQsm0xXzR0c3yxrWBygwnNMmkDbtXdsWBG31Nzoe5SA9WRhgWnUluMjs7aSp2W7RP98GhA-nsX5ECswH2LWUxLG49_Ut4aV3sjEN_tpiOXh_UeSEDl8vXdkpdmay" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxCgCXeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/XDCEXJdkzFTkhQsm0xXzR0c3yxrWBygwnNMmkDbtXdsWBG31Nzoe5SA9WRhgWnUluMjs7aSp2W7RP98GhA-nsX5ECswH2LWUxLG49_Ut4aV3sjEN_tpiOXh_UeSEDl8vXdkpdmay" alt="Screenshot of Python code." width="880" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We didn't write this code manually. This is the SQL code that Django has handled for us. Next, we migrate with python manage.py migrate. Migrate is responsible for applying and reapplying migrations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xGQQE9fw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/n_CzJzlizg3YinGEqV9SYgpV2lmW36YgpUdo9SjQYcTSPhZ3UpqhYTDJ55qNpte2DkQ7jTqGVnAzrIbV4P7CMd7uFFWz0Y0XVhv0z7bN6oYrABxH2JqsAk7G7yh7OW1Fz3tivzF3" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xGQQE9fw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/n_CzJzlizg3YinGEqV9SYgpV2lmW36YgpUdo9SjQYcTSPhZ3UpqhYTDJ55qNpte2DkQ7jTqGVnAzrIbV4P7CMd7uFFWz0Y0XVhv0z7bN6oYrABxH2JqsAk7G7yh7OW1Fz3tivzF3" alt="Running the migrations." width="880" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we test that the CRUD operation was successful by registering the task on the admin panel as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from .models import Task

class TaskAdmin(admin.ModelAdmin):
      list_display = ("title", "description", "startTime",  "endTime", "completed", "created_on", "updated_on")

admin.site.register(Task, TaskAdmin)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tmJXbxvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/rYVbsJBUkbLGV0-QXtvriaYBd8-a2l99XXEl-JIgfKlODzdjBe6C3sdXJSBCV64dq2iOnBVhDEA6xvGe4EHcXvKhR40LBbAimY_IdDWYkB49R0lYkoDEucbk_cZ8spZV50cww9qc" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tmJXbxvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/rYVbsJBUkbLGV0-QXtvriaYBd8-a2l99XXEl-JIgfKlODzdjBe6C3sdXJSBCV64dq2iOnBVhDEA6xvGe4EHcXvKhR40LBbAimY_IdDWYkB49R0lYkoDEucbk_cZ8spZV50cww9qc" alt="Screenshot of IDE" width="880" height="232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-management-api"&gt;
  &lt;/a&gt;
  Task management API
&lt;/h2&gt;

&lt;p&gt;To build the API we will install and use the &lt;a href="https://www.django-rest-framework.org/#installation"&gt;Django REST Framework&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-superuser-and-adding-the-restframework"&gt;
  &lt;/a&gt;
  Creating a superuser and adding the rest_framework
&lt;/h3&gt;

&lt;p&gt;Let's create a superuser with the following command: &lt;code&gt;python manage.py createsuperuser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KViPLnhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/EjwQHeein3lJM6DHRwlsVG1GY7S8bz-HHjiRtI4Z1lrUJ1QBN7VI-ZVam8nxNvr4dn_UFQEft6afACgM7b4jt7dGNS8V7w5-BNCrxo9yBgx8xKruTGMIvkMqF-s0rTX7ElSN18wE" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KViPLnhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/EjwQHeein3lJM6DHRwlsVG1GY7S8bz-HHjiRtI4Z1lrUJ1QBN7VI-ZVam8nxNvr4dn_UFQEft6afACgM7b4jt7dGNS8V7w5-BNCrxo9yBgx8xKruTGMIvkMqF-s0rTX7ElSN18wE" alt="Screenshot of creating a superuser" width="880" height="117"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we'll need to add the Django &lt;code&gt;rest_framework&lt;/code&gt; to the list of installed apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iI6fCkvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/q2tH2gy7BRS_pZ7QXBYrowwAD7vOK5tHa__olFnoY2PXI8-lf42GPvitqawnrMCv_7doKLLVz7limcuxLhwIQtWvY6I9cnyzSts4oBmPw_ExLrdf_dfRqYB6_8OsbOXOF41j1SL7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iI6fCkvn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/q2tH2gy7BRS_pZ7QXBYrowwAD7vOK5tHa__olFnoY2PXI8-lf42GPvitqawnrMCv_7doKLLVz7limcuxLhwIQtWvY6I9cnyzSts4oBmPw_ExLrdf_dfRqYB6_8OsbOXOF41j1SL7" alt="Screenshot of IDE" width="880" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-serializers"&gt;
  &lt;/a&gt;
  Creating the serializers
&lt;/h3&gt;

&lt;p&gt;JSON stands for JavaScript Object Notation. Serializers convert the model class to JSON so that the frontend can work with the received data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db.models.fields import Field
from rest_framework import serializers
from .models import Task


class TaskSerializers(serializers.ModelSerializer):
    class Meta:
        model = Task
        fields = ("id", "title", "description", "startTime", "endTime", "completed", "created_on", "updated_on")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VITHoYNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/0bxoIsvHhdH0XN7iEG6V5v9M6LBBcsF88cofds90ri1f145fzLCE_A1ufozP3lSKrmKYhjtX94aJfbqcxJ8V-8Bd_jlm82cp-9xrzgaNjzZhA2bzAPLt6v75h2n9ZYsO2A32JED3" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VITHoYNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/0bxoIsvHhdH0XN7iEG6V5v9M6LBBcsF88cofds90ri1f145fzLCE_A1ufozP3lSKrmKYhjtX94aJfbqcxJ8V-8Bd_jlm82cp-9xrzgaNjzZhA2bzAPLt6v75h2n9ZYsO2A32JED3" alt="" width="880" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-view"&gt;
  &lt;/a&gt;
  Creating the view
&lt;/h3&gt;

&lt;p&gt;The view is simply a Python function that takes an HTTP request and returns a response. This response may be the HTML contents, for example. The view itself houses the business logic that is necessary to return a response to a client that makes an HTTP call to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db.models.query import QuerySet
from django.shortcuts import render
from rest_framework import viewsets
from .serializers import TaskSerializers
from .models import Task

# Create your views here.

class TaskView(viewsets.ModelViewSet):
    serializer_class = TaskSerializers
    queryset = Task.objects.all()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wPfXxti3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/pbn0rSUQAUmSNd7whsGCEeMIaVzVV1PG4kt767aKv804VrCxDQaWwpXxpdqp5SHqk0pbwv2WrSRgh72Bsz0eXN6LJz5fyu14gmJ5Ybi3aJSbqmDGaedPT46JVpHwjd_sc9jv75lj" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wPfXxti3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/pbn0rSUQAUmSNd7whsGCEeMIaVzVV1PG4kt767aKv804VrCxDQaWwpXxpdqp5SHqk0pbwv2WrSRgh72Bsz0eXN6LJz5fyu14gmJ5Ybi3aJSbqmDGaedPT46JVpHwjd_sc9jv75lj" alt="Screenshot of IDE" width="880" height="154"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-url"&gt;
  &lt;/a&gt;
  The URL
&lt;/h3&gt;

&lt;p&gt;The URL is used to map path expressions to Python functions (your views). It first receives HTTP requests and routes them to the right matching function in views.py to handle the request. Now let's go to the URL that is in the project folder and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path
from django.urls.conf import include
from task_management_app import views
from rest_framework import routers

router = routers.DefaultRouter()
router.register(r'tasks', views.TaskView, 'task')

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(router.urls)),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFhtYd4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/KrpY7rzFxhQ1oStNLf2fUd6ltpg0jJ9z6Nhd2tQhGmuP7tlPfiqvA1HfcqGGKggSR4UxOJVRTwfwHUq20J-oxL0ei3KXgEHGwJU1QX8kjc-_M78L0q6Ep2CgBMTVzRTY1XssRplY" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFhtYd4W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/KrpY7rzFxhQ1oStNLf2fUd6ltpg0jJ9z6Nhd2tQhGmuP7tlPfiqvA1HfcqGGKggSR4UxOJVRTwfwHUq20J-oxL0ei3KXgEHGwJU1QX8kjc-_M78L0q6Ep2CgBMTVzRTY1XssRplY" alt="Screenshot of IDE." width="880" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-our-endpoints"&gt;
  &lt;/a&gt;
  Accessing our endpoints
&lt;/h3&gt;

&lt;p&gt;To access our endpoint run your app and visit &lt;a href="http://127.0.0.1:8000/api/tasks/"&gt;http://127.0.0.1:8000/api/tasks/&lt;/a&gt; and add a task.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9BpupSlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/huFHKyfAVQXUlrbNz2sb1XsKhHuxHtMlgsRTBGReu0t7AqdCSXSkDmdZavKTA7Mhui_dXGN113ot3KdRzoZDo6XuxfzLFdNNwb9zid1wuEYadx0lyJwqcjZcRpdPh9ftDX51YNOi" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9BpupSlK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/huFHKyfAVQXUlrbNz2sb1XsKhHuxHtMlgsRTBGReu0t7AqdCSXSkDmdZavKTA7Mhui_dXGN113ot3KdRzoZDo6XuxfzLFdNNwb9zid1wuEYadx0lyJwqcjZcRpdPh9ftDX51YNOi" alt="Screenshot of application." width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Boom! We have it on our task manager. We can get a particular task by appending the &lt;code&gt;Id&lt;/code&gt; of the task to the URL. We can also update or delete a particular task.&lt;/p&gt;

&lt;p&gt;This section has taught us how to build a task management app that performs CRUD operations. Now, we will use a SQL client to visualize the data on our database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visualize-and-query-task-data"&gt;
  &lt;/a&gt;
  Visualize and query task data
&lt;/h2&gt;

&lt;p&gt;Next, we select the SQL type we are most familiar with. In the course of this article, we would be &lt;a href="https://arctype.com/mysql/drivers/python-mysql"&gt;connecting to a MySQL&lt;/a&gt; relational database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGV9oN6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/p1Hjw2BHPYncDTNiCbymMNjNoTiEDds7ELlmTPe1YqlysRpO0DiJ_kSiINinBs2NgyNr6pwxhH2Qek6e-Jd5855FB1G3aN0iNp8dYKjZGT66RfdOFnWz4nt1gM16NzX2ayYd62ue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGV9oN6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/p1Hjw2BHPYncDTNiCbymMNjNoTiEDds7ELlmTPe1YqlysRpO0DiJ_kSiINinBs2NgyNr6pwxhH2Qek6e-Jd5855FB1G3aN0iNp8dYKjZGT66RfdOFnWz4nt1gM16NzX2ayYd62ue" alt="Connecting to the DB." width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visualizing-tables"&gt;
  &lt;/a&gt;
  Visualizing tables
&lt;/h3&gt;

&lt;p&gt;I made a sample data .csv for this tutorial. First, I created a Google sheet, exported it to a .csv, and then imported it. This data table contains columns: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;completed&lt;/code&gt;, &lt;code&gt;created on&lt;/code&gt;, &lt;code&gt;startTime&lt;/code&gt;, &lt;code&gt;endTime&lt;/code&gt;, and &lt;code&gt;updated on&lt;/code&gt;. This is our exported data set in Table view:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3SY2UF6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Afpm22PfKoGPePCvXj1pWJqVnUC_08XjX5Q1M-dT7D-Ml-iW6xKV16Dv-qiDv8V_feWCFnuE3cTDDCg9vVHJT2wAbVI4tWEWRfJluv9mTN9fMnIKdhAvlLEU5w_8-DxKzBTvbJrD" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3SY2UF6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Afpm22PfKoGPePCvXj1pWJqVnUC_08XjX5Q1M-dT7D-Ml-iW6xKV16Dv-qiDv8V_feWCFnuE3cTDDCg9vVHJT2wAbVI4tWEWRfJluv9mTN9fMnIKdhAvlLEU5w_8-DxKzBTvbJrD" alt="Screenshot of Arctype." width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-dashboard-to-group-together-activities"&gt;
  &lt;/a&gt;
  Creating a dashboard to group together activities
&lt;/h3&gt;

&lt;p&gt;Now, we are going to display our list of activities. First, we'll write an SQL query that will display our data set. Click on the &lt;code&gt;Queries&lt;/code&gt; tab by the sidebar and select &lt;code&gt;Create query&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iyiPRt9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/OEqF0wgjvC_q_ZTSEPfa7edY8roaoS12ir0a3P6Lrzk8PxcTBLur8mdqYfuwQTDZLHGhsOU2YEWOkpassS3YyhNr0SWIDz1jp59vtFeFXF5tyxQ8XqM6FojHIaKxQXTVgzQvHm4b" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyiPRt9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/OEqF0wgjvC_q_ZTSEPfa7edY8roaoS12ir0a3P6Lrzk8PxcTBLur8mdqYfuwQTDZLHGhsOU2YEWOkpassS3YyhNr0SWIDz1jp59vtFeFXF5tyxQ8XqM6FojHIaKxQXTVgzQvHm4b" alt="Screenshot of Arctype" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can start by renaming our query and save it in the editor's heading:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT COUNT(*) AS tables_priv FROM `excel_for_arctype_data_sheet_1_1`;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result we get should look like the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_aT0q9OF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/k6Wi3mjB80wi_WR5zTkmryHlKLrWx2TcWtCMrlJNxc54NOODAHg6IoG9vz41zwxJvkQjb7fTmdlGXB3DgcUl2jAg_Iiq63u9YyO0gxqagxseVtbja26Ej-k24zlhColaQh7BQzsF" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_aT0q9OF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/k6Wi3mjB80wi_WR5zTkmryHlKLrWx2TcWtCMrlJNxc54NOODAHg6IoG9vz41zwxJvkQjb7fTmdlGXB3DgcUl2jAg_Iiq63u9YyO0gxqagxseVtbja26Ej-k24zlhColaQh7BQzsF" alt="Screenshot of Arctype" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we can now click on the &lt;code&gt;Dashboard&lt;/code&gt; tab to create a new dashboard. Then, we rename our dashboard with our preferred name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3n1DOVfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/IF2p0JCMTuQbdu3Fk3D7hdbZoOS51zoGZShaZZ_NGDP8rdduFlofT90RcGnJDa-6VYV0dmuW-r0W8QmVizBcdMuAdCbzVqoblBTcnk0RqbdknacBiMP0_hjATywS5X4AzZK-Z2C4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3n1DOVfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/IF2p0JCMTuQbdu3Fk3D7hdbZoOS51zoGZShaZZ_NGDP8rdduFlofT90RcGnJDa-6VYV0dmuW-r0W8QmVizBcdMuAdCbzVqoblBTcnk0RqbdknacBiMP0_hjATywS5X4AzZK-Z2C4" alt="" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, click on "Add tab" and select &lt;code&gt;Chart&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RmDQ01OO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/jd-lVq6ZJuEs1x3dqmzWW1vLLA5qivZrvqfcRvkAl3vfHyuOraSkEzunC1Ujor8IzXMcscY9nwW3ooNLyYcUoO7e-zDNZvT_moJlWA41i7T_FDMm6sZaHPRQNFxaCd2CH_PAHGIB" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RmDQ01OO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/jd-lVq6ZJuEs1x3dqmzWW1vLLA5qivZrvqfcRvkAl3vfHyuOraSkEzunC1Ujor8IzXMcscY9nwW3ooNLyYcUoO7e-zDNZvT_moJlWA41i7T_FDMm6sZaHPRQNFxaCd2CH_PAHGIB" alt="Adding a chart." width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, click on the select chart data and select &lt;code&gt;activities_count&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ocj1raIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/QXap7ETi8agnolusHEtj75ladtVVEgQP0_L663qrNTvwbq-9Tqnm0GJhyryMbW5AP49BxM9dvE-7Mkos9B9WOjAkYn1JRNw22FukEsIQsucqRAxfI9TyqmYhrVtVsji4fS7HkhAe" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ocj1raIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/QXap7ETi8agnolusHEtj75ladtVVEgQP0_L663qrNTvwbq-9Tqnm0GJhyryMbW5AP49BxM9dvE-7Mkos9B9WOjAkYn1JRNw22FukEsIQsucqRAxfI9TyqmYhrVtVsji4fS7HkhAe" alt="Screenshot of Arctype." width="880" height="777"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change the title of the dashboard component and select &lt;code&gt;Score Card&lt;/code&gt; as the chart type. Then, we can now drag the &lt;code&gt;table_priv&lt;/code&gt; column to be displayed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSUpLb1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/kLHJHG_1NHbml55MMBhQmDqk-KAxWc52ZEJeHnbnLB-odeMV5Mmb2CE8-wGnFmI-ZY4GjN8i5VEppZw-CBJ5h2_EpPxcQ5VMWyWayeAiVdMA2mXBqNzC262A8THUxl9jranTvIMU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSUpLb1J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/kLHJHG_1NHbml55MMBhQmDqk-KAxWc52ZEJeHnbnLB-odeMV5Mmb2CE8-wGnFmI-ZY4GjN8i5VEppZw-CBJ5h2_EpPxcQ5VMWyWayeAiVdMA2mXBqNzC262A8THUxl9jranTvIMU" alt="Screenshot of Arctype." width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we create a table component to display the activities that were most productive.&lt;/p&gt;

&lt;p&gt;Create a new query called &lt;code&gt;activities_complete&lt;/code&gt;. We can then carry out the following commands in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT 
    SUM(completed) AS list_of_completed_activities 
FROM 
    `excel_for_arctype_data_sheet_1_1` 
WHERE 
    title = {{Atitle}};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZimqMrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/vQlzhktM_a1i43nPzyWxPWLL3grlQPQ7CC2jmILe0NDyETEtPet7zmDNJ0BuhNqN8R5qcAomNqDrbnmpOvVl_MrQ4k1Zavfme36bdP4AFbmgtymhYt5DJ7bnizYE_LJYFNG6KTkP" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZimqMrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/vQlzhktM_a1i43nPzyWxPWLL3grlQPQ7CC2jmILe0NDyETEtPet7zmDNJ0BuhNqN8R5qcAomNqDrbnmpOvVl_MrQ4k1Zavfme36bdP4AFbmgtymhYt5DJ7bnizYE_LJYFNG6KTkP" alt="Screenshot of a query in Arctype." width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, click on the &lt;code&gt;add&lt;/code&gt; button from the activity dashboard section we already created and select &lt;code&gt;table&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wx4B2QhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/frdHVIwAuJ5MrU87LO0AQyJEAR2HJce8nAcRDfH0O-_1APOqLYP2FOJH8uBiqUyBd84BsljSfzCqqEv8_2vz55LQkJYAtrg2ixsQ8EiAKXstkC2khThdz7HQhAmsx8FFCD0-mVup" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wx4B2QhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/frdHVIwAuJ5MrU87LO0AQyJEAR2HJce8nAcRDfH0O-_1APOqLYP2FOJH8uBiqUyBd84BsljSfzCqqEv8_2vz55LQkJYAtrg2ixsQ8EiAKXstkC2khThdz7HQhAmsx8FFCD0-mVup" alt="Screenshot of Arctype" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, we click on the select chart data button and select the &lt;code&gt;Title&lt;/code&gt; query we created earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WHa483NG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-10.44.09-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WHa483NG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-10.44.09-AM.png" alt="Screenshot of Arctype" width="880" height="692"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-pie-chart"&gt;
  &lt;/a&gt;
  Creating a pie chart
&lt;/h3&gt;

&lt;p&gt;Here, we are going to create chart components with Arctype to display our datasets in pie charts. &lt;/p&gt;

&lt;p&gt;We start the process by using our previous query command. Then, simply select the chart type and change it to &lt;code&gt;Pie Chart&lt;/code&gt; and drag the &lt;code&gt;tables_priv&lt;/code&gt; to the column category.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mixing-different-types-of-charts-in-one-dashboard"&gt;
  &lt;/a&gt;
  Mixing different types of charts in one dashboard
&lt;/h3&gt;

&lt;p&gt;Here, we are going to create chart components with Arctype to display our datasets in bar charts. We repeat the same process as we did with pie charts.&lt;/p&gt;

&lt;p&gt;We change the chart type to &lt;code&gt;Bar Chart&lt;/code&gt; and drag &lt;code&gt;tables_priv&lt;/code&gt; to the column category. Then, we configure the chart to match whatever settings we want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WHa483NG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-10.44.09-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WHa483NG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1000/2022/01/Screen-Shot-2022-01-19-at-10.44.09-AM.png" alt="" width="880" height="692"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article was divided into two sections. First, we learned how to use a Python framework (Django) to create a task management system. Secondly, we explored the data model of our task management app using a SQL client. While we did that, &lt;a href="https://arctype.com"&gt;Arctype&lt;/a&gt; to visualize our tables and columns using queries and dashboards. We also learned how to showcase our dataset into pie charts, bar charts, area charts, and line charts.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>technology</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Python challenge_14</title>
      <author>Mahmoud EL-kariouny</author>
      <pubDate>Wed, 19 Jan 2022 22:47:55 +0000</pubDate>
      <link>https://dev.to/mahmoudessam/python-challenge14-35g8</link>
      <guid>https://dev.to/mahmoudessam/python-challenge14-35g8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#up-and-down"&gt;
  &lt;/a&gt;
  Up and down
&lt;/h2&gt;

&lt;p&gt;simple challenge&lt;/p&gt;

&lt;p&gt;Define a function named up_down that takes a single number &lt;br&gt;
 As its parameter. &lt;/p&gt;

&lt;p&gt;Your function return a tuple containing two numbers&lt;br&gt;
The first should be one lower than the parameter, &lt;br&gt;
And the second should be one higher.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;calling up_down(5) should return (4, 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def up_down(number):
    down = number - 1
    up = down + 2
    return (down, up)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#another-solution"&gt;
  &lt;/a&gt;
  Another Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def up_down(x):
    return (x-1, x+1)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the best to you.&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Solving A Real World Business Problem using Web Dev</title>
      <author>Chris Benjamin</author>
      <pubDate>Wed, 19 Jan 2022 22:12:52 +0000</pubDate>
      <link>https://dev.to/chrisbenjamin/solving-a-real-world-business-problem-using-web-dev-fkj</link>
      <guid>https://dev.to/chrisbenjamin/solving-a-real-world-business-problem-using-web-dev-fkj</guid>
      <description>&lt;p&gt;I decided to write about a real world problem solving experience using web development and programming skills in my day job. This project is one of my favorite because I was able to identify a business problem, propose an idea, and implement a solution all on my own over the course of a few short months. Working as the solo developer allows me great flexibility, but also requires a lot of time invested in a project such as this one. Continue reading to learn about my process and approach. &lt;/p&gt;

&lt;p&gt;This is not a complete representation of the code that it took to solve the problem, any code shown has been modified to redact or remove any potential sensitive information. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;In my day job, I work with attorneys at a small legal firm as the sole IT Manager / Developer / System Administrator. The software we use allows me to create custom web apps that interface with our software and database to solve problems. When other attorneys file documentation with our office, our staff reads that documentation and creates a summary narrative of all the content on that documentation and enters that as text content into our software. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-identified"&gt;
  &lt;/a&gt;
  Problems Identified
&lt;/h2&gt;

&lt;p&gt;There are several problems with this approach that are causing problems throughout the organization. These documents being filed are crucial to the administration of the case and the summary document is referenced many times over the lifespan of the case which is 3-5 years for most cases. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our staff spends several hours a week reading the documentation and creating summary narratives. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With multiple staff members reading these documents, they had had their own flavor of creating the narrative. Each staff member had a unique way of writing, formatting, and styling their summary which created a variety of different styles that our two attorneys had to decipher each week. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tracking Changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The other attorneys may submit the same form, with subtle or major changes to the document between the last version and this version. Some cases have 6 or more versions of the same document filed over the lifetime of the case. Our staff must compare, line by line, the previous and current document and manually highlight the changes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Human Error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since the staff are reading, interpreting and writing their own version of the form, this introduced a lot of human error, resulting in the attorneys just reading the document themselves instead of the narrative. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-idea"&gt;
  &lt;/a&gt;
  Project Idea
&lt;/h2&gt;

&lt;p&gt;While observing this business process, I came up with the idea of a web form that the staff could fill in the important details that change on these forms, and have the narrative completed automatically. Our primary case management software is a local web based application allowing full HTML, CSS, and JavaScript pages to run that can also connect into the SQL database where the data was stored which made a web based approach perfect. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-proposal"&gt;
  &lt;/a&gt;
  Project Proposal
&lt;/h2&gt;

&lt;p&gt;I met with the owner and proposed my web form idea on the basis: &lt;/p&gt;

&lt;p&gt;I can create a streamlined approach that all staff will use for each form submitted, that will provide us the following benefits. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faster Summary Narratives &lt;/li&gt;
&lt;li&gt;Consistent Entries &lt;/li&gt;
&lt;li&gt;Streamlined Formatting&lt;/li&gt;
&lt;li&gt;More Accurate &lt;/li&gt;
&lt;li&gt;Automatic change tracking &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The business owner agreed to commission this project immediately. This project will take approximately 3 months and will be my main focus outside of daily job duties and IT priority issues that come up along the way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-stakeholder-buyin"&gt;
  &lt;/a&gt;
  Project Stakeholder Buy-In
&lt;/h2&gt;

&lt;p&gt;The most important part of any major business project that will affect all staff is to get buy-in from the stakeholders. This ensures the greatest project success and is achieved by making the stakeholders feel that this project is going to benefit them and allow them to shape the final result of this project. &lt;/p&gt;

&lt;p&gt;To accomplish buy-in, I held meetings with each staff member to understand how they  created the narratives, what information on the form is important, the types of data that will be submitted, and expectations for the generated narrative. &lt;/p&gt;

&lt;p&gt;Each staff member had a list of items that were important to them, based on how they were taught to do these narratives. I reviewed all my notes and found consistent items were the data being entered and the types of data. I used this to hold a series of compromise meetings to determine what would work best for the company and establish a baseline rule for the content, the format, style of the notes, and layout of the web form. &lt;/p&gt;

&lt;p&gt;The staff feeling at this point is a little bit nervous because of the pending change to their workflow, but also excited about the idea of saving time and freeing up their time to be better spent elsewhere. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-steps"&gt;
  &lt;/a&gt;
  Project Steps
&lt;/h2&gt;

&lt;p&gt;To start this project, I created a simple mock-up of the design that will be used for the various types of content. Some sections had check boxes, others had select drop downs, and others had tables of content being filled out. I used a blank copy of the form that attorney's fill out to give me an idea of the base line content that I needed to plan. &lt;/p&gt;

&lt;p&gt;My code base allows for HTML, CSS, JS, jQuery, SQL and Bootstrap by default, and this project doesn't require anything more than these technologies to accomplish this project. &lt;/p&gt;

&lt;p&gt;There are 20 sections to this document that hold various data from the plan number, to the options and tables of data contained within. I sorted my HTML code into 20 separate sections and started coding these sections one at a time. These sections are critical to the design and are a basis of tracking changes later in the project. &lt;/p&gt;

&lt;p&gt;This layout gave me an idea for what type of content that I would be storing in the database. I designed and created a database table for storing all of the content and how it would relate to other tables in the system for consistency with how the other tables are stored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;Create&lt;/span&gt; &lt;span class="k"&gt;Table&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="k"&gt;IDENTITY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- Auto incrementing primary key ID number &lt;/span&gt;
    &lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- Establishes PlanNumber for reference, defaults to 1 or value of amendeded plan doc number to track changes &lt;/span&gt;
    &lt;span class="n"&gt;PLanDate&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;--Foreign Key with tblCases to join on CaseID &lt;/span&gt;
    &lt;span class="n"&gt;SECTION&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- Section of worksheet variable that is updated throughout script &lt;/span&gt;
    &lt;span class="n"&gt;tblRow&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;COL1&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;COL2&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;COL3&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;COL4&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;COL5&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;COL6&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="n"&gt;COL7&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;COMMENT&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;AMENDED&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="n"&gt;FK_CaseID&lt;/span&gt; &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;tblCaseData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;-- Establishes FK for CaseID &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After having the initial layout requirements and database ready it was time to start coding the layout. I started with HTML and setting up all of the content for each section of the form. There are 20 sections and each one holds a different set of content. I used Expanding and Collapsing sections to allow the staff to expand only the sections that required filling out and avoid overloading the screen with too many input fields. I also used jQuery to limit the table rows of each table section to just display 1 row by default, and expand up to 10 rows as needed for each section. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g0xBLEzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642629047534/xvqR1avcH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g0xBLEzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642629047534/xvqR1avcH.png" alt="The web form showing check boxes and input fields" width="880" height="714"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I tested sending data to the database and ensure we had information flowing as far as text box content ending up in the temporary table and permanent storage tables. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u1nAdOM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642628968974/Vfl-TgKXQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u1nAdOM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642628968974/Vfl-TgKXQ.png" alt="SQL database showing content in the database" width="880" height="203"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saving-data-temporary"&gt;
  &lt;/a&gt;
  Saving Data (temporary)
&lt;/h3&gt;

&lt;p&gt;To save the data as the user fills out the form I created an OnChange event handler that would write content to a temporary database based on the ID of the input field. This way, if the user experienced any issues or needed to close and re-open then all content will be saved until submitted. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submitting-data-to-database"&gt;
  &lt;/a&gt;
  Submitting Data to Database
&lt;/h3&gt;

&lt;p&gt;At the conclusion of completing all of the appropriate fields, the user then clicks Update which executes a SQL script on the server. This script takes all of the data from the temporary database, checks through every section for content, formats data as needed into Dates, Money, VarChar, and other data types, and pushes into my custom table in the database. &lt;/p&gt;

&lt;p&gt;The narrative text is stored in another table of the database. I wrote a second script that runs at the conclusion of the previous script to gather all of the database records from the data just entered, and then pushes an update to the narrative text table. This data had to be formatted different based on how it will be displayed in the software. The software is able to render pure HTML content for displaying narrative text to this user which allows me to customize how I present the data and create a standard format for all narrative notes. Using HTML combined with SQL, I pushed a full HTML body section to the narrative table that includes tables, checkboxes, and calculations, and other values to be rendered. This ta6ble stores it as a varchar(max) but when ready by the software it's converted into HTML so all of my HTML tags work. &lt;/p&gt;

&lt;p&gt;Example of mixing HTML with SQL Query to generate a table, using inline styling because that's the only option that works when this is rendered in the software.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="s1"&gt;'&amp;lt;/br&amp;gt;&amp;lt;table style="width:auto;margin-bottom:4px;"&amp;gt;
        &amp;lt;caption style="text-align:left;font-size:.8rem;font-family:Arial,Helvetica,sans-serif;"&amp;gt;&amp;lt;strong&amp;gt; Plan Step&amp;lt;/strong&amp;gt;&amp;lt;/caption&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th style="width:auto;text-align:left;padding:2px;border: 1px solid black;background:lightgrey"&amp;gt;Start Month&amp;lt;/th&amp;gt;
                &amp;lt;th style="width:auto;text-align:left;padding:2px;border: 1px solid black;background:lightgrey"&amp;gt;End Month&amp;lt;/th&amp;gt;
    &amp;lt;th style="width:auto;text-align:left;padding:2px;border: 1px solid black;background:lightgrey"&amp;gt;Amount&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;tr&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
            &lt;span class="s1"&gt;'&amp;lt;td style="width:auto;text-align:left;vertical-align:top;padding:2px;border: 1px solid black;"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;COL1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/td&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
            &lt;span class="s1"&gt;'&amp;lt;td style="width:auto;text-align:left;vertical-align:top;padding:2px;border: 1px solid black;"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;COL2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/td&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
            &lt;span class="s1"&gt;'&amp;lt;td style="width:auto;text-align:left;vertical-align:top;padding:2px;border: 1px solid black;"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;COL3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/td&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s1"&gt;'&amp;lt;/tr&amp;gt;'&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt;  &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PLANID&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;SECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="n"&gt;XML&lt;/span&gt; &lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="k"&gt;TYPE&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'VARCHAR(MAX)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/table&amp;gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tracking-changes"&gt;
  &lt;/a&gt;
  Tracking Changes
&lt;/h2&gt;

&lt;p&gt;This was by far the most difficult part of the entire project, but also the most rewarding to actually solve. The concept here is that when a new version of the form is filed with our office, we need to know what changed from the document, and bring attention to these changes so when the attorney reads the updated forum note, they know exactly what changed in the form without having to read the whole note. My idea for this was to use the HTML &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; tag which adds a highlight, default Yellow, to all fields that changed. &lt;/p&gt;

&lt;p&gt;Using SQL I needed to be able to look at the last form filed by form number, and the new form filed by form number, and compare the two sets of table data and see what changed.  I also needed to know which sections had been changed, or if a section that previously didn't have content, now has content.  To accomplish this, The data had to go through a series to checks to determine what changes happened if this was an amended form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;--Add Date to Plan for reference purposes &lt;/span&gt;
&lt;span class="k"&gt;Update&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;PlanDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;PlanDate&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="c1"&gt;-- Need to determine if previous plan exists in tblCustomNarrativeData for this case. &lt;/span&gt;
&lt;span class="c1"&gt;-- If no plan has been filed in new table then we don't want to track changes since it will highlight everything. &lt;/span&gt;
&lt;span class="k"&gt;Declare&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PrevPlanV2Exists&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;Set&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PrevPlanV2Exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="k"&gt;Case&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt; &lt;span class="k"&gt;ELSE&lt;/span&gt;  &lt;span class="s1"&gt;'0'&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;--Change the PrevPlanID to account for the random plan numbers being saved in database&lt;/span&gt;
 &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PREVPLANID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="n"&gt;TOP&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;order&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;--CLEANUP PREVIOUS PLAN IN tblCustomNarrativeData to remove &amp;lt;mark&amp;gt; and &amp;lt;/mark&amp;gt; for previous highlighting before comparing fields &lt;/span&gt;
 &lt;span class="k"&gt;Update&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;COL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;COL1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;/MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="n"&gt;PLanID&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;COL1&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="s1"&gt;'%&amp;lt;MARK&amp;gt;%'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;caseid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PrevPlanID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;--Table Comparison&lt;/span&gt;
&lt;span class="c1"&gt;--Using Inner Join on same table by matching CaseID, Section, and Row, check to see if the data is different&lt;/span&gt;
&lt;span class="c1"&gt;--If the data is different, concatenation is done to add html '&amp;lt;MARK&amp;gt;' and '&amp;lt;/MARK&amp;gt;'&lt;/span&gt;
&lt;span class="k"&gt;Update&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;COL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONCAT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COL1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;
&lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECTION&lt;/span&gt;  &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tblRow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tblRow&lt;/span&gt;
&lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PREVPLANID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COL1&lt;/span&gt;
&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt;
 &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
 &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PREVPLANID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="c1"&gt;--This function checks for new sections that were not part of previous plan and sets Amended to 1. &lt;/span&gt;
        &lt;span class="c1"&gt;--Only works if not original and a previous plan exists in table  &lt;/span&gt;
        &lt;span class="k"&gt;Declare&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Amended&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;Set&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Amended&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="n"&gt;dbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;udfGetWorksheetData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;WORKSHEETID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'CheckBox'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;112&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;CAST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="nb"&gt;BIT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt; &lt;span class="k"&gt;ELSE&lt;/span&gt;  &lt;span class="s1"&gt;'0'&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PLanNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;scrows&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Section&lt;/span&gt;
        &lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEction&lt;/span&gt; &lt;span class="k"&gt;into&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;sprows&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;PLanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PREVPLANID&lt;/span&gt; &lt;span class="k"&gt;group&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEction&lt;/span&gt;
        &lt;span class="c1"&gt;--Create 2 temp tables, using an EXCEPT clause, determine new sections and Set Amended to 1 &lt;/span&gt;
        &lt;span class="k"&gt;Update&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;Amended&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Amended&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PrevPlanV2Exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PREVPLANID&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; 
        &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;scrows&lt;/span&gt;
            &lt;span class="k"&gt;EXCEPT&lt;/span&gt;
            &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="k"&gt;From&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;sprows&lt;/span&gt; 
   &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;Update&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; 
    &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;Amended&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;
    &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECTION&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tblRow&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tblRow&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tblRow&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;IN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="n"&gt;tblrow&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECTION&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PrevPlanID&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tblrow&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tblRow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt;
    &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PrevPlanID&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="c1"&gt;--For rows with Amended (meaning new sections or rows, add &amp;lt;mark&amp;gt; &amp;lt;/mark&amp;gt; to all column fields since they are all new)&lt;/span&gt;
 &lt;span class="k"&gt;Update&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; 
 &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;COL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONCAT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COL1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="n"&gt;COL2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONCAT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COL2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="n"&gt;COL3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONCAT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COL3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;COL4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONCAT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COL4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;COL5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONCAT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COL5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;COL6&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONCAT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COL6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
 &lt;span class="n"&gt;COL7&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONCAT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COL7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/MARK&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Select&lt;/span&gt; &lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;tblCustomNarrativeData&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;AMENDED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;PlanNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;PlanID&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;CaseID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CaseID&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Section&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result of this code is that all modified data from the form is properly tracked and highlighted when it's rendered for display for the users. A full comparison is performed on every character of every box so all the user has to do is fill out the form, update any changed fields, and let the system do the rest of the work for them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-section"&gt;
  &lt;/a&gt;
  Summary Section
&lt;/h3&gt;

&lt;p&gt;On the web form that I created, I also created a Summary Section, using JavaScript and JQuery, to build a live rendered view of what the narrative text would look like when it submitted. This allowed the staff to do a quick check and determine if they missed anything when completing the form before the information was submitted and saved to the database. The yellow highlights here are similar to what will appear in the narrative text section of the software once completed. This section live updates as fields are modified in the web form. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iabu5Htc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642629084674/ByKqBlAdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iabu5Htc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642629084674/ByKqBlAdu.png" alt="The summary section as described above" width="880" height="611"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-result"&gt;
  &lt;/a&gt;
  The End Result
&lt;/h2&gt;

&lt;p&gt;This project was a success! The proposed project came together great and was rell received by the staff that use it every single day to fill out these forms when our office receives them. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4DWV_X0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642629154963/TVZwRlThj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4DWV_X0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642629154963/TVZwRlThj.png" alt="A well formatted HTML narrative note using this tool" width="792" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-conclusion"&gt;
  &lt;/a&gt;
  Project Conclusion
&lt;/h2&gt;

&lt;p&gt;This project went through several revisions and updates from first draft to production, and 5 major updates were derived along the journey, and over 5,000 lines of code were written to achieve the result. &lt;/p&gt;

&lt;p&gt;The business and staff now benefit from the increased efficiency, improved accuracy, and consistent summary narratives. The attorney's are happy that now all notes going forward will be consistent and uniform, along with tracked changes to make amended forms clear on any changes made. &lt;/p&gt;

&lt;p&gt;Tracking of changes is the single most important benefit of this entire project.  Comparing two versions of a form, line by line, is very time consuming and often leads to missed changes. This new method ensures that all changes to the form are caught each and every time, and attention is drawn immediately to all changes to eliminate any guess work. &lt;/p&gt;

&lt;p&gt;Overall, everyone benefited from this project and now over 75,000 lines have been written to the custom table full of content from this web app being used in less than 1 year. The staff have said this cut their daily work on filling out and comparing plans down from 20-30 minutes each document to 5 minutes or less for each document. If we look at this as 4-10 forms per day this is hours worth of saved time! &lt;/p&gt;

&lt;p&gt;The best part about being a developer is being able to create a custom solution to a problem that isn't possible using something off the shelf. There is not a product that existed that we could have purchased that would have worked directly in our software, with our database, and achieved the same result as this custom development project has for the business.&lt;/p&gt;

&lt;p&gt;I’m on @buymeacoffee. If you like my work, you can buy me a taco and share your thoughts 🎉🌮&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/ChrisBenjamin"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo Credit:&lt;br&gt;
Photo by Sebastian Herrmann on Unsplash&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Quick Sort Algorithm With JavaScript - All You Need To Know Explained</title>
      <author>NJOKU SAMSON EBERE</author>
      <pubDate>Wed, 19 Jan 2022 21:55:18 +0000</pubDate>
      <link>https://dev.to/ebereplenty/quick-sort-algorithm-with-javascript-all-you-need-to-know-explained-4ohj</link>
      <guid>https://dev.to/ebereplenty/quick-sort-algorithm-with-javascript-all-you-need-to-know-explained-4ohj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Sorting is something we do everyday because it organises our environment and makes work easy. This is the same with solving problems programmatically. Sorting is done to give the user very good experience while using an application.&lt;/p&gt;

&lt;p&gt;There are a couple of ways to sort. This includes bubble sort, heap sort, insertion sort, selection sort, quick sort and so on. &lt;/p&gt;

&lt;p&gt;This article's aim is to explain in detail one of these sorting algorithms. It is the &lt;strong&gt;Quick Sort&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1"&gt;What is Quick Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Clarification of Terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;How Quick Sort Works Using Pictorial Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Technically, Quick Sort follows the below steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Analysis of Quick Sort's Time Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;How best to pick a pivot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;Implementation of Quick Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8"&gt;Prerequisite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9"&gt;Method 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10"&gt;Method 2&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-quick-sort"&gt;
  &lt;/a&gt;
  What is Quick Sort
&lt;/h2&gt;

&lt;p&gt;This is a sorting algorithm that takes a group of items, picks a pivot item from the group and compares the pivot item with other items. &lt;/p&gt;

&lt;p&gt;If an item is found to be less than the pivot element, it is moved to the left of the pivot. However, if an item is found to be greater than the pivot, it is moved to the right. This partitions or divides the group into 2.&lt;/p&gt;

&lt;p&gt;This process is repeated on each partition until every item is found in its sorted position. It can be said that it uses a divide and conquer approach of solving problems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A little confusing? Don't worry. I will break things down. Let us clarify a few terms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/RnGfXNxCiaCscbOiUU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/RnGfXNxCiaCscbOiUU/giphy.gif" alt="Calm Down" width="406" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clarification-of-terms"&gt;
  &lt;/a&gt;
  Clarification of Terms
&lt;/h3&gt;

&lt;p&gt;Let's explain the following terms to help us understand the definition of quick sort above.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sorted Position &lt;/li&gt;
&lt;li&gt;Divide and Conquer
&lt;/li&gt;
&lt;li&gt;Pivot&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Sorted Position:&lt;/strong&gt; &lt;br&gt;
An item is said to be in a sorted position if it is greater than all elements at it's left and it is less than all element at it's right.&lt;/p&gt;

&lt;p&gt;For example, in the image below, &lt;strong&gt;3&lt;/strong&gt; is in the sorted position.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tJN--Ej5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xsovl8rwdze9ukwqu9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tJN--Ej5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xsovl8rwdze9ukwqu9o.png" alt="Sorted Position" width="880" height="133"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Divide and Conquer:&lt;/strong&gt; &lt;br&gt;
This is a programming method that takes a problem and continues to break it down until it gets to the smallest solvable problems. It then solves each of this smaller problems and combines the solutions to form a solution to the initial problem.&lt;/p&gt;

&lt;p&gt;For example, let's say you are &lt;em&gt;hungry and needs to eat&lt;/em&gt;. To solve that problem, you will need to divide the initial problem and conquer (solve) other smaller problems like going to the kitchen to cook, dishing out the food, putting it in your mouth until you are satisfied. By the end of these processes, you will have solved the initial problem - &lt;strong&gt;You are hungry and needs to eat&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That is divide and conquer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pivot:&lt;/strong&gt; &lt;br&gt;
The pivot is the element chosen at any point of the sorting to use in comparing other elements. It is not constant. As soon as the current pivot finds its sorting position, another item will be picked in the next partition until all items are in their sorted position.&lt;/p&gt;

&lt;p&gt;A pivot could be picked at random or a specific position will be used for every partition. Each of this methods have their advantages and disadvantages as we will see when discussing the time complexity of quick sort.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now that we have explained those confusing terms, the definition of Quick Sort should be clearer. I will still go ahead to give you a pictorial representation or description of what we are talking about &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-quick-sort-works-using-pictorial-description"&gt;
  &lt;/a&gt;
  How Quick Sort Works Using Pictorial Description
&lt;/h3&gt;

&lt;p&gt;We will now look at how quick sort works using pictures and this will also give us an idea of how it should be programmed.&lt;/p&gt;

&lt;p&gt;So let's say we have a group of numbers (5, 2, 1, 6, 4, 3) and we want to sort it using the Quick sort algorithm. We will use the following steps:&lt;/p&gt;

&lt;p&gt;1.. We pick a pivot. Like explained earlier, we can pick any of those elements or numbers as the pivot. Let's pick the the first number - &lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-dz24Iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn5xhx54pp3sqgnb2r2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-dz24Iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pn5xhx54pp3sqgnb2r2n.png" alt="Pivot is 5 for first iteration" width="880" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.. Set 2 pointers (i and j) at the second index and last index respectively&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hqjh8Zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cp8ryuo3f7j6a710u5d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hqjh8Zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cp8ryuo3f7j6a710u5d3.png" alt="Set 2 pointers" width="880" height="201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.. Pointer &lt;strong&gt;i&lt;/strong&gt; will be incremented or moved forward while pointer &lt;strong&gt;j&lt;/strong&gt; will be decremented or moved backwards &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWEKIE6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7kc4qbnqljf21yk4jjl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWEKIE6N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7kc4qbnqljf21yk4jjl.png" alt="Pointer Movement" width="880" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.. Move &lt;strong&gt;pointer i&lt;/strong&gt; until you get to an index with a number less than the pivot (i.e. 5); then move &lt;strong&gt;pointer j&lt;/strong&gt; until you get a number greater than pivot. When you have done that, swap the position of the number at &lt;strong&gt;pointer (index) i&lt;/strong&gt; and the position of the number at &lt;strong&gt;pointer j&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PlkPE8pU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5e9naemiqcv9v12697d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PlkPE8pU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5e9naemiqcv9v12697d0.png" alt="swap the position of the number at pointer (index) i and the position of the number at pointer j" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this will now be the result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYYtZIQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwdwhbnhgr7tiwwcixif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYYtZIQ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwdwhbnhgr7tiwwcixif.png" alt="Result of the first Swap" width="880" height="155"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.. Continue step 4 until, the &lt;strong&gt;index i&lt;/strong&gt; becomes greater than &lt;strong&gt;index j&lt;/strong&gt;. Stop there! That is the base case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwPW4gTn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7odtkxbkrd7ejfn4pg6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwPW4gTn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7odtkxbkrd7ejfn4pg6f.png" alt="the index i becomes greater than index j" width="880" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.. Swap the number at &lt;strong&gt;index j&lt;/strong&gt; with the &lt;strong&gt;pivot&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lh7J7PWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nni67ciudowx3mg5g8rr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lh7J7PWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nni67ciudowx3mg5g8rr.png" alt="Swap the number at **index j** with the **pivot**" width="880" height="155"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice that the all numbers to the left of 5 (i.e. the pivot) is less than 5 and all numbers to the right of 5 are greater than 5. This means that 5 is at its &lt;strong&gt;sorted position&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;7.. Now we have two partitions to the left and to the right of 5 which we are not sure are sorted. We will have to repeat the &lt;strong&gt;step 1 to 6&lt;/strong&gt; for each partition until every item finds its sorted position.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;*&lt;em&gt;NOTE: *&lt;/em&gt; If a group has just one element or no element, we do not try to sort it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;8.. Put the result of each partition together to form a sorted group of numbers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MtYcLwxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgszzdzm6rjefwc3529o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MtYcLwxO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgszzdzm6rjefwc3529o.png" alt="sorted group of numbers" width="880" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#technically-quick-sort-follows-the-below-steps"&gt;
  &lt;/a&gt;
  Technically, Quick Sort follows the below steps:
&lt;/h3&gt;

&lt;p&gt;Step 1 − Make any element the pivot&lt;br&gt;
Step 2 − Partition the array on the basis of pivot&lt;br&gt;
Step 3 − Apply Step 1 &amp;amp; 2 on the left partition repeatedly&lt;br&gt;
Step 4 − Apply Step 1 &amp;amp; 2 on the right partition repeatedly&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#analysis-of-quick-sorts-time-complexity"&gt;
  &lt;/a&gt;
  Analysis of Quick Sort's Time Complexity
&lt;/h2&gt;

&lt;p&gt;Remember we said that the pivot selected has an impact on the time it takes to run the Quick Sort.&lt;/p&gt;

&lt;p&gt;Imagine that we are to sort a sorted list like so:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z9aXV14C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n84yx2kje22zqd2m58xc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z9aXV14C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n84yx2kje22zqd2m58xc.png" alt="sorted list" width="880" height="140"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we pick the first item as the pivot for each partition, it will result in the worse case with a time complexity of O(n^2). This so because, the partition will always be done at the pivot index.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A9xlBAC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0by4gwy5od6g24i7c2py.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A9xlBAC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0by4gwy5od6g24i7c2py.png" alt="worse case with a time complexity of O(n^2)" width="880" height="718"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we pick the item at the middle of the list, it will result in the best case with time complexity of O(nlogn). This is because the partition will always be done at the middle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2RiQpItQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/699ihvnbd2w9sydotai4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2RiQpItQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/699ihvnbd2w9sydotai4.png" alt="best case with time complexity of O(nlogn)" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, achieving best case is very difficult. It requires that the list be sorted and there is one middle element in the middle. So the length of any given list has to be an odd number.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-best-to-pick-a-pivot"&gt;
  &lt;/a&gt;
  How best to pick a pivot
&lt;/h3&gt;

&lt;p&gt;Having come to understand the time complexity issue surrounding quick sort, the 2 ways recommended to pick a pivot are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pick the element in the middle. If there are two elements in the middle, pick any of them.&lt;/li&gt;
&lt;li&gt;Pick elements randomly.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will be sticking with the first one for the purpose of this article. Let's now implement all we have been learning with code.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation-of-quick-sort"&gt;
  &lt;/a&gt;
  Implementation of Quick Sort
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h3&gt;

&lt;p&gt;For you to follow through this part onwards, you require &lt;a href="https://www.tutorialspoint.com/computer_programming/computer_programming_basics.htm"&gt;basic understanding of programming&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We are going to be using JavaScript for the implementation. So you can also check that out &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am going to be using the Replit Playground to write and test my code. You can check it out &lt;a href="https://replit.com/"&gt;here&lt;/a&gt;. Otherwise, feel free to use what you already know to compile JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#method-1"&gt;
  &lt;/a&gt;
  Method 1
&lt;/h3&gt;

&lt;p&gt;This method follows strictly the steps we highlighted above. We will need two functions &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The partition function &lt;/li&gt;
&lt;li&gt;The Quick Sort function &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;The partition function:&lt;/strong&gt;&lt;br&gt;
This function takes 3 parameters (i.e. a list of items, the start index and end index), it then gets the pivot index, swap items and return the left or right index.&lt;/p&gt;

&lt;p&gt;Let's do this...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a function named partition
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;In the function, get the pivot by adding start index (leftIndex) and end index (rightIndex), dividing the answer by 2 and rounding down the answer if it is not a whole number like so:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Next create a loop to check if the leftIndex is lower than the rightIndex. While this is true, the loop will continue.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;While the above loop is true, do the following within the loop:&lt;br&gt;
1.. Check if the item at the leftIndex is less than the item at the pivotIndex. while this is true, increment the leftIndex (i.e. move it rightwards) like so:&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pivotIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.. Check if the item at the rightIndex is greater than the item at the pivotIndex. while this is true, decrement the rightIndex (i.e move it leftwards) like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pivotIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.. If at any point, the item at the leftIndex is greater than the item at the rightIndex, swap the item at the leftIndex with the item at the rightIndex. Then increment the leftIndex and decrement the rightIndex like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;

      &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Outside the loop, assuming that &lt;code&gt;leftIndex &amp;lt;= rightIndex&lt;/code&gt; is now false, return the leftIndex. This becomes the point of partition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our partition function should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pivotIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pivotIndex&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
      &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The Quick Sort function:&lt;/strong&gt;&lt;br&gt;
With the partition function out of the way, the Quick Sort function is easy. It takes 3 parameters (i.e. a list of items, the start index and end index). Only the first parameter is compulsory. We will follow the next steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a function named: quickSort
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;In the function, if the leftIndex is not given, we assign it 0 which is the start index of any array and if the rightIndex is not given, we subtract 1 from the length of the array given and assign the answer to the rightIndex. Here is the code:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;rightIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Next, we call upon the partition function to get a pivot for us, swap items and put the pivot in the sorted position. Finally, it returns the point at which to partition the array. See how I do it here:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Remember our divide and conquer method? After we get partitions, we will need to do the same thing over and over to those partitions until we get to an array containing just one item or maybe no item.&lt;/p&gt;

&lt;p&gt;So we need to keep calling the quickSort function within the quickSort function until there is no more items to sort. That is &lt;a href="https://www.freecodecamp.org/news/quick-intro-to-recursion/#:~:text=Recursion%20is%20when%20a%20function,unit%20of%20work%20multiple%20times."&gt;recursion&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So if the leftIndex is still less than the end index of the left partition, we call quickSort like so:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;If the rightIndex is still greater than the start index of the right partition, we call quickSort like so:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;If at any point, both partitions are either empty or contains just one element, then that means that the items are now sorted. At this point, we return the items like so:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Our quickSort Function now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;rightIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leftIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;leftIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rightIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pivotIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rightIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7WT_krCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt0zqe1e7674nz60xokj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7WT_krCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt0zqe1e7674nz60xokj.gif" alt="GIF Image testing" width="600" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FdFj7IM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w15ds1oz9g6kcs1zob8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FdFj7IM5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w15ds1oz9g6kcs1zob8z.png" alt="JPEG Image testing" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find solution for Method 1 &lt;a href="https://replit.com/@EBEREGIT/quick-sort#index.js"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-2"&gt;
  &lt;/a&gt;
  Method 2
&lt;/h3&gt;

&lt;p&gt;You will notice that we were keeping a reference to the &lt;strong&gt;start&lt;/strong&gt; and &lt;strong&gt;end&lt;/strong&gt; index of the partitions in the &lt;em&gt;Method 1&lt;/em&gt;. But how about if we do not want to do that?&lt;/p&gt;

&lt;p&gt;This second method answers that question. Instead of keeping such reference, we can do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Terminate the execution if the array of items contains just one item or is empty.&lt;/li&gt;
&lt;li&gt;If there are more than one item, do the following steps:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Pick a pivot item.&lt;/li&gt;
&lt;li&gt;Create two (2) temporary arrays. One to hold items less than the pivot and the other to hold items greater than the pivot.&lt;/li&gt;
&lt;li&gt;Loop through the array of items given. if an item is less than the pivot, push it into the left array and if an item is greater than the pivot, push it into the right array. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;This puts the pivot in its sorted position and creates 2 partitions&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repeat the steps above until every item is at its sorted position &lt;/li&gt;
&lt;li&gt;Then return the new sorted array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;See code below. I have added comments to make it easy to understand:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// terminate execution and return array if empty &lt;/span&gt;
  &lt;span class="c1"&gt;// or containing one elemrnt&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// set the pivot to the last item on the list&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// create temporary contaners&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;leftItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rightItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="c1"&gt;// loop through the array to put the pivot in its sorted position &lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;rightItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;leftItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// repeat same processes above on both partition &lt;/span&gt;
  &lt;span class="c1"&gt;// until every item is at its sorted position&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leftItems&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rightItems&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUKpO9sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w487a7rex5oivu1j0uix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUKpO9sd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w487a7rex5oivu1j0uix.png" alt="Testing Method 2" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find solution for Method 2 &lt;a href="https://replit.com/@EBEREGIT/quickSortClean#index.js"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;It's been a awesome ride with you starting from the definition of quick sort. We were able to clarify some terms that might be confusing and we went ahead to use pictorial descriptions to explain further what quick sort is and how it works.&lt;/p&gt;

&lt;p&gt;After examining the time complexity, we used one of the suggested ways of implementation to create the quick sort algorithm using JavaScript. Finally, we tried our hands on another method of implementing it.&lt;/p&gt;

&lt;p&gt;Quick sort is one of the fastest and most popular sorting algorithms we have out there. It is the method used to implement sorting method provided by most programming languages.&lt;/p&gt;

&lt;p&gt;So I want you to try out other methods of implementation and share with me. Looking forward to hearing from you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>algorithms</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Laravel 9.0: An Exhaustive Rundown Of What Is To Be Expected</title>
      <author>Faruk Nasir</author>
      <pubDate>Wed, 19 Jan 2022 21:37:19 +0000</pubDate>
      <link>https://dev.to/frknasir/laravel-90-an-exhaustive-rundown-of-what-is-to-be-expected-6jk</link>
      <guid>https://dev.to/frknasir/laravel-90-an-exhaustive-rundown-of-what-is-to-be-expected-6jk</guid>
      <description>&lt;p&gt;The Laravel release cycle was updated to include one major release every year. Due to this change, Laravel 9––the next LTS version of Laravel––was expected to be released in September of 2021.&lt;/p&gt;

&lt;p&gt;That didn't happen.&lt;/p&gt;

&lt;p&gt;Taylor wrote in the Laravel blog that the Laravel team had decided to postpone the release of Laravel 9 to early 2022––couple of months after the release of Symphony 6.0––as that will allow them to upgrade the underlying Symphony components utilised by Laravel. Otherwise, they'd have to wait until September of 2022 for such upgrade. This means that we should expect the release of L10 in January of 2023.&lt;/p&gt;

&lt;p&gt;With L9 release nearly on us, I've decided to put together all that is contained within so far.&lt;/p&gt;

&lt;p&gt;PHP8.0: The Minimum Version of PHP For Laravel 9 Applications&lt;br&gt;
Symphony components will be updated to version 6.0 in L9. The minimum supported version of php in Symphony 6.0 is 8.0. So, automatically, the minimum supported version of PHP in L9 will, also, be 8.0.&lt;/p&gt;

&lt;p&gt;A Slick Upgrade For php artisan route:list&lt;br&gt;
route:list is that artisan command that allows for quick navigation of all routes in the terminal. But, If you have used it before, you'd agree with me that it's really been short in the navigation aspect, especially, on smaller screens. Routes are, extremely, difficult to spot––and that, single-handedly, defeats it's purpose.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--URNZrQKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwev1kw04cajedj4lobv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URNZrQKu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwev1kw04cajedj4lobv.png" alt="original route list" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;L9 ships with a smooth upgrade that changes––for the better––how the routes are displayed. The new route:list command can be ran in two modes: default and verbose.&lt;/p&gt;

&lt;p&gt;To run in the default, use the same old syntax: php artisan route:list. This will display the routes beautifully in a table of columns: method, domain@uri and action. And, it is designed to be, truly, responsive even in smaller screens. To ensure the responsiveness, actions with long names are truncated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UavKVc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gm1ngojto5a7un1ay3q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UavKVc4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gm1ngojto5a7un1ay3q.png" alt="new route list" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The verbose mode is activated by appending -v at the end of the default command. It should look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan route:list -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the verbose mode, in addition to the method, domain@uri and action, two more columns are displayed: name and middleware and no column is truncated. Even the verbose mode is far better than the old display.&lt;/p&gt;

&lt;p&gt;No changes in behaviour in all the options(sort, json etc) of the old command except with columns and compact that have been removed entirely.&lt;/p&gt;

&lt;p&gt;There is a breaking change introduced with this make-over. Read all about it here .&lt;/p&gt;

&lt;p&gt;L8's Anonymous Stub Migration Will Become The Default&lt;br&gt;
The release of Laravel 8.37 came with anonymous migration support.&lt;/p&gt;

&lt;p&gt;Imagine––during the course of your application development––you create an add_tags_column_to_post_table migration. In a following version, you decide to remove the tags column with a migration file remove_tags_column_to_post_table. In a future version, due to a change in requirements, you decide to put back the tags column using the migration file add_tags_column_to_post_table.&lt;/p&gt;

&lt;p&gt;Notice that the first and third migration files' names are the same.&lt;/p&gt;

&lt;p&gt;At this point of the migration history, running it is hardly a walk-in-the-park––as it should be, unless, you are running it––in a newly created database, while running tests or in an application that is well-tested. The most trouble is for large applications with quite a number of years in development that are poorly tested. This is the problem that Anonymous Migrations solves.&lt;/p&gt;

&lt;p&gt;In L9, it will replace the old way migration was handled. The feature is backward-compatible. That means, it can be used with previous versions of Laravel.&lt;/p&gt;

&lt;p&gt;The following is what an anonymous migration file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table-&amp;gt;json('tags')-&amp;gt;nullable();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::table('posts', function (Blueprint $table) {
            $table-&amp;gt;dropColumn('tags');
        });
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replacement of SwiftMailer by Symphony Mailer&lt;br&gt;
In August of 2019, Fabien Potencier wrote about his decision to replace Swiftmailer with Symphony Mailer in a short blog post. Laravel follows suite in version 9.0.&lt;/p&gt;

&lt;p&gt;Here is the PR that made it all happen.&lt;/p&gt;

&lt;p&gt;The server.php file in The Root Directory Can Be Safely Removed&lt;br&gt;
The server.php file, usually, found at the root of a Laravel application's folder is only used for the php artisan serve command. In L9, it can be safely removed as the command's implementation will be included inside the framework. Tiny but, gold!&lt;/p&gt;

&lt;p&gt;Replacement Of Str Functions' Internal Logic With PHP's methods&lt;br&gt;
PHP 8.0 shipped with 3 new saucy string functions: &lt;code&gt;str_contains&lt;/code&gt;, &lt;code&gt;str_starts_with&lt;/code&gt; and &lt;code&gt;str_ends_with&lt;/code&gt;. Since PHP 8.0 will be the minimum supported version in L9, it is only logical that their related functions in &lt;code&gt;\Illuminate\Support\Str&lt;/code&gt; class get updated as well. Here is the PR that made it all happen!&lt;/p&gt;

&lt;p&gt;The Latest Version of Spatie's Ignition Will Be Made Default&lt;br&gt;
The announcement was made in a tweet by Spatie's Freek Van der Harten:&lt;/p&gt;

&lt;p&gt;🚀 I'm proud to share that our team has released a new major version of Ignition. It's the most beautiful error page you ever seen, and it will be the default in @laravelphp 9&lt;/p&gt;

&lt;p&gt;👍You can also install it in Laravel 8!&lt;/p&gt;

&lt;p&gt;🧵 Let's take a look at all the features pic.twitter.com/jw9Dqdse9T&lt;/p&gt;

&lt;p&gt;— Freek Van der Herten 🔭 (&lt;a class="mentioned-user" href="https://dev.to/freekmurze"&gt;@freekmurze&lt;/a&gt;) January 18, 2022 " data-card-controls="0" data-card-theme="light"&amp;gt;&lt;br&gt;
🚀 I'm proud to share that our team has released a new major version of Ignition. It's the most beautiful error page you ever seen, and it will be the default in @laravelphp 9&lt;/p&gt;

&lt;p&gt;👍You can also install it in Laravel 8!&lt;/p&gt;

&lt;p&gt;🧵 Let's take a look at all the features pic.twitter.com/jw9Dqdse9T&lt;/p&gt;

&lt;p&gt;— Freek Van der Herten 🔭 (&lt;a class="mentioned-user" href="https://dev.to/freekmurze"&gt;@freekmurze&lt;/a&gt;) January 18, 2022&lt;br&gt;
A New Option For The artisan test Command&lt;br&gt;
Nuno Maduro announced in a tweet that the artisan test command will have a --coverage option in L9 that will instruct the test command to display the test coverage directly on the terminal.&lt;/p&gt;

&lt;p&gt;In @laravelphp v9.x, we will be introducing the &lt;code&gt;artisan test --coverage&lt;/code&gt; option. This option displays the test coverage directly on the terminal. 💫 pic.twitter.com/yKAMFwvwaZ&lt;/p&gt;

&lt;p&gt;— Nuno Maduro (@enunomaduro) January 18, 2022 " data-card-controls="0" data-card-theme="light"&amp;gt;&lt;br&gt;
In @laravelphp v9.x, we will be introducing the &lt;code&gt;artisan test --coverage&lt;/code&gt; option. This option displays the test coverage directly on the terminal. 💫 pic.twitter.com/yKAMFwvwaZ&lt;/p&gt;

&lt;p&gt;— Nuno Maduro (@enunomaduro) January 18, 2022&lt;br&gt;
This post is a work-in-progress. I will continue to update it as I get more information regarding Laravel 9.0 release. Thank you!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post is a work-in-progress. I will continue to update it as I get more information regarding Laravel 9.0 release. Thank you!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>larevel</category>
      <category>php</category>
    </item>
    <item>
      <title>8 Machine Learning Questions on K-means to Destroy Your Interview</title>
      <author>Avi Arora</author>
      <pubDate>Wed, 19 Jan 2022 21:25:38 +0000</pubDate>
      <link>https://dev.to/aarora4/8-machine-learning-questions-on-k-means-to-destroy-your-interview-2ef4</link>
      <guid>https://dev.to/aarora4/8-machine-learning-questions-on-k-means-to-destroy-your-interview-2ef4</guid>
      <description>&lt;p&gt;Read the full article here: &lt;a href="https://analyticsarora.com/8-unique-machine-learning-interview-questions-on-k-means/"&gt;https://analyticsarora.com/8-unique-machine-learning-interview-questions-on-k-means/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In preparing for your next Machine Learning Interview, one of the topics you certainly need to be familiar with is K-means. This algorithm is incredibly useful for clustering data points into groups that have not been explicitly labeled! The days of Machine Learning taking over the world are well within their stride, so it is important to have a solid grasp on concepts such as this one. &lt;/p&gt;

&lt;p&gt;Check out my &lt;a href="https://analyticsarora.com/k-means-for-beginners-how-to-build-from-scratch-in-python/"&gt;in-depth tutorial on implementing K-means from scratch in python&lt;/a&gt; if you are not familiar with the algorithm!&lt;br&gt;&lt;br&gt;This series of articles is meant to equip you with the knowledge you need to ace your ML interview and secure a top tier job in the field. &lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Article Overview&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is K-means clustering?&lt;/li&gt;
&lt;li&gt;How does K-means clustering work?&lt;/li&gt;
&lt;li&gt;Why is K-means clustering important?&lt;/li&gt;
&lt;li&gt;K-means ML Interview Questions and Answers&lt;/li&gt;
&lt;li&gt;Wrap Up&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>tutorial</category>
      <category>interview</category>
      <category>writing</category>
    </item>
    <item>
      <title>PAGINATION USING PYTHON, REST API, FLASK &amp; MONGODB</title>
      <author>Metete Welete</author>
      <pubDate>Wed, 19 Jan 2022 21:17:53 +0000</pubDate>
      <link>https://dev.to/metete_welete/pagination-using-python-rest-api-flask-mongodb-2gop</link>
      <guid>https://dev.to/metete_welete/pagination-using-python-rest-api-flask-mongodb-2gop</guid>
      <description>&lt;p&gt;I was recently involved in a project that required me to implement pagination from the backend and I would like to share the easy way I did it through this post.&lt;br&gt;
Now just like I initially did, you might have checked online for a python-mongo module that could help achieve this but I assure you that this article would be easier and more light-weight.&lt;/p&gt;

&lt;p&gt;For this post, I will be using a simple books API that returns a passed in number of books requested from the database. We will be able to pass in the page number and amount(limit) of books to be returned. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please note that this article was written with Windows users in mind. If you are on another OS, you could check out the commands to perform similar tasks online.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, let me describe how my file structure is:&lt;br&gt;
&lt;code&gt;&lt;br&gt;
-&amp;gt; Books_api&lt;br&gt;
----&amp;gt; app.py&lt;br&gt;
----&amp;gt; venv&lt;br&gt;
----&amp;gt; books_api&lt;br&gt;
--------&amp;gt; \_\_init\_\_.py&lt;br&gt;
--------&amp;gt; books.py&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I have a venv (virtual environment) folder where all modules required for this project are installed. You can quickly do that by following these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open your terminal (command prompt) in the books_api folder,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you don’t already have the virtual environment package installed on your pc, you should follow step 3, else you can skip to step 4,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;pip install virtualenv&lt;/code&gt;. This should install packages required for creating a virtual environment,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;virtualenv venv&lt;/code&gt;, where &lt;code&gt;venv&lt;/code&gt; is the name of the virtual environment. This can be named anything, but we like to keep it simple,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;run &lt;code&gt;venv\scripts\activate&lt;/code&gt; to activate the virtual environment in the books_api folder.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Installations&lt;/strong&gt;&lt;br&gt;
Just before we kick off, if you don’t already have these modules, then you can quickly install them using &lt;code&gt;pip install&lt;/code&gt; in your already activated virtual environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flask flask-restful pymongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Setting up our Resources&lt;/strong&gt;&lt;br&gt;
I am going to be setting up Resource for flask-restful in the __init__.py file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;__init__.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_restful&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Connecting to local host 
&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'mongodb://localhost:27017/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Get the books_db and store in db
&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books_db&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.books&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Books&lt;/span&gt;

&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Books&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;books.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_restful&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reqparse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bson&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;json_util&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;books_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reqparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;books_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;Page&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;books_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;Limit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Books&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;'''
        Methods related to the Books endpoint are written 
        here.

    GET:
       Input: {'page':Int, 'limit':Int}
       Output: {'total_number':Int, 'page':Int, 
       'showing':Int, books:List}
    '''&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;books_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'page'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;page_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'limit'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# Fetching books data
&lt;/span&gt;        &lt;span class="n"&gt;fetch_all_books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Total number of books
&lt;/span&gt;        &lt;span class="n"&gt;books_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_all_books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;# Total number of books
&lt;/span&gt;        &lt;span class="n"&gt;books_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count_documents&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;

        &lt;span class="c1"&gt;# Fetching books data and paginating
&lt;/span&gt;        &lt;span class="n"&gt;fetch_books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_limit&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_limit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;books_fetched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch_books&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'total_number'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'page'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'showing'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;page_limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'books'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books_fetched&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;app.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;books_api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run this application, open the activated venv in your terminal and run &lt;code&gt;python app.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
This post has been made very basic for easy understanding and implementation. You don’t really need to have this exact project. You just need to understand the concept and you’re good to go. All the code has been uploaded to GitHub, you can view it here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nodebe/books_api"&gt;Books_Api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope I was able to help you through this post. I am open to answering questions in the comment section below.&lt;/p&gt;

&lt;p&gt;Stay coded! :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>mongodb</category>
      <category>api</category>
    </item>
    <item>
      <title>How to Repost Hashnode Articles on Dev.to</title>
      <author>Sean Coughlin</author>
      <pubDate>Wed, 19 Jan 2022 21:15:17 +0000</pubDate>
      <link>https://dev.to/scc33/how-to-repost-hashnode-articles-on-devto-2gi7</link>
      <guid>https://dev.to/scc33/how-to-repost-hashnode-articles-on-devto-2gi7</guid>
      <description>&lt;p&gt;I started my writing journey on Hashnode, but I've been wanting to expand my audience by widely publishing articles across the interwebs. I discovered &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; as another great platform to share developer-related content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6fWHZx8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625185890/VXeU-iq6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fWHZx8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625185890/VXeU-iq6p.png" alt="dev.to screenshot" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dev.to has dedicated support for posting to the community from &lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;RSS&lt;/a&gt;. Additionally, dev.to supports canonical linking to protect SEO rankings. Luckily, Hashnode provides an RSS feed so republishing content from Hashnode onto dev.to is easy and fast.&lt;/p&gt;

&lt;p&gt;You can find your Hashnode RSS feed at &lt;code&gt;https://[your-blog-url]/rss.xml&lt;/code&gt;. For example, my feed is at &lt;a href="https://blog.seancoughlin.me/rss.xml"&gt;blog.seancoughlin.me/rss.xml&lt;/a&gt;. You can also find it linked on your blog page. See the arrow in the screenshot below for the location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMGeeu12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625917019/9pWwKNFWu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMGeeu12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625917019/9pWwKNFWu.png" alt="Hashnode RSS location" width="880" height="89"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating a dev.to account, open the settings and head to the Extensions tab. Under the Extensions tab, you will find &lt;em&gt;Publishing to DEV Community from RSS&lt;/em&gt;. Simply copy your Hashnode RSS feed into the &lt;em&gt;RSS Feed URL&lt;/em&gt; field and hit &lt;em&gt;Save Feed Settings&lt;/em&gt;. After a few seconds, your Hashnode articles will appear as drafts in the dev.to dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDFY15Ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625258250/PXcdU0z6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDFY15Ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625258250/PXcdU0z6w.png" alt="Publishing to dev.to from RSS" width="754" height="811"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To publish an article you will need to click edit and then change the &lt;code&gt;published: false&lt;/code&gt; field to be true.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NYBc2pTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625279327/xZ8_exRaOW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NYBc2pTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642625279327/xZ8_exRaOW.png" alt="Published field" width="730" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! Now your articles will be hosted on dev.to in addition to Hashnode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6lk1ped--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642626312677/0dM_6PY1B.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6lk1ped--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642626312677/0dM_6PY1B.jpeg" alt="Celebrating a successful republishing" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@universaleye?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Universal Eye&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/celebrate?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blogging</category>
      <category>hashnode</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Creating a browser extension for Safari and Chrome</title>
      <author>Bing Qiao</author>
      <pubDate>Wed, 19 Jan 2022 21:14:20 +0000</pubDate>
      <link>https://dev.to/bingqiao/creating-a-browser-extension-for-safari-and-chrome-493m</link>
      <guid>https://dev.to/bingqiao/creating-a-browser-extension-for-safari-and-chrome-493m</guid>
      <description>&lt;p&gt;This article is not a detailed tutorial on how to create Web extensions for either Safari or Chrome. It is mainly an introduction to two demo projects hosted on Github on how to develop extensions that work on both Safari and Chrome (possibly Mozilla Firefox but not tested), using React/TypeScript/esbuild.&lt;/p&gt;

&lt;p&gt;Safari extension requires a Swift project that contains iOS/macOS parent apps plus their extension apps that share a bunch of JavaScript and other resources.&lt;/p&gt;

&lt;p&gt;The extension from my first attempt &lt;a href="https://medium.com/@bingqiao/safari-auto-refresh-web-extension-javascript-only-sort-of-9298970ec0ac"&gt;here&lt;/a&gt; was a crude implementation in plain, vanilla JavaScript. There was no bundling, minifying, framework or typing. There wasn't even a separate JavaScript project. All JavaScript&amp;amp;resources belonged to the Swift project and were managed by Xcode.&lt;/p&gt;

&lt;p&gt;After some more research and learning, I recreated the same extension using React/TypeScript, not just for Safari but Chrome too. The new project uses esbuild to create bundled and minified code.&lt;/p&gt;

&lt;p&gt;A much stripped down version of the extension resources project is hosted here &lt;a href="https://github.com/bingqiao/browser-ext-react-esbuild"&gt;browser-ext-react-esbuild&lt;/a&gt; while the container app for iOS/macOS is hosted here &lt;a href="https://github.com/bingqiao/browser-ext"&gt;browser-ext&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first issue I had to address was how to create a Web extension using React/TypeScript/esbuild. Luckily there is already a template project that does exactly just that. &lt;a href="https://github.com/martonlederer/esbuild-react-chrome-extension"&gt;esbuild-react-chrome-extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next issue is how to code in TypeScript against Web extension API for both Safari and Chrome. As it turns out Safari and Mozilla Firefox are very similar in their API but there are enough differences between them and Chrome to require different treatment especially when it comes to the use of "callbacks" and "promises" &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Build_a_cross_browser_extension"&gt;Building a cross-browser extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially I created wrapper functions to convert Chrome functions that require callback to return promise instead. The better approach, as I found out later, is probably to use   &lt;a href="https://github.com/mozilla/webextension-polyfill/"&gt;webextension-polyfill&lt;/a&gt; from Mozilla and its &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/webextension-polyfill"&gt;types&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A caveat here is, I had to set &lt;code&gt;module&lt;/code&gt; in "tsconfig.json" to &lt;code&gt;"commonjs"&lt;/code&gt; as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "compilerOptions": {
    ...
    "module": "commonjs",
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then do import assignment in JavaScript files that call extension API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import browser = require('webextension-polyfill');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using &lt;code&gt;import&lt;/code&gt; like below didn't work for me:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as browser from 'webextension-polyfill';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code generated by esbuild for the &lt;code&gt;import&lt;/code&gt; above calls &lt;code&gt;__toESM&lt;/code&gt; for &lt;code&gt;require_browser_polyfill()&lt;/code&gt; which renders the polypill proxy ineffective.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var browser2 = require_browser_polyfill();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another issue is how to manage the React/extension project with the container Swift project.&lt;/p&gt;

&lt;p&gt;The boilerplate extension resources (JavaScript, manifest and html files) created with a new Safari extension project are managed by Xcode. But I need them to be simply copied over from the React project, instead of having Xcode creating reference for every JavaScript/html/css/image file that needs to part of the bundle it creates.&lt;/p&gt;

&lt;p&gt;The figure below shows how those resource files are added to the Swift bundle after an extension project is created.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnQ7aWnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bthhs3ctb0uho9afyunt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnQ7aWnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bthhs3ctb0uho9afyunt.png" alt="How extension resources get added to Swift app bundle by default" width="880" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem is, we might have different files from the React project depending on whether it's a prod or dev build, especially if the bundler used generates randomised file names.&lt;/p&gt;

&lt;p&gt;Instead, create an empty folder such as &lt;code&gt;build&lt;/code&gt; under extension &lt;code&gt;Resources&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WtDVOlyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqkqrscrviyvyozu4ojb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtDVOlyg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqkqrscrviyvyozu4ojb.png" alt='Create a new empty folder "build"' width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then add this new empty folder to &lt;code&gt;Resources&lt;/code&gt; in Xcode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jg4cxC8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sp5i25gc6mkynnpdjtd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jg4cxC8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sp5i25gc6mkynnpdjtd.png" alt='Add folder to "Resources" in Xcode' width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, add the folder to &lt;code&gt;Copy Bundle Resources&lt;/code&gt; build phase. This needs to be done for both iOS and macOS extension targets.&lt;/p&gt;

&lt;p&gt;Now, all that takes to import new extension resources from the React project is to copy everything over to &lt;code&gt;Resources&lt;/code&gt; folder in the Swift project.&lt;/p&gt;

&lt;p&gt;The two sample projects are setup to work together as long as they are checked out side-by-side in the same directory.&lt;/p&gt;

&lt;p&gt;Being able to test Safari extension easily in Chrome during development has saved me a lot of time. I'd be interested to hear if you have different approaches to some issues raised here.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>safari</category>
      <category>esbuild</category>
    </item>
    <item>
      <title>ES6: How to Clone an Object in javascript ?</title>
      <author>deepak-negi-web</author>
      <pubDate>Wed, 19 Jan 2022 21:03:34 +0000</pubDate>
      <link>https://dev.to/deepaknegiweb/es6-how-to-clone-an-object-in-javascript--5dej</link>
      <guid>https://dev.to/deepaknegiweb/es6-how-to-clone-an-object-in-javascript--5dej</guid>
      <description>&lt;p&gt;Hey Folks👋 hope you doing well.&lt;br&gt;
So you must be thinking, "Clone an Object"??? whats the big deal?&lt;br&gt;
Well, i also think this way until i encounter an issue which took me 2 days just to debug that i have done something terrible with cloning an object.&lt;/p&gt;

&lt;p&gt;So lets see how can we clone objects in javascript&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// we have a user object
const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com"
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we want to copy this user object, so? simple!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const copiedUser = user;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy right?... well thats the worst way of copying a user,it is clear that you have some misconceptions of what the statement &lt;code&gt;const copiedUser = user;&lt;/code&gt; does.&lt;/p&gt;

&lt;p&gt;In JavaScript objects are passed and assigned by reference (more accurately the value of a reference), so &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;copiedUser&lt;/code&gt; are both references to the same object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// [Object1]&amp;lt;--------- user

const copiedUser = user;

// [Object1]&amp;lt;--------- user
//         ^ 
//         |
//         ----------- copiedUser
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see after the assignment, both references are pointing to the same object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com"
}  
const copiedUser = user;
copiedUser.name = "XYZ"
console.log(copiedUser) // {name:"XYZ",email:"st.deepak15@gmail.com"}
console.log(user) // {name:"XYZ",email:"st.deepak15@gmail.com"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;modifing any of them will change both of them :(&lt;/p&gt;

&lt;p&gt;So then how we can create copy if we need to modify one and not the other?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Spread Operator&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const spreadUser = {...user}
spreadUser.name = "XYZ"
console.log(spreadUser) // {name:"XYZ",email:"st.deepak15@gmail.com"}
console.log(user) // {name:"Deepak Negi",email:"st.deepak15@gmail.com"}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Object.assign()&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const assignUser = Object.assign({}, user);
assignUser.name = "XYZ"
console.log(assignUser) // {name:"XYZ",email:"st.deepak15@gmail.com"}
console.log(user) // {name:"Deepak Negi",email:"st.deepak15@gmail.com"}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yaassss we finally got it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ddHhhUBn25cuQ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ddHhhUBn25cuQ/giphy.gif" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you think thats it.. so no... there much more to know, now we have added some more data in the user object and now lets see what happen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}
const spreadUser = {...user}
spreadUser.address.city = "Pune"
spreadUser.address.state = "Mumbai"

console.log(spreadUser)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"Pune",
    state:"Mumbai",
    zipcode: 000000,
    country:"India"
  }
}

console.log(user)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"Pune",
    state:"Mumbai",
    zipcode: 000000,
    country:"India"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You see the problem, our actual user object is also changed now and this happens with &lt;code&gt;Object.assign()&lt;/code&gt; method as well.&lt;/p&gt;

&lt;p&gt;But why?&lt;br&gt;
Because of the &lt;strong&gt;shallow copying&lt;/strong&gt; i.e. object spread operator, as well as Object.assign, does not clone the values of nested objects, but copies the reference to the nested object. That's called &lt;strong&gt;shallow copying&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then what should we do? Deep copy?&lt;br&gt;
Yes, Deep copy/Deep clone will copies object, even nested properties, to do so serialize the object to JSON and parse it back to a JS object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}
const deepCopiedUser = JSON.parse(JSON.stringify(user))

deepCopiedUser.address.city = "Pune"
deepCopiedUser.address.state = "Mumbai"

console.log(deepCopiedUser)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"Pune",
    state:"Mumbai",
    zipcode: 000000,
    country:"India"
  }
}

console.log(user)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now our original &lt;code&gt;user&lt;/code&gt; object doesn't change when we modify the &lt;code&gt;deepCopiedUser&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Beware using the &lt;code&gt;JSON.parse(JSON.stringify(user))&lt;/code&gt; if you're dealing with date, functions, RegExps, Maps, Sets or other complex types within your object. The JSON method can't handle these types.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So for such cases the &lt;a href="https://lodash.com/docs/4.17.15#cloneDeep"&gt;&lt;strong&gt;lodash clonedeep&lt;/strong&gt;&lt;/a&gt; method is probably the best way to go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {cloneDeep} from 'lodash'
or
const {cloneDeep} = require('lodash')

const user = {
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}
const deepCloneUser = cloneDeep(user)
deepCloneUser.address.city = "Pune"
deepCloneUser.address.state = "Mumbai"

console.log(deepCloneUser)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"Pune",
    state:"Mumbai",
    zipcode: 000000,
    country:"India"
  }
}

console.log(user)
// console output 
{
  name:"Deepak Negi",
  email:"st.deepak15@gmail.com",
  address:{
    line1:"ABC, Tower X",
    city:"New Delhi",
    state:"Delhi",
    zipcode: 000000,
    country:"India"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally!!&lt;br&gt;
&lt;a href="https://i.giphy.com/media/l0Iyl55kTeh71nTXy/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0Iyl55kTeh71nTXy/giphy.gif" width="480" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know in the comment what do you think the best way for deep cloning the object.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
