<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Good Reasons Web Development Is Not For You</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 17 May 2021 05:11:26 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/5-good-reasons-web-development-is-not-for-you-30lm</link>
      <guid>https://dev.to/ubahthebuilder/5-good-reasons-web-development-is-not-for-you-30lm</guid>
      <description>&lt;p&gt;Web development is a highly sought after skill in this day and age, but that doesn't mean it's for everyone.&lt;/p&gt;

&lt;p&gt;Some of your behaviours and habits may detract from your prospects of becoming a successful web developer.&lt;/p&gt;

&lt;p&gt;Here are some of the biggest ones&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-unreceptive-to-new-technologies"&gt;
  &lt;/a&gt;
  You are unreceptive to new technologies
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Information doubles every 18 months - Moore's Law&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In web development industry, information doubles everyday üòâ.&lt;/p&gt;

&lt;p&gt;On a serious note, Web Development is a rapidly evolving field. &lt;/p&gt;

&lt;p&gt;Every week new tools enter the ecosystem. New ways of doing things are being put forth. New features are being introduced. New ideas are being suggested. New libraries and frameworks are shipped to add certain functionalities to your application or save lots of time in development.&lt;/p&gt;

&lt;p&gt;Thus, as a contemporary web developer it is imperative you remain open-minded in the adoption and use of these new utilitarian tools. &lt;/p&gt;

&lt;p&gt;Failure to do so will make your knowledge obsolete and you'll be made redundant. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-afraid-of-failing"&gt;
  &lt;/a&gt;
  You Are Afraid of Failing
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Success is not final, failure is not fatal: it is the courage to continue that counts.- Winston Churchill.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A lot of people are afraid of failure. They dread the embarrassment that comes with it. &lt;/p&gt;

&lt;p&gt;But there's another twist to this - You can't improve without making mistakes and failing.&lt;/p&gt;

&lt;p&gt;Why? &lt;strong&gt;Because you learn from your mistakes&lt;/strong&gt;. Their aim is to teach you what works and what doesn't.&lt;/p&gt;

&lt;p&gt;So when you fail at first try, you shouldn't give up. &lt;/p&gt;

&lt;p&gt;Instead rise up, note your mistakes and try again. This time, don't repeat the same mistakes.&lt;/p&gt;

&lt;p&gt;When asked about it his failures, Thomas Edison  said  &lt;strong&gt;"I have not failed. I've just found 10,000 ways that won't work."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You as a web developer should wear that mindset too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-dont-embrace-challenges"&gt;
  &lt;/a&gt;
  You Don't Embrace Challenges
&lt;/h3&gt;

&lt;p&gt;The road to becoming a proficient web developer is anything but smooth. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one&lt;/strong&gt; can boast of not experiencing some challenges in the course of his or her journey.&lt;/p&gt;

&lt;p&gt;There are time you get lost and confused. &lt;/p&gt;

&lt;p&gt;When your code refuses to run and you have no idea why. &lt;/p&gt;

&lt;p&gt;When you unintentionally lose a stable version of your app because you didn't commit with git. &lt;/p&gt;

&lt;p&gt;When you inadvertently update several records in a database. The list of pitfalls goes on.&lt;/p&gt;

&lt;p&gt;This phase in your journey is going to make or break your career. &lt;/p&gt;

&lt;p&gt;If you easily buckle under pressure or give up after certain challenges, then web development might actually not be for you. &lt;/p&gt;

&lt;p&gt;And honestly, I don't think anything worthwhile can be achieved without challenges and struggles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-not-curious-to-learn"&gt;
  &lt;/a&gt;
  You are not curious to learn
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Curiosity is the wick in the candle of learning - William Arthur Ward&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The easiest way to progress as a web developer is by maintaining a curious mindset. Always endeavors to discover new things that you don't already know. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Carry out a deep and extensive study on some topics.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Don't just have facile knowledge of how to write syntax and code. Dig deeper to find out what happens under the hood.&lt;/p&gt;

&lt;p&gt;For example, Don't just know the Syntax rules for writing JavaScript. Strive to understand how the JavaScript interpretes your code and how it prioritizes certain statements over the others.&lt;/p&gt;

&lt;p&gt;You may not need this information, but it'll surely open your mind and broaden your horizons to a whole new world of discoveries and comprehension.&lt;/p&gt;

&lt;p&gt;This mindset has helped me gain a lot of fundamental knowledge about programming. &lt;/p&gt;

&lt;p&gt;Curiousity may have killed the üêà, but it also made it wiser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never be complacent.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-arrogant"&gt;
  &lt;/a&gt;
  You Are Arrogant
&lt;/h3&gt;

&lt;p&gt;Your arrogance can be a huge disservice to your growth as a web developer&lt;/p&gt;

&lt;p&gt;When you maintain a humble demeanor, you open yourself and your mind to the prospect of learning from others and taking advice.&lt;/p&gt;

&lt;p&gt;Learning from others is a great way of getting better at building websites. There are always some other people who are more proficient, smarter or more connected than you are. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay humble.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Connect with other developers. Share your works and ideas with them. Collaborate with them. Seek advice and guidance from the most experienced ones.&lt;/p&gt;

&lt;p&gt;Your life will be much easier. Arrogance will get you nowhere.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now that you have seen all you should avoid, you can get  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React By Sleepless Yogi&lt;/a&gt; to Boost your Web Development Skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you enjoyed this article and want to support, you can buy me my favorite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you and see you soon.&lt;/strong&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>All That You Need To Know About Date And Time In JavaScript</title>
      <author>Kiran Raj R</author>
      <pubDate>Mon, 17 May 2021 05:00:40 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/all-that-you-need-to-know-about-date-and-time-in-javascript-5bfd</link>
      <guid>https://dev.to/kiranrajvjd/all-that-you-need-to-know-about-date-and-time-in-javascript-5bfd</guid>
      <description>&lt;p&gt;In web development there will be many instance in which we need to interact with date/time values, we may need to do various operations on the dates and time values. We cannot provide these values each time to our programs like variables we need to provide it from system where the program is running or from some other resources. The manipulations can be complex as the date/time may contain integer, string and/or symbols in the values, we need complex code to work on the date/time values which will be time consuming and make our code more complex and long. &lt;/p&gt;

&lt;p&gt;In JavaScript the date/time is not a string, it is represented as object, Date object, there is no separate data type for time and date, both time and date are represented using Date object. Date object have some built-in methods to get the time and date part from the object.  &lt;/p&gt;

&lt;p&gt;To get the current date and time we can call the Date constructor without any arguments, the output will be a string representation and we cannot use Date object methods on it. The output will contain current date, time and time zone information in string format. Remember we cannot use Date object methods on strings, the method only work on the Date object type only. To create Date object use the new keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                 
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530 (India Standard Time)   &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;           &lt;span class="c1"&gt;// object &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;       &lt;span class="c1"&gt;// 4&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;strnow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strnow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530 (India Standard Time) &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;strnow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;//string&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strnow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;//Uncaught TypeError: strnow.getMonth is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Date object provides methods to get date/time values and set date/time values, those methods are explained below.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#getter-methods-of-date"&gt;
  &lt;/a&gt;
  Getter Methods of Date()
&lt;/h4&gt;

&lt;p&gt;Getter methods are used to get specific data from the Date Object. Some of the major getter functions are mentioned here.&lt;/p&gt;

&lt;p&gt;1.&lt;code&gt;getTimezoneOffset()&lt;/code&gt; : Returns the current local time zone, the local time zone is represented in +/- change in minutes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;   &lt;span class="c1"&gt;// -330&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2.&lt;code&gt;getDate()&lt;/code&gt; : Returns a integer representing the date (0 to 6), 0 represents Sunday, it cannot be changed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;             &lt;span class="c1"&gt;// 14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;3.&lt;code&gt;getDay()&lt;/code&gt; : Returns the day of the week for the local time(1 to 31).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;              &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;4.&lt;code&gt;getMonth()&lt;/code&gt; : Returns the integer representing the month in the local time, month starts from 0 to 11.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;5.&lt;code&gt;getFullYear()&lt;/code&gt; : Returns the year of the local date, year is represented in 4 digits.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;         &lt;span class="c1"&gt;// 2021&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;6.&lt;code&gt;getHours()&lt;/code&gt; : Returns the current hour of local time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;7.&lt;code&gt;getMinutes()&lt;/code&gt; : Returns the current minutes of the local time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;          &lt;span class="c1"&gt;// 29&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;8.&lt;code&gt;getSeconds()&lt;/code&gt; : Returns the current seconds of local time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;          &lt;span class="c1"&gt;// 44&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;9.&lt;code&gt;getMilliseconds()&lt;/code&gt; : Returns the milliseconds of the local time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;     &lt;span class="c1"&gt;// 251&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;         &lt;span class="c1"&gt;// 2021&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;             &lt;span class="c1"&gt;// 14&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;          &lt;span class="c1"&gt;// 29&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;          &lt;span class="c1"&gt;// 44&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;     &lt;span class="c1"&gt;// 251&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;              &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;   &lt;span class="c1"&gt;// -330&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All the above methods is based on the local time, you can use the UTC variant of the methods to work with UTC based time. Just add UTC after the get, like getUTCDate(), getUTCDay etc. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setter-methods-of-date"&gt;
  &lt;/a&gt;
  Setter methods of Date()
&lt;/h4&gt;

&lt;p&gt;1.&lt;code&gt;setDate()&lt;/code&gt; : Sets the day of the month.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Thu May 20 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2.&lt;code&gt;setMonth()&lt;/code&gt; : Sets the month. You can specify both month and date.&lt;br&gt;
&lt;code&gt;setMonth(month, [date])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)       &lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Tue Dec 14 2021 21:29:51 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;3.&lt;code&gt;setFullYear()&lt;/code&gt; : Sets the year. You can specify date, month and year, date and month are optional.&lt;br&gt;
&lt;code&gt;setFullYear(year, [month], [date])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFullYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2025&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Wed May 14 2025 21:30:20 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;4.&lt;code&gt;setHours()&lt;/code&gt; : Sets the hours. You can specify optional minutes, seconds and milliseconds along with hour. &lt;code&gt;setHours(hour, [min], [sec], [ms])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 23:31:59 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;5.&lt;code&gt;setMinutes()&lt;/code&gt; : Sets the minutes. You can specify seconds and millisecond as optional parameters.&lt;br&gt;
&lt;code&gt;setMinutes(min, [sec], [ms])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:00:58 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;6.&lt;code&gt;setSeconds()&lt;/code&gt; : Sets the seconds. You can also specify millisecond as optional parameter.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:33:00 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;7.&lt;code&gt;setMilliseconds()&lt;/code&gt; : Sets the milliseconds.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMilliseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:34:32 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can convert the string into Date object, the Date object's constructor take the string in different formats. Some examples are given below.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fri, May 14 2021 21:00:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Fri May 14 2021 21:00:00 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fri, May 14 2021 21:00:00 UTC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Sat May 15 2021 02:30:00 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="c1"&gt;// the output is in Indian standard time not in UTC, &lt;/span&gt;
&lt;span class="c1"&gt;// i.e. 5:30 is added to 21:00&lt;/span&gt;
&lt;span class="c1"&gt;// so we get 02:30&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;14 May 2021 21:00:00 UTC+05:30&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:00:00 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:00:00 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="c1"&gt;// Rememnber month starts from zero&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-05-14T21:00:00Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Sat May 15 2021 02:30:00 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The output of the Date object is object, we can convert it into string format, the Date object have built-in methods for that.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;toString()&lt;/code&gt; : Returns the string representation of the Date object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toLocalString()&lt;/code&gt; : Returns the string representation of the Date object in local format.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toTimeString()&lt;/code&gt; : Returns the time part of the Date object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toLocalTimeString()&lt;/code&gt; : Returns the time part of the Date object in the local format.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toDateString()&lt;/code&gt; : Returns the date part of the Date object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toLocalDateString()&lt;/code&gt; : Returns the date part of the Date object in the local format.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// string Fri May 14 2021 21:48:19 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// 5/14/2021, 9:48:19 PM&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// 5/14/2021&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// 21:48:19 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// 9:48:19 PM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/24-html-tags-you-may-not-know-37be" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;24 HTML Tags you may not know.&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R „Éª May 4 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/10-best-javascript-based-github-repos-for-web-developers-49pc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Awesome GitHub Repos For Web Developers &lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R „Éª Apr 26 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/the-ultimate-web-developer-resources-list-200-resources-2gf5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Ultimate Web Developer Resources List üî•Awesome 200+ Resources&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R „Éª May 6 „Éª 21 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/75-awesome-web-resources-that-make-web-development-easy-2pff" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;üî• 75 Awesome Resources For Web Developers üî•&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R „Éª May 14 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Monkeying with circles in CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 17 May 2021 04:59:58 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/monkeying-with-circles-in-css-1hif</link>
      <guid>https://dev.to/alvaromontoro/monkeying-with-circles-in-css-1hif</guid>
      <description>&lt;p&gt;Monkeying around with CSS: a drawing of a monkey done with CSS &lt;strong&gt;using only circles and no HTML elements&lt;/strong&gt; (apart from the body). Demo on &lt;a href="https://codepen.io/alvaromontoro/full/ExWKjBj"&gt;Codepen&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ExWKjBj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Funny thing: on Chrome, for smaller screens, the &lt;code&gt;border-radius&lt;/code&gt; is &lt;em&gt;lost&lt;/em&gt;, and the monkey looks all squared:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TABv73sg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i351ymutkpd6cv60yv3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TABv73sg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i351ymutkpd6cv60yv3i.png" alt="Screenshot of a squared monkey, some parts are not connected correctly"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Learn coding on FreeCodeCamp without internet access</title>
      <author>Richard Barella Jr.</author>
      <pubDate>Mon, 17 May 2021 04:44:26 +0000</pubDate>
      <link>https://dev.to/ribab/learn-coding-on-freecodecamp-without-internet-access-1d6o</link>
      <guid>https://dev.to/ribab/learn-coding-on-freecodecamp-without-internet-access-1d6o</guid>
      <description>&lt;p&gt;Not all of us have the privilege of having access to the internet at all times of the day. Imagine someone who travels to another city to attend a coding bootcamp, where they learn code with the help of &lt;a href="https://www.freecodecamp.org/"&gt;freecodecamp.org&lt;/a&gt;, but when they go home, they can‚Äôt continue to learn on their own because they don‚Äôt have access to the internet at their home. Imagine also another person who struggles to learn to code on their own during the 4 hours every day when the internet happens to be working. This is the reality for many who aspire to learn how to code.&lt;/p&gt;

&lt;p&gt;In this guide, I will show you how to run &lt;a href="https://www.freecodecamp.org"&gt;freecodecamp.org&lt;/a&gt; offline, so you can complete coding certifications completely without internet access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-get-started"&gt;
  &lt;/a&gt;
  Before you get started
&lt;/h2&gt;

&lt;p&gt;You will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A computer&lt;/li&gt;
&lt;li&gt;Temporary internet access for downloading FreeCodeCamp and its dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FreeCodeCamp takes approximately 45 minutes to set up and install.&lt;/p&gt;

&lt;p&gt;I will be providing instructions for both Windows 10. At the beginning of each step, I link to the installation instructions on other systems. If you have any questions, let me know in the comments below this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-installing-mongodb-on-windows"&gt;
  &lt;/a&gt;
  Step 1: Installing MongoDB on Windows
&lt;/h2&gt;

&lt;p&gt;Below are the instructions for installing MongoDB on Windows 10. For other systems, &lt;a href="https://docs.mongodb.com/manual/installation/"&gt;click here for all the tutorials on installing MongoDB on each platform&lt;/a&gt;. Otherwise, continue below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Go to &lt;a href="https://www.mongodb.com/try/download/community"&gt;https://www.mongodb.com/try/download/community&lt;/a&gt; and select the platform "Windows" and the package-type "msi". The version I installed was 4.0.24. Your screen should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKAC1arg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxanz6bvj8isggwi3jfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKAC1arg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxanz6bvj8isggwi3jfc.png" alt="MongoDB step 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; After clicking "Download", locate the newly downloaded &lt;code&gt;.msi&lt;/code&gt; file and double click it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; When you get to this page, ensure all the features are selected, and that "Server" is configured to install on the local hard drive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aVlyYFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy6bhh7bo07i18mpouxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aVlyYFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy6bhh7bo07i18mpouxe.png" alt="MongoDB step 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; After clicking &lt;code&gt;Next &amp;gt;&lt;/code&gt;, you'll be brought to this page. Make sure "Install MongoDB as a service" is unselected. You don't need MongoDB running as a service all the time since it uses memory. Instead, we will only start it before running FreeCodeCamp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--26V3X00O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imgwa5259xrs75yp05tw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--26V3X00O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imgwa5259xrs75yp05tw.png" alt="MongoDB step 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Now click through until the end of the installation instructions, and wait for MongoDB to install.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-installing-npm-and-nodejs-on-windows"&gt;
  &lt;/a&gt;
  Step 2: Installing NPM and Node.js on Windows
&lt;/h2&gt;

&lt;p&gt;Below are instructions for installing NPM and Node.js on Windows. For other systems, &lt;a href="https://nodejs.org/en/download/package-manager/"&gt;click here for instructions on installing with a package manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install NPM on windows, go to &lt;a href="https://nodejs.org/"&gt;nodejs.org&lt;/a&gt; and click the download button to get the &lt;code&gt;.msi&lt;/code&gt;. Double-click the downloaded &lt;code&gt;.msi&lt;/code&gt; and step through the prompts on the Node.js setup wizard.&lt;/p&gt;

&lt;p&gt;Once you get to this page, make sure "install the necessary tools" is checked:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5v3gXbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wod6xtq1lr3h2m4i8m9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5v3gXbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wod6xtq1lr3h2m4i8m9z.png" alt="Node.js Install Instructions for Windows 10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will make sure any dependancies you need are met, and also will provide you with some packages like Chocolately, C, C++, Python, enabling you to make your own projects based on things you learn in FreeCodeCamp.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chocolately is a package manager for windows, which is an easy way to install new packages through &lt;code&gt;choco install package_name&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-3-cloning-freecodecamp"&gt;
  &lt;/a&gt;
  Step 3: Cloning FreeCodeCamp
&lt;/h2&gt;

&lt;p&gt;In this step, for Windows use "Windows Powershell", and for Linux use the terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Navigate to the directory you want to install freeCodeCamp using &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; If you don't have Git installed, install it using your computer's package manager.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; For windows users, since we installed "Chocolately" in the previous step, we can use that to install Git, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;choco &lt;span class="nb"&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Now use Git to clone FreeCodeCamp. &lt;code&gt;depth=1&lt;/code&gt; is used to only download necessary commits which will speed up the download process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &lt;span class="nt"&gt;--depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 https://github.com/freeCodeCamp/freeCodeCamp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-installing-freecodecamp"&gt;
  &lt;/a&gt;
  Step 4: Installing FreeCodeCamp
&lt;/h2&gt;

&lt;p&gt;First, navigate into the newly created directory with &lt;code&gt;cd freeCodeCamp&lt;/code&gt;, and then run this command to start the installation process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm ci
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part takes a while. While you wait for the dependencies to install, continue to &lt;a href="#Step-5-Starting-the-database"&gt;Step 5&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-starting-the-database"&gt;
  &lt;/a&gt;
  Step 5: Starting the database
&lt;/h2&gt;

&lt;p&gt;Open up a new powershell or terminal, and start the MongoDB database service like so:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Linux&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mongod &lt;span class="nt"&gt;--dbpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/freeCodeCamp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For Windows&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"C:&lt;/span&gt;&lt;span class="se"&gt;\P&lt;/span&gt;&lt;span class="s2"&gt;rogram Files&lt;/span&gt;&lt;span class="se"&gt;\M&lt;/span&gt;&lt;span class="s2"&gt;ongoDB&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;erver&lt;/span&gt;&lt;span class="se"&gt;\3&lt;/span&gt;&lt;span class="s2"&gt;.6&lt;/span&gt;&lt;span class="se"&gt;\b&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="se"&gt;\m&lt;/span&gt;&lt;span class="s2"&gt;ongod.exe"&lt;/span&gt; &lt;span class="nt"&gt;--dbpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/freeCodeCamp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This service will need to be started each time before you can run FreeCodeCamp in the future, so take note of this command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-seed-the-database"&gt;
  &lt;/a&gt;
  Step 6: Seed the database
&lt;/h2&gt;

&lt;p&gt;After Step 4 completes, run this command from the powershell or terminal used in Step 4 to set up the data in the MongoDB database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run seed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You only have to run this command once. The next time you start FreeCodeCamp, the database should already be initialized.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-start-freecodecamp"&gt;
  &lt;/a&gt;
  Step 7: Start FreeCodeCamp
&lt;/h2&gt;

&lt;p&gt;In the same powershell or terminal from Step 6, run this command to start FreeCodeCamp:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first time you run this command, it will take a while to complete due to building and installing FreeCodeCamp. Once you see this line, this means the command finished and FreeCodeCamp is ready for you to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;success Building development bundle - 303.218s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see from the output above, it took 5 minutes to run this command for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-8-open-freecodecamp-in-the-browser"&gt;
  &lt;/a&gt;
  Step 8: Open FreeCodeCamp in the browser
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Open up your web browser and navigate to &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Click "Get started now, it's free!"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Now you will see "Welcome back, Development User."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; You are now signed in as a development user, and can now access all the courses without the internet. Any progress you make will be saved in the MongoDB instance you started in &lt;a href="#Step-5-Starting-the-database"&gt;Step 5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next time you want to start FreeCodeCamp, you can do so without internet by following both &lt;a href="#Step-5-Starting-the-database"&gt;Step 5&lt;/a&gt; and &lt;a href="#Step-8-Open-FreeCodeCamp-in-the-browser"&gt;Step 8&lt;/a&gt; in two different powershells or terminals.&lt;/p&gt;

&lt;p&gt;Have fun learning!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reposted from &lt;a href="https://www.codingwithricky.com/2021/05/15/freecodecamp-offline/"&gt;https://www.codingwithricky.com/2021/05/15/freecodecamp-offline/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This guide is based off of FreeCodeCamp's instructions for setting up a development environment for contributing to FreeCodeCamp's source code. If you want to contribute to development, more details can be found &lt;a href="https://github.com/freeCodeCamp/freeCodeCamp/blob/main/docs/how-to-setup-freecodecamp-locally.md"&gt;at this link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Dunning Kruger Effect and Imposter Syndrome</title>
      <author>Apoorv Tyagi</author>
      <pubDate>Mon, 17 May 2021 04:41:05 +0000</pubDate>
      <link>https://dev.to/apoorvtyagi/dunning-kruger-effect-and-imposter-syndrome-53kg</link>
      <guid>https://dev.to/apoorvtyagi/dunning-kruger-effect-and-imposter-syndrome-53kg</guid>
      <description>&lt;p&gt;This article has been in my drafts for a long time but I never clicked that Publish button as I was skeptical whether people would connect with these kinds of topics on my blog or not. But because now this thought is constantly juggling in my head, So here it goes!&lt;/p&gt;

&lt;p&gt;Software Development is one of those fields that is fast-paced, and always in flux. It‚Äôs what makes the field so challenging, interesting, and fun all at the same time.&lt;/p&gt;

&lt;p&gt;But that also means that you will constantly keep coming across the stuff you don‚Äôt know. And even the stuff that you use to think you know but actually you don‚Äôt, which is why a lot of us face the situation like the imposter syndrome and the Dunning Kruger effect (a lot!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#imposter-syndrome"&gt;
  &lt;/a&gt;
  Imposter Syndrome
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVy7URLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075167452/fKsgeQHhM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVy7URLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075167452/fKsgeQHhM.png" alt="0\_G6AwV-9UJkDNEQLz.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those unfamiliar with the term &lt;em&gt;imposter syndrome&lt;/em&gt;, It is when a person starts to doubt their own capabilities &amp;amp; accomplishments and believes that they are a fraud and have succeeded only through luck and soon people will realize they don't know what they are talking about.&lt;/p&gt;

&lt;p&gt;It is when someone is being too hard on themselves and not giving themselves the credit for what they deserve and achieved. Instead, the achieving individuals believe that they have been only lucky in their achievements and they haven't done anything major to achieve it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-it-good-or-bad"&gt;
  &lt;/a&gt;
  Is it good or bad?
&lt;/h3&gt;

&lt;p&gt;I think the imposter syndrome is both good and bad.&lt;/p&gt;

&lt;p&gt;It's bad because this can become a cause of anxiety and unhappiness in someone's life, who by all means should be proud of their work and accomplishments.&lt;/p&gt;

&lt;p&gt;Furthermore, I think why so many software developers face imposter syndrome is because -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Measuring all the work&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whatever solution you come up with, it‚Äôs very easy to measure the ‚Äúefficiency‚Äù of that solutions. And no one would feel proud if another developer came in and improved the code by 500% in a just few days where you have spent perhaps weeks or months.&lt;/p&gt;

&lt;p&gt;This leads to the thinking that they're not qualified enough and all that they have achieved is solely through luck.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Global Competition&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From online coding contests to interviewing to raising PRs for open-source to full-fledged industry-level product development. The software industry is very big and growing very fast, so the competition is inevitable and global ‚Äì it‚Äôs not limited by physical/geographic distance.&lt;/p&gt;

&lt;p&gt;And that is just another reason to not feel comfortable at all times.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Forgetting the difficulty of things&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the process of comparing, or working alongside highly capable developers, it's very easy to lose track of the high quality of work that‚Äôs going around. But I think it's OK to feel mediocre as long as you know you‚Äôre learning, growing, and contributing back to the community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dunningkruger-effect"&gt;
  &lt;/a&gt;
  Dunning-Kruger effect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G40UWnEu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075191288/a6iICpvu4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G40UWnEu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075191288/a6iICpvu4.jpeg" alt="Dunning-Kruger.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Dunning-Kruger effect is a cognitive bias stating the relationship between an individual‚Äôs perceived knowledge of the subject matter and its ACTUAL knowledge.&lt;/p&gt;

&lt;p&gt;In 1999, Dunning and Kruger conducted a study: &lt;em&gt;Unskilled and Unaware of It: How difficulties in Recognizing One's Incompetence Lead to Inflated Self-Assessments&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The result of their study found that those who are incompetent tend to overestimate their abilities, while those who are competent underestimate them&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you observe the above graph you‚Äôll see that beginners or less experienced devs are mostly under the impression that they are familiar with all that exists in their field and they're Pro.&lt;/p&gt;

&lt;p&gt;In the simpler way of interpreting the graph, we can say, &lt;strong&gt;The inexperienced do not know what they do not know.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-why-does-it-happen"&gt;
  &lt;/a&gt;
  But WHY does it happen?
&lt;/h3&gt;

&lt;p&gt;It happens because the experienced developers, or those on the track to becoming experienced, know how vast the field of software development is. They know what they don‚Äôt understand.&lt;/p&gt;

&lt;p&gt;Can you see how this can cause an imposter syndrome to come up?&lt;/p&gt;

&lt;p&gt;By knowing this effect in addition to being aware of imposter syndrome, we can handle imposter syndrome better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-imposter-syndrome"&gt;
  &lt;/a&gt;
  Managing Imposter Syndrome
&lt;/h2&gt;

&lt;p&gt;In general, I believe the following tips help to handle imposter syndrome while understanding the Dunning Kruger Effect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make a list of your accomplishments&lt;/strong&gt;&lt;br&gt;
Track your achievements. All of them. It doesn't matter how big or small it is. When something good happens, just make a note of it with a description of the effort you took to achieve it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Understand the bell curve&lt;/strong&gt;&lt;br&gt;
The bell curves depict that most of us are indeed average, so by learning a bit more each day or week you gradually move towards the right part of the graph. And that's what we should aim for as well. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qmmqD3DM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075731288/LW2G0RVSI.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qmmqD3DM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075731288/LW2G0RVSI.jpeg" alt="bell.jpg"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Peer Pairing&lt;/strong&gt;&lt;br&gt;
Making a  ‚Äúpeer pair‚Äù with someone who is going through the same situation as what you‚Äôre going through. It can be helpful as you'll be able to discuss both your success and failures with them. There‚Äôs a lot of fellow beginners out there in the developer community and everyone is a newbie in something. So, you can easily find someone with whom you can share your learnings.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from these suggestions, I also &lt;strong&gt;believe the most important part in preventing imposter syndrome comes from focusing on becoming a life-long learner&lt;/strong&gt;. Take some time to yourself each day to read about new developments in your field, train on a technology you haven't yet used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pick something and practice it, regularly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Dunning Kruger Effect shows that the more you know, the more you feel like you don't - accept and prosper from this. If you ever feel like you don't know anything, just remember &lt;strong&gt;It actually means progress, It means growth, It means you still have areas where you can grow and learn&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Enjoyed what you read?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You can show some love by buying me a coffee‚òï&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/apoorvtyagi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PD28--a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>mentalhealth</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Futurise | Worlds largest student Discord server</title>
      <author>Harshith-Technology</author>
      <pubDate>Mon, 17 May 2021 04:08:56 +0000</pubDate>
      <link>https://dev.to/harshith/futurise-worlds-largest-student-discord-server-255d</link>
      <guid>https://dev.to/harshith/futurise-worlds-largest-student-discord-server-255d</guid>
      <description>&lt;p&gt;I have joined the larges community of students and wanted to share with you , its a best Discord students server ,a place to find like minded people , free cources, opportunities etc . &lt;br&gt;
Can join it by &lt;br&gt;
Bit.ly/Futurise&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>startup</category>
      <category>futurise</category>
      <category>discord</category>
    </item>
    <item>
      <title>Build a Weather Application using GraphQL and Chakra UI</title>
      <author>Georgey</author>
      <pubDate>Mon, 17 May 2021 04:00:55 +0000</pubDate>
      <link>https://dev.to/geobrodas/build-a-weather-application-using-graphql-and-chakra-ui-4j6o</link>
      <guid>https://dev.to/geobrodas/build-a-weather-application-using-graphql-and-chakra-ui-4j6o</guid>
      <description>&lt;p&gt;I was using RestAPI architecture initially and life was going good but turns out, GraphQL is much more popular than I thought. &lt;/p&gt;

&lt;p&gt;I then went on a quest to determine why GraphQL was so much preferred over RestAPI. &lt;/p&gt;

&lt;p&gt;My findings proved to be resourceful, and I was surprised to see the results. &lt;/p&gt;

&lt;p&gt;Let's say you're on a project, using RestAPI. You want to fetch some data. The data that comes from the endpoint is a JSON object over which we have no control, to choose which data to be received by the front-end. What you finally get is maybe a long JSON response. &lt;/p&gt;

&lt;p&gt;Now let's see what happens when you use GraphQL.&lt;br&gt;
You get a JSON response back in the same way, but it looks like I can choose over a range of parameters available, and select the data only which is required to be displayed in the application.&lt;/p&gt;

&lt;p&gt;In this way, your application is bound to perform much better and the response you receive is fast and selective.&lt;/p&gt;

&lt;p&gt;After this, I was eager to learn GraphQL, and what's better than to make a project on it.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw"&gt;Web Dev Simplified&lt;/a&gt; a project which includes handling any API and manipulating it on your front-end is a must-have on your resume.&lt;/p&gt;

&lt;p&gt;I thought, why not make a Weather application, since I didn't make any yet. &lt;/p&gt;

&lt;p&gt;Let's make use of &lt;a href="https://graphql-weather-api.herokuapp.com/"&gt;this&lt;/a&gt; GraphQL weather API for the project.&lt;/p&gt;

&lt;p&gt;We'll be using ChakraUI on the front-end. So if you have not worked with ChakraUI before, this tutorial will be perfect to get started!&lt;/p&gt;

&lt;p&gt;Here are the steps we'll be going through in this tutorial&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Explore the PlayGround and set the parameters.&lt;/li&gt;
&lt;li&gt;Setting up front-end with ChakraUI&lt;/li&gt;
&lt;li&gt;Handling requests&lt;/li&gt;
&lt;li&gt;Using the response to display on the front-end.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#5-using-chakraui-to-show-a-loading-state-and-enable-dark-mode"&gt;
  &lt;/a&gt;
  5. Using ChakraUI to show a loading state and enable Dark Mode 
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Resources to build the project &lt;br&gt;&lt;br&gt;
GitHub repo - &lt;a href="https://github.com/GeoBrodas/graphql-weatherapp"&gt;https://github.com/GeoBrodas/graphql-weatherapp&lt;/a&gt; &lt;br&gt;&lt;br&gt;
Live Link - &lt;a href="https://graphqlweather.netlify.app/"&gt;https://graphqlweather.netlify.app/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ED_5ii90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621153148168/r7EHK2KMQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ED_5ii90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621153148168/r7EHK2KMQ.jpeg" alt="appss.JPG"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#explore-the-playground-and-set-the-parameters"&gt;
  &lt;/a&gt;
  Explore the PlayGround and set the parameters
&lt;/h2&gt;

&lt;p&gt;Head over to the &lt;a href="https://graphql-weather-api.herokuapp.com/"&gt;Weather API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You'll see an interactive playground in action.&lt;/p&gt;

&lt;p&gt;What you see is a query that contains a bunch of parameters. Now if you run the query, you'll see a response, with resultant data for each parameter that was entered.&lt;/p&gt;

&lt;p&gt;Now what we want is very concise. The parameters that I will be using are &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;weather&lt;/code&gt;, &lt;code&gt;temperature&lt;/code&gt;, and &lt;code&gt;wind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The query now after modifying should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query {
  getCityByName(name: &amp;lt;Your_City&amp;gt;) {
    name
    weather {
      summary {
        title
        description
      }
      temperature {
        actual
        feelsLike
      }
      wind {
        speed
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In place of &lt;code&gt;Your_City&lt;/code&gt;, enter your city or any of your choice. &lt;/p&gt;

&lt;p&gt;Still, we won't be using all the data, but for now, go ahead and run the query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-frontend-with-chakraui"&gt;
  &lt;/a&gt;
  Setting up front-end with ChakraUI
&lt;/h2&gt;

&lt;p&gt;Let's now set up the front-end with Chakra UI&lt;/p&gt;

&lt;p&gt;First Install Chakra UI using npm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now set up the provider in the root file - &lt;code&gt;src/index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import ReactDOM from 'react-dom'
import { ChakraProvider, ColorModeScript } from '@chakra-ui/react'
import App from './components/App'

ReactDOM.render(
  &amp;lt;ChakraProvider&amp;gt;
    &amp;lt;ColorModeScript initialColorMode="light" /&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/ChakraProvider&amp;gt;,
  document.getElementById('root')
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ColorModeScript&lt;/code&gt; is a component for tracking the &lt;code&gt;light&lt;/code&gt; and &lt;code&gt;dark&lt;/code&gt; mode, which we will be enabling towards the end. &lt;/p&gt;

&lt;p&gt;Let's now make a new component called &lt;code&gt;Dashboard.js&lt;/code&gt; in the &lt;code&gt;src/components&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;First, let's make an Icon button for toggling the &lt;code&gt;dark&lt;/code&gt; mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { VStack, IconButton } from '@chakra-ui/react'

export default function Dashboard ( ) {
return (
  &amp;lt;VSack&amp;gt;
    &amp;lt;IconButton
        aria-label="Toggle Dark Mode"
        m="8"
        size="md"
        alignSelf="flex-end"
      /&amp;gt;
  &amp;lt;/VStack&amp;gt;
)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now prepare the Heading and Input fields&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react'
import {
  Input,
  VStack,
  HStack,
  IconButton,
  Heading
} from '@chakra-ui/react'
import { FiSearch } from 'react-icons/fi'

export default function Dashboard ( ) {

  const [result, setResult] = useState('')
  const [value, setValue] = useState('')

 return (
&amp;lt;VStack&amp;gt;
      &amp;lt;IconButton
        aria-label="Toggle Dark Mode"
        m="8"
        size="md"
        alignSelf="flex-end"
      /&amp;gt;
      &amp;lt;Heading mb="8" size="xl"&amp;gt;
        Search your city
      &amp;lt;/Heading&amp;gt;
      &amp;lt;HStack&amp;gt;
        &amp;lt;Input
          type="text"
          placeholder="Enter city name"
          value={result}
          onChange={(event) =&amp;gt; setResult(event.target.value)}
        /&amp;gt;
        &amp;lt;IconButton
          aria-label="Search city button"
          icon={&amp;lt;FiSearch /&amp;gt;}
          onClick={() =&amp;gt; {
            setValue(result)
            getWeather()
            //Errormessage()
          }}
        &amp;gt;
          Search
        &amp;lt;/IconButton&amp;gt;
      &amp;lt;/HStack&amp;gt;
&amp;lt;/VStack&amp;gt;
)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now done with the input fields. Go ahead and console log the data from the input fields to check whether the states are behaving the way they should be. If you run into any errors, don't forget to check the GitHub repo I have shared.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-requests"&gt;
  &lt;/a&gt;
  Handling requests
&lt;/h2&gt;

&lt;p&gt;To interact with the API, we need to install some packages to set up GraphQL in the app itself.&lt;/p&gt;

&lt;p&gt;Install the following packages,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install graphql @apollo/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like how we wrapped &lt;code&gt;ChakraProvider&lt;/code&gt; around our &lt;code&gt;App&lt;/code&gt; component, we need to do the same for our App to handle graphQL requests.&lt;/p&gt;

&lt;p&gt;Make the following changes in your &lt;code&gt;App.js&lt;/code&gt; file inside the &lt;code&gt;src/components&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'
import Dashboard from './Dashboard'

export default function App() {
  const client = new ApolloClient({
    cache: new InMemoryCache(),
    uri: 'https://graphql-weather-api.herokuapp.com/',
  })

  return (
    &amp;lt;ApolloProvider client={client}&amp;gt;
      &amp;lt;Dashboard /&amp;gt;
    &amp;lt;/ApolloProvider&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are defining a constant, and initializing the Apollo client by feeding in 2 parameters- &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;uri&lt;/code&gt;. Parameter &lt;code&gt;uri&lt;/code&gt; is the default API end-point we are using here, and &lt;code&gt;cache&lt;/code&gt; makes sure that the app doesn't send unnecessary requests for the same data.&lt;/p&gt;

&lt;p&gt;Now let's create a new file say &lt;code&gt;Queries.js&lt;/code&gt;. I will create this in a separate directory &lt;code&gt;src/components/graphql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The file will contain the query, which we had earlier created in the playground.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { gql } from '@apollo/client'

export const GET_WEATHER_QUERY = gql`
  query getCityByName($name: String!) {
    getCityByName(name: $name) {
      name
      country
      weather {
        summary {
          title
          description
        }
        temperature {
          actual
          feelsLike
        }
        wind {
          speed
        }
      }
    }
  }
`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For passing in the name of the city, we'll pass it through &lt;code&gt;$name&lt;/code&gt;, passed through the input field.&lt;/p&gt;

&lt;p&gt;If you have worked with MongoDB schemas, this notation will be much more familiar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To know more about GraphQL schema types visit the documentation at&lt;br&gt;
&lt;a href="https://graphql.org/learn/schema/"&gt;https://graphql.org/learn/schema/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's make a request to the API endpoint and log the response.&lt;/p&gt;

&lt;p&gt;Head over to the &lt;code&gt;Dashboard.js&lt;/code&gt; file and make the following changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useLazyQuery } from '@apollo/client'
import { GET_WEATHER_QUERY } from '../graphql/Queries'

export default function Dashboard ( ) {
  const [getWeather, { loading, data, error }] = useLazyQuery(
    GET_WEATHER_QUERY,
    {
      variables: { name: value },
    }
  )

// Search button for input field
&amp;lt;IconButton
    aria-label="Search city button"
    icon={&amp;lt;FiSearch /&amp;gt;}
    onClick={() =&amp;gt; {
      setValue(result)
      getWeather()
      }}
 &amp;gt;
    Search
&amp;lt;/IconButton&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the button is clicked, two events get triggered. One is the setValue() state we defined earlier and getWeather( ) function upon which the request is sent and in turn, the response is fetched and stored in the &lt;code&gt;data&lt;/code&gt; variable. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; state is passed to the &lt;code&gt;name&lt;/code&gt; property which we defined earlier in the &lt;code&gt;src/components/graphql/Queries.js&lt;/code&gt; file.&lt;br&gt;
 Now if you &lt;code&gt;console.log(data)&lt;/code&gt;, you should be able to view the response sent back from the API endpoint.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-the-response-to-display-on-the-frontend"&gt;
  &lt;/a&gt;
  Using the response to display on the front-end
&lt;/h2&gt;

&lt;p&gt;The response we get back from the end-point is an object, which we got hold of previously with the  &lt;code&gt;data&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Now let's display the response to the front-end in form of a sleek table.&lt;/p&gt;

&lt;p&gt;We'll make use of Chakra Ui's &lt;code&gt;Table&lt;/code&gt; component here.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Refer Chakra UI's documentation if you get lost any time &lt;br&gt;&lt;br&gt;
&lt;a href="https://chakra-ui.com/docs/data-display/table"&gt;https://chakra-ui.com/docs/data-display/table&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Import the following components&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  Stack,
  Table,
  Tbody,
  Tr,
  Td,
  TableCaption,
  StackDivider,
  HStack,
  Divider,
} from '@chakra-ui/react'

// Dashboard component
&amp;lt;Stack&amp;gt;
        &amp;lt;Divider mt="4" mb="4" borderColor="gray.100" /&amp;gt;
        {data &amp;amp;&amp;amp; (
          &amp;lt;&amp;gt;
            &amp;lt;VStack
              divider={&amp;lt;StackDivider /&amp;gt;}
              borderColor="gray.100"
              borderWidth="2px"
              p="4"
              borderRadius="lg"
              w="100%"
              maxW={{ base: '90vw', sm: '80vw', lg: '50vw', xl: '40vw' }}
              alignItems="stretch"
            &amp;gt;
              &amp;lt;Table variant="simple"&amp;gt;
                &amp;lt;TableCaption&amp;gt;
                  Weather in {data.getCityByName.name} right now
                &amp;lt;/TableCaption&amp;gt;

                &amp;lt;Tbody&amp;gt;
                  &amp;lt;Tr&amp;gt;
                    &amp;lt;Td&amp;gt;Temperature&amp;lt;/Td&amp;gt;

                    &amp;lt;Td textAlign="right"&amp;gt;
                      {Math.floor(
                        data.getCityByName.weather.temperature.actual - 273
                      ) + ' '}
                      Deg C
                    &amp;lt;/Td&amp;gt;
                  &amp;lt;/Tr&amp;gt;
                  &amp;lt;Tr&amp;gt;
                    &amp;lt;Td&amp;gt;Feels like&amp;lt;/Td&amp;gt;
                    &amp;lt;Td textAlign="right"&amp;gt;
                      {data.getCityByName.weather.summary.description}
                    &amp;lt;/Td&amp;gt;
                  &amp;lt;/Tr&amp;gt;
                  &amp;lt;Tr&amp;gt;
                    &amp;lt;Td&amp;gt;Wind speed (mph)&amp;lt;/Td&amp;gt;

                    &amp;lt;Td textAlign="right"&amp;gt;
                      {data.getCityByName.weather.wind.speed + ' '}
                    &amp;lt;/Td&amp;gt;
                  &amp;lt;/Tr&amp;gt;
                &amp;lt;/Tbody&amp;gt;
              &amp;lt;/Table&amp;gt;
            &amp;lt;/VStack&amp;gt;
          &amp;lt;/&amp;gt;
        )}
      &amp;lt;/Stack&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's similar to the HTML tables we used to do back in the old days. But most importantly we can get hold of the data coming back from the response. &lt;/p&gt;

&lt;p&gt;Here, if you have noticed, I have converted the kelvin unit which was by default coming back from the response, to celsius using the formula - &lt;code&gt;temperature in kelvin - 273 = Temperature in celsius&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;I would suggest reading the Chakra UI documentation for more clarity on Chakra Ui &lt;code&gt;Table&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Your final output should look something like this - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaHHao7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621163884128/SIedpPpy8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaHHao7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621163884128/SIedpPpy8.jpeg" alt="result-3-fix.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-chakraui-to-show-a-loading-state-and-enable-dark-mode"&gt;
  &lt;/a&gt;
  Using ChakraUI to show a loading state and enable Dark Mode
&lt;/h2&gt;

&lt;p&gt;While writing the logic for getting requests from the GraphQL server, we had destructured a variable called &lt;code&gt;loading&lt;/code&gt;. This state can be used to determine whether the process of retrieving the request is under process or not.&lt;/p&gt;

&lt;p&gt;We can make use of Chakra UI's &lt;code&gt;spinner&lt;/code&gt; component here.&lt;/p&gt;

&lt;p&gt;The logic for displaying the spinner would be as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { spinner } from "@chakra-ui/react" 
// Dashboard.js component
&amp;lt;Stack&amp;gt;
        {loading &amp;amp;&amp;amp; (
          &amp;lt;&amp;gt;
            &amp;lt;Spinner
              thickness="4px"
              speed="0.65s"
              emptyColor="gray.200"
              color="blue.500"
              size="xl"
            /&amp;gt;
          &amp;lt;/&amp;gt;
        )}
&amp;lt;/Stack&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;and operator&lt;/code&gt; will ensure that the spinner component will only get displayed if the loading state is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lJg5b5Sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621174464648/GxNOB0GaQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lJg5b5Sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621174464648/GxNOB0GaQ.gif" alt="Hnet.com-image.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's now enable dark-mode in our app!&lt;/p&gt;

&lt;p&gt;Head over to the &lt;code&gt;Dashboard.js&lt;/code&gt; file and make the toggle button for dark mode functional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useColorMode } from "@chakra-ui/react
// for the icon to change on toggle - 
// if light: show Moon Icon else show Sun Icon
import { FiMoon, FiSun } from 'react-icons/fi'

const { colorMode, toggleColorMode } = useColorMode()

// toggle button for dark/light mode
&amp;lt;IconButton
        aria-label="Toggle Dark Mode"
        icon={colorMode === 'light' ? &amp;lt;FiMoon /&amp;gt; : &amp;lt;FiSun /&amp;gt;}
        m="8"
        size="md"
        alignSelf="flex-end"
        onClick={toggleColorMode}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now, when the user clicks on the button, &lt;code&gt;toggleColorMode&lt;/code&gt; is triggered. In turn, changes the &lt;code&gt;colorMode&lt;/code&gt; state, hence changes the icon based on light / dark, which is implemented using the ternary operator.&lt;/p&gt;

&lt;p&gt;Well, congrats on that great hustle! You have a Weather application ready at your disposal.&lt;/p&gt;

&lt;p&gt;Make sure you add it to your resume!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for Readingüéâ
&lt;/h2&gt;

&lt;p&gt;It's great to see that you have enjoyed the article. Now let's not do the same thing. Try to add some of your own features to the app, and make it unique from the rest. Make sure you tag me on &lt;a href="https://twitter.com/BrodasGeo"&gt;Twitter&lt;/a&gt; if you have built this application. &lt;/p&gt;

&lt;p&gt;On to another blog, some other day, till then adiosüëã. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support meüôå
&lt;/h1&gt;

&lt;p&gt;My constant source of energy is coffee! If you feel I deserve one,&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/geobrodas"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vu9xrqH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dgeobrodas%26button_colour%3DFF5F5F%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>showdev</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>Getting started with HTML Forms</title>
      <author>Patricia C.</author>
      <pubDate>Mon, 17 May 2021 03:59:07 +0000</pubDate>
      <link>https://dev.to/chica25/getting-started-with-html-forms-1jfl</link>
      <guid>https://dev.to/chica25/getting-started-with-html-forms-1jfl</guid>
      <description>&lt;p&gt;When I first started my coding journey, one of the things that I‚Äôve noticed is that forms are everywhere, and it‚Äôs useful to get in the habit of creating forms, whether you‚Äôre a frontend or backend engineer.&lt;/p&gt;

&lt;p&gt;Here are several steps to create a simple login form with HTML and CSS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-with-the-html-file"&gt;
  &lt;/a&gt;
  Start with the HTML file
&lt;/h3&gt;

&lt;p&gt;Inside the body tag, enter a div tag with a class name, then the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
   &amp;lt;meta charset="UTF-8"&amp;gt;
   &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
   &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
   &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
   &amp;lt;title&amp;gt;Form&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
   &amp;lt;div class="container"&amp;gt;
       &amp;lt;h2&amp;gt;Login&amp;lt;/h2&amp;gt;
        &amp;lt;form&amp;gt;
        &amp;lt;/form&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the form tag, implement the inputs for the email and password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form&amp;gt; 
&amp;lt;input type="email" class="input-box" placeholder="enter your email" required&amp;gt;
      &amp;lt;input type="password" class="input-box" placeholder="enter your password" required&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;Create a universal selector with a 0 margin and padding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
   margin: 0;
   padding: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter the class attribute, &lt;strong&gt;&lt;em&gt;.container&lt;/em&gt;&lt;/strong&gt; as shown in the code below with the additional properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
   width: 100%;
   height: 100vh;
   font-family: sans-serif;
   background: rgb(255, 255, 255);
   color: #fff;
   display: flex;
   align-items: center;
   justify-content: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you have it. &lt;/p&gt;

&lt;p&gt;Photo by Andrea Piacquadio from Pexels&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How to Build a Jamstack Blog with Next.js &amp; Ghost CMS</title>
      <author>Sam Tanoak Sycamore</author>
      <pubDate>Mon, 17 May 2021 03:56:17 +0000</pubDate>
      <link>https://dev.to/tanoaksam/how-to-build-a-jamstack-blog-with-next-js-ghost-cms-h6c</link>
      <guid>https://dev.to/tanoaksam/how-to-build-a-jamstack-blog-with-next-js-ghost-cms-h6c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-purpose-of-this-guide-is-to-get-you-up-and-running-as-quickly-as-possible-with-a-robust-jamstack-blog-thats-ready-to-grow-with-you"&gt;
  &lt;/a&gt;
  The purpose of this guide is to get you up and running as quickly as possible with a robust Jamstack blog that's ready to grow with you.
&lt;/h3&gt;

&lt;p&gt;Our final product will be skeletal and austere but fully functional.&lt;/p&gt;

&lt;p&gt;No time for a detailed walkthrough? Just wanna skim the source code? &lt;/p&gt;

&lt;p&gt;You can grab the final product we'll be building over on my &lt;a href="https://github.com/samuelsycamore/van-gogh"&gt;GitHub&lt;/a&gt;. Have fun!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-the-van-gogh-stack"&gt;
  &lt;/a&gt;
  Introducing the Van Gogh Stack
&lt;/h2&gt;

&lt;p&gt;OK I'll admit it's silly, but I needed a catchy name so hear me out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;V&lt;/strong&gt;ercel + &lt;strong&gt;N&lt;/strong&gt;ext.js + &lt;strong&gt;G&lt;/strong&gt;host CMS + &lt;strong&gt;H&lt;/strong&gt;eroku = &lt;strong&gt;VNGH&lt;/strong&gt; &lt;em&gt;(read: "Van Gogh")&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The Van Gogh Stack&lt;/strong&gt; is one of my favorite combos for quickly constructing Jamstack sites. &lt;/p&gt;

&lt;p&gt;It uses Ghost as a headless CMS deployed on Heroku, which is then plugged into a Next.js front end hosted on Vercel.&lt;/p&gt;

&lt;p&gt;It is 100% free to host and deploy, but note that Heroku will want credit card info, as you will see.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This guide assumes that you've already been convinced that the Jamstack is the coolest! &lt;/p&gt;

&lt;p&gt;If not, check out my article &lt;em&gt;&lt;a href="https://dev.to/tanoaksam/a-clueless-newbie-s-guide-to-headless-cms-and-the-jamstack-2h86"&gt;A Clueless Newbie's Guide to Headless CMS &amp;amp; the Jamstack&lt;/a&gt;&lt;/em&gt; and its companion piece, &lt;em&gt;&lt;a href="https://www.takeshape.io/articles/what-happens-when-your-jamstack-blog-grows-up/"&gt;What Happens When Your Jamstack Blog Grows Up?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You should be familiar with JavaScript, React, and how to work with REST APIs. &lt;/p&gt;

&lt;p&gt;Experience with Next.js or a similar framework would be helpful, but if this is your first Next.js project you will come out on the other side with a nice playground for learning and tinkering.&lt;/p&gt;

&lt;p&gt;You don't need prior experience with Ghost, but it will make more sense if you've worked with other content management systems (especially headless) before.&lt;/p&gt;

&lt;p&gt;You need to know enough about git to push code to GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-to-know-our-stack"&gt;
  &lt;/a&gt;
  Getting to Know Our Stack
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ghost-cms"&gt;
  &lt;/a&gt;
  Ghost CMS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4sLWrs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621036654451/uq7MpLWm0.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4sLWrs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621036654451/uq7MpLWm0.webp" alt="ghost-4.webp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/TryGhost/Ghost"&gt;Ghost&lt;/a&gt; is one of the most popular headless CMS options out there today. Version 4 was released in March 2021. The most recent version as I'm writing this is &lt;strong&gt;4.5.0.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I like Ghost because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it's built with Node.js&lt;/li&gt;
&lt;li&gt;it's open-source and free to use as a developer&lt;/li&gt;
&lt;li&gt;it has a great UI that's easy to configure and hand off to clients&lt;/li&gt;
&lt;li&gt;as a self-hosted CMS, I don't have to worry about price increases or breaking changes to the API - which can happen with &lt;em&gt;CaaS&lt;/em&gt; ("Content as a Service") providers who host your content for you&lt;/li&gt;
&lt;li&gt;it could not be easier to deploy on Heroku - one click is all we need!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, Ghost ships with server-side rendered templates built using the &lt;a href="https://handlebarsjs.com/"&gt;Handlebars templating language&lt;/a&gt;. If you're in a rush to start publishing and that sounds cool to you, then you honestly don't even need to worry about most of this tutorial! Just deploy your Ghost blog to Heroku, pick a template and you're ready to roll.&lt;/p&gt;

&lt;p&gt;Handlebars is cool in its own right, but we want to be able to harness the full power of React via Next.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0MBa3NV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621037049313/lBsNVwt0Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0MBa3NV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621037049313/lBsNVwt0Z.png" alt="next-js.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; is quickly becoming the most popular React-based framework for production.&lt;/p&gt;

&lt;p&gt;Some of the things that make Next especially cool include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hybrid client-side and server-side rendering&lt;/li&gt;
&lt;li&gt;intuitive file-system-based routing&lt;/li&gt;
&lt;li&gt;the ability to spin up an API endpoint without a (traditional) back-end&lt;/li&gt;
&lt;li&gt;and so much more that I continue to learn with each new project!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next.js was created by &lt;a href="https://www.vercel.com"&gt;Vercel&lt;/a&gt;, which offers Jamstack-oriented hosting solutions. &lt;a href="https://nextjs.org/blog/next-10"&gt;Version 10&lt;/a&gt; was released in October 2020; the most recent version as I'm writing this is &lt;a href="https://nextjs.org/blog/next-10-2"&gt;&lt;strong&gt;10.2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-heroku"&gt;
  &lt;/a&gt;
  Set Up Heroku
&lt;/h2&gt;

&lt;p&gt;To get started, set up an account with &lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As soon as you're in, go ahead and click this beautiful button here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://heroku.com/deploy?template=https://github.com/thelovekesh/ghost-v4-on-heroku"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7I1hI-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621039660578/gLDl7nfID.png" alt="deploy-to-heroku.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(This deployment button was made possible by &lt;a href="https://github.com/thelovekesh/ghost-v4-on-heroku"&gt;Lovekesh Kumar&lt;/a&gt;. Thank you, Lovekesh Kumar!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The deployment button will direct you to a page that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPp4vIlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621035284939/lD-l7YADZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPp4vIlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621035284939/lD-l7YADZ.png" alt="deploy-ghost-v4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose a name for your app - this won't be especially important, so don't worry if you can't get the exact name you'd like.&lt;/p&gt;

&lt;p&gt;As you scroll down the page, you will be presented with many configuration variables. The only one you need to fill out is the  &lt;strong&gt;APP_PUBLIC_URL&lt;/strong&gt; as seen here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2LjmdrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621035687816/V3XMddihG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2LjmdrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621035687816/V3XMddihG.png" alt="app-public-url.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This URL determines the future domain of your CMS. Change &lt;code&gt;YOURAPPNAME&lt;/code&gt; to whatever you like in &lt;code&gt;https://YOURAPPNAME.herokuapp.com&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Don't be fooled by the word PUBLIC there - you will eventually make this URL private.&lt;/p&gt;

&lt;p&gt;Once you've filled out these two fields, scroll to the bottom of the page and click &lt;strong&gt;Deploy app&lt;/strong&gt;. It may take a few minutes while Heroku builds the CMS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: if this is your first Heroku app, you will be asked to provide credit card information. I don't love it either, but their free tier is generous enough that you may not ever need to scale up to a paid plan even if you're seeing pretty significant traffic - that's part of the magic of the Jamstack.&lt;/p&gt;

&lt;p&gt;And if you ever &lt;em&gt;do&lt;/em&gt; need to scale up, &lt;a href="https://ghost.org/docs/faq/clustering-sharding-multi-server/"&gt;Ghost's documentation&lt;/a&gt; recommends adding a content delivery network (CDN) into your stack rather than upgrading your CMS hosting (which should not be necessary). CDN integration is beyond the scope of this guide; just know that it is an option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once the build is complete, you're pretty much done with the H in VNGH. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VM_HQfPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621038520212/4zl0MTZYb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VM_HQfPd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621038520212/4zl0MTZYb.png" alt="heroku-success.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One down, three to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-ghost"&gt;
  &lt;/a&gt;
  Configure Ghost
&lt;/h2&gt;

&lt;p&gt;Now you can navigate to &lt;code&gt;https://YOURAPPNAME.herokuapp.com/ghost&lt;/code&gt; to get your CMS up and running.&lt;/p&gt;

&lt;p&gt;The first time you visit this page, you will be prompted to complete the installation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tN65E7GG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040101546/Qi2WJ1pDD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tN65E7GG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040101546/Qi2WJ1pDD.png" alt="welcome-ghost.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you've registered, you'll land on your shiny new Ghost CMS admin panel when visiting this same URL. It will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6OcF2G9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040187890/n_Jotj-51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6OcF2G9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040187890/n_Jotj-51.png" alt="ghost-dashboard.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As mentioned before, Ghost comes pre-packaged with &lt;a href="https://handlebarsjs.com/"&gt;Handlebars templates&lt;/a&gt; to render your posts on the server. But since you are planning to go headless, it really doesn't matter what the server-side template looks like, because you won't actually be serving that up to your visitors. Don't worry about the design here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The basic installation includes a set of dummy posts that will save us the trouble of making our own to test our connection to Next.js, once we get there. We will return to the Ghost admin panel at the very end to delete all of these in one click.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-cms-to-private"&gt;
  &lt;/a&gt;
  Set CMS to Private
&lt;/h3&gt;

&lt;p&gt;Click on the cog in the bottom left corner of the admin panel to open up Settings. Click on &lt;strong&gt;General.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--goV5iXVJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040880093/xnh8SUtRO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goV5iXVJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040880093/xnh8SUtRO.png" alt="ghost-settings.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll to the bottom of this page, where you will find &lt;code&gt;Advanced Settings&lt;/code&gt;. Next to "Make this site private", set the toggle to the 'on' position.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev-Nq42l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621041120417/RvzkGSSyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev-Nq42l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621041120417/RvzkGSSyo.png" alt="make-private.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will automatically generate a private RSS feed for you. Don't worry about this part.&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save settings&lt;/code&gt; in the top right corner.&lt;/p&gt;

&lt;p&gt;Note: Setting your CMS to private will not have any effect on the visibility of your future front end - since we are using Ghost as a headless CMS, these settings only apply to the Heroku app where the CMS lives. Making the CMS private ensures that Google won't get it mixed up with your &lt;em&gt;canonical&lt;/em&gt; front end and start sending people to the back end of your site instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-custom-integration-for-api-key"&gt;
  &lt;/a&gt;
  Add Custom Integration for API Key
&lt;/h3&gt;

&lt;p&gt;In order for Ghost to communicate with your Next.js front end (coming soon!), you will need to be able to access its API.&lt;/p&gt;

&lt;p&gt;Back on the admin panel, click on &lt;strong&gt;Integrations&lt;/strong&gt; and scroll down to the bottom of the page. Click on the &lt;code&gt;+ Add custom integration&lt;/code&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5VC20Fe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621041622725/4nTteQtRF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5VC20Fe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621041622725/4nTteQtRF.png" alt="integrations.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give the integration any name you want. After you submit a name, you'll be given three important bits of information - but you really only need to worry about two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Content API Key&lt;/strong&gt; - you will pass this string to Next.js to grab content from your CMS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API URL&lt;/strong&gt; - you will need this to specify where the content is coming from&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stash this information somewhere safe for now.&lt;/p&gt;

&lt;p&gt;And that's all it takes to configure Ghost. You're halfway there already! Pretty painless so far, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-nextjs-app"&gt;
  &lt;/a&gt;
  Build Next.js App
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;If you encounter any trouble during this stage in development, I would highly recommend referring to the &lt;a href="https://nextjs.org/docs/api-reference/create-next-app"&gt;official Next.js documentation&lt;/a&gt;, which is very thorough and well written. This will be a broad overview that assumes you're already familiar with the key features of Next.js.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-new-project"&gt;
  &lt;/a&gt;
  Create a New Project
&lt;/h3&gt;

&lt;p&gt;Fire up your terminal, &lt;code&gt;cd&lt;/code&gt; to the folder where you want to create a new app, and run one of the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn create next-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Unless explicitly specified via the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 flag,

 ```create-next-app```

 defaults to Yarn.

You will be asked to give the project a name before the necessary packages begin downloading.

After installation is complete, you can `cd` into the new app's folder and run `yarn dev` or `npm run dev` to start up the local development environment at `http://localhost:3000`.

`create-next-app` ships with a default landing page that looks like this:

![next-welcome.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1621044078196/jugo5YAe4m.png)

Yeehaw! We're making good progress now.

Open the Next.js project folder in your IDE and let's do some coding already!

To simplify the process of receiving data from Ghost, install the official [JavaScript Ghost Content API helper](https://ghost.org/docs/content-api/javascript/) by running:



```bash
yarn add @tryghost/content-api
# or
npm install @tryghost/content-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to Ghost's documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The library can be used in any JavaScript project, client or server side and abstracts away all the pain points of working with API data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://ghost.org/docs/content-api/javascript/"&gt;Click here&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-content-data"&gt;
  &lt;/a&gt;
  Accessing Content Data
&lt;/h3&gt;

&lt;p&gt;Create a new folder in the root directory and call it &lt;code&gt;lib&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;lib&lt;/code&gt;, create a new file called &lt;code&gt;functions.js&lt;/code&gt;. This file will hold the functions needed to pull in content data from Ghost.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These files and folders can be named whatever you like, but it's a good idea to keep this&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 file separate from your

 ```pages```

 directory to prevent it from getting mixed in with content as your project grows.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Paste the following code into &lt;code&gt;functions.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/functions.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tryghost/content-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create API instance with site credentials&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GHOST_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GHOST_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This snippet imports the &lt;code&gt;GhostContentAPI&lt;/code&gt; and creates a new instance of it that gets stored in the &lt;code&gt;const&lt;/code&gt; named &lt;code&gt;api&lt;/code&gt;. This is how your Next app knows to talk to your Ghost CMS to get its content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#environment-variables"&gt;
  &lt;/a&gt;
  Environment Variables
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;url&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; refer to your &lt;strong&gt;API URL&lt;/strong&gt; and &lt;strong&gt;API Content URL&lt;/strong&gt; from your Ghost custom integration. To bring these into the project securely, let's add a new file in the root directory called &lt;code&gt;.env.local&lt;/code&gt; - note the leading period in the name.&lt;/p&gt;

&lt;p&gt;This file stores the &lt;em&gt;environment variables&lt;/em&gt; that need to stay secret. If, on the other hand, you were to insert these variables directly into the code, they would be visible to anyone reading your site's source code. This could potentially open up your API to malicious bots that roam the internet looking for exactly this kind of thing to exploit.&lt;/p&gt;

&lt;p&gt;Environment variable support is built in to Next.js. It should be automatically covered by the default&lt;code&gt;.gitignore&lt;/code&gt; file, but it's worth double-checking to make sure you don't accidentally push any &lt;code&gt;.env&lt;/code&gt; files to GitHub.&lt;/p&gt;

&lt;p&gt;When it's time to deploy the front end, you will give these secret keys directly to Vercel so that they never need to be exposed in your code.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;.env.local&lt;/code&gt; add the following snippet - be sure to replace the placeholders with your unique keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .env.local&lt;/span&gt;
&lt;span class="nx"&gt;GHOST_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//YOURAPPNAME.herokuapp.com // Replace with your API URL&lt;/span&gt;
&lt;span class="nx"&gt;GHOST_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;r4nd0mstr1ng0fch4rz&lt;/span&gt; &lt;span class="c1"&gt;// Replace with your Content API Key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you save this file, be sure to kill &amp;amp; restart your dev server running at &lt;code&gt;localhost:3000&lt;/code&gt; so these changes will take effect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-and-display-all-blog-posts"&gt;
  &lt;/a&gt;
  Fetch and Display All Blog Posts
&lt;/h3&gt;

&lt;p&gt;Now that the front end is connected to the CMS, let's create an async function to fetch all posts from Ghost. It will be exported from &lt;code&gt;lib/functions.js&lt;/code&gt; so it can be used anywhere in the app.&lt;/p&gt;

&lt;p&gt;Return to &lt;code&gt;lib/functions.js&lt;/code&gt; and insert this snippet after the &lt;code&gt;const api&lt;/code&gt; declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/functions.js&lt;/span&gt;

&lt;span class="c1"&gt;// Grab all posts from Ghost&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To recap, &lt;code&gt;lib/functions.js&lt;/code&gt; should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/functions.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tryghost/content-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create API instance with site credentials&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GHOST_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GHOST_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;v4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// Grab all posts from Ghost&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;posts.browse()&lt;/code&gt; endpoint accessed by &lt;code&gt;getPosts()&lt;/code&gt; has &lt;a href="https://ghost.org/docs/content-api/javascript/"&gt;many parameters to choose from&lt;/a&gt;, but this boilerplate setup will be sufficient to get started.&lt;/p&gt;

&lt;p&gt;Next, let's give &lt;code&gt;index.js&lt;/code&gt; a makeover so it will display a list of all blog posts.&lt;/p&gt;

&lt;p&gt;Clear out all of the existing starter markup and replace it with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../lib/functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down what this code is doing, in brief:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;import&lt;/code&gt; the &lt;code&gt;getPosts&lt;/code&gt; function you just wrote as well as Next's &lt;code&gt;Link&lt;/code&gt; component&lt;/li&gt;
&lt;li&gt;render a component that receives post data and maps it to a list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getStaticProps()&lt;/code&gt; tells Next to &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation"&gt;generate this page at &lt;em&gt;build time&lt;/em&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;revalidate&lt;/code&gt; allows for &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration"&gt;incremental static regeneration&lt;/a&gt; by enabling Next to regenerate the page 1 second after a request comes in - this is one of the breakthroughs of the Next.js framework that enables it to efficiently add dynamic content to otherwise "static" sites&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now when you visit &lt;code&gt;localhost:3000&lt;/code&gt; you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YchOMLwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621050602834/S2YKuBKx9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YchOMLwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621050602834/S2YKuBKx9.png" alt="blog-posts.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost done! Next.js is now fetching and rendering a list of all blog posts from Ghost - BUT, the links in the list don't actually lead anywhere yet.&lt;/p&gt;

&lt;p&gt;That's because we still need to call in the individual post data from the API, and then tell Next.js how to handle it. Let's do that now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-and-display-each-individual-blog-post"&gt;
  &lt;/a&gt;
  Fetch and Display Each Individual Blog Post
&lt;/h3&gt;

&lt;p&gt;Returning to &lt;code&gt;lib/functions.js&lt;/code&gt;, add the following function below the &lt;code&gt;getPosts()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/functions.js&lt;/span&gt;

&lt;span class="c1"&gt;// Grab each individual post from Ghost&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getSinglePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postSlug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postSlug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Recapping once more, your &lt;code&gt;lib/functions.js&lt;/code&gt; should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// lib/functions.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tryghost/content-api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Create API instance with site credentials&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GhostContentAPI&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GHOST_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GHOST_API_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;v4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Grab all posts from Ghost&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;browse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Grab each individual post from Ghost&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getSinglePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postSlug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postSlug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;getSinglePost&lt;/code&gt; function operates similarly to &lt;code&gt;getPosts&lt;/code&gt; but accesses the &lt;code&gt;posts.read()&lt;/code&gt; API endpoint.&lt;/p&gt;

&lt;p&gt;Moving over to the &lt;code&gt;pages&lt;/code&gt; directory, create a new folder named &lt;code&gt;posts&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Inside of the new &lt;code&gt;posts&lt;/code&gt; folder, create a new file and name it &lt;code&gt;[slug].js&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The brackets in&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 are necessary to tell Next.js to treat this as a **dynamic route**. [Learn more about dynamic routes here](https://nextjs.org/docs/routing/dynamic-routes).
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;Paste the following code into &lt;code&gt;[slug.js]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/posts/[slug].js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getSinglePost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../lib/functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;feature_image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Get the paths we want to create based on posts&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="c1"&gt;// "fallback: false" gives us a 404 if post not found&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Pass the page slug to "getSinglePost()" function&lt;/span&gt;
&lt;span class="c1"&gt;// Which then passes it to "posts.read()" to query the GhostContentAPI&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getSinglePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the final piece of the puzzle to bring full functionality to the blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import &lt;code&gt;getSinglePost&lt;/code&gt; &amp;amp; &lt;code&gt;getPosts&lt;/code&gt; functions from &lt;code&gt;functions.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Render a component that displays a blog post's featured image, title, and HTML content&lt;/li&gt;
&lt;li&gt;Create the slugs based on post data&lt;/li&gt;
&lt;li&gt;Tell &lt;code&gt;getSinglePost&lt;/code&gt; to go get the post that corresponds to the given slug, which then queries the &lt;code&gt;GhostContentAPI&lt;/code&gt; for it&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;A note on&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 - the name is intended to be a reminder that this can be a dangerous way to operate. That said, this is the **preferred** way to render Ghost's content, and there's little risk of cross-site scripting attacks here.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, all of the necessary code is in place locally for Next.js to retrieve blog posts and content from Ghost. If we click on any of the list items we should be taken to the corresponding dummy post.&lt;/p&gt;

&lt;p&gt;Hey! It's a blog!&lt;/p&gt;

&lt;p&gt;If you get hung up at any point while setting up Next.js, make sure that your directory names, slugs, props, and routing all line up correctly. I've tried to keep this demo project as skeletal as possible while still setting you up for an organized environment as you build it out from here.&lt;/p&gt;

&lt;p&gt;We're approaching the finish line now, and the final step is really more like a victory lap after the marathon of setting up Next.js!&lt;/p&gt;

&lt;p&gt;If you haven't yet, set up a new git repo for the project and push the code to GitHub now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-on-vercel"&gt;
  &lt;/a&gt;
  Deploy on Vercel
&lt;/h2&gt;

&lt;p&gt;Now is the time to sign up for an account with &lt;a href="https://www.vercel.com"&gt;Vercel&lt;/a&gt; if you don't have one.&lt;/p&gt;

&lt;p&gt;Once you're in, click on the &lt;strong&gt;New Project&lt;/strong&gt; button on the right side of the dashboard. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvcr5d_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621053861652/FIo5D94eX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvcr5d_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621053861652/FIo5D94eX.png" alt="vercel-dash.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the repo from your GitHub account:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--goalBvJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621054053612/pC9gdserW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goalBvJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621054053612/pC9gdserW.png" alt="import-git.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;Select Vercel Scope&lt;/strong&gt; menu, select your account:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0bLxgEow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621054223841/oBNPs6qqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0bLxgEow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621054223841/oBNPs6qqe.png" alt="vercel-scope.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;Import Project&lt;/strong&gt; menu, expand the Environment Variables dropdown:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LlS__KCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621054413152/g-Gi5zldE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LlS__KCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621054413152/g-Gi5zldE.png" alt="import-project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is where you give Vercel your two secret keys from your &lt;code&gt;.env.local&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If all goes according to plan, your site should build and deploy in no time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lQxfEfnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621054795508/TY-m3UGIu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lQxfEfnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621054795508/TY-m3UGIu.png" alt="success.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations indeed! &lt;/p&gt;

&lt;p&gt;You just launched a fully functional blog using the Van Gogh Stack!&lt;/p&gt;

&lt;p&gt;It's not much to look at just yet - we won't be playing with CSS here - but the sky's the limit!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#epilogue-kill-the-ghost"&gt;
  &lt;/a&gt;
  Epilogue: Kill the Ghost
&lt;/h3&gt;

&lt;p&gt;When you're ready to create your own content and eliminate the dummy posts from Ghost, make your way back to the Ghost CMS admin panel on Heroku, at &lt;code&gt;https://YOURAPPNAME.herokuapp.com/ghost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Navigate to the &lt;strong&gt;Staff&lt;/strong&gt; section in the bottom left corner of the admin panel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wl9JVW5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040480452/7xE9TM-nx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wl9JVW5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040480452/7xE9TM-nx.png" alt="ghost-author.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on 'Ghost' to visit the Author page. &lt;/p&gt;

&lt;p&gt;In the top right corner, click the cog to open up the menu and select 'Delete User':&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPkYH2gQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040628099/VdEtcoHNg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPkYH2gQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621040628099/VdEtcoHNg.png" alt="delete-ghost.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now Ghost's posts are all gone, and you have a blank canvas on which to paint your next masterpiece!&lt;/p&gt;

&lt;p&gt;Happy jamming, Jamstackers!! &lt;/p&gt;

&lt;p&gt;If and when you improve on what I've built here, be sure to &lt;a href="https://github.com/samuelsycamore/van-gogh"&gt;git at me on GitHub&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#if-you-enjoyed-this-piece-and-you-want-to-keep-up-with-my-work-you-can-sign-up-for-my-email-newsletter-through-this-link-i-promise-to-make-every-email-something-you-will-be-excited-to-open"&gt;
  &lt;/a&gt;
  &lt;strong&gt;If you enjoyed this piece and you want to keep up with my work, you can &lt;a href="https://sycamore.design/newsletter"&gt;sign up for my email newsletter through this link&lt;/a&gt;. I promise to make every email something you will be excited to open!&lt;/strong&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>jamstack</category>
      <category>nextjs</category>
      <category>ghost</category>
    </item>
    <item>
      <title>Forever Functional: Memoizing Functions for Performance</title>
      <author>Asayer Tech Blog</author>
      <pubDate>Mon, 17 May 2021 03:54:57 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/forever-functional-memoizing-functions-for-performance-283n</link>
      <guid>https://dev.to/asayerio_techblog/forever-functional-memoizing-functions-for-performance-283n</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.asayer.io/authors/federico-kereki"&gt;Federico Kereki&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hi! Welcome to this "&lt;em&gt;Forever Functional&lt;/em&gt;" series of articles, in which we'll be looking at how to using several Functional Programming patterns and solutions to simplify your JavaScript programming or, as in this particular case, enhance the performance of your code. &lt;/p&gt;

&lt;p&gt;In this first article in the series, we'll consider a performance problem: dealing with slow, long-running functions, and improving them by using memoization, an interesting technique to avoid unnecessary work. We'll first see a simple example with slowness problems, then solve it by hand in a particular way, move on to apply a generic solution, and finish by seeing how some current frameworks also provide memoization to get faster-reacting web pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slowness-an-example"&gt;
  &lt;/a&gt;
  Slowness: an example
&lt;/h2&gt;

&lt;p&gt;Let me show you an easy well-known example of a function with severe performance problems. In agile methodologies, the &lt;a href="https://en.wikipedia.org/wiki/Fibonacci_number"&gt;Fibonacci numbers&lt;/a&gt; (0, 1, 1, 2, 3, 5, 8, 13...) are often used, albeit with minor changes, for &lt;a href="https://www.mountaingoatsoftware.com/blog/why-the-fibonacci-sequence-works-well-for-estimating"&gt;estimating complexity&lt;/a&gt;. This series starts with 0 and 1, and after those two first values, the next are calculated as the sum of the two previous values: 0+1=1, 1+1=2, 1+2=3, 2+3=5, etc. We can then say that &lt;em&gt;fibo&lt;/em&gt;(0)=0, &lt;em&gt;fibo&lt;/em&gt;(1)=1, and for &lt;em&gt;n&lt;/em&gt; greater than 1, &lt;em&gt;fibo&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;)=&lt;em&gt;fibo&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;‚Äë2)+&lt;em&gt;fibo&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;‚Äë1) -- very straightforward! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Trivia: Fibonacci actually stands for "filius Bonacci", or "son of Bonacci". Fibonacci was also famous for having introduced Arabic numbers to Europe, replacing the more cumbersome Roman numerals. His Fibonacci series derives from the solution of a puzzle he posed, related to rabbits that reproduce according to some easy rules!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can directly implement this in JavaScript by using recursion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cm"&gt;/* n &amp;gt; 1 */&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function performs correctly, and everything's fine and dandy... except that the code is quite slow! I timed the function for many values of &lt;em&gt;n&lt;/em&gt;, producing the chart below (which you can find in my &lt;a href="https://www.packtpub.com/product/mastering-javascript-functional-programming-second-edition/9781839213069"&gt;Mastering JavaScript Functional Programming&lt;/a&gt; book). The chart shows exponentially growing times for a simple calculation that should require just a few sums... what gives?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJ7lUvmd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vpoxyl0yk3vl2np8gr7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJ7lUvmd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vpoxyl0yk3vl2np8gr7.png" alt="Chart showing the exponential time required by our recursive Fibonacci function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand the root cause for those delays, let's just map out the calls when calculating &lt;em&gt;fibo&lt;/em&gt;(6). The image below (also from my book) helps see the underlying problem... too many repeated, unnecessary function calls!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8NB4dsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56wpupz9bn60sek37wov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8NB4dsn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56wpupz9bn60sek37wov.png" alt="Diagram showing the many repeated calls needed when calculating *fibo*(6)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can check: there's one call for &lt;code&gt;fibo(6)&lt;/code&gt; --fine!--, one for &lt;code&gt;fibo(5)&lt;/code&gt; --also fine!--, but &lt;code&gt;fibo(4)&lt;/code&gt; gets called twice, &lt;code&gt;fibo(3)&lt;/code&gt; three times, and counts are even worse for the remaining &lt;code&gt;fibo(2)&lt;/code&gt;, &lt;code&gt;fibo(1)&lt;/code&gt;, and &lt;code&gt;fibo(0)&lt;/code&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How many calls are needed to calculate fibo(n)? Naming it calls(n), calls(0)=calls(1)=1 (no recursion needed) and if n&amp;gt;1 calls(n)= 1+calls(n‚Äë2)+calls(n‚Äë1): the call to fibo(n) plus calls for fibo(n‚Äë2) and fibo(n‚Äë1). The sequence goes 1, 1, 3, 5, 9, 15, 25 (the calls for fibo(6); check it out!), 41, 67, 109, etc. These numbers are called &lt;a href="https://en.wikipedia.org/wiki/Leonardonumber"&gt;Leonardo numbers&lt;/a&gt; but the name seems to come from Fibonacci's name (Leonardo Bonacci), not from Leonardo da Vinci's.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, it's clear that our recursive method is wasting lots of time redoing work that had been already done... how can we solve this?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-particular-solution"&gt;
  &lt;/a&gt;
  A particular solution
&lt;/h2&gt;

&lt;p&gt;The kind of problem we are trying to solve is quite frequent; for instance, in &lt;a href="https://en.wikipedia.org/wiki/Dynamic_programming"&gt;Dynamic Programming&lt;/a&gt; (an optimization technique for certain classes of problems) we also get repeated calls (as in our Fibonacci example) that redo previously done work. We can solve the problem of skipping those repeated calls by rewriting parts of our code, making our function more complex, and working with a &lt;a href="https://en.wikipedia.org/wiki/Cache_(computing)"&gt;cache&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;already_calculated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;already_calculated&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;already_calculated&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;already_calculated&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cm"&gt;/* n &amp;gt; 1 */&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;already_calculated&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;already_calculated&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use an object (&lt;code&gt;already_calculated&lt;/code&gt;) as a cache. Whenever a &lt;code&gt;fibo(n)&lt;/code&gt; call is made, we first check if we already did this calculation, testing if n is already in our cache. If that isn't so, we do our work to calculate the needed result, and we place it in the cache. The result is always returned from the cache: &lt;code&gt;return already_calculated[n]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This works (test it out!) and performance is great because if there are any repeated recursive calls, they are summarily dealt with by getting the needed value from the cache. But, there are some not-so-great points about the solution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we had to use a global cache object (&lt;code&gt;already_calculated&lt;/code&gt;), but global variables aren't a good idea in general&lt;/li&gt;
&lt;li&gt;we had to modify the code for our function to use the cache, and changing code may always introduce errors&lt;/li&gt;
&lt;li&gt;our work doesn't scale: if we have to optimize several functions, we'll need more global variables and more code changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea works (we can see that!) but we need a more general solution, optimally not involving the disadvantages listed above: the answer is &lt;a href="https://en.wikipedia.org/wiki/Memoization"&gt;&lt;em&gt;Memoization&lt;/em&gt;&lt;/a&gt;, a functional programming technique.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-first-general-solution"&gt;
  &lt;/a&gt;
  A first general solution
&lt;/h2&gt;

&lt;p&gt;Our problem is finding a way to avoid redoing long, slow calculations, that we have already done before. &lt;em&gt;Memoization&lt;/em&gt; is a generic functional programming technique that you can apply to any &lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure function&lt;/a&gt;, meaning a function without any side effects, which always produces the same result if called with the same arguments. &lt;/p&gt;

&lt;p&gt;Memoizing a function produces a new function that will internally check a cache of previously calculated values, and if the needed result is found there it will be returned without any further work. If the value isn't found in the cache, all required work will be done, but before returning to the caller the result will be stored in the cache (as we did by hand in the previous section) so it will be available for future calls.&lt;/p&gt;

&lt;p&gt;As we don't want to modify our original code, we'll want to write a &lt;code&gt;memoize(...)&lt;/code&gt; function that will take any generic function as an argument, and create a new one, which will work exactly like the original function but using caching to avoid repeated work. We can write such function in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="cm"&gt;/* (1) */&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="cm"&gt;/* (2) */&lt;/span&gt; 
      &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="cm"&gt;/* (3) */&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="cm"&gt;/* (4) */&lt;/span&gt; 
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;memoize(...)&lt;/code&gt; function is a higher-order function, because it receives a function as its parameter, and returns a new function as its result; a common pattern in Functional Programming. What's the returned function like? A &lt;code&gt;cache&lt;/code&gt; map is defined at (1) -and using a JavaScript &lt;code&gt;Map&lt;/code&gt; is more appropriate than using an object as a map- and the &lt;code&gt;cache&lt;/code&gt; variable will be bundled together with the returned function by using a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"&gt;closure&lt;/a&gt;; no need for any global variables here! The new function starts by checking (2) if the cache already has the needed result; if not, we do the calculation (3) and set the result in the cache. In all cases, the returned value (4) comes directly from the cache. Elegant!&lt;/p&gt;

&lt;p&gt;We can test this easily enough; we would write the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this is the same code as before, with the only difference that we enclosed the body of the &lt;code&gt;fibo()&lt;/code&gt; function with a call to &lt;code&gt;memoize()&lt;/code&gt;. If we test this function, no matter what value of &lt;code&gt;n&lt;/code&gt; you try out, performance will be top-notch, and &lt;code&gt;fibo(n)&lt;/code&gt; will be returned at full speed. However, our solution isn't really good enough... what if our original problematic function had expected two or three arguments instead of only one? We need to do better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-truly-generic-solution"&gt;
  &lt;/a&gt;
  A truly generic solution
&lt;/h2&gt;

&lt;p&gt;This is not generic enough; what would we do with functions with two or more parameters? The trick is to transform the arguments of the function into a string that we can use as a key for our map. That's easy to do by using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"&gt;JSON.stringify&lt;/a&gt; and our new version of &lt;code&gt;memoize(...)&lt;/code&gt; would be as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strX&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is generic enough and we can use it for all functions, no matter how many parameters they expect -- it would even work with functions with a variable number of parameters; can you see why? Our memoization function is quite efficient, also, but if you need memoization in your code, you'd do even better by using &lt;a href="https://github.com/caiogondim/fast-memoize.js"&gt;fast-memoize&lt;/a&gt;, which boasts of being the speediest available memoizer; you can read how it was written in &lt;a href="https://community.risingstack.com/the-worlds-fastest-javascript-memoization-library/"&gt;How I wrote the world's fastest JavaScript memoization library&lt;/a&gt; by Caio Gondim.&lt;/p&gt;

&lt;p&gt;We've seen a performance problem, and how we could solve it with specific or generic solutions... but before considering what some common Web UI frameworks provide along the lines of memoization, let's see a possible bug.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-monitoring"&gt;
  &lt;/a&gt;
  Frontend Monitoring
&lt;/h2&gt;

&lt;p&gt;Whether you're seeing performance issues that require a memoization solution or not, &lt;a href="https://asayer.io"&gt;Asayer&lt;/a&gt; is a frontend monitoring tool that replays everything your users do and shows how your web app behaves for every issue. It‚Äôs like having your browser‚Äôs inspector open while looking over your user‚Äôs shoulder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eOYJ0ZFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/d9ddc1e0b6ad4f3f8a322bb0ac8c6a8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eOYJ0ZFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://asayer-content.s3.eu-central-1.amazonaws.com/d9ddc1e0b6ad4f3f8a322bb0ac8c6a8d.png" alt="Asayer Frontend Monitoring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Asayer lets you reproduce issues, aggregate JS errors and monitor your web app‚Äôs performance. Happy debugging, for modern frontend teams - &lt;a href="https://asayer.io/register.html"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-subtle-error"&gt;
  &lt;/a&gt;
  A subtle error!
&lt;/h2&gt;

&lt;p&gt;You may see the code above, and wonder: why didn't I write the following code to avoid modifying the definition for &lt;code&gt;fibo(n)&lt;/code&gt;?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const betterFibo = memoize(fibo);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Therein lies a subtle error, but let's first see it in action! First, I timed some calls to the original, un-memoized &lt;code&gt;fibo()&lt;/code&gt; function. (I wasn't quite careful with the timing, and I didn't take several measurements; you'll see why that wasn't needed.) Times were something like the following -- and note I &lt;em&gt;did&lt;/em&gt; calculate &lt;code&gt;fibo(45)&lt;/code&gt; twice... and it obviously (roughly) produced the same times; surely the load in my computer varied somewhat between experiments, but that's not important.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;th&gt;fibo(n)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;17644 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;17652 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;1602 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;135 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;12 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I repeated the tests with the memoized &lt;code&gt;fibo(n)&lt;/code&gt; function, and they showed the expected big enhancements. The first calculation took only 7 ms, and all the others took just about nothing because all the required values had been previously calculated when finding &lt;code&gt;fibo(45)&lt;/code&gt;. Great, everything as expected!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;th&gt;memoized &lt;br&gt; fibo(n)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;7 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Now I repeated the tests, but using &lt;code&gt;betterFibo(n)&lt;/code&gt;, and unexpected results pop up! The first call takes as long as the original &lt;code&gt;fibo(n)&lt;/code&gt; function? The repeated call to &lt;code&gt;betterFibo(45)&lt;/code&gt; is quite fast, so it's using the cached value... but all the other calls are slow again?&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;th&gt;betterFibo(n)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;17692 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;1749 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;186 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;16 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;1 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;The problem is important and may easily be missed. The key is that &lt;code&gt;betterFibo(n)&lt;/code&gt; internally is calling the original &lt;code&gt;fibo(n)&lt;/code&gt; function, and not the memoized one. The result for &lt;code&gt;betterFibo(45)&lt;/code&gt; does get cached (and thus the optimized 2nd row in our table) but all the other calls to &lt;code&gt;fibo(n)&lt;/code&gt; aren't cached, and performance is logically as bad as earlier. &lt;/p&gt;

&lt;p&gt;What &lt;em&gt;would&lt;/em&gt; have worked is writing something like this - but note that we didn't use &lt;code&gt;const&lt;/code&gt; in the definition for &lt;code&gt;fibo(n)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cm"&gt;/* n &amp;gt; 1 */&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;fibo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fibo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other way that would have worked would be defining &lt;code&gt;fibo(n)&lt;/code&gt; in the classical way, without using an arrow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fibo2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cm"&gt;/* n &amp;gt; 1 */&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fibo2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibo2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;fibo2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fibo2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;fibo2(n)&lt;/code&gt; function performs perfectly well, because in JavaScript you may reassign a function. However, if you are using &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; you'll get an objection, because reassigning functions is often a source of bugs, and the &lt;a href="https://eslint.org/docs/rules/no-func-assign"&gt;&lt;code&gt;no-func-assign&lt;/code&gt;&lt;/a&gt; rule prohibits it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memoizing-or-caching"&gt;
  &lt;/a&gt;
  Memoizing or caching?
&lt;/h2&gt;

&lt;p&gt;You must be careful when reading about "caching" or "memoizing" in the documentation for frameworks such as &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; or &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; because it doesn't mean what you would think it does. For instance, in Vue you have &lt;a href="https://vuejs.org/v2/guide/computed.html"&gt;computed properties&lt;/a&gt; and their documentation says that "&lt;em&gt;computed properties are cached based on their reactive dependencies [and] will only re-evaluate when some of its reactive dependencies have changed.&lt;/em&gt;" Similarly, the documentation for &lt;a href="https://vuex.vuejs.org/guide/getters.html#property-style-access"&gt;getters for computed values&lt;/a&gt; in &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; mentions that "&lt;em&gt;a getter's result is cached based on its dependencies, and will only re-evaluate when some of its dependencies have changed&lt;/em&gt;". These two references don't imply memoizing: only that Vue is smart enough not to redo the calculation for a computed value if none of its dependencies have changed: if a computed value depends on attributes X, Y, and Z, Vue won't recalculate the computed value unless X, Y, or Z changes; meanwhile, it will cache the previously computed value.&lt;/p&gt;

&lt;p&gt;A similar problem is present in React. The &lt;a href="https://reactjs.org/docs/hooks-reference.html#usememo"&gt;&lt;code&gt;useMemo()&lt;/code&gt;&lt;/a&gt; hook says that it "&lt;em&gt;useMemo will only recompute the memoized value when one of the dependencies has changed&lt;/em&gt;" -- essentially the same thing Vue does, but not actually memoization; it only remembers a single previous calculation. Then again, &lt;a href="https://reactjs.org/docs/hooks-reference.html#usecallback"&gt;&lt;code&gt;useCallback()&lt;/code&gt;&lt;/a&gt; does the same kind of limited caching, and it's clear because &lt;code&gt;useCallback(fn, dependencies)&lt;/code&gt; is equivalent to &lt;code&gt;useMemo(()=&amp;gt;fn, dependencies)&lt;/code&gt;. Finally, &lt;a href="https://reactjs.org/docs/react-api.html#reactmemo"&gt;&lt;code&gt;React.memo(...)&lt;/code&gt;&lt;/a&gt; also does a similarly simplified caching optimization, just avoiding redrawing a component if its props are the same as in the last call -- but it doesn't do memoization in all its glory, just caching one previous result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article we've seen several approaches at memoization, and how using it may speed up your code. However, don't err by thinking that memoization is a "silver bullet" for all speed problems; it may even make your problems worse! Note that memoizing implies two added costs: you need extra cache memory for all the already calculated values, and you need some extra time to check and use the cache itself. If you are working with a function that seldom (if ever) gets called with the same arguments, memoizing won't have any positive impact, and you'd be probably better off by skipping it. As always, you shouldn't do optimization "on instinct"; measure first!&lt;/p&gt;

&lt;p&gt;The solution we've seen here applies to common functions, but what about functions that do some I/O as API calls? You could also consider using memoization for promises, which would not only provide the expected optimizations but also enable other patterns that would produce more responsive code; see you!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>performance</category>
    </item>
    <item>
      <title>Increase your coding speed 10X with Emmet</title>
      <author>David Asaolu</author>
      <pubDate>Mon, 17 May 2021 03:35:27 +0000</pubDate>
      <link>https://dev.to/arshadayvid/increase-your-coding-speed-10x-with-emmet-4839</link>
      <guid>https://dev.to/arshadayvid/increase-your-coding-speed-10x-with-emmet-4839</guid>
      <description>&lt;p&gt;Hi there, welcome to this tutorial. Today, I will be discussing how you can improve your coding speed with a popular plugin called &lt;a href="https://emmet.io/"&gt;Emmet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://emmet.io/"&gt;Emmet&lt;/a&gt; is a plugin for many popular text editors that greatly improve HTML and CSS workflow.&lt;/p&gt;

&lt;p&gt;So let's jump right into how to increase your coding speed with &lt;a href="https://emmet.io/"&gt;Emmet&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-emmet-shortcuts-that-can-increase-your-coding-speed"&gt;
  &lt;/a&gt;
  Different Emmet Shortcuts that can increase your coding speed
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#child-gt"&gt;
  &lt;/a&gt;
  Child &amp;gt;
&lt;/h4&gt;

&lt;p&gt;When you type :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nav&amp;gt;ul&amp;gt;li
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Emmet converts it to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;nav&amp;gt;
    &amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"&amp;gt;" is used when you need to nest elements within one another&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sibling-"&gt;
  &lt;/a&gt;
  Sibling +
&lt;/h4&gt;

&lt;p&gt;When you type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;header+main+footer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Emmets converts it to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;header&amp;gt;&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;
&amp;lt;footer&amp;gt;&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"+" can be used when you need write some elements next to each other&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#multiplication"&gt;
  &lt;/a&gt;
  Multiplication
&lt;/h4&gt;

&lt;p&gt;When you type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ul&amp;gt;li*5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Emmet converts it to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"*" is used when you need some elements to occur more than once.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#item-numbering-"&gt;
  &lt;/a&gt;
  Item numbering: $
&lt;/h4&gt;

&lt;p&gt;When you type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ul&amp;gt;li.item$*5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Emmet converts it to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
    &amp;lt;li class="item1"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="item2"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="item3"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="item4"&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li class="item5"&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When "$" is used, Emmet automatically numbers the elements. Also "." means class, just like in CSS styling.&lt;/p&gt;

&lt;p&gt;Thank you for reading thus far.&lt;br&gt;
Would love to know more about the power of Emmet.&lt;br&gt;
&lt;a href="https://https://docs.emmet.io/cheat-sheet/"&gt;Click Here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>Difference Between Methods and Constructors (Java).</title>
      <author>Keshav Kumar</author>
      <pubDate>Mon, 17 May 2021 02:58:43 +0000</pubDate>
      <link>https://dev.to/keshavcodex/difference-between-method-and-constructor-java-2olf</link>
      <guid>https://dev.to/keshavcodex/difference-between-method-and-constructor-java-2olf</guid>
      <description>&lt;p&gt;When you study first time about constructor it almost feels like this is completely equal to Method but no its not. You might be thinking what is the need to use constructor, we use constructor to initialize some value. when we use ùóΩùóøùó∂ùòÉùóÆùòÅùó≤ ùó∂ùóªùòÅ ùóÆ;&lt;br&gt;
in the class the defalut value of a is 0. But lets say if we want the default value of 'ùóÆ' should be 5 then we can achieve that thorugh costructors.&lt;/p&gt;

&lt;p&gt;now you might be thinking how will we identify which one is Method and which one is constructor, for that you have to see the name of constructor or method if that is equal to the name of class then it is a constructor else its a method.&lt;/p&gt;

&lt;p&gt;also constructor is used to give default value and method is used to do some kind of operations like add();&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
