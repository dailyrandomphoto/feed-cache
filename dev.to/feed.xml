<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>LEMP Stack &amp; Certbot</title>
      <author>skino</author>
      <pubDate>Sat, 20 Nov 2021 14:11:53 +0000</pubDate>
      <link>https://dev.to/skino2020/lemp-stack-certbot-n8k</link>
      <guid>https://dev.to/skino2020/lemp-stack-certbot-n8k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-bit-of-background"&gt;
  &lt;/a&gt;
  A bit of background
&lt;/h2&gt;

&lt;p&gt;Last month i was helping out a friend with some server logs on a &lt;strong&gt;Hetzner Cloud&lt;/strong&gt; Package and was quite impressed with the Hetzner server controls etc... then my buddy told me the price and i was blown away... for cheaper than i was paying he was getting more bang for his buck! so i made the decision to switch servers this month.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nginx-or-apache"&gt;
  &lt;/a&gt;
  Nginx or Apache?
&lt;/h3&gt;

&lt;p&gt;Since i started Web Development i have always used Apache as it was the "go to install" for PHP developers and LAMP was the first i heard to go with.... so stuck with it. On twitter i kept hearing Nginx was a good one to go with, use that... its worth it etc better performance etc.... i don't know how much of it is true but i went with Nginx this time round and so far I'm REALLY liking it. Although Config Syntax is different I'm not finding it difficult to apply the logic from Apache2 stuff to Nginx.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Lets get Started!
&lt;/h3&gt;

&lt;p&gt;I'm going to go through the process i followed in order to install LEMP... i want go through in detail what to do with the commands once they have run but to be honest, the setup is simple enough.&lt;/p&gt;

&lt;p&gt;If your just starting out and need something to help you with the initial Server Setup, Please check out &lt;a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04"&gt;Digital Ocean - Initial Server Setup with Ubuntu 20.04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is a great resource for initial setup !&lt;/p&gt;

&lt;p&gt;LEMP Stack, Basically means &lt;strong&gt;L&lt;/strong&gt;inux, &lt;strong&gt;E&lt;/strong&gt;ngineX, &lt;strong&gt;M&lt;/strong&gt;ySQL &amp;amp; &lt;strong&gt;P&lt;/strong&gt;HP... that's really it. a few things you'll need an understanding of, Basic Linux Command Line tools and how to navigate your Ubuntu installation without issue.&lt;/p&gt;

&lt;p&gt;First things first lets check if the ufw is enabled and if not enable it with the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ufw status
sudo ufw enable
sudo ufw status﻿

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UGWeGl3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/qJVzuBBOqpQ2FJIstj9zCPjoT6mZYBrOFHQSf3zd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UGWeGl3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/qJVzuBBOqpQ2FJIstj9zCPjoT6mZYBrOFHQSf3zd.jpg" alt="" width="552" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's the firewall essentially set up.... dead easy right!&lt;/p&gt;

&lt;p&gt;As with any install of software on Ubuntu Server we start with and update to apt followed by the actual software we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update
sudo apt install nginx

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;You will need to answer Y to any prompts you get from the install.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-nginx-through-the-firewall%EF%BB%BF"&gt;
  &lt;/a&gt;
  Enable Nginx through the firewall﻿
&lt;/h3&gt;

&lt;p&gt;The ufw is a great little tool and is quite literally an "Uncomplicated FireWall" which you can enable and disable rules with text alone... Cool right!&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;sudo ufw app&lt;/code&gt;&lt;code&gt;list&lt;/code&gt; it will display a list of applications that can be enabled and disabled easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bDpv6L9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/BpRlH1lCsGTtfClYW71cabs38Jjl6CMddJ2HJFyI.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDpv6L9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/BpRlH1lCsGTtfClYW71cabs38Jjl6CMddJ2HJFyI.jpg" alt="" width="399" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable a setting is a piece of cake! simply type the following to enable Nginx (with HTTPS Support)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ufw allow 'Nginx Full'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run &lt;code&gt;sudo ufw status&lt;/code&gt; you will get something like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PoCVhJqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/dCbsiOGZHuE9R98Ui73ZxfLachFzttlFHHRPc3KK.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PoCVhJqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/dCbsiOGZHuE9R98Ui73ZxfLachFzttlFHHRPc3KK.jpg" alt="" width="633" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in my screenshot above i was a bit lazy and haven't disabled the HTTP yet which isn't really required with Nginx Full enabled.&lt;/p&gt;

&lt;p&gt;if you go to http://&lt;em&gt;YOUR_SERVER_IP_HERE&lt;/em&gt; in a browser you will now be faced with the below screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bL7m1_p0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/F7xAITFZjvCnnro7u9tN34uooyEq6rTsLhNKVJhQ.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bL7m1_p0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/F7xAITFZjvCnnro7u9tN34uooyEq6rTsLhNKVJhQ.jpg" alt="" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and that's it... Nginx is now ready to serve up static sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mysql-installation"&gt;
  &lt;/a&gt;
  MySQL Installation
&lt;/h3&gt;

&lt;p&gt;If your coming to this tutorial now you will need to &lt;code&gt;sudo apt&lt;/code&gt;&lt;code&gt;update&lt;/code&gt; to get your packages ready, if your following on from before simply run the following to get MySQL server installed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install mysql-server

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select &lt;code&gt;Y&lt;/code&gt; to the next few prompts.&lt;/p&gt;

&lt;p&gt;Now the next bit has caused me a bit of confusion for a while as it asks if you want to enable the "VALIDATE PASSWORD PLUGIN"... i dont know why but every time i selected no to this... my MySQL installation would complete and i wouldn't be able to login.... dont know why, never got to the bottom of it... so i just enable it with low length security for Dev environment and high level for production. Type the following into your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql_secure_installation

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will launch the SQL Installation. I've screenshot the first bit for clarity the rest you can remove or not as needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sGmX4j-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/vfMYvxWifMNbsQtngPsLimKYyt6BidNQSparCFrm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sGmX4j-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/vfMYvxWifMNbsQtngPsLimKYyt6BidNQSparCFrm.jpg" alt="" width="806" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the next few questions i tend to answer Y to them all. as i don't want anonymous users, remote root logins or a test DB and finally we need to reload the privileges table. Now your can login to MySQL with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql -u root 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And thats it for MySQL. You can now create new users and tables etc for use, or if you're feeling really spicy install something like phpmyadmin or create a remote user that can hit the server with MySQL Workbench.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-php"&gt;
  &lt;/a&gt;
  Install PHP
&lt;/h3&gt;

&lt;p&gt;Nginx is slightly different to Apache, which comes with PHP support out of the box, for Nginx there is a few little bits we need to install or we aren't going anywhere. &lt;code&gt;PHP-FPM&lt;/code&gt;and &lt;code&gt;PHP-MYSQL&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install php-fpm php-mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Accept any prompts that come up, and that's it for your LEMP environment, You can find NGNIX configs online which you need to put into your &lt;code&gt;/etc/nginx/sites-available/&lt;/code&gt; i'm going to write a post on the configs themselves at some point as its a big subject.&lt;/p&gt;

&lt;p&gt;for the examples im going to use a mikej directory as the example for the next bit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#certbot"&gt;
  &lt;/a&gt;
  Certbot
&lt;/h3&gt;

&lt;p&gt;Certbot is great as it works for both Nginx and Apache, how i hadnt heard of it before this week il never know. simply head over to &lt;a href="https://certbot.eff.org/lets-encrypt/"&gt;Cerbot Installation page&lt;/a&gt; and pick the OS you're using for installation instructions. in my instance its Ubuntu 20.04. then run the commands from the guide. Mine were:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo snap install --classic certbot
﻿
sudo ln -s /snap/bin/certbot /usr/bin/certbot

sudo certbot --nginx

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the final command will pop up with some questions like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hk3b9_OL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/6xm8UyhvuH0YwfnXEFq71CDDXcuTYZk4oSCoAnRP.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hk3b9_OL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/6xm8UyhvuH0YwfnXEFq71CDDXcuTYZk4oSCoAnRP.jpg" alt="" width="822" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so in the prompt i'm going to type &lt;code&gt;5,6&lt;/code&gt; for &lt;strong&gt;mikej.rocks&lt;/strong&gt; and &lt;strong&gt;&lt;a href="http://www.mikej.rocks"&gt;www.mikej.rocks&lt;/a&gt;&lt;/strong&gt; and hit enter. if your doing more than one site it make take a short while to finish but what its essentially doing is... calling for a new cert from LetsEncrypt and editing your Nginx config file... yep that's right you don't have to do a thing! When it finishes you should see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Spx4R3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/FgOzNX4fIfNvNoGxIUeLFjZqEhMRYLEavQkWJw7M.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Spx4R3P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.raspada-blog.co.uk/storage/wink/images/FgOzNX4fIfNvNoGxIUeLFjZqEhMRYLEavQkWJw7M.jpg" alt="" width="822" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it.... if you visit your site now, it will have an SSL Certificate installed and just work!.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-word"&gt;
  &lt;/a&gt;
  Final word!
&lt;/h3&gt;

&lt;p&gt;If you found this tutorial helpful please consider following me on twitter &lt;a href="https://twitter.com/skino2020"&gt;@skino2020&lt;/a&gt; for more updates on my blog. And if you really found it helpful, why not buy me a Coffee, Beer or Pizza &lt;a href="https://www.buymeacoffee.com/skino2020"&gt;here&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Mike&lt;br&gt;&lt;br&gt; &lt;/p&gt;
&lt;h2&gt;Raspada-Blog&lt;/h2&gt;  I post on my blog primarily and share the posts via API, please check out &lt;a href="//www.raspada-blog.co.uk"&gt;Raspada-Blog&lt;/a&gt; for more posts and information. If you have any questions please message me on twitter or use my website contact form.

</description>
      <category>server</category>
      <category>nginx</category>
      <category>certbot</category>
    </item>
    <item>
      <title>Python FastAPI crash course</title>
      <author>Eric The Coder</author>
      <pubDate>Sat, 20 Nov 2021 14:11:24 +0000</pubDate>
      <link>https://dev.to/ericchapman/python-fastapi-crash-course-533e</link>
      <guid>https://dev.to/ericchapman/python-fastapi-crash-course-533e</guid>
      <description>&lt;p&gt;Here is a crash course (series of articles) that will allow you to create an API in Python with FastAPI.&lt;/p&gt;

&lt;p&gt;I will publish a new article about every two days and little by little you will learn everything there is to know about FastAPI&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-fastapi"&gt;
  &lt;/a&gt;
  What is FastAPI?
&lt;/h3&gt;

&lt;p&gt;FastAPI is a Python web framework that allows you to quickly build high performance APIs.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-fastapi"&gt;
  &lt;/a&gt;
  Why FastAPI?
&lt;/h3&gt;

&lt;p&gt;Before FastAPI there were already several ways to create APIs with Python. Especially with Django Rest Framework and Flask. So why FastAPI?&lt;/p&gt;

&lt;p&gt;Here is the list of the main advantages of FastAPI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very fast: The performance is superior to Django and Flask and is even comparable to the performance of NodeJS and GO&lt;/li&gt;
&lt;li&gt;Fast to code: Build APIs 2-3 times faster&lt;/li&gt;
&lt;li&gt;Easy: Easy to use and learn&lt;/li&gt;
&lt;li&gt;Type annotation (Type hints): Facilitates validation, allows auto-completion and facilitates debugging&lt;/li&gt;
&lt;li&gt;Automatic documentation: FastAPI generates documentation in Swagger UI and ReDoc format automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;p&gt;To start coding with FastAPI you must have a basic programming knowledge with the Python language.&lt;/p&gt;

&lt;p&gt;You should also make sure that you have an updated version of Python (version 3.6 or +)&lt;/p&gt;

&lt;p&gt;From the terminal type this command to find out the version of Python installed on your machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;

or

&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't have Python or a version earlier than 3.6, you can get the latest version of Python from the official website: &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-editor"&gt;
  &lt;/a&gt;
  Code editor
&lt;/h3&gt;

&lt;p&gt;For this tutorial, I'll be using Visual Studio Code: &lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be easier for you to follow me with this editor but it is really not a requirement.&lt;/p&gt;

&lt;p&gt;Finally, if you are using vscode, make sure the Python extension is installed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creation-of-the-virtual-environment"&gt;
  &lt;/a&gt;
  Creation of the virtual environment
&lt;/h2&gt;

&lt;p&gt;When working on a Python project, we have to work with several libraries like FastAPI, Flask or Django, etc.&lt;/p&gt;

&lt;p&gt;According to the date of creation of the project. It is possible for example that the FastAPI library is not exactly at the same version number in the other projects.&lt;/p&gt;

&lt;p&gt;How to allow each project to have its own version of Python and its own versions of libraries?&lt;/p&gt;

&lt;p&gt;We will be using virtual environments.&lt;/p&gt;

&lt;p&gt;A virtual environment allows you to install Python and python libraries in a folder / project without this affecting the other folders / projects.&lt;/p&gt;

&lt;p&gt;Python provides you with a system that allows you to create virtual environments.&lt;/p&gt;

&lt;p&gt;Once the environment has been created and activated, all the libraries installed can be used only in the environment to which they belong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-a-virtual-environment"&gt;
  &lt;/a&gt;
  How to create a virtual environment
&lt;/h3&gt;

&lt;p&gt;Normally we place a virtual environment in the project folder.&lt;/p&gt;

&lt;p&gt;Create and access a folder for our project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;fastapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;fastapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this folder you can now create the virtual environment that will be attached to the project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we launch python3 with the module option venv. env is the name we give to our virtual environment.&lt;/p&gt;

&lt;p&gt;Once the virtual environment has been created, you can activate it:&lt;/p&gt;

&lt;p&gt;MacOS / Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Windows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;cripts&lt;span class="se"&gt;\a&lt;/span&gt;ctivate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it that's all ! You now have a Python virtual environment created for your project. Normally the terminal will tell you that your environment is activated by displaying its name.&lt;/p&gt;

&lt;p&gt;Note that to deactivate the virtual environment you must run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the rest of the tutorial, make sure the virtual environment is enabled before running any commands in the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-fastapi"&gt;
  &lt;/a&gt;
  Installing FastAPI
&lt;/h2&gt;

&lt;p&gt;From the fastapi-tuto folder and with the virtual environment enabled, run the following installation command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;fastapi[all]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will install FastAPI and also install some optional dependencies like local server (uvicorn) to test FastAPi on your machine.&lt;/p&gt;

&lt;p&gt;Once these libraries are installed, you can launch your open code editor on the current folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will launch Visual Studio Code open on the current folder&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reminder-what-is-an-api"&gt;
  &lt;/a&gt;
  Reminder: What is an API?
&lt;/h2&gt;

&lt;p&gt;API stands for Application Programming Interface.&lt;/p&gt;

&lt;p&gt;In short, it is a program that can be used by another program, in order to allow applications to communicate with each other.&lt;/p&gt;

&lt;p&gt;An API allows the server and the client to communicate with each other and to exchange information and data. The data exchanged is in structured text format (JSON).&lt;/p&gt;

&lt;p&gt;The exchanges are made in the form of requests and responses:!&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KI6BAhvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2efhol0cof1mhkerg8xl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KI6BAhvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2efhol0cof1mhkerg8xl.jpg" alt="Alt Text" width="800" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, the browser (client / frontend application) makes a specific request to a server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET www.example.com/products/3814
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can the server know how to handle this request? He can't. He won't know what to do with the request.&lt;/p&gt;

&lt;p&gt;That's why we need to create an API. This is a server application that will determine how to respond to various requests for a specific resource.&lt;/p&gt;

&lt;p&gt;Let's go back to the last example query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET www.example.com/products/3814
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The customer wishes to obtain the information of the product no 3814&lt;/p&gt;

&lt;p&gt;To respond to this request, we could create an API that would search for the 3814 product in a database and return this response to the customer in structured text (JSON) format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3814&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"qty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;799&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#different-type-of-requests"&gt;
  &lt;/a&gt;
  Different type of requests
&lt;/h3&gt;

&lt;p&gt;Note that all requests to servers are made through HTTP actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-the-most-commonly-used-http-actions"&gt;
  &lt;/a&gt;
  Here are the most commonly used HTTP actions
&lt;/h3&gt;

&lt;p&gt;GET: GET requests are only used to retrieve data.&lt;/p&gt;

&lt;p&gt;POST: POST requests are used to send data.&lt;/p&gt;

&lt;p&gt;PUT: PUT requests are used to modify data.&lt;/p&gt;

&lt;p&gt;PATCH: PATCH requests are used to partially modify data.&lt;/p&gt;

&lt;p&gt;DELETE: DELETE requests are used to delete the specified data.&lt;/p&gt;

&lt;p&gt;When we are dealing with a resource. For example Product. Each action on the Product resource has its own route&lt;/p&gt;

&lt;p&gt;Here is an example route for each of the HTTP actions:&lt;/p&gt;

&lt;p&gt;Create : POST www.example.com/&lt;/p&gt;

&lt;p&gt;Read : GET www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;Update : PUT www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;Destroy : DELETE www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;The way to name these routes is no accident, it is in fact a convention that is followed by most developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-first-api"&gt;
  &lt;/a&gt;
  Your first API
&lt;/h2&gt;

&lt;p&gt;The theory is over, now let's see how to create your first API&lt;/p&gt;

&lt;p&gt;From the code editor create a file named: first-api.py&lt;/p&gt;

&lt;p&gt;Enter this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app = FastAPI() allows to create an instance of FastAPI&lt;/p&gt;

&lt;p&gt;The @app.get() decorator allows us to specify the url path and the HTTP (GET) action of our api.&lt;/p&gt;

&lt;p&gt;The index() function will be executed each time a user visits the URL path specified by the @app.get() decorator, in this case the "/home" path&lt;/p&gt;

&lt;p&gt;Note that the name of the "index()" function could be any name. It is according to your preference.&lt;/p&gt;

&lt;p&gt;To start the server and test your first API, enter in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;uvicorn&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;uvicorn is the local server. It takes as parameter the name of the file: the name of the FastAPI instance&lt;/p&gt;

&lt;p&gt;The —reload option will restart the server each time the source file is modified.&lt;/p&gt;

&lt;p&gt;So you can then visit: &lt;a href="http://127.0.0.1:8000/home"&gt;http://127.0.0.1:8000/home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following response will be displayed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well done! You have just created your first API&lt;/p&gt;

&lt;p&gt;Last point. The path you created points to "&lt;a href="http://127.0.0.1:8000/home"&gt;http://127.0.0.1:8000/home&lt;/a&gt;". How to make it point to the "root path" aka "&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;"&lt;/p&gt;

&lt;p&gt;You must only use a back slash "/"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;@app.get(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The back slash used alone means "root path"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>python</category>
      <category>fastapi</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Ditching Linux for WSL 2</title>
      <author>Dev Sharma</author>
      <pubDate>Sat, 20 Nov 2021 14:10:28 +0000</pubDate>
      <link>https://dev.to/cryptus_neoxys/ditching-linux-for-wsl-2-2bl6</link>
      <guid>https://dev.to/cryptus_neoxys/ditching-linux-for-wsl-2-2bl6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#wsl-2-microsofts-love-for-linux"&gt;
  &lt;/a&gt;
  WSL 2 == Microsoft's love for Linux
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#development-on-linux"&gt;
  &lt;/a&gt;
  Development on Linux
&lt;/h2&gt;

&lt;p&gt;I switched to Linux last year and shifted my development completely to the Linux ecosystem. Tried out arch, Manjaro, Pop OS!, Ubuntu, MX Linux. Development is really productive with a Linux environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gaming-on-windows"&gt;
  &lt;/a&gt;
  Gaming on Windows
&lt;/h2&gt;

&lt;p&gt;A few months back I upgraded my &lt;em&gt;potato&lt;/em&gt; to a gaming laptop which of course came with Windows pre-installed, I also started gaming. I ended up doing dual boot to run Ubuntu as my daily driver for development, but this eventually meant a redundant set of tools on Windows as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#windows-linux"&gt;
  &lt;/a&gt;
  Windows 💖 Linux
&lt;/h2&gt;

&lt;p&gt;Windows released the Windows Subsystem for Linux 2 in May 2019. WSL 1 was a compatibility layer for running Linux binary executables on Windows. WSL2 built on top is built on the core technology of Hyper-V to provide better support and improved performance running a Linux kernel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-wsl-2-instead-of-native-windows"&gt;
  &lt;/a&gt;
  Why WSL 2 instead of native Windows
&lt;/h2&gt;

&lt;p&gt;Most production environments run on Linux and with WSL 2 environment the tooling available on development become the same as in production. Also WSL 2 is super easy to set up and get started with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-wsl-2-on-windows"&gt;
  &lt;/a&gt;
  Set up WSL 2 on Windows
&lt;/h2&gt;

&lt;p&gt;Open an elevated Powershell (Run as administrator) from the start menu and use the following commands to get WSL 2 up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NLNYybEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997262601/15-pKC9Sg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NLNYybEk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997262601/15-pKC9Sg.png" alt="image.png" width="833" height="565"&gt;&lt;/a&gt;&lt;br&gt;
(&lt;em&gt;Note that: WSL 2 is only available in Windows 10, Version 1903, Build 18362 or higher&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Step 1 - Enable the Windows Subsystem for Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 2 - Enable the Virtual Machine feature&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pSrpgzxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997360284/rpTUjA7tp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pSrpgzxK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997360284/rpTUjA7tp.png" alt="image.png" width="880" height="196"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;You need to restart your PC after this step.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Step 3 - Download &amp;amp; install the Linux kernel update package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTyHmVBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997461686/pCLXEc5hA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTyHmVBd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997461686/pCLXEc5hA.png" alt="image.png" width="494" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 4 - As a final step set WSL 2 as your default version&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wsl &lt;span class="nt"&gt;--set-default-version&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKymdfsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997519844/YS75xW9gL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKymdfsm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997519844/YS75xW9gL.png" alt="image.png" width="748" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can install your favourite Linux distro from the &lt;a href="https://www.microsoft.com/en-in/search?q=linux"&gt;Microsoft Store&lt;/a&gt;. After the installation completes you'll need to restart and complete the setup of your Distro.&lt;/p&gt;

&lt;p&gt;Enter the username and password for root user and you are good to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---mmDe9Jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997604504/qjTozpTJj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---mmDe9Jy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997604504/qjTozpTJj.png" alt="ubuntuinstall.png" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set your default Linux distro for WSL 2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wsl &lt;span class="nt"&gt;--set-version&lt;/span&gt; &amp;lt;distribution name&amp;gt; &amp;lt;versionNumber&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WA8CyGTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997746604/xhiLRY7Pi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WA8CyGTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620997746604/xhiLRY7Pi.png" alt="image.png" width="711" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎉🎉🎉That's it you have successfully set up WSL 2 and can now begin your journey to become a 10x Developer.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on Twitter &lt;a href="https://twitter.com/cryptus_neoxys"&gt;@cryptus_neoxys&lt;/a&gt; and connect with me on &lt;a href="https://www.linkedin.com/in/cryptus-neoxys/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#refs-amp-resources"&gt;
  &lt;/a&gt;
  Refs &amp;amp; Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Microsoft Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://wiki.ubuntu.com/WSL"&gt;Ubuntu Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/D7Em1wjMiak"&gt;ITProTV -YouTube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>windows</category>
      <category>ubuntu</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to use CKEditor and its plugins with Nuxt.js</title>
      <author>Mohit Sehgal</author>
      <pubDate>Sat, 20 Nov 2021 14:06:04 +0000</pubDate>
      <link>https://dev.to/mohitsehgal/how-to-use-ckeditor-and-its-plugins-with-nuxtjs-1ojm</link>
      <guid>https://dev.to/mohitsehgal/how-to-use-ckeditor-and-its-plugins-with-nuxtjs-1ojm</guid>
      <description>&lt;p&gt;CKEditor is Javascript based rich text editor. It has clean UX loaded with features makes it a no-brainer choice for your next custom Javascript CMS.&lt;br&gt;
It can be tedious to figure out its integration with Vue.js Framework like Nuxt.js&lt;br&gt;
&lt;strong&gt;Let's jump straight to steps.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-nuxt-app"&gt;
  &lt;/a&gt;
  Create Nuxt App
&lt;/h2&gt;

&lt;p&gt;If you already have ongoing project, then you can skip this step. &lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;create-nuxt-app&lt;/code&gt; package using npx.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-nuxt-app ckeditor-nuxt-sample
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Choose options suitable to you, here are my selection for this article.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVxY31kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js6n1916un11r7c1vyxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVxY31kz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js6n1916un11r7c1vyxf.png" alt="Create Nuxt App for integrating CKEditor" width="825" height="484"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-page-where-you-want-to-use-ckeditor"&gt;
  &lt;/a&gt;
  Create Page where you want to use CKEditor
&lt;/h2&gt;

&lt;p&gt;Create file named &lt;code&gt;sample-editor.vue&lt;/code&gt; in &lt;code&gt;pages&lt;/code&gt; directory in your Nuxt project. You can name it the way you want.&lt;/p&gt;

&lt;p&gt;Here is initial code in the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
 &amp;lt;h1&amp;gt;Sample Editor will go on this page.&amp;lt;/h1&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
export default {}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now see this page at &lt;a href="https://localhost:3000/sample-editor"&gt;https://localhost:3000/sample-editor&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-packages"&gt;
  &lt;/a&gt;
  Install Packages
&lt;/h2&gt;

&lt;p&gt;Install these packages for CKEditor and full build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @ckeditor/ckeditor5-vue@23.0.0 --save
npm i @blowstack/ckeditor5-full-free-build@1.0.2 --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initiate-ckeditor-and-its-config"&gt;
  &lt;/a&gt;
  Initiate CKEditor and its config
&lt;/h2&gt;

&lt;p&gt;The second package mentioned above has CKEditor build contains all the free plugins for CKEditor. Thanks to BlowStack.&lt;br&gt;
Initialize CKEditor and Build in script section of your vue component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let FullFreeBuildEditor;
let CKEditor;
if (process.client) {
  FullFreeBuildEditor = require('@blowstack/ckeditor5-full-free-build');
  CKEditor = require('@ckeditor/ckeditor5-vue')
}else {
  CKEditor = { component : {template:'&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;'}}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note-  CKEditor can be used only on the client render and not server render hence &lt;code&gt;process.client&lt;/code&gt; check.&lt;/p&gt;

&lt;p&gt;Now you can register the component provided by this package in components section on your page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;components: {
    ckeditor: CKEditor.component
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next you need to pass FullFreeBuildEditor to editor prop of CKEditor component, so that it knows about which features to render.&lt;/p&gt;

&lt;p&gt;We first initialize &lt;code&gt;editor&lt;/code&gt; property in data section like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data() {
  return {
      editor: FullFreeBuildEditor,
  }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we pass it to ckeditor as a prop. See snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;ckeditor :editor="editor" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this you can see CKEditor like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOoptora--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b6cvgqnvevtcfo2p8ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOoptora--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3b6cvgqnvevtcfo2p8ka.png" alt="Basic CKEditor in Nuxt.js" width="794" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Still this is not complete. &lt;br&gt;
How will you bind it to data property of your component? Use &lt;code&gt;v-model&lt;/code&gt;. Here's how.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;ckeditor :editor="editor" v-model="editorInput" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try to display the output just below the editor using following snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container mt-3"&amp;gt;
  &amp;lt;div class="row"&amp;gt;
    &amp;lt;h2 class="col-md-12"&amp;gt;Output&amp;lt;/h2&amp;gt;
      &amp;lt;div&amp;gt;{{editorInput}}&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU7SAghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1awgn36o55cd7dz9bfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU7SAghO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1awgn36o55cd7dz9bfv.png" alt="Output for CKEditor in Nuxt.js" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to see preview of this output then you can use &lt;code&gt;v-html&lt;/code&gt; directive. Something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="container mt-3"&amp;gt;
  &amp;lt;div class="row"&amp;gt;
    &amp;lt;h2 class="col-md-12"&amp;gt;Preview&amp;lt;/h2&amp;gt;
      &amp;lt;div v-html="editorInput"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#edit-configuration"&gt;
  &lt;/a&gt;
  Edit Configuration
&lt;/h2&gt;

&lt;p&gt;The number of features which CKEditor supports can be overwhelming for your users. You can modify the look and limit the features if you want. For that &lt;code&gt;config&lt;/code&gt; prop of CKEditor comes into picture.&lt;/p&gt;

&lt;p&gt;Add new data property called &lt;code&gt;editorConfig&lt;/code&gt; to your component and add it as a prop to &lt;code&gt;ckeditor&lt;/code&gt; component. See the snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data(){
  // Other properties
  editorConfig: {
    width: 'auto',
    plugins: [
      'Bold',
      'Link',
      'List',
      'FontSize',
    ],
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CKEditor Line changes as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;ckeditor :editor="editor" :config="editorConfig" v-model="editorInput" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above 2 changes tells &lt;code&gt;ckeditor&lt;/code&gt; to only include &lt;code&gt;bold&lt;/code&gt;,&lt;code&gt;link&lt;/code&gt;,&lt;code&gt;list&lt;/code&gt;,&lt;code&gt;fontSize&lt;/code&gt; plugins and hence only these options. Here is the output.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiF0MQyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xultaflt77batcgknq6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiF0MQyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xultaflt77batcgknq6j.png" alt="Simple CKEditor after making config changes" width="798" height="186"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can view full list of plugins &lt;a href="https://www.npmjs.com/package/@blowstack/ckeditor-nuxt"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now you have integrated CKEditor totally within your Nuxt.js project. &lt;br&gt;
You'd now see that your code for page component is little unclean. Let's see how to tackle this.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#refactor-to-separate-component"&gt;
  &lt;/a&gt;
  Refactor to separate component
&lt;/h2&gt;

&lt;p&gt;Now, we'll cleanup some code. Suppose in real world project, you'll need to use this rich editor at multiple pages. Then you should refactor the code into separate component. Let's call it &lt;code&gt;rich-editor&lt;/code&gt;.&lt;br&gt;
For that create &lt;code&gt;rich-editor.vue&lt;/code&gt; inside &lt;code&gt;components&lt;/code&gt; directory. We will encapsulate CKEditor code inside this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro Tip: If you do this refactor step. You can easily replace CKEditor with some other editor if needed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will move editor config to prop of this &lt;code&gt;rich-editor&lt;/code&gt; component. This will allow us to have rich-editor with different configuration and different features at every page where we need it.&lt;/p&gt;

&lt;p&gt;We will also move &lt;code&gt;value&lt;/code&gt; to prop, so that we can pass &lt;code&gt;v-model&lt;/code&gt; on the component and that variable will bind to the input of the rich-editor.&lt;/p&gt;

&lt;p&gt;Here is the code for &lt;code&gt;rich-editor.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;ckeditor
    :editor="editor"
    :value="value"
    :config="config"
    @input="event =&amp;gt; $emit('input', event)"
  /&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
  let FullFreeBuildEditor;
  let CKEditor;
  if (process.client) {
    FullFreeBuildEditor = require('@blowstack/ckeditor5-full-free-build');
    CKEditor = require('@ckeditor/ckeditor5-vue')
  }else {
    CKEditor = { component : {template:'&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;'}}
  }

  export default {
    name: 'ck-editor',
    components: {
      ckeditor: CKEditor.component
    },
    props: {
      value: {
        type: String,
        required: false
      },
      config: {
       type: Object,
       required: false,
       default: function () {}
     }
    },
    data() {
      return {
        editor: FullFreeBuildEditor,
      }
    },
  };
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mathtype-plugins"&gt;
  &lt;/a&gt;
  MathType Plugins
&lt;/h2&gt;

&lt;p&gt;If you want to type Mathematics Equations or Chemistry Equations, then you need this plugin.&lt;br&gt;
You just need to add &lt;code&gt;MathType&lt;/code&gt; to the array of plugins in editor config prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;editorConfig: {
  width: 'auto',
  plugins: [
    'Bold',
    'Link',
    'List',
    'FontSize',
    `MathType`
  ],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all. Allow any complicated maths equations or chemical reactions into your Nuxt app. See Figure below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KyIenDrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57oesehmw8fldmnm1u9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KyIenDrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57oesehmw8fldmnm1u9w.png" alt="CKEditor with MathType plugin in Nuxt.js" width="869" height="717"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#image-plugins"&gt;
  &lt;/a&gt;
  Image Plugins
&lt;/h2&gt;

&lt;p&gt;Image plugin allows you to upload images into your editor but you need to give an REST Endpoint where images will be posted. This endpoint should return URL to the uploaded image. That URL can be used to store and display the image along with other content. Here's what you change in config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//CKEditor Config for Image Upload
editorConfig: {
  width: 'auto', 
  plugins: ['Bold','Link','List','FontSize', `MathType`,`Image`,`ImageUpload`,'SimpleUploadAdapter'],
    simpleUpload: {
       // The URL that the images are uploaded to.
       uploadUrl: 'https://yourwebsite.com/api/upload-image',
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind &lt;code&gt;simpleUpload&lt;/code&gt; and &lt;code&gt;uploadUrl&lt;/code&gt; should be spelled correct in order for this to work. If you are facing any issues with this. Hit me up on DM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#embed-plugin"&gt;
  &lt;/a&gt;
  Embed Plugin
&lt;/h2&gt;

&lt;p&gt;You can embed in video or social media link using &lt;code&gt;MediaEmbed&lt;/code&gt; plugin. Simply push this to plugins array and you have done it. Here is the sample screenshot.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dM4aZVry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0hdd80h4z7xift34mt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dM4aZVry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q0hdd80h4z7xift34mt1.png" alt="CKEditor with Embedded Youtube video in Nuxt.js" width="734" height="614"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We integrated CKEditor with our fresh Nuxt.js project. After that we refactored code and played around with some different useful plugins. This can be difficult to figure out but its very powerful tool to have. Let me know if you face any difficulties in any of the above.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can also check the whole code on &lt;a href="https://github.com/mohitsehgal/ckeditor-nuxt-sample"&gt;this Github repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;br&gt;
Remember, currently this article works for Vue 2 only.&lt;/p&gt;

</description>
      <category>nuxt</category>
      <category>vue</category>
      <category>javascript</category>
      <category>ckeditor</category>
    </item>
    <item>
      <title>Things not to forgot while learning coding as a beginner.</title>
      <author>Asim Shrestha</author>
      <pubDate>Sat, 20 Nov 2021 13:42:52 +0000</pubDate>
      <link>https://dev.to/alex1the1great/things-not-to-forgot-while-learning-coding-as-a-beginner-4l46</link>
      <guid>https://dev.to/alex1the1great/things-not-to-forgot-while-learning-coding-as-a-beginner-4l46</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Taking your first tutorial:&lt;/strong&gt;
Complete the tutorial. Understand everything, shallow understanding is fine while starting. Write code by yourself even it feels tedious. Do not copy &amp;amp; paste.
You do not need to understand exactly how the functions work, but you do need to be able to import and use them correctly.
Don't rush to complete the tutorial. If you feel like skipping any topics from the tutorial, take a break and come back later.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It's ok if you don't understand:&lt;/strong&gt; When learning new things, most of the time you might don't understand the stuff, it's ok. You can look that topics from other sources. To become successful you have to cross the difficulties. Just don't runway from it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code every day:&lt;/strong&gt; To become good at coding you have to code every single day. Even if for just 20 minutes a day. You just have to be consistent.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Add at least 2 new features to the project after completing the tutorial:&lt;/strong&gt;
If you have understood the tutorial it will not be a problem. If you don't have any ideas for the features, you can recreate the same project from scratch.
Following the tutorial, you are not using your brain. So, you have to use your brain by creating projects by yourself.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tutorial Hell&lt;/strong&gt;
When you keep on watching tutorials and not building projects by yourself. So, once you feel like you are in a tutorial hell, then stop watching tutorials and start building projects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build a new project &amp;amp; complete it:&lt;/strong&gt;
Starting a new project is easily but completing is difficult. So, the first thing you have to think of is a project which you are interested in creating. If you are not interested in the project which you are building then you will skip or not complete the project if any difficultly occur during building it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Maintaining the project:&lt;/strong&gt;
If we say building and completing a project is level 1, then maintaining the project is level 2. To become a good developer you should start maintaining your project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Creating big project:&lt;/strong&gt;
When you are done creating 3 or 4 simple projects you can start creating complex projects. For example &lt;strong&gt;simple project 1:&lt;/strong&gt; simple todo app, &lt;strong&gt;simple project 2:&lt;/strong&gt; simple digital clock, etc. &lt;strong&gt;Complex project:&lt;/strong&gt; Todo app with crud functionality,
in next iteration adding reminder functionality, and so on.
Add new features to your project one step at a time. If you keep on adding new features to a simple project, then it will start to grow into a big project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Habit of Figuring out your problems:&lt;/strong&gt; Instead of running away from your challenges, face them. You should ask questions to yourself. How can I solve this problem?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get good at GIT:&lt;/strong&gt; Git is a tool to track or capture the history of your project and help to collaborate with other developers remotely.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Read other people's code:&lt;/strong&gt; Read other people's code whose coding level is the same as yours or a little above your level.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data Structure and Algorithms:&lt;/strong&gt; Have at least a basic understanding of different commonly used algorithms.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Introduction à FastAPI (Python)</title>
      <author> Eric Le Codeur</author>
      <pubDate>Sat, 20 Nov 2021 13:39:37 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/introduction-a-fastapi-python-5mf</link>
      <guid>https://dev.to/ericlecodeur/introduction-a-fastapi-python-5mf</guid>
      <description>&lt;p&gt;Voici une série d'articles qui vous permettra de créer une API en Python avec FastAPI.&lt;/p&gt;

&lt;p&gt;Je vais publier un nouvel article environ au deux jours et petit à petit vous apprendrez tout ce qu'il y a à savoir sur FastAPI&lt;/p&gt;

&lt;p&gt;Pour ne rien manquer suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#questce-que-fastapi-"&gt;
  &lt;/a&gt;
  Qu'est-ce que FastAPI ?
&lt;/h3&gt;

&lt;p&gt;FastAPI est un framework web Python qui permet de créer rapidement des API de haute performance.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pourquoi-fastapi-"&gt;
  &lt;/a&gt;
  Pourquoi FastAPI ?
&lt;/h3&gt;

&lt;p&gt;Avant FastAPI il existait déjà plusieurs façon de créer des API avec Python. Notamment avec Django Rest Framework et Flask. Alors pourquoi FastAPI ?&lt;/p&gt;

&lt;p&gt;Voici la liste des principaux avantages de FastAPI :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Très rapide : La performance est supérieur à Django et Flask et est même comparable aux performances de NodeJS et GO&lt;/li&gt;
&lt;li&gt;Rapide à coder : Créer des API 2 à 3 fois plus rapidement&lt;/li&gt;
&lt;li&gt;Facile : Facile à utiliser et à apprendre&lt;/li&gt;
&lt;li&gt;Annotation de Type (Type hints) : Facilite la validation, permet l'auto-complétion et facilite le debugging&lt;/li&gt;
&lt;li&gt;Documentation automatique : FastAPI génère la documentation en format Swagger UI et ReDoc automatiquement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#prerequis"&gt;
  &lt;/a&gt;
  Pre-requis
&lt;/h2&gt;

&lt;p&gt;Pour commencer à coder avec FastAPI vous devez  avoir une base en programmation avec le language Python.&lt;/p&gt;

&lt;p&gt;Vous devez également vous assurer que vous avez une version à jour de Python (version 3.6 ou +)&lt;/p&gt;

&lt;p&gt;À partir du terminal taper cette commande pour connaitre la version de Python installé sur votre machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;

ou

&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si vous n'avez pas Python ou une version antérieur à 3.6, vous pouvez obtenir la dernière version de Python le site officiel : &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C3%A9diteur-de-code"&gt;
  &lt;/a&gt;
  Éditeur de code
&lt;/h3&gt;

&lt;p&gt;Pour ce tutoriel, je vais utiliser Visual Studio Code : &lt;a href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Il vous sera plus facile de me suivre avec cet éditeur mais ce n'est vraiment pas une obligation. &lt;/p&gt;

&lt;p&gt;Enfin, si vous utilisé vscode, assurez-vous que l'extension Python est bel et bien installé.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cr%C3%A9ation-de-lenvironnement-virtuel"&gt;
  &lt;/a&gt;
  Création de l'environnement virtuel
&lt;/h2&gt;

&lt;p&gt;Lorsque l'on travaille sur un projet Python, on est amené à travailler avec plusieurs librairies comme FastAPI, Flask ou Django, etc.&lt;/p&gt;

&lt;p&gt;Selon la date de création du projet. Il est possible par exemple que la librairie FastAPI  ne soit pas exactement au même no de version dans les autres projets.&lt;/p&gt;

&lt;p&gt;Comment faire pour permettre à chaque projet d'avoir sa propre version de Python et ses propres versions de librairies ?&lt;/p&gt;

&lt;p&gt;Nous allons utiliser les environnements virtuels.&lt;/p&gt;

&lt;p&gt;Un environment virtuel permet d'installer Python et des librairies python dans un dossier/projet sans que cela n'affecte les autres dossiers/projets.&lt;/p&gt;

&lt;p&gt;Python met à votre disposition un système qui permet de créer des environnements virtuels.&lt;/p&gt;

&lt;p&gt;Une fois l'environnement créé et activé, toutes les librairies installées pourront être utilisé seulement dans l'environnement auquel ils appartiennent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comment-cr%C3%A9er-un-environnement-virtuel"&gt;
  &lt;/a&gt;
  Comment créer un environnement virtuel
&lt;/h3&gt;

&lt;p&gt;Normalement nous plaçons un environnement virtuel dans le dossier du projet.&lt;/p&gt;

&lt;p&gt;Créer et accéder à un dossier pour notre projet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;fastapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tuto&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;fastapi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tuto&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;À partir de ce dossier vous pouvez maintenant créer l'environnement virtuel qui sera attaché au projet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ici on lance python3 avec l'option module venv. env est le nom que l'on donne à notre environnement virtuel.&lt;/p&gt;

&lt;p&gt;Une fois l’environnement virtuelle créé vous pouvez l'activer :&lt;/p&gt;

&lt;p&gt;MacOS / Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Windows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;cripts&lt;span class="se"&gt;\a&lt;/span&gt;ctivate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voilà c'est tout ! Vous avez maintenant un environnement virtuel Python créé pour votre projet. Normalement le terminal vous indiquera que votre environnement est activé en affichant son nom.&lt;/p&gt;

&lt;p&gt;À noter que pour désactiver l'environnement virtuel vous devez exécuter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pour  le reste du tutoriel, assurez-vous que l'environnement virtuel est activé avant de lancer toutes commandes dans le terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-de-fastapi"&gt;
  &lt;/a&gt;
  Installation de FastAPI
&lt;/h2&gt;

&lt;p&gt;À partir du dossier fastapi-tuto et avec l'environnement virtuel activé exécuter la commande d'installation suivante :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;fastapi[all]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cette commande va installer FastAPI et également installé certaine dépendances optionnelles comme le serveur local (uvicorn) pour tester FastAPi sur votre machine.&lt;/p&gt;

&lt;p&gt;Une fois ces librairies installées vous pouvez lancer votre éditeur de code ouvert sur le dossier en cours&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cette commande va lancer Visual Studio Code ouvert sur le dossier en cours&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rappel-questce-quun-api%C2%A0"&gt;
  &lt;/a&gt;
  Rappel : Qu'est-ce qu'un API ?
&lt;/h2&gt;

&lt;p&gt;API signifie Interface de programmation d'applications.&lt;/p&gt;

&lt;p&gt;Bref, c'est un programme qui peut être utilisé par un autre programme, afin de permettre aux applications de dialoguer entre elles.&lt;/p&gt;

&lt;p&gt;Une API permet au serveur et au client de communiquer entre eux et d'échanger des information et des données. Les données échangé le sont en format texte structuré (JSON).&lt;/p&gt;

&lt;p&gt;Les échanges se font sous forme de requêtes et réponses :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWHRSeIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxeavm3631cbwdkj6dc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWHRSeIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxeavm3631cbwdkj6dc0.png" alt="Image description" width="800" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Par exemple, le navigateur (client / application frontend) fait une requête spécifique a un serveur :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET www.example.com/products/3814
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le serveur peut-il savoir comment gérer cette requête ? Il ne le peut pas. Il ne saura pas quoi faire de la requête. &lt;/p&gt;

&lt;p&gt;C'est pourquoi nous devons créer une API. Il s'agit d'une application serveur qui déterminera comment répondre aux différentes requêtes concernant une ressource spécifique. &lt;/p&gt;

&lt;p&gt;Reprenons le dernier exemple de requête :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GET www.example.com/products/3814
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le client désire obtenir les informations du produit no 3814&lt;/p&gt;

&lt;p&gt;Pour répondre à cette requête, nous pourrions créer un API qui permettrait de rechercher le produit 3814 dans une base de données et renvoyer cette réponse au client en format texte structuré (JSON)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3814&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"qty"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;799&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#diff%C3%A9rent-type-de-requ%C3%AAtes"&gt;
  &lt;/a&gt;
  Différent type de requêtes
&lt;/h3&gt;

&lt;p&gt;Notez que toutes les requêtes aux serveurs sont effectuées via des actions HTTP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voici-les-actions-http-les-plus-couramment-utilis%C3%A9s"&gt;
  &lt;/a&gt;
  Voici les actions HTTP les plus couramment utilisés
&lt;/h3&gt;

&lt;p&gt;GET : Les requêtes GET sont utilisées que pour récupérer des données.&lt;/p&gt;

&lt;p&gt;POST : Les requêtes POST sont utilisées pour envoyer des données.&lt;/p&gt;

&lt;p&gt;PUT : Les requêtes PUT sont utilisées pour modifier des données.&lt;/p&gt;

&lt;p&gt;PATCH : Les requêtes PATCH sont utilisées pour modifier partiellement des données.&lt;/p&gt;

&lt;p&gt;DELETE : Les requêtes DELETE sont utilisées pour supprimer les données indiquées.&lt;/p&gt;

&lt;p&gt;Lorsque nous traitons avec une ressource. Par exemple Produit. Chaque action sur la ressource Produit a sa propre route&lt;/p&gt;

&lt;p&gt;Voici un exemple de route pour chacune des actions HTTP :&lt;/p&gt;

&lt;p&gt;Create : POST www.example.com/&lt;/p&gt;

&lt;p&gt;Read : GET www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;Update : PUT www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;Destroy : DELETE www.example.com/products/3814&lt;/p&gt;

&lt;p&gt;La façon de nommer ces routes n'est pas un hasard, c'est en faite une convention qui est suivit par la plupart des développeurs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#votre-premier-api"&gt;
  &lt;/a&gt;
  Votre premier API
&lt;/h2&gt;

&lt;p&gt;Fini la théorie, voyons maintenant comment créer votre premier API&lt;/p&gt;

&lt;p&gt;À partir de l'éditeur de code créer un fichier nommé : first-api.py &lt;/p&gt;

&lt;p&gt;Saisir ce code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;app = FastAPI() permet de créer une instance de FastAPI&lt;/p&gt;

&lt;p&gt;Le décorateur @app.get() permet de spécifier le chemin url et l'action HTTP (GET) de notre api. &lt;/p&gt;

&lt;p&gt;La fonction index() sera exécuté chaque fois qu'un utilisateur visitera le chemin URL spécifié par le décorateur @app.get() soit dans ce cas ci le path "/home"&lt;/p&gt;

&lt;p&gt;À noter que le nom de la fonction "index()" pourrait être n'importe quel nom. C'est selon votre préférence.&lt;/p&gt;

&lt;p&gt;Pour lancer le serveur et tester votre premier API, saisir dans le terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;uvicorn&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nb"&gt;reload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;uvicorn est le serveur local. Il prend comme paramètre le nom du fichier:le nom de l'instance FastAPI&lt;/p&gt;

&lt;p&gt;L'option —reload va relancer le serveur à chaque modification du fichier source&lt;/p&gt;

&lt;p&gt;Vous pouvez donc ensuite visiter : &lt;a href="http://127.0.0.1:8000/home"&gt;http://127.0.0.1:8000/home&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La réponse  suivante s'affichera :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello World"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bravo! Vous venez de créer votre premier API&lt;/p&gt;

&lt;p&gt;Dernier point. Le path que vous avez créé pointe sur "&lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt;home". Comment faire pour qu'il pointe sur le "root path" soit "&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;" &lt;/p&gt;

&lt;p&gt;Il faut utiliser seulement un back slash "/"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;@app.get(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le back slash utilisé seul signifie "root path"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui, suivez moi sur twitter : &lt;a href="https://twitter.com/EricLeCodeur"&gt;https://twitter.com/EricLeCodeur&lt;/a&gt; afin d'être avisé de la parution du prochain article (d'ici deux jours).&lt;/p&gt;

</description>
      <category>python</category>
      <category>fastapi</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Let's talk quality - Part 2</title>
      <author>Sociable Steve</author>
      <pubDate>Sat, 20 Nov 2021 13:26:05 +0000</pubDate>
      <link>https://dev.to/sociablesteve/lets-talk-quality-part-2-3h60</link>
      <guid>https://dev.to/sociablesteve/lets-talk-quality-part-2-3h60</guid>
      <description>&lt;p&gt;In my &lt;a href="https://dev.to/sociablesteve/lets-talk-quality-part-1-4ecm"&gt;previous post&lt;/a&gt; I talked about the different aspects of a more fully rounded view of quality beyond the standard code quality. In this post I'll be starting to talk about how to measure quality.&lt;/p&gt;

&lt;p&gt;Each of the three areas I previously defined is a large area in their own right, and so I'm going to talk about only one of those areas in this post; Development Quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-development-quality"&gt;
  &lt;/a&gt;
  What is Development Quality?
&lt;/h2&gt;

&lt;p&gt;As a reminder, development quality is about measuring and understanding the effect of development activities on quality. We won't focus on running software or if it meets the users needs here.&lt;/p&gt;

&lt;p&gt;My general definition here is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Development Quality is about tracking the impact on quality of activities that occur &lt;strong&gt;before&lt;/strong&gt; the system is put into operation, or released to the user&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-does-development-quality-cover"&gt;
  &lt;/a&gt;
  What does Development Quality cover?
&lt;/h2&gt;

&lt;p&gt;Certain aspects of the development quality space is the most understood area of the entire quality space, since it's where engineers have spent most of their time and focus. There is a tendency to focus on what can be measured automatically and often, and getting feedback from the people who this impacts the most gets less focus.&lt;/p&gt;

&lt;p&gt;The list of things to consider here could be endless, but I break it down into a small number of spaces to help manage things. What I consider to be within the realm of Development Quality are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-and-maintaining-code"&gt;
  &lt;/a&gt;
  Writing and Maintaining code
&lt;/h3&gt;

&lt;p&gt;Writing code, and looking after it, is the core of the entire development effort, and so has the largest direct impact on the quality of a system. It should therefore come as no surprise that this is the most well defined and supported are of quality across the entire software development industry.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-software"&gt;
  &lt;/a&gt;
  Testing software
&lt;/h3&gt;

&lt;p&gt;A core part of any good Quality program is testing. The act of ensuring that what has been built does what it's meant to, and does it well. Testing here covers all the aspects of testing; Unit testing, Integration testing, Usability testing, Load testing. If you don't have a good testing strategy, and good coverage, then quality will be affected because problems won't be caught.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-and-tester-experience"&gt;
  &lt;/a&gt;
  Developer and Tester Experience
&lt;/h3&gt;

&lt;p&gt;Working on a system, either developing or testing it, is an experience. If the experience is a bad one, then people will want to do the quickest job possible and get out of there, leading to poor quality being introduced. There is also the additional complication of having to spend time dealing with a poor experience, rather than working on the task at hand, in an environment where time is already at a premium, which is most workplaces.&lt;/p&gt;

&lt;p&gt;Ensuring that developers and testers have a good experience means that they will be more able to focus on the job at hand, and more likely to try and maintain that good experience and so keep quality higher.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communication-and-understanding"&gt;
  &lt;/a&gt;
  Communication and Understanding
&lt;/h3&gt;

&lt;p&gt;Understanding how a system works, the changes that are happening to it, and the problems that are encountered are all key in ensuring that quality is maintained and improved on a system. &lt;/p&gt;

&lt;p&gt;Someone approaching a system they don't understand means that they are likely to add code which isn't right for the system, introducing technical debt and reducing quality.&lt;/p&gt;

&lt;p&gt;People who don't understand changes they are reviewing are more likely to simply sign off on a change, fearing that they might look stupid for asking questions that they consider obvious to other people.&lt;/p&gt;

&lt;p&gt;Testers who don't understand what a change is for won't be able to properly test the change, because they aren't aware of the impact and edge-cases around it.&lt;/p&gt;

&lt;p&gt;Ensuring that there is good documentation and good team communication is an often over-looked part of any system maintenance, instead favoring doing over documenting, but as new team members join and old ones leave, the understanding of the system deteriorates without having good quality documentation in place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-some-metrics-around-development-quality-and-how-can-we-measure-them"&gt;
  &lt;/a&gt;
  What are some metrics around Development Quality, and how can we measure them?
&lt;/h2&gt;

&lt;p&gt;There are a whole plethora of metrics we could measure to understand the quality of our code, and if we're doing things right. I've picked a few which if measured could have a big impact in a short time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cyclomatic-complexity"&gt;
  &lt;/a&gt;
  Cyclomatic complexity
&lt;/h3&gt;

&lt;p&gt;A measure of how many paths there are through the code. The more paths there are, the more complex the code, and the more opportunity for errors to be introduced.&lt;/p&gt;

&lt;p&gt;While people are working on complex pieces of code it can be easy for them to miss edge cases, or lost their train of thought if interrupted. Simpler code is easier to understand, and consider when changing or testing, and so it is easier to identify bugs earlier.&lt;/p&gt;

&lt;p&gt;There are plenty of tools out there to help measure this. My own personal go-to in this space is &lt;a href="https://www.sonarqube.org/"&gt;SonarQube&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-duplication"&gt;
  &lt;/a&gt;
  Code duplication
&lt;/h3&gt;

&lt;p&gt;If there are blocks of code that are duplicated around the code-base then when it comes time to update those blocks of code, for example to introduce a new feature, or fix existing bugs, it's easy for similar blocks of code to be missed.&lt;/p&gt;

&lt;p&gt;Personally I use the rule-of-three for many things, and in this instance once you end up with the third usage of something, it should be in a centralised method rather than duplicated around. Purists might tell you that you should move to a single place as soon as it's re-used, on the second instance, but there is a trade-off between developing at speed, and developing to perfection.&lt;/p&gt;

&lt;p&gt;My go-to in this space is &lt;a href="https://www.sonarqube.org/"&gt;SonarQube&lt;/a&gt;, however there are other tools which can help with this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependency-management"&gt;
  &lt;/a&gt;
  Dependency management
&lt;/h3&gt;

&lt;p&gt;It's no secret that within a short time of release of any software, it's already out of date. New vulnerabilities are found in third-party packages all the time, and security protocols are constantly updated. Performance patches are something to consider as well.&lt;/p&gt;

&lt;p&gt;Ensuring we look after the dependencies helps us when it comes to larger upgrades. Rather than having to fight with the plethora of minor updates AND the major changes, the upgrades become far less onerous to do. Constant updating should be a part of Business As Usual (BAU) activities.&lt;/p&gt;

&lt;p&gt;There are a plethora of tools in this space, and my recommendation is to use the existing one in any platforms you currently use where they exist, for example &lt;a href="https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/about-alerts-for-vulnerable-dependencies"&gt;GitHubs Dependabot&lt;/a&gt;. If you don't have one available for your current tool-chain then (Snyk)[&lt;a href="https://snyk.io/"&gt;https://snyk.io/&lt;/a&gt;] is a good tool with a low barrier to entry.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-coverage"&gt;
  &lt;/a&gt;
  Test Coverage
&lt;/h3&gt;

&lt;p&gt;When asking most people they are likely to say that test coverage is related to the amount of code covered by automated tests, however I disagree with this viewpoint. We build systems to meet user needs, and so we should be testing that the system we have built meets those needs. Test coverage in this scenario is about how many use-cases and edge-cases are covered by testing. Using this as a measure meets our definition of high quality systems more completely, specifically the part that states a high quality system &lt;code&gt;meets the needs of the user&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That is not to say that measuring code coverage by automated testing doesn't hold merit, but the role of those metrics are more to ensure that we aren't introducing bugs at a smaller level, rather than ensuring we are meeting the users needs.&lt;/p&gt;

&lt;p&gt;Measuring test coverage in this sense isn't an easy one to do, and may be more of a manual effort. I've been familiar with a few options in this space but none really stand out. My go-to here is (TestRail)[&lt;a href="https://www.gurock.com/testrail/"&gt;https://www.gurock.com/testrail/&lt;/a&gt;] for documenting use-cases and testing around those cases but that's mainly because of familiarity.&lt;/p&gt;

&lt;p&gt;Most people will find that this is a bit of a mental shift in how they approach testing, but it'll be worth the effort if it's improving the quality of the system overall, and everyone can understand what the use-cases of the system are just by looking through the test cases that are available.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-review-quality"&gt;
  &lt;/a&gt;
  Code Review Quality
&lt;/h3&gt;

&lt;p&gt;Code reviews are an important part of any development process, and are a learning opportunity for everyone involved. They are the first point at which people can get feedback from their peers about the quality of their work, and how they can improve.&lt;/p&gt;

&lt;p&gt;Most times these are done by opening a pull-request (PR) on your platform of choice, and then an asynchronous review is performed. Understanding if a review is of high quality is difficult, and instead I offer a few insights into how to spot a low quality review.&lt;/p&gt;

&lt;p&gt;The first thing to watch out for is PRs that are large. People don't have time, or want to spend the time, reviewing large pull requests, and so are more likely to accept lower quality than they would if the PR was smaller.&lt;/p&gt;

&lt;p&gt;Next up is how much are people communicating about a review? If your PRs never have any comments then people aren't really reviewing them, and nobody is learning. Conversely if people are spending a long time commenting on a PR, then they aren't necessarily communicating effectively; Should the comment thread be moved to an in-person chat? A large amount of communication is non-verbal/textual, and that is lost in translation on large threads.&lt;/p&gt;

&lt;p&gt;Finally how long does it take for reviews to take place? If it's hours or days that's probably fine, but if it's any longer than the original context may have been lost from the mind of the implementer, and so it becomes harder to understand and communicate about the intent of the change.&lt;/p&gt;

&lt;p&gt;I don't have much in the way of tooling to measure this metric at the moment, but you can probably get the information out of any API that your platform of choice has. Additionally, asking people how they feel about the review process is important to understanding if it's a sensible process that is talking about the right thing. When asking questions then my advice is to do so as a rating on a scale (e.g. 0 - 10), which then allows you to translate it to a data point which can be measured over time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#production-bugs"&gt;
  &lt;/a&gt;
  Production Bugs
&lt;/h3&gt;

&lt;p&gt;A great measure of the quality of what we're outputting during the development cycle is how many bugs there are. More bugs means lower quality. Teams who are constantly delivering without fixing bugs or paying down tech debt will continue to introduce more bugs.&lt;/p&gt;

&lt;p&gt;Most teams measure tasks in some kind of task tracking software like &lt;a href="https://www.atlassian.com/software/jira"&gt;Jira&lt;/a&gt;, and these tools let you define what type of task something is. Using these tools to understand the number of bugs will help understand where the system is in terms of usability.&lt;/p&gt;

&lt;p&gt;As with all metrics the output from this must be understood in the wider narrative of the system. For example a system which has 10 bugs opened a week but is doing 1000 releases a week is in a far better state than one which has 10 bugs opened a week but is only doing 1 release a month.&lt;/p&gt;

&lt;p&gt;Measuring this should be a matter of using the API of the task tracking software you use and mapping that against the amount of change the system undergoes. The exact measure of change can vary, but may be related to the number of user stories completed, the number of releases, or the number of changed lines of code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preproduction-bugs"&gt;
  &lt;/a&gt;
  Pre-Production Bugs
&lt;/h3&gt;

&lt;p&gt;Catching bugs before they get to production is the most ideal time to catch a bug, and using this as a metric helps to understand several things.&lt;/p&gt;

&lt;p&gt;Firstly if this metric is far lower than the Production Bugs metric, there's an indication that the testing process is failing in some way. This is not uncommon, especially if QA and production environments are severely different, or the testing team is inexperienced.&lt;/p&gt;

&lt;p&gt;Secondly this metric can be a good indication of if the development team is producing good quality output before testing. Are the reviews working well? Do engineers understand the system? A low quality system, as previously described, is likely to continue being a low quality system, and pre-production bugs caught is a good indication that developers don't want to be working on this system, or that they're constantly battling the tech debt on the system rather than implementing high-quality changes.&lt;/p&gt;

&lt;p&gt;There are two ways you can measure this. Firstly, as with production bugs, usage of any task-tracking software can help. Tagging bug tickets with 'pre-production' lets you query for those tasks and get relevant metrics from them.&lt;/p&gt;

&lt;p&gt;If you don't have that option, then measuring the life-cycle of a task is another option. One which goes back from testing to development is a great indication that pre-production bugs were found. The exact option you choose will depend on how you work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developer-and-testing-experience"&gt;
  &lt;/a&gt;
  Developer and Testing Experience
&lt;/h3&gt;

&lt;p&gt;As eluded to previously, a poor experience for developers and testers will lead to lower quality work. This is either because people are using their time overcoming technical barriers rather than doing quality work, or that they are in a bad environment and want to get out of it as quickly as possible, not spending a good amount of time ensuring quality.&lt;/p&gt;

&lt;p&gt;There are a lot of different components to helping create better experiences for developers and testers. I've managed to list a few below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Getting the code&lt;/li&gt;
&lt;li&gt;Updating the system&lt;/li&gt;
&lt;li&gt;Testing the change&lt;/li&gt;
&lt;li&gt;Deployment the system&lt;/li&gt;
&lt;li&gt;Finding help when required&lt;/li&gt;
&lt;li&gt;Updating documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding someones experience is difficult, if not impossible, to measure in an automatic way, and so we need to be asking the engineers and testers directly. In order to turn questions into a measurable metric, the questions need to be asked as a scale question, rather than an open-ended question.&lt;/p&gt;

&lt;p&gt;Some questions that could be asked (please feel free to ignore some, or add your own):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How easy for you to get the code for the system?

&lt;ul&gt;
&lt;li&gt;Finding in source code repo server&lt;/li&gt;
&lt;li&gt;Downloading the code&lt;/li&gt;
&lt;li&gt;Accessing the repo&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How easy was it to get started with development?

&lt;ul&gt;
&lt;li&gt;Setting up local dependencies&lt;/li&gt;
&lt;li&gt;Required environment variables&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How helpful was the documentation?

&lt;ul&gt;
&lt;li&gt;Was it easy to find?&lt;/li&gt;
&lt;li&gt;Was it up to date?&lt;/li&gt;
&lt;li&gt;Did it make sense?&lt;/li&gt;
&lt;li&gt;How easy was it to update?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;If you needed help, could you find someone with knowledge of the system?

&lt;ul&gt;
&lt;li&gt;Were core contributors documented?&lt;/li&gt;
&lt;li&gt;Did you know how to contact any of the core contributors?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How confident were you when making changes that you weren't breaking things?

&lt;ul&gt;
&lt;li&gt;Is the system architected in a way that makes it easy to understand how things interact?&lt;/li&gt;
&lt;li&gt;Were there sufficient unit and integration tests to give you confidence?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Was there documentation about how to contribute to the system?

&lt;ul&gt;
&lt;li&gt;Did you understand any standards being followed?&lt;/li&gt;
&lt;li&gt;Did the PR process make sense?&lt;/li&gt;
&lt;li&gt;How long did it take to get feedback on any PRs?&lt;/li&gt;
&lt;li&gt;Was the feedback on any PRs appropriate and constructive?&lt;/li&gt;
&lt;li&gt;Was the branching strategy clear?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Was is clear how to deploy your changes?

&lt;ul&gt;
&lt;li&gt;Was the deployment strategy clearly defined?&lt;/li&gt;
&lt;li&gt;How easy or difficult was it to get your changes deployed?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Were you able to validate your changes in a testing/QA environment completely before deploying to production?

&lt;ul&gt;
&lt;li&gt;Is there a pre-production environment?&lt;/li&gt;
&lt;li&gt;Are any pre-production environments sufficiently similar to production that testing gives enough confidence that changes work as expected?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asking questions is important, but you need to balance that with not asking too many questions, and not too often. People are happy to click a smiley face to give feedback, but not many people will fill in a 20 page questionnaire after every change. The frequency and measure of this metric is one which will need to be tuned and changed over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this blog we've covered one of the three areas of Quality of an Engineered Software System. There's a lot here, and you shouldn't expect to measure everything at once, from day one. Cherry picking what you can do easily to make a start, completely excluding things which don't make sense, or adding in your own metrics are all very valid approaches.&lt;/p&gt;

&lt;p&gt;The important point to take away is that you should be measuring things to know where you need to improve, and that Development Quality is about more than just code and more than just what you can measure automatically.&lt;/p&gt;

&lt;p&gt;In the next blog I'll start to investigate the Operational aspect of quality.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Release of Perl distribution of Crypt::OpenSSL::PKCS12 1.9</title>
      <author>jonasbn</author>
      <pubDate>Sat, 20 Nov 2021 13:05:59 +0000</pubDate>
      <link>https://dev.to/jonasbn/release-of-perl-distribution-of-cryptopensslpkcs12-19-1715</link>
      <guid>https://dev.to/jonasbn/release-of-perl-distribution-of-cryptopensslpkcs12-19-1715</guid>
      <description>&lt;p&gt;&lt;a href="https://metacpan.org/dist/Crypt-OpenSSL-PKCS12"&gt;Crypt::OpenSSL::PKCS12&lt;/a&gt; 1.9 have just been release to CPAN and all open PRs have now been processed.&lt;/p&gt;

&lt;p&gt;Additionally I have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ported the change log from text to Markdown&lt;/li&gt;
&lt;li&gt;Added some of the &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Documentation::RequirePodSections"&gt;suggested sections&lt;/a&gt; to the documentation, some of these will have to be updated with more information&lt;/li&gt;
&lt;li&gt;I have added some more references and documentation and there is more to come in this space&lt;/li&gt;
&lt;li&gt;I have bumped the Perl requirement from 5.6 to 5.8 since the test suite uses UTF-8, &lt;code&gt;perlver&lt;/code&gt; is indeed a &lt;em&gt;nifty&lt;/em&gt; tool, you can use it to &lt;a href="http://jonasbn.github.io/til/perl/find_out_what_your_perl_minimum_version_requirement_is.html"&gt;find out what your perl minimum version requirement is&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Finally I have documented that the distribution is not compatible with OpenSSL 3.X.X only 1.X.X&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This concludes this feature release. The next major thing is to make the distrubution compatible with OpenSSL 3.X.X - so there are &lt;a href="https://www.openssl.org/docs/man3.0/man7/migration_guide.html"&gt;plenty of things to do&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to James Rouzier (@jrouzierinverse) for his &lt;code&gt;create_as_string&lt;/code&gt; feature - your contribution is most welcome&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#change-log"&gt;
  &lt;/a&gt;
  Change Log
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#19-sat-nov-20-124934-cet-2021"&gt;
  &lt;/a&gt;
  1.9 Sat Nov 20 12:49:34 CET 2021
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Added new feature from &lt;code&gt;create_as_string&lt;/code&gt; via PR #39 from James Rouzier (@jrouzierinverse), which returns the PKCS data as a string, for futher handling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bumped Perl requirement from Perl 5.6 to 5.8, due to use of UTF-8 in test suite&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;POD cleaned up, more to come&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>release</category>
      <category>perl</category>
    </item>
    <item>
      <title>Monitoring your Flask application using OpenTelemetry</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Sat, 20 Nov 2021 13:03:32 +0000</pubDate>
      <link>https://dev.to/signoz/monitoring-your-flask-application-using-opentelemetry-2l2o</link>
      <guid>https://dev.to/signoz/monitoring-your-flask-application-using-opentelemetry-2l2o</guid>
      <description>&lt;p&gt;In this article, we will use OpenTelemetry to instrument a sample Flask app. Flask is one of the most popular web application frameworks of Python. It consists of Werkzeug WSGI toolkit and Jinja2 template engine.&lt;/p&gt;

&lt;p&gt;Instrumentation is one of the biggest challenge engineering teams face when starting out with observability. Instrumenting a distributed application architecture is not easy. Applications now have distributed services as well as distributed teams that might be using multiple programming languages and numerous frameworks and libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; is the leading open-source standard that is solving the problem of instrumentation. It is currently an incubating project under the &lt;a href="https://www.cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is a set of tools, APIs, and SDKs used to instrument applications to create and manage telemetry data(Logs, metrics, and traces). It aims to make telemetry data(logs, metrics, and traces) a built-in feature of cloud-native software applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-opentelemetry"&gt;
  &lt;/a&gt;
  Why use OpenTelemetry?
&lt;/h3&gt;

&lt;p&gt;As might be clear by now that OpenTelemetry helps you to generate telemetry data. You still need a backend to analyze, store and visualize that data. By design, OpenTelemetry is vendor-agnostic. And that's one of the biggest advantages of using OpenTelemetry. It can export data in multiple formats which you can send to a backend of your choice.&lt;/p&gt;

&lt;p&gt;In this article, we will use &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; as a backend. SigNoz is an open-source APM that can be used for both metrics and distributed tracing.&lt;/p&gt;

&lt;p&gt;Let's get started and see how to use OpenTelemetry for a Flask application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-a-flask-application-with-opentelemetry"&gt;
  &lt;/a&gt;
  Running a Flask application with OpenTelemetry
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry is a set of tools, APIs, and SDKs used to instrument applications to create and manage telemetry data(logs, metrics, and traces).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-signoz"&gt;
  &lt;/a&gt;
  Installing SigNoz
&lt;/h3&gt;

&lt;p&gt;You can get started with SigNoz using just three commands at your terminal if you have Docker installed. You can install Docker from its &lt;a href="https://www.docker.com/get-started"&gt;official website&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/SigNoz/signoz.git&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;signoz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will have an option to choose between ClickHouse or Kafka + Druid as a storage option. Trying out SigNoz with ClickHouse database takes less than 1.5GB of memory, and for this tutorial, we will use that option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/docs/deployment/docker/?utm_source=blog&amp;amp;utm_medium=opentelemetry_flask"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIEm5Jzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/deploy_docker_documentation.webp" alt="Deployment Docs" width="880" height="82"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you are done installing SigNoz, you can access the UI at: &lt;a href="http://localhost:3000/application"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application list shown in the dashboard is from a sample app called HOT R.O.D that comes bundled with the SigNoz installation package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ih4CJjA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/signoz_dashboard_hc.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ih4CJjA5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/signoz_dashboard_hc.webp" alt="SigNoz dashboard showing application list" width="880" height="492"&gt;&lt;/a&gt;SigNoz Dashboard&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-a-sample-flask-application"&gt;
  &lt;/a&gt;
  Getting a sample Flask application
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Python 3.4 or newer&lt;br&gt;&lt;br&gt;
Download the &lt;a href="https://www.python.org/downloads/"&gt;latest version&lt;/a&gt; of Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MongoDB&lt;br&gt;&lt;br&gt;
Below are the download links for different OS:&lt;br&gt;&lt;br&gt;
&lt;a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/"&gt;MacOS&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://docs.mongodb.com/manual/administration/install-on-linux/"&gt;Linux&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/"&gt;Windows&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Running sample Flask app&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
We will be using the Flask app at this &lt;a href="https://github.com/SigNoz/sample-flask-app"&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clone sample Flask app repository and go to the root folder&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/SigNoz/sample-flask-app.git&lt;/span&gt;
   &lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Check if the app is running&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;python3&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now access the UI of the app on your local host: &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQsdv0i---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/11/sample_flask_app.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQsdv0i---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/11/sample_flask_app.webp" alt="Sample flask app" width="880" height="316"&gt;&lt;/a&gt;Sample flask application running on local host&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#instrumenting-the-flask-application-with-opentelemetry"&gt;
  &lt;/a&gt;
  Instrumenting the Flask application with OpenTelemetry
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Opentelemetry Python instrumentation installation&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The app folder contains a file called &lt;code&gt;requirements.txt&lt;/code&gt;, which contains all the necessary requirements to set up OpenTelemetry Python instrumentation. Make sure your path is updated to the root directory of your sample app and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;pip3&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="nx"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it hangs while installing &lt;code&gt;grpcio&lt;/code&gt; during &lt;strong&gt;pip3 install opentelemetry-exporter-otlp&lt;/strong&gt; then follow below steps as suggested in &lt;a href="https://stackoverflow.com/questions/56357794/unable-to-install-grpcio-using-pip-install-grpcio/62500932#62500932"&gt;this stackoverflow link&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pip3 install --upgrade pip&lt;/li&gt;
&lt;li&gt;python3 -m pip install --upgrade setuptools&lt;/li&gt;
&lt;li&gt;pip3 install --no-cache-dir --force-reinstall -Iv grpcio&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Install application-specific packages&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
This step is required to install packages specific to the application. Make sure to run this command in the root directory of your installed application. This command figures out which instrumentation packages the user might want to install and installs it for them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;opentelemetry&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Passing the necessary environment variables&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
You're almost done. In the last step, you just need to configure a few environment variables for your OTLP exporters. Environment variables that need to be configured:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SERVICE_NAME  - application service name (you can name it as you like)&lt;/li&gt;
&lt;li&gt;ENDPOINT_ADDRESS - OTLP gRPC collector endpoint address (IP of SigNoz)
After taking care of these environment variables, you only need to run your instrumented application. Accomplish all these by using the following command at your terminal.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;OTEL_RESOURCE_ATTRIBUTES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;flaskApp&lt;/span&gt; &lt;span class="nx"&gt;OTEL_METRICS_EXPORTER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;none&lt;/span&gt; &lt;span class="nx"&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://&amp;lt;IP of SigNoz&amp;gt;:4317&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;opentelemetry&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;instrument&lt;/span&gt; &lt;span class="nx"&gt;python3&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Ip of SigNoz&lt;/code&gt; can be replaced with localhost in this case. Hence, the final command becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;OTEL_RESOURCE_ATTRIBUTES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;flaskApp&lt;/span&gt; &lt;span class="nx"&gt;OTEL_METRICS_EXPORTER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;none&lt;/span&gt; &lt;span class="nx"&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:4317&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;opentelemetry&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;instrument&lt;/span&gt; &lt;span class="nx"&gt;python3&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And congratulations! You have now instrumented your flask application with OpenTelemetry.&lt;/p&gt;

&lt;p&gt;Below you can find your &lt;code&gt;Flask_app&lt;/code&gt; in the list of applications being monitored on SigNoz dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpYPvDD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/11/flask_app_list_signoz.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpYPvDD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/11/flask_app_list_signoz.webp" alt="Flask app in the list of applications" width="880" height="507"&gt;&lt;/a&gt;Flask app in the list of applications monitored by SigNoz&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opensource-tool-to-visualize-telemetry-data"&gt;
  &lt;/a&gt;
  Open-source tool to visualize telemetry data
&lt;/h2&gt;

&lt;p&gt;SigNoz makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box RED metrics charts and visualization. RED metrics stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate of requests&lt;/li&gt;
&lt;li&gt;Error rate of requests&lt;/li&gt;
&lt;li&gt;Duration taken by requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---EjS1eNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---EjS1eNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.webp" alt="SigNoz charts and metrics" width="880" height="512"&gt;&lt;/a&gt;Measure things like application latency, requests per sec, error percentage and see your top endpoints with SigNoz.&lt;/p&gt;

&lt;p&gt;You can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zipHHg5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_list_of_traces_hc.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zipHHg5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_list_of_traces_hc.webp" alt="List of traces on SigNoz dashboard" width="880" height="512"&gt;&lt;/a&gt;View of traces at a particular timestamp&lt;/p&gt;

&lt;p&gt;You can use flamegraphs to exactly identify the issue causing the latency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fmGoLDx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fmGoLDx8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.webp" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI" width="880" height="512"&gt;&lt;/a&gt;View of traces at a particular timestamp&lt;/p&gt;

&lt;p&gt;You can also build custom metrics dashboard for your infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z7C5zsAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_custom_dashboard-min.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z7C5zsAp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_custom_dashboard-min.webp" alt="Custom metrics dashboard" width="880" height="477"&gt;&lt;/a&gt;You can also build a custom metrics dashboard for your infrastructure&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry makes it very convenient to instrument your Flask application. You can then use an open-source APM tool like SigNoz to analyze the performance of your app. As SigNoz offers a full-stack observability tool, you don't have to use multiple tools for your monitoring needs.&lt;/p&gt;

&lt;p&gt;You can try out SigNoz by visiting its GitHub repo 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo" width="708" height="162"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions or need any help in setting things up, join our slack community and ping us in &lt;code&gt;#help&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/signoz-slack"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSs2tC2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/join_slack_cta.png" alt="SigNoz Slack community" width="880" height="118"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you want to read more about SigNoz 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/opentelemetry/go/"&gt;Golang Aplication Monitoring with OpenTelemetry and SigNoz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/blog/opentelemetry-collector-complete-guide/"&gt;OpenTelemetry collector - complete guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>monitoring</category>
      <category>performance</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>🌎 Track Twitter Trends of any country or town in the world </title>
      <author>Ayush Singh</author>
      <pubDate>Sat, 20 Nov 2021 12:47:45 +0000</pubDate>
      <link>https://dev.to/ayush_singh_dev/track-twitter-trends-of-any-country-or-town-in-the-world-28b2</link>
      <guid>https://dev.to/ayush_singh_dev/track-twitter-trends-of-any-country-or-town-in-the-world-28b2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;When it comes to viewing what's trending on twitter of some other location other than your own it's very hard. Also, you can't really see &lt;a href="https://globaltwittertrends.com"&gt;twitter trends&lt;/a&gt; below 30 or sometimes 10 even after changing the location.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;Even though there were solutions there I still wanted to work with twitter API to provide everything for free and in better UI than everybody else and if you ask me at the end I did. Here's how?&lt;/p&gt;

&lt;p&gt;The first thing I did was to get the approval of twitter developers API. Then I used the api to get the JSON data of all the countries and town in the world that are live. You can get upto 50 trends for any country and town.&lt;/p&gt;

&lt;p&gt;Now, I created a search bar using AJAX + PHP because I wanted to filter and echo results based upon users input. You can try typing your country or town to see what's trending there right now. It works amazing even I like it even after developing it. Link is in twitter trends above you will find as there is a single link in this post.&lt;/p&gt;

&lt;p&gt;I also added an Index page so that the user can see how many countries and towns we can track. Right now you can see twitter trends of 62 countries and 462 towns on global twitter trends. These are live and are updated every 30 minutes. &lt;/p&gt;

&lt;p&gt;I created a HTML table to echo JSON data of each country and town but there was a problem it used to get unresponsive on small screens I handled this by changing table design when users uses it on small screens. You can see yourself. For this I used media tag in css.&lt;/p&gt;

&lt;p&gt;I used w3css framework in order to make the entire design because I liked it. It was fast.&lt;/p&gt;

&lt;p&gt;Logo is simply created on canva if you are interested in that too.&lt;/p&gt;

&lt;p&gt;That's it using all the things above I created global twitter trends.&lt;/p&gt;

&lt;p&gt;I would love to interact with anyone on dev.to so please ask question in comments.&lt;/p&gt;

</description>
      <category>twitter</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Learning Programming is Non-Linear</title>
      <author>Renan Moura</author>
      <pubDate>Sat, 20 Nov 2021 12:28:14 +0000</pubDate>
      <link>https://dev.to/renanmouraf/learning-programming-is-non-linear-469c</link>
      <guid>https://dev.to/renanmouraf/learning-programming-is-non-linear-469c</guid>
      <description>&lt;p&gt;Learning is by no means a linear process, even in hard sciences like Math.&lt;/p&gt;

&lt;p&gt;It is very common to see people asking in groups, Reddit, and other forum-like places "What path should I take to become a Software Developer".&lt;/p&gt;

&lt;p&gt;Unfortunately, learning programming is not linear.&lt;/p&gt;

&lt;p&gt;You will find many lists and articles giving you a path like: learn HTML, CSS, JavaScript...&lt;/p&gt;

&lt;p&gt;They are not wrong in the sense that you should learn JavaScript before React, but they don't warn you that you should not worry about mastering the previous topic before jumping to the next.&lt;/p&gt;

&lt;p&gt;Those topics are all interconnected, which means they will "click" in your head only after you have some knowledge of each topic.&lt;/p&gt;

&lt;p&gt;Learn some JavaScript and then some React.&lt;/p&gt;

&lt;p&gt;If you decide to "master" Python before trying Django, good luck, you will never get to Django.&lt;/p&gt;

&lt;p&gt;Python is a massive language, you can learn the basics very quickly, but mastering it is another matter.&lt;/p&gt;

&lt;p&gt;That is what I had in mind when I wrote &lt;a href="https://renanmf.com/python-guide-beginners/"&gt;The Python Guide for Beginners&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can learn the core of the language as fast as possible, and then move on to dive into Web Development, Data Science, or general use of Python as a programming language to automate your everyday tasks.&lt;/p&gt;

&lt;p&gt;If you choose, say, Machine Learning, you will need to understand some details of the language specifically for some tasks, but you will have enough knowledge of the basics to google yourself out of any situation.&lt;/p&gt;

&lt;p&gt;The "click" also happens as you expand your arsenal of tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renanmf.com/learn-more-than-one-programming-language/"&gt;Learn More Than One Programming Language&lt;/a&gt; and some concepts that you learned in language X will make much more sense after you learn language Y.&lt;/p&gt;

&lt;p&gt;I'm challenging myself at the moment to dive more into web3, which is a new realm of software development and solutions revolving around blockchain and the crypto space.&lt;/p&gt;

&lt;p&gt;Adaptation is &lt;a href="https://renanmf.com/the-top-skill-for-a-software-developer/"&gt;The Top Skill for a Software Developer&lt;/a&gt; and you have to keep improving yourself as new opportunities arise.&lt;/p&gt;

&lt;p&gt;This means I won't waste hundreds of hours to learn Solidity or understand every single concept about Smart Contracts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://renanmf.com/the-only-way-to-learn-programming/"&gt;The Only Way To Learn Programming&lt;/a&gt; is to take action with what you know.&lt;/p&gt;

&lt;p&gt;So I will learn some things, apply them to a project and then I will be able to adapt myself to any situation that comes to me.&lt;/p&gt;

&lt;p&gt;If you wait until you are 100% prepared, you will be already too late to take the best opportunities.&lt;/p&gt;

&lt;p&gt;You also can &lt;a href="https://renanmf.com/newsletter/"&gt;subscribe to my newsletter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Grundkomponenten eines Computers</title>
      <author>Anne Quinkenstein</author>
      <pubDate>Sat, 20 Nov 2021 12:24:54 +0000</pubDate>
      <link>https://dev.to/annequinkenstein/grundkomponenten-eines-computers-mg2</link>
      <guid>https://dev.to/annequinkenstein/grundkomponenten-eines-computers-mg2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#computer"&gt;
  &lt;/a&gt;
  Computer
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RIkRWt-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fr7hyv8iuljf3hmohfev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RIkRWt-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fr7hyv8iuljf3hmohfev.png" alt="Image description" width="762" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evaprinzip"&gt;
  &lt;/a&gt;
  EVA-Prinzip
&lt;/h3&gt;

&lt;p&gt;Eingabe - Verarbeitungsprinzip/Verarbeitung - Ausgabe&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#digitaliserung"&gt;
  &lt;/a&gt;
  Digitaliserung
&lt;/h3&gt;

&lt;p&gt;Die physikalische Welt, die wir mit unseren Sinnen erfassen können, ist üblicherweise analog, Daten innerhalb eines Computers sind üblicherweise digital. Bevor wir sie wahrnehmen können, müssen Sie wieder in ein analoges Signal (Licht, Ton, Bewegung) umgewandelt werden. Die Diskretisierung von analogen Daten werden von sogenannten A/D-Wandlern vorgenommen. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prozessor"&gt;
  &lt;/a&gt;
  Prozessor
&lt;/h2&gt;

&lt;p&gt;Der Prozessor ist diejenige Komponente, die Anweisungen/ Befehle in Rechenoperationen umsetzt und diese dann ausführt. Der Prozessor wird auch oft Chip genannt, da es sich bei Digitalcomputern um einen Halbleiterbaustein handelt, der vermutlich ursprünglich aufgrund der flachen Form als Chip bezeichnet wurde.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prozessortakt"&gt;
  &lt;/a&gt;
  Prozessortakt
&lt;/h3&gt;

&lt;p&gt;Eine grundlegende Eigenschaft des Prozessors ist, dass er mit einem Takt arbeitet. Das bedeutet, dass er jeweils eine Rechenoperation innerhalb einer festen Zeitspanne durchführt. Je höher der Takt, desto schneller ist der Prozessor. &lt;br&gt;
Die Taktfrequenz ist die Anzahl der Takte pro Sekunde. Ein moderner Laptop-Prozessor hat eine Taktrate von ca. 3 GHz, ein Smartphone ca. 1 GHz. Das G Giga bedeutet 1 Milliarde.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prozessorkerne"&gt;
  &lt;/a&gt;
  Prozessorkerne
&lt;/h3&gt;

&lt;p&gt;Da die Taktrequenz heute nur mit sehr viel Auftwand noch erhöht werden kann, ist man dazu übergegangen, die Leistung eines Prozessors dadurch zu erhöhen, dass man mehrere Prozessorkerne in einem Prozessor einbaut. Man spricht dann von Multicore-Prozessoren.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prozessorarchitektur"&gt;
  &lt;/a&gt;
  Prozessorarchitektur
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#maschinensprache"&gt;
  &lt;/a&gt;
  Maschinensprache
&lt;/h3&gt;

&lt;p&gt;Da ein Prozessor ja vor allem Rechenoperationen ausführt, ist es logisch, dass die Ein- und Ausgabedaten Zahlen sind. Dafür müssen Befehle wie Addition kodiert werden, bspw. wäre 3 für Addition eine Kodierung. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#befehlssatz"&gt;
  &lt;/a&gt;
  Befehlssatz
&lt;/h4&gt;

&lt;p&gt;Welche Befehle ein Prozessor versteht und wie sie kodiert werden, wird als Befehlssatz - oder auf englisch "instruction set" - bezeichnet. Üblicherweise wird die Eigenschaft, welchen Befehlssatz der Prozessor versteht, als Prozessorarchitektur - oder auch Platfform - bezeichnet.&lt;br&gt;
Die derzeit am meisten verwendeten Prozessorarchitektur für den Hauptprozessor in PCs und Servern ist die x86 Architektur, während für mobile Smartphones und Tablets üblicherweise Prozessoren mit der ARM-Architektur eingesetzt werden. Üblicherweise sind die x86-Prozessoren leistungsfähiger, jedoch benötigen sie auch viel mehr Strom und geben oft sehr viel Wärme ab. Deshalb haben sich die energieeffizienteren ARM-Prozessoren bei mobilen Endgeräten durchgesetzt - der Akku hält länger.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wortbreite"&gt;
  &lt;/a&gt;
  Wortbreite
&lt;/h3&gt;

&lt;p&gt;Prozessor mit größeren Wortbreite können mehr unterschiedliche Werte verarbeiten. Wie ein Taschenrechner, mit dem Sie nur Zahlen bis 10 eingeben können. Ein solcher Taschenrechner hätte eine kleinere Wortbreite als einer, bei dem Sie Zahlen bis 1000 eingeben können. Wortbreiten werden üblicherweise in bit angegeben, also die Anzahl binärer Stellen (bit = binary digit). Moderne PCs und Server haben eine Wortbreite von 64 bit, Smartphones und Tables entweder 32 bit oder 64 bit. Kleinere Spezialprozessoren haben Wortbreiten von entweder 8 oder 16 bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arbeitsspeicher"&gt;
  &lt;/a&gt;
  Arbeitsspeicher
&lt;/h2&gt;

&lt;p&gt;Für die Datenablage gibt es zwei verschiedene grundlegende "Architekturmodelle" - die von Neumann Architektur und die Harvard Architektur. Sie unterscheiden sich dadurch, ob für Daten und Befehle die gleiche oder unterschiedlicher Speicher verwendet wird. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vonneumannarchitektur"&gt;
  &lt;/a&gt;
  von-Neumann-Architektur
&lt;/h3&gt;

&lt;p&gt;In der von-Neumann-Architektur gibt es einen gemeinsamen Speicher für Daten und Programme.&lt;br&gt;
Dies hat den Vorteil, dass man Daten und Befehle nicht so sauber trennen muss. Manchmal können ja auch Programme Eingangs- oder Ausgangsdaten sein. Außerdem kann der Speicher dann flexibel genutzt werden. Je nachdem ob man grade viele Daten (z.B. beim Videoschnitt) oder eher viel Programmcode (komplexe Simulation) hat, kann man die Speicherkapazität gut ausnutzen. Der Nachteil ist, dass es nur eine Verbindung zum Prozessor gibt, durch den sowohl Programme als auch Daten müssen. Dies kann zum Datenstau führen. Man spricht auch vom "Von Neumann - Flaschenhals". Außerdem ist es schwieriger, den Programmcode vor unbeabsichtigter oder beabsichtigter Veränderung - zum Beispiel durch Computerviren - zu schützen, da der Datenbereich prinzipiell schreibbar sein muss (es müssen ja ggf. Ausgangsdaten geschrieben werden).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#harvardarchitektur"&gt;
  &lt;/a&gt;
  Harvard-Architektur
&lt;/h3&gt;

&lt;p&gt;Bei der Harvard-Architektur gibt es getrennten Arbeitsspeicher für Daten und Programme.&lt;br&gt;
Prinzipiell kann dadurch der Datentransfer zum Prozessor schneller erfolgen, da man zwei Leitungen hat - eine für den Programmcode und eine für die Daten. Allerdings verliert man Flexibilität in der Speicherkapazität. Programmspeicher kann aber leichter schreibgeschützt und damit gesichert werden&lt;/p&gt;

&lt;p&gt;Generell wird heute in Multifunktionscomputern meist auf physikalischer Ebene die von-Neumann-Architektur eingesetzt. Auf logischer (auch virtuell genannter) Ebene wird der vorhandene Speicher aber meist dynamisch in Programm- und Datenbereich unterteilt, um auch die Vorteile der Harvard-Architektur nutzen zu können. Der Flaschenhals besteht allerdings, da dieser von der Hardware abhängt. Bei kleineren speziellen Geräten, bei denen sich die Programme üblicherweise nicht ändern und auch nicht geändert werden soll (z.B. MP3-Player) wird gerne die Harvard-Architektur eingesetzt.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speicherkapazit%C3%A4t"&gt;
  &lt;/a&gt;
  Speicherkapazität
&lt;/h3&gt;

&lt;p&gt;Speicherkapazität in Bit/ Byte&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Präfix&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Abkürzung&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Zweierpotenz&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Dezimalzahl&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Kibi&lt;/td&gt;
&lt;td&gt;ki&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2¹⁰&lt;/td&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mebi&lt;/td&gt;
&lt;td&gt;Mi&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2²⁰&lt;/td&gt;
&lt;td&gt;1.048.576&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gibi&lt;/td&gt;
&lt;td&gt;Gi&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2³⁰&lt;/td&gt;
&lt;td&gt;1.073.741.824&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tebi&lt;/td&gt;
&lt;td&gt;Ti&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2⁴⁰&lt;/td&gt;
&lt;td&gt;1.099.511.627.776&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Aktuelle Laptops und PCs haben eine Speicherkapazität zwischen 8 und16 GB RAM, Smartphones zwischen 1 und 3 GB RAM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#massenspeicher"&gt;
  &lt;/a&gt;
  Massenspeicher
&lt;/h3&gt;

&lt;p&gt;Im Arbeitsspeicher werden Daten üblicherweise nur temporär gespeichert. Man spricht dann von flüchtigem oder auch volatilem Speicher. Wenn flüchtiger Speicher nicht mehr mit Strom versorgt wird, dann gehen die dort gespeicherten Daten verloren. Im Gegensatz dazu können auf sogenanntem Massenspeicher Daten dauerhaft oder permanent gespeichert werden. Permanenter Speicher heißt deswegen Massenspeicher, weil man dort deutlich mehr Daten als im Arbeitsspeicher speichern konnte. Im englischen unterscheidet man zwischen memory (Arbeitsspeicher) und storage (Massenspeicher).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#magnetspeicher"&gt;
  &lt;/a&gt;
  Magnetspeicher
&lt;/h4&gt;

&lt;p&gt;Dazu zählen Disketten, Magnetbänder und die Festplatte (HDD = hard disk drive). Das Speichermedium besteht aus magnetisierbarem Material, also typischerweise eine Metallfolie. Binärdaten werden dort durch unterschiedliche magnetische Polarisierung dargestellt. Der Vorteil von magnetischer Speicherung ist, dass man das Speichermedium fast beliebig oft wieder überschreiben kann und die Daten bei richtiger Lagerung sehr lange unverändert bleiben. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optischer-speicher"&gt;
  &lt;/a&gt;
  Optischer Speicher
&lt;/h3&gt;

&lt;p&gt;Optischer Speicher speichert die Binärdaten als unterschiedlich stark reflektierende Datenpunkte. Zu den optischen Speichermedien gehören CD (compact discs), DVD (die Abkürzung wird sowohl mit digital video disc oder digital versatile disc erklärt), und Blue Ray Discs (wegen des verwendeten Lichts im blauen Wellenlängenbereich). Die Daten werden in einer langen Spirale von innen nach außen gelesen. Dabei detektiert das Lesegerät die unterschiedlich starke Reflektion der sogenannten pits (Gräben) und lands (Erhöhungen), die jeweils die Eins oder die Null kodieren. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#halbleiterspeicher"&gt;
  &lt;/a&gt;
  Halbleiterspeicher
&lt;/h3&gt;

&lt;p&gt;Halbleiterspeicher verwendet Transistoren als Speicher.  Moderner Halbleiterspeicher nennt sich auch Flash-Speicher und hat sich aus dem ursprünglich nur lesbaren Halbleiterspeicher (PROM = programmable read only memory) entwickelt. Die korrekte technische Bezeichnung ist Flash-EEPROM, wobei EEPROM für electrically erasable PROM steht, was eigentlich ein Paradoxon ist, da es sich dabei damit um wiederbeschreibbaren read only memory handelt. &lt;/p&gt;

&lt;p&gt;Flashspeicher hat den Vorteil, dass er in Prinzip wie Arbeitsspeicher rein elektronische ausgelesen und beschrieben werden kann. Das bedeutet, dass keine mechanischen Teile beansprucht werden und auch im Vergleich schneller und energieeffizienter arbeiten kann als magnetische und optische Speichermedien. Außerdem ist er bezogen auf die Speicherkapazität meist kleiner als andere Speichermedien und konnte gleich auf der Platine angebracht werden. &lt;br&gt;
Heute gibt es zunehmen Halbleiterspreicher, der Speicher in Microcontrollern, USB-Sticks, SSD Festplatten, ... &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#schnittstellen"&gt;
  &lt;/a&gt;
  Schnittstellen
&lt;/h1&gt;

&lt;p&gt;Ist eine Komponente fest auf der Hauptplatine verlötet, so spricht man von einer on-board Komponente. Zunehmend werden auch Komponenten gleich mit in die Hauptverarbeitungseinheit mit verbaut, dann spricht man von einer on-chip Komponente. Diese Kommunikationsverbindungen des Prozessors oder der Hauptplatine "nach außen" nennt man Schnittstellen. &lt;br&gt;
Eine Schnittstellenspezifikation besteht aus der Sprache/ Protokoll, der Geschwindigkeit der Datenübertragung und aus einer Hardwarespezifikation. Diese legt fest, wie die Komponenten physikalisch über die Schnittstelle verbunden werden. (Stecker und Buchse oder bei z.B. Wifi, Bluetooth und Infrarot, muss man die Frequenz und die Art und Weise, wie Bits gesendet werden, festlegen.) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usb"&gt;
  &lt;/a&gt;
  USB
&lt;/h3&gt;

&lt;p&gt;Die meistverbreitete Schnittstelle für Peripheriegeräte ist heutzutage die USB-Schnittstelle (Universal serial bus). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grafikschnittstellen"&gt;
  &lt;/a&gt;
  Grafikschnittstellen
&lt;/h3&gt;

&lt;p&gt;Da wir möglichst ohne Verzögerung eine Reaktion auf eine Eingabe auf dem Display sehen wollen, muss die grafische Ausgabe besonders schnell berechnet werden. Deshalb gibt es für die Grafikausgabe auch oft einen eigenen Prozessor, die GPU (Graphical Processing Unit) der nur mit der Berechnung der nächsten Bildschirmausgabe beschäftigt ist.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interne-schnittstellen"&gt;
  &lt;/a&gt;
  Interne Schnittstellen
&lt;/h2&gt;

&lt;p&gt;Arbeitsspeicher wird heute über die sogenannte DDR-Schnittstelle angeschlossen (DDR bedeutet Double Data Rate)&lt;br&gt;
Erweiterungskarten wie Grafikkarten werden heute über PCI express angeschlossen.&lt;br&gt;
Interne Festplatten und SSD werden heute üblicherweise über die SATA-Schnittstelle angeschlossen (Serial ATA bzw. Serial advanced technology attachment).&lt;/p&gt;

&lt;p&gt;Früher gab es auf der Hauptplatine sogenannte Bridges. Dabei gab es üblicherweise eine besonders leistungsfähige Bridge, die die sehr schnellen Datentransfer zwischen Hauptprozessor, Arbeitsspeicher und Grafikkarte vermittelte, die sogenannte Northbridge. Die nicht so anspruchsvollen Komponenten wie Massenspeicher und Eingabegeräte wurden über die sogenannte Southbridge an die Northbridge angeschlossen.Heute finden werden aber zunehmend Komponenten direkt in den Prozessorchip verbaut, so ist zum Beispiel die Northbridge in modernen Intel-Prozessoren bereits on-chip. Nur die langsameren Geräte werden über eine Southbridge vermittelt. &lt;/p&gt;

&lt;p&gt;System on Chip (SoC) Prozessoren - die zum Beispiel für Smartphones und Tablets eingesetzt werden - integrieren neben dem Chipsatzauch den Graphikprozessor auf dem Chip, so dass alle weiteren Komponenten direkt am Prozessor angeschlossen werden - hier hauptsächlich über PCI express und USB.&lt;/p&gt;

</description>
      <category>computer</category>
      <category>cpu</category>
    </item>
  </channel>
</rss>
