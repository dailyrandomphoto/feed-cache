<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create Model in Django - Tutorial for Beginners</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 16 Jun 2021 15:34:33 +0000</pubDate>
      <link>https://dev.to/sm0ke/create-model-django-1536</link>
      <guid>https://dev.to/sm0ke/create-model-django-1536</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article aims to help beginners to understand how to &lt;strong&gt;&lt;a href="https://docs.appseed.us/samples/django/create-model"&gt;Create a Model in Django&lt;/a&gt;&lt;/strong&gt; Framework by coding a new app from scratch and use mostly the terminal. The sample source code can be downloaded from Github (MIT License) and extended for hobby and commercial products. For newcomers, &lt;strong&gt;Django&lt;/strong&gt; is a high-level Python Web framework built by experienced developers that encourages rapid development and clean, pragmatic design. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#lets-code-django"&gt;
  &lt;/a&gt;
  Let's Code Django
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Check Python Version - recommended version is Python3&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;
Python 3.8.4        &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; All good, we have a 3.x version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Create/activate a virtual environment - Unix-based system&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Windows, the syntax is slightly different&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;.&lt;span class="se"&gt;\e&lt;/span&gt;nv&lt;span class="se"&gt;\S&lt;/span&gt;cripts&lt;span class="se"&gt;\a&lt;/span&gt;ctivate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Install Django&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;django
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Create a new Django Project&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;django-create-model
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-create-model
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the new directory, we will invoke &lt;code&gt;startproject&lt;/code&gt; subcommand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject config &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Take into account that &lt;code&gt;.&lt;/code&gt; at the end of the command. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Setup the database&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py makemigrations
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Start the app&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Access the web app in browser: http://127.0.0.1:8000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point we should see the default Django page in the browser: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Thr2SyVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pklhkp0fjhm5blmnabv4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Thr2SyVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pklhkp0fjhm5blmnabv4.png" alt="Django - Default Project Page."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create a new Django application&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py startapp sample
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Visualize the default SQL settings&lt;/strong&gt; - &lt;code&gt;config/settings.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# File: config/settings.py (partial content)
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'default'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'ENGINE'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'django.db.backends.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'NAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BASE_DIR&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s"&gt;'db.sqlite3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Define a new model&lt;/strong&gt; &lt;code&gt;Books&lt;/code&gt; in &lt;code&gt;sample&lt;/code&gt; application. The below changes should be added to &lt;code&gt;sample/models.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# File: sample/models.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;                       

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                                 &lt;span class="c1"&gt;# &amp;lt;- NEW
&lt;/span&gt;    &lt;span class="n"&gt;title&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;- NEW 
&lt;/span&gt;    &lt;span class="n"&gt;author&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;- NEW
&lt;/span&gt;    &lt;span class="n"&gt;publication_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                 &lt;span class="c1"&gt;# &amp;lt;- NEW 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Update Project Configuration&lt;/strong&gt; to use the new model - The &lt;code&gt;sample&lt;/code&gt; application must be added in the project configuration to &lt;code&gt;INSTALLED_APPS&lt;/code&gt; section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# File: config/settings.py (partial content)
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'sample'&lt;/span&gt;                        &lt;span class="c1"&gt;# &amp;lt;- NEW 
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; - for a quick check over latest changes we can run &lt;code&gt;check&lt;/code&gt; subcommand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py check
System check identified no issues &lt;span class="o"&gt;(&lt;/span&gt;0 silenced&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Generate the SQL code&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py makemigrations  &lt;span class="c"&gt;# generate the SQL code&lt;/span&gt;
Migrations &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;'sample'&lt;/span&gt;:
  sample&lt;span class="se"&gt;\m&lt;/span&gt;igrations&lt;span class="se"&gt;\0&lt;/span&gt;001_initial.py
    - Create model Book
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Apply changes on database&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sample, sessions
Running migrations:
  Applying sample.0001_initial... OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Use the model via CLI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once the model is created we can use it via the Django shell&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py shell
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from sample.models import Book     &lt;span class="c"&gt;# import the Book model in our context&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from django.utils import timezone  &lt;span class="c"&gt;# used to provide the value for publication_date&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; book1 &lt;span class="o"&gt;=&lt;/span&gt; Book&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'The Adventures of Tom Sawyer'&lt;/span&gt;, &lt;span class="nv"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Mark Twain'&lt;/span&gt;, &lt;span class="nv"&gt;publication_date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;timezone.now&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; book1.save&lt;span class="o"&gt;()&lt;/span&gt;                       &lt;span class="c"&gt;# save the new book&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;List all books&lt;/strong&gt; (using the CLI)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py shell
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from sample.models import Book
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; Book.objects.all&lt;span class="o"&gt;()&lt;/span&gt;
&amp;lt;QuerySet &lt;span class="o"&gt;[&lt;/span&gt;&amp;lt;Book: Book object &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&amp;gt;]&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see our new book retuned by the query. Let's improve the information that describe the object.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Django Model&lt;/strong&gt; - add text representation of an object&lt;/p&gt;

&lt;p&gt;To achieve this goal, we should define the &lt;code&gt;__str__()&lt;/code&gt; method for the &lt;code&gt;Book&lt;/code&gt; model&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# File: sample/models.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;                       

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;title&lt;/span&gt;            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;author&lt;/span&gt;           &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;publication_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;       &lt;span class="c1"&gt;# &amp;lt;- NEW
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;    &lt;span class="c1"&gt;# &amp;lt;- NEW
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's restart the Django console and check the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sample.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Adventures&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Tom&lt;/span&gt; &lt;span class="n"&gt;Sawyer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Use the model via Admin Section&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Django comes with an &lt;code&gt;admin&lt;/code&gt; section our-of-the box that allows us to manage with ease all models defined in project. &lt;br&gt;
To manage the &lt;code&gt;Book&lt;/code&gt; model in the administration console we need to create a &lt;code&gt;superuser&lt;/code&gt; (aka the admin) and after &lt;code&gt;register&lt;/code&gt; the &lt;code&gt;Book&lt;/code&gt; model to be visible in the admin section.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Create the superuser&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py createsuperuser
sername &lt;span class="o"&gt;(&lt;/span&gt;leave blank to use &lt;span class="s1"&gt;'sm0ke'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: admin
Email address: admin@appseed.us
Password: 
Password &lt;span class="o"&gt;(&lt;/span&gt;again&lt;span class="o"&gt;)&lt;/span&gt;:
Superuser created successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Register &lt;code&gt;Book&lt;/code&gt; model to be visible in the &lt;code&gt;admin&lt;/code&gt; section - Edit &lt;code&gt;sample/admin.py&lt;/code&gt; as below:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# File: sample/admin.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Book&lt;/span&gt;        &lt;span class="c1"&gt;# &amp;lt;- NEW
&lt;/span&gt;
&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;# &amp;lt;- NEW
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Authenticate as admin - &lt;code&gt;http://localhost:8000/admin/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point we should see the &lt;code&gt;Books&lt;/code&gt; model in the UI and able to execute CRUD operations. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDFiTDw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmahhwx06g8qhzwnhbaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDFiTDw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmahhwx06g8qhzwnhbaj.png" alt="Create Django Model - Admin Interface."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Create Django Model - List Model Items&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p3qHE_iV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esatkcqz16d6jwkghwsw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p3qHE_iV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esatkcqz16d6jwkghwsw.png" alt="Create Django Model - List Model Items."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Django Create Model - Edit Records&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---57ZksQp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qc0q1iay0iknh2kfb7b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---57ZksQp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qc0q1iay0iknh2kfb7b2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; Feel free to AMA in the comments section. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#more-django-resources"&gt;
  &lt;/a&gt;
  More Django Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read more about &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; (official docs)&lt;/li&gt;
&lt;li&gt;Start fast a new project using development-ready &lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Starters&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>django</category>
      <category>webdev</category>
      <category>python</category>
      <category>appseed</category>
    </item>
    <item>
      <title>How to use "any" and "all" in Python</title>
      <author>Muhammad Faran Aiki</author>
      <pubDate>Wed, 16 Jun 2021 15:22:59 +0000</pubDate>
      <link>https://dev.to/faranaiki/how-to-use-any-and-all-in-python-2dim</link>
      <guid>https://dev.to/faranaiki/how-to-use-any-and-all-in-python-2dim</guid>
      <description>&lt;p&gt;Credential: I do not know, but I, at least, am 4 years experienced; I am still learning C and Assembly.&lt;/p&gt;

&lt;p&gt;What is &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt; in Python?&lt;/p&gt;

&lt;p&gt;By Python definition, &lt;code&gt;any&lt;/code&gt; will return if there is an item whereby true in a list, whereas &lt;code&gt;all&lt;/code&gt; will return if all items are true in a list.&lt;/p&gt;

&lt;p&gt;It looks like the operator &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;and&lt;/code&gt; for &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;all&lt;/code&gt;. It is actually easy to implement in C, Assembly, or any other language.&lt;/p&gt;

&lt;p&gt;Here are examples of the function &lt;code&gt;any&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;any([true, false, false])   # Result in True
any([false, false, false])  # Result in False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are examples of the function &lt;code&gt;all&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;all([true, true, true])     # Result in True
all([true, true, false])    # Result in False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Implementation in C for &lt;code&gt;any&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// My algorithm for "any"
int any(int* arr, int size) {
    int i = 0, t = 0;
    for (; i &amp;lt; size - 1 ; i += 2) {
        t += arr[i] + arr[i + 1];
    }
    return (t + arr[size % i]) &amp;amp;&amp;amp; 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With a &lt;code&gt;O(log n)&lt;/code&gt; time complexity and &lt;code&gt;O(1)&lt;/code&gt; space complexity.&lt;/p&gt;

&lt;p&gt;Implementation in C for &lt;code&gt;all&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// My algorithm for "all"
int all(int* arr, int size) {
    int i = 0, t = 0;
    for (; i &amp;lt; size - 1 ; i += 2) {
        t += arr[i] + arr[i + 1];
    }
    return (t + (i % size &amp;amp;&amp;amp; arr[size % i]) &amp;gt; (i &amp;gt;&amp;gt; 1));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With a &lt;code&gt;O(log n)&lt;/code&gt; time complexity and &lt;code&gt;O(1)&lt;/code&gt; space complexity.&lt;/p&gt;

&lt;p&gt;I will explain how the algorithm works in another post.&lt;/p&gt;

&lt;p&gt;How to use &lt;code&gt;any&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Real world application
if any(person.alive for person in people):
    myself.shout("Who is dead?")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How to use &lt;code&gt;all&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Real world application
if all(person.alive for person in people):
    myself.shout("We are safe!")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>c</category>
      <category>algorithms</category>
      <category>list</category>
    </item>
    <item>
      <title>Here's why you should use Kubernetes!</title>
      <author>Prashant Ghildiyal</author>
      <pubDate>Wed, 16 Jun 2021 15:10:58 +0000</pubDate>
      <link>https://dev.to/pghildiyal/here-s-why-you-should-use-kubernetes-g9l</link>
      <guid>https://dev.to/pghildiyal/here-s-why-you-should-use-kubernetes-g9l</guid>
      <description>&lt;p&gt;Kubernetes is a portable, extensible, open-source platform for managing containerized applications and services that facilitates both declarative configuration and automation. Kubernetes provides a platform to configure, automate, and manage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Intelligent and balanced scheduling of containers&lt;/li&gt;
&lt;li&gt;Creation, deletion, and movement of containers&lt;/li&gt;
&lt;li&gt;Easy scaling of containers&lt;/li&gt;
&lt;li&gt;Monitoring and self-healing abilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#challenges-with-previous-technologies"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Challenges with Previous Technologies&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before Kubernetes there were containers, which became popular because they simplified going from application development to deployment without having to worry about portability or reproducibility. Developers can package an application and all its dependencies, libraries, and configuration files needed to execute the application into a container image. A container is a runnable instance of an image. Container images can be pulled from a registry and deployed anywhere the container runtime is installed: on your laptop, servers on-premises, or in the cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1E2YGgjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww4vtt6cmz4lc4f38j9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1E2YGgjE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ww4vtt6cmz4lc4f38j9f.png" alt="Docker Functionalities managing Containers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compared to virtual machines, containers have similar resources and isolation benefits, but are lighter in weight because they virtualize the operating system instead of the hardware. Containers are more portable and efficient, take up less space, use far fewer system resources, and can be spun up in seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GeUKX5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3n31rw9mruu4qoslgrl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GeUKX5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3n31rw9mruu4qoslgrl.png" alt="Virtual Machines Vs Containers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Managing containers for production is challenging. As the container market continued to grow and many workloads transitioned to fully production-grade containers, it was clear cluster admins needed something beyond a container engine. Key capabilities were missing, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using multiple containers with shared resources&lt;/li&gt;
&lt;li&gt;Monitoring running containers&lt;/li&gt;
&lt;li&gt;Handling dead containers&lt;/li&gt;
&lt;li&gt;Moving containers so utilization improves&lt;/li&gt;
&lt;li&gt;Autoscaling container instances to handle load&lt;/li&gt;
&lt;li&gt;Making the container services easily accessible&lt;/li&gt;
&lt;li&gt;Connecting containers to a variety of external data sources&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-kubernetes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Advantages of Kubernetes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Containers paved the way to build cloud native systems, in which services are implemented using small clouds of containers. This created an enormous opportunity to add and adopt new services to make the use of containers easier, faster, and far more productive. Since it was open-sourced by Google in 2014, Kubernetes has become the de-facto standard for container orchestration. Kubernetes leverages the power of containers while simplifying the management of services and machines in a cluster.&lt;/p&gt;

&lt;p&gt;A Pod is a logical grouping of one or more containers, which are scheduled together and share resources. Pods enable multiple containers to run on a host machine and share resources such as storage, networking, and container runtime information.&lt;/p&gt;

&lt;p&gt;Kubernetes Clusters abstract their underlying computing resources, allowing users to deploy workloads to the entire cluster as opposed to a particular server. A Kubernetes cluster consists of at least one master node that manages the cluster and multiple worker nodes, where containerized applications run using Pods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JpA2dqsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23rux03b3dipasfaytzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JpA2dqsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23rux03b3dipasfaytzb.png" alt="Containers in Pods, Kubernetes Advantage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kubernetes-architecture-enables"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Kubernetes architecture enables:&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A single administrator to manage thousands of containers running simultaneously&lt;/li&gt;
&lt;li&gt;Workload portability and orchestration of containers across on-site deployments to public or private clouds and to hybrid deployments in between&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  &lt;strong&gt;About Me:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Hi Everyone, I am Prashant, and I have been a DevOps Engineer for more than 15 years now. I've been working on Exciting technologies like Kubernetes, Orchestration,  Containerization, among others. With Experience, I understood that there is a lack of consolidated delivery workflow for Kubernetes. So, With some of my friends, I have Co-founded Devtron, an Open Source solution, to solve this issue. It would mean a lot if you can check out our Repo:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/devtron-labs"&gt;
        devtron-labs
      &lt;/a&gt; / &lt;a href="https://github.com/devtron-labs/devtron"&gt;
        devtron
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Software Delivery Workflow For Kubernetes
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/devtron-labs/devtron/main/./assets/logo.png"&gt;&lt;img width="200" height="156" src="https://res.cloudinary.com/practicaldev/image/fetch/s--AB9WPdZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devtron-labs/devtron/main/./assets/logo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Devtron is an open source software delivery workflow for kubernetes written in go
&lt;br&gt;
&lt;a href="https://docs.devtron.ai/" rel="nofollow"&gt;&lt;strong&gt;Explore documentation »&lt;/strong&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;a href="https://devtron.ai/" rel="nofollow"&gt;Website&lt;/a&gt;
·
&lt;a href="https://devtron.ai/blog/" rel="nofollow"&gt;Blog&lt;/a&gt;
·
&lt;a href="https://discord.gg/jsRG5qx2gp" rel="nofollow"&gt;Join Discord&lt;/a&gt;
·
&lt;a href="https://twitter.com/DevtronL" rel="nofollow"&gt;Twitter&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://discord.gg/jsRG5qx2gp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/49150eb0ec107d15b5dd28d7377dfa805fe47ef61c1180a6ce3c9f482cb28d40/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e25323075732532306f6e2d446973636f72642d6530313536332e737667" alt="Join Discord"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/badge/github.com/devtron-labs/devtron" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d68a0a3471479dff6e5155220bd1e304b6d6405d281bbc54d5d559f78fa794da/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f64657674726f6e2d6c6162732f64657674726f6e" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/devtron-labs/devtron/main/./LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/2a2157c971b7ae1deb8eb095799440551c33dcf61ea3d965d86b496a5a65df55/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://bestpractices.coreinfrastructure.org/projects/4411" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/649d033dd2509020bf49e2775ffb7b18c6fcc80b4263d7050707540cf4357aa7/68747470733a2f2f626573747072616374696365732e636f7265696e6672617374727563747572652e6f72672f70726f6a656374732f343431312f6261646765" alt="CII Best Practices"&gt;&lt;/a&gt;
&lt;a href="http://golang.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b530ddfe089b6cab64711fdab82afaa28b0e1a833b26bdb15082e261850d22e6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230776974682d476f2d3166343235662e737667" alt="made-with-Go"&gt;&lt;/a&gt;
&lt;a href="http://devtron.ai/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dc954b1e6af0e39a8148a4908ac9a4e49e4f17340977c9c88173e3788af10eb6/68747470733a2f2f696d672e736869656c64732e696f2f776562736974652d75702d646f776e2d677265656e2d7265642f687474702f736869656c64732e696f2e737667" alt="Website devtron.ai"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
📖 Menu&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#bulb-why-devtron"&gt;Why Devtron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#tada-features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#rocket-getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.devtron.ai/" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#memo-compatibility-notes"&gt;Compatibility Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#busts_in_silhouette-community"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#handshake-contribute"&gt;Contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#beetle-vulnerability-reporting"&gt;Vulnerability Reporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#bookmark-license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
💡 Why Devtron?&lt;/h2&gt;

&lt;p&gt;It is designed as a self-serve platform for operationalizing and maintaining applications (AppOps) on kubernetes in a developer friendly way
&lt;br&gt;
&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/devtron-labs/devtron/main/./assets/preview.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PECaETA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/devtron-labs/devtron/main/./assets/preview.gif"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
🎉 Features&lt;/h2&gt;



 &lt;b&gt; Zero code software delivery workflow &lt;/b&gt;
  
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Workflow which understands the domain of &lt;strong&gt;kubernetes, testing, CD, SecOps&lt;/strong&gt; so that you dont have to write scripts&lt;/li&gt;
&lt;li&gt;Reusable and composable components so that workflows are easy to contruct and reason through&lt;/li&gt;
&lt;/ul&gt;



 &lt;b&gt; Multi cloud deployment &lt;/b&gt;
 &lt;br&gt; 
&lt;ul&gt;
&lt;li&gt;Deploy to multiple kubernetes cluster&lt;/li&gt;
&lt;/ul&gt;



  &lt;b&gt; Easy dev-sec-ops integration &lt;/b&gt; 
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Multi level security policy at global, cluster, environment and application for efficient hierarchical policy management&lt;/li&gt;
&lt;li&gt;Behavior driven security policy&lt;/li&gt;
&lt;li&gt;Define policies and exception for kubernetes resources&lt;/li&gt;
&lt;li&gt;Define policies for events for faster resolution&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;br&gt;
  &lt;b&gt; Application debugging dashboard &lt;/b&gt; &lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;One place…&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/devtron-labs/devtron"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
This post is originally published on the Devtron website by one of our beloved devs, Prakarsh.

</description>
      <category>kubernetes</category>
      <category>beginners</category>
      <category>devops</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Happy Hackathoning - Do’s &amp; Don'ts</title>
      <author>Margo McCabe</author>
      <pubDate>Wed, 16 Jun 2021 15:07:35 +0000</pubDate>
      <link>https://dev.to/margo_hdb/happy-hackathoning-do-s-don-ts-37fc</link>
      <guid>https://dev.to/margo_hdb/happy-hackathoning-do-s-don-ts-37fc</guid>
      <description>&lt;p&gt;With the &lt;a href="https://townhall.hashnode.com/announcing-harperdb-hackathon-on-hashnode"&gt;HarperDB + Hashnode Hackathon&lt;/a&gt; upon us this month, I thought it would be a good time to share some tips on getting the most out of your hackathon participation. There are tons of great articles and resources out there of folks sharing their experiences and what they might do differently next time, so I’ll consolidate some of the best tips and open it up to the community to share your insights! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-participate-in-a-hackathon-in-the-first-place"&gt;
  &lt;/a&gt;
  Why Participate in a Hackathon in the First Place
&lt;/h3&gt;

&lt;p&gt;A few major benefits of participating in hackathons include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilize your existing skills to showcase your potential, while learning new tools, frameworks, and languages at the same time &lt;/li&gt;
&lt;li&gt;Challenge yourself, build something new, learn and grow&lt;/li&gt;
&lt;li&gt;Collaboration; make new connections in the developer community, help each other out, add knowledgeable resources to your network &lt;/li&gt;
&lt;li&gt;Solve real problems; many hackathons provide the opportunity to create solutions for real-world challenges &lt;/li&gt;
&lt;li&gt;Prizes! Compete with other like-minded folks to earn cash and other sweet rewards, not to mention bragging rights &lt;/li&gt;
&lt;li&gt;Build out your resume by showcasing your project and competitive edge &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most hackathons are (or should be) free to participate in, so there’s really not much risk other than your time commitment. What’s the worst that can happen? Even if you don’t win, it’s an awesome experience and great way to expand your skills, knowledge, and network. If you participate in 24-hour or similar hackathons, your ability to code / produce in a short period of time (probably under stress) is really being put to the test. However, many hackathons run for a couple weeks or more, allowing you to take your time and really focus on creating a quality app or project while showcasing your best work. Don’t be afraid to ask for help! Utilize the community to let them know when you’re stuck - chances are someone else is dealing with the same challenge, and will appreciate the opportunity to collaborate. All of your hard work is sure to pay off in the end. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-set-yourself-up-for-success-in-a-hackathon"&gt;
  &lt;/a&gt;
  How to Set Yourself Up for Success in a Hackathon
&lt;/h3&gt;

&lt;p&gt;Of course every developer is different, and each person has their own methods for success when competing in something like a hackathon. I’ve compiled some of my favorite advice, and would love to hear some of your tricks as well! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find the right hackathon / competition; take into consideration things like timeline, tools/technologies/frameworks included and other guidelines, can you work in teams, etc. (Find a hackathon that will challenge you to learn something new, while also enabling you to utilize some of your existing skills and knowledge)&lt;/li&gt;
&lt;li&gt;Start as soon as possible; set goals, outline your project, schedule out milestones, create lists of what needs to be done in what timeframe in order to succeed &lt;/li&gt;
&lt;li&gt;Do your research before you begin; compile resources on the tools/technologies included, connect with the community to ask questions and brainstorm &lt;/li&gt;
&lt;li&gt;Ask for help; reach out to the company sponsoring the hackathon for clarification, connect with other folks participating through communities like Slack or Discord, the more you can collaborate the better! &lt;/li&gt;
&lt;li&gt;Learn as much as you can, take breaks when needed, come back to your code with a fresh perspective when you hit roadblocks &lt;/li&gt;
&lt;li&gt;Final presentation; figure out how you want to present your app or project, get creative, stay organized, stand out &lt;/li&gt;
&lt;li&gt;Don’t give up! Even if your project is not “perfect” you should still submit it, you might surprise yourself, and you’ll probably gain some helpful feedback from the judges &lt;/li&gt;
&lt;li&gt;Keep in touch with connections you make throughout the process, use them as referrals, work together in the future &lt;/li&gt;
&lt;li&gt;Continue to build upon the skills and knowledge you gained during the project, share your experience with others through blogging or social media, etc. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-find-the-right-hackathon-for-you"&gt;
  &lt;/a&gt;
  How to Find the Right Hackathon for You
&lt;/h3&gt;

&lt;p&gt;There are hackathons happening constantly, year-round, and in this virtual day and age, you can almost always find a virtual hackathon to participate in. Some hackathons repeat yearly, such as &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; and those listed on &lt;a href="https://mlh.io/"&gt;Major League Hacking&lt;/a&gt;. Many tech companies and communities will also sponsor hackathons with different tools and technologies throughout the year. You can hear about these hack opportunities in places like: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter and other social media&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://techbeacon.com/app-dev-testing/46-slack-groups-developers"&gt;Slack&lt;/a&gt; and &lt;a href="https://dev.to/whoisryosuke/developer-discord-communities-o68"&gt;Discord&lt;/a&gt; communities (visit links for examples) &lt;/li&gt;
&lt;li&gt;Blogging platforms like &lt;a href="https://dev.to/"&gt;Dev&lt;/a&gt; or &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Event listing websites such as &lt;a href="https://builtin.com/"&gt;Built In&lt;/a&gt;, &lt;a href="https://www.geekwire.com/calendar/"&gt;Geekwire&lt;/a&gt;, or &lt;a href="https://www.developerevents.org/"&gt;Developer Events&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep your ear to the ground and chat with the community to see what they’re working on - this is also a great way to potentially find a team to work with! If you’re itching to get involved now, the &lt;a href="https://townhall.hashnode.com/announcing-harperdb-hackathon-on-hashnode"&gt;HarperDB + Hashnode Hackathon&lt;/a&gt; is running until the end of June. You still have plenty of time to build a new project and earn sweet rewards! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other Resources
&lt;/h3&gt;

&lt;p&gt;As I mentioned, there are tons of helpful resources out there when it comes to hackathoning (if that’s a word) - on topics such as how to pick the right team, how to manage your time, what to do afterwards, etc. Here are a few articles I enjoyed: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://towardsdatascience.com/11-steps-to-get-the-most-out-of-any-hackathon-b545cfe61558"&gt;11 Steps to Get The Most Out of Any Hackathon&lt;/a&gt; by Sara A. Metwalli&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.lunadio.com/blog/i-attended-10-hackathons-and-you-should-too/"&gt;I attended 10 hackathons and you should too&lt;/a&gt; by Ivan Homola&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.likeagirl.io/my-first-hackathon-experience-524e5962914c"&gt;My First Hackathon Experience&lt;/a&gt; by Ally Lee&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/harperdb/your-hacktoberfest-project-needs-a-good-pretzel-necklace-4b11"&gt;Your Hackathon Project Needs a Good Pretzel Necklace&lt;/a&gt; by Kaylan Stock &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re looking for inspiration on what to build for your hackathon project, just look around. Learn about what people have built with the technologies / frameworks you need to work with, and put your own spin on it. For example, you can see &lt;a href="https://dev.to/harperdb/sdks-app-games-zapier-oh-my-bfi"&gt;some of the projects&lt;/a&gt; that won hackathons in the past or check out this list of &lt;a href="https://www.notion.so/Ideas-for-Harperdb-Hackathon-82f5239947cb4a44a25e879210bbc3cd"&gt;new hackathon project ideas&lt;/a&gt;. Or if you’re participating in our hackathon this month, read some recent tutorials using HarperDB, such as building a &lt;a href="https://blog.greenroots.info/create-a-serverless-book-library-app-with-harperdb-and-gatsbyjs-ckpxkzsk407t192s1d5uk04qt"&gt;Serverless App with GatsbyJS&lt;/a&gt; or a &lt;a href="https://catalins.tech/build-a-rest-api-with-harperdb-and-fastifyjs"&gt;REST API with FastifyJS&lt;/a&gt;. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#so-what-are-you-waiting-for-happy-hackathoning"&gt;
  &lt;/a&gt;
  So, what are you waiting for? Happy Hackathoning!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOQ7_A2w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptriqbaf8rv86sezxuzt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOQ7_A2w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptriqbaf8rv86sezxuzt.jpg" alt="Yoda - Win Hackathon You Will"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;What about you - what do’s and don’ts would you like to share based on your hackathon experiences? Are you participating in any currently or coming up this year?&lt;/em&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>hackathon</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Introducing `findLast` and `findLastIndex`</title>
      <author>Laurie</author>
      <pubDate>Wed, 16 Jun 2021 15:02:15 +0000</pubDate>
      <link>https://dev.to/laurieontech/introducing-findlast-and-findlastindex-1fan</link>
      <guid>https://dev.to/laurieontech/introducing-findlast-and-findlastindex-1fan</guid>
      <description>&lt;p&gt;I'm back with another introduction to JavaScript syntax! Currently in Stage 2, we're going to talk about &lt;code&gt;findLast&lt;/code&gt; and &lt;code&gt;findLastIndex&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrayprototypefind"&gt;
  &lt;/a&gt;
  Array.prototype.find
&lt;/h2&gt;

&lt;p&gt;Let's start by talking about a sometimes used array function called &lt;code&gt;find&lt;/code&gt;. It's a nice utility method that helps you find the first element in an array that meets the given criteria.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { letter: 'c', integer: 2 },&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a complimentary function called &lt;code&gt;findIndex&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can imagine why someone might want to do this. If you're looking for an element that matches what you want, but you only need one, this is super useful and very performant.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-its-only-first"&gt;
  &lt;/a&gt;
  But it's only first
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;find&lt;/code&gt; is great, it always gets the first element that meets the criteria. What happens if you're continuously pushing elements onto your array and you want the "most recent" element that meets the criteria. This would be the element closest to the end.&lt;/p&gt;

&lt;p&gt;You could do this in a few ways. The one that comes to mind for me is to reverse the array and then use &lt;code&gt;find&lt;/code&gt;. But this isn't performant for large arrays, it requires more steps than it should, and it doesn't work well if there aren't any matching elements in the array.&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;findLast&lt;/code&gt;. It's the mirror function to &lt;code&gt;find&lt;/code&gt;, but it works from the end of the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findLast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { key: 'c', integer: 3 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is also a matching &lt;code&gt;findLastIndex&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;letter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findLastIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;letter&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that if it can't find an element that matches the criteria, it will return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-think"&gt;
  &lt;/a&gt;
  What do you think?
&lt;/h2&gt;

&lt;p&gt;In my mind we can never have too many array utility methods! Whether I need them or not. But how about you?&lt;/p&gt;

&lt;p&gt;If you're interested in learning more, check out the &lt;a href="https://github.com/tc39/proposal-array-find-from-last"&gt;proposal&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Starting with Flutter: Fancy Lateral Menu</title>
      <author>TheOtherDev/s</author>
      <pubDate>Wed, 16 Jun 2021 15:02:09 +0000</pubDate>
      <link>https://dev.to/theotherdevs/starting-with-flutter-fancy-lateral-menu-58g9</link>
      <guid>https://dev.to/theotherdevs/starting-with-flutter-fancy-lateral-menu-58g9</guid>
      <description>&lt;p&gt;Remember our lateral menu from this article? Yes, this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6FmIW__L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpztqxlq9y61xkh8oh93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6FmIW__L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpztqxlq9y61xkh8oh93.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty ugly isn't it? Let's make it fancier!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#center-that-list"&gt;
  &lt;/a&gt;
  Center that list
&lt;/h2&gt;

&lt;p&gt;Let's start by removing one of the most limiting features, or, at least, change it: the list. We'll change it to a Column and add the list as a child.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;endDrawer:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;mainAxisSize:&lt;/span&gt; &lt;span class="n"&gt;MainAxisSize&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;mainAxisAlignment:&lt;/span&gt; &lt;span class="n"&gt;MainAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;shrinkWrap:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;physics:&lt;/span&gt; &lt;span class="n"&gt;NeverScrollableScrollPhysics&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
              &lt;span class="nl"&gt;itemCount:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;itemBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;16.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;GestureDetector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                      &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                      &lt;span class="o"&gt;});&lt;/span&gt;
                    &lt;span class="o"&gt;},&lt;/span&gt;
                    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Item &lt;/span&gt;&lt;span class="si"&gt;$index&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                  &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="o"&gt;);&lt;/span&gt;
              &lt;span class="o"&gt;},&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The list is now a child of the column, also we needed to set column's height and set the list as &lt;code&gt;shrinkWrap&lt;/code&gt; (or the list would not render properly) and block it's scrollable behavior. We are also centering our elements to achieve a cleaner look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#round-it-up"&gt;
  &lt;/a&gt;
  Round it up
&lt;/h2&gt;

&lt;p&gt;Let's now round our ugly squared white menu by wrapping our &lt;code&gt;Container&lt;/code&gt; into a ClipRRect and let's give our menu some lovely curves!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;      &lt;span class="nl"&gt;endDrawer:&lt;/span&gt; &lt;span class="n"&gt;ClipRRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;topLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nl"&gt;bottomLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---idQH6Zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4oq1l2ggc61eqjvi1i0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---idQH6Zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4oq1l2ggc61eqjvi1i0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our menu now looks like this:&lt;/p&gt;

&lt;p&gt;Half work done, let's get to the meaty part now!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-items"&gt;
  &lt;/a&gt;
  Better items
&lt;/h2&gt;

&lt;p&gt;Let's set a new look for our items, and let's show which one is clicked.&lt;/p&gt;

&lt;p&gt;Keeping the "rounded" tradition of the menu we will give all our buttons a &lt;strong&gt;new background&lt;/strong&gt; using the &lt;code&gt;ClipRRect&lt;/code&gt; widget and a nice red color. We are adding a bit of complexity to our list item so we'll make brand new &lt;code&gt;StatelessWidget&lt;/code&gt; with a calling function to maintain the page control on the main widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;shrinkWrap:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;physics:&lt;/span&gt; &lt;span class="n"&gt;NeverScrollableScrollPhysics&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
                &lt;span class="nl"&gt;itemCount:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;itemBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ListItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Item &lt;/span&gt;&lt;span class="si"&gt;$index&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;onClick:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                      &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                      &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                      &lt;span class="o"&gt;});&lt;/span&gt;
                    &lt;span class="o"&gt;},&lt;/span&gt;
                  &lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;},&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;


&lt;span class="c1"&gt;//That's our item&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ListItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;VoidCallback&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ListItem&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;bottom:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;left:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;GestureDetector&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ClipRRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;topLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nl"&gt;bottomLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shade500&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;16.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bold&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final effect will be pretty nice:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GxjA2wMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ddldkq86bvo7xzxgfnb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxjA2wMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ddldkq86bvo7xzxgfnb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we want to show one item different from all others by setting it as "selected", so we'll add a "selected" property which will tell our item to have an orange background instead of a red one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;//How the new value is set:&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ListItem&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Item &lt;/span&gt;&lt;span class="si"&gt;$index&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;selected:&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="c1"&gt;//Rest of the item...&lt;/span&gt;

&lt;span class="cm"&gt;/**The list item:**/&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ClipRRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;topLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nl"&gt;bottomLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orangeAccent&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shade500&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="c1"&gt;//Rest of the item...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#click-effects"&gt;
  &lt;/a&gt;
  Click effects
&lt;/h2&gt;

&lt;p&gt;Last, but not least, we will add a click effect to our item by using the &lt;code&gt;CupertinoButton&lt;/code&gt; widget. Again, we'll use a &lt;strong&gt;custom widget&lt;/strong&gt; with a &lt;code&gt;CupertinoButton&lt;/code&gt; inside. We'll need to set the &lt;code&gt;minSize&lt;/code&gt; to 0 in order to let the button be as big as the child.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TappableWidget&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;VoidCallback&lt;/span&gt; &lt;span class="n"&gt;onTap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;TappableWidget&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onTap&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;child&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;CupertinoButton&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;minSize:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;zero&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;onPressed:&lt;/span&gt; &lt;span class="n"&gt;onTap&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;ListItem&lt;/code&gt; widget will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ListItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;VoidCallback&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;ListItem&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TappableWidget&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;bottom:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;left:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ClipRRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;topLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="nl"&gt;bottomLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="n"&gt;MediaQuery&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;orangeAccent&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;shade500&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Padding&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;16.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;fontWeight:&lt;/span&gt; &lt;span class="n"&gt;FontWeight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bold&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The end result will be like this, with a nice fading effect while clicking:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_fCyp2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqpn7xbqqql36ajk2oia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_fCyp2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqpn7xbqqql36ajk2oia.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#way-better-now"&gt;
  &lt;/a&gt;
  Way better now!
&lt;/h2&gt;

&lt;p&gt;Our menu has a way better look than before, and it was relatively easy to do, don't you think? You can customize your menu as you wish, but adding new animations or behaviors will require a &lt;strong&gt;complete change of code&lt;/strong&gt;. We will save it for another time. Stay tuned!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>dart</category>
    </item>
    <item>
      <title>How to test your UI without resizing browser</title>
      <author>Pritam Patil</author>
      <pubDate>Wed, 16 Jun 2021 15:00:01 +0000</pubDate>
      <link>https://dev.to/pritampatil/how-to-test-your-ui-without-resizing-browser-18g2</link>
      <guid>https://dev.to/pritampatil/how-to-test-your-ui-without-resizing-browser-18g2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;When working on UI layouts, for testing responsiveness - you may be used to either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;DevTools with custom viewport sizes&lt;/li&gt;
&lt;li&gt;Or some extension e.g. Window Resizer&lt;/li&gt;
&lt;li&gt;Or resize the browser window itself&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The problem with above approaches is you would be testing with fixed window sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;Enter css property &lt;code&gt;resize&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The property accepts 4 different values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;both&lt;/em&gt; - resized both &lt;em&gt;horizontally&lt;/em&gt; and &lt;em&gt;vertically&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;horizontal&lt;/em&gt; - resize it in the &lt;em&gt;horizontal&lt;/em&gt; direction&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;vertical - resize it in the *vertical&lt;/em&gt; direction&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;none&lt;/em&gt; - &lt;strong&gt;no&lt;/strong&gt; user-controllable method for resizing it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The rules to use &lt;code&gt;resize&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NO inline elements&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;overflow&lt;/code&gt; is NOT &lt;code&gt;visible&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Say you have code that has items wrapped in a flex container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"items"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; item &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; lorem ipsum dorem &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; Lorem ipsum dolor sit amet &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; consectetur adipiscing elit, sed do eiusmod tempor incididun &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.items&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-evenly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use &lt;code&gt;resize&lt;/code&gt;, you'll wrap the &lt;code&gt;ul&lt;/code&gt; with style as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;both&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; item &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; lorem ipsum dorem &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; Lorem ipsum dolor sit amet &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt; consectetur adipiscing elit, sed do eiusmod tempor incididun &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, you can test the responsiveness easily:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KUCaEAfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du8qruc0s9mj6gtev17a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KUCaEAfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du8qruc0s9mj6gtev17a.gif" alt="Responsive test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codepen for a demo is available &lt;a href="https://codepen.io/pritam-patil/pen/poeGRva"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/TheDoucheP"&gt;twitter&lt;/a&gt; or &lt;a href="https://github.com/pritam-patil"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>responsiveness</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Implicit ESM in Node.js with "type": "module"</title>
      <author>Tierney Cyren</author>
      <pubDate>Wed, 16 Jun 2021 14:55:55 +0000</pubDate>
      <link>https://dev.to/bnb/implicit-esm-in-node-js-with-type-module-np</link>
      <guid>https://dev.to/bnb/implicit-esm-in-node-js-with-type-module-np</guid>
      <description>&lt;p&gt;Continuing the Node.js ESM content, I'd like to talk about the comparitively straightforward alternative to &lt;a href="https://dev.to/bnb/explicit-esm-in-node-js-with-mjs-3ooh"&gt;using .mjs&lt;/a&gt; to get your Node.js applications to run as ECMAScript Modules (ESM) rather than CommonJS: including &lt;code&gt;"type": "module"&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage-of-raw-type-module-endraw-"&gt;
  &lt;/a&gt;
  Usage of &lt;code&gt;"type": "module"&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Let's assume we've started with the following &lt;code&gt;package.json&lt;/code&gt; for a zero (production) dependency application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "apollo-lunar-module",
  "version": "0.0.1",
  "description": "A simple, fast, nice lunar lander module",
  "main": "index.js",
  "scripts": {
    "lint": "standard"
  },
  "author": "Tierney Cyren &amp;lt;hello@bnb.im&amp;gt; (https://bnb.im/)",
  "license": "MIT",
  "devDependencies": {
    "standard": "^16.0.3"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To have implicit ESM - that is, have our &lt;code&gt;.js&lt;/code&gt; files parsed as ESM - we' need to make the following change:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="err"&gt;{&lt;/span&gt;
  "name": "apollo-lunar-module",
  "version": "0.0.1",
  "description": "A simple, fast, nice lunar lander module",
  "main": "index.js",
&lt;span class="gi"&gt;+ "type": "module"
&lt;/span&gt;  "scripts": {
    "lint": "standard"
  },
  "author": "Tierney Cyren &amp;lt;hello@bnb.im&amp;gt; (https://bnb.im/)",
  "license": "MIT",
  "devDependencies": {
    "standard": "^16.0.3"
  }
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;em&gt;specifically&lt;/em&gt; tells Node.js to parse your &lt;code&gt;.js&lt;/code&gt; files under this &lt;code&gt;package.json&lt;/code&gt; as ESM. Otherwise, by default (or when you use &lt;code&gt;"type": "commonjs"&lt;/code&gt;), Node.js will parse your &lt;code&gt;.js&lt;/code&gt; files as CommonJS. There's a few things to note:&lt;/p&gt;

&lt;p&gt;Node.js specifically looks for the &lt;em&gt;closest&lt;/em&gt; &lt;code&gt;package.json&lt;/code&gt; to determine whether or not to parse &lt;code&gt;.js&lt;/code&gt; as ESM or CommonJS.&lt;/p&gt;

&lt;p&gt;"&lt;em&gt;Closest&lt;/em&gt;" is important here. If there's a &lt;code&gt;package.json&lt;/code&gt; that's &lt;em&gt;closer&lt;/em&gt; to &lt;code&gt;.js&lt;/code&gt; files than your project's &lt;code&gt;package.json&lt;/code&gt;, and it &lt;em&gt;does not&lt;/em&gt; have &lt;code&gt;"type": "module"&lt;/code&gt; (or a &lt;a href="https://nodejs.org/api/packages.html#packages_dual_commonjs_es_module_packages"&gt;dual export&lt;/a&gt;, which is out of the scope of this post), CommonJS will be used for those &lt;code&gt;.js&lt;/code&gt; files. The most common/obvious example of this is the code within your &lt;code&gt;/node_modules/&lt;/code&gt; that may not be ESM, and shouldn't be parsed as such.&lt;/p&gt;

&lt;p&gt;Further, it's worth noting that explicitly using &lt;code&gt;.cjs&lt;/code&gt; overrides &lt;code&gt;"type": "module"&lt;/code&gt;. This is extremely useful if you're converting a codebase from CommonJS to ESM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-raw-type-module-endraw-"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;"type": "module"&lt;/code&gt;?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-quick-answer"&gt;
  &lt;/a&gt;
  The Quick Answer
&lt;/h3&gt;

&lt;p&gt;For you, the user, the straightforward answer to this is that using &lt;code&gt;"type": "module"&lt;/code&gt; is a better developer experience than having to explicitly use &lt;code&gt;.mjs&lt;/code&gt; in every single JavaScript file in your project if you're going to have a non-trivial number of files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-answer-with-more-context"&gt;
  &lt;/a&gt;
  The Answer With More Context
&lt;/h3&gt;

&lt;p&gt;Using &lt;code&gt;"type": "module"&lt;/code&gt; is often going to be a better developer experience for maintainers for a number of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It minimizes manual changes and potential mistakes, allowing a single line of text to control parsing.&lt;/li&gt;
&lt;li&gt;It makes migrating from CommonJS to ESM easier.

&lt;ul&gt;
&lt;li&gt;It depends on how you'd like to do it, but one strategy is to chunk out work of converting your applications to ESM one bit at a time by setting &lt;code&gt;"type": "module"&lt;/code&gt; and converting all the CommonJS code to use the &lt;code&gt;.cjs&lt;/code&gt; file extension.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;It allows ecosystem tooling to quickly determine if your projects are using ESM or not.

&lt;ul&gt;
&lt;li&gt;Note that JSON modules (and therefore importing &lt;code&gt;package.json&lt;/code&gt;) are only supported behind the &lt;code&gt;--experimental-json-modules&lt;/code&gt; flag. It does seem that necessary proposals to streamline this seem to be making pretty decent progress through the relevant standards processes.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>One media query you didn't know about! + Comparison with similar queries</title>
      <author>Gautam Tiwari</author>
      <pubDate>Wed, 16 Jun 2021 14:40:28 +0000</pubDate>
      <link>https://dev.to/gautamtiwari/one-media-query-you-didn-t-know-about-comparison-with-similar-queries-4pf5</link>
      <guid>https://dev.to/gautamtiwari/one-media-query-you-didn-t-know-about-comparison-with-similar-queries-4pf5</guid>
      <description>&lt;p&gt;Do you want to know when the user has an input device that can hover over elements? Want to display the hover state without hovering when there's no hovering device? Have you made an element invisible that shows up on hover, but you are stuck with it on a mobile device?&lt;/p&gt;

&lt;p&gt;Do you know what? There's a CSS only solution for this!&lt;/p&gt;

&lt;p&gt;Hi guys! I am &lt;a href="https://linkedin.com/in/gautamtiwari003/"&gt;Gautam Tiwari&lt;/a&gt;, from Uttarakhand, India. I am a front-end developer, learner, and dev blogger.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__619020"&gt;
  
    .ltag__user__id__619020 .follow-action-button {
      background-color: #6200ff !important;
      color: #ffffff !important;
      border-color: #6200ff !important;
    }
  
    &lt;a href="/gautamtiwari" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TXmzXSvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1bQ8YDQe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619020/7a3e1d45-e58d-4f22-b383-418f34f8830c.png" alt="gautamtiwari image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/gautamtiwari"&gt;Gautam Tiwari&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/gautamtiwari"&gt;I'm a Front-end developer who likes to develop pixel-perfect components using only HTML and CSS or build a reusable component in React.js.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#understanding-the-problem"&gt;
  &lt;/a&gt;
  Understanding the problem
&lt;/h2&gt;

&lt;p&gt;I made a card component for my portfolio website (working on it). It shows an image, and the text content shows up on top of it. I gave the text content an opacity of 0. Now the text content becomes visible only when the user either hover over it or focus on it.&lt;/p&gt;

&lt;p&gt;I settled with that until I realised that a mobile user would have a poor UX as they can't hover over the element.&lt;/p&gt;

&lt;p&gt;I thought there must be a media query for this, so I Googled it and WUOLAH! I find a media query to solve this kind of problem and found three more similar media queries (which I'll explain in a few).&lt;/p&gt;

&lt;p&gt;Here's the HTML code for the card component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
    &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;
    &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;
    &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://bit.ly/35eecgK"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"recentlypublished__post"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; 
        &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://bit.ly/2RUHcr6"&lt;/span&gt;
        &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"cover photo"&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"recentlypublished__img"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"recentlypublished__textbody"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"recentlypublished__date"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;May 30, 2021&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"recentlypublished__title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            You are a developer just like me. No?
        &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"recentlypublished__description"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            In the field of development, you will thrive if you keep
            learning, write good performing clean code, and stay away
            from...
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt;
            &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"
            fa fa-external-link-alt
            recentlypublished__externallinkicon
            "&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the CSS code (without the media query), which you can safely ignore as it is just for styling it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Segoe UI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;Oxygen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Cantarell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Open Sans"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;h6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;box-shadow&lt;/span&gt; &lt;span class="m"&gt;200ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;200ms&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fefefe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;-10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;80ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;250ms&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;#00331c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nc"&gt;.recentlypublished__description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__externallinkicon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#232323&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#202020&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#232323&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="m"&gt;#202020&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="nc"&gt;.recentlypublished__post&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have built a card component that shows text content on the &lt;code&gt;:hover&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; state. Cool!&lt;/p&gt;

&lt;p&gt;Here's a preview that shows &lt;code&gt;:hover&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; state:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brx85l1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623593146381/pZaMcDNDX.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brx85l1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623593146381/pZaMcDNDX.gif" alt="hover and focus demonstration"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-what-happens-on-a-mobile-or-tablet"&gt;
  &lt;/a&gt;
  But what happens on a mobile or tablet?
&lt;/h3&gt;

&lt;p&gt;Most mobile or tablets have a primary input of &lt;strong&gt;touch&lt;/strong&gt; and have no support for hovering. For those mobile users, it would &lt;strong&gt;always&lt;/strong&gt; look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MyFpANEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623576551189/UQGcVDVXt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MyFpANEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623576551189/UQGcVDVXt.png" alt="Mobile Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;THAT is a bad UX. The user would not know the context of that article or link. &lt;/p&gt;

&lt;p&gt;So, we shall now make the text visible to the user whenever the user has no hovering device.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Users can tap and hold the card to activate the hover state, but they have no idea about that invisible content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#introducing-the-raw-anyhover-endraw-media-query"&gt;
  &lt;/a&gt;
  Introducing the &lt;code&gt;any-hover&lt;/code&gt; media query
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;any-hover&lt;/code&gt; is the media query that checks if &lt;strong&gt;ANY available input mechanism&lt;/strong&gt; allows the user to hover over the elements.&lt;/p&gt;

&lt;p&gt;If they do allow hovering, then &lt;code&gt;any-hover: hover&lt;/code&gt; holds true.&lt;/p&gt;

&lt;p&gt;If they do &lt;strong&gt;NOT&lt;/strong&gt; allow hovering, then &lt;code&gt;any-hover: none&lt;/code&gt; holds true.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-raw-anyhover-none-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;any-hover: none&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Just add this code at the &lt;strong&gt;end&lt;/strong&gt; of the previous CSS code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Just for a responsive behaviour */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;460px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__date&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.3rem&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2vw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.38rem&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2vw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.2rem&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2vw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Just for a responsive behaviour */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;280px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* -----any-hover implementation----- */&lt;/span&gt;
&lt;span class="c"&gt;/* if any input device does not have
hover capability then: */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;any-hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;#232323&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;#202020&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__textbody&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;#232323&lt;/span&gt;&lt;span class="n"&gt;cf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="m"&gt;#202020&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__date&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.recentlypublished__description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0rem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Completed Codepen below:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/gautam-tiwari/embed/wvJQKzX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We added a media query &lt;code&gt;any-hover: none&lt;/code&gt; to check if &lt;strong&gt;ANY&lt;/strong&gt; of the available input mechanism does not support hovering (e.g. in a mobile phone there is no hover capable input device OR when a laptop has support for touch then &lt;code&gt;any-hover: none&lt;/code&gt; and &lt;code&gt;any-hover: hover&lt;/code&gt; both holds true). Then, we display the text content if it's true. &lt;/p&gt;

&lt;p&gt;THAT'S IT!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Remember&lt;/strong&gt;: In CSS, whatever comes later gets applied (if it has the same specificity). So, if you mess up with the order of media queries, you may get unexpected results.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#bonus-three-similar-queries-and-their-explanation"&gt;
  &lt;/a&gt;
  BONUS: Three similar queries and their explanation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hover: hover|none&lt;/code&gt;: Same as &lt;code&gt;any-hover&lt;/code&gt; but inquiries only for primary input mechanism.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pointer: fine|coarse|none&lt;/code&gt;: Is the &lt;strong&gt;primary input mechanism&lt;/strong&gt; (provided by the browser) a pointing device, and if so, how accurate is it? (Coarse corresponds to a pointing device with limited accuracy)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;any-pointer: fine|coarse|none&lt;/code&gt;: Same as &lt;code&gt;pointer&lt;/code&gt; but tests for all input devices and holds true if anyone device satisfies the query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-that-summarises-it-all"&gt;
  &lt;/a&gt;
  Table that summarises it all
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;property/situation&lt;/th&gt;
&lt;th&gt;touch only&lt;/th&gt;
&lt;th&gt;cursor&lt;/th&gt;
&lt;th&gt;touch + cursor&lt;/th&gt;
&lt;th&gt;cursor + touch&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hover&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;hover&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;hover&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;any-hover&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;hover&lt;/td&gt;
&lt;td&gt;hover&lt;/td&gt;
&lt;td&gt;hover&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;coarse&lt;/td&gt;
&lt;td&gt;fine&lt;/td&gt;
&lt;td&gt;coarse&lt;/td&gt;
&lt;td&gt;fine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;any-pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;coarse&lt;/td&gt;
&lt;td&gt;fine &amp;amp; coarse&lt;/td&gt;
&lt;td&gt;coarse &amp;amp; fine&lt;/td&gt;
&lt;td&gt;fine &amp;amp; coarse&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#not-for-ie-and-opera-mini"&gt;
  &lt;/a&gt;
  Not for IE and Opera Mini
&lt;/h2&gt;

&lt;p&gt;Browser support is a huge thing when talking about such features.&lt;br&gt;
In 2021, interaction media features (of which &lt;code&gt;any-hover&lt;/code&gt; is a part of) has fairly good support among the browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6xSOtCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623608365464/ARlYuJ2Uq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6xSOtCQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1623608365464/ARlYuJ2Uq.png" alt="Browser support screenshot from caniuse dot com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Here's an &lt;a href="https://css-tricks.com/interaction-media-features-and-their-potential-for-incorrect-assumptions/"&gt;article that explains all this in more detail&lt;/a&gt; by Patrick H. Lauke. It literally covers almost everything you need to know more about these queries.&lt;/p&gt;

&lt;p&gt;Subscribe to my newsletter and get articles like this directly in your inbox every Sunday.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep coding imperfectly. Keep coding experimentally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading. I hope you learned something.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>mediaquery</category>
    </item>
    <item>
      <title>A simple guide to UI/UX design process</title>
      <author>Menard Maranan</author>
      <pubDate>Wed, 16 Jun 2021 14:39:23 +0000</pubDate>
      <link>https://dev.to/menard_codes/a-simple-guide-to-ui-ux-design-process-gan</link>
      <guid>https://dev.to/menard_codes/a-simple-guide-to-ui-ux-design-process-gan</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;This is a journal blogpost of what I learned about User centered design. If you found something is not quite right, please let me know, I love learning from the experience and knowledge of other people!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Maybe you have a good eye for design but struggles to put your creative ideas to a software design.&lt;/p&gt;

&lt;p&gt;Or perhaps you're like me who actually is &lt;em&gt;bad&lt;/em&gt; at design (side note, I'm a developer, and I actually struggle with this, that's why I'm learning the topic with you guys) and want to help ourselves get some idea on how we might design the front end of our software that's intuitive and perhaps pleasing to look at.&lt;/p&gt;

&lt;p&gt;This is when we the UI/UX design process helps us realize our idea of a software that our users will love to use.&lt;/p&gt;

&lt;p&gt;From software requirements, the designer's job is to bridge the business goals and high-level features to the interface of the App that the end-user will actually use.&lt;/p&gt;

&lt;p&gt;In this blog post, we will take a quick look at how we turn the software requirements to designs that are ready for development phase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-design-process"&gt;
  &lt;/a&gt;
  The Design Process
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-user-stories-and-user-persona"&gt;
  &lt;/a&gt;
  1. User stories and User Persona
&lt;/h3&gt;

&lt;p&gt;One of the first things designers do before drafting the look and feel of the app is the User Persona.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_B_OC6_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2br2h8fskxisyqbzune.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_B_OC6_z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2br2h8fskxisyqbzune.png" alt="User Persona"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The designer must understand the business goals as well as the user stories from the Product Backlog (for an Agile environment) and imagine what would the end-user be like.&lt;/p&gt;

&lt;p&gt;In creating the user-persona, we often think of an imaginary person that best represents our target users.&lt;/p&gt;

&lt;p&gt;Let's say for example our software's target user is a Marketer and our software is a task manager app.&lt;/p&gt;

&lt;p&gt;We might imagine we are face to face with this marketer and is with us on the same room as we design the app. Think about that person's descriptions.&lt;/p&gt;

&lt;p&gt;We might list out the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Name&lt;/strong&gt;: Jane&lt;br&gt;
&lt;strong&gt;Role&lt;/strong&gt;: Digital Marketer&lt;br&gt;
&lt;strong&gt;Age&lt;/strong&gt;: 25&lt;br&gt;
&lt;strong&gt;Job responsibilities&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;li&gt;Search Engine Marketing (SEM)&lt;/li&gt;
&lt;li&gt;Social Media Marketing&lt;/li&gt;
&lt;li&gt;Content Marketing&lt;/li&gt;
&lt;li&gt;Email Marketing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That might be a rough example, but a user persona should help you envision your product's user, because this will help you understand how to serve his/her needs via your software.&lt;/p&gt;

&lt;p&gt;Designing is indeed more than drawings and decorations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-information-architecture"&gt;
  &lt;/a&gt;
  2. Information Architecture
&lt;/h3&gt;

&lt;p&gt;The next thing we'll do is to understand the things a user can do with our app. Think of the tasks they can do or what our company wants them to do.&lt;/p&gt;

&lt;p&gt;We then organize those into a hierarchy of information that is logical and user friendly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHoTryRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vg5bg4vwgv11dtxx7npr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHoTryRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vg5bg4vwgv11dtxx7npr.png" alt="Information Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just think of this phase as organizing the data/information like in a library.&lt;/p&gt;

&lt;p&gt;If you're objective as a user is to learn about the what causes solar and lunar eclipse, you might want to first go ahead to the science area, and from there, proceed to astronomy, and find what you're looking for.&lt;/p&gt;

&lt;p&gt;This is the same with the structure of your app.&lt;/p&gt;

&lt;p&gt;First, you lay out the things a user can do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sign-up/Log-in&lt;/li&gt;
&lt;li&gt;Add a note or task&lt;/li&gt;
&lt;li&gt;Change their profile picture&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From there, you start to think how would they accomplish each of those tasks, like for example, change their profile picture.&lt;/p&gt;

&lt;p&gt;Maybe it looks like this:&lt;br&gt;
'User Profile &amp;gt; User Settings &amp;gt; Change Photo'&lt;/p&gt;

&lt;p&gt;From there, you'll see a hierarchy from User profile to the specific Change Photo. We can do this for other tasks as well and build a tree of hierarchy of which task belongs to which category, that belongs to what feature of our product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-sketching"&gt;
  &lt;/a&gt;
  3. Sketching
&lt;/h3&gt;

&lt;p&gt;The first two steps deal with the User Experience which is more business oriented. For this part, we will be starting to get dirty with designing the User Interface or the look and feel of our software.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p03A8MeO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vbm4ek7ow8mvtvgtoc7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p03A8MeO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vbm4ek7ow8mvtvgtoc7.jpg" alt="Sketching software"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that what we're doing here is just a rough sketch of how we envision the software.&lt;/p&gt;

&lt;p&gt;The goal of this step is not to get the final design product, but to start realize how our app might look like.&lt;/p&gt;

&lt;p&gt;We can group several screen sketches together based on the user flow and our goal for that interface.&lt;/p&gt;

&lt;p&gt;This is when our first two works can help us.&lt;/p&gt;

&lt;p&gt;The Information Architecture can serve as our guide for the user flow on the interface we're building, and also group out our sketches based on the hierarchy we made.&lt;/p&gt;

&lt;p&gt;Meanwhile, the User Persona can also give us the glimpse of how our end user might want the look and feel of the software they are using.&lt;/p&gt;

&lt;p&gt;For our marketer persona, we might design a more corporate looking app (just for a rough assumption).&lt;/p&gt;

&lt;p&gt;Just have a rough sketch, and we're good to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-wireframe"&gt;
  &lt;/a&gt;
  4. Wireframe
&lt;/h3&gt;

&lt;p&gt;The next part of our design process is to layout the software.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dpLBjBdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdw6m9jc1i5pdu17lpq7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dpLBjBdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdw6m9jc1i5pdu17lpq7.jpg" alt="wireframe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just think of it as the floor plan of your software. You specify and group the things that make sense together, and isolate those that are not.&lt;/p&gt;

&lt;p&gt;Our Information Architecture can help us understand what parts are needed to group together, as well as the hierarchy of our software.&lt;/p&gt;

&lt;p&gt;This is more of a UX approach, so we keep the business requirements in mind.&lt;/p&gt;

&lt;p&gt;The important thing we need to think of when wireframing is that our design is ideal to be on low-fidelity or lo-fi. We put little details, because our main objective here is to align the business requirements with the elements that best suits those cases, and group things that help achieve that goal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-prototype"&gt;
  &lt;/a&gt;
  5. Prototype
&lt;/h3&gt;

&lt;p&gt;For this part, we start to test out our ideas and design. We can use graphics software like Sketch or Adobe Illustrator to better enhance our rough sketches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SFVIQA0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgkqj6fa0ahbm7iwrda4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SFVIQA0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vgkqj6fa0ahbm7iwrda4.jpg" alt="prototype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is also a good time to show it to our potential user preferably face-to-face and understand how they might feel about the design and criticisms about it.&lt;/p&gt;

&lt;p&gt;You can get insights from 1-5 people that represents your target users.&lt;/p&gt;

&lt;p&gt;The output of this stage (both prototype and feedback) will help us on the next stage of polishing up our design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-visual-design"&gt;
  &lt;/a&gt;
  6. Visual Design
&lt;/h3&gt;

&lt;p&gt;So this is the actual part of the art. We've structured and planned the lay-out o our software, now it's time to make things look good.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---r5N0jbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwdmzmqgbjf89sqs770k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---r5N0jbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwdmzmqgbjf89sqs770k.jpg" alt="visual design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this part, we can get inspirations for our design to several things that may or may not relate to our product but helps to convey it's message to the users (and yes, the business intent will be the message).&lt;/p&gt;

&lt;p&gt;When taking some inspirations, we can go to sites like Pinterest or Instagram and search for the keywords that are related to our software or product.&lt;/p&gt;

&lt;p&gt;Depending on the designer (or you my reader), inspiration is I think more of a personal experience, and I'll let you find that yourself.&lt;/p&gt;

&lt;p&gt;So find inspirations, and make the design look good.&lt;/p&gt;

&lt;p&gt;(This might be vague, but to be honest, I'm not an art person, I'm a dev and my mind is more skewed into logic and engineering stuffs, but that is what I researched about from an interview of a real designer on how she does her real design jobs)&lt;/p&gt;

&lt;p&gt;Anyways...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-higher-fidelity-prototype"&gt;
  &lt;/a&gt;
  7. Higher Fidelity Prototype
&lt;/h3&gt;

&lt;p&gt;Now that the design of our software is more detailed, it is time to add also more details (and even some functionality) to our software by implementing a high fidelity prototype.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PhssPRz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s8x3mquraa5kvltezezz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PhssPRz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s8x3mquraa5kvltezezz.jpg" alt="high fidelity prototype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prototyping software like Figma and Framer are good fit for this part, especially Framer, as it allows you to have interactions such as button clicks and transitions right from your design.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-handover-or-development"&gt;
  &lt;/a&gt;
  8. Handover (or development)
&lt;/h3&gt;

&lt;p&gt;So there we go, we have our software fully designed, we have the assets that will be used by our software for the UI, as well as our design files and design plans and layout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OGmApxb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbc22ymc9myx9fehxt7n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OGmApxb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbc22ymc9myx9fehxt7n.jpg" alt="design files"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is now time to implement this and do the actual coding.&lt;/p&gt;

&lt;p&gt;You might hand it over to the dev team and let a UI Engineer implement it, or if you're also the dev, convert the design into HTML and CSS (and even JavaScript).&lt;/p&gt;

&lt;p&gt;All the output of this design process will help guide the development of the front-end of the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;So there we have it! Design process from high level business requirements to actual design with prototypes.&lt;/p&gt;

&lt;p&gt;As we learned from this simple guide, &lt;strong&gt;design&lt;/strong&gt; is actually more than just choosing the right font or matching color. It's about understanding our users and their needs, and aligning them with the offerings of our product through an intuitive and user-friendly/centered design.&lt;/p&gt;

&lt;p&gt;Hope you found this blog helpful!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to follow me on &lt;a href="https://twitter.com/menard_codes"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
    </item>
    <item>
      <title>10 UI Frameworks for your Next React Project</title>
      <author>Sunny Golovine</author>
      <pubDate>Wed, 16 Jun 2021 14:38:41 +0000</pubDate>
      <link>https://dev.to/sgolovine/10-ui-frameworks-for-your-next-react-project-o6k</link>
      <guid>https://dev.to/sgolovine/10-ui-frameworks-for-your-next-react-project-o6k</guid>
      <description>&lt;p&gt;I'm a developer, not a designer. This means that I use CSS frameworks in most of my side project to make sure they don't look like poop. Here are 10 CSS frameworks that you should consider for your next React project. Some of these are built specifically for react, others are general purpose frameworks that work well with React.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-ui-frameworks"&gt;
  &lt;/a&gt;
  React UI Frameworks
&lt;/h2&gt;

&lt;p&gt;These are UI frameworks that are designed specifically for React. These are great if you are planning a big project or a full featured web app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#material-ui"&gt;
  &lt;/a&gt;
  Material UI
&lt;/h3&gt;

&lt;p&gt;Material UI is a full featured UI framework for React. It has support for every type of UI element from Material design and comes with it's own CSS-in-JS solution for writing CSS. Material UI currently has 68.9k stars on Github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mui-org/material-ui"&gt;Github&lt;/a&gt; | &lt;a href="https://material-ui.com/"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#semantic-ui-react"&gt;
  &lt;/a&gt;
  Semantic UI React
&lt;/h3&gt;

&lt;p&gt;One of the oldest and most feature complete UI frameworks out there. If you need stability and best in class documentation, give Semantic UI a try. Semantic UI React has 12.3k stars on Github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Semantic-Org/Semantic-UI-React"&gt;Github&lt;/a&gt; | &lt;a href="https://react.semantic-ui.com/"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-bootstrap"&gt;
  &lt;/a&gt;
  React Bootstrap
&lt;/h3&gt;

&lt;p&gt;React bootstrap is a rebuilt version of Bootstrap that is made for React. While it has fantastic component support in React, it's not up to version 5 yet. React Bootstrap has 19.5k stars on Github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/react-bootstrap/react-bootstrap"&gt;Github&lt;/a&gt; |  &lt;a href="https://react-bootstrap.github.io/"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fluent-ui-react"&gt;
  &lt;/a&gt;
  Fluent UI React
&lt;/h3&gt;

&lt;p&gt;In recent years Microsoft has quietly sneaked into the React scene and converted Office, and most of their other web apps to React. With such heavy React development, Microsoft has also released a pretty comprehensive UI framework that includes React bindings. Fluent UI has 11.5k stars on Github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/microsoft/fluentui#readme"&gt;Github&lt;/a&gt; | &lt;a href=""&gt;Website&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#css-frameworks"&gt;
  &lt;/a&gt;
  CSS Frameworks
&lt;/h2&gt;

&lt;p&gt;These are CSS frameworks not built specifically for React, but work extremely well inside a React project. These are great if you are building a landing page or a blog and don't need a comprehensive UI framework like you would in a web app, but still need something to lean on for building the pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bulma-css"&gt;
  &lt;/a&gt;
  Bulma CSS
&lt;/h3&gt;

&lt;p&gt;Bulma is a highly customizable CSS frameworks that gives you components for building responsive web pages. BulmaCSS has 43.7k stars on Github as of this writing so it's also safe to say it's a very popular framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jgthms/bulma"&gt;Github&lt;/a&gt; | &lt;a href="https://bulma.io"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-css"&gt;
  &lt;/a&gt;
  Tailwind CSS
&lt;/h3&gt;

&lt;p&gt;TailwindCSS is a utility first CSS framework that is packed with classes to build just about anything. While TailwindCSS is not a React specific UI framework, it integrates very nicely with React.  TailwindCSS has 42.9k stars on Github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tailwindlabs/tailwindcss"&gt;Github&lt;/a&gt; | &lt;a href="https://tailwindcss.com/"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap"&gt;
  &lt;/a&gt;
  Bootstrap
&lt;/h3&gt;

&lt;p&gt;The official version of bootstrap. Not much else to be said here, bootstrap is a legendary CSS framework and just about every front-end dev will touch it as some point. Bootstrap has an impressive 151k stars on Github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/twbs/bootstrap"&gt;Github&lt;/a&gt; |  &lt;a href="https://getbootstrap.com"&gt;Website&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#minimal-css-frameworks"&gt;
  &lt;/a&gt;
  Minimal CSS Frameworks
&lt;/h2&gt;

&lt;p&gt;While these are still CSS frameworks, I decided to put them into a different category because they serve a different purpose. If you want to put a webpage up with speed or just want to build and MVP without investing too much time, these minimal UI frameworks will help you get there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mvpcss"&gt;
  &lt;/a&gt;
  MVP.css
&lt;/h3&gt;

&lt;p&gt;A classless CSS framework that gives you some reasonable defaults to get started with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/andybrewer/mvp/"&gt;Github&lt;/a&gt; | &lt;a href="https://andybrewer.github.io/mvp/"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#w3-core-styles"&gt;
  &lt;/a&gt;
  W3 Core Styles
&lt;/h3&gt;

&lt;p&gt;If you prefer to get your CSS styles directly from the source, look no further. While not the prettiest styles, these certainly work for some types of sites and you can bet that they will work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/StyleSheets/Core/Overview"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bamboo-css"&gt;
  &lt;/a&gt;
  Bamboo CSS
&lt;/h3&gt;

&lt;p&gt;A classless CSS library that adds nice defaults to HTML elements, and uses normalize.css and sanitize.css under the hood for a consistent experience and supports dark mode with automatic theme detection out of the box&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rilwis/bamboo"&gt;Github&lt;/a&gt; | &lt;a href="https://rilwis.github.io/bamboo/demo/"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#water-css"&gt;
  &lt;/a&gt;
  Water CSS
&lt;/h3&gt;

&lt;p&gt;Water CSS is another classless CSS framework that gives you dark mode out of the box, gives you way better form elements and improves typography. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kognise/water.css"&gt;Github&lt;/a&gt; | &lt;a href="https://watercss.kognise.dev/"&gt;Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;​ &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why build Single Page Apps in Blazor</title>
      <author>David Pine</author>
      <pubDate>Wed, 16 Jun 2021 14:14:16 +0000</pubDate>
      <link>https://dev.to/dotnet/why-build-single-page-apps-in-blazor-103m</link>
      <guid>https://dev.to/dotnet/why-build-single-page-apps-in-blazor-103m</guid>
      <description>&lt;p&gt;📚 In this post, we'll address some common Blazor questions. Specifically, the "what?", but more importantly the "why?". Why should I care about Blazor when we've already got Angular, React, Vue, or some other JavaScript framework? Why choose Blazor, and what is WebAssembly all about?  We'll cover the history of Microsoft's web application development frameworks and what we see for its bright future 🔮.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-blazor"&gt;
  &lt;/a&gt;
  🔥 What is Blazor?
&lt;/h2&gt;

&lt;p&gt;There are several common definitions for Blazor, the first of which is rather straightforward:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Blazor is a &lt;em&gt;framework&lt;/em&gt; for building interactive client-side web UI with .NET."&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://docs.microsoft.com/aspnet/core/blazor?wt.mc_id=dapine"&gt;Microsoft docs: Blazor&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the official docs state, it's a "framework" first — and it's used to build client-side web UI. But how is that different from any other client-side framework for building web UI, and what makes it so special? I'm hopeful that you're asking yourself, "does .NET make a difference?".&lt;/p&gt;

&lt;p&gt;Here's another definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Blazor is a &lt;em&gt;free&lt;/em&gt; and &lt;em&gt;open-source&lt;/em&gt; web framework that enables developers to create web apps using C# and HTML."&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://wikipedia.org/wiki/Blazor"&gt;Wikipedia: Blazor&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh, it's free — that's nice. But to be fair, there are plenty of other &lt;em&gt;free&lt;/em&gt; frameworks for building client-side web UI. Why should I care about Blazor?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-why-blazor"&gt;
  &lt;/a&gt;
  ⁉ Why Blazor?
&lt;/h2&gt;

&lt;p&gt;Historically, all of the prior web UI frameworks from Microsoft were based on an entirely different architecture and were rendered on the server-side. Blazor set out to bring C# development to the web client, and this was only going to be possible with the advent of WebAssembly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications."&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://webassembly.org"&gt;webassembly.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🤓 Wow, that sounds like a mouthful! Let's break that down a bit:&lt;/p&gt;

&lt;p&gt;A "binary instruction format" in this case means that it's byte code, taking your abstract syntax tree (AST) from your non-JavaScript programming language and converting it to binary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZudLOBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz8f8jgf8a1kzes24hza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZudLOBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rz8f8jgf8a1kzes24hza.png" alt="AST to binary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wasm sits atop a "stack-based virtual machine" — this identifies the core functionality which is "push" ⬇ and "pop" ⬆ based. Instructions are pushed, and evaluations are popped. While this is an oversimplification, the concepts remain and the implementation details are less important. There are limitations with being single-threaded, applied memory constraints, and so on, but concerns are deemphasized as Blazor manages the interop to Wasm.&lt;/p&gt;

&lt;p&gt;It's very important to call attention to the fact that Wasm is a "portable compilation target" 🎯. This means it's possible to take C, C++, Rust, C#, and other non-traditional web programming languages and target Wasm for their compilation. This results in Wasm binaries, which are web-ready based on open standards but from programming languages other than JavaScript.&lt;/p&gt;

&lt;p&gt;To be clear, there is JavaScript interop and there are even different hosting models for Blazor — server-side or client-side with Wasm. More on that later...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-javascript"&gt;
  &lt;/a&gt;
  😵 What about JavaScript?
&lt;/h3&gt;

&lt;p&gt;Is Wasm the death 💀 of JavaScript, what does this mean? The answer is no. JavaScript isn't going anywhere — and Wasm should be considered complementary to JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KT4-assw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2yvrkicmlwi5kye6nec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KT4-assw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f2yvrkicmlwi5kye6nec.png" alt="WebAssembly and JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"It is expected that JavaScript and WebAssembly will be used together in a number of configurations"&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://webassembly.org/docs/faq"&gt;webassembly.org: FAQ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#the-analogy"&gt;
  &lt;/a&gt;
  🆕 The analogy
&lt;/h4&gt;

&lt;p&gt;Thanks to Wasm, the web browser has a few of its perceived limitations lifted, and this is why I believe:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"With WebAssembly, web browsers are more like app stores — where the end-user experience is more near-native performance."&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://davidpine.net"&gt;David Pine&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are seemingly countless &lt;a href="https://webassembly.org/docs/use-cases"&gt;new use cases&lt;/a&gt; specific to Wasm that were not realistically achievable with JavaScript alone. It's easy to imagine applications being delivered over the web to your browser, powered by Wasm for more elaborate and resource-intensive use cases. This is why I believe it's a paradigm shift in what's possible with the web application platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%F0%9F%97%BA-adoption"&gt;
  &lt;/a&gt;
  🗺 Adoption
&lt;/h3&gt;

&lt;p&gt;Wasm is supported in all major browsers, and covers nearly 93% of all users — &lt;a href="https://caniuse.com/?search=webassembly"&gt;Can I use "WebAssembly"&lt;/a&gt;. This isn't the same plugin-based approach that Silverlight relied on. It's the future of the web, and you'll continue to see developers building applications using this technology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#safe-and-secure"&gt;
  &lt;/a&gt;
  🔒 Safe and secure
&lt;/h3&gt;

&lt;p&gt;Wasm is every bit as secure as JavaScript.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"WebAssembly describes a memory-safe, sandboxed execution environment that may even be implemented inside existing JavaScript virtual machines. When embedded in the web, WebAssembly will enforce the same-origin and permissions security policies of the browser."&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://webassembly.org"&gt;webassembly.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, Wasm is confined to play within the same security sandbox as JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BlKhyPID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cvseotj7t53i0kuhxsb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BlKhyPID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4cvseotj7t53i0kuhxsb.png" alt="JavaScript security sandbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-application-platform"&gt;
  &lt;/a&gt;
  ✨ Web application platform
&lt;/h3&gt;

&lt;p&gt;With modern web application development, you want your apps to be responsive on both desktop and mobile browsers. Modern web apps are much more sophisticated and rich in content than their predecessors, with feature expectations of real-time web functionality, progressive web app (PWA) capabilities, and beautifully orchestrated user interactions. For the first time, .NET developers can use their existing C# skills to build all sorts of apps on the web. In my opinion, this helps blur the lines between backend and frontend developers — but more broadly expands app development through the web. I believe the philosophy of using the same programming language on the client and server leads to more rapid adoption, and Node.js comes to mind specifically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#familiarity"&gt;
  &lt;/a&gt;
  ➕ Familiarity
&lt;/h3&gt;

&lt;p&gt;It's easy to press upon the fact you can use your existing C# skills, but it's often an oversight &lt;em&gt;not&lt;/em&gt; to call attention to the fact that there is still HTML, CSS, and JavaScript. In this way, you can keep using your HTML and CSS skills, your favorite CSS libraries, and you're free to work smoothly with existing JavaScript packages. After all, you're still building web apps!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brief-history"&gt;
  &lt;/a&gt;
  🕓 Brief history
&lt;/h3&gt;

&lt;p&gt;In the early days - back in 1996, &lt;a href="https://wikipedia.org/wiki/Active_Server_Pages"&gt;Active Server Pages (ASP)&lt;/a&gt; offered the first server-side scripting language and engine for dynamic web pages from Microsoft. As .NET Framework evolved, ASP.NET was born, and with it — Web Forms emerged. Web Forms was (and still is) used by many that enjoy what .NET is capable of, and it allowed for server-side rendering of HTML.&lt;/p&gt;

&lt;p&gt;Sometime later, ASP.NET Model View Controller (MVC) was introduced and it made Web Forms look sluggish. MVC brought ASP.NET developers closer to the metal. Suddenly, they had to understand the 3 pillars of the web; HTML, CSS, and JavaScript. In MVC, there was simply a closer alignment to web standards. MVC also added a different programming model, which was based on controllers and views. This helped to address some resistance from the developer community, where developers took notice that their development interactions with Web Forms weren't stateless — an illusion from the framework which contradicted the nature of HTTP.&lt;/p&gt;

&lt;p&gt;ASP.NET Web API grew in popularity, and developers embraced the power of .NET. Web API started being accepted as the standard for building .NET-based HTTP services.&lt;/p&gt;

&lt;p&gt;Eventually, leveraging the Razor view engine from MVC — Razor Pages took to the stage. Innovations from ASP.NET Core made a lot of this possible.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"ASP.NET Core is a cross-platform, high-performance, open-source framework for building modern, cloud-enabled, Internet-connected apps."&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://docs.microsoft.com/aspnet/core/introduction-to-aspnet-core?wt.mc_id=dapine"&gt;Microsoft docs: Introduction to ASP.NET Core&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ASP.NET Core offers first-class citizenship to all of the fundamentals you'd expect in modern development such as (but not limited to), dependency injection, strongly-typed configurations, logging, globalization and localization, authentication, and hosting.&lt;/p&gt;

&lt;p&gt;Razor Pages converged controllers and views into being a bit more logically cohesive, leaning more towards true components, and building on Web API infrastructure.&lt;/p&gt;

&lt;p&gt;After Razor Pages came Blazor. The name "Blazor" is a play on words, combining &lt;strong&gt;B&lt;/strong&gt;rowser and &lt;strong&gt;R&lt;/strong&gt;azor, because as developers' were good at naming things — am I right? 🤣 That's where we are today, in a world with Blazor and all of its capabilities. The first of its kind for .NET, a single-page application framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singlepage-application-spa"&gt;
  &lt;/a&gt;
  Single-Page Application (SPA)
&lt;/h3&gt;

&lt;p&gt;Blazor is the only .NET-based SPA framework from Microsoft. There are many popular SPA frameworks including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The primary differentiator is that these are &lt;em&gt;all&lt;/em&gt; based on JavaScript, not Wasm.&lt;/p&gt;

&lt;p&gt;Sometimes developers building applications with Blazor confuse the differences in the two hosting models. There are misconceptions that  Blazor Server (server-side) is not a SPA. The server-side nature feels more like the previous non-SPA .NET web app frameworks. But let's look to the definition of a SPA:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A single-page application (SPA) is a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of a web browser loading entire new pages"&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://wikipedia.org/wiki/Single-page_application"&gt;Wikipedia: Single-page applications&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Regardless of the hosting model, Blazor satisfies this definition. With Blazor Server, the server exposes a &lt;a href="https://docs.microsoft.com/aspnet/core/tutorials/signalr?wt.mc_id=dapine"&gt;SignalR&lt;/a&gt; hub with a specific &lt;em&gt;Blazor&lt;/em&gt; protocol which is responsible for communicating updates to the document object model (DOM) in the client app in real-time. When there are differences (or deltas) in the DOM, the changes are reflected immediately.&lt;/p&gt;

&lt;p&gt;In Blazor WebAssembly, when the client requests the app it is served up as a bit of HTML, CSS, and JavaScript — like all other web apps. The &lt;em&gt;blazor.webassembly.js&lt;/em&gt; file bootstraps the app and starts loading .NET binaries which can be viewed coming over the wire in the browser's &lt;strong&gt;Network&lt;/strong&gt; tab.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  💜 Open source
&lt;/h3&gt;

&lt;p&gt;It's developed in the open, as part of the ASP.NET Core GitHub repository.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dotnet"&gt;
        dotnet
      &lt;/a&gt; / &lt;a href="https://github.com/dotnet/aspnetcore"&gt;
        aspnetcore
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ASP.NET Core is a cross-platform .NET framework for building modern cloud-based web applications on Windows, Mac, or Linux.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I'm a huge proponent of open-source software development. To me, being able to openly see how a feature is architected, designed, and implemented is a game-changer. The ability to post issues, propose features, collaborate with the dev team and others, and create pull requests makes the software community-centric. This ultimately makes for a better product, without question!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%99%BB-code-reuse"&gt;
  &lt;/a&gt;
  ♻ Code reuse
&lt;/h3&gt;

&lt;p&gt;SPA developers have been fighting a losing battle for years, where web API endpoints define a payload in a certain shape — and the developer has to understand the shape of each endpoint, ideally mapping to a model on the client. This is a very tedious process and is error-prone. Blazor can alleviate that concern by sharing models from .NET Web APIs, with the Blazor client app.&lt;/p&gt;

&lt;p&gt;💡 Entire .NET libraries can be shared, and consumed in both server-side and client-side scenarios. Making use of existing logic, functionality, and capabilities allows for developers to focus on innovating more as they're not required to re-invent the wheel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%F0%9F%9B%A0-tooling"&gt;
  &lt;/a&gt;
  🛠 Tooling
&lt;/h3&gt;

&lt;p&gt;Productivity of the development team is always a major concern for application development of all kinds. The developer tools that exist are key to success, if your team fumbles about or struggles to get common programming tasks done — the entire project can fail. With Blazor development, you can use proven developer tooling such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://visualstudio.microsoft.com/vs/?wt.mc_id=dapine"&gt;Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://visualstudio.microsoft.com/vs/mac/?wt.mc_id=dapine"&gt;Visual Studio for Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/?wt.mc_id=dapine"&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, the &lt;a href="https://docs.microsoft.com/dotnet/core/tools/?wt.mc_id=dapine"&gt;.NET CLI&lt;/a&gt; comes to mind and has become a productivity powerhouse, with &lt;code&gt;new&lt;/code&gt; (templating), &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;restore&lt;/code&gt;, &lt;code&gt;publish&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;pack&lt;/code&gt;, and &lt;code&gt;migrate&lt;/code&gt; commands (to name a few) — you're likely to find success.&lt;/p&gt;

&lt;p&gt;✔ All of this built with the most powerful and modern programming language in the world today, of course, my opinion on that matter being C#.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#net-apis"&gt;
  &lt;/a&gt;
  🌐 .NET APIs
&lt;/h3&gt;

&lt;p&gt;As a developer with more than a decade of real-world web application development experience, I can safely say that I have reliably used .NET for enterprise development of production applications time and time again. The API surface area of .NET alone is massive, and as an ecosystem with third-party packages from NuGet what's not to love?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-does-that-matter"&gt;
  &lt;/a&gt;
  ❔ Why does that matter?
&lt;/h4&gt;

&lt;p&gt;I recently witnessed a .NET API being developed, from its inception to fruition — and the process I observed is very mature and well established.&lt;/p&gt;

&lt;p&gt;Keep in mind this happens entirely in the open, for the public to see. It started with early discussions and then an idea emerged, this led to an official proposal in the form of a GitHub issue. The issue captured everything you'd expect for the proposal, the problem statement, use cases, example syntax, suggested API surface area, example usage, and even links to the comments from the original discussion and idea.&lt;/p&gt;

&lt;p&gt;The proposal was discussed and hashed out, there was much bargaining, reasoning, and negotiation. Then came a draft which was finalized from a group of people who participated in the public API design review meeting. The official .NET API design review meeting follows a &lt;a href="https://apireview.net/schedule"&gt;weekly schedule&lt;/a&gt;. As part of the review, notes are captured, GitHub labels applied, and a stamp of approval is given — and with that, the .NET API in question is codified as a snippet.&lt;/p&gt;

&lt;p&gt;From there, the issue serves as a point of reference for pull requests that aim to satisfy the proposal. A developer takes the issue, implements the API, writes unit tests, and creates a pull request (PR). The PR undergoes review, and when it's merged the API has to be documented, communicated, breaking-changes captured/reported, promoted, shared, analyzed, and so on.&lt;/p&gt;

&lt;p&gt;All of this, for a single .NET API and there are tens of thousands of .NET APIs 😲. You're in good hands, with the strength of all the .NET contributors holding you up. For more information, see the &lt;a href="https://github.com/dotnet/runtime/blob/main/docs/project/api-review-process.md"&gt;official API review process&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I asked a friend of mine who holds the .NET API near and dear to his heart for a few choice words on the subject:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The .NET platform prides itself on having a great set of APIs that are very usable and make you extremely productive no matter what kind of application you're building. With Wasm, this power is now also available when you build browser-based applications using Blazor WebAssembly."&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://twitter.com/terrajobst"&gt;Immo Landwerth&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  🆘 Support
&lt;/h3&gt;

&lt;p&gt;With all .NET products, there are various support policies in place. Understanding the lifecycles of releases, and their corresponding support policy is often a crucial consideration for development teams. For the most part, it's recommended to build production-ready applications targeting a &lt;em&gt;Long Term Support (LTS)&lt;/em&gt; release of .NET. However, some companies and development teams choose to track &lt;em&gt;Current&lt;/em&gt; (or even &lt;em&gt;Preview&lt;/em&gt;) releases — they tend to migrate more aggressively. For more information, see the official .NET site for support details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dotnet.microsoft.com/platform/support/policy?wt.mc_id=dapine"&gt;.NET Support Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotnet.microsoft.com/platform/support/policy/dotnet-core?wt.mc_id=dapine"&gt;What's covered&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#developer-community"&gt;
  &lt;/a&gt;
  🤝 Developer community
&lt;/h3&gt;

&lt;p&gt;I asked a few Blazor developer community friends for their thoughts, and offered to share them as a quote when asked "Why Blazor?":&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Blazor's component model makes building apps a joy. It's simple to get going but offers lots of customization when you need it.&lt;/p&gt;

&lt;p&gt;— Chris Sainty &lt;a class="mentioned-user" href="https://dev.to/chrissainty"&gt;@chrissainty&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I agree with Chris. There's much joy in developing apps that are simple and customizable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;.NET productivity. I can use my existing skills, workflow, tools, and previously written libraries. There's no &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;webpack&lt;/code&gt;, instead, I have the .NET stack and its ecosystem, which makes me super productive.&lt;/p&gt;

&lt;p&gt;— Ed Charbeneau &lt;a class="mentioned-user" href="https://dev.to/edcharbeneau"&gt;@edcharbeneau&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I couldn't agree more with Ed. Productivity is a critical driving factor — and not having to write a lot of JavaScript certainly eases the pain of web development 😬.&lt;/p&gt;

&lt;p&gt;The Blazor developer community is thriving:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AdrienTorris/awesome-blazor"&gt;Awesome Blazor: A collection of Blazor resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AdrienTorris/awesome-blazor"&gt;Awesome Blazor Browser: Search Awesome Blazor resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blazorday.net"&gt;Blazor Day: 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#promising-future"&gt;
  &lt;/a&gt;
  🎉 Promising future
&lt;/h3&gt;

&lt;p&gt;In addition to the amazing Blazor developer community, developer tooling, open-source ecosystem, and strong opinions from respected industry leaders, there's also an entire UI component movement from the leading component vendors whom of which are actively building out Blazor components (in alphabetical order):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.devexpress.com/blazor"&gt;DevExpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.grapecity.com/componentone/blazor-ui-controls"&gt;GrapeCity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infragistics.com/products/ignite-ui-blazor"&gt;Infragistics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blazor.radzen.com"&gt;Radzen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.htmlelements.com/blazor"&gt;Smart HTML Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.syncfusion.com/blazor-components"&gt;Syncfusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.telerik.com/blazor-ui"&gt;Telerik&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#%E2%9C%94-customer-stories"&gt;
  &lt;/a&gt;
  ✔ Customer stories
&lt;/h3&gt;

&lt;p&gt;Whenever Microsoft has customers who are excited to share their stories, they speak for themselves — here are two Blazor success stories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://customers.microsoft.com/en-us/story/816181-ge-aviation-manufacturing-azure"&gt;GE Aviation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://customers.microsoft.com/en-us/story/1338933582129668706-the-postage-professional-services-azure"&gt;The Postage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  👀 Code
&lt;/h3&gt;

&lt;p&gt;To quickly create a Blazor WebAssembly project, use the &lt;a href="https://docs.microsoft.com/dotnet/core/tools/dotnet-new-sdk-templates#blazorwasm?wt.mc_id=dapine"&gt;&lt;code&gt;dotnet new blazorwasm&lt;/code&gt; .NET CLI command&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the preceding command, we specified the name (&lt;code&gt;-n&lt;/code&gt;) of the project, and that we didn't want a restore. If you're to open the &lt;em&gt;Pages/Counter.razor&lt;/em&gt; file, you'll see some Razor code similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;@page "/counter"

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Counter&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Current count: @_currentCount&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"IncrementCount"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     Click me
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

@code {
    private int _currentCount = 0;

    private void IncrementCount() =&amp;gt;
        ++ _currentCount;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a simple counter page. It is considered a &lt;em&gt;page&lt;/em&gt; rather than a &lt;em&gt;component&lt;/em&gt; due to its &lt;code&gt;@page&lt;/code&gt; directive, which specifies the page route of &lt;code&gt;"/counter"&lt;/code&gt;. Since this is based on the Razor view engine, it serves as a template — where you can reference C# code variables in the HTML. This also demonstrates the use of the &lt;code&gt;@code { ... }&lt;/code&gt; directive, which lets you embed C# functionality directly within the template file. The &lt;code&gt;_currentCount&lt;/code&gt; variable is &lt;code&gt;private&lt;/code&gt; and scoped to the page, and incremented from the &lt;code&gt;IncrementCount&lt;/code&gt; method. This method is called from on the clicking of the button and is bound via the &lt;code&gt;@onclick&lt;/code&gt; event. As the &lt;code&gt;_currentCount&lt;/code&gt; value increments, the changes are reflected immediately where they're bound. In this case, they are displayed within a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element as the "Current count".&lt;/p&gt;

&lt;p&gt;The counter page is just a small example of what's possible, and there are plenty of amazing opportunities for you as a web developer. I'm hopeful that you'll consider .NET for your next web app development project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  🔚 Summary
&lt;/h2&gt;

&lt;p&gt;There are many tools for you as a developer to choose from. With all developer decisions, when deciding whether or not to use a framework should be a &lt;em&gt;team decision&lt;/em&gt;. Blazor is another tool and does not apply to all use cases — knowing &lt;em&gt;when&lt;/em&gt; to use it is just as important as knowing &lt;em&gt;how&lt;/em&gt; to. In this post, we discussed the "what" and the "why". The "how" already has plenty of coverage.&lt;/p&gt;

&lt;p&gt;Please consider the additional resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/aspnet/core/blazor?wt.mc_id=dapine"&gt;Introduction to ASP.NET Core Blazor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/aspnet/core/blazor/hosting-models?wt.mc_id=dapine"&gt;Blazor hosting models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/aspnet/core/blazor/javascript-interoperability?wt.mc_id=dapine"&gt;Blazor JavaScript interop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/aspnet/core/blazor/webassembly-performance-best-practices?wt.mc_id=dapine"&gt;Blazor WebAssembly performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>webdev</category>
      <category>aspnet</category>
    </item>
  </channel>
</rss>
