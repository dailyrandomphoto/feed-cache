<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Being a developer at a startup is actually pretty great</title>
      <author>Daniel Kaczmarczyk</author>
      <pubDate>Tue, 22 Jun 2021 20:31:10 +0000</pubDate>
      <link>https://dev.to/koan/being-a-developer-at-a-startup-is-actually-pretty-great-3n5m</link>
      <guid>https://dev.to/koan/being-a-developer-at-a-startup-is-actually-pretty-great-3n5m</guid>
      <description>&lt;p&gt;You‚Äôre a developer who is looking for their next role and you are thinking about what kind of companies to talk to. One of the first decisions you have to make is whether to join a startup or a bigger, more established company. Here‚Äôs a quick case for startups:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#biggest-incentives"&gt;
  &lt;/a&gt;
  Biggest Incentives
&lt;/h2&gt;

&lt;p&gt;The earlier you are joining the company, the higher the financial benefits can be. If the startup does well, your share options can be worth a lot of money. The people you‚Äôre going to work with are often very entrepreneurial and innovative (and since you‚Äôre reading this article, you probably are too). You can learn a lot being around other creators, sharing ideas, and discussing things openly. It‚Äôs a stark contrast to more corporate processes and environments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-get-a-lot-of-stuff-done"&gt;
  &lt;/a&gt;
  You get a lot of stuff done!
&lt;/h2&gt;

&lt;p&gt;It‚Äôs not all paperwork and sitting in meetings. At a startup ‚Äúagile‚Äù is an adjective ‚Äî not a time-suck. We release our software early and often, and maintain a very short cycle between pull requests and releases. It‚Äôs a very exciting environment, with a lot of opportunity to see your work come to life ‚Äî and fast! Working for a company that wins a startup competition feels differently than being one of 5000 employees in a giant conglomerate. Although I‚Äôve only experienced the former, I can extrapolate that getting 20% of the credit feels better than getting 0.002% credit.&lt;/p&gt;

&lt;p&gt;If you‚Äôre joining a startup, you can also expect to be able to influence the technology choices, the culture, and many other things that you would not be able to influence otherwise. Most of the processes are a blank slate, which require you to take charge and make the calls yourself. This includes a lot of things ‚Äî hiring decisions, processes, technologies, and the list goes on and on.&lt;/p&gt;

&lt;p&gt;Another great aspect of working at a smaller company is that you‚Äôre much closer to the folks who use your product. Being able to more easily obtain feedback is a gift to help build things that closely align with your user base.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accelerate-your-career"&gt;
  &lt;/a&gt;
  Accelerate your career
&lt;/h2&gt;

&lt;p&gt;At a startup, you have a big impact as an individual contributor. If you‚Äôre joining a team of 5 engineers, you‚Äôll become ~17% of the team, and your work and ideas carry a lot of weight. Taking on this responsibility gives you an opportunity to hone your skills, master more parts of the stack, and gain confidence and great experience. Opportunity presents itself where responsibility is dropped, or, as it is in many startups ‚Äî where someone did not claim responsibility for something yet. There is a lot of joy in diving into a codebase and finding a part of it that can be made better, and there‚Äôs no one but you to guide that part of the project.&lt;/p&gt;

&lt;p&gt;This sounds exciting ‚Ä¶ For some people. Responsibility is a double-edged sword. Being an owner of a feature comes with being able to rule over your domain, but you also need to answer for your decisions. However, most of the time, it‚Äôs very beneficial and a great learning opportunity to lead features and projects. You learn a lot of important lessons very quickly, like having to deal with a lot of existing codebase‚Ä¶ Most of it, written by you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mentorship-and-learning"&gt;
  &lt;/a&gt;
  Mentorship and Learning
&lt;/h2&gt;

&lt;p&gt;Mentorship is critical to accelerating your career. Often your manager (who may be your CTO too), will be in charge of a small team, resulting in a lot of attention given to you. In a corporate role, it‚Äôs not unheard of to be talking to your manager as infrequently as once a month, for an hour. In contrast, it‚Äôs common practice in a startup to give you both a lot of 1:1 time and opportunities to better your craft through their feedback and help.&lt;/p&gt;

&lt;p&gt;With that kind of support and independence, you will find yourself being empowered to choose the projects you want to work on, and choose how exactly you want to do them. From creating a new internal service in a language you like the most, adopting a pattern that you enjoy working with, to suggesting marketing copy changes, the startup life is rife with opportunities to do things the way you like it.&lt;/p&gt;

&lt;p&gt;Another important consideration in whether or not you‚Äôre ready for this kind of job is your willingness to teach yourself anything. Since the team is quite small, even when your mentor makes themselves very available, there will still be a lot of things that you will have to pick up on your own. Where a big company would provide you with a rigorous and lengthy training program, in a startup most often you‚Äôll find yourself having to not only teach yourself what‚Äôs necessary, but also figuring out what it is that you have to learn to fill in the gaps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bad-rap"&gt;
  &lt;/a&gt;
  The bad rap
&lt;/h2&gt;

&lt;p&gt;Startups often get a bad rap. When people complain about working for startups, they often mention long hours and low pay, lousy culture (and no HR department to fix it), opportunity for employees to burnout quickly, and general chaos. As much as many of those points are true for some companies, they‚Äôre not exclusive to startups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;Working at a startup is likely going to be rewarding. The connections you will make with other people are going to be invaluable, and most startups are much more lenient in letting you choose how to do your work, whether that means choosing all of your equipment or setting up your hours according to your lifestyle and preferences. You‚Äôll develop your decisiveness, communication, and adaptability skills. And that‚Äôs all on top of the broad spectrum of technical skills you‚Äôll pick up along the way, alongside with a great job title and a list of achievements that you can confidently say were yours.&lt;/p&gt;




&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/deeheber"&gt;Danielle Heberling&lt;/a&gt; for helping out with the content.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@israelandrxde"&gt;Israel Andrade&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>La Cascada en CSS: Qu√© es y c√≥mo funciona</title>
      <author>Lupita Code üåÑ</author>
      <pubDate>Tue, 22 Jun 2021 20:13:42 +0000</pubDate>
      <link>https://dev.to/lupitacode/la-cascada-en-css-que-es-y-como-funciona-31cd</link>
      <guid>https://dev.to/lupitacode/la-cascada-en-css-que-es-y-como-funciona-31cd</guid>
      <description>&lt;p&gt;¬°Hola gente bonita!üëã&lt;/p&gt;

&lt;p&gt;¬øAlguna vez has escrito una propiedad CSS y el valor no parece funcionar? Tal vez tuviste que recurrir al uso de &lt;code&gt;!important&lt;/code&gt; para que funcionara. O quiz√°s hayas recurrido a escribir el CSS inline en el elemento del archivo HTML. Por lo general, el problema puede ser que has creado dos reglas que podr√≠an aplicarse al mismo elemento.&lt;/p&gt;

&lt;p&gt;El CSS consiste en declarar reglas: Bajo varias condiciones, queremos que ocurran ciertas cosas. Si esta clase se a√±ade a ese elemento, aplique estos estilos. Si el elemento X es hijo del elemento Y, aplica estos estilos. El navegador toma estas reglas, calcula cu√°les se aplican y d√≥nde se van aplicar, y las utiliza para representarlas en la p√°gina web.&lt;/p&gt;

&lt;p&gt;üëâ Recuerda que el aspecto final de una p√°gina web es el resultado de reglas de estilo diferentes.&lt;/p&gt;

&lt;p&gt;Pero, ¬øQu√© es una regla en la sintaxis de CSS? ü§î Puede que no est√©s familiarizado con el vocabulario en CSS, pero como voy a utilizar este t√©rmino a lo largo del articulo, es mejor tener claro lo que significa: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Una regla tambi√©n conocida como estilo, es una colecci√≥n de declaraciones dirigidas a uno o m√°s selectores, una hoja de estilo se compone de m√∫ltiples reglas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si quieres aprender sobre la terminolog√≠a en CSS, he publicado un post ilustrativo en mi Instagram:&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CMuymmQjkX4/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;


&lt;p&gt;El primer paso es entender c√≥mo el navegador da importancia a sus reglas. Por ejemplo, puedes encontrarte con que una de tus reglas no hace lo que esperabas porque otra regla entra en conflicto con ella. Predecir c√≥mo se comportan las reglas requiere comprender la cascada.&lt;/p&gt;

&lt;p&gt;Cuando dos o m√°s reglas se dirigen al mismo elemento, las reglas pueden proporcionar declaraciones contradictorias. En el siguiente ejemplo se muestra tres conjuntos de reglas, cada uno de los cuales especifica un estilo de fuente diferente para el t√≠tulo de la p√°gina. El t√≠tulo NO puede tener tres fuentes diferentes a la vez. Entonces, ¬øC√≥mo sabe CSS que estilo aplicar? ü§î o ¬øCu√°l tiene prioridad sobre los dem√°s? Aqu√≠ es donde utilizamos la cascada.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 class="title" id="page-title"&amp;gt;Lupita Code&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 {
    font-family: serif;
}

#page-title {
    font-family: sans-serif;
}

.title {
    font-family: monospace;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Los tres conjuntos de reglas intentan establecer una familia de fuentes diferente para este encabezado &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;. ¬øCu√°l de ellas ganar√°? ü§î. Para determinar la respuesta, el navegador (para saber que estilos tiene prioridad sobre los dem√°s) sigue una serie de reglas o pasos (en orden) que son: Origen de la hoja de estilo, especificidad de los selectores y orden en que se declaran los estilos. Estos conceptos lo vamos a explicar m√°s adelante.&lt;/p&gt;

&lt;p&gt;En este caso, las reglas dictan que la segunda declaraci√≥n, que tiene un selector ID gana; el t√≠tulo tendr√° una fuente &lt;code&gt;sans-serif&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZieHt2BR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is2hkov84bbwonnv4pbk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZieHt2BR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/is2hkov84bbwonnv4pbk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cuando se observan ejemplos peque√±os, este proceso suele ser sencillo. Pero a medida que tu hoja de estilos crece, o el n√∫mero de p√°ginas a las que les aplicas aumenta, tu c√≥digo puede volverse complejo con sorprendente rapidez.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qu%C3%A9-es-la-cascada"&gt;
  &lt;/a&gt;
  ü§î ¬øQu√© es la cascada?
&lt;/h2&gt;

&lt;p&gt;La cascada es un grupo de reglas para determinar qu√© propiedades de estilo se aplican a un elemento. Especifica c√≥mo el navegador debe manejar m√∫ltiples estilos que se aplican a la misma etiqueta HTML y qu√© hacer cuando las propiedades CSS entran en conflicto. La cascada es una parte fundamental del funcionamiento del lenguaje.&lt;/p&gt;

&lt;p&gt;Los conflictos de estilo se producen en dos casos: por herencia y cuando uno o m√°s estilos se aplican al mismo elemento.&lt;/p&gt;

&lt;p&gt;Cabe mencionar que las iniciales de CSS significan &lt;strong&gt;C&lt;/strong&gt;ascading &lt;strong&gt;S&lt;/strong&gt;tyle &lt;strong&gt;S&lt;/strong&gt;heets (Hojas de Estilo en Cascada), y es muy importante entender la palabra cascada ya que como podr√°s darte cuenta forma parte del propio nombre.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;En cascada se refiere a la forma en que CSS aplica un estilo encima de otro.&lt;/li&gt;
&lt;li&gt;Las hojas de estilo controlan la apariencia de los documentos web.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos decir entonces que &lt;strong&gt;la cascada es el algoritmo para resolver conflictos cuando se aplican varias reglas CSS a un elemento HTML&lt;/strong&gt;. La forma en que se comporta la cascada es la clave para comprender el CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#las-4-etapas-de-la-cascada"&gt;
  &lt;/a&gt;
  üîº Las 4 etapas de la cascada
&lt;/h2&gt;

&lt;p&gt;Entender el algoritmo de cascada ayuda a comprender c√≥mo el navegador resuelve conflictos de estilos. &lt;br&gt;
Cuando las declaraciones entran en conflicto, la cascada considera cuatro cosas para resolver la diferencia:&lt;/p&gt;

&lt;p&gt;‚ûä &lt;strong&gt;Posici√≥n y orden de aparici√≥n:&lt;/strong&gt; El orden en que aparecen tus reglas CSS en la hoja de estilos.&lt;br&gt;
‚ûã &lt;strong&gt;Especificidad de los selectores:&lt;/strong&gt; Qu√© selectores tienen prioridad sobre otros.&lt;br&gt;
‚ûå &lt;strong&gt;Origen de la hoja de estilo:&lt;/strong&gt; El orden de aparici√≥n del CSS y su procedencia, ya sea un estilo del navegador, el CSS de una extensi√≥n del navegador o el CSS de tu autor√≠a.&lt;br&gt;
‚ûç &lt;strong&gt;Importancia:&lt;/strong&gt; Algunas reglas CSS tienen m√°s peso que otras, especialmente con el tipo de regla &lt;code&gt;!important&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Las reglas de la cascada se consideran en este orden. Aunque hay varios autores de diversos libros de CSS que solo consideran tres etapas de manera general:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Origen de la hoja de estilo.&lt;/li&gt;
&lt;li&gt;Especificidad de los selectores.&lt;/li&gt;
&lt;li&gt;Orden en que se declaran los estilos en la hoja de estilos.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;El siguiente diagrama de flujo muestra c√≥mo son aplicadas estas reglas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--739tcbCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6ktxgccj3t4oyh4xa4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--739tcbCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6ktxgccj3t4oyh4xa4p.png" alt="Diagrama de flujo de la cascada en CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Estas reglas permiten que los navegadores se comporten de forma predecible al resolver cualquier ambig√ºedad en el CSS. Vamos a repasarlas una por una.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#posici%C3%B3n-y-orden-de-aparici%C3%B3n"&gt;
  &lt;/a&gt;
  üî¢ Posici√≥n y orden de aparici√≥n:
&lt;/h2&gt;

&lt;p&gt;El orden en el que aparecen tus reglas CSS y c√≥mo aparecen es tomado en consideraci√≥n por la cascada mientras √©sta calcula la resoluci√≥n de conflictos.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ejemplo-1-orden-de-las-reglas"&gt;
  &lt;/a&gt;
  Ejemplo 1 - Orden de las reglas
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button {
  color: red;
}

button {
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;En este ejemplo hay dos reglas que tienen selectores de id√©ntica especificidad, por lo que gana la √∫ltima en ser declarada, es decir, aqu√≠ prevalece siempre la √∫ltima regla definida, la cu√°l sobreescribe las propiedades anteriores.&lt;/p&gt;

&lt;p&gt;Sin embargo hay algunos casos que no esta muy claro cu√°l que estilo deber√≠a sobreescribir a los anteriores, ah√≠ es cuando aplicamos el concepto de cascada, que es la que se encarga de determinar el que tiene mayor prioridad.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ejemplo-2-orden-de-las-hojas-de-estilo"&gt;
  &lt;/a&gt;
  Ejemplo 2 - Orden de las hojas de estilo
&lt;/h3&gt;

&lt;p&gt;Hay cuatro formas de incluir CSS en un documento HTML que van de mayor a menor prioridad:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;En l√≠nea dentro de la etiqueta HTML usando el atributo &lt;code&gt;style;&lt;/code&gt;: El CSS en l√≠nea es el que tiene mayor precedencia, por lo que siempre ser√° el que tenga prioridad sobre otras reglas CSS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En el &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; a trav√©s de la la etiqueta &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;: el CSS incrustado/interno ser√° el siguiente a tener en cuenta en orden de prioridad.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Asociando una hoja de estilo externa a nuestro documento HTML usando la etiqueta &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; a√±adida en el &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:  CSS externos son la tercera opci√≥n de prioridad al momento de tomar en cuenta las reglas CSS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En el &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; usando &lt;code&gt;@import&lt;/code&gt; dentro de la etiqueta &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;, ejemplo: &lt;code&gt;&amp;lt;style&amp;gt; @import url('style.css') &amp;lt;/style&amp;gt;&lt;/code&gt; (poco usable).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; A pesar de que hay muchas maneras de incluir CSS en nuestro documento HTML, la forma m√°s usada es asociar una hoja de estilo externa.&lt;/p&gt;

&lt;p&gt;Como puedes notar los estilos pueden venir de varias partes en una p√°gina HTML. Si tienes un &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; que incluye CSS en la parte superior de tu p√°gina HTML, y luego otro &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; que incluye CSS en la parte inferior de tu p√°gina: el &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; inferior tendr√° la mayor especificidad. Lo mismo ocurre con los elementos &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; incrustados. Se vuelven m√°s espec√≠ficos cuanto m√°s abajo en la p√°gina est√©n.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;link rel="stylesheet" href="styles.css" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;button&amp;gt;I am a button&amp;lt;/button&amp;gt;
    &amp;lt;style&amp;gt;
      button {
        background: pink;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*styles.css*/

button {
  background: yellow;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La etiqueta &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; incrustada est√° m√°s abajo en la p√°gina que la etiqueta &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;, as√≠ que aunque la especificidad del bot√≥n es la misma, la posici√≥n de la regla de estilo la hace ganar. Por lo tanto, El bot√≥n tendr√° un background de color rosa &lt;code&gt;pink&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ejemplo-3-la-posici%C3%B3n-de-las-declaraciones"&gt;
  &lt;/a&gt;
  Ejemplo 3 - La posici√≥n de las declaraciones
&lt;/h3&gt;

&lt;p&gt;La posici√≥n tambi√©n se aplica en el orden de su regla CSS. En el siguiente ejemplo, el elemento tendr√° un fondo p√∫rpura porque &lt;code&gt;background: purple&lt;/code&gt; fue declarado en √∫ltimo lugar. Debido a que el &lt;code&gt;background: green&lt;/code&gt; fue declarado antes que el &lt;code&gt;background: purple&lt;/code&gt;, ahora es ignorado por el navegador.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.my-element {
  background: green;
  background: purple;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Poder especificar dos valores para la misma propiedad puede ser una forma sencilla de crear fallbacks para los navegadores que no soportan un valor concreto. &lt;/p&gt;

&lt;p&gt;En el siguiente ejemplo, la propiedad &lt;code&gt;font-size&lt;/code&gt; se declara dos veces. Si la funci√≥n &lt;code&gt;clamp()&lt;/code&gt; est√° soportado en el navegador, entonces la declaraci√≥n anterior de &lt;code&gt;font-size&lt;/code&gt; ser√° descartada. Si &lt;code&gt;clamp()&lt;/code&gt; no est√° soportado por el navegador, la declaraci√≥n inicial ser√° respetada, y el tama√±o de la fuente ser√° &lt;code&gt;1.5rem&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.my-element {
  font-size: 1.5rem;
  font-size: clamp(1.5rem, calc(1rem + 3vw), 2rem);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üìù &lt;strong&gt;NOTA:&lt;/strong&gt; Este enfoque de declarar la misma propiedad dos veces funciona porque los navegadores ignoran los valores que no entienden. A diferencia de otros lenguajes de programaci√≥n, CSS no lanzar√° un error o romper√° su programa cuando detecte una l√≠nea que no puede analizar - el valor que no puede analizar es inv√°lido y por lo tanto es ignorado. El navegador contin√∫a entonces procesando el resto del CSS sin romper lo que ya entiende.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#especificidad-de-los-selectores"&gt;
  &lt;/a&gt;
  üìë Especificidad de los selectores
&lt;/h2&gt;

&lt;p&gt;La especificidad es un algoritmo que determina qu√© selector es el m√°s espec√≠fico, utilizando un sistema de ponderaci√≥n o puntuaci√≥n para realizar esos c√°lculos.&lt;/p&gt;

&lt;p&gt;‚úçÔ∏è En el pr√≥ximo articulo que estoy escribiendo, usted podr√° conocer los detalles de c√≥mo se calcula la especificidad ya que considero que es un tema muy amplio que requiere un articulo propio, sin embargo, este tema esta ligado a la cascada por lo que es necesario hacer una breve explicaci√≥n de este tema.&lt;/p&gt;

&lt;p&gt;Hay que tener en cuenta algunas cosas que le ayudar√° a evitar algunos problemas de especificidad.&lt;/p&gt;

&lt;p&gt;En el siguiente ejemplo, la clase &lt;code&gt;title&lt;/code&gt; del elemento &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; har√° que esa regla sea m√°s espec√≠fica y por lo tanto se considera m√°s importante para ser aplicada. Esto significa que el &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tendr√° el color &lt;code&gt;red&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 class="title"&amp;gt;Heading&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.title {
  color: red;
}

h1 {
  color: blue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A pesar de que el selector &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; se encuentra m√°s abajo, podr√≠as pensar que va a sobrescribir a los estilos de la clase, pero no es as√≠, ya que la especificidad considera m√°s importante la clase.&lt;/p&gt;

&lt;p&gt;Como podr√°s comprobar en mi siguiente art√≠culo, cada tipo de selector recibe puntos que indican su especificidad, y se suman los puntos de todos los selectores que hayas utilizado. Esto significa que si tienes una lista de selectores como: &lt;code&gt;a.my-class.another-class[href]:hover&lt;/code&gt; obtienes algo bastante dif√≠cil de sobrescribir con otro CSS. &lt;/p&gt;

&lt;p&gt;Por esta raz√≥n, y para ayudar a que tu CSS sea m√°s reutilizable, es una buena idea mantener tus selectores tan simples como sea posible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#origen-de-la-hoja-de-estilo"&gt;
  &lt;/a&gt;
  üîé Origen de la hoja de estilo
&lt;/h2&gt;

&lt;p&gt;El CSS que escribes no es el √∫nico CSS que se aplica a una p√°gina web. La cascada tiene en cuenta el origen del CSS, es decir de donde provienen los estilos. Este origen incluye la hoja de estilos interna del navegador, los estilos a√±adidos por las extensiones del navegador o el sistema operativo, y el CSS de tu autor√≠a (CSS de autor).&lt;/p&gt;

&lt;p&gt;Los estilos del agente de usuario (los estilos por defecto del navegador) tienen menor prioridad, por lo que tus estilos los anulan.&lt;/p&gt;

&lt;p&gt;El orden de especificidad de estos or√≠genes, de menos espec√≠fico a m√°s espec√≠fico, es el siguiente&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Estilos base del agente de usuario:&lt;/strong&gt; Son los estilos que su navegador aplica a los elementos HTML por defecto.&lt;/p&gt;

&lt;p&gt;Los estilos del agente de usuario var√≠an ligeramente de un navegador a otro, pero en general hacen las mismas cosas: a los t√≠tulos (&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; a &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;) y a los p√°rrafos (&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;) se les da un margen superior e inferior, a las listas (&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;) se les da un padding a la izquierda, y se establecen los colores de los enlaces y los tama√±os de letra por defecto.&lt;/p&gt;

&lt;p&gt;Si has trabajado con CSS durante mucho tiempo, probablemente est√©s acostumbrado a anular los estilos del agente de usuario. Cuando lo haces, utilizas la parte de origen de la cascada. Tus estilos siempre anular√°n los estilos del agente de usuario porque los or√≠genes son diferentes.&lt;/p&gt;

&lt;p&gt;Para evitar inconsistencias entre navegadores se suele utilizar algunas hojas de estilo llamadas "reset" una muy popular se llama &lt;a href="https://necolas.github.io/normalize.css/"&gt;Normalize&lt;/a&gt; aunque tambi√©n puedes hacer tu propio "reset". Estos estilos establecen una base para las propiedades que se tratan de forma diferente en los distintos navegadores.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Estilos propios del usuario:&lt;/strong&gt; Pueden venir del sistema operativo, como un tama√±o de fuente est√°ndar, o una preferencia. Tambi√©n pueden venir de las extensiones del navegador, como una extensi√≥n del navegador que permite al usuario escribir su propio CSS personalizado para una p√°gina web.&lt;/p&gt;

&lt;p&gt;Un ejemplo, es la maravillosa extensi√≥n para Chrome llamada &lt;a href="https://chrome.google.com/webstore/detail/visbug/cdockenadnadldjbbgcallicgledbeoc"&gt;VisBug&lt;/a&gt; que permite editar visualmente elementos de cualquier p√°gina web, como cambiar los colores, el texto etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9oEhfePW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l1jrld1vkhob76jm3h9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9oEhfePW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l1jrld1vkhob76jm3h9.gif" alt="Extensi√≥n VisBug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. CSS de autor:&lt;/strong&gt; La hoja de estilos creada por el autor de la p√°gina, es decir, El CSS que escribe el desarrollador o desarrolladora.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. CSS de autor con &lt;code&gt;!important&lt;/code&gt;:&lt;/strong&gt; Cualquier &lt;code&gt;!important&lt;/code&gt; que el desarrollador a√±ada a sus declaraciones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Estilos propios del usuario con &lt;code&gt;!important&lt;/code&gt;:&lt;/strong&gt; Cualquier &lt;code&gt;!important&lt;/code&gt; que venga del sistema operativo, o del CSS de la extensi√≥n del navegador.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Estilos base del agente de usuario con &lt;code&gt;!important&lt;/code&gt;:&lt;/strong&gt; Cualquier &lt;code&gt;!important&lt;/code&gt; que est√© definido en el CSS por defecto del navegador.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; En caso de que la misma propiedad del CSS de usuario y la propiedad del CSS de autor tuvieran &lt;code&gt;!important&lt;/code&gt;, tendra prioridad la del CSS de usuario sobre la del CSS de autor.&lt;/p&gt;

&lt;p&gt;En la siguiente imagen compartida por el sitio &lt;a href="https://web.dev/learn/css/the-cascade/"&gt;Learn CSS&lt;/a&gt; se muestran este orden que va de menor a mayor importancia:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yrqIqy3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky46edtb0f2dhqtwvmr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yrqIqy3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ky46edtb0f2dhqtwvmr3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hay otros autores de diversos libros de CSS que solo consideran de manera general tres fuentes responsables de los estilos que ves en una p√°gina web y que forman la cascada, las cuales ya vimos anteriormente:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;La hoja de estilos creada por el &lt;em&gt;autor de la p√°gina&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Los estilos por defecto del propio &lt;em&gt;navegador&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Los estilos especificados por el &lt;em&gt;usuario&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Considere las siguientes reglas de estilo que estan en distintas hojas de estilo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Lorem ipsum&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Estilos del navegador:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 { margin-block-start: 0.83em; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Bootstrap:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 { margin-block-start: 20px; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Hoja de estilos del autor:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 { margin-block-start: 2ch; }

@media (max-width: 480px) {
  h1 { margin-block-start: 1ch; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Estilo personalizado del usuario:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h1 { margin-block-start: 2rem !important; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El margen final que tendr√° el &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; es de &lt;code&gt;2rem&lt;/code&gt; esto es porque el estilo personalizado del usuario es m√°s especifico ya que contiene la declaraci√≥n &lt;code&gt;!important&lt;/code&gt; y va a anular cualquier otro estilo.&lt;/p&gt;

&lt;p&gt;El concepto de origen de estilo entrar√° en juego cuando lleguemos a las transiciones y a las animaciones porque introducen m√°s or√≠genes en esta lista. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importancia"&gt;
  &lt;/a&gt;
  ‚òùÔ∏è Importancia
&lt;/h2&gt;

&lt;p&gt;No todas las reglas CSS se calculan de la misma manera ni se les da la misma especificidad.&lt;/p&gt;

&lt;p&gt;El orden de importancia, de menor a mayor, es el siguiente:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tipo de regla com√∫n, que tiene las propiedades &lt;code&gt;font-size&lt;/code&gt;, &lt;code&gt;background&lt;/code&gt; o &lt;code&gt;color&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;La regla que contiene la propiedad &lt;code&gt;animation&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;La regla que contiene &lt;code&gt;!important&lt;/code&gt; (siguiendo el mismo orden que el origen de la hoja de estilos).&lt;/li&gt;
&lt;li&gt;La regla que contiene la propiedad &lt;code&gt;transition&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;El tipo de regla que tiene las propiedades de &lt;code&gt;animation&lt;/code&gt; y &lt;code&gt;transition&lt;/code&gt; tienen mayor importancia que las reglas comunes.&lt;/p&gt;

&lt;p&gt;En el caso de las transiciones, la importancia es mayor que la regla que tiene la palabra clave &lt;code&gt;!important&lt;/code&gt;. Esto se debe a que cuando una animaci√≥n o transici√≥n se activa, su comportamiento esperado es cambiar el estado visual.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-reglas-de-oro"&gt;
  &lt;/a&gt;
  2 Reglas de Oro
&lt;/h2&gt;

&lt;p&gt;Hay dos reglas generales para trabajar con la cascada que pueden ser √∫tiles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No uses IDs en tu selector. Incluso un ID aumenta mucho la especificidad, esto lo vamos a tratar con m√°s detalle en el siguiente articulo.&lt;/li&gt;
&lt;li&gt;Evita el uso de &lt;code&gt;!important&lt;/code&gt;. Esto es a√∫n m√°s dif√≠cil de anular que un ID. Es √∫til saber que es lo que hace &lt;code&gt;!important&lt;/code&gt;. Sin embargo, te recomiendo que no lo utilices.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En los √∫ltimos a√±os han surgido una serie de metodolog√≠as de CSS para ayudar a controlar la especificidad del selector, una de las m√°s populares es la metodolog√≠a &lt;a href="http://getbem.com/"&gt;BEM&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusi%C3%B3n"&gt;
  &lt;/a&gt;
  üìã Conclusi√≥n:
&lt;/h2&gt;

&lt;p&gt;‚òëÔ∏è La cascada puede se usada para resolver conflictos cuando se aplican varios estilos a un elemento. Este es uno de sus principales objetivos, la resoluci√≥n de conflictos.&lt;/p&gt;

&lt;p&gt;‚òëÔ∏è La cascada, la especificidad y la herencia controlan qu√© estilo CSS se aplica a un elemento.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursos"&gt;
  &lt;/a&gt;
  üîé Recursos
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance"&gt;Cascada y herencia | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.dev/learn/css/the-cascade/"&gt;Learn CSS | web dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/the-c-in-css-the-cascade/"&gt;The ‚ÄúC‚Äù in CSS: The Cascade | CSS Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lenguajecss.com/css/introduccion/cascada-css/"&gt;Cascada en CSS | Manz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#libros-de-css-consultados-para-este-tema"&gt;
  &lt;/a&gt;
  üìö Libros de CSS consultados para este tema:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;CSS in Depth&lt;/li&gt;
&lt;li&gt;CSS The Missing Manual&lt;/li&gt;
&lt;li&gt;CSS The Definitive Guide&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leerü¶∏üèª‚Äç‚ôÄÔ∏è&lt;br&gt;
Mis redes sociales donde comparto notas de c√≥digo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/lupitacode"&gt;‚ñ∂Ô∏èYoutube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instagram.com/lupitacode"&gt;üì∑Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/lupitacode"&gt;üê¶Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://facebook.com/lupitacode"&gt;üîµFacebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io/lupitacode/"&gt;üî≤Codepen&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lupitacode.medium.com/"&gt;‚úçÔ∏èMedium&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@lupitacode"&gt;üéµTik Tok&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
      <category>spanish</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Michael Tharrington (he/him)</author>
      <pubDate>Tue, 22 Jun 2021 20:07:20 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-5g5c</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-5g5c</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-needs-magic-eye"&gt;
  &lt;/a&gt;
  Who Needs Magic Eye?
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/thormeier"&gt;@thormeier&lt;/a&gt;
 shows us the ins and outs of Steganography, revealing how messages can be secretly hidden in images.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thormeier" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pl7xkg-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--wbt3mQFY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436259/00cde9af-e704-48b7-a00a-32cdc4997190.jpeg" alt="thormeier image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thormeier/feel-like-a-secret-agent-hidden-messages-in-images-with-steganography-37kh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Feel like a secret agent: Hidden messages in images with steganography üñºÔ∏èüïµÔ∏è‚Äç‚ôÄÔ∏è&lt;/h2&gt;
      &lt;h3&gt;Pascal Thormeier „Éª Jun 19 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cryptography&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#be-careful-to-selfcare"&gt;
  &lt;/a&gt;
  Be Careful to Self-Care
&lt;/h2&gt;

&lt;p&gt;Read on to learn from &lt;a class="mentioned-user" href="https://dev.to/coffeestasia"&gt;@coffeestasia&lt;/a&gt;
 about the red flags of developer burnout, practical advice on how to prevent it, and actionable steps you can take to overcome it.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/coffeestasia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9lVgk9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lXaYQ4Mo--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/452501/9bf1251a-c9ff-460b-a2b1-3fd4985d7d04.jpg" alt="coffeestasia image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/actitime/how-to-prevent-or-recover-from-developer-burnout-3g5f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Prevent or Recover from Developer Burnout&lt;/h2&gt;
      &lt;h3&gt;Anastasia üèÑüèª‚Äç‚ôÄÔ∏è „Éª Jun 20 „Éª 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#oop-in-js"&gt;
  &lt;/a&gt;
  OOP in JS
&lt;/h2&gt;

&lt;p&gt;Let &lt;a class="mentioned-user" href="https://dev.to/romeopeter"&gt;@romeopeter&lt;/a&gt;
 walk you through the concepts of OOP as they relate to JavaScript in this thoroughly written post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/romeopeter" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_Q0EBFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BFhgImSK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/516300/6d174ef7-be27-424a-bc48-ff115006ed0a.jpeg" alt="romeopeter image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/romeopeter/object-oriented-programming-in-javascript-3j2o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Object-oriented Programming in JavaScript&lt;/h2&gt;
      &lt;h3&gt;Romeo Agbor Peter „Éª Jun 16 „Éª 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#restoring-a-classic"&gt;
  &lt;/a&gt;
  Restoring a Classic
&lt;/h2&gt;

&lt;p&gt;In this interesting post, we follow &lt;a class="mentioned-user" href="https://dev.to/madsstoumann"&gt;@madsstoumann&lt;/a&gt;
 on their journey to update an old website... because as they wisely put it "Working with old code is sometimes unavoidable."&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/madsstoumann" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoLwOpQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S8Kp4bXC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/515396/61d796b8-f5ce-468b-8cb5-808b2bbb9279.jpeg" alt="madsstoumann image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/madsstoumann/updating-a-25-year-old-website-42jm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Updating A 25-Year-Old Website&lt;/h2&gt;
      &lt;h3&gt;Mads Stoumann „Éª Jun 19 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#found-it"&gt;
  &lt;/a&gt;
  Found It!
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/laurieontech"&gt;@laurieontech&lt;/a&gt;
 introduces us to the &lt;code&gt;findLast&lt;/code&gt; and &lt;code&gt;findLastIndex&lt;/code&gt; JS syntax in this quick but helpful read below.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/laurieontech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqsnwO14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zM8EUzh5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/67245/e491c3cb-9cae-4f54-9a6e-79cbd28eea4f.jpeg" alt="laurieontech image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/laurieontech/introducing-findlast-and-findlastindex-1fan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introducing `findLast` and `findLastIndex`&lt;/h2&gt;
      &lt;h3&gt;Laurie „Éª Jun 16 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#lights-onlights-off"&gt;
  &lt;/a&gt;
  Lights On/Lights Off
&lt;/h2&gt;

&lt;p&gt;Learn how to make a dark mode toggle using CSS in this helpful tutorial by &lt;a class="mentioned-user" href="https://dev.to/murtuzaalisurti"&gt;@murtuzaalisurti&lt;/a&gt;
.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/murtuzaalisurti" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7kVpzK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0f2Zi33s--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/448592/1d055e71-8bab-48ab-bc44-307c2ebd0bde.jpg" alt="murtuzaalisurti image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/murtuzaalisurti/dark-mode-toggle-animation-using-css-27il" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Dark mode toggle animation using CSS !&lt;/h2&gt;
      &lt;h3&gt;murtuza „Éª Jun 18 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#crypto-vs-cicd"&gt;
  &lt;/a&gt;
  Crypto vs. CI/CD
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/n3wt0n"&gt;@n3wt0n&lt;/a&gt;
 pulls back the lid to reveal the negative effects that crypto mining is having on free CI/CD platforms.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/n3wt0n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fSRElfa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7mCnm5Pj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/215856/d2a3ead9-230c-45cc-9472-f39931f53871.png" alt="n3wt0n image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/n3wt0n/crypto-mining-is-killing-all-free-ci-cd-platforms-4chc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Crypto Mining is Killing All Free CI/CD Platforms&lt;/h2&gt;
      &lt;h3&gt;Davide 'CoderDave' Benvegn√π „Éª Jun 14 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#crypto&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cicd&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>The CodeLand CFP is Open!</title>
      <author>Ben Halpern</author>
      <pubDate>Tue, 22 Jun 2021 19:06:56 +0000</pubDate>
      <link>https://dev.to/devteam/the-codeland-cfp-is-open-45di</link>
      <guid>https://dev.to/devteam/the-codeland-cfp-is-open-45di</guid>
      <description>&lt;p&gt;As we shared last week, CodeLand 2021 is officially coming back in September 2021. &lt;/p&gt;

&lt;p&gt;2 days, 1 community, 5 years in a row üåà &lt;/p&gt;

&lt;p&gt;We can't wait to see you for this free and virtual celebration of early-career coders and their champions.  &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ben" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgwIhvJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1M1qt9Sp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png" alt="ben image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/codeland-2021-motivation-career-long-connections-for-early-career-devs-2loa" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CodeLand 2021: Motivation &amp;amp; Career-Long Connections For Early-Career Devs &lt;/h2&gt;
      &lt;h3&gt;Ben Halpern „Éª Jun 16 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codeland&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#today-codeland-has-opened-up-its-call-for-proposals-cfp-submit-your-talk-between-now-and-july-20th-for-consideration"&gt;
  &lt;/a&gt;
  Today, CodeLand has opened up its Call For Proposals (CFP). &lt;a href="https://cfp.codelandconf.com/events/codeland-2021"&gt;Submit your talk&lt;/a&gt; between now and July 20th for consideration!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://community.codenewbie.org/codenewbie/submit-your-talk-to-codeland-2021-5ee"&gt;This&lt;/a&gt; helpful post on CodeNewbie Community goes into a bit more detail about what you can expect from the CFP, who's reviewing talks, and who should submit. &lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#if-you-decide-to-submit-a-talk-you-can-do-so-at-cfpcodelandconfcom-between-now-and-july-20th-1159pm-utc"&gt;
  &lt;/a&gt;
  If you decide to submit a talk, you can do so at &lt;a href="https://cfp.codelandconf.com/events/codeland-2021"&gt;cfp.codelandconf.com&lt;/a&gt; between now and &lt;strong&gt;July 20th @ 11:59pm UTC&lt;/strong&gt;.
&lt;/h3&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;_Friendly reminder to register for the CodeNewbie Community Forem if you haven't already ‚Äî it's where we'll be hosting CodeLand and is the best place to stay in the loop about related updates. You can also sign up for email updates pertaining to CodeLand &lt;a href="http://eepurl.com/hBb5pv"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codeland</category>
      <category>meta</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The most common problem in React code</title>
      <author>Hans Ott</author>
      <pubDate>Tue, 22 Jun 2021 18:38:43 +0000</pubDate>
      <link>https://dev.to/hansott/the-most-common-problem-in-react-code-40km</link>
      <guid>https://dev.to/hansott/the-most-common-problem-in-react-code-40km</guid>
      <description>&lt;p&gt;I started playing with React about 5 years ago. The most common problem I've seen in React code is &lt;strong&gt;duplicate state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Duplicate state always leads to problems.&lt;/p&gt;

&lt;p&gt;So what do I mean with duplicate state?&lt;/p&gt;

&lt;p&gt;Let's say we have a component that displays blogposts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Blogposts&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;blogposts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;blogposts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogpost&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to add a search to this list of blogposts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Blogposts&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;blogposts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFiltered&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogposts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSearch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nx"&gt;setFiltered&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;blogposts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="nx"&gt;blogpost&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;blogpost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Search"&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogpost&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: We want to show all blogposts if the search is empty (&lt;code&gt;e.target.value === ""&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;This will work but there are some flaws with this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;blogposts&lt;/code&gt; changes, we'll need to make sure that the &lt;code&gt;filtered&lt;/code&gt; list is updated&lt;/li&gt;
&lt;li&gt;If we want to persist the &lt;code&gt;search&lt;/code&gt; parameter across pages (e.g. using a query parameter) we'll need to make sure the &lt;code&gt;filtered&lt;/code&gt; list is initialised correctly&lt;/li&gt;
&lt;li&gt;The component is hard to reason about&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll have to make sure &lt;code&gt;filtered&lt;/code&gt; is always up-to-date.&lt;/p&gt;

&lt;p&gt;This becomes a lot harder with bigger components.&lt;/p&gt;

&lt;p&gt;How can we fix this?&lt;/p&gt;

&lt;p&gt;In this case we can calculate the &lt;code&gt;filtered&lt;/code&gt; list if we have &lt;code&gt;blogposts&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Blogposts&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;blogposts&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSearch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Search"&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;blogposts&lt;/span&gt;
         &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="nx"&gt;blogpost&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;blogpost&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blogpost&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;...)&lt;/span&gt;
       &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We calculate the filtered list as part of the render cycle of the component.&lt;/p&gt;

&lt;p&gt;Whenever the state changes, the component will re-render.&lt;/p&gt;

&lt;p&gt;This means that we no longer have to keep &lt;code&gt;filtered&lt;/code&gt; up-to-date:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We free our minds from having to think about &lt;code&gt;filtered&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The filtered list will always be correct&lt;/li&gt;
&lt;li&gt;The component is easier to reason about&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here's my personal rule:&lt;/p&gt;

&lt;p&gt;Always derive from the state if possible.&lt;/p&gt;

&lt;p&gt;What about performance?&lt;/p&gt;

&lt;p&gt;In most cases it's negligible because JavaScript is fast (unless you're computing heavy stuff).&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="https://reactjs.org/docs/hooks-reference.html#usememo"&gt;&lt;code&gt;useMemo&lt;/code&gt;&lt;/a&gt; if you need too.&lt;/p&gt;

&lt;p&gt;Let me know if this blogpost was helpful! üòä&lt;/p&gt;

</description>
      <category>react</category>
      <category>state</category>
    </item>
    <item>
      <title>Supercharge your Angular application using Web Workers</title>
      <author>ng-conf</author>
      <pubDate>Tue, 22 Jun 2021 18:33:00 +0000</pubDate>
      <link>https://dev.to/ngconf/supercharge-your-angular-application-using-web-workers-5h9b</link>
      <guid>https://dev.to/ngconf/supercharge-your-angular-application-using-web-workers-5h9b</guid>
      <description>&lt;p&gt;Zama Khan Mohammed | ng-conf | May 2019&lt;/p&gt;

&lt;p&gt;UI blocking is a thing of the past!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fAsNEzku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2A-yEIvAYU2zBX9Uz0lPOPZA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fAsNEzku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1000/1%2A-yEIvAYU2zBX9Uz0lPOPZA.jpeg" alt='Picture of a whirling rollercoaster. The picture is slightly overlaid with the text "Supercharge Your Angular Apps Using Web Workers".'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#original-by-ja5on"&gt;
  &lt;/a&gt;
  Original üì∑ by @ja5on
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v7bEOCIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AK5sj8pu5XuHL52JwFaIisw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v7bEOCIB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AK5sj8pu5XuHL52JwFaIisw.png" alt='Add for angular. The image reads "Learn Angular Through Projects - Best way to learn any technology is by working on some Real World Projects!" There is a black button that reads "Get your copy!" in white text. Underneath is a white arrow pointing down.'&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#httpsangularprojectscom"&gt;
  &lt;/a&gt;
  &lt;a href="https://angularprojects.com"&gt;https://angularprojects.com&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;If you are building an application where you do a lot of calculations on UI, such as creating CAD documents, doing heavy geometrical calculations, or heavy data table manipulations, then you might have observed that the UI sometimes becomes laggy or janky.&lt;/p&gt;

&lt;p&gt;This happens because JavaScript is not the only thing that runs on the main thread, but other things like the painting of pixels, style calculations, and many others also run on it. When we run heavy long-running JavaScript on the browser, occasionally we see that frames are missed, which does not provide a great User Experience.&lt;/p&gt;

&lt;p&gt;We have heard that Web Workers is one of the promising solutions to such a problem, but we never knew that it was so easy to introduce it to our Angular Application using Angular CLI.&lt;/p&gt;

&lt;p&gt;Angular CLI v8.0.0-beta.11 added improved bundling support for Web Workers without you needing to add any new configuration. In this article, we will create an application in which we will run heavy calculations of checking if a list of more than 600 numbers are prime numbers or not.&lt;/p&gt;

&lt;p&gt;Let‚Äôs create a new Angular CLI application using v8.0.0-beta.11 with npx command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npx -p @angular/cli@next ng new prime-numbers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding Web Workers is as easy as generating components, services, etc. using &lt;a href="https://next.angular.io/cli/generate#webworker"&gt;&lt;code&gt;ng generate&lt;/code&gt;&lt;/a&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; ng generate worker prime-calculations
CREATE src/tsconfig.worker.json (209 bytes)
CREATE src/tsconfig.json (131 bytes)
CREATE src/app/prime-calculations.worker.ts (121 bytes)
UPDATE tsconfig.app.json (232 bytes)
UPDATE angular.json (3558 bytes)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add a file called &lt;code&gt;prime-calculations.worker.ts&lt;/code&gt; in the app folder along with the other changes that are required for web workers setup (only done once).&lt;/p&gt;

&lt;p&gt;Now that we have our worker file, let‚Äôs first install a package &lt;a href="https://www.npmjs.com/package/prime-number"&gt;&lt;code&gt;prime-number&lt;/code&gt;&lt;/a&gt; that can check if a number is a prime number, and also has a list of 600+ prime numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm install prime-number
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The operation that we want to execute in both JavaScript thread and Web Worker is the following, where we loop over the &lt;a href="https://github.com/fibo/prime-number/blob/master/list.js"&gt;&lt;code&gt;primeNumberList&lt;/code&gt;&lt;/a&gt; and check if they're a prime number or not by using the method &lt;a href="https://github.com/fibo/prime-number/blob/master/index.js"&gt;&lt;code&gt;isPrimeNumber&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import isPrimeNumber from 'prime-number';
import primeNumberList from 'prime-number/list';
const arePrimeList = primeNumberList.map((prime) =&amp;gt; {
    return isPrimeNumber(prime);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs add two buttons, one to run the logic in the worker, and another one in the main thread.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button (click)=‚ÄùrunWorker()‚Äù&amp;gt;Web Worker&amp;lt;/button&amp;gt;
&amp;lt;button (click)=‚ÄùrunThread()‚Äù&amp;gt;JavaScript Thread&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let‚Äôs add both methods to our AppComponent class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import isPrimeNumber from 'prime-number';
import primeNumberList from 'prime-number/list';
...
export class AppComponent {
    title = 'web-worker';
    runWorker() {
       const worker = new Worker('./prime-calculations.worker', { 
           type: 'module' 
       });
       worker.onmessage = ({ data }) =&amp;gt; {
           console.log('From Web Worker:', data);
       };
       worker.postMessage({});
    }
    runThread() {
        const arePrimeList = primeNumberList.map((prime) =&amp;gt; {
            return isPrimeNumber(prime);
        });
        console.log('From Javascript Thread', arePrimeList);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;runThread&lt;/code&gt; method is just doing calculations right in the method, but in &lt;code&gt;runWorker&lt;/code&gt;, we are creating a new worker, and listening to &lt;code&gt;onmessage&lt;/code&gt;, and then posting a message using &lt;code&gt;worker.postMessage()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let‚Äôs update our worker &lt;code&gt;prime-calculations.worker.ts&lt;/code&gt; with the same logic,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import isPrimeNumber from 'prime-number';
import primeNumberList from 'prime-number/list';
addEventListener('message', ({ data }) =&amp;gt; {
    const arePrimeList = primeNumberList.map((prime) =&amp;gt; {
        return isPrimeNumber(prime);
    });
    postMessage(arePrimeList);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we listen to the message and then run the same prime calculations that we did in the JavaScript thread.&lt;/p&gt;

&lt;p&gt;Now that both methods are doing the same calculations, let‚Äôs see how our app reacts when a user clicks on each button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5IBA7dOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/612/1%2ApQJYuMjnFkEa9ClKaBJCkQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5IBA7dOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/612/1%2ApQJYuMjnFkEa9ClKaBJCkQ.gif" alt="Image for post"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we clearly see the lag when the JavaScript Thread button was clicked. When we clicked on the Web Worker button we did not see any delay. That happened because the Web Worker runs in a separate thread and does not block the main thread.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;Angular is not just a framework but it‚Äôs a platform. Angular‚Äôs tooling, especially Angular CLI is exceptional and it is what makes developing Angular Apps much easier.&lt;/p&gt;

&lt;p&gt;üëã Hi! I‚Äôm Zama Khan Mohammed. I work at &lt;a href="https://www.tekzenit.com/"&gt;Tekzenit&lt;/a&gt; as a Software Architect ‚Äî Web Technologies. I‚Äôm actively involved in working on Projects using Angular, React and Serverless Technologies along with writing a book ‚ÄúAngular Projects‚Äù.&lt;/p&gt;

&lt;p&gt;For more Angular goodness, be sure to check out the latest episode of &lt;a href="https://www.spreaker.com/show/angular-show"&gt;The Angular Show podcast&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ngconf-join-us-for-the-reliable-web-summit"&gt;
  &lt;/a&gt;
  ng-conf: Join us for the Reliable Web Summit
&lt;/h2&gt;

&lt;p&gt;Come learn from community members and leaders the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests. Powered by ng-conf, join us for the Reliable Web Summit this August 26th &amp;amp; 27th, 2021.&lt;br&gt;
&lt;a href="https://reliablewebsummit.com/"&gt;https://reliablewebsummit.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webworker</category>
      <category>angular</category>
      <category>angular8</category>
    </item>
    <item>
      <title>Running Laravel on Docker is really easy with Kool</title>
      <author>Daniel Polito</author>
      <pubDate>Tue, 22 Jun 2021 18:31:04 +0000</pubDate>
      <link>https://dev.to/kooldev/running-laravel-on-docker-is-really-easy-with-kool-400h</link>
      <guid>https://dev.to/kooldev/running-laravel-on-docker-is-really-easy-with-kool-400h</guid>
      <description>&lt;p&gt;In just 3 simple steps, you can use &lt;strong&gt;Kool CLI's&lt;/strong&gt; &lt;a href="https://kool.dev/docs/commands/kool-create"&gt;&lt;code&gt;kool create&lt;/code&gt;&lt;/a&gt; command to start a new Laravel application running in a local Docker environment. &lt;a href="https://kool.dev"&gt;Kool&lt;/a&gt; is an open source dev tool that makes using Docker for local development a lot easier.&lt;/p&gt;

&lt;p&gt;Before you start, if you haven't done so already, you need to &lt;a href="https://kool.dev/docs/getting-started/installation"&gt;install Docker and &lt;strong&gt;Kool CLI&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-new-laravel-application"&gt;
  &lt;/a&gt;
  1. Create a new Laravel application
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool create laravel my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This command may take a minute or two to complete while &lt;a href="https://getcomposer.org/"&gt;Composer&lt;/a&gt; downloads Laravel's vendor dependencies. After installing Laravel, &lt;code&gt;kool create&lt;/code&gt; automatically runs the &lt;a href="https://kool.dev/docs/commands/kool-preset"&gt;&lt;code&gt;kool preset laravel&lt;/code&gt;&lt;/a&gt; command, which helps you set up your project's development environment using an interactive wizard.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;? What app service do you want to use  [Use arrows to move, type to filter]
&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PHP 8.0
&lt;span class="go"&gt;  PHP 7.4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;? What database service do you want to use  [Use arrows to move, type to filter]
&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;MySQL 8.0
&lt;span class="go"&gt;  MySQL 5.7
  MariaDB 10.5
  PostgreSQL 13.0
  none
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#cache"&gt;
  &lt;/a&gt;
  Cache
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;? What cache service do you want to use  [Use arrows to move, type to filter]
&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Redis 6.0
&lt;span class="go"&gt;  Memcached 1.6
  none
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#package-manager"&gt;
  &lt;/a&gt;
  Package Manager
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;? What javascript package manager do you want to use  [Use arrows to move, type to filter]
  npm
&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;After selecting your preferences, the latest version of Laravel will be installed and ready for you in your &lt;code&gt;my-project&lt;/code&gt; folder, along with your new &lt;code&gt;kool&lt;/code&gt; environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5zVHh44v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miifgrnahvz6jjl69xnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zVHh44v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miifgrnahvz6jjl69xnn.png" alt="kool preset laravel - output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Move into your new Laravel project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;kool preset&lt;/code&gt; command auto-generated the following configuration files and added them to your project, which you can modify and extend.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+docker-compose.yml
+kool.yml
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#2-update-raw-envexample-endraw-"&gt;
  &lt;/a&gt;
  2. Update &lt;code&gt;.env.example&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Next, we need to make a few tweaks to the default &lt;strong&gt;.env.example&lt;/strong&gt; file that ships with Laravel in order to match the services in your &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file. For example, we need to change the hosts from &lt;em&gt;localhost&lt;/em&gt; to the appropriate service container name, which are accessible from within Docker.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#database-services"&gt;
  &lt;/a&gt;
  Database Services
&lt;/h3&gt;

&lt;p&gt;MySQL 5.7 and 8.0 / MariaDB 10.5&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-DB_HOST=127.0.0.1
&lt;/span&gt;&lt;span class="gi"&gt;+DB_HOST=database
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;PostgreSQL 13.0&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-DB_CONNECTION=mysql
&lt;/span&gt;&lt;span class="gi"&gt;+DB_CONNECTION=pgsql
&lt;/span&gt;
-DB_HOST=127.0.0.1
&lt;span class="gi"&gt;+DB_HOST=database
&lt;/span&gt;
-DB_PORT=3306
&lt;span class="gi"&gt;+DB_PORT=5432
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#cache-services"&gt;
  &lt;/a&gt;
  Cache Services
&lt;/h3&gt;

&lt;p&gt;Redis&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-REDIS_HOST=127.0.0.1
&lt;/span&gt;&lt;span class="gi"&gt;+REDIS_HOST=cache
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Memcached&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-MEMCACHED_HOST=127.0.0.1
&lt;/span&gt;&lt;span class="gi"&gt;+MEMCACHED_HOST=cache
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#3-run-raw-kool-run-setup-endraw-"&gt;
  &lt;/a&gt;
  3. Run &lt;code&gt;kool run setup&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Now, spin up your local environment for the first time using the &lt;code&gt;setup&lt;/code&gt; script in your &lt;strong&gt;kool.yml&lt;/strong&gt; file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool run setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you're running this command for the first time, Docker may need to download all the container images that are being used, which can take a few minutes, depending on your internet connection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;kool run setup&lt;/code&gt; has finished, you can access your new Laravel app at &lt;a href="http://localhost"&gt;http://localhost&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;kool run setup
&lt;span class="go"&gt;
Creating network "my-project_kool_local" with the default driver
Creating volume "my-project_database" with default driver
Creating volume "my-project_cache" with default driver
Creating my-project_cache_1    ... done
Creating my-project_app_1      ... done
Creating my-project_database_1 ... done
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5QyTWwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9wrpikyu5gfr1gpy603.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5QyTWwt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9wrpikyu5gfr1gpy603.png" alt="kool laravel welcome screen"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dive-deeper"&gt;
  &lt;/a&gt;
  Dive Deeper
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://kool.dev/docs/presets/laravel"&gt;Read the docs for our Laravel Preset&lt;/a&gt; to learn more about using Kool with Laravel.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kool.dev"&gt;Go to kool.dev&lt;/a&gt; to learn more about the Kool open source project.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/kool-dev"&gt;
        kool-dev
      &lt;/a&gt; / &lt;a href="https://github.com/kool-dev/kool"&gt;
        kool
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      From local development to the cloud: development workflow made easy.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://kool.dev" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/264349f4dfe091a4e3a224429ff033d9a68031905905816be9a847aac7167904/68747470733a2f2f6b6f6f6c2e6465762f696d672f6c6f676f2e706e67" width="400" alt="kool - cloud native dev tool"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href="https://goreportcard.com/report/github.com/kool-dev/kool" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2838d0fd3358d49e216af5ec0cab74eaaca5565ca82ee3b53637a34a3af64d15/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6b6f6f6c2d6465762f6b6f6f6c" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/kool-dev/kool" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a2add92a4e91eebea7bea5f9f2c4af90d7d3da733934d4b6b7560b93b8463ba2/68747470733a2f2f636f6465636f762e696f2f67682f6b6f6f6c2d6465762f6b6f6f6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kool-dev/kool/workflows/docker"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zv88EOKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kool-dev/kool/workflows/docker/badge.svg" alt="Docker Hub"&gt;&lt;/a&gt;
&lt;a href="https://github.com/kool-dev/kool/workflows/golangci-lint"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZY5yv7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/kool-dev/kool/workflows/golangci-lint/badge.svg" alt="Golang CI Lint"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/kool-dev/kool/maintainability" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/251105110de0dadd5bd3976a8b5ba78cc0a420c3180456982d420ea25630dc68/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f31353131663832366465393264326162333963632f6d61696e7461696e6162696c697479" alt="Maintainability"&gt;&lt;/a&gt;
&lt;a href="https://kool.dev/slack" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1be987074d33367933f31ae02d66b36abbbdf76dc54ee7522670ba4a7f794452/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230536c61636b2d6b6f6f6c2d2d6465762d6f72616e67653f6c6f676f3d736c61636b" alt="Join Slack Kool community"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
About &lt;code&gt;kool&lt;/code&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;kool&lt;/strong&gt; is a CLI tool that helps bringing down to earth the complexities of modern software development environments - making them lightweight, fast and reproduceable. It takes off the complexity and learning curve of &lt;em&gt;Docker&lt;/em&gt; and &lt;em&gt;Docker Compose&lt;/em&gt; for local environments, as well as offers a highly simplified interface for leveraging &lt;em&gt;Kubernetes&lt;/em&gt; cloud deployment for staging and production deployments.&lt;/p&gt;
&lt;p&gt;Get your local development environment up and running easy and quickly, put time and effort on making a great application, and then leverage the Kool cloud for deploying and sharing your work with the world! This tool is suitable for single developers or large teams, powering them with a simple start and still provides all flexibility the DevOps team needs to tailor up everything.&lt;/p&gt;
&lt;p&gt;To learn more &lt;a href="https://kool.dev" rel="nofollow"&gt;check out our website kool.dev&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;Requirements: Kool is powered by &lt;a href="https://docs.docker.com/get-docker/" rel="nofollow"&gt;Docker&lt;/a&gt; so you need to have it already installed on‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/kool-dev/kool"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>laravel</category>
      <category>docker</category>
      <category>opensource</category>
      <category>kool</category>
    </item>
    <item>
      <title>Focus-visible: The Unsung Hero</title>
      <author>Drew Clements</author>
      <pubDate>Tue, 22 Jun 2021 18:22:04 +0000</pubDate>
      <link>https://dev.to/drewclem/focus-visible-the-unsung-hero-15o3</link>
      <guid>https://dev.to/drewclem/focus-visible-the-unsung-hero-15o3</guid>
      <description>&lt;p&gt;You find a lot of edge cases building UI's. Accessibly opening a modal, scroll-lock, strange focus states, etc..., and the solution to those edge cases aren't always apparent.&lt;/p&gt;

&lt;p&gt;Well, I just found one that I already knew the answer too but forgot- so I'm writing this article to cement in my head and share the knowledge with all of you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-focusvisible"&gt;
  &lt;/a&gt;
  What is :focus-visible?
&lt;/h2&gt;

&lt;p&gt;According the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible"&gt;MDN&lt;/a&gt;, &lt;code&gt;:focus-visible&lt;/code&gt; is a pseudo-class that applies while an element matches the &lt;code&gt;:focus&lt;/code&gt; pseudo-class and determines vie heuristics that the focus should be made evident on the element.&lt;/p&gt;

&lt;p&gt;In human speak? The browser determines if the &lt;code&gt;:focus&lt;/code&gt; came from a click event or keyboard event and applies the styles accordingly. In most cases, that means that it won't apply the &lt;code&gt;:focus&lt;/code&gt; styles from a click event.&lt;/p&gt;

&lt;p&gt;That means that you give your keyboard users the focus styles they may want/need/desire without having a potentially jarring user experience for your mouse users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-was-the-problem"&gt;
  &lt;/a&gt;
  What was the problem?
&lt;/h2&gt;

&lt;p&gt;The issue I ran into was that I needed an element to have focus styles for accessibility's sake- but I didn't need some of those focus styles to apply when it was clicked. &lt;/p&gt;

&lt;p&gt;To be even more clear, the hover and focus styles are the same. I wanted the hover styles to apply on hover but I didn't need the focus styles to linger after the element was clicked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.logo-link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.logo-link&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.initial-display&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;.logo-text&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;translate-y-0;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.logo-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;opacity-100;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.logo-tagline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;opacity-80;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see there wasn't much to the styles, but the client was adamant about this user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;The answer to this problem was only 8 characters long!&lt;/p&gt;

&lt;p&gt;Adding &lt;code&gt;-visible&lt;/code&gt; to the end of the &lt;code&gt;:focus&lt;/code&gt; pseudo-class was all it took.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.logo-link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.logo-link&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.initial-display&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;.logo-text&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;translate-y-0;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.logo-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;opacity-100;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.logo-tagline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@apply&lt;/span&gt; &lt;span class="err"&gt;opacity-80;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-i-can-see-clearly"&gt;
  &lt;/a&gt;
  Now I can see clearly
&lt;/h2&gt;

&lt;p&gt;I was absolutely ready to go town with javascript by using a click event to force &lt;code&gt;.blur()&lt;/code&gt; and be as strong-handed as I needed to be to make it work.&lt;/p&gt;

&lt;p&gt;I mentioned earlier that I knew this answer, but that I didn't come to this solution on my own. A co-worker suggested &lt;code&gt;:focus-visible&lt;/code&gt; and it immediately came rushing back.&lt;/p&gt;

&lt;p&gt;I ran into this exact problem a couple of months and the fix was the exact same thing!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-use"&gt;
  &lt;/a&gt;
  Can I Use
&lt;/h2&gt;

&lt;p&gt;There is one caveat to &lt;code&gt;:focus-visible&lt;/code&gt;, and that is that it doesn't have full browser support yet.&lt;/p&gt;

&lt;p&gt;You can see in the image below that it has decent coverage of around 70%, but it has 0 support in Safari, so you'll have to be sure to cover all of your bases and add in some &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Polyfill"&gt;polyfills&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cRlpennw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouorq3mk4tu56nwf9qfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cRlpennw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ouorq3mk4tu56nwf9qfo.png" alt="A chart showing browser support for the pseudo-class focus-visible"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>GitHub Actions Self-Hosted Runner on Kubernetes</title>
      <author>Puru</author>
      <pubDate>Tue, 22 Jun 2021 18:20:39 +0000</pubDate>
      <link>https://dev.to/ptuladhar3/github-actions-self-hosted-runner-on-kubernetes-1o65</link>
      <guid>https://dev.to/ptuladhar3/github-actions-self-hosted-runner-on-kubernetes-1o65</guid>
      <description>&lt;h3&gt;
  &lt;a href="#deploy-a-scalable-github-actions-selfhosted-runner-on-kubernetes-using-helm"&gt;
  &lt;/a&gt;
  Deploy a scalable GitHub Actions self-hosted runner on Kubernetes using Helm.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibkItW7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmvksybf5p2ye04hubkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibkItW7D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmvksybf5p2ye04hubkf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-selfhosted-runner"&gt;
  &lt;/a&gt;
  Why Self-Hosted Runner?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Self-hosted runners are ideal for use-cases where you need to run workflows in a highly customizable environment with more granular control over hardware requirements, security, operating system, and software tools than GitHub-hosted runners provides.&lt;/p&gt;

&lt;p&gt;Self-hosted runners can be physical, virtual, in a container, on-premises, or in a cloud. In this guide, we‚Äôll deploy it as a container in the Kubernetes cluster in the AWS cloud.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#deploy-kubernetes-cluster-optional"&gt;
  &lt;/a&gt;
  Deploy Kubernetes Cluster (optional)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z2S4qRJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nfs4sqlm3o5v8vyuzqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2S4qRJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nfs4sqlm3o5v8vyuzqh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you already have an existing K8s cluster, feel free to skip this step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this guide, we‚Äôll deploy a managed K8s cluster on AWS using eksctl‚Äî Official CLI for Amazon EKS which is written in Go and uses CloudFormation under the hood, and is by far the easiest way to spin up a managed Kubernetes cluster in AWS. &lt;a href="https://eksctl.io/introduction/#installation"&gt;See Installing eksctl&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-kubernetes-cluster"&gt;
  &lt;/a&gt;
  Create Kubernetes Cluster
&lt;/h3&gt;

&lt;p&gt;Our cluster will consist of a single worker node (c6g.large ‚Äî 2 vCPU, 4GiB RAM) in &lt;code&gt;us-east-1&lt;/code&gt; region with a dedicated VPC. Feel free to modify the cluster config as per your requirements. &lt;a href="https://github.com/weaveworks/eksctl/tree/main/examples"&gt;See more examples configs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save the following cluster config as &lt;code&gt;cluster-config.yaml&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And run the following command using the above cluster config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ eksctl create cluster -f cluster-config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;NOTE: The cluster creation may take upto 15‚Äì20 minutes.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-06-22 19:14:19 [‚úî]  EKS cluster "github-actions" in "us-east-1" region is ready
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once the cluster is created and ready, you will find that cluster credentials were added to your &lt;a href="https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig"&gt;kubeconfig&lt;/a&gt; in &lt;code&gt;$HOME/.kube/config&lt;/code&gt; automatically by &lt;code&gt;eksctl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, verify the cluster connectivity, access and nodes status:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get nodes
$ kubectl get namespaces
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-action-runner-controller-using-helm"&gt;
  &lt;/a&gt;
  Deploy Action Runner Controller using Helm
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Helm&lt;/strong&gt; is a package manager for Kubernetes to easily install and manage Kubernetes applications. &lt;a href="https://helm.sh/docs/intro/install/"&gt;See Installing Helm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPC7sulR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lthc0l1mo8jgoangmift.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPC7sulR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lthc0l1mo8jgoangmift.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-actionsrunnercontroller"&gt;
  &lt;/a&gt;
  What is actions-runner-controller?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;action-runner controller&lt;/strong&gt; operates self-hosted runners for GitHub Actions on the Kubernetes cluster. It provides CRDs (&lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/"&gt;Custom Resource Definition&lt;/a&gt;) such as &lt;code&gt;Runner&lt;/code&gt; &lt;code&gt;RunnerDeployment&lt;/code&gt; &lt;code&gt;HorizontalRunnerAutoscaler&lt;/code&gt; which allows us to easily deploy a scalable self-hosted runners on Kubernetes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#installation-of-certmanager"&gt;
  &lt;/a&gt;
  Installation of cert-manager
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cert-manager.io/docs/installation/kubernetes/"&gt;cert-manager&lt;/a&gt; is a required component needed by the actions-runner-controller for certificate management of &lt;a href="https://book-v1.book.kubebuilder.io/beyond_basics/what_is_a_webhook.html"&gt;Admission Webhook&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Add repository
$ helm repo add jetstack https://charts.jetstack.io
$ helm repo update

# Install chart
$ helm install --wait --create-namespace --namespace cert-manager cert-manager jetstack/cert-manager --version v1.3.0 --set installCRDs=true

# Verify installation
$ kubectl --namespace cert-manager get all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#github-personal-access-token"&gt;
  &lt;/a&gt;
  GitHub Personal Access Token
&lt;/h3&gt;

&lt;p&gt;Next, we need to create a Personal Access Token (PAT) which will be used by the controller to register self-hosted runners to GitHub Actions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Login to GitHub account and navigate to &lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Generate new token button&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;repo (Full Control)&lt;/code&gt; scope.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Generate Token&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsuUH0PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qqttsyu7wlzr43brk7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsuUH0PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qqttsyu7wlzr43brk7c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, store the access token in a YAML file called &lt;code&gt;custom-values.yaml&lt;/code&gt; as such:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;authSecret:
  github_token: REPLACE_YOUR_TOKEN_HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#installation-of-actionsrunnercontroller"&gt;
  &lt;/a&gt;
  Installation of actions-runner-controller
&lt;/h3&gt;

&lt;p&gt;We‚Äôre now ready to install the controller using Helm.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Add repository
$ helm repo add actions-runner-controller https://actions-runner-controller.github.io/actions-runner-controller

# Install chart
$ helm install -f custom-values.yaml --wait --namespace actions-runner-system --create-namespace actions-runner-controller actions-runner-controller/actions-runner-controller

# Verify installation
$ kubectl --namespace actions-runner-system get all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-selfhosted-runner"&gt;
  &lt;/a&gt;
  Deploy Self-Hosted Runner
&lt;/h2&gt;

&lt;p&gt;We now have everything in-place to deploy a self-hosted runner tied to a specific repository.&lt;/p&gt;

&lt;p&gt;First, create a namespace to host self-hosted runners resources.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl create namespace self-hosted-runners
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, save the following K8s manifest file as &lt;code&gt;self-hosted-runner.yaml&lt;/code&gt;, and modify the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Replace &lt;code&gt;tuladhar/self-hosted-runner&lt;/code&gt; with your own repository.&lt;/li&gt;
&lt;li&gt;Adjust the &lt;code&gt;minReplicas&lt;/code&gt; and &lt;code&gt;maxReplicas&lt;/code&gt; as required.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;And apply the Kubernetes manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl --namespace self-hosted-runners apply -f self-hosted-runner.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Verify the runner is deployed and is in ready state.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl --namespace self-hosted-runners get runner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, navigate to your repository &lt;code&gt;Settings &amp;gt; Actions &amp;gt; Runner&lt;/code&gt; to view the registered runner.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KWaiV8k2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j2twr9ryu6bs9j7n8nt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWaiV8k2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9j2twr9ryu6bs9j7n8nt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üöÄ We‚Äôre now ready to give our self-hosted runner a try!&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#create-a-workflow-to-test-your-selfhosted-runner"&gt;
  &lt;/a&gt;
  Create a workflow to test your self-hosted runner
&lt;/h2&gt;

&lt;p&gt;Save and commit the following sample GitHub Actions workflow in &lt;code&gt;.github/workflows/hello-world.yml&lt;/code&gt; in your repository where the self-hosted runner is registered.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The important part of this workflow is runs-on: self-hosted&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Now, navigate to the Actions tab where you will see &lt;strong&gt;Hello World&lt;/strong&gt; workflow listed. Let‚Äôs manually trigger by clicking &lt;strong&gt;Run Workflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--__6dddIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mtrcrq7lh8qj5ly7v4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__6dddIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mtrcrq7lh8qj5ly7v4k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚Ä¶ and voila!&lt;/strong&gt; üéâ The workflow has successfully ran on our self-hosted runner, and we can see all the steps and logs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhC8m5Jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7fhh5hk0xnefwu6wpev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhC8m5Jh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7fhh5hk0xnefwu6wpev.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cleanup-kubernetes-cluster-optional"&gt;
  &lt;/a&gt;
  Clean-up Kubernetes Cluster (optional)
&lt;/h2&gt;

&lt;p&gt;Once, you‚Äôre done exploring the self-hosted runner, you can easily destroy the cluster and associated resources like VPC, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ eksctl delete cluster -f cluster-config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-06-22 20:16:02 [‚Ñπ]  eksctl version 0.54.0
2021-06-22 20:16:02 [‚Ñπ]  using region us-east-1
2021-06-22 20:16:02 [‚Ñπ]  deleting EKS cluster "github-actions"
2021-06-22 20:16:06 [‚Ñπ]  deleted 0 Fargate profile(s)
2021-06-22 20:16:10 [‚úî]  kubeconfig has been updated
2021-06-22 20:16:10 [‚Ñπ]  cleaning up AWS load balancers created by Kubernetes objects of Kind Service or Ingress
2021-06-22 20:16:23 [‚Ñπ]  2 sequential tasks: { delete nodegroup "ng-1", delete cluster control plane "github-actions" [async] }
2021-06-22 20:16:23 [‚Ñπ]  will delete stack "eksctl-github-actions-nodegroup-ng-1"
2021-06-22 20:16:23 [‚Ñπ]  waiting for stack "eksctl-github-actions-
2021-06-22 20:18:21 [‚Ñπ]  will delete stack "eksctl-github-actions-cluster"
2021-06-22 20:18:22 [‚úî]  all cluster resources were deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And remove the dangling offline registered runner as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mhIJ9a1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op7omyfm7kxinz28q4yu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mhIJ9a1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op7omyfm7kxinz28q4yu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-resources"&gt;
  &lt;/a&gt;
  Useful Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/actions-runner-controller/actions-runner-controller"&gt;https://github.com/actions-runner-controller/actions-runner-controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners"&gt;https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>githubactions</category>
      <category>helm</category>
    </item>
    <item>
      <title>Beginner JavaScript - 13 - Understanding DOM Traversal</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 22 Jun 2021 18:03:32 +0000</pubDate>
      <link>https://dev.to/thenerdydev/beginner-javascript-12-understanding-dom-traversal-2k9</link>
      <guid>https://dev.to/thenerdydev/beginner-javascript-12-understanding-dom-traversal-2k9</guid>
      <description>&lt;p&gt;Hey everyone üëãüèª,&lt;/p&gt;

&lt;p&gt;In this article, let us cover a detailed introduction on &lt;strong&gt;Document Object Model (DOM)&lt;/strong&gt; in JavaScript. This is the thirteenth part of my &lt;strong&gt;Beginner JavaScript Series&lt;/strong&gt; on Dev.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dom-traversal-a-complete-picture"&gt;
  &lt;/a&gt;
  DOM Traversal - A complete picture
&lt;/h2&gt;

&lt;p&gt;In DOM Traversal, a concept of Node Relationships comes into picture. So let us understand this in great depth first. But before that we need to understand one thing : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovmC_Y7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrosupvm4q3324me5qhz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovmC_Y7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrosupvm4q3324me5qhz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"" Everything in an HTML Document is considered as a Node. ""&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The nodes that are present in the DOM Tree possess a hierarchical relationship to each other. &lt;br&gt;
There are certain terms that we can use to describe or give a name to these relationships - like &lt;em&gt;parent&lt;/em&gt;, &lt;em&gt;child&lt;/em&gt;, &lt;em&gt;sibling&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Now there are a couple of things that you need to commit to the mind : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C0-6XQrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvesepqel95nj6ydv9z2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C0-6XQrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvesepqel95nj6ydv9z2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first and foremost thing that you need to remember is that in a DOM tree that gets generated, the top node is called as the &lt;strong&gt;root node&lt;/strong&gt; of the tree. &lt;/li&gt;
&lt;li&gt;Every node has exactly one parent, except the root node which has no parent. &lt;/li&gt;
&lt;li&gt;The terms parent, child, and sibling are used to describe the relationships.&lt;/li&gt;
&lt;li&gt;A node can have any number of children&lt;/li&gt;
&lt;li&gt;Sibling nodes are those nodes that have the same parent. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#traversing-up-the-dom-tree-along-a-level-and-down-the-dom-tree"&gt;
  &lt;/a&gt;
  Traversing up the DOM Tree, along a Level and down the DOM Tree
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ODLsjTQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zsvy0pd0ub7igjbxemj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ODLsjTQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zsvy0pd0ub7igjbxemj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The properties that are used for DOM Traversal are demonstrated in my video &lt;strong&gt;Exercise : DOM Traversal along levels&lt;/strong&gt;, here is the link for the video if you want to check it out. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lUbd57_zSwQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So this is it for this one. I do have videos for these so if you like to watch instead of reading, definitely check them out.  &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DHA-3By98CA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 10 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;üëâüèª Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;üëâüèª Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>What's the difference between TLS 1.2 vs 1.3???</title>
      <author>Christine Kim</author>
      <pubDate>Tue, 22 Jun 2021 17:39:02 +0000</pubDate>
      <link>https://dev.to/ckim328/what-s-the-difference-between-tls-1-2-vs-1-3-dhj</link>
      <guid>https://dev.to/ckim328/what-s-the-difference-between-tls-1-2-vs-1-3-dhj</guid>
      <description>&lt;p&gt;Most people don't think twice of when they connect to a website. The split second it takes for a (new) website to load, an awesome protocol occurs behind the scene - to make sure that the website that you are requesting to view is who they say they are.&lt;br&gt;
TLS stands for Transport Layer Security, and in my personal opinion, is under appreciated, especially for how widely used it is.&lt;br&gt;
The goal of TLS is to have you (client) and the server, agree to using the same key to encrypt and decrypt any messages sent between you two. This is known as a symmetric key.&lt;br&gt;
How do you agree to the same key? If either the client or the server sends they key over, then anyone eavesdropping can just steal the key and use it. To get the same key to both parties, asymmetrical encryption is used.&lt;/p&gt;

&lt;p&gt;In TLS 1.2, the client proposes key exchange algorithms and a symmetric key encryption algorithms, and the server sends back which one it prefers to use. This agreement doesn't exist in TLS 1.3, by &lt;em&gt;assuming&lt;/em&gt; that the key exchange is going to be in a certain key exchange method, and therefore doesn't have to go through that round trip. Furthermore, TLS 1.3 depreciated insecure features, such as SHA-1, DES, MD5, AES-CBC (and some more). Another cool thing about TLS 1.3 is that it mandates perfect forward secrecy - meaning that there's an assurance that a session's key will not be compromised even if the secrets used in the session key exchange are compromised.&lt;/p&gt;

&lt;p&gt;I'm going to make a future post going into the details of the actual exchange of keys and the math behind it. Stay tuned!&lt;/p&gt;

</description>
      <category>web</category>
      <category>programming</category>
      <category>internet</category>
      <category>knowledge</category>
    </item>
    <item>
      <title>How To Build Your Own Likes and Comments System With Firebase and React</title>
      <author>Rishi Raj Jain</author>
      <pubDate>Tue, 22 Jun 2021 17:36:09 +0000</pubDate>
      <link>https://dev.to/digitalplayer1125/how-to-build-your-own-likes-and-comments-system-with-firebase-and-react-30o3</link>
      <guid>https://dev.to/digitalplayer1125/how-to-build-your-own-likes-and-comments-system-with-firebase-and-react-30o3</guid>
      <description>&lt;p&gt;One of my todo items with React apps was having performance-first dynamic comments and likes system for static websites. Why? Because it brings the capabilities of going beyond content and add functionalities which invite &lt;strong&gt;user engagement&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#both-cusdis-and-disqus-are-not-performancefriendly-as-they-highly-affect-cumulative-layout-shift-cls"&gt;
  &lt;/a&gt;
  Both &lt;a href="https://cusdis.com/"&gt;Cusdis&lt;/a&gt; and &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; are not performance-friendly as they highly affect &lt;a href="https://web.dev/cls/"&gt;Cumulative Layout Shift (CLS)&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;So I set out on creating the system with &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt;, &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; and &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;. While TailwindCSS is not a compulsion, it's my go to library. Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-firebase"&gt;
  &lt;/a&gt;
  Setting Up Firebase
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install Firebase (Client Side) with the following command:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i firebase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create firebase.js with the following configuration:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File: @/lib/firebase.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/firestore&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firebase/app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// More about firebase config on https://firebase.google.com/docs/web/setup#config-object&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;firebaseConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;authDomain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;storageBucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;messagingSenderId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firebaseConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firestore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-like-component"&gt;
  &lt;/a&gt;
  Creating Like Component
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create the like.js file:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File: components/blog/like.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firestore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/lib/firebase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add the getLikes function which takes in the slug of the blog page, and a callback function if needed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callBackFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firestore&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;likes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;callBackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add the postLike function which takes in the slug of the blog page, and a callback function if needed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postLike&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callBackFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.ipify.org/?format=json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;firestore&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;likes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ip&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callBackFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-comment-component"&gt;
  &lt;/a&gt;
  Creating Comment Component
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create the comment.js file:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File: components/blog/comments.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;firestore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/lib/firebase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Adding the getComments function which takes in the slug of the blog page, and a callback function if needed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getComments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callBackFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;firestore&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;docs&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="nx"&gt;callBackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Adding the writeComment function which takes in the slug of the blog page, and a callback function if needed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;writeComment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callBackFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;firebase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firestore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Timestamp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;
  &lt;span class="nx"&gt;firestore&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;callBackFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Creating the LoadComments function which takes in the set of the comments to display
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoadComments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;comments&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;comments&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;border dark:border-gray-500 rounded p-5 w-full mt-5 flex flex-col&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-lg text-gray-500 dark:text-gray-300 font-medium&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;middot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mt-3 text-md text-gray-500 dark:text-gray-300&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Creating the WriteComment component which takes in the slug of the blog page, and setComments for setting the new set of comments to be displayed.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WriteComment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setComments&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setComment&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;
      &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;writeComment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;getComments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setComments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setComment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mt-10 flex flex-col w-full&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-semibold text-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Write&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex flex-col sm:flex-row sm:space-x-5 items-start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;required&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mt-5 w-full sm:w-1/2 appearance-none outline-none ring-0 px-5 py-2 border dark:hover:border-white hover:border-black rounded hover:shadow text-black dark:bg-black dark:text-gray-300 dark:border-gray-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mt-5 w-full sm:w-1/2 flex flex-col space-y-1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email (Optional)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-full appearance-none outline-none ring-0 px-5 py-2 border dark:hover:border-white hover:border-black rounded hover:shadow text-black dark:bg-black dark:text-gray-300 dark:border-gray-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-sm text-gray-400&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Email&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;remain&lt;/span&gt; &lt;span class="nx"&gt;confidential&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;textarea&lt;/span&gt;
        &lt;span class="nx"&gt;required&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setComment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Comment*&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Maximum of 500 characters.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mt-5 appearance-none outline-none ring-0 pt-5 px-5 pb-10 border dark:hover:border-white hover:border-black rounded hover:shadow text-black dark:bg-black dark:text-gray-300 dark:border-gray-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-[200px] appearance-none mt-5 py-2 px-5 text-center rounded border hover:bg-gray-100 dark:hover:bg-[#28282B] dark:border-gray-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;WriteComment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-dynamic-blog-component"&gt;
  &lt;/a&gt;
  Creating Dynamic Blog Component
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Load the components in the dynamic blog [slug].js file:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;WriteComment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getComments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LoadComments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/blog/comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setComments&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;WriteComment&lt;/span&gt; &lt;span class="nx"&gt;setComments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setComments&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mt-10 pt-10 w-full border-t dark:border-gray-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getComments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setComments&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-[200px] appearance-none py-2 px-5 text-center rounded border hover:bg-gray-100 dark:hover:bg-[#28282B]   dark:border-gray-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Load&lt;/span&gt; &lt;span class="nx"&gt;Comments&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;LoadComments&lt;/span&gt; &lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;You can see an example on my &lt;a href="https://rishi.app/blog/how-to-build-your-own-likes-and-comments-system-with-firebase-and-react"&gt;blog page&lt;/a&gt;! The source code is available &lt;a href="https://github.com/rishi-raj-jain/rishi.app/blob/master/components/blog/comments.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>firebase</category>
      <category>tailwindcss</category>
    </item>
  </channel>
</rss>
