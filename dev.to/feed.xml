<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Kadane's Algorithm (Maximum Sum Subarray Problem)</title>
      <author>Clean Code Studio</author>
      <pubDate>Thu, 29 Jul 2021 17:36:57 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/kadane-s-algorithm-maximum-sum-subarray-problem-2nhp</link>
      <guid>https://dev.to/cleancodestudio/kadane-s-algorithm-maximum-sum-subarray-problem-2nhp</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Today we're going to discuss the optimal solution to the maximum sum subarray problem.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;What's the maximum subarray problem?&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGzh8g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jn6ueykz5befrpv49n15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGzh8g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jn6ueykz5befrpv49n15.png" alt="Maximum Sum Sub-array example"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Let's say we have an array that looks like this: &lt;br&gt;
&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sub-arrays are defined as continuous elements. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: The entire array is considered a sub-array since all elements are continuous.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3]&lt;/code&gt; = &lt;code&gt;-2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;-1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1, -1]&lt;/code&gt; = &lt;code&gt;2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1]&lt;/code&gt; = &lt;code&gt;3&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
etc...&lt;/p&gt;

&lt;p&gt;Our maximum sub-array is &lt;code&gt;[2, 1]&lt;/code&gt; which sums to &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;So, how do we programmatically solve this coding challenge?&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#brute-force-solution"&gt;
  &lt;/a&gt;
  Brute Force Solution
&lt;/h3&gt;



&lt;p&gt;Basically, we check all of the possible arrays and pick the one with the maximum some. &lt;/p&gt;

&lt;p&gt;We'd start at the first index and then move on to the second index and so on - we kinda did that above when we did this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3]&lt;/code&gt; = &lt;code&gt;-2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;-1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1, -1]&lt;/code&gt; = &lt;code&gt;2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1]&lt;/code&gt; = &lt;code&gt;3&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
etc...&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#kadanes-algorithm-the-optimal-solution"&gt;
  &lt;/a&gt;
  Kadane's Algorithm (The Optimal Solution)
&lt;/h3&gt;



&lt;p&gt;The idea is very simple. We're going to look at each index and ask ourselves - what's the maximum sub-array ending at &lt;em&gt;this&lt;/em&gt; index? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Starting at index 0, we have [1]. &lt;/p&gt;

&lt;p&gt;What's the maximum subarray ending at this index (this currently being 0)? &lt;/p&gt;

&lt;p&gt;It's obviously just 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;For the second index, we're going to ask what the maximum sub-array ending at this index.&lt;/p&gt;

&lt;p&gt;At this index, the maximum sum can be &lt;code&gt;[1, -3]&lt;/code&gt; or just &lt;code&gt;[-3]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The maximum one of those is &lt;code&gt;[1, -3]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;For the third index we'll do the same thing. &lt;/p&gt;

&lt;p&gt;The subarray with the maximum sum ending at this index could be.&lt;/p&gt;

&lt;p&gt;[2]&lt;br&gt;
[-3, 2]&lt;br&gt;
[1, -3, 2]&lt;/p&gt;

&lt;p&gt;The answer is &lt;code&gt;[2]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
Index 2: [2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;We just continue using this pattern all the way through, and then compare the remaining subarrays that we have gotten by getting the maximum subarray at each index. &lt;/p&gt;

&lt;p&gt;Index 3 has the following subarrays. &lt;/p&gt;

&lt;p&gt;We choose &lt;code&gt;[1]&lt;/code&gt; or &lt;code&gt;[1, 2]&lt;/code&gt; or &lt;code&gt;[1, 2, -3]&lt;/code&gt; or &lt;code&gt;[1, 2 -3, 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;1 + 2&lt;/code&gt; is the highest sum out of all of index three's subarrays we'll use that for index 3. &lt;/p&gt;

&lt;p&gt;Index 4 has the following subarrays &lt;br&gt;
&lt;code&gt;[-1]&lt;/code&gt; or &lt;code&gt;[-1, 1]&lt;/code&gt; or &lt;code&gt;[-1, 1, 2]&lt;/code&gt; or &lt;code&gt;[-1, 1, 2, -3]&lt;/code&gt; or &lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;[-1, 1, 2]&lt;/code&gt; has the highest sum index 4 will use that subarray. &lt;/p&gt;

&lt;p&gt;The max sub-array at each index.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
Index 2: [2]
Index 3: [1, 2]
Index 4: [-1, 1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we simply compare the sub-arrays that we have collected at each index and return the one with the highest sum.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; or &lt;code&gt;[1, -3]&lt;/code&gt; or &lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[1, 2]&lt;/code&gt; or &lt;code&gt;[-1, 1, 2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;[1, 2]&lt;/code&gt; sums up to 3 and is the highest sum we return &lt;code&gt;[1, 2]&lt;/code&gt; as our final value.&lt;/p&gt;



&lt;p&gt;As you can see, the idea here is simple - but it's not very efficient. It's going to take &lt;code&gt;O(n^2)&lt;/code&gt; time complexity (AKA quadratic time).&lt;/p&gt;

&lt;p&gt;But, the interesting idea from Kadane's algorithm is we can do much better than that. We can run it in O(n) time complexity (AKA linear time).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-lets-see-how-we-can-do-this"&gt;
  &lt;/a&gt;
  So let's see how we can do this.
&lt;/h2&gt;

&lt;p&gt;Let's say we're using the same strategy here. We begin by finding the max sub-array at each given index.&lt;/p&gt;

&lt;p&gt;Now, let's assume we've already resolved the max sub-arrays from our first and second index. We're on index three.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Max sum sub-arrays from index one and two&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Original Array:&lt;/strong&gt; &lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next element we have is &lt;code&gt;2&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Kadane's algorithm states that the maximum sub-array for this index will either be the current element (in this case &lt;code&gt;2&lt;/code&gt;) OR the current element + the previous maximum sub-array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
To determine the local maximum subarray we were doing the following.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[2, -3]&lt;/code&gt; or &lt;code&gt;[2, -3, 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;BUT kardane's algorithm states that our local maximum subarray is either the current element OR the current element + the previous maximum sub-array.&lt;/p&gt;

&lt;p&gt;Following this principle we can simplify &lt;/p&gt;

&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[2, -3]&lt;/code&gt; or &lt;code&gt;[2, -3, 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[2, 1, -3]&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#we-can-just-compare-these-and-ignore-all-other-local-subarrays-and-this-will-give-us-our-local-maximum-subarray"&gt;
  &lt;/a&gt;
  We can just compare these, and ignore all other local sub-arrays and this will give us our local maximum sub-array.
&lt;/h2&gt;

&lt;p&gt;This solution is much faster than the brute force algorithm and runs in linear time [aka O(n)]. &lt;/p&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;My personal FAANG interview Notes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>code</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Journey from Mongoose to Prisma ORM for MongoDB!</title>
      <author>Somsubhra Das</author>
      <pubDate>Thu, 29 Jul 2021 16:51:25 +0000</pubDate>
      <link>https://dev.to/somsubhra1/journey-from-mongoose-to-prisma-orm-for-mongodb-3j21</link>
      <guid>https://dev.to/somsubhra1/journey-from-mongoose-to-prisma-orm-for-mongodb-3j21</guid>
      <description>&lt;p&gt;&lt;a href="https://www.prisma.io/?utm_source=Prisma%20Ambassador&amp;amp;utm_medium=Blog%20post&amp;amp;utm_campaign=Prisma%20AP%20Somsubhra%20Dass"&gt;Prisma&lt;/a&gt; is a next Generation ORM for NodeJS &amp;amp; TypeScript Environments. It has multiple databases support such as MySQL, SQLite, PostgreSQL, MSSQL and also MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03TVNXC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6asm3c1uhmis3ktx9sih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03TVNXC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6asm3c1uhmis3ktx9sih.png" alt="Prisma Application Lifecycle"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://prisma.io"&gt;Source: Prisma&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in this post let's talk about the all new Prisma MongoDB Connector, it's operations and what made me switch from Mongoose to Prisma for MongoDB.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connection"&gt;
  &lt;/a&gt;
  Connection
&lt;/h2&gt;

&lt;p&gt;Let's start by establishing the connection to our MongoDB Server. In your &lt;strong&gt;Prisma schema&lt;/strong&gt; file we need to change the &lt;code&gt;provider&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;datasource&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;prisma.schema&lt;/code&gt; file allows us to specify how we want Prisma to connect to our database. We need to tell it what kind of provider we would like to use - in this case &lt;code&gt;mongodb&lt;/code&gt; - and a &lt;code&gt;url&lt;/code&gt; to connect to - this is pointing to an environment variable as we want to keep it secret. We will use a MongoDB connection string as the &lt;code&gt;DATABASE_URL&lt;/code&gt; which can be found in the &lt;code&gt;/prisma/.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next we need to setup the generator block like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prisma-client-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;previewFeatures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoDb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Since Prisma MongoDB Connector is still in preview we need to explicitly specify the &lt;code&gt;previewFeatures&lt;/code&gt; key.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-models"&gt;
  &lt;/a&gt;
  Defining Models
&lt;/h2&gt;

&lt;p&gt;So now that connection has been successfully established to MongoDB Server, let's now create models for our database collection.&lt;/p&gt;

&lt;p&gt;A typical MongoDB document looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$oid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;60d599cb001ef98000f2cad2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somsubhra@email.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Somsubhra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now how to define a model like this in Prisma? Inside &lt;strong&gt;Prisma schema&lt;/strong&gt; file, we can define our models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;  &lt;span class="nb"&gt;String&lt;/span&gt;  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbgenerated&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;
  &lt;span class="nx"&gt;email&lt;/span&gt;     &lt;span class="nb"&gt;String&lt;/span&gt;   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;unique&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;      &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comparing it with mongoose models, in Mongoose ODM we would have written something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;a href="https://www.prisma.io/?utm_source=Prisma%20Ambassador&amp;amp;utm_medium=Blog%20post&amp;amp;utm_campaign=Prisma%20AP%20Somsubhra%20Dass"&gt;Prisma&lt;/a&gt; we may also generate ObjectIds manually by using the &lt;code&gt;bson&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#queries-amp-database-operations"&gt;
  &lt;/a&gt;
  Queries &amp;amp; Database Operations
&lt;/h2&gt;

&lt;p&gt;Now let's understand how to write queries and operations to MongoDB using Prisma in comparison to Mongoose.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetching-single-record"&gt;
  &lt;/a&gt;
  Fetching Single record
&lt;/h3&gt;

&lt;p&gt;Fetching a single record in prisma is done using the &lt;code&gt;where&lt;/code&gt; property but in mongoose it has &lt;code&gt;findById&lt;/code&gt; method.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5eb9354624286a04e42401d8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetching-selected-values-for-single-record"&gt;
  &lt;/a&gt;
  Fetching selected values for single record
&lt;/h3&gt;

&lt;p&gt;Fetching selected values for single record is easier than ever in Prisma ORM by using just a single query function to do the select operation whereas in Mongoose after finding the record we need to chain the output with &lt;code&gt;select()&lt;/code&gt;. This increases the time complexity and also slows down the process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5eb9354624286a04e42401d8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetching-relations"&gt;
  &lt;/a&gt;
  Fetching relations
&lt;/h3&gt;

&lt;p&gt;In Prisma, we use the &lt;code&gt;include&lt;/code&gt; property but in Mongoose we would have to use the &lt;code&gt;populate()&lt;/code&gt; method.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userWithPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filtering-with-values"&gt;
  &lt;/a&gt;
  Filtering with values
&lt;/h3&gt;

&lt;p&gt;In Prisma we filter records using the &lt;code&gt;where&lt;/code&gt; property whereas in Mongoose we use the &lt;code&gt;find()&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#relation-filtering"&gt;
  &lt;/a&gt;
  Relation Filtering
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;

&lt;p&gt;Prisma can filter a list based on a criteria that applies not only to the models of the list being retrieved, but to a relation of that model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;some&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;

&lt;p&gt;Mongoose doesn't offer this feature for relation filters. We may achieve similar functionality by adding an additional step to filter the results returned by the query but that would result in increased query times and load for large databases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pagination"&gt;
  &lt;/a&gt;
  Pagination
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;

&lt;p&gt;Cursor-style pagination:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;before&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Offset pagination:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;

&lt;p&gt;Mongoose also has similar implementation for pagination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-records"&gt;
  &lt;/a&gt;
  Creating Records
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#updating-records"&gt;
  &lt;/a&gt;
  Updating Records
&lt;/h3&gt;

&lt;p&gt;Prisma updates the record directly with the values passed in data property in comparison with mongoose where we need to use &lt;code&gt;$set&lt;/code&gt; operator.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-single-record"&gt;
  &lt;/a&gt;
  Deleting Single Record
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByIdAndDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-multiple-records"&gt;
  &lt;/a&gt;
  Deleting Multiple Records
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#advantages-of-prisma-over-mongoose"&gt;
  &lt;/a&gt;
  Advantages of Prisma over Mongoose
&lt;/h2&gt;

&lt;p&gt;So now that we know the differences in operations between Prisma &amp;amp; Mongoose, let's now focus on the advantages Prisma provides over Mongoose.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prisma allows TypeSafe Database access.&lt;/li&gt;
&lt;li&gt;Prisma has an auto generated query builder&lt;/li&gt;
&lt;li&gt;Support for multiple databases. This is a huge advantage to developers when moving between SQL and NoSQL Databases, since only the Schema file needs to be changed. All other operations/queries remain same.&lt;/li&gt;
&lt;li&gt;Supports multiple RDBMS&lt;/li&gt;
&lt;li&gt;Robust migration capabilities&lt;/li&gt;
&lt;li&gt;Prisma lets you filter a list based on a criteria that applies not only to the models of the list being retrieved, but to a relation of that model. Mongoose doesn't offer a dedicated API for relation filters. You can get similar functionality by adding an additional step to filter the results returned by the query.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.prisma.io/studio"&gt;Prisma Studio&lt;/a&gt; tool that helps to manage data easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-prisma"&gt;
  &lt;/a&gt;
  Disadvantages of Prisma
&lt;/h2&gt;

&lt;p&gt;On the other side, Prisma has a few disadvantages over Mongoose as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for multiple model files not available. All models need to be written in &lt;code&gt;schema.prisma&lt;/code&gt; file which makes the file cluttered and hard to debug and read.&lt;/li&gt;
&lt;li&gt;Prisma MongoDB support is currently in preview&lt;/li&gt;
&lt;li&gt;Currently no embedded collection support.&lt;/li&gt;
&lt;li&gt;Error handling is incomplete.&lt;/li&gt;
&lt;li&gt;The Migrate and Introspection workflows are currently not supported.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@@id&lt;/code&gt; and auto-increment are not currently supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#should-you-be-using-prisma-over-mongoose"&gt;
  &lt;/a&gt;
  Should you be using Prisma over Mongoose?
&lt;/h2&gt;

&lt;p&gt;Prisma is a modern ORM which has its own tradeoffs. If you are building a server side application with REST APIs and GraphQL, Prisma would be a great choice. It also makes lives of developers easier. Prisma gives a significant productivity boost for the most common database workflows.&lt;/p&gt;

&lt;p&gt;If these factors don't matter much to you and you want to have more control over database operations then my suggestion will be to go with Mongoose "for the time being".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute-to-prisma"&gt;
  &lt;/a&gt;
  Contribute to Prisma
&lt;/h2&gt;

&lt;p&gt;Prisma MongoDB Connector is still in preview and development. If you want to contribute to the Prisma check out their GitHub Repository by clicking &lt;a href="https://github.com/prisma/prisma"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>prisma</category>
      <category>database</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Unix commands works</title>
      <author>Marcell Cruz</author>
      <pubDate>Thu, 29 Jul 2021 16:39:09 +0000</pubDate>
      <link>https://dev.to/____marcell/how-unix-commands-works-4jic</link>
      <guid>https://dev.to/____marcell/how-unix-commands-works-4jic</guid>
      <description>&lt;p&gt;If after using these commands for years you ever wondered how they work, this is a high level exploration of someone who just had the some thoughts some days ago, this is the result of my exploration, I hope you learn something from it and get more interested in OS development in general, first of all, a little bit of history, all theses programs are originally part of the &lt;a href="https://www.gnu.org/home.en.html"&gt;gnu os&lt;/a&gt;, the first atempt to create a free os, they were written in the mid eighties and are older than Linux itself, they were developed for unix than ported to Linux and are &lt;a href="https://en.wikipedia.org/wiki/POSIX"&gt;posix compliant&lt;/a&gt;, &lt;strong&gt;ls&lt;/strong&gt; in particular is part of coreutils, a separate module of the gnu os, you can see coreutils source code &lt;a href="https://github.com/coreutils/coreutils/tree/master/src"&gt;here&lt;/a&gt;, Most of gnu os was developed by Richard Stallman, the original neckbeard&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--keLhDWHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uco6haju98ftno3dqwa6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keLhDWHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uco6haju98ftno3dqwa6.jpg" alt="neckbeard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GNU/Coreutils is used by most Linux distribution, and you can even use it on Mac OS and Windows, in Mac Os you can even &lt;a href="https://apple.stackexchange.com/questions/69223/how-to-replace-mac-os-x-utilities-with-gnu-core-utilities"&gt;replace the propietary coreutils&lt;/a&gt;. As you might know, Linux is not a OS, Linux is just a &lt;a href="https://en.wikipedia.org/wiki/Kernel_(operating_system)"&gt;kernel&lt;/a&gt;, you need higher level programs to use your system, that's why people sometimes refer to Linux as GNU/Linux, because it's the kernel with the other utilities necessary to realistically use the system in your day to day activities, otherwise you would have to implement everything yourself. I'm gonna focus on how &lt;strong&gt;ls&lt;/strong&gt; is implemented on top of the kernel, if you wanna know what happens right after you type &lt;strong&gt;ls &lt;/strong&gt; in your terminal you should read &lt;a href="https://gist.github.com/amitsaha/8169242#how-does-ls-do-what-it-does"&gt;this&lt;/a&gt; amazing explanation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-ls-works"&gt;
  &lt;/a&gt;
  How ls works
&lt;/h1&gt;

&lt;p&gt;You can see ls source code &lt;a href="https://github.com/coreutils/coreutils"&gt;here&lt;/a&gt;, &lt;br&gt;
this blog posts focuses on explaining &lt;strong&gt;ls&lt;/strong&gt;, but all other core utilities work in a similar fashion, let's get to it. &lt;/p&gt;

&lt;p&gt;the core functionality of &lt;strong&gt;ls&lt;/strong&gt; are actived using two lower level functions &lt;strong&gt;opendir&lt;/strong&gt; and &lt;strong&gt;readdir&lt;/strong&gt;, &lt;strong&gt;opendir&lt;/strong&gt; &lt;em&gt;opens&lt;/em&gt; a directory, which is really just a file in Linux like &lt;a href="https://en.wikipedia.org/wiki/Everything_is_a_file"&gt;everything else&lt;/a&gt; and &lt;strong&gt;readdir&lt;/strong&gt; reads this file line by line, each line as you might have guessed is the directory contents, plus &lt;strong&gt;.&lt;/strong&gt; and &lt;strong&gt;..&lt;/strong&gt; which is used by the system to reference &lt;strong&gt;this&lt;/strong&gt; directory and &lt;strong&gt;where&lt;/strong&gt; this directory is, if you search for these functions in src/ls.c you would find this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kt"&gt;DIR&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dirp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;dirent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;dirp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opendir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 2918&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for opendir&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readdir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 2988&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for readdir&lt;/p&gt;

&lt;p&gt;As you might have guessed this while loop is ls's core functionality, it's the part that reads the file entries in the dir and prints them out, or do whatever it needs to do depending on the options that you pass to ls, all other stuff in the source code is error handling, parsing and applying options, ls has a ton a options that accumulated over the years, if we remove all these options we could implement &lt;strong&gt;ls&lt;/strong&gt; with just a few lines of code, so let's do that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;dirent.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;DIR&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;dirent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d_name&lt;/span&gt;
              &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;closedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if we compile and run our ls version, we get this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHwzaMLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uocrm3ktzhmz6qq22vtp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHwzaMLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uocrm3ktzhmz6qq22vtp.jpg" alt="my_ls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see the output it's pretty similar to gnu ls already, the only difference in this case is that &lt;strong&gt;ls&lt;/strong&gt; is color coding different file types in my system and ls by default don't display &lt;strong&gt;.&lt;/strong&gt; and &lt;strong&gt;..&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ok, now we have a pretty good understanding of how &lt;strong&gt;ls&lt;/strong&gt; is implemented and the main libraries that it uses("stdio.h" and "dirent.h"), but where does these libraries come from? we need to dig deeper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8YOXsAv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bg7vnbak2vc76725fzx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YOXsAv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bg7vnbak2vc76725fzx.jpg" alt="deeper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#glibc-and-system-calls"&gt;
  &lt;/a&gt;
  glibc and system calls
&lt;/h1&gt;

&lt;p&gt;stdio.h and dirent.h and pretty much anyother c library installed in your system lives in /usr/include, stdio and dirent in particular are installed when you install &lt;a href="https://www.gnu.org/software/libc/"&gt;glibc&lt;/a&gt;, yet another gnu project, &lt;strong&gt;printf&lt;/strong&gt; comes from stdio, &lt;strong&gt;opendir&lt;/strong&gt; and &lt;strong&gt;readdir&lt;/strong&gt; comes from dirent, just like &lt;strong&gt;ls&lt;/strong&gt; these functions are abstraction to make it easier to do the things that you want to do in your system, actually everything is a &lt;a href="https://en.wikipedia.org/wiki/Abstraction"&gt;abstraction&lt;/a&gt; all the way down &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gVOKdOHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra3ppoidmuqphm81khut.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gVOKdOHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra3ppoidmuqphm81khut.jpeg" alt="images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ls is a application that uses glibc, glibc itself make some system calls  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6vtxFrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iz4lnahma3s57dz8ggb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6vtxFrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iz4lnahma3s57dz8ggb.png" alt="glibc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see in the graph we don't necessarily &lt;strong&gt;need&lt;/strong&gt; to use glibc to implement &lt;strong&gt;ls&lt;/strong&gt; we could make the system calls ourselves, let's do that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;linux/fs.h&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="n"&gt;u8&lt;/span&gt; &lt;span class="n"&gt;Buff&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;memset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
 &lt;span class="n"&gt;mm_segment_t&lt;/span&gt; &lt;span class="n"&gt;old_fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_fs&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="n"&gt;set_fs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERNEL_DS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys_open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/etc/Info"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;sys_read&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printk&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"string:% s/n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;sys_close&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="n"&gt;set_fs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_fs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#kernel-level-and-user-level"&gt;
  &lt;/a&gt;
  Kernel level and User level
&lt;/h1&gt;

&lt;p&gt;The ls clone that we wrote is running on user level, all the functions that we used, opendir, readdir and printf are user level functions, a lot of things are restricted at user level, functions at user level call other functions at kernel level, this is what we call a &lt;a href="https://elixir.bootlin.com/linux/latest/source/include/linux/syscalls.h#L1074"&gt;"system call"&lt;/a&gt; so the function opendir for example eventually will call sys_open, which is a system call that it self calls do_sys_open which is a kernel level function, the kernel is actually what comunicates with devices and the cpu&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4izvcyh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Kernel_Layout.svg/1200px-Kernel_Layout.svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4izvcyh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Kernel_Layout.svg/1200px-Kernel_Layout.svg.png" alt="kernel_layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The kernel is a program that is always in memory and facilitates the comunication between the hardware and applications, one of these utilities is the functions that we just used, we could go deeper and explore how do_sys_open is implemented at kernel level, but that's propably another post &lt;/p&gt;

&lt;p&gt;As you can see it's a lot harder to understand the sys_call version and you do very little with a lot of code, as you get closer to the kernel you have to deal with internal calls of the system, that's the reason why the kernel exists, it's a abstraction on top of the machine so you don't have to deal with all this low level stuff, you can see in the code that we have to make a lot of different system calls just to read a directory, if you wanna go deeper and learn even more about how linux works I recommend this book &lt;a href="https://www.goodreads.com/book/show/7672214-the-linux-programming-interface"&gt;this book&lt;/a&gt; I'm reading it and it's pretty good&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to stay focused 🔍 as a self taught Frontend Web Developer 💻</title>
      <author>Chris Hansen </author>
      <pubDate>Thu, 29 Jul 2021 16:29:49 +0000</pubDate>
      <link>https://dev.to/hyggedev/how-to-stay-focused-as-a-self-taught-frontend-web-developer-7gp</link>
      <guid>https://dev.to/hyggedev/how-to-stay-focused-as-a-self-taught-frontend-web-developer-7gp</guid>
      <description>&lt;p&gt;Staying &lt;strong&gt;focused&lt;/strong&gt; is one of the hardest tasks when perusing a new &lt;strong&gt;hobby&lt;/strong&gt;, &lt;strong&gt;goal&lt;/strong&gt; or &lt;strong&gt;project&lt;/strong&gt;. Trying to break a bad habit? I'm sure you've been there. Trying to get healthy, maybe shed a few pounds, or even add some? That requires 100% focus. A momentary lapse can spell trouble for a solid weeks worth of good choices. How about I throw &lt;strong&gt;Web&lt;/strong&gt; &lt;strong&gt;Development&lt;/strong&gt; into the mix? 😅  One of the fastest moving and dynamic fields in Tech.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hopefully&lt;/em&gt;, with these few tips, I can help you either stay on track, or prevent you from listening to that doubtful little voice in the back of your head telling you to quit. &lt;strong&gt;Everyone&lt;/strong&gt; has experienced these hurdles. &lt;strong&gt;You're not alone&lt;/strong&gt;,  so let's get into it D:&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dont-let-which-framework-is-the-best-take-up-your-time"&gt;
  &lt;/a&gt;
  Don't Let "which framework is the best" Take Up Your Time 🕔
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqwdVlrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ye821j91lcotab30lr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqwdVlrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ye821j91lcotab30lr1.png" alt="Image banner showcasing top web development frameworks battling eachother"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's unfortunate how often I see this question being asked on all platforms of social media. On Twitter, Instagram, Youtube... people love seeking this answer! I'm sure developers much more experience than myself, will agree, you should just focus on the basics ! I remember quite vividly, during my HTML and CSS learning journey, I told myself, "this process could be quicker." That's when I did my first Google search, "How to speed up web development," or something along those lines. It's when I first discovered and learned of &lt;strong&gt;Angular&lt;/strong&gt;, and other frameworks. As I dived into tutorial after tutorial after tutorial,  I wasn't making any traction. Because not only do frameworks expect you to have a solid grasp of the &lt;strong&gt;fundamentals&lt;/strong&gt;, they essentially have their own language too. At the very least, a set of ground rules and specific syntax that you must adhere too. Specific file structures,  design patterns, etc.  All this does is SLOW down your process of getting really good at HTML, CSS, and Javascript, the only languages you need for a &lt;strong&gt;strong foundation&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;So, what can you take away from this tip? If you're not asking yourself, "I need to speed up my projects development process," a framework is just not necessary. Don't worry about, &lt;em&gt;React vs Vue vs Angular&lt;/em&gt;. They'll come to you when you need 'em. &lt;/p&gt;

&lt;p&gt;PS + I have seen a trend of great developers dodging frameworks all together, and pride themselves at making beautiful websites with HTML, CSS, and Javascript. And trust me, they perform! 👍&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#escape-tutorial-hell"&gt;
  &lt;/a&gt;
  Escape Tutorial Hell ✌️
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fdjr43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvw2obcbvnmtcl4hgcyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fdjr43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvw2obcbvnmtcl4hgcyu.png" alt="Banner showcasing a bunch of youtube tutorials in big letters "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developers getting stuck in &lt;strong&gt;tutorial hell&lt;/strong&gt; is very real and very time consuming. I myself have found myself stuck in a loop of never ending tutorials. But just like you, I had good intentions going into it. I'm gonna learn this, then that, then I'm going to build something great! Right? If you got a big brain and the IQ of Stephen Hawking, then sure, you just might build the &lt;em&gt;next great weather app&lt;/em&gt;. But for us normies, applying what we just learned or "watched" is next to impossible. As we code along with the tutorial, we're not learning and applying. We're mindlessly trying to jot down everything we see on the screen. It's no different than being in an auditorium in college amongst 200 students, just trying to catch every word on the projector before the professor changes pages, yet alone actually listening to what the professor is saying. But, if you can grasp key points in the notes, and immediately after class, skim over important concepts for just 15 minutes, you'll retain much more of what you learned, and can be that much more prepared for your next session. As opposed to not reading your notes immediately after class, majority people will lose about 70% of what they just listened to or wrote down just minutes ago.&lt;/p&gt;

&lt;p&gt;The same applies for web dev tutorials on the web. If you find an interesting project, be sure to &lt;strong&gt;understand the code&lt;/strong&gt; after you have completed the project. Refactor it. Change the UI, colors, the entire theme. Create a clone of the project you just did, but do it from scratch. This is how you can retain the information you were given and actually learn. If you are not already doing this, I promise you will gain some serious traction. And before you know it, you're not only going to build the same project from that tutorial, you're going to build it better. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#take-breaks"&gt;
  &lt;/a&gt;
  Take Breaks 🧘
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TIG_1iLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maczl3pt5k6ugtso76uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TIG_1iLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maczl3pt5k6ugtso76uj.png" alt="A banner showcasing an the word relax in big letters and a person walking their dog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The moment you start to slide, you're shoveling against the tide,"  Marty Lobdell at Pierce College, Washington State. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Taking breaks&lt;/strong&gt; while studying in crucial for effective learning and time management. You may not think hitting the pause button is efficient time management, but hear me out. For the average person, even trying to study for any amount of time over 1 hour, is not ideal. &lt;strong&gt;There are studies that prove the most retention in adults is within a sweet spot of 30 minutes&lt;/strong&gt;. So, if you have 3 hours worth of studying, it's worth it for your to take &lt;strong&gt;3 breaks&lt;/strong&gt; in that time. Breaks can be short, and should be. Take &lt;strong&gt;5 minutes&lt;/strong&gt; doing anything that you enjoy. That can be yoga, reading a book, video games, walking the dog, anything that clears your mind and you have fun doing. After your 5 minutes, you'll be next to &lt;strong&gt;maximum efficiency&lt;/strong&gt; during your next 30 minutes of studying. So rather than a non efficient 3 straight hours of studying, you can break the session down into 30 minute increments, which also sounds more approachable and doable, especially if you're continuing this study cycle for a long period of time. So to circle back to time management, I'd say 2 hours and 45 minutes of efficient learning is a better use of time than 3 straight hours of sluggish studying. And of course this can be &lt;strong&gt;directly applied&lt;/strong&gt; to coding as well. Whether you're studying web development concepts, or coding a project, taking breaks is key to enjoying the process and making it a smoother one. &lt;/p&gt;

&lt;p&gt;To get a better understanding of this concept, heres a clip of Marty Lobdell explaining this study technique. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S6BvM6y0ke4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-pomodoro-technique"&gt;
  &lt;/a&gt;
  The Pomodoro Technique 🍅
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LpgRvJtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivcnwz1xs7gs1fjn8xs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LpgRvJtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivcnwz1xs7gs1fjn8xs.png" alt="A banner showcasing the world pomodoro with a tomato and an alarm clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;Pomodoro Technique&lt;/em&gt;&lt;/strong&gt; is global phenomenon and theres a good reason for it. Every illustration of the Pomodoro technique uses Tomatoes 🍅  Just kidding.. but not really. The technique was invented by Francesco Cirillo during his time as a University student in Italy, and Pomodoro is basically tomato in Italian. Now ya know D: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This study method essentially further empowers our previous tip. It maximizes efficient studying or work, by **incorporating breaks&lt;/strong&gt;, but takes it even further. So how does it work?** &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set your goal or task at hand &lt;/li&gt;
&lt;li&gt;Set your timer for 20-25 minutes&lt;/li&gt;
&lt;li&gt;Study or work until your timer goes off &lt;/li&gt;
&lt;li&gt;Take a 5 minute break doing something you enjoy &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Steps 1 - 4 is &lt;strong&gt;one&lt;/strong&gt; Pomodoro. On your &lt;strong&gt;fifth&lt;/strong&gt; Pomodoro, you increase your break to 15-30 minutes. You then repeat this cycle until you are done. The longer hours you work or study, the more efficient you &lt;strong&gt;can&lt;/strong&gt; become. &lt;/p&gt;

&lt;p&gt;This technique has been widely adopted by companies and organizations all across the world. Especially used by software companies for maximizing coding efficiency, especially popular for pair programming. If you haven't already, I say give it a shot. 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pomofocus.io/"&gt;https://pomofocus.io/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#build-the-right-projects"&gt;
  &lt;/a&gt;
  Build The Right Projects 💻
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNo1KrGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yshcmtsfhscrk78n8hdz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNo1KrGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yshcmtsfhscrk78n8hdz.png" alt="A banner showcasing a person desk with thought bubbles on relevant project ideas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you're starting out, there are a lot of projects that tossed in your direction. Especially if you frequent Youtube as a learning resource. &lt;strong&gt;&lt;em&gt;"The top projects for beginners,"&lt;/em&gt;&lt;/strong&gt; or &lt;em&gt;"&lt;/em&gt;&lt;em&gt;The best Projects to get a job.&lt;/em&gt;&lt;em&gt;"&lt;/em&gt; Some of these may have some truth to them. However, it's all about &lt;strong&gt;focus and efficiency&lt;/strong&gt;. Build a project you are interested in. Do you have a hobby other than coding? Maybe it's music, photography, skateboarding..?  If it's music, build a website that allows users to upload tracks or clips of their work. If you enjoy photography, go crazy and build a beautiful, big and &lt;strong&gt;bold&lt;/strong&gt; photo gallery showcasing all your artwork. Take it a step further, and add a database. Or even authentication to allow others to use the site too. Building a project you are interested in, from scratch, is simply enjoyable. Every aspect of it is &lt;strong&gt;yours&lt;/strong&gt;. Even if you are inspired by something done already. You'll learn so much along the way as well. Should I use Bootstrap, Foundation, or SCSS? Should I use this package, or this animation library. You'll dive into documentation, you'll learn about the software at a &lt;strong&gt;deeper level&lt;/strong&gt;, and will learn to grow an appreciation for great documentation. You'll start to favor some technologies over others because you now understand them more. The whole process of building something from scratch that's your idea, sort of turns into &lt;strong&gt;self-discovery&lt;/strong&gt;. You'll learn a ton about yourself. Before you know it, you'll have an entire tech stack in your go to toolbox, and your ability to focus on meaningful projects will catapult you into being a more &lt;strong&gt;confident developer&lt;/strong&gt; and that's just the beginning of what's to come. 🔥 &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion 👏
&lt;/h2&gt;

&lt;p&gt;That's it for my top tips on &lt;strong&gt;&lt;em&gt;how to stay focused as a self taught Frontend Web Developer.&lt;/em&gt;&lt;/strong&gt; Wherever you are in your web dev journey, I hope these tips can aide you to stay focused, and ignore the doubts and any hurdles you may face along the way. I'm also along for the ride, and as many hardships as a rich and dynamic field in tech can bring about, Web Development has such a great community, and it's the very reason why I'm attempting my first blog post. I have seen so many helping hands, and I want to be a part of it. I have all the confidence in the world, if you ask a fellow developer for assistance, you shall get it. &lt;/p&gt;

&lt;p&gt;Stay focused, I hear the reward is worth it 🤘&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wanna-say-hi"&gt;
  &lt;/a&gt;
  Wanna say 👋  Hi!?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#find-me-on-twitter"&gt;
  &lt;/a&gt;
  Find me on &lt;a href="https://www.twitter.com/hyggedev"&gt;twitter&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Realtime Rails with websockets</title>
      <author>NDREAN</author>
      <pubDate>Thu, 29 Jul 2021 16:12:20 +0000</pubDate>
      <link>https://dev.to/ndrean/realtime-rails-with-websockets-1jk3</link>
      <guid>https://dev.to/ndrean/realtime-rails-with-websockets-1jk3</guid>
      <description>&lt;p&gt;Yet another tuto on Rails' framework &lt;strong&gt;ActionCable&lt;/strong&gt;. I focus on going quickly to the relevant paths to achieve running a rails app with a realtime feature packaged as a standalone process.&lt;/p&gt;

&lt;p&gt;Instead of a traditional chat app, this one simulates managing realtime inventories. It has a button that on-click increments a counter and broadcasts the decremented total; this simulates a customer fulling his basket and decreasing accordingly the visible stock to any other connected customer.&lt;/p&gt;

&lt;p&gt;We will setup the backend and the frontend. The frontend requires the installation of the npm package &lt;strong&gt;actioncable&lt;/strong&gt;, and the backend to enable the middleware &lt;strong&gt;action_cable/engine&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/actioncable"&gt;npm actioncable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.rubyonrails.org/action_cable_overview.html"&gt;Rails guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The frontend is managed by &lt;strong&gt;React&lt;/strong&gt;, and the Websockets are managed by the integrated framework &lt;strong&gt;ActionCable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The process is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on the frontend, implement a component with a button that triggers a POST request to a Rails backend endpoint,&lt;/li&gt;
&lt;li&gt;a Rails controller method responds to this route. It should:

&lt;ul&gt;
&lt;li&gt;save the new value/customer to the database,&lt;/li&gt;
&lt;li&gt;calculate the new stock&lt;/li&gt;
&lt;li&gt;broadcast the total to a dedicated websocket channel&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;in the frontend React component, we update the state of the stock :

&lt;ul&gt;
&lt;li&gt; on each page refresh (a GET request to the database)&lt;/li&gt;
&lt;li&gt; when receiving data through the dedicated websocket channel.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The frontend component "Button.jsx" looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//#Button.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;csrfToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rails/ujs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;..]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; 
  &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;...]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/incrmyprod&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt; 
       &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X-CSRF-Token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counters&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;PG&lt;/span&gt; &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-backend"&gt;
  &lt;/a&gt;
  The backend
&lt;/h3&gt;

&lt;p&gt;We run &lt;code&gt;$&amp;gt; rails g channel counter&lt;/code&gt; and have a "counter" model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/app/channels
  |_ /application_cable
  |_ counter_channel.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our routes, we link the frontend URI to an action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#app/config/routes.rb&lt;/span&gt;
&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/incrmyprod'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'counters#set_counters'&lt;/span&gt;
&lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="no"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'/cable'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the controller's "counters" method "set_counters", we will broadcast the new data to the dedicated websocket channel:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#app/controllers/counters_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_counters&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'counter'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:counter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="no"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'counters_channel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;as_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the dedicated channel, we broadcast this data when received to all subscribed consummers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#app/channels/counter_channel.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterChannel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationCable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Channel&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subscribed&lt;/span&gt;
    &lt;span class="n"&gt;stream_from&lt;/span&gt; &lt;span class="s2"&gt;"counters_channel"&lt;/span&gt; 
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# rebroadcasting the received message to any other connected client&lt;/span&gt;
    &lt;span class="no"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'counters_channel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unsubscribed&lt;/span&gt;
    &lt;span class="c1"&gt;# Any cleanup needed when channel is unsubscribed&lt;/span&gt;
    &lt;span class="n"&gt;stop_all_streams&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-frontend"&gt;
  &lt;/a&gt;
  The frontend:
&lt;/h3&gt;

&lt;p&gt;We installed &lt;code&gt;npm i -g actioncable&lt;/code&gt;. Since we ran &lt;code&gt;rails g channel counter&lt;/code&gt;, we have the files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/javascript/channels
    |_ consumer.js
    |_ index.js
    |_ counter_channels.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;counter_channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./consumer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CounterChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CounterChannel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;connected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;disconnected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Called when there's incoming data on the websocket for this channel&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CounterChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;Button&lt;/strong&gt; component, we will mutate the state of the counter. On page refresh, we fetch from the database and mutate the state for rendering, and when we receive data on the websocket channel, we also mutate the state for rendering. To do this, we pass a function to the &lt;strong&gt;CounterChannel.received&lt;/strong&gt; that mutates the state. If we don't have any data, then we mutate the state with a GET request. This is done wition a &lt;code&gt;useEffect&lt;/code&gt; hook. We can complet the &lt;strong&gt;Button&lt;/strong&gt; component with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CounterChannel&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../channels/counter_channel.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounters&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;CounterChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;received&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setCounters&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/getCounters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no-store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="nx"&gt;setCounters&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;countPG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countPG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;initCounter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;above&lt;/span&gt; &lt;span class="p"&gt;...]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#standalone-setup"&gt;
  &lt;/a&gt;
  Standalone setup
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://guides.rubyonrails.org/action_cable_overview.html#running-standalone-cable-servers"&gt;Rails guide standalone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the frontend, run &lt;code&gt;npm i -g actioncable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the backend, enable the middleware and config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#/config/application.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"action_cable/engine"&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;myapp&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;action_cable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CABLE_FRONT_URL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ws://localhost:28080'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CABLE_ALLOWED_REQUEST_ORIGINS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"http:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="s2"&gt;localhost*"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;origins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;action_cable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;allowed_request_origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origins&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Redis instance has (or not) a "config" file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#config/cable&lt;/span&gt;
&lt;span class="na"&gt;development&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV.fetch("REDIS_CABLE", "redis://:secretpwd@localhost:6379/3" ) %&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;channel_prefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cable_dev&lt;/span&gt;

&lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV.fetch("REDIS_CABLE", "redis://redis:6379/3" ) %&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;channel_prefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cable_prod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#/cable/config.ru&lt;/span&gt;
&lt;span class="nb"&gt;require_relative&lt;/span&gt; &lt;span class="s2"&gt;"../config/environment"&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eager_load!&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="no"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run for example with &lt;a href="https://github.com/DarthSim/overmind"&gt;overmind&lt;/a&gt; the &lt;strong&gt;Procfile&lt;/strong&gt;, with &lt;code&gt;overmind start&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Procfile
assets:  ./bin/webpack-dev-server
web:     bundle exec rails server
redis-server:   redis-server redis/redis.conf
worker:  bundle exec sidekiq -C config/sidekiq.yml
cable: bundle exec puma -p 28080 cable/config.ru
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>websockets</category>
      <category>actioncable</category>
    </item>
    <item>
      <title>Introduction To Cloud Native Chaos Engineering</title>
      <author>Lakshya Gupta</author>
      <pubDate>Thu, 29 Jul 2021 16:00:25 +0000</pubDate>
      <link>https://dev.to/lakshya806/introduction-to-cloud-native-chaos-engineering-28d6</link>
      <guid>https://dev.to/lakshya806/introduction-to-cloud-native-chaos-engineering-28d6</guid>
      <description>&lt;p&gt;In this blog, I will be sharing my learning from a Live stream about chaos engineering. the link to which can be found [here]. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=LK0oDLQE4S8"&gt;https://www.youtube.com/watch?v=LK0oDLQE4S8&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problems-before-chaos-engineering"&gt;
  &lt;/a&gt;
  The problems before Chaos Engineering
&lt;/h2&gt;

&lt;p&gt;Before Chaos Engineering was adopted there was no way to tackle problems that were unpredictable. For example, high traffic on the app would cause a system outage. This outage, even for a small time would cost millions to companies and their reputation as well. This is where we felt that normal streamlined testing is not enough.&lt;/p&gt;

&lt;p&gt;There are many services running in the system and the interaction between them can be unpredictable. These interactions often result in downtime of the system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-chaos-engineering"&gt;
  &lt;/a&gt;
  What is Chaos Engineering?
&lt;/h2&gt;

&lt;p&gt;Chaos engineering can be thought of as a mechanism of running experiments on the system by exposing it to real-life scenarios to see whether the system can withstand unexpected disruptions. These include scenarios of high traffic on the system or when the system faces any sort of outage. By running these experiments on the system we try to find out its weakness and makes the system more resilient. Any event capable of disrupting steady state is a potential variable in a Chaos experiment&lt;/p&gt;

&lt;p&gt;There are four steps in Chaos Engineering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Steady-state&lt;/li&gt;
&lt;li&gt;Hypothesis&lt;/li&gt;
&lt;li&gt;Experiment&lt;/li&gt;
&lt;li&gt;Adapt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details on these can be found on &lt;a href="https://principlesofchaos.org/"&gt;https://principlesofchaos.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-resilience"&gt;
  &lt;/a&gt;
  What is resilience
&lt;/h2&gt;

&lt;p&gt;Resilience is a system's ability to stay working even when a fault is occurred. Resilience of a system can be challenged in many ways such as when the services become unhealthy or when a node in a Kubernetes cluster goes to not-ready state or when there is a memory leak in the system. Chaos engineering caters to these problems of not maintaining a resilient system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-resilience"&gt;
  &lt;/a&gt;
  How to build resilience
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Identify steady state conditions i.e. the state that we want the system to be in ideally.&lt;/li&gt;
&lt;li&gt;Introduce a fault related to what you want to test&lt;/li&gt;
&lt;li&gt;Did the system regain its steady state after introducing a fault?&lt;/li&gt;
&lt;li&gt;If yes then the system is resilient&lt;/li&gt;
&lt;li&gt;If no then work on this weakness and again introduce a fault&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-litmus-and-chaos-engineering-is-introduced-in-devops-space"&gt;
  &lt;/a&gt;
  How Litmus and Chaos Engineering is introduced in DevOps space?
&lt;/h2&gt;

&lt;p&gt;The general idea is that we should also focus on operations and not just the development side. Instead of writing tests for all the microservices individually, we can automate the entire process using Litmus. This make everything very smooth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-kubernetes"&gt;
  &lt;/a&gt;
  Why Kubernetes?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kubernetes is the de facto standard in the industry.&lt;/li&gt;
&lt;li&gt;Kubernetes is highly scalable.&lt;/li&gt;
&lt;li&gt;High availability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cloud-native-chaos-engineering"&gt;
  &lt;/a&gt;
  Cloud Native Chaos Engineering
&lt;/h2&gt;

&lt;p&gt;Cloud Native leverages the idea of using cloud storage to run microservices on the system. Some principles of Cloud Native Chaos Engineering are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Projects are mainly open source&lt;/li&gt;
&lt;li&gt;Community support&lt;/li&gt;
&lt;li&gt;Open observability&lt;/li&gt;
&lt;li&gt;Open API&lt;/li&gt;
&lt;li&gt;GitOps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Run services without an outage&lt;/li&gt;
&lt;li&gt;Run services to meet the business SLAs and SLOs&lt;/li&gt;
&lt;li&gt;Scale your services on demand&lt;/li&gt;
&lt;li&gt;Upgrade you services without an outage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#some-advantages-of-using-litmus"&gt;
  &lt;/a&gt;
  Some advantages of using Litmus:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Litmus is cross-cloud&lt;/li&gt;
&lt;li&gt;It takes a cloud-native approach to create, manage and monitor chaos&lt;/li&gt;
&lt;li&gt;It is a complete framework to implement Chaos Engineering within a cloud-native ecosystem&lt;/li&gt;
&lt;li&gt;It helps both developers and SREs to automate the chaos experiment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-resources"&gt;
  &lt;/a&gt;
  Useful Resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#beginner-friendly-issues-to-contribute"&gt;
  &lt;/a&gt;
  Beginner friendly issues to contribute:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbWYwZVYxMGxPMnZza3Z1RmdocXdpcm9lMW9pZ3xBQ3Jtc0tsU0pGTEdTY1BlMjI3NzhRN0MtOVFfVER3aXJPZGh3UVBrTkxXbmtfa1p3SURjLTdGUGFfZjkyc0d3cTI3NGxzb0c2TkpDbUptTjNlbjY3RTlzUlZaQmdpd0E3c2Y4ZjFvaWsxeVMxcWkwQjA3WXZXWQ&amp;amp;q=https%3A%2F%2Fgithub.com%2Flitmuschaos%2Flitmus"&gt;https://github.com/litmuschaos/litmus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqa0FPMVJ5ZWVRb1hCQjFpRkpWcWxfMXBoV1pNUXxBQ3Jtc0trc2lfZ0Y1V1lleHI5SHdOaDZlWC0zbzctS3haUXduM0NueWZnZG90aW9SWmlwZEw0V25iT2t5aUZFVS12Y3hGSm53Mkp5WmRQZ0tVT2UyNmpza19CdzFCWW95eDNGNFpyTXF2Q1dXd1J6STNPbTZmbw&amp;amp;q=https%3A%2F%2Fgithub.com%2Flitmuschaos%2Ftest-tools"&gt;https://github.com/litmuschaos/test-t...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbnNrMXdtYV9lQmhKYWxyZ2V2eHNHZEtvY0k5Z3xBQ3Jtc0trMGlQWERyM3dlYl9Wa0ZYU0ZCTDN6aEdKRjh4X2daaGpZNXJoNE1abGR4SDlQQllRRjgtTEVJOV9Tc2lNd3hENmZyU2ZaaThyc1VJWjhTb1V2cVB5R3FEZTZPYmo1V1NUdE1KaDlONDJwZGxIUklJdw&amp;amp;q=https%3A%2F%2Fgithub.com%2Flitmuschaos%2Fwebsite-litmuschaos"&gt;https://github.com/litmuschaos/websit...&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blogs-and-videos-to-learn-more-about-litmus"&gt;
  &lt;/a&gt;
  Blogs and videos to learn more about Litmus:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbl9USS04ck1qZ2RIY0l5UmZsZGZIWXl5T3plQXxBQ3Jtc0tuY2I5czFsLUVwMGFDT1MzeGFwbm80LV9abl9ZSVVnMTRrMlllVmdnNV9ldW1JakVzREdsRHkybnZuaFJRYTVWMnRKSjU2Z0ppaXh0WmNCemdXZ0VOYWwwRXhTaHBhQmZtWS1lQkJwVXp4aUNEeUVZMA&amp;amp;q=https%3A%2F%2Fdev.to%2Flitmus-chaos"&gt;https://dev.to/litmus-chaos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbHF0U2ozMXNRdUtqV1lPVzlwcDJtS0RXTlFmUXxBQ3Jtc0trWkpDYkwtcUhiVmpGMlFFXzdqZFJCTUM4THBBSzFFY05ZZjdlcE15dHBEUWFxWURDVk0zTXFCN2xtUDFHRUx5eG9LcGhaamFrbVZfbDBwbzV1QzF2UjF3QWE0eHN2X2hNU2NuQUE3ZXJCcFQ4ek1xOA&amp;amp;q=https%3A%2F%2Fmedium.com%2Flitmus-chaos"&gt;https://medium.com/litmus-chaos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCa57PMqmz_j0wnteRa9nCaw/videos"&gt;https://www.youtube.com/channel/UCa57...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbmR6UVh2Z0VqTUxFSUN5dkV5Z1pKRkFhVFNqUXxBQ3Jtc0tsdEp4QnIxS3VpMjZVTHlMRF83OXM3VHptdjl1VERyTVg4X0tKWVFhRDlaZTI2WWlUUmNCTkNzQnJqanBaZ2k4Z2Q4RkNiOWpfb2FIMmFvT1AxZHpXTXg1NG10U254RmRLdXNVakFJNjB6Yk0takFWNA&amp;amp;q=https%3A%2F%2Fgithub.com%2Flitmusbot%2Fkatacoda-scenarios"&gt;https://github.com/litmusbot/katacoda...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can join the slack community too! That is where you can ask your queries and get to learn more about chaos &amp;amp; contributing to Litmus! To join the slack please follow the following steps!&lt;br&gt;
Step 1: Join the Kubernetes slack using the following link: &lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbUpyY0ZFYmFvS2ZqQjVkNXAzY0ZsTkpubHc1Z3xBQ3Jtc0tsdVFZYXVxTGFOTHNKNzE5TGw2ME51dUVOR25paTFsWDlGMzR6MVFuQWRBVnV2ZGdFSnF3Q3lDVFVhakEybF83dGtYWVZfZXJZYnUwaHgtMFpoWnlzWGpYOGtEeVNvbEdOd1V6bm53Yjl1NmdjcWxaSQ&amp;amp;q=https%3A%2F%2Fslack.k8s.io%2F"&gt;https://slack.k8s.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Join the &lt;a href="https://www.youtube.com/hashtag/litmus"&gt;#litmus&lt;/a&gt; channel on the Kubernetes slack or use this link after joining the Kubernetes slack: &lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbkhBMEttVHo0SVk0dHkzUk1iYlNQSHZFUTVyQXxBQ3Jtc0tsUWhRRzFEYnBZN1lfWXNjZG5ORW5nMGMxbnh0Y3Y2U0l2eUhIeU9RenQ3cHZCOFV5Y0s3Vlg1eHlSVVhSb2E4S2EweEhSSFU4cU9OMGFzZkNaWkszVjdidTNNaUZUblpXa1JmTjFpdHNEY3U1Y1Vudw&amp;amp;q=https%3A%2F%2Fslack.litmuschaos.io%2F"&gt;https://slack.litmuschaos.io/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-"&gt;
  &lt;/a&gt;
  Thank you! :)
&lt;/h3&gt;

</description>
      <category>kubernetes</category>
      <category>cloudnative</category>
      <category>litmus</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Activision Blizzard Discrimination and Harassment Suit, the Incredible Gail.com &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 29 Jul 2021 15:58:40 +0000</pubDate>
      <link>https://dev.to/devteam/activision-blizzard-discrimination-and-harassment-suit-the-incredible-gail-com-more-on-devnews-53j0</link>
      <guid>https://dev.to/devteam/activision-blizzard-discrimination-and-harassment-suit-the-incredible-gail-com-more-on-devnews-53j0</guid>
      <description>&lt;p&gt;Listen to S5E2 of the DevNews podcast today!&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E2 - Activision Blizzard Discrimination and Harassment Suit, Security Issues With Some Independent Phone Producers, and the Incredible Gail.com&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com"&gt;
      &lt;img id="episode-profile-image" alt="S5:E2 - Activision Blizzard Discrimination and Harassment Suit, Security Issues With Some Independent Phone Producers, and the Incredible Gail.com" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guest:&lt;/strong&gt; &lt;a href="https://twitter.com/kylerankin"&gt;Kyle Rankin&lt;/a&gt;, Chief Security Officer at Purism, SPC and the author of a number of books on security and infrastructure, most recently Linux Hardening in Hostile Networks for Pearson. &lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e2-activision-blizzard-discrimination-harassment/id1525581923?i=1000530367033"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/1cUPPfVV5Zq5Vou66vUItb"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzM0?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjwrq200ojyAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com-85747955"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s5e2-activision-blizzard-SA8ukmYJFUZ/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=164783628"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/175"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season five sponsor, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; ❤️ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the season premiere of DevNews!&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>A Sneak Peek of Ruby's New Debugger!</title>
      <author>Stan Lo</author>
      <pubDate>Thu, 29 Jul 2021 15:22:16 +0000</pubDate>
      <link>https://dev.to/st0012/a-sneak-peek-of-ruby-s-new-debugger-5caa</link>
      <guid>https://dev.to/st0012/a-sneak-peek-of-ruby-s-new-debugger-5caa</guid>
      <description>&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ruby"&gt;
        ruby
      &lt;/a&gt; / &lt;a href="https://github.com/ruby/debug"&gt;
        debug
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Debugging functionality for Ruby
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/ruby/debug"&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/a&gt; is Ruby's new debugger and will be included in Ruby 3.1. Since I've been both contributing to and using it for a while, I feel it's time to give you guys a sneak peek before its &lt;code&gt;1.0&lt;/code&gt; release 🙂&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Since it's not officially released yet, any feature mentioned in this article could still be modified/removed in the released version&lt;/em&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As I have mentioned, it's planned to be a standard library of Ruby 3.1. And currently, you can install it as a gem, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gem install debug --pre
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Gemfile&lt;/span&gt;
&lt;span class="c1"&gt;# it's under active development, so I suggest using GitHub as source when possible&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github: &lt;/span&gt;&lt;span class="s2"&gt;"ruby/debug"&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functionality-wise, &lt;code&gt;debug&lt;/code&gt; is similar to the famous &lt;code&gt;GDB&lt;/code&gt; debugger and Ruby's &lt;code&gt;byebug&lt;/code&gt; gem. It provides a rich set of &lt;a href="https://github.com/ruby/debug#debug-command-on-the-debug-console"&gt;debug commands&lt;/a&gt; and has some unique features. &lt;/p&gt;

&lt;p&gt;Quoted from its README:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;New debug.rb has several advantages:

-   Fast: No performance penalty on non-stepping mode and non-breakpoints.
-   Remote debugging: Support remote debugging natively.
    -   UNIX domain socket
    -   TCP/IP
    -   VSCode/DAP integration (VSCode rdbg Ruby Debugger - Visual Studio Marketplace)
-   Extensible: application can introduce debugging support with several ways:
    -   By `rdbg` command
    -   By loading libraries with `-r` command line option
    -   By calling Ruby's method explicitly
-   Misc
    -   Support threads (almost done) and ractors (TODO).
    -   Support suspending and entering to the console debugging with `Ctrl-C` at most of timing.
    -   Show parameters on backtrace command.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And these are my favorite features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's colorized.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGihzjlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxc3ylweoqelut9rddsi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGihzjlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxc3ylweoqelut9rddsi.png" alt="Colorize Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When showing backtrace with the &lt;code&gt;backtrace&lt;/code&gt; command, it also shows method arguments, block arguments, and the return value.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;=&amp;gt;#0    Foo#forth_call(num1=20, num2=10) at target.rb:20 #=&amp;gt; 30
  #1    block {|ten=10|} in second_call at target.rb:8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It's possible to script your debug commands with &lt;code&gt;binding.break&lt;/code&gt; and reduce manual operations. (See the combinations section for examples)&lt;/li&gt;
&lt;li&gt;There are several commands to set breakpoints that trigger under different conditions, like &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;watch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-bindingbreak-endraw-alias-raw-bindingb-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;binding.break&lt;/code&gt; (alias: &lt;code&gt;binding.b&lt;/code&gt;)
&lt;/h2&gt;

&lt;p&gt;If you're a heavy &lt;code&gt;pry&lt;/code&gt; user like me, you can use a familiar &lt;code&gt;binding.break&lt;/code&gt; (or just &lt;code&gt;binding.b&lt;/code&gt;) to kick off the debug session as usual.&lt;/p&gt;

&lt;p&gt;But &lt;code&gt;binding.break&lt;/code&gt; is actually more powerful than &lt;code&gt;binding.pry&lt;/code&gt;, because it can take commands! &lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;binding.b(do: "catch CustomException")&lt;/code&gt; - debugger will execute the command (&lt;code&gt;catch customExeption&lt;/code&gt;) and continue the program.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;binding.b(pre: "catch CustomException")&lt;/code&gt; - debugger will execute the command (&lt;code&gt;catch customExeption&lt;/code&gt;) and stop at the line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(To execute multiple commands, use &lt;code&gt;;;&lt;/code&gt; as the separator: &lt;code&gt;"cmd1 ;; cmd2 ;; cmd3"&lt;/code&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fequently-used-commands"&gt;
  &lt;/a&gt;
  Fequently Used Commands
&lt;/h2&gt;

&lt;p&gt;The new debugger has many powerful commands. And here are the ones I use the most:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-break-endraw-alias-raw-b-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;break&lt;/code&gt; (alias: &lt;code&gt;b&lt;/code&gt;)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;
&lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;

&lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#basic-usages"&gt;
  &lt;/a&gt;
  Basic Usages
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;b A#foo&lt;/code&gt; - stops when &lt;code&gt;b1.foo&lt;/code&gt;, &lt;code&gt;b2.foo&lt;/code&gt;, and &lt;code&gt;c.foo&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b A.bar&lt;/code&gt; - stops when &lt;code&gt;B.bar&lt;/code&gt; and &lt;code&gt;C.bar&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b B#foo&lt;/code&gt; - stops when &lt;code&gt;b1.foo&lt;/code&gt; and &lt;code&gt;b2.foo&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b B.bar&lt;/code&gt; - stops when &lt;code&gt;B.bar&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b b1.foo&lt;/code&gt; - stops when &lt;code&gt;b1.foo&lt;/code&gt; is called&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;b b1.foo do: cmd&lt;/code&gt; - executes &lt;code&gt;cmd&lt;/code&gt; when &lt;code&gt;b1.foo&lt;/code&gt; is called but doesn't stop&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b b1.foo pre: cmd&lt;/code&gt; - executes &lt;code&gt;cmd&lt;/code&gt; when &lt;code&gt;b1.foo&lt;/code&gt; is called and stops&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-catch-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;catch&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooException&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;StandardError&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BarException&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;StandardError&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;raise_foo&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;FooException&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;raise_bar&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;BarException&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;


&lt;span class="n"&gt;raise_foo&lt;/span&gt;
&lt;span class="n"&gt;raise_bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;catch StandardError&lt;/code&gt; - stops when any instance of &lt;code&gt;StandardError&lt;/code&gt; is raised, including &lt;code&gt;FooException&lt;/code&gt; and &lt;code&gt;BarException&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;catch FooException&lt;/code&gt; - stops when &lt;code&gt;FooException&lt;/code&gt; is raised&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-backtrace-endraw-alias-raw-bt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;backtrace&lt;/code&gt; (alias &lt;code&gt;bt&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example Output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;=&amp;gt;#0    Foo#forth_call(num1=20, num2=10) at target.rb:20 #=&amp;gt; 30
  #1    block {|ten=10|} in second_call at target.rb:8
  #2    Foo#third_call_with_block(block=#&amp;lt;Proc:0x00007f9283101568 target.rb:7&amp;gt;) at target.rb:15
  #3    Foo#second_call(num=20) at target.rb:7
  #4    Foo#first_call at target.rb:3
  #5    &amp;lt;main&amp;gt; at target.rb:23
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bt&lt;/code&gt; - shows all frames on the stack&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bt 10&lt;/code&gt; - only shows the first 10 frames&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bt /my_lib/&lt;/code&gt; - only shows the frames with path that matches &lt;code&gt;my_lib&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-outline-endraw-alias-raw-ls-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;outline&lt;/code&gt; (alias &lt;code&gt;ls&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;Similar to the &lt;code&gt;ls&lt;/code&gt; command in &lt;code&gt;irb&lt;/code&gt; or &lt;code&gt;pry&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-bindingb-endraw-command-combinations"&gt;
  &lt;/a&gt;
  &lt;code&gt;binding.b&lt;/code&gt; + Command Combinations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-bindingbdo-b-foobar-do-bt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;binding.b(do: "b Foo#bar do: bt")&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It allows you to inspect a method call's backtrace without touching the method definition or typing commands manually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;do: &lt;/span&gt;&lt;span class="s2"&gt;"b Foo#bar do: bt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;
  &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;some_method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DEBUGGER: Session start (pid: 75555)
[1, 10] in target.rb
=&amp;gt;    1| binding.b(do: "b Foo#bar do: bt")
      2|
      3| class Foo
      4|   def bar
      5|   end
      6| end
      7|
      8| def some_method
      9|   Foo.new.bar
     10| end
=&amp;gt;#0    &amp;lt;main&amp;gt; at target.rb:1
(rdbg:binding.break) b Foo#bar do: bt
uninitialized constant Foo
#0  BP - Method (pending)  Foo#bar do: bt
DEBUGGER:  BP - Method  Foo#bar at target.rb:4 do: bt is activated.
[1, 10] in target.rb
      1| binding.b(do: "b Foo#bar do: bt")
      2|
      3| class Foo
=&amp;gt;    4|   def bar
      5|   end
      6| end
      7|
      8| def some_method
      9|   Foo.new.bar
     10| end
=&amp;gt;#0    Foo#bar at target.rb:4
  #1    Object#some_method at target.rb:9
  # and 1 frames (use `bt' command for all frames)

Stop by #0  BP - Method  Foo#bar at target.rb:4 do: bt
(rdbg:break) bt
=&amp;gt;#0    Foo#bar at target.rb:4
  #1    Object#some_method at target.rb:9
  #2    &amp;lt;main&amp;gt; at target.rb:12
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-bindingbdo-b-foobar-do-info-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;binding.b(do: "b Foo#bar do: info")&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It allows you to inspect a method's environment (e.g. argument) when called:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;do: &lt;/span&gt;&lt;span class="s2"&gt;"b Foo#bar do: info"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; 
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;
  &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;some_method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DEBUGGER: Session start (pid: 75924)
[1, 10] in target.rb
=&amp;gt;    1| binding.b(do: "b Foo#bar do: info")
      2|
      3| class Foo
      4|   def bar(a)
      5|     a
      6|   end
      7| end
      8|
      9| def some_method
     10|   Foo.new.bar(10)
=&amp;gt;#0    &amp;lt;main&amp;gt; at target.rb:1
(rdbg:binding.break) b Foo#bar do: info
uninitialized constant Foo
#0  BP - Method (pending)  Foo#bar do: info
DEBUGGER:  BP - Method  Foo#bar at target.rb:4 do: info is activated.
[1, 10] in target.rb
      1| binding.b(do: "b Foo#bar do: info")
      2|
      3| class Foo
      4|   def bar(a)
=&amp;gt;    5|     a
      6|   end
      7| end
      8|
      9| def some_method
     10|   Foo.new.bar(10)
=&amp;gt;#0    Foo#bar(a=10) at target.rb:5
  #1    Object#some_method at target.rb:10
  # and 1 frames (use `bt' command for all frames)

Stop by #0  BP - Method  Foo#bar at target.rb:4 do: info
(rdbg:break) info
%self = #&amp;lt;Foo:0x00007fdac491c200&amp;gt;
a = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm a Rails developer, so I usually put the combination code at the beginning of a controller action, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="nb"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;pre: &lt;/span&gt;&lt;span class="s2"&gt;"b User#buggy_method do: info"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# other code&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then the debugger would execute the command and/or stops at the method I expected. &lt;br&gt;
I don't need to jump between multiple files for adding &lt;code&gt;binding.pry&lt;/code&gt; or &lt;code&gt;puts&lt;/code&gt; anymore 😎&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-small-drawback"&gt;
  &lt;/a&gt;
  A Small Drawback
&lt;/h3&gt;

&lt;p&gt;However, the new debugger isn't all perfect (yet). Unlike in &lt;code&gt;byebug&lt;/code&gt; or &lt;code&gt;pry&lt;/code&gt;, you can't directly evaluate a Ruby expression in the debug session:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(rdbg) 1 + 1
unknown command: 1 + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To evaluate an expression, you need to use &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;pp&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(rdbg) p 1 + 1
=&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But according to the project's maintainer &lt;a href="https://github.com/ko1"&gt;@ko1&lt;/a&gt;'s '&lt;a href="https://github.com/ruby/debug/issues/148#issuecomment-887687532"&gt;comment&lt;/a&gt;, expression evaluation may be supported before the official &lt;code&gt;1.0&lt;/code&gt; release.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;Although it's not officially released yet, I've started using it at work daily. And I believe it'll soon become an must-have tool in every Rubyists' toolbox. So if you're curious about its capability, I encourage to give it a try 😉&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>debug</category>
      <category>rails</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Understanding JavaScript decorators</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 29 Jul 2021 14:56:29 +0000</pubDate>
      <link>https://dev.to/logrocket/understanding-javascript-decorators-ba2</link>
      <guid>https://dev.to/logrocket/understanding-javascript-decorators-ba2</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/lawrenceoputa/"&gt;Lawrence Eagles&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://dictionary.cambridge.org/dictionary/english/decorate"&gt;Cambridge dictionary&lt;/a&gt;, to decorate something means "to add something to an object or place, especially in order to make it more attractive."&lt;/p&gt;

&lt;p&gt;Decorating in programming is simply wrapping one piece of code with another, thereby decorating it. A decorator (also known as a decorator function) can additionally refer to the design pattern that wraps a function with another function to extend its functionality.&lt;/p&gt;

&lt;p&gt;This concept is possible in JavaScript because of first-class functions — JavaScript functions that are treated as &lt;a href="https://en.wikipedia.org/wiki/First-class_citizen"&gt;first-class citizens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The concept of decorators is not new in JavaScript because higher-order functions are a form of function decorators.&lt;/p&gt;

&lt;p&gt;Let’s elaborate on this in the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-decorators"&gt;
  &lt;/a&gt;
  Function decorators
&lt;/h2&gt;

&lt;p&gt;Function decorators are functions. They take a function as an argument and return a new function that enhances the function argument without modifying it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#higherorder-functions"&gt;
  &lt;/a&gt;
  Higher-order functions
&lt;/h3&gt;

&lt;p&gt;In JavaScript, higher-order functions take a first-class function as an argument and/or return other functions.&lt;/p&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loggerDecorator&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message logged at:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decoratedLogger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loggerDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have decorated the &lt;code&gt;logger&lt;/code&gt; function by using the &lt;code&gt;loggerDecorator&lt;/code&gt; function. The returned function — now stored in the &lt;code&gt;decoratedLogger&lt;/code&gt; variable —  does not modify the &lt;code&gt;logger&lt;/code&gt; function. Instead, the returned function decorates it with the ability to print the time a message is logged.&lt;/p&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lawrence logged in: logger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns Lawrence logged in: logger&lt;/span&gt;

&lt;span class="nx"&gt;decoratedLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lawrence logged in: decoratedLogger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// returns:&lt;/span&gt;
&lt;span class="c1"&gt;// Lawrence logged in: decoratedLogger&lt;/span&gt;
&lt;span class="c1"&gt;// message logged at: 6/20/2021, 9:18:39 PM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that when the &lt;code&gt;logger&lt;/code&gt; function is called, it logs the message to the console. But when the &lt;code&gt;decoratedLogger&lt;/code&gt; function is called, it logs both the message and current time to the console.&lt;/p&gt;

&lt;p&gt;Below is another sensible example of a function decorator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//ordinary multiply function&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// validated integers&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Argument cannot be a non-integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//decorated multiply function that only multiplies integers&lt;/span&gt;
&lt;span class="nx"&gt;MultiplyValidArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Multiply&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;MultiplyValidArgs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our code above, we have an ordinary &lt;code&gt;Multiply&lt;/code&gt; function that gives us the product of all its arguments. However, with our &lt;code&gt;Validator&lt;/code&gt; function — which is a decorator — we extend the functionality of our &lt;code&gt;Multiply&lt;/code&gt; function to validate its input and multiply only integers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#class-decorators"&gt;
  &lt;/a&gt;
  Class Decorators
&lt;/h2&gt;

&lt;p&gt;In JavaScript, function decorators exist since the language supports higher-order functions. The pattern used in function decorators cannot easily be used on JavaScript classes. Hence, the &lt;a href="https://tc39.es/proposal-decorators/"&gt;TC39 class decorator proposal&lt;/a&gt;. You can &lt;a href="https://tc39.es/process-document/"&gt;learn more about the TC39 process here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The TC39 class decorator proposal aims to solve this problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Logged at: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;getBio&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is a &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// creates a new person&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;man&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lawrence&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// decorates the getBio method&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;decoratedGetBio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;man&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;decoratedGetBio&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError: Cannot read property 'name' of undefined at getBio&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We tried to decorate the &lt;code&gt;getBio&lt;/code&gt; method using the function decorator technique, but it does not work. We get a &lt;code&gt;TypeError&lt;/code&gt; because when the &lt;code&gt;getBio&lt;/code&gt; method is called inside the &lt;code&gt;log&lt;/code&gt; function, the &lt;code&gt;this&lt;/code&gt; variable refers the inner function to the global object.&lt;/p&gt;

&lt;p&gt;We can work around this by binding the &lt;code&gt;this&lt;/code&gt; variable to the &lt;code&gt;man&lt;/code&gt; instance of the &lt;code&gt;Person&lt;/code&gt; class as seen below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// decorates the getBio method&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;decoratedGetBio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;man&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;man&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;decoratedGetBio&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// returns&lt;/span&gt;
&lt;span class="c1"&gt;// Logged at: 6/22/2021, 11:56:57 AM&lt;/span&gt;
&lt;span class="c1"&gt;// Lawrence is a 20 years old developer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although this works, it requires a bit of a hack and a good understanding of the JavaScript &lt;code&gt;this&lt;/code&gt; variable. So there is a need for a cleaner and easier-to-understand method of using decorators with classes.&lt;/p&gt;

&lt;p&gt;Class decorators — or strictly decorators — are a proposal for extending JavaScript classes. &lt;a href="https://github.com/tc39/proposals#stage-2"&gt;TC39 is currently a stage 2 proposal&lt;/a&gt;, meaning they are expected to be developed and eventually included in the language.&lt;/p&gt;

&lt;p&gt;However, with the introduction of ES2015+, and as transpilation has become commonplace, we can use this feature with the help of tools such as &lt;a href="https://babeljs.io"&gt;Babel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Decorators use a special syntax whereby they are prefixed with an &lt;code&gt;@&lt;/code&gt; symbol and placed immediately above the code being decorated, as seen below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;log&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#types-of-class-decorators"&gt;
  &lt;/a&gt;
  Types of class decorators
&lt;/h3&gt;

&lt;p&gt;Currently, the types of supported decorators are on classes and members of classes — such as methods, getters, and setters.&lt;/p&gt;

&lt;p&gt;Let’s learn more about them below.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#class-member-decorators"&gt;
  &lt;/a&gt;
  Class member decorators
&lt;/h4&gt;

&lt;p&gt;A class member decorator is a ternary function applied to members of a class. It has the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Target — this refers to the class that contains the member property&lt;/li&gt;
&lt;li&gt;  Name — this refers to the name of the member property we are decorating in the class&lt;/li&gt;
&lt;li&gt;  Descriptor — this is the descriptor object with the following properties: value, writable, enumerable, and configurable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; property of the descriptor object refers to the member property of the class we are decorating. This makes possible a pattern where we can replace our decorated function.&lt;/p&gt;

&lt;p&gt;Let’s learn about this by rewriting our &lt;code&gt;log decorator&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Logged at: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Error: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;log&lt;/span&gt;
  &lt;span class="nx"&gt;getBio&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is a &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; years old &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// creates a new person&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;man&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lawrence&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;developer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;man&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBio&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we have successfully refactored our &lt;code&gt;log decorator&lt;/code&gt; — from function decorator pattern to member class decorator.&lt;/p&gt;

&lt;p&gt;We simply accessed the member class property — in this case, the &lt;code&gt;getBio&lt;/code&gt; method — with the &lt;code&gt;descriptor value&lt;/code&gt;, and replaced it with a new function.&lt;/p&gt;

&lt;p&gt;This is cleaner and can be more easily reused than plain higher-order functions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#class-decorators"&gt;
  &lt;/a&gt;
  Class decorators
&lt;/h4&gt;

&lt;p&gt;These decorators are applied to the whole class, enabling us to decorate the class.&lt;/p&gt;

&lt;p&gt;The class decorator function is a unary function that takes the constructor function being decorated as an argument.&lt;/p&gt;

&lt;p&gt;Consider the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;target is:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;log&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;profession&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lawrence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lawrence Eagles&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Developer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lawrence&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// returns&lt;/span&gt;
&lt;span class="c1"&gt;// target is: [Function: Person]&lt;/span&gt;
&lt;span class="c1"&gt;// [ 'Lawrence Eagles', 'Developer' ]&lt;/span&gt;
&lt;span class="c1"&gt;// Person {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our small, contrived example, we log the &lt;code&gt;target&lt;/code&gt; argument — the constructor function — and the provided arguments before returning an instance of the class constructed with these arguments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-decorators"&gt;
  &lt;/a&gt;
  Why decorators?
&lt;/h2&gt;

&lt;p&gt;Decorators enable us to write cleaner code by providing an efficient and understandable way of wrapping one piece of code with another. It also provides a clean syntax for applying this wrapper.&lt;/p&gt;

&lt;p&gt;This syntax makes our code less distracting because it separates the feature-enhancing code away from the core function. And it enables us to add new features without increasing our code complexity.&lt;/p&gt;

&lt;p&gt;Additionally, decorators help us extend the same functionality to several functions and classes, thereby enabling us to write code that is easier to debug and maintain.&lt;/p&gt;

&lt;p&gt;While decorators already exist in JavaScript as &lt;a href="https://blog.logrocket.com/a-closer-look-at-javascript-closures-higher-order-functions-and-currying/"&gt;higher-order functions&lt;/a&gt;, it is difficult or even impossible to implement this technique in classes. Hence, the special syntax TC39 offers is for easy usage with classes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Although decorators are a stage 2 proposal, they are already popular in the JavaScript world — thanks to Angular and &lt;a href="https://blog.logrocket.com/a-practical-guide-to-typescript-decorators/"&gt;TypeScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From this article, we can see that they foster code reusability, thereby keeping our code DRY.&lt;/p&gt;

&lt;p&gt;As we wait for decorators to be officially available in JavaScript, you can start using them by using Babel. And I believe you have learned enough in this article to give decorators a try in your next project.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-debug-javascript-errors-easier-by-understanding-the-context"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Debug JavaScript errors easier by understanding the context
&lt;/h2&gt;

&lt;p&gt;Debugging code is always a tedious task. But the more you understand your errors the easier it is to fix them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; allows you to understand these errors in new and unique ways. Our frontend monitoring solution tracks user engagement with your JavaScript frontends to give you the ability to find out exactly what the user did that led to an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fD6-0SwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2020/06/reproduce-javascript-errors.gif" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LogRocket records console logs, page load times, stacktraces, slow network requests/responses with headers + bodies, browser metadata, and custom logs. Understanding the impact of your JavaScript code will never be easier!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Interfaces vs Abstract Classes in PHP</title>
      <author>Ash Allen</author>
      <pubDate>Thu, 29 Jul 2021 14:47:38 +0000</pubDate>
      <link>https://dev.to/ashallendesign/interfaces-vs-abstract-classes-in-php-4jf1</link>
      <guid>https://dev.to/ashallendesign/interfaces-vs-abstract-classes-in-php-4jf1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I recently published a blog post that talked about &lt;a href="https://ashallendesign.co.uk/blog/using-interfaces-to-write-better-php-code"&gt;how to write better PHP code using interfaces&lt;/a&gt;. It covered the basics on what an interface was, what they could do and how you could use them to make your PHP code more extendable and maintainable.&lt;/p&gt;

&lt;p&gt;One of the main comments that I got on the post was from developers who wanted to know "when would I use an interface instead of an abstract class?". So I thought I'd write this post to explain the differences between abstract classes and interfaces in PHP and give a brief overview of when you should use either of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-interfaces"&gt;
  &lt;/a&gt;
  What Are Interfaces?
&lt;/h2&gt;

&lt;p&gt;In basic terms, an interface should describe how a class implementing them will be built, they're like a blueprint describing the public methods and constants they should include.&lt;/p&gt;

&lt;p&gt;Interfaces &lt;strong&gt;can&lt;/strong&gt; be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Used to define public method signatures for a class.&lt;/li&gt;
&lt;li&gt;Used to define constants for a class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interfaces &lt;strong&gt;cannot&lt;/strong&gt; be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instantiated on their own.&lt;/li&gt;
&lt;li&gt;Used to define private or protected methods for a class.&lt;/li&gt;
&lt;li&gt;Used to define properties for a class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Interfaces are used to define the public methods that a class should include. It's important to remember that an interface is always meant to be implemented by a class, so this is where you define just the signature of a method, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;HomeInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="no"&gt;MATERIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Brick'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getRooms&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hasGarden&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and not something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;HomeInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$material&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Brick'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Open the door here...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getRooms&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Get the room data here...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hasGarden&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Determine if the home has a garden...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to &lt;a href="https://www.php.net/manual/en/language.oop5.interfaces.php" rel="noopener noreferrer"&gt;php.net&lt;/a&gt;, interfaces serve two main purposes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To allow developers to create objects of different classes that may be used interchangeably because they implement the same interface or interfaces. A common example is multiple database access services, multiple payment gateways, or different caching strategies. Different implementations may be swapped out without requiring any changes to the code that uses them.&lt;/li&gt;
&lt;li&gt;To allow a function or method to accept and operate on a parameter that conforms to an interface, while not caring what else the object may do or how it is implemented. These interfaces are often named like Iterable, Cacheable, Renderable, or so on to describe the significance of the behavior.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using our interface above and sticking with the house analogy, we could create different classes that implement &lt;code&gt;HomeInterface&lt;/code&gt;, such as &lt;code&gt;House&lt;/code&gt;, &lt;code&gt;Flat&lt;/code&gt; or &lt;code&gt;Caravan&lt;/code&gt;. By using the interface we can be sure that our class contains the 3 necessary methods and all use the correct method signature. For example, we could have a &lt;code&gt;House&lt;/code&gt; class that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;House&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;HomeInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Open the door here...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getRooms&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Get the room data here...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hasGarden&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Determine if the home has a garden...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-are-abstract-classes"&gt;
  &lt;/a&gt;
  What Are Abstract Classes?
&lt;/h2&gt;

&lt;p&gt;Abstract classes are very similar to interfaces; they're not designed to be instantiated on their own and provide a base line implementation for you to extend from.&lt;/p&gt;

&lt;p&gt;Taking our example above of homes, if an interface is your blueprint then an abstract class is your show room model. It works, and it's a great example of a home but you still need to furnish and decorate it to make it your own.&lt;/p&gt;

&lt;p&gt;Abstract classes &lt;strong&gt;can&lt;/strong&gt; be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Used to define method signatures for a class using "abstract" methods (similar to interfaces).&lt;/li&gt;
&lt;li&gt;Used to define methods.&lt;/li&gt;
&lt;li&gt;Used to define constants for a class.- Used to define properties for a class.&lt;/li&gt;
&lt;li&gt;Extended by a child class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abstract classes &lt;strong&gt;cannot&lt;/strong&gt; be:&lt;br&gt;
-Instantiated on their own.&lt;/p&gt;

&lt;p&gt;To get an idea of what this means, let's look at an example abstract class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;House&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="no"&gt;MATERIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Brick'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getRooms&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'Bedroom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'Bathroom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'Living Room'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'Kitchen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hasGarden&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;House&lt;/code&gt; class is abstract which means that we can't instantiate one of these directly. To be able to use it, we'd need to inherit from it. For example, let's create a &lt;code&gt;MyHouse&lt;/code&gt; class that extends our &lt;code&gt;House&lt;/code&gt; abstract class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyHouse&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;House&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;openDoor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Open the door...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getRooms&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'Bedroom One'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'Bedroom Two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'Bathroom'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'Living Room'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'Kitchen'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="nv"&gt;$house&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;House&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="nv"&gt;$house&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MyHouse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might have noticed that in the &lt;code&gt;House&lt;/code&gt; class that we have declared an abstract public method called &lt;code&gt;openDoor()&lt;/code&gt;. This is basically allowing us to define a method's signature that a child class should include in a similar way as we would with an interface. This is really handy if you want to share some functionality with your child classes but also enforce that they include their own implementations of some methods.&lt;/p&gt;

&lt;p&gt;In this particular instance, a child class could override the &lt;code&gt;getRooms()&lt;/code&gt; and &lt;code&gt;hasGarden()&lt;/code&gt; methods as usual, but wouldn't be required to include them. To show this, we've overridden the &lt;code&gt;getRooms()&lt;/code&gt; method to show how we could change it's behaviour in the child class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-decide-which-to-use"&gt;
  &lt;/a&gt;
  How to Decide Which to Use
&lt;/h2&gt;

&lt;p&gt;It's really going to depend on what your goal is. To keep to our house analogy, if you're creating blueprints that can be used later to design different types of houses then you need an interface.&lt;/p&gt;

&lt;p&gt;If you've built a house and now you need to make copies with customization then you need an abstract class.&lt;/p&gt;

&lt;p&gt;Let me give you some examples:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-an-interface"&gt;
  &lt;/a&gt;
  When to Use an Interface
&lt;/h3&gt;

&lt;p&gt;To help us understand when to use an interface, let's look at an example. Let's say that we have a &lt;code&gt;ConstructionCompany&lt;/code&gt; class that includes a &lt;code&gt;buildHome()&lt;/code&gt; method that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstructionCompany&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;buildHome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$home&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="c1"&gt;// Build the home here...&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's say that we have 3 different classes that we want to be able to buld and pass to the &lt;code&gt;buildHome()&lt;/code&gt; method:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;class MyHouse implements HomeInterface extends House&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class MyCaravan implements HomeInterface&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class MyFlat implements HomeInterface&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As we can see, the &lt;code&gt;MyHouse&lt;/code&gt; class extends the &lt;code&gt;House&lt;/code&gt; abstract class; and this makes total sense from a conceptual point of view because the house is a house. However, it wouldn't make sense for the &lt;code&gt;MyCaravan&lt;/code&gt; or &lt;code&gt;MyFlat&lt;/code&gt; class to extend from the abstract class because neither of them are houses.&lt;/p&gt;

&lt;p&gt;So, because our construction company is able to build houses, caravans and flats, this rules out us type hinting the &lt;code&gt;$home&lt;/code&gt; parameter in the &lt;code&gt;buildHome()&lt;/code&gt; method to be an instance of &lt;code&gt;House&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, this would be a perfect place for us to type hint our method to only allow classes that implement the &lt;code&gt;HomeInterface&lt;/code&gt; to be passed. As an example, we could update the method to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConstructionCompany&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;buildHome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;HomeInterface&lt;/span&gt; &lt;span class="nv"&gt;$home&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="c1"&gt;// Build the home here...&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result of doing this, we can be sure that whether we pass a house, caravan or flat, that our &lt;code&gt;ConstructionCompany&lt;/code&gt; class will have the information it needs because the home object passed in will always contain the necessary methods that we need.&lt;/p&gt;

&lt;p&gt;You might have also thought to yourself "why don't we just create a &lt;code&gt;Home&lt;/code&gt; abstract class instead of an interface?". However, it's important to remember that PHP only supports single inheritance and that a class can't extend more than one parent class. So, this would make it pretty difficult if you ever wanted to extend one of your classes in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-an-abstract-class"&gt;
  &lt;/a&gt;
  When to Use an Abstract Class
&lt;/h3&gt;

&lt;p&gt;Let's take a scenario similar to our example above. Let's imagine that we have a &lt;code&gt;HouseConstructionCompany&lt;/code&gt; that's similar to our &lt;code&gt;ConstructionCompany&lt;/code&gt;. But, in this example, we'll assume that the &lt;code&gt;HouseConstructionCompany&lt;/code&gt; only build houses and nothing else.&lt;/p&gt;

&lt;p&gt;Because we know that we only need to be able to build houses, we could type hint our method to only accept classes that extend the &lt;code&gt;House&lt;/code&gt; abstract class. This can be really useful because we can always be sure that we're not passing any other types of homes to the method that the construction company doesn't build. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HouseConstructionCompany&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;buildHouse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;House&lt;/span&gt; &lt;span class="nv"&gt;$house&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="c1"&gt;// Build the house here...&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$house&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully, this post will have given you an insight into the differences between interfaces and abstract classes in PHP. It should have also given you a brief overview of the different scenarios when you should use either one of them.&lt;/p&gt;

&lt;p&gt;If this post helped you out, I'd love to hear about it. Likewise, if you have any feedback to improve this post, I'd also love to hear that too.&lt;/p&gt;

&lt;p&gt;If you're interested in getting updated each time I publish a new post, feel free to &lt;a href="https://ashallendesign.co.uk/blog"&gt;sign up for my newsletter here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For any of my Laravel developer readers who are looking for any further reading around interfaces, you can read about how you can use interfaces to &lt;a href="https://ashallendesign.co.uk/blog/using-the-bridge-pattern-in-laravel"&gt;use the strategy pattern in Laravel&lt;/a&gt; here.&lt;/p&gt;

&lt;p&gt;A massive thanks to &lt;a href="https://www.linkedin.com/in/james-mahy-84524615/" rel="noopener noreferrer"&gt;James Mahy&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/aditya-kadam-77a594134/" rel="noopener noreferrer"&gt;Aditya Kadam&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/andrew-palfrey/" rel="noopener noreferrer"&gt;Andrew Palfrey&lt;/a&gt; for proofreading this article and giving me feedback on it! I'd recommend checking out a cool social network that James is building: &lt;a href="https://sosa.net/" rel="noopener noreferrer"&gt;SoSa&lt;/a&gt;, a fun, friendly and privacy first community that makes it easy and fun to socialise online!&lt;/p&gt;

&lt;p&gt;Also a huge thanks to &lt;a href="https://www.linkedin.com/in/jessica-pickup-481030186/" rel="noopener noreferrer"&gt;Jess Pickup&lt;/a&gt; for creating another cool blog post image as usual!&lt;/p&gt;

&lt;p&gt;Keep on building awesome stuff! 🚀&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>The 4 Day Work Week</title>
      <author>Mikhail Karan</author>
      <pubDate>Thu, 29 Jul 2021 14:37:58 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/the-4-day-work-week-2bfo</link>
      <guid>https://dev.to/mikhailkaran/the-4-day-work-week-2bfo</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2AbXClgMdu9L9i4azC5vZh"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;In this episode Matt and Mike sit down with Derek Duncan to discuss his company's recent move to a 4 day work week. After the interview, the duo sit down to discuss the matter further, putting their own ideas and opinions together with Derek's first-hand insight. The 4 day work week has been a topic of much discussion lately, giving workers 3 days off to get a proper rest after a hard week's work. Some argue that it is not possible to get 5 days of productivity while others maintain that it is possible, as the extra day off makes the workers more productive all week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guest-introduction"&gt;
  &lt;/a&gt;
  Guest Introduction
&lt;/h2&gt;

&lt;p&gt;Derek Duncan joins us on the podcast today to give his insight on how the company that he co-founded, Instinct Science, transitioned to a 4-day workweek. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instinct.vet/instinctjobs"&gt;Apply for a Job at Instinct Science&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#derek-duncan"&gt;
  &lt;/a&gt;
  Derek Duncan
&lt;/h3&gt;

&lt;p&gt;3:44 - Why did your company decide to go to a 4-day work week?&lt;br&gt;
7:20 - How did your current employees react to the decision?&lt;br&gt;
9:58 - How do you cover periods of time when most people are gone?&lt;br&gt;
16:44 - Was there an adjustment period, if so, how long and how difficult?&lt;br&gt;
21:00 - How intense is a normal workday&lt;br&gt;
25:10 - Did productivity go up or down?&lt;br&gt;
27:55 - How has it affected hiring for you? (easier to hire a better developer?)&lt;br&gt;
30:25 - Will the excitement of 4 days wear off?&lt;br&gt;
34:50 - Did you keep salaries the same or were they reduced? (feel free to cross this one out if you don't feel comfortable answering)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#post-interview"&gt;
  &lt;/a&gt;
  Post interview
&lt;/h3&gt;

&lt;p&gt;43:50 - Matt's take on work schedules&lt;br&gt;
55:30 - Increased productivity &lt;br&gt;
58:20 - A more equal workplace&lt;br&gt;
1:02:00 - Better employee engagement&lt;br&gt;
1:05:00 - Matt's take on the 4 day workweek&lt;br&gt;
1:11:00 - Async work&lt;br&gt;
1:21:40 - Mike's take on the 4 day workweek &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Your leadership needs to make adjustments and be able to adapt for the 4 day work week to be successful.&lt;/li&gt;
&lt;li&gt;It's possible to cut down a day and increase productivity by allowing employees to recover will lead to more deep work hours. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.independent.co.uk/news/uk/politics/four-day-week-pilot-iceland-b1877171.html?utm_source=reddit.com"&gt;https://www.independent.co.uk/news/uk/politics/four-day-week-pilot-iceland-b1877171.html?utm_source=reddit.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://theundercoverrecruiter.com/4-day-work-week/"&gt;https://theundercoverrecruiter.com/4-day-work-week/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.changerecruitmentgroup.com/knowledge-centre/the-pros-and-cons-of-a-4-day-working-week"&gt;https://www.changerecruitmentgroup.com/knowledge-centre/the-pros-and-cons-of-a-4-day-working-week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.theatlantic.com/family/archive/2021/06/four-day-workweek/619222/"&gt;https://www.theatlantic.com/family/archive/2021/06/four-day-workweek/619222/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thestar.com/business/opinion/2021/07/10/get-ready-for-the-four-day-work-week-an-idea-whose-time-has-come.html"&gt;https://www.thestar.com/business/opinion/2021/07/10/get-ready-for-the-four-day-work-week-an-idea-whose-time-has-come.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buffer.com/resources/ama-4-day-workweek/amp/?__twitter_impression=true"&gt;https://buffer.com/resources/ama-4-day-workweek/amp/?__twitter_impression=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>productivity</category>
    </item>
    <item>
      <title>What are the basic fundamental concepts of programming?</title>
      <author>Daphnie Ozioma</author>
      <pubDate>Thu, 29 Jul 2021 14:31:02 +0000</pubDate>
      <link>https://dev.to/daphnieel/what-are-the-basic-fundamental-concepts-of-programming-30nb</link>
      <guid>https://dev.to/daphnieel/what-are-the-basic-fundamental-concepts-of-programming-30nb</guid>
      <description>&lt;p&gt;Irrespective of the programming language you choose to learn, the basic concepts of programming are similar across languages. Some of these concepts include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variable Declaration&lt;/li&gt;
&lt;li&gt;Basic Syntax&lt;/li&gt;
&lt;li&gt;Data Type and Structures&lt;/li&gt;
&lt;li&gt;Flow Control Structures (Conditionals and loops)&lt;/li&gt;
&lt;li&gt;Functional Programming&lt;/li&gt;
&lt;li&gt;Object-Oriented Programming&lt;/li&gt;
&lt;li&gt;Debugging&lt;/li&gt;
&lt;li&gt;IDEs and Coding Environments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next section of this shot, you will be given a brief introduction to these concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variable-declaration"&gt;
  &lt;/a&gt;
  Variable declaration
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt; are containers for storing data values, a memory location for a data type. Variables are created using a declaration or keyword that varies across languages. &lt;/p&gt;

&lt;p&gt;Variable names are usually alphanumeric, that is, they contain a-z and 0-9. They can also include special characters like underscore or the dollar sign.&lt;/p&gt;

&lt;p&gt;Variables can hold values of any data type supported by the programming language. This value may change during program execution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-syntax"&gt;
  &lt;/a&gt;
  Basic syntax
&lt;/h3&gt;

&lt;p&gt;Every programming language has its syntax, and you must learn the fundamental syntax of the language you are learning.&lt;/p&gt;

&lt;p&gt;Syntax refers to the set of rules that define the structure of a language. It is almost impossible to read or understand a programming language without its syntax.&lt;/p&gt;

&lt;p&gt;For example, let us declare a variable named &lt;em&gt;greet&lt;/em&gt; and assign the value "Hello World" to it:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#in-c"&gt;
  &lt;/a&gt;
  In C++
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;
 &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#in-javascript"&gt;
  &lt;/a&gt;
  In JavaScript
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#in-java"&gt;
  &lt;/a&gt;
  In Java
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#in-python"&gt;
  &lt;/a&gt;
  In Python
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#data-types-and-structures"&gt;
  &lt;/a&gt;
  Data types and structures.
&lt;/h3&gt;

&lt;p&gt;Data types refer to the classification of data. The most common data types include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean (true or false)&lt;/li&gt;
&lt;li&gt;Numbers, which includes integers (whole numbers from 1) and floating-point numbers (decimal-base)&lt;/li&gt;
&lt;li&gt;Characters (includes single alphabets or numbers)&lt;/li&gt;
&lt;li&gt;Arrays (a collection of data, usually of the same data type)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;strong&gt;Data Structure&lt;/strong&gt; is a collection of data values. These structures include operations that can be applied to that data.&lt;br&gt;
Data structures are important in computer programming for organizing, managing, and storing data quickly and efficiently.&lt;/p&gt;

&lt;p&gt;Some common types of data structures include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stacks&lt;/li&gt;
&lt;li&gt;Heaps&lt;/li&gt;
&lt;li&gt;Trees&lt;/li&gt;
&lt;li&gt;Linked lists&lt;/li&gt;
&lt;li&gt;Queues&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Tables&lt;/li&gt;
&lt;li&gt;Graphs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#flow-control-structures"&gt;
  &lt;/a&gt;
  Flow control structures
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Flow Control Structures&lt;/strong&gt; are the fundamental components of computer programs. They are commands that allow a program to "decide" to take one direction or another.&lt;/p&gt;

&lt;p&gt;There are three basic types of control structures: sequential, selection, and iteration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sequential"&gt;
  &lt;/a&gt;
  Sequential
&lt;/h3&gt;

&lt;p&gt;The most basic control flow is &lt;strong&gt;sequential control flow&lt;/strong&gt;. It involves the execution of code statements one after the other. A real-world example is following a cooking recipe.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1spoSmgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8w1myfqf5ryhocjs2xh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1spoSmgQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8w1myfqf5ryhocjs2xh.png" alt="Sequential-control-flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#selection-conditionals"&gt;
  &lt;/a&gt;
  Selection (conditionals)
&lt;/h3&gt;

&lt;p&gt;The basic premise of &lt;strong&gt;selection flow control&lt;/strong&gt; is, the computer decides what action to perform based on the result of a test or condition equalling true or false.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rM0UCKN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyhkivs79o2oszugdji4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rM0UCKN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyhkivs79o2oszugdji4.png" alt="if-else statements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iteration-loops"&gt;
  &lt;/a&gt;
  Iteration (Loops).
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;loop&lt;/strong&gt; is a programming structure that allows a statement or block of code to be #key# run repeatedly: iterate #key# until a specified condition is no longer true (will return Boolean, true or false). It is one of the most powerful and fundamental programming concepts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BvxKHurs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5ifei7rc0x4ijdt9mkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BvxKHurs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5ifei7rc0x4ijdt9mkd.png" alt="loop-control-flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional programming
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Functions&lt;/strong&gt; are containers that take in a set of inputs and return an output. It is not required for a function to return a value. Pure functions will always give the same result for the same set of inputs.&lt;/p&gt;

&lt;p&gt;Functional Programming is a straightforward method of building software that involves using pure functions. This method eliminates the occurrence of data mutation or side effects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#objectoriented-programming"&gt;
  &lt;/a&gt;
  Object-oriented programming
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Object-Oriented Programming (OOP)&lt;/strong&gt;is a programming concept that revolves around 'objects' and 'methods'.&lt;/p&gt;

&lt;p&gt;There are four principles of OOP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;li&gt;Abstraction &lt;/li&gt;
&lt;li&gt;Encapsulation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Debugging&lt;/strong&gt; is a crucial skill. It involves detecting and removing existing and potential errors, defects, or 'loopholes' in one's code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ides-and-coding-environments"&gt;
  &lt;/a&gt;
  IDEs and Coding Environments
&lt;/h3&gt;

&lt;p&gt;IDE stands for &lt;strong&gt;Integrated Development Environment&lt;/strong&gt; -- they are applications programmers use to write code and organize text groups. It increases a programmer's efficiency and productivity, and has added features like code completion, code compilation, debugging, syntax highlighting, etc. &lt;/p&gt;

&lt;p&gt;Some common examples of IDE's are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual Studio code&lt;/li&gt;
&lt;li&gt;IntelliJ IDEA&lt;/li&gt;
&lt;li&gt;NetBeans&lt;/li&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💡 Always remember to write clean and readable code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover Photo by &lt;a href="https://unsplash.com/@pankajpatel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Pankaj Patel&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
