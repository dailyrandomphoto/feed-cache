<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ASMR JavaScript Home Budget App Coding</title>
      <author>Bek Brace</author>
      <pubDate>Tue, 07 Dec 2021 19:59:44 +0000</pubDate>
      <link>https://dev.to/bekbrace/asmr-javascript-home-budget-app-coding-5ebk</link>
      <guid>https://dev.to/bekbrace/asmr-javascript-home-budget-app-coding-5ebk</guid>
      <description>&lt;p&gt;This is a No Talk coding video session in my flat in Lodz, Poland on a rainy night with my hot cup of black coffee.&lt;/p&gt;

&lt;p&gt;ASMR coding a JavaScript Home Budget application, AKA "Expense Tracker" which is suitable for anyone that wants to keep track of their daily finances.&lt;/p&gt;

&lt;p&gt;No talk, just typing quietly on my mechanical keyboard "Genesis Thor 300 TKL".&lt;/p&gt;

&lt;p&gt;There's the video, so you can prepare your hot beverage and code along with me :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aw78jgX0nU4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hope you enjoy, guys&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  Social Media  
&lt;/h2&gt;

&lt;p&gt;Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B/"&gt;https://www.facebook.com/bekbrace​​​​/&lt;/a&gt; &lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace/"&gt;https://twitter.com/BekBrace/&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace/%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://github.com/BekBrace/​​​&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com/"&gt;https://bekbrace.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reach out  : &lt;a href="mailto:info@bekbrace.com"&gt;info@bekbrace.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-used-in-video"&gt;
  &lt;/a&gt;
  Tools used in video:
&lt;/h2&gt;

&lt;p&gt;Microphone used in recording Blue Yeti&lt;br&gt;
Coding on Genesis Thor 300 TKL keyboard&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Join the Channel &lt;br&gt;
OR&lt;br&gt;
☕ Buy Me A Coffee : &lt;a href="https://www.buymeacoffee.com/bekbrace"&gt;https://www.buymeacoffee.com/bekbrace&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>No Toxic Discussions</title>
      <author>Thomas Bnt</author>
      <pubDate>Tue, 07 Dec 2021 19:23:43 +0000</pubDate>
      <link>https://dev.to/thomasbnt/no-toxic-discussions-38h3</link>
      <guid>https://dev.to/thomasbnt/no-toxic-discussions-38h3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;😶 &lt;strong&gt;Disclaimer : Read that before use it&lt;/strong&gt;&lt;br&gt;
For this moment, this GitHub Actions &lt;strong&gt;don't work properly like I would like&lt;/strong&gt;. &lt;strong&gt;When GitHub add the possibility to add and/or edit comments in Discussions&lt;/strong&gt;, &lt;strong&gt;I will update the project&lt;/strong&gt;.&lt;br&gt;
I started this Action because I thinked that it is a good idea to have a moderate tool in Discussions part with the toxicity of comments So I did it thinking it would be feasible, but when I got to the end of the code part, I couldn't figure out how to create/edit comments.&lt;/p&gt;

&lt;p&gt;😵 &lt;strong&gt;But why do I still participate in the Hackathon, knowing that my action is not entirely finished?&lt;/strong&gt; &lt;br&gt;
The idea of using the Perspective API came to me quite late. In 4-5 days I had to learn how to create my own GA (GitHub Actions) and how to execute JavaScript. How to use correctly the TOKEN of GitHub. I still have some small issues to fix on the source code, but I'm working on it, and like any project, there will be updates.&lt;/p&gt;

&lt;p&gt;So when I was almost at the end, I looked at the GitHub documentation to find out how to create a comment in the Discussions with Action section. Unfortunately, it's not possible, and I'm disgusted. Nevertheless, I leave the source code visible for everybody, because when GitHub will have added this option, the code will be updated and possible to use in your repositories. &lt;br&gt;
If you want to know more about how it works, I redirect you to &lt;a href="https://github.com/thomasbnt/actions-NoToxicDiscussions#how-its-work"&gt;How it's work&lt;/a&gt; part.&lt;/p&gt;

&lt;p&gt;For the moment &lt;strong&gt;it scans&lt;/strong&gt; well and &lt;strong&gt;emits a percentage based on 1&lt;/strong&gt; &lt;strong&gt;the TOXICITY of the content&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;No Toxic Discussions&lt;/strong&gt; &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thomasbnt"&gt;
        thomasbnt
      &lt;/a&gt; / &lt;a href="https://github.com/thomasbnt/actions-NoToxicDiscussions"&gt;
        actions-NoToxicDiscussions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A GitHub action that detects toxic messages in Discussions.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#submission-category-maintainer-musthaves"&gt;
  &lt;/a&gt;
  Submission Category: Maintainer Must-Haves
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;

&lt;p&gt;You can see this example of workflow at &lt;strong&gt;&lt;a href="https://github.com/thomasbnt/actions-NoToxicDiscussions/blob/main/.github/workflows/NoToxicDiscussionsHere.yml"&gt;.github/workflows/NoToxicDiscussions.yml&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;No Toxic Discussions Here&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;discussion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# created type can be marked as an error BUT IT'S WORK. See the docs :&lt;/span&gt;
    &lt;span class="c1"&gt;# https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#discussion&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;created&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;opened&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;edited&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;answered&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;discussion_comment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;created&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;edited&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;CheckIfToxicContent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout Repository&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;PERSPECTIVE_API_KEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PERSPECTIVE_API_KEY }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;yarn install&lt;/span&gt;
          &lt;span class="s"&gt;yarn add @actions/core @actions/github&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run the script&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;yarn run start&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;This Action use &lt;strong&gt;&lt;a href="https://perspectiveapi.com/"&gt;Perspective API&lt;/a&gt;&lt;/strong&gt; from Jigsaw Google.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Perspective is a free API that helps you host better conversations online. The API uses machine learning models to score the perceived impact a comment might have on a conversation. You can use this score to give feedback to commenters, help moderators more easily review comments, allow readers to more easily find interesting or productive comments, and more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3-a4Njk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcfuwxq8j6uuxqxbb3sw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3-a4Njk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcfuwxq8j6uuxqxbb3sw.gif" alt="Perspective API" width="880" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>perspectiveapi</category>
      <category>googleapis</category>
    </item>
    <item>
      <title>Software Engineering 💻What I've learned in one year!</title>
      <author>Gabriel Pedroza</author>
      <pubDate>Tue, 07 Dec 2021 19:23:02 +0000</pubDate>
      <link>https://dev.to/gabrielpedroza/software-engineering-what-ive-learned-in-one-year-2aif</link>
      <guid>https://dev.to/gabrielpedroza/software-engineering-what-ive-learned-in-one-year-2aif</guid>
      <description>&lt;p&gt;I decided to give this (making my first blog) a try when I realized how close I was to reaching my first year of being a Frontend Engineer. This will also improve my Markdown skills which will also improve my README.md in my repositories. If you see any errors, please let me know because I always want to reach perfection... and because of my slight OCD in anything related to software😅&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#tldr"&gt;TLDR/Specifics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#intro"&gt;My background&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#decided"&gt;When I decided to become a Front End Developer&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#oneyear"&gt;What I have learned from one year of coding&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#advice"&gt;Any advice or things I would've done differently&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#future"&gt;What I plan to do accomplish in the future&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tldrspecifics"&gt;
  &lt;/a&gt;
  &lt;a&gt;TLDR/Specifics&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Over the course of becoming a Frontend Engineer, I wrote down my progress:&lt;/p&gt;

&lt;p&gt;7th grade (2014) - Used blocks of written code from made scratch.mit.edu to create basic games and animations. &lt;/p&gt;

&lt;p&gt;11th grade (2018) - Wrote my first HTML code in Advanced Placement Computer Science and had no interest or remembered anything whatsoever.&lt;/p&gt;

&lt;p&gt;December 18th 2020 - Switched my major from Accounting to Computer Science because I wanted to be involved with technology and saw incredible and interactive websites.&lt;/p&gt;

&lt;p&gt;Late December 2020 - Wrote my first line of code (Python). I chose Backend first because after researching, I’ve read that you get more income and it’s more logic-based. (Chose for the wrong reasons).&lt;/p&gt;

&lt;p&gt;Mid-way January 2021 - Realized after some on and off time of Backend, it wasn’t suited for me at the time and only chose it for the money so I decided to try front end and almost instantly feel in love (Inspired by &lt;a href="https://bruno-simon.com/"&gt;Bruno Simon’s Portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;February 2021 - Watched an 11 and half hour video (willingly😅) on the &lt;a href="https://www.youtube.com/watch?v=mU6anWqZJcc&amp;amp;t=6365s"&gt;basics of HTML and CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;March 4th 2021 - Bought my first &lt;a href="https://scrimba.com/learn/frontend"&gt;Frontend course&lt;/a&gt; (Html5, Css3, Js(es5+), and React (class and functional components)) on &lt;a href="//www.scrimba.com"&gt;Scrimba&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Midway March 2021 - Wrote my first line of JavaScript code.&lt;/p&gt;

&lt;p&gt;End of April 2021 - Registered in another course &lt;a href="https://scrimba.com/learn/javascript"&gt;The JavaScript Bootcamp&lt;/a&gt; to enhance my JavaScript.&lt;/p&gt;

&lt;p&gt;May 27th 2021 - Made a &lt;a href="https://www.linkedin.com/in/gabrielpedroza/"&gt;LinkedIn account&lt;/a&gt; to network and meet new people that have similar interests as me. &lt;/p&gt;

&lt;p&gt;June 13th 2021 - Finished JavaScript bootcamp.&lt;/p&gt;

&lt;p&gt;July 12th 2021 - Bought a &lt;a href="https://threejs-journey.com/"&gt;Three.js course&lt;/a&gt; with GLSL and Blender included by Bruno Simon.&lt;/p&gt;

&lt;p&gt;July 15th 2021 - Wrote my first line of React code.&lt;/p&gt;

&lt;p&gt;Mid September - Learned about Git (commands) and currently using it to push code, pull code, and make open source contributions from and to local repositories on my Github account after learning how to use GitHub.&lt;/p&gt;

&lt;p&gt;September 25th 2021 - Wrote my first line of custom shaders in GLSL (Shading Language).&lt;/p&gt;

&lt;p&gt;October 23 2021 - Finished Three.js course while balancing Scrimba’s courses and school.&lt;/p&gt;

&lt;p&gt;October 24 2021 - Using &lt;a href="https://docs.pmnd.rs/home"&gt;React Three Fiber and its helpers&lt;/a&gt; to start creating 3D projects.&lt;/p&gt;

&lt;p&gt;October 28 2021 - Bought &lt;a href="https://www.algoexpert.io/product"&gt;AlgoExpert&lt;/a&gt; to learn DSA and also deepen my knowledge using JavaScript while preparing for coding interviews.&lt;/p&gt;

&lt;p&gt;October 30 2021 - Learned how to calculate time and space complexity using Big O notation.&lt;/p&gt;

&lt;p&gt;November 1 2021 - Used SCSS modules for the first time.&lt;/p&gt;

&lt;p&gt;November 21 2021 - Used &lt;a href="https://mui.com/"&gt;Material UI&lt;/a&gt; for the first time.&lt;/p&gt;

&lt;p&gt;December 7 2021 - Learned Yarn. Will use in future projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-background"&gt;
  &lt;/a&gt;
  &lt;a&gt;My Background&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Long story short, I was majoring in Accounting as a freshman in college and I was not enjoying it at all. I later found out about Computer Science (specifically Full-Stack (Frontend and Backend)) and it caught my attention. I decided to switch when my semester finished at December 18, 2019. I have minimal exposure to coding. Checkout the beginning of &lt;a href="#tldr"&gt;TLDR/Specifics&lt;/a&gt; to understand specifically what I knew.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-i-decided-to-become-a-front-end-developer"&gt;
  &lt;/a&gt;
  &lt;a&gt;When I Decided to Become a Front End Developer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Mid-way through January, I decided to switch from Backend to Frontend. I was inspired by &lt;a href="https://bruno-simon.com/"&gt;Bruno Simon's portfolio&lt;/a&gt; and all the other projects on the official page of &lt;a href="https://threejs.org/"&gt;Three.js&lt;/a&gt;. It changed my perspective on websites completely and with a combination of being inspired and experiencing a shit-ton of "bad" websites over the years, I decided to become a Frontend Engineer without looking at its salary, the hard work it would take to feel "ready", and everything else that comes with being a developer that I've probably haven't experienced yet. It was a turning point in my life and I didn't even know how much it would consume me. I can definitely say after a year of programming, I am so happy I chose it because of the right reasons. I got lucky that it pays well and it is a great career path.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-advice-to-future-programmers"&gt;
  &lt;/a&gt;
  &lt;a&gt;My Advice to Future Programmers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JUST START ALREADY! When I started programming, I never saw it as boring or as a job in any way; Frontend for me was just so exciting because of what you can create and be able to give that experience to others that come across your website/projects. Personally, for the first 6-8 months, I learned about code or watch anything that was code-related for a good 8-10 hours every single day (you do NOT need to do this🤦🏻‍♂️). This definitely caused a huge burnout for me. My social life and health were struggling immensely and I wasn't retaining any of the information anymore. I decided to take a break and slowly and focus on my social and health more. It was the best decision for me in every way possible and I would recommend anyone who starts to become a programmer to understand that there is a lot of information to learn and your comfort zone will be eviscerated. You will feel that overwhelming sensation of not being good enough but after that stage of feeling "useless", your mental strength will be calloced from the adversity and your success it will overshadow that stage. I promise😊&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-future-goals-as-a-frontend-engineer"&gt;
  &lt;/a&gt;
  &lt;a&gt;My Future Goals as a Frontend Engineer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;There are so many goals that I want to accomplish as a Frontend Engineer. The main one is to land a job and become a paid full-time engineer. Currently, I am making projects to include on my curriculum vitae, learning DSA, and filling any holes I have currently since I am a self-taught engineer.&lt;/p&gt;

&lt;p&gt;“Believe you can and you’re halfway there.” —Theodore Roosevelt&lt;/p&gt;

&lt;p&gt;“It is our attitude at the beginning of a difficult task which, more than anything else, will affect its successful outcome.” —William James&lt;/p&gt;

&lt;p&gt;“I think I can. I think I can. I think I can. I know I can.” —Watty Piper, The Little Engine That Could&lt;/p&gt;

&lt;p&gt;“Life isn’t finding shelter in the storm. It’s about learning to dance in the rain.” ―Sherrilyn Kenyon&lt;/p&gt;

&lt;p&gt;“Whether you think you can or think you can’t you’re right.” —Henry Ford&lt;/p&gt;

&lt;p&gt;I wish everyone the best of luck on your journey! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🎄 CodeCast's Coding Advent: Day Seven 🎄</title>
      <author>CodeCast</author>
      <pubDate>Tue, 07 Dec 2021 19:15:22 +0000</pubDate>
      <link>https://dev.to/codecast/codecasts-coding-advent-day-seven-5hje</link>
      <guid>https://dev.to/codecast/codecasts-coding-advent-day-seven-5hje</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KeUdIeag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4de5ll5dwd5qk2w354g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KeUdIeag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4de5ll5dwd5qk2w354g.png" alt="Day Seven Image" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#day-seven"&gt;
  &lt;/a&gt;
  DAY SEVEN
&lt;/h2&gt;

&lt;p&gt;Today we're bringing you yet another coding advent calendar, this time featuring &lt;a href="//scrimba.com"&gt;Scrimba's&lt;/a&gt; #JavaScriptmas! &lt;a href="https://scrimba.com/learn/javascriptmas2021/"&gt;24 Days of learning JavaScript&lt;/a&gt; wrapped in the blanket of festiveness, all for free! &lt;/p&gt;

&lt;p&gt;You can also be sure to follow us on &lt;a href="https://www.instagram.com/codecastapp/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://twitter.com/CodeCastApp"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/codecastapp"&gt;Facebook&lt;/a&gt;, and &lt;a href="https://www.linkedin.com/company/code-cast/"&gt;LinkedIn&lt;/a&gt; to see our daily advent releases there!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>SecYourIT</title>
      <author>Shubham Palriwala</author>
      <pubDate>Tue, 07 Dec 2021 19:10:34 +0000</pubDate>
      <link>https://dev.to/shubhampalriwala/secyourit-3pd7</link>
      <guid>https://dev.to/shubhampalriwala/secyourit-3pd7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#inspiration"&gt;
  &lt;/a&gt;
  Inspiration
&lt;/h3&gt;

&lt;p&gt;Being an LFX Mentee at Kyverno this quarter, I was looking after and enchancing their Security Processes and their CI mechanisms. That is when I was exposed to the world of DevSecOps. I remember copying down the same actions multiple times. Fast forward to a month and here I am in this Github Action x DEV Hackathon 2021 where I am solving this problem so that nobody faces this again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;I introduce y'all to SecYourIT (read: sec-your-it-e), a 5-in-one DevSecOps reusable GitHub workflow that takes care of your project's security in the CI itself thanks to Github Actions. You can customise it based on the language of your project as it supports more than 20 languages.&lt;br&gt;
It handles the following components of your project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sensitive Token Exposure [Check for Tokens or Keys being pushed]&lt;/li&gt;
&lt;li&gt;Commit Authenticity Verification [Verify Commits]&lt;/li&gt;
&lt;li&gt;Dependency Scanning [Scan for vulnerabilities in Dependencies]&lt;/li&gt;
&lt;li&gt;SCA [Software Composition Analysis],&lt;/li&gt;
&lt;li&gt;SAST [Static Application Security Testing]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ShubhamPalriwala"&gt;
        ShubhamPalriwala
      &lt;/a&gt; / &lt;a href="https://github.com/ShubhamPalriwala/secyourit"&gt;
        secyourit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Time to get your project some action, security action
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ShubhamPalriwala/secyourit./banner.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jnbtKCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ShubhamPalriwala/secyourit./banner.png" alt="SecYourIT"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SecYourIT&lt;/strong&gt;:  &lt;em&gt;Secure your IT services seamlessly with this workflow&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Run SecYourIt in any of your application. Let it be a CLI, a Web-App, an App, any software, SecYourIT is there for you.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;You can trigger this workflow as simple as&lt;/p&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-ent"&gt;jobs&lt;/span&gt;:
    &lt;span class="pl-ent"&gt;secyourit&lt;/span&gt;:
        &lt;span class="pl-ent"&gt;uses&lt;/span&gt;: &lt;span class="pl-s"&gt;shubhampalriwala/secyourit/.github/workflows/secryourit.yaml@master&lt;/span&gt;
        &lt;span class="pl-ent"&gt;with&lt;/span&gt;:
            &lt;span class="pl-ent"&gt;signerID&lt;/span&gt;: 
            &lt;span class="pl-ent"&gt;org&lt;/span&gt;: 
            &lt;span class="pl-ent"&gt;path&lt;/span&gt;:
            &lt;span class="pl-ent"&gt;language&lt;/span&gt;:
        &lt;span class="pl-ent"&gt;secrets&lt;/span&gt;:
            &lt;span class="pl-ent"&gt;SNYK_API_TOKEN&lt;/span&gt;: &lt;span class="pl-s"&gt;${{secrets.SNYK_API_TOKEN}}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Parameters:&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Use&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SignerID&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;Notary Commit Verification&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;List of SignerID(s) (separated by space) to authenticate against. A SignerID is the signer's public address (represented as a 40 hex characters long string prefixed with 0x)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Org&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;Notary Commit Verification&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Organization's ID to authenticate against. Note that org takes precedence over signerID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;Notary Commit Verification&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;Path to git working directory. Default to the current SecYourIT repo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Language&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;SCA and SAST&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;The language is required to run&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ShubhamPalriwala/secyourit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;br&gt;
DIY Deployments&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secyourit&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;signerID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;org&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;SNYK_API_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;hola-secyourit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Welcome&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SecyourIT"&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Project Init&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "SecyourIT says Hi!"&lt;/span&gt;

  &lt;span class="na"&gt;find-secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Scan&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Secrets'&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Find Secrets&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;max/secret-scan@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;exclude_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;.github/workflows/configuration/exclude_paths.txt'&lt;/span&gt;

  &lt;span class="na"&gt;verify-commits-using-notary&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Verify Commits using Notary&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vchain-us/verify-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;signerID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.signerID}}&lt;/span&gt;
          &lt;span class="na"&gt;org&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.org}}&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.path}}&lt;/span&gt;

  &lt;span class="na"&gt;scan-image-using-trivy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Trivy Scan Image&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Scan File system suing Trivy&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aquasecurity/trivy-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;scan-type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;fs'&lt;/span&gt;
          &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;table'&lt;/span&gt;
          &lt;span class="na"&gt;exit-code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
          &lt;span class="na"&gt;ignore-unfixed&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;vuln-type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;os,library'&lt;/span&gt;
          &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;CRITICAL,HIGH,MEDIUM'&lt;/span&gt;

  &lt;span class="na"&gt;sca-using-snyk&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Software Compositon Analysis using Snyk&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Snyk to check for vulnerabilities&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;snyk/actions/${{inputs.language}}@master&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;SNYK_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SNYK_API_TOKEN }}&lt;/span&gt;

  &lt;span class="na"&gt;sast-using-appthreat&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SAST using AppThreat&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run SAST Scan by AppThreat&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AppThreat/sast-scan-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{inputs.language}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ShubhamPalriwala/secyourit"&gt;Github URL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/file/GtVvanvVW1bPjJqiffqOvw/SecYourIT?node-id=0%3A1"&gt;Figma Project Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open Source Projects that are being used in my workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/marketplace/actions/secret-scan"&gt;Max/Secret-Scan&lt;/a&gt; to scan for tokens and sensitive date&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vchain-us/verify-action"&gt;VChain-US/Verify-Action&lt;/a&gt; to verify the authenticity of the commits&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aquasecurity/trivy-action"&gt;AquaSecurity/Trivy-Action&lt;/a&gt; to scan the file system and the dependencies for vulnerabilities&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/snyk/actions"&gt;Snyk/Actions&lt;/a&gt; to perform Software Composition Analysis&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AppThreat/sast-scan"&gt;AppThreat/sast-scan-action&lt;/a&gt; to perform Static Application Security Testing&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>devops</category>
      <category>actionshackathon</category>
      <category>opensource</category>
    </item>
    <item>
      <title>LeetCode WalkThru: 'Sqrt(x)' and 'Valid Perfect Square'</title>
      <author>Adriana DiPietro</author>
      <pubDate>Tue, 07 Dec 2021 19:02:36 +0000</pubDate>
      <link>https://dev.to/am20dipi/leetcode-walkthru-sqrtx-and-valid-perfect-square-3ep8</link>
      <guid>https://dev.to/am20dipi/leetcode-walkthru-sqrtx-and-valid-perfect-square-3ep8</guid>
      <description>&lt;p&gt;☁️☁️☁️&lt;br&gt;
Hi programmers + coders alike ! &lt;/p&gt;

&lt;p&gt;Today, we will be walking through two (2) LeetCode challenges: &lt;strong&gt;Sqrt(x)&lt;/strong&gt; and &lt;strong&gt;Valid Perfect Square&lt;/strong&gt;. I decided to pair these challenges together in a walkthrough because they relate to each other AND show the various ways to approach a solution. &lt;/p&gt;

&lt;p&gt;Here are the links to the challenges: &lt;a href="https://leetcode.com/problems/sqrtx/"&gt;Sqrt(x)&lt;/a&gt; and &lt;a href="https://leetcode.com/problems/valid-perfect-square/"&gt;Valid Perfect Square&lt;/a&gt;. Go ahead and pull the first challenge up on your end + let's get started :)&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#sqrtx"&gt;
  &lt;/a&gt;
  Sqrt(x)
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#instructions-examples"&gt;
  &lt;/a&gt;
  Instructions + Examples
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the instructions provided by LeetCode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Given a non-negative integer 'x', compute and return the square root of 'x'.

Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.

Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the instructions, we can resolve a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input is a positive integer. &lt;/li&gt;
&lt;li&gt;Output is a positive integer; decimal points must be truncated (taken off). &lt;/li&gt;
&lt;li&gt;We cannot use any exponent operator.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The instructions are pretty straight-forward. However, the truncated decimal might be something new for you. (It was for me!) Growing up, in math class we always &lt;em&gt;rounded&lt;/em&gt; decimals to the nearest whole number. For this assignment, we are going to &lt;em&gt;truncate&lt;/em&gt; the decimal.&lt;/p&gt;

&lt;p&gt;If we look to the example LeetCode provides, we can see exactly what this looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Example 2
  Input: x = 8
  Output: 2
  Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The square root of 8 is not rounded to the nearest whole number; instead, the decimals are just chopped off. To me, this is strange, but hey, I do not make the instructions here. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#approach-solution"&gt;
  &lt;/a&gt;
  Approach + Solution
&lt;/h2&gt;

&lt;p&gt;Since this is a math-based question, we can consider a wide slew of built in Math methods provided in JavaScript. These built-in Math methods are both life and time savers. Here is a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math"&gt;link&lt;/a&gt; to a good chunk of Math methods. &lt;strong&gt;Bookmark or save this link!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we return to our goals of this challenge, we need to achieve two (2) things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Return the square root any positive integer.&lt;/li&gt;
&lt;li&gt;Return the output as a positive integer (no floats!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To achieve the first goal, JavaScript provides 'Math.sqrt(x)'. According to the link above, this method 'returns the positive square root of the given input'. Wow! Exactly what we need. &lt;/p&gt;

&lt;p&gt;So, let's build this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Starting by building the foundation of a  function that takes in a parameter of 'x'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mySqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="c1"&gt;// Then, declare and assign a variable to the result of Math.sqrt(x) method. &lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;squareRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;squareRoot&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, if we were to pass in an integer of '100', we would receive an output of '10'. Nice! That works! However, if we were to pass in an integer of '200', we would receive an output of '14.142135....' Well, yea that is correct, but remember the instructions: we need to return a truncated decimal. So, we need to return solely '14'. &lt;/p&gt;

&lt;p&gt;If we continue to look at that trusty goldmine of built-in Math methods, we may come across 'Math.trunc(x)'. This method 'returns the integer portion of the given input, removing any fractional digits.' Actually perfect! Let's add this functionality to our code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Starting by building the foundation of a  function that takes in a parameter of 'x'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mySqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="c1"&gt;// Then, declare and assign a variable to the result of Math.sqrt(x) method. &lt;/span&gt;
  &lt;span class="c1"&gt;// Then, we wrap Math.trunc() around Math.sqrt(x).&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;squareRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;squareRoot&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try this out in your console with an input of x = 250. &lt;/p&gt;

&lt;p&gt;Did you receive an output of '15'? If you did, good! Our code works.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#valid-perfect-square"&gt;
  &lt;/a&gt;
  Valid Perfect Square
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#instructions-examples"&gt;
  &lt;/a&gt;
  Instructions + Examples
&lt;/h2&gt;

&lt;p&gt;Onto our next challenge, let's look at the instructions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Given a positive integer 'num', write a function which returns 'True' if 'num' is a perfect square. Otherwise returns 'False'.

*Follow up: Do not use any built-in library function such as sqrt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From these instructions, we can resolve a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input is a positive integer. &lt;/li&gt;
&lt;li&gt;Output is a boolean: true or false.&lt;/li&gt;
&lt;li&gt;We CANNOT use any built-in JavaScript methods, like we did in the previous challenge. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's look at the examples provided:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example 1:

Input: num = 16
Output: true


Example 2:

Input: num = 14
Output: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright -- simple enough. However, the instructions &lt;em&gt;specifically&lt;/em&gt; stated to NOT use any built-in Math methods. This is our time to shine and revert back to seventh grade algebra! Let's get it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-solution"&gt;
  &lt;/a&gt;
  Approach + Solution
&lt;/h2&gt;

&lt;p&gt;What is a &lt;em&gt;perfect&lt;/em&gt; square? It is an integer, when taken the square root of, returns a positive integer. We know a few: 4, 9, 16, 25, 100...&lt;/p&gt;

&lt;p&gt;But how do we formulate a test (ahem, our code) to figure this out? We can start by creating a formula that outputs the square root of any given positive integer. &lt;/p&gt;

&lt;p&gt;What is the math formula equivalent of the square root operator? It's the exponent of one-half. Try it out on a calculator. &lt;/p&gt;

&lt;p&gt;Using the exponent operator (**), here is what we can code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isPerfectSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;squareRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;squareRoot&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we pass the number 100 into the function, we should be returned the integer 10. Ok - but what if we pass in 12? We receive 3.464101.... Yes - that is the square root of 12, but remember we want to receive an output of either true or false based on num's validity as a perfect square. &lt;/p&gt;

&lt;p&gt;If we compare our two outputs: 10 and 3.464101, one is an integer and the other is a float (or decimal). &lt;/p&gt;

&lt;p&gt;We can use the remainder operator (%). If our squareRoot produces a remainder when divided by 1, then we know it is NOT a perfect square. &lt;/p&gt;

&lt;p&gt;Let's code this out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isPerfectSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;squareRoot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;squareRoot&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using our ol' faithful "if" statement, we can decipher that if our squareRoot variable does NOT produce a remainder, 'num' must be a perfect square. While if it does produce a remainder, 'num' is NOT a perfect square. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary-recap"&gt;
  &lt;/a&gt;
  Summary + Recap
&lt;/h2&gt;

&lt;p&gt;Within these two (2) examples, we can see the multiple approaches to solve a Math-related JavaScript question. Given specific instructions that inhibit our use of either built-in Math methods or arithmetic operators, we can resolve to do the opposite. &lt;/p&gt;

&lt;p&gt;Go ahead and try to solve each question again, except switch the rules this time. A solution is always available -- we may just have to dig a little first. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMEMBER&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep your code readable.&lt;/li&gt;
&lt;li&gt;Code in a way that makes sense to you. &lt;/li&gt;
&lt;li&gt;Approach code a few different ways to come to a solution. &lt;/li&gt;
&lt;li&gt;Ask questions. &lt;/li&gt;
&lt;li&gt;Keep coding!&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;☁️☁️☁️&lt;br&gt;
Thank you for reading + coding along with me. &lt;br&gt;
Please feel free to leave questions, suggestions or comments below. &lt;/p&gt;

&lt;p&gt;Please be kind to everyone as we are all trying to learn.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>algorithms</category>
      <category>datastructures</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Project 7: Array Cardio Day 2</title>
      <author>prachigarg19</author>
      <pubDate>Tue, 07 Dec 2021 18:44:40 +0000</pubDate>
      <link>https://dev.to/prachigarg19/project-7-array-cardio-day-2-25ln</link>
      <guid>https://dev.to/prachigarg19/project-7-array-cardio-day-2-25ln</guid>
      <description>&lt;p&gt;Welcome to my "Build 30 Js Projects in 30 Days" Series .This is day 7 and project 7. If you haven't read the other articles in this series please check them out first. I'll list them at the end of this article.&lt;/p&gt;

&lt;p&gt;As mentioned in my previous article. This is the Day 7 challenge of &lt;a href="https://javascript30.com/"&gt;Wes Bos Javascript30 course&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This challenge was more theoretical rather than implementation. It explained various array prototype methods that I found super helpful and so I'll be explaining each method taught in this challenge and I strongly recommend you to not skip this challenge.&lt;br&gt;
&lt;a href="https://dev.to/prachigarg19/project-4-array-cardio-day-1-3b1k"&gt;Checkout&lt;/a&gt; the first part if you haven't yet.&lt;/p&gt;

&lt;p&gt;As always before starting download the starter files from &lt;a href="https://github.com/wesbos/JavaScript30"&gt;here&lt;/a&gt;. I've made a separate article on how to download starter files, you can check it out &lt;a href="https://dev.to/prachigarg19/build-30-javascript-projects-in-30-daysday-0-2m8j"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'll be linking the documentations I referred for each function to further clear up the topic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before proceeding you should be familiar with arrow functions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.some():&lt;/strong&gt; It returns true if at least one element of our array satisfies the test condition of the function passed as a parameter.&lt;br&gt;
e.g. we want to check if any element is divisible by 3.There are 2 ways to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let isDivisible=false;
for(item of arr){
    if(item%3==0)
    isDivisible=true;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this can be done in a single line using some() method.&lt;br&gt;
It takes a function as a parameter(which will contain our condition), and the parameter function further takes the current element being checked, index(optional) and array on which some is used(optional) as parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let isDivisible=arr.some(item=&amp;gt;item%3==0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here item is the current element being checked for its divisbiliy with 3.&lt;/p&gt;

&lt;p&gt;See how code has been reduced to single line.&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"&gt;Here&lt;/a&gt; is the documentation I read along with the video.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.every():&lt;/strong&gt; It is like some(),the difference is that it returns true ONLY IF ALL elements satisfies the condition.&lt;br&gt;
Let's take the same example as above.&lt;br&gt;
Long way-&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let isDivisible=false;
let count=0;
for(item of arr){
    if(item%3==0)
    count++;
}
isDivisible=(count==5?true:false);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this whole can be reduced to one line using every().&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let isDivisible=arr.every(item=&amp;gt;item%3==0);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3.find():&lt;/strong&gt; It is like &lt;a href="https://dev.to/prachigarg19/project-4-array-cardio-day-1-3b1k"&gt;filter&lt;/a&gt;,the difference is that instead or returning all the elements returning true for the condition,it returns the first element.&lt;/p&gt;

&lt;p&gt;Taking similar example-&lt;br&gt;
Long way-&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let element;

for(item of arr){
    if(item%3==0)
    {
      element=item;
       break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;using find() method-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let element=arr.find(item=&amp;gt;item%3==0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parameters are similar to all methods mentioned above.&lt;br&gt;
Here is the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.findIndex():&lt;/strong&gt; It returns the first index of the elements satisfying the condition. If no such element exists,-1 is returned.&lt;br&gt;
Let's return the index for the element in above example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let index;

for(i=0;i&amp;lt;arr.length;i++){
    if(arr[i]%3==0)
    {
      index=i;
       break;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;using findIndex() function -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr=[3,4,5,1,8];
let index=arr.findIndex(item=&amp;gt;item%3==0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Parameters are same as above functions.&lt;/p&gt;

&lt;p&gt;For further understanding, refer &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-i-learnt"&gt;
  &lt;/a&gt;
  &lt;u&gt;&lt;em&gt;Things I learnt:&lt;/em&gt;&lt;/u&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;More Array.prototype methods.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#previous-article-from-this-series"&gt;
  &lt;/a&gt;
  &lt;u&gt;Previous article from this series:&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/prachigarg19/project-6ajax-type-ahead-40b3"&gt;Day 6 Project 6&lt;/a&gt;.In this project I built a search filter which is very common feature in website nowadays. Do check it out if you haven't already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;u&gt;Conclusion&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;That's it for today's project.&lt;br&gt;
These functions as you saw are super handful and will surely help in reducing the line of code.&lt;/p&gt;

&lt;p&gt;Next project will be HTML5 Canvas .&lt;/p&gt;

&lt;p&gt;If you have any doubts or suggestions please do let me know in the comment section. I'll be more than happy to interact with you.&lt;/p&gt;

&lt;p&gt;If you like this series and want to be a part of it, do consider following me at &lt;a class="mentioned-user" href="https://dev.to/prachigarg19"&gt;@prachigarg19&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading. :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 07 Dec 2021 18:14:02 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4c7j</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-4c7j</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-is-possible-to-be-critical-of-things-that-you-love-to-help-them-grow"&gt;
  &lt;/a&gt;
  "It is [possible] to be critical of things that you love to help them grow."
&lt;/h2&gt;

&lt;p&gt;What an energizing, truthful, and positive article about why software development is so incredible. Great work, &lt;a class="mentioned-user" href="https://dev.to/david_whitney"&gt;@david_whitney&lt;/a&gt;
. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/david_whitney" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--33YQvnfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zG-6E8eS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370904/17c75e16-5ae8-4b0a-9a82-219408a144f2.jpg" alt="david_whitney"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/david_whitney/a-love-letter-to-software-1n9f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;A Love Letter to Software&lt;/h2&gt;
      &lt;h3&gt;David Whitney ・ Dec 2 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#psychology&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#learner-gt-impostor"&gt;
  &lt;/a&gt;
  "Learner" &amp;gt; "Impostor"
&lt;/h2&gt;

&lt;p&gt;There are a lot of articles about impostors syndrome out there, but &lt;a class="mentioned-user" href="https://dev.to/jingjing142"&gt;@jingjing142&lt;/a&gt;
's has extremely actionable, clear advice for anyone suffering from it right now. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jingjing142" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IUFE2CGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RX8jPU1---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/384604/01127fa6-4788-4c1f-bf27-58df7b4f151d.jpeg" alt="jingjing142"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jingjing142/dealing-with-imposter-syndrome-449i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Dealing with Imposter Syndrome&lt;/h2&gt;
      &lt;h3&gt;Jing ・ Dec 4 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#psychology&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#motivation-amp-accountability-are-possible"&gt;
  &lt;/a&gt;
  Motivation &amp;amp; accountability are possible
&lt;/h2&gt;

&lt;p&gt;And the "secret" sauce might just lie in blogging about what you're learning as a dev — or what you already know and can share with others! &lt;a class="mentioned-user" href="https://dev.to/sagarbarapatre"&gt;@sagarbarapatre&lt;/a&gt;
 explains (in a blog, naturally). &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sagarbarapatre" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9yXGbh0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oTiCvPLa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/470482/0a92298a-d055-4a65-a254-0bfd9ee65487.png" alt="sagarbarapatre"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sagarbarapatre/why-every-developer-should-start-blogging-26j0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why Every Developer Should Start Blogging&lt;/h2&gt;
      &lt;h3&gt;Sagar Barapatre ・ Dec 3 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-happier-meal"&gt;
  &lt;/a&gt;
  A Happier Meal
&lt;/h2&gt;

&lt;p&gt;When &lt;a class="mentioned-user" href="https://dev.to/alvaromontoro"&gt;@alvaromontoro&lt;/a&gt;
's partner brought home McDonald's Happy Meals for the kids, he did what many developers would and hacked the small toy included to make it better. Super cool! Kids, if you want to play with your new toy immediately, keep it far away from your local software developer 😆   &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alvaromontoro" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ekLisLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aTV3h--8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/161327/2ff05281-db58-4dcb-946a-4b679e4a266b.jpeg" alt="alvaromontoro"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alvaromontoro/building-a-robot-friend-from-a-mcdonalds-toy-lgm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building a Robot Friend from a McDonald's Toy&lt;/h2&gt;
      &lt;h3&gt;Alvaro Montoro ・ Dec 4 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#what-makes-an-api-restful"&gt;
  &lt;/a&gt;
  What makes an API RESTful?
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/miramarshall"&gt;@miramarshall&lt;/a&gt;
 answers this very question in a succinct and simple way. If you've been struggling with the concept of REST APIs, you'll want to bookmark this post! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/miramarshall" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8rA3cx9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z5CzzcSU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/749717/712022aa-dc9b-46bc-a3d2-c2fc64be4c88.jpeg" alt="miramarshall"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/miramarshall/what-is-a-rest-api-m5k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is a REST API?&lt;/h2&gt;
      &lt;h3&gt;Mira Marshall ・ Dec 4 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#apis&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#getting-more-comfortable-with-the-command-line"&gt;
  &lt;/a&gt;
  Getting more comfortable with the command line
&lt;/h2&gt;

&lt;p&gt;"It is my belief that the terminal itself is not what frightens us, but the unfamiliarity of it all. Once you build up your confidence, the terminal can, and will, be your new best friend. I promise!"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reassuring words from &lt;a class="mentioned-user" href="https://dev.to/stackoverturf"&gt;@stackoverturf&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/stackoverturf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Til43kcE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HaMADLeF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/759121/066b3dc8-167d-48a6-9d77-50f65b989882.JPG" alt="stackoverturf"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/stackoverturf/10-terminal-commandments-for-coding-newbies-3doe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Terminal Commandments for Coding Newbies&lt;/h2&gt;
      &lt;h3&gt;Taylor Overturf ・ Dec 5 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#making-all-web-media-accessible"&gt;
  &lt;/a&gt;
  Making &lt;em&gt;all&lt;/em&gt; web media accessible
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;
 explains that with Cloudinary, you can enable people with hearing or visual challenges to access video and audio content. Let's learn how in their tutorial!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/unicodeveloper" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKGnU9sV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lqZ7uLPe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/304853/b1f707ad-5975-4aca-a2bd-db854a60dda5.jpg" alt="unicodeveloper"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/unicodeveloper/making-your-video-more-accessible-1he5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Making Your Video More Accessible&lt;/h2&gt;
      &lt;h3&gt;Prosper Otemuyiwa ・ Dec 3 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#video&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#accessible&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>How to Build an API using Strapi</title>
      <author>Uchechukwu Azubuko</author>
      <pubDate>Tue, 07 Dec 2021 18:06:34 +0000</pubDate>
      <link>https://dev.to/uche_azubuko/how-to-build-an-api-using-strapi-3ibf</link>
      <guid>https://dev.to/uche_azubuko/how-to-build-an-api-using-strapi-3ibf</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Ever needed to build and ship an API in very little time? Read this article to learn how to use Strapi to get the job done.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;APIs are so useful and ubiquitous in any application, and as a developer, you may be fazed by building an API in very little time. In this article, I will show you how to build a Node.js API so fast (perhaps, in 10 minutes) using the help of Strapi’s intuitive interface.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-youll-learn"&gt;
  &lt;/a&gt;
  What You’ll Learn
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;How to build an API quickly with Strapi.&lt;/li&gt;
&lt;li&gt;How to build a Node backend without writing Node code.&lt;/li&gt;
&lt;li&gt;How to manage relational fields with Strapi.&lt;/li&gt;
&lt;li&gt;How to add GraphQL endpoints to fetch and mutate your API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#this-article-is-written-for"&gt;
  &lt;/a&gt;
  This Article Is Written For
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Developers that need to build backend APIs quickly.&lt;/li&gt;
&lt;li&gt;Developers that want to build a backend, but only want to focus on the frontend.&lt;/li&gt;
&lt;li&gt;Developers that want to build a Node backend API, but don’t have the Node expertise.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-you-will-build"&gt;
  &lt;/a&gt;
  What You Will Build
&lt;/h4&gt;

&lt;p&gt;In this article, you will start from scratch (i.e., from an empty directory), then you will go through all the steps needed to build an API using Strapi. The API that you will build will allow clients to make requests to manipulate content. The content, in this case, will represent blog posts (as in, for a blogging website - if you’d like to build out the frontend, moving forward.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;What you’ll need for this tutorial:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Knowledge of API; it might make sense to learn about it first. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node &amp;amp; NPM - You’ll need to have Node and NPM installed on your local machine. To confirm they’re installed, run the following commands in your terminal:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node -v &amp;amp;&amp;amp; npm --v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Node Package Manager comes installed with Node. If you don’t have them installed, you can follow the instructions on the official &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;This tutorial was completed using Node v14.18.1.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Yarn - Yarn is a package manager that would help us manage our application dependencies in a way that is several times faster and more reliable than NPM. You can install yarn using:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --global yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;p&gt;Here’s what we’ll cover today:&lt;/p&gt;

&lt;p&gt;👋 Intro to Strapi&lt;br&gt;
⚙️ Setting up the Strapi project&lt;br&gt;
🏗️ Building the Strapi backend&lt;br&gt;
🤝 Understanding and using relations in Strapi&lt;br&gt;
⚡ Delivering faster with GraphQL and Strapi&lt;br&gt;
🤔 Conclusion&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro-to-strapi"&gt;
  &lt;/a&gt;
  Intro to Strapi
&lt;/h3&gt;

&lt;p&gt;Strapi is an open-source headless CMS (Content Management System) based on Node.js that gives developers the ability to easily build self-hosted, customizable, and performant content APIs (RESTful and GraphQL). With Strapi, weeks of API development can be saved, because it’s no-code, and building a robust API could be done in less than 20 minutes.&lt;/p&gt;

&lt;p&gt;Isn’t that awesome? I thought so too. Let’s dive right into how that can be made possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-strapi-project"&gt;
  &lt;/a&gt;
  Setting up the Strapi project
&lt;/h3&gt;

&lt;p&gt;There are various ways to &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/installation.html"&gt;install&lt;/a&gt; a new Strapi project. However, the Strapi CLI is the best way to get started.&lt;/p&gt;

&lt;p&gt;For starters, open a terminal and navigate to the directory where you’d like to create this project. Run the following command in your terminal to scaffold a new Strapi project:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create strapi-app my-project --quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Using the &lt;code&gt;--quickstart&lt;/code&gt; flag at the end of the command provides you with the &lt;a href="https://www.sqlite.org/"&gt;SQLite&lt;/a&gt; database by default, and directly creates the project in quickstart mode. If you’d like to switch databases, &lt;a href="https://strapi.gitee.io/documentation/3.0.0-beta.x/guides/databases.html"&gt;read more&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When project creation is completed, the app should automatically start at &lt;a href="http://localhost:1337"&gt;localhost:1337&lt;/a&gt; on your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iNEi5yw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638058550273_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iNEi5yw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638058550273_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If your app didn’t automatically start, run the following command in the project folder:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Open up the app folder with your IDE, and the project structure should look like mine below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vwP8pUe4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116197881_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwP8pUe4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116197881_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-the-strapi-backend"&gt;
  &lt;/a&gt;
  Building the Strapi backend
&lt;/h3&gt;

&lt;p&gt;With the project folder now created, the first step to building a Strapi backend is to register an admin.&lt;/p&gt;

&lt;p&gt;You can register an admin by filling the form that was provided on startup, as I have done below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkri-f0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638058810499_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkri-f0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638058810499_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, click on the “LET’S START” button. This will create your account and take you to the Strapi admin UI, which you will use for development configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7kAPV3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638062668087_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7kAPV3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638062668087_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isn’t it amazing how you moved from &lt;code&gt;yarn create&lt;/code&gt; to having a dashboard where you can create your very own API pretty soon?&lt;/p&gt;

&lt;p&gt;At this point, you are ready to use the awesome powers of Strapi in &lt;strong&gt;building an API for blog posts&lt;/strong&gt;. Let’s proceed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-the-data-structure"&gt;
  &lt;/a&gt;
  Designing the Data Structure
&lt;/h3&gt;

&lt;p&gt;At this point, we are going to start creating the data structure for our API. We can do this by creating content-types. The first content type we will build is for posts.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;Content-Types Builder&lt;/code&gt; section and click on &lt;code&gt;Create new collection type&lt;/code&gt;. A modal will appear, where you will enter &lt;code&gt;post&lt;/code&gt; as the display name.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Content-Types Builder allows to create and update content-types: single and collection types. &lt;a href="https://strapi.io/documentation/user-docs/latest/content-types-builder/creating-new-content-type.html#creating-a-new-content-type"&gt;Read more&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, a modal will appear which you will use to create the fields for the &lt;code&gt;post&lt;/code&gt; content-type.&lt;/p&gt;

&lt;p&gt;Hmm, what fields does a blog post always have… Let’s create the following ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;title&lt;/code&gt; with type &lt;strong&gt;Text&lt;/strong&gt; (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; with type &lt;strong&gt;Rich Text&lt;/strong&gt; (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;image&lt;/code&gt; with type &lt;strong&gt;Media&lt;/strong&gt; (&lt;strong&gt;Single image&lt;/strong&gt;) and (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;author&lt;/code&gt; with type &lt;strong&gt;Text&lt;/strong&gt; (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, you have a &lt;code&gt;post&lt;/code&gt; content-type with 4 fields - Text, Rich Text, Media, and Text.&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;Finish&lt;/strong&gt;, then &lt;strong&gt;Save&lt;/strong&gt;! Here you go, your first content-type has been created, and you have successfully created the schema for a blog post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Schemas help to implement the database’s design. Database schemas are the blueprints that help developers visualize how databases should be built. They provide a reference point that indicates what fields of information the project contains.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdsGrC0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638113888351_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdsGrC0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638113888351_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, on the sidebar, we will see the “COLLECTION TYPES” section and if you go to the post section, you’ll find there are currently no posts.&lt;/p&gt;

&lt;p&gt;You can create a brand new post by clicking &lt;strong&gt;Add new posts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You’ll see that you are provided with a CMS for inputting data. Go ahead and fill up the fields (title, featured image, author, content) with information about the first post you’d like to add to your database. You can add lots of posts if you’d like.&lt;/p&gt;

&lt;p&gt;Then hit &lt;strong&gt;Save&lt;/strong&gt;, and &lt;strong&gt;Publish&lt;/strong&gt;. A screenshot of mine is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqeKCx_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638114103028_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqeKCx_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638114103028_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To view the &lt;code&gt;posts&lt;/code&gt; API, visit &lt;a href="http://localhost:1337/posts"&gt;localhost:1337/posts&lt;/a&gt;. P.s.: Notice it pluralized the name of the collection type that we had set initially - post.&lt;/p&gt;

&lt;p&gt;You will get a status 403 - forbidden error, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xNcSecHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638105741189_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xNcSecHi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638105741189_image.png" alt="" width="553" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s because we attempted to view the API as an unauthenticated user, and by default, viewing an API requires authentication. To make posts public, we have to grant read-access to the post content-type. To do this, head to the dashboard and under the “GENERAL” section.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the &lt;strong&gt;Settings&lt;/strong&gt; then &lt;strong&gt;Roles &amp;amp; Permission&lt;/strong&gt; and click on the &lt;code&gt;public&lt;/code&gt; role.&lt;/li&gt;
&lt;li&gt;Check the article &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;findone&lt;/code&gt; options under permission and save.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these, you have permitted a public user to get all posts &lt;code&gt;**GET**&lt;/code&gt; &lt;code&gt;/posts&lt;/code&gt;, and also get a single post &lt;code&gt;**GET**&lt;/code&gt; &lt;code&gt;/posts/:id&lt;/code&gt;; something so similar to the REST API GET method.&lt;/p&gt;

&lt;p&gt;Then hit &lt;strong&gt;Save&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Now, if we head over to &lt;a href="http://localhost:1337/posts"&gt;localhost:1337/posts&lt;/a&gt; you should now see all your posts from the post endpoint this time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft5QWZhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638114178599_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft5QWZhi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638114178599_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can access created endpoints with REST API methods, because by default, Strapi provides our endpoints via REST, but later in this article, I will show you how endpoints can be accessed via GraphQL&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the project folder, the &lt;code&gt;./api/**/config/routes.json&lt;/code&gt; files define all available endpoints for the clients. By default, Strapi generates endpoints for all your Content Types. &lt;a href="https://strapi.io/documentation/developer-docs/latest/development/backend-customization.html#routing"&gt;Read more&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Looks like we’re making progress. Doesn’t it?&lt;/p&gt;

&lt;p&gt;Now we have created a post, the content is stored in your database so that you can have access to your data when you need to.&lt;/p&gt;

&lt;p&gt;If you look through the &lt;code&gt;posts&lt;/code&gt; endpoint, you’d notice that one other benefit of Strapi is that it supports image optimization too. You are given the ability to render different image formats including thumbnail, large, medium, and small.&lt;/p&gt;

&lt;p&gt;With Strapi, you also don’t have to go through the stress of building out an MVC project structure - creating a database, database connections, models, etc. Here, it’s all done under the hood for you. We’ll have a look at that pretty soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isn’t it beautiful to see that we are making headway?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back in your IDE, you will now see that a &lt;code&gt;./api/posts/&lt;/code&gt; folder has been created in the project folder, which is a reflection of the &lt;code&gt;posts&lt;/code&gt; endpoint you created on the admin panel.&lt;/p&gt;

&lt;p&gt;In the models folder, the &lt;code&gt;posts.settings.json&lt;/code&gt; file defines the &lt;code&gt;post&lt;/code&gt; schema that you created, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E7xrterz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116163053_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7xrterz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116163053_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As your app grows -- the more content-types(endpoints) you add up, the more folders are created in the api directory.&lt;/p&gt;

&lt;p&gt;Also, note that image uploads are stored in the &lt;code&gt;public/uploads&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I feel it makes huge sense that all of your code corresponds to all actions made on the dashboard. What do you think?&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-and-using-relations-in-strapi"&gt;
  &lt;/a&gt;
  Understanding and using relations in Strapi
&lt;/h3&gt;

&lt;p&gt;Let’s say you have a collection of videos, and for each blog post; a video should be embedded within. To establish a connection between a video from the videos collection and its associated blog post, you first have to learn how to use relations in Strapi. &lt;/p&gt;

&lt;p&gt;Relation-type fields added to a content-type from the Content-Types Builder allow to establish a relation with another content-type - mandatorily a collection type. These fields are called "relational fields".&lt;/p&gt;

&lt;p&gt;With our new-found knowledge, let’s go ahead and create the video collection - to demonstrate how to set up relations in Strapi.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;Content-Types Builder&lt;/code&gt; section and click on &lt;code&gt;Create new collection type&lt;/code&gt;. Enter &lt;code&gt;video&lt;/code&gt; as the display name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_jCVrl4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116918626_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_jCVrl4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638116918626_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then add the following field for the video content-type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;url&lt;/code&gt; with type &lt;strong&gt;Text&lt;/strong&gt; (&lt;strong&gt;required&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hit &lt;strong&gt;Finish&lt;/strong&gt;, then &lt;strong&gt;Save&lt;/strong&gt;! Now, your second content-type has been created, and you have successfully created the schema for a video.&lt;/p&gt;

&lt;p&gt;To continue, grab a video URL, perhaps the one for your favorite YouTube video.&lt;/p&gt;

&lt;p&gt;Because we want to create a link between the post collection and the video collection, we also need to add a new field called &lt;code&gt;video&lt;/code&gt; in the &lt;code&gt;Posts&lt;/code&gt; collection. The field type for this would be &lt;strong&gt;Relation&lt;/strong&gt;, and we can choose the kind of relationship we want between &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;videos&lt;/code&gt; (by selecting any of the 6 options), to keep things simple in this demonstration, we’ll choose the one to one relationship where a post has a video, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: For a field to be a relation, it has to be a collection type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bGL_d3MW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638117989452_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGL_d3MW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638117989452_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit the &lt;strong&gt;Finish&lt;/strong&gt; button when you’re done.&lt;/p&gt;

&lt;p&gt;Now your post schema should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tGleTUOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638118149661_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tGleTUOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638118149661_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With these, the video field in the &lt;code&gt;Posts&lt;/code&gt; collection has a relation with the &lt;code&gt;Videos&lt;/code&gt; collection.&lt;/p&gt;

&lt;p&gt;To continue, navigate to the &lt;strong&gt;Videos&lt;/strong&gt; sections under the “COLLECTION TYPES” in your dashboard, then click the &lt;strong&gt;Add New Video&lt;/strong&gt; button to add a video to your &lt;code&gt;Videos&lt;/code&gt; collection as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkMbqsYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638118476871_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkMbqsYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638118476871_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit &lt;strong&gt;Save&lt;/strong&gt;, then &lt;strong&gt;Publish&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With the video added, we can now link it with a blog post, by heading to the post of choice in the Posts collection, clicking the &lt;strong&gt;Edit&lt;/strong&gt; button, and selecting the video URL you’d like to add to that post.&lt;/p&gt;

&lt;p&gt;Tadaa! If you visit &lt;a href="http://localhost:1337/posts"&gt;localhost:1337/posts&lt;/a&gt; on your browser, you will see that the &lt;code&gt;posts&lt;/code&gt; endpoint has been updated and the video has been added to the post where you included it, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9EuD-03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638120192039_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9EuD-03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638120192039_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delivering-faster-with-graphql-and-strapi"&gt;
  &lt;/a&gt;
  Delivering faster with GraphQL and Strapi
&lt;/h3&gt;

&lt;p&gt;Delivering applications faster is always a top priority. In this section, you will learn how to easily query your data through a generated GraphQL schema.&lt;/p&gt;

&lt;p&gt;To get started with GraphQL in your app, you first have to install the plugin by running the following command in your project directory:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn strapi install graphql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With the GraphQL plugin installed, you will be able to add a GraphQL endpoint to fetch and mutate your content.&lt;/p&gt;

&lt;p&gt;Restart the app using:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When you visit &lt;a href="http://localhost:1337/graphql"&gt;localhost:1337/graphql&lt;/a&gt; in your browser, you should see the interface (&lt;strong&gt;GraphQL Playground&lt;/strong&gt;) that will help you to write a GraphQL query to explore your data&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZZyT2Bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638202593800_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZZyT2Bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA40404FBBCC4B6AC68C86E59D06B777193FAD00C474FA40A98AAE13F8E620D5_1638202593800_image.png" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’d like to access the id, title, url of the featured image, author, and url of the video for blog posts, you can write the query as I’ve shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ew3RId3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ooigo66dg7l79utur7ma.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ew3RId3Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ooigo66dg7l79utur7ma.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We were able to grab data pretty fast and conveniently! Also, using the sidebar, you can have a peek at your schema. Awesome!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article, you learned how fast, easy to use, and powerful Strapi is for building APIs. Setting up our backend was super seamless. Just create your collections and Strapi generates RESTful endpoints by default, or if you’d prefer to use GraphQL endpoints, simply install the plugin. All of these, using best web practices. Awesome stuff, indeed!&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions, feel free to post a comment, &lt;a href="//mailto:azubukouche@yahoo.com"&gt;email&lt;/a&gt;, or &lt;a href="https://twitter.com/UcheAzubuko"&gt;DM&lt;/a&gt; me.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, please hit the &lt;em&gt;LOVE&lt;/em&gt; ❤️ button as many times as you wish. Thanks!!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html"&gt;Strapi developer documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>jamstack</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>SafeCloset, a Secret Safe - Why and how I made it in Rust </title>
      <author>Denys Séguret</author>
      <pubDate>Tue, 07 Dec 2021 18:00:18 +0000</pubDate>
      <link>https://dev.to/dystroy/safecloset-a-secret-safe-why-and-how-i-made-it-in-rust-2k47</link>
      <guid>https://dev.to/dystroy/safecloset-a-secret-safe-why-and-how-i-made-it-in-rust-2k47</guid>
      <description>&lt;p&gt;Like everybody, I have small secrets to store, like door codes, some passwords, where I buried the body, etc.&lt;/p&gt;

&lt;p&gt;They must be kept away from other eyes but, more importantly, they must be available, even if I'm traveling far from my computers.&lt;/p&gt;

&lt;p&gt;And they must be easily backed up without risk.&lt;/p&gt;

&lt;p&gt;In the past, I've dealt with such secret storage with various solutions, like having files decrypted, edited with my favorite editor, then encrypted again.&lt;/p&gt;

&lt;p&gt;They were full of weaknesses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;temporary clear files that could be inadvertently backed up, or staying here if I had to leave or in case of crash&lt;/li&gt;
&lt;li&gt;editor weaknesses, like backup files and plugins&lt;/li&gt;
&lt;li&gt;OS specificity making them inaccessible when far from my computers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The temporary clear files where the most dangerous problem. I've had to hunt for my clear files after a badly parameterized backup rule.&lt;br&gt;
Editor plugins were a real threat too, especially as I started using an AI plugin storing whole extracts of my texts for better auto-completion.&lt;/p&gt;

&lt;p&gt;So I had to find or build better.&lt;/p&gt;

&lt;p&gt;The obvious requirements for my new solution were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an encrypted storage file, with a strong algorithm&lt;/li&gt;
&lt;li&gt;a storage format making it possible to keep the file on non secure disks&lt;/li&gt;
&lt;li&gt;a multi-platform application, that can be easily carried too&lt;/li&gt;
&lt;li&gt;totally open-source, so that the program can be fixed or rewritten&lt;/li&gt;
&lt;li&gt;no clear file ever created, no data sent to external API, so the application is an editor too&lt;/li&gt;
&lt;li&gt;pure Rust, to avoid most nasty bugs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added a few less obvious requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy fuzzy key search&lt;/li&gt;
&lt;li&gt;fast opening, instant closing&lt;/li&gt;
&lt;li&gt;auto-closing (dead man switch)&lt;/li&gt;
&lt;li&gt;focus on ergonomics, I want to feel comfortable editing in the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And in case I inadvertently become a secret agent:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;plausible deniability by putting drawers (storage units) inside other ones&lt;/li&gt;
&lt;li&gt;non observability of deep drawers (having several versions of the file doesn't let you know whether there were changes and in which deep drawer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's see the technical choices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#programming-language-rust"&gt;
  &lt;/a&gt;
  Programming language: Rust
&lt;/h3&gt;

&lt;p&gt;As I said, this was obvious to me. Such program can't really be written today in another language. Rust doesn't prevent all bugs, but it makes it possible to avoid the nasty ones which stay hidden and compromise security.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cryptographic-algorithm-and-library-aesgcm"&gt;
  &lt;/a&gt;
  Cryptographic algorithm and library : AES-GCM
&lt;/h3&gt;

&lt;p&gt;I never considered rolling my own algorithm or using a lightly tested library.&lt;/p&gt;

&lt;p&gt;I choose an AEDS crate from the RustCrypto group: &lt;a href="https://github.com/RustCrypto/AEADs/tree/master/aes-gcm-siv"&gt;AES-GCM in its SIV variant&lt;/a&gt; (the SIV variant isn't really needed but it doesn't cost much).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-format"&gt;
  &lt;/a&gt;
  File format
&lt;/h3&gt;

&lt;p&gt;The minimal unit of secret in SafeCloset is an &lt;em&gt;entry&lt;/em&gt;, which is made of  a name and a value, for example "VISA Card code" and "9875".&lt;/p&gt;

&lt;p&gt;Entries are stored together in a &lt;em&gt;drawer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;SafeCloset uses the metaphor of &lt;em&gt;closets&lt;/em&gt; and &lt;em&gt;drawers&lt;/em&gt;:&lt;br&gt;
A SafeCloset file contains something which is called a &lt;em&gt;closet&lt;/em&gt;.&lt;br&gt;
A &lt;em&gt;closet&lt;/em&gt; contains several &lt;em&gt;drawers&lt;/em&gt;. Each drawer is separately encrypted, with its own passphrase (and nonce).&lt;/p&gt;

&lt;p&gt;A drawer also contains a closet, which contains deeper drawers.&lt;/p&gt;

&lt;p&gt;To ensure plausible deniability, drawers are automatically created, including deep ones, and nothing distinguishes drawers that you created and you can open from the ones which were automatically created and that you can't open (you could if you knew their password but they aren't displayed on creation and they only contain random bytes anyway).&lt;/p&gt;

&lt;p&gt;Drawers are serialized using the &lt;a href="https://serde.rs/"&gt;serde&lt;/a&gt; crate which is kind of standard in the Rust world and is very convenient. For the encoding format, I choose &lt;a href="https://msgpack.org/index.html"&gt;MessagePack&lt;/a&gt; which, like JSON, allows field addition but is much more compact. Having optional fields is very important to allow evolution of the file format while ensuring old files will stay compatible with newer versions of the application.&lt;/p&gt;

&lt;p&gt;Combining the chosen encryption scheme and the serialization encoding with the list of structures and fields, the complete file format is described in the &lt;a href="https://dystroy.org/safecloset/community/#storage-format"&gt;community page&lt;/a&gt; to allow replacement of the application if needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-an-ui-in-the-terminal"&gt;
  &lt;/a&gt;
  Making an UI in the terminal
&lt;/h3&gt;

&lt;p&gt;There are many low level libraries whose features go from the basic (and easy) task of coloring and styling the text you print in the terminal to handling events, terminal size, alternate screen, etc. I personally like &lt;a href="https://github.com/crossterm-rs/crossterm"&gt;Crossterm&lt;/a&gt; which is cross platform and well designed.&lt;/p&gt;

&lt;p&gt;I combine it with &lt;a href="https://github.com/Canop/termimad/"&gt;Termimad&lt;/a&gt;, a crate I made to manage skins, generate texts without mixing the style and the content, handle text inputs, even with wide characters, and a lot of small TUI related problems.&lt;/p&gt;

&lt;p&gt;Termimad allows fancy things like editing texts in small areas of your terminal and fading the view behind the menus or dialogs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M71XjnL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dystroy.org/safecloset/img/menu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M71XjnL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dystroy.org/safecloset/img/menu.png" alt="the fancy color fading" width="562" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the author of Termimad I feel comfortable to &lt;em&gt;not&lt;/em&gt; recommend you use it for your own TUI. Not that it's bad, I like it, but it's a strange beast covering much more than what a library should do, and at a much lower level than your typical framework. If you're not used to low level TUI libraries and well versed in Rust, I suggest you look at other higher level TUI crates.&lt;br&gt;
If you still hesitate, come to &lt;a href="https://miaou.dystroy.org/3768"&gt;my chat&lt;/a&gt; and I'll tell you whether Termimad might be the right choice for your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result-safecloset"&gt;
  &lt;/a&gt;
  The result: SafeCloset
&lt;/h2&gt;

&lt;p&gt;Here it is: &lt;a href="https://dystroy.org/safecloset/"&gt;https://dystroy.org/safecloset/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I may say so, I'd say SafeCloset is convenient and pleasant to use.&lt;br&gt;
It lets me find and read my secrets in a few keystrokes.&lt;br&gt;
And it seems to be the most secure solution I ever used.&lt;br&gt;
I designed it to be intuitive for other users too, and I hope I succeeded.&lt;/p&gt;

&lt;p&gt;To better introduce it,  I made a website explaining how it works, how to install it, how to use it: &lt;a href="https://dystroy.org/safecloset/"&gt;https://dystroy.org/safecloset/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The current version is a candidate for a release as 1.0, there's nothing important missing right now, but I'll let some time run to be sure.&lt;/p&gt;

&lt;p&gt;I'd welcome your opinion!&lt;/p&gt;

</description>
      <category>rust</category>
      <category>opensource</category>
      <category>showdev</category>
      <category>cryptography</category>
    </item>
    <item>
      <title>Make &amp; Deploy Doxygen</title>
      <author>Siddhant Khare</author>
      <pubDate>Tue, 07 Dec 2021 17:45:57 +0000</pubDate>
      <link>https://dev.to/siddhantkcode/make-deploy-doxygen-1c50</link>
      <guid>https://dev.to/siddhantkcode/make-deploy-doxygen-1c50</guid>
      <description>&lt;p&gt;Using this Workflow file you can deploy your &lt;strong&gt;&lt;a href="https://www.doxygen.nl/index.html"&gt;Doxygen&lt;/a&gt;&lt;/strong&gt; docs to GitHub pages &lt;em&gt;(in this example)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I have created this Workflow for &lt;a href="https://github.com/metacall/landing-page"&gt;MetaCall/landing-page&lt;/a&gt; to deploy their landing page.&lt;/p&gt;

&lt;p&gt;They are using &lt;code&gt;Docsify&lt;/code&gt; also for documentation, so that part is also getting deployed using the same workflow file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/metacall/landing-page/blob/master/.github/workflows/make_doxygen.yml"&gt;Make &amp;amp; Deploy doxygen.yml&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file"&gt;
  &lt;/a&gt;
  Yaml File
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;We Are using at &lt;a href="https://github.com/metacall"&gt;MetaCall&lt;/a&gt;'s Landing Page&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/metacall"&gt;
        metacall
      &lt;/a&gt; / &lt;a href="https://github.com/metacall/landing-page"&gt;
        landing-page
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Repository containing the landing page for MetaCall Core project.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a href="https://metacall.io" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7kjcurKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/metacall/core/develop/deploy/images/logo.png" alt="METACALL" width="80" height="80"&gt;&lt;/a&gt;
  &lt;h1&gt;
&lt;b&gt;MetaCall Polyglot Runtime&lt;/b&gt;
&lt;/h1&gt;
  &lt;a href="https://metacall.io" rel="nofollow"&gt;MetaCall.io&lt;/a&gt; |
  &lt;a href="https://github.com/metacall/landing-page/#/README?id=install"&gt;Install&lt;/a&gt; |
  &lt;a href="https://github.com/metacall/landing-page/#/docs/docs"&gt;Docs&lt;/a&gt;
&lt;/div&gt;
&lt;div id="user-content-badges"&gt;
  &lt;a href="https://t.me/joinchat/BMSVbBatp0Vi4s5l4VgUgg" alt="Discord" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/6896ac2230a3a6acb7b3b26caf12d0614a48c6fc570a27e55acb71290fee4b8d/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d6d65746163616c6c266d6573736167653d6a6f696e26636f6c6f723d626c7565266c6f676f3d74656c656772616d267374796c653d666c6174"&gt;&lt;/a&gt;
  &lt;a href="https://discord.gg/upwP4mwJWa" alt="Discord" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/ec852400a2ba71b6ba7b95d4a8f4726362b03dd796880021912bc4c6e7211509/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3738313938373830353937343735373432363f6c6162656c3d646973636f7264267374796c653d666c6174"&gt;&lt;/a&gt;
  &lt;a href="https://matrix.to/#/#metacall:matrix.org" alt="Matrix" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/3ac263029803ee51d8a864e80d7b533ef0f9382e092d4dd807974ac555a6e2e5/68747470733a2f2f696d672e736869656c64732e696f2f6d61747269782f6d65746163616c6c3a6d61747269782e6f72673f6c6162656c3d6d6174726978267374796c653d666c6174"&gt;&lt;/a&gt;
  &lt;a href="https://twitter.com/metacallio" alt="Twitter" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/8f843c14d44584589d56800b0bd65e96990facd9cf0dbd787f05462449463845/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f6d65746163616c6c696f3f6c6162656c3d4d65746143616c6c"&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href="https://medium.com/@metacall/call-functions-methods-or-procedures-between-programming-languages-with-metacall-58cfece35d7" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4wCawSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/metacall/core/develop/deploy/images/overview.png" alt="M E T A C A L L" width="350" height="auto"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;MetaCall&lt;/strong&gt; allows calling functions, methods or procedures between multiple programming languages.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sum.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-python position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;sum&lt;/span&gt;(&lt;span class="pl-s1"&gt;a&lt;/span&gt;, &lt;span class="pl-s1"&gt;b&lt;/span&gt;):
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s1"&gt;a&lt;/span&gt; &lt;span class="pl-c1"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;b&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;main.js&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; sum &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"./sum.py"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-en"&gt;sum&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c1"&gt;4&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;// 7&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;metacall main.js&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;MetaCall&lt;/strong&gt; is a extensible, embeddable and interoperable cross-platform polyglot runtime. It supports NodeJS, Vanilla JavaScript, TypeScript, Python, Ruby, C#, Go, C, C++, Rust, D, Cobol &lt;a href="https://github.com/metacall/landing-page/docs/docs.md#_2-language-support"&gt;and more&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;The easiest way to install &lt;strong&gt;MetaCall&lt;/strong&gt; is the following:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;curl -sL https://raw.githubusercontent.com/metacall/install/master/install.sh &lt;span class="pl-k"&gt;|&lt;/span&gt; sh&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;For more information about other install methodologies and platforms or Docker, check the &lt;a href="https://github.com/metacall/landing-page/docs/docs.md#_41-installation"&gt;install documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Examples&lt;/h2&gt;
&lt;p&gt;You can find a complete &lt;a href="https://github.com/metacall/landing-page/docs/docs.md#_43-examples"&gt;list of examples in the documentation&lt;/a&gt;. If you are interested in submitting new examples, please &lt;a href="https://github.com/metacall/landing-page/docs/community.md#community"&gt;contact us in our chats&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/metacall/landing-page"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;&lt;a href="https://core.metacall.io/api/html/index.html"&gt;Live Demo Preview&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>devops</category>
      <category>doxygen</category>
      <category>deploy</category>
    </item>
    <item>
      <title>Quickest Way to Secure API Keys on the Frontend (In Minutes)</title>
      <author>KOR Connect</author>
      <pubDate>Tue, 07 Dec 2021 17:13:19 +0000</pubDate>
      <link>https://dev.to/korconnect/quickest-way-to-secure-api-keys-on-the-frontend-in-minutes-1g97</link>
      <guid>https://dev.to/korconnect/quickest-way-to-secure-api-keys-on-the-frontend-in-minutes-1g97</guid>
      <description>&lt;p&gt;There are often times when we are building websites that leverage the benefits of being delivered on a CDN (security, performance, no backend infrastructure required), but we want more powerful, dynamic functionality. The best way to increase functionality is through APIs; i.e. email contact forms, processing of outside data, or present information like the weather forecast, flight schedules, currency exchange rates, etc. How would we make these API integrations quickly and securely if we do not want to build out a backend or add infrastructure to handle these API calls? Where do we secure the private API keys? What if we don't want user authentication prior to allowing our users to interact with the 3rd party APIs? The answer is &lt;a href="https://korconnect.io/"&gt;KOR Connect&lt;/a&gt;, KOR Connect is a middleware platform that allows CDN front ends to secure API Keys in a quick and simple way, while automatically deploying security layers during the API integration process. The bonus is that it is also free to use! &lt;/p&gt;

&lt;p&gt;We will talk through an example of integrating a Covid 19 tracker. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YegtineV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pwd5x53btr62ogn1nrd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YegtineV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pwd5x53btr62ogn1nrd.gif" alt="Corona_Tracker_GIF" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create a COVID-19 tracker. In order to do this, we have to pick the API that we want to use. I decided on the &lt;a href="https://rapidapi.com/axisbits-axisbits-default/api/covid-19-statistics/"&gt;COVID-19 Statistics API&lt;/a&gt; that uses data from John Hopkins University.&lt;/p&gt;

&lt;p&gt;If you already have a &lt;a href="https://korconnect.io/"&gt;KOR Connect&lt;/a&gt; account you can sign in &lt;a href="https://app.korconnect.io/login"&gt;here&lt;/a&gt; or you can create a new account.&lt;br&gt;
Let’s start by creating an API connection on KOR Connect by clicking on the “+ Connect API” button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQ5ZGSCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a5dxftj5lgyzsbskmja.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQ5ZGSCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a5dxftj5lgyzsbskmja.jpeg" alt="Connect_API" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The connection details were all copied directly from RapidAPI. More information regarding the API connection module &lt;a href="https://kor-comunity.gitlab.io/kor-connect/adir/GETSTARTED.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YvvmBvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8c8a3x315oembhs6nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YvvmBvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8c8a3x315oembhs6nd.png" alt="Connection_module" width="880" height="952"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Done! After making the connection, go to View Details for your new API connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQf-FqAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hlhoqbezgzdg488lt8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQf-FqAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hlhoqbezgzdg488lt8c.png" alt="View_Details" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will see the Secure API and Public API key, both generated by KOR Connect. You can also adjust your per-user rate limit for your API calls at the top left of the screen (the default is 5 calls per second). In this example, we will be using the Single URL Security Type provided by KOR Connect. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aNJmN8ib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75c6wb6gsmqjylqo8hu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aNJmN8ib--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75c6wb6gsmqjylqo8hu4.png" alt="API_Details" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you want, &lt;a href="https://www.youtube.com/watch?v=m-MAIpnH9ag"&gt;here&lt;/a&gt; is a great video tutorial by Traversy Media walking you through building the site on Vue.js. (&lt;a href="https://github.com/bradtraversy/vue-covid-tracker"&gt;Here&lt;/a&gt; is the code for his COVID-19 tracker).&lt;/em&gt; &lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the tutorial he uses a public API, we will use KOR Connect to easily integrate the private API into our site.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, all you have to do is grab the Secure URL and Public API Key provided by KOR Connect (refer to the image above) and use them to make an API request. Here's an example of the fetch request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;YOUR-SECURE-URL&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;headers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x-rapidapi-key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;YOUR-PUBLIC-API-KEY&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it, now you are ready to start testing/ using your API integration. KOR Connect automatically sets the Connection Mode to Testing. When you are ready to go to production make sure you remember to switch the Connection Mode to Production, this will activate security and remove localhost from the allowed domains (more information &lt;a href="https://kor-comunity.gitlab.io/kor-connect/adir/TESTINGPRODUCTIONMODES.html"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K0phmhaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vea7kzfaxyteewz0e4wp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K0phmhaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vea7kzfaxyteewz0e4wp.png" alt="Connection_Modes" width="880" height="189"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was as simple as that, now your API integration works without any additional libraries or configurations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUYg93PC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4b1i79gco4w9c625p05.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUYg93PC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4b1i79gco4w9c625p05.jpeg" alt="Finished_Tracker" width="846" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're interested in adding even more security through an attestation service, click &lt;a href="https://dev.to/korconnect/quickest-way-to-secure-api-keys-on-the-frontend-1jcp"&gt;here&lt;/a&gt; for additional instructions.&lt;/p&gt;

&lt;p&gt;In case you are interested in what happens automatically on KOR Connect’s end after you make a connection. Bot controls are activated that inspect for miscellaneous bots, security-related bots, calls coming from automated browsers, black listed origins, and user agents that don’t seem to be coming from a browser; these calls are blocked if they don’t pass inspection. Furthermore, KOR Connect validates the access-control-allow-origin header from your allowed origins, as well as provides a per-user rate limiter that can block malicious actors abusing calls without causing any interruptions to other users.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>security</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
