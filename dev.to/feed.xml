<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Homer Simpson in CSS... with a single HTML element</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 06 Sep 2021 23:24:26 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/homer-simpson-in-css-with-a-single-html-element-4ood</link>
      <guid>https://dev.to/alvaromontoro/homer-simpson-in-css-with-a-single-html-element-4ood</guid>
      <description>&lt;p&gt;The other day, I did a lightning talk about &lt;a href="https://alvaromontoro.com/blog/67979/creating-accessible-css-art"&gt;CSS art and accessibility&lt;/a&gt; at the Hamburg HTML meetup. Before the meeting, someone commented about drawing a Simpson character in CSS but using a single element... so I decided to give it a try, and here it is. A responsive drawing of Homer Simpson in CSS, using only one HTML element:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/vYZKxQj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like The Simpsons and enjoy coding/looking at CSS drawings, &lt;a href="https://codepen.io/collection/DrwLdN"&gt;check my collection of CSS Simpsons&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>showdev</category>
    </item>
    <item>
      <title>What is a DUMP SERVER and what are its advantages over a static server</title>
      <author>Alexander</author>
      <pubDate>Mon, 06 Sep 2021 23:14:18 +0000</pubDate>
      <link>https://dev.to/xnbox/what-is-a-dump-server-and-what-are-its-advantages-over-a-static-server-4p8l</link>
      <guid>https://dev.to/xnbox/what-is-a-dump-server-and-what-are-its-advantages-over-a-static-server-4p8l</guid>
      <description>&lt;p&gt;
A dump server is a server that responds to client requests with data that it retrieves from a standard HTTP dump.
&lt;/p&gt;

&lt;p&gt;Just like a static server, the dump server does not execute the code, but only gives the ready data to the client.&lt;br&gt;
The static server responds with the contents of the files, and the dump server responds with dumps.&lt;br&gt;
The dump includes the response body, status code, and headers.&lt;br&gt;
The dump server allows you to serve &lt;strong&gt;any kind of request&lt;/strong&gt;, not just &lt;strong&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/strong&gt; method, like a static server.&lt;br&gt;
With a dump server, you can simulate any API without writing  code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need to start working on the frontend, and the backend is not ready yet, then you need a dump server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Meet the DeepfakeHTTP dump server:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/xnbox"&gt;
        xnbox
      &lt;/a&gt; / &lt;a href="https://github.com/xnbox/DeepfakeHTTP"&gt;
        DeepfakeHTTP
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🟪 DeepfakeHTTP is a web server that uses HTTP dumps as a source for responses.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
DeepfakeHTTP – Your 100% static dynamic backend&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/xnbox/DeepfakeHTTP/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/fa6e10811485d7022ae8c55770e22511f740aad92b141370db14c56e9fc44545/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75653f7374796c653d666c61742d737175617265" alt="License MIT"&gt;&lt;/a&gt;
&lt;a href="https://github.com/xnbox/DeepfakeHTTP/releases"&gt;&lt;img src="https://camo.githubusercontent.com/fc98edd88e403df195813c39cc3cf524259cb38a0215b6edb38b377dcbdc7750/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657273696f6e2d312e302e352d3444433731463f7374796c653d666c61742d737175617265" alt="Version 1.0.5"&gt;&lt;/a&gt;
&lt;a href="https://github.com/xnbox/tommy"&gt;&lt;img src="https://camo.githubusercontent.com/fc13f7d0cb921118ea652b34f3df032b6438251a6f450532254fbd63b2651a16/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706f77657265645f62792d546f6d6d792d626c756576696f6c65743f7374796c653d666c61742d737175617265" alt="Powered by Tommy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table width="100%"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/image.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yLcXK826--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/xnbox/DeepfakeHTTP/main/image.png" height="170rem"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;DeepfakeHTTP&lt;/strong&gt; is a web server that uses HTTP dumps as a source for responses.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;What are people using it for?&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;Creating the product POC or demo before even starting out with the backend&lt;/li&gt;
    &lt;li&gt;REST, GraphQL, and other APIs prototyping and testing&lt;/li&gt;
    &lt;li&gt;Hiding critical enterprise infrastructure behind a simple static facade&lt;/li&gt;
    &lt;li&gt;Hacking and fine-tuning HTTP communications on both server and client sides&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
Features&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;No dependencies&lt;/li&gt;
    &lt;li&gt;No installation&lt;/li&gt;
    &lt;li&gt;No configuration files&lt;/li&gt;
    &lt;li&gt;Single-file executable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Command Line Interface (CLI)&lt;/h2&gt;

&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;java -jar df.jar [options] [dump1.txt] [dump2.txt] ...

Options:
        --help           print help message
        --info           print dump files statistics as JSON
        --requests       print dump requests as JSON
        --port           TCP port number, default: 8080
        --collect &amp;lt;file&amp;gt; append live request/response dumps to file
        --no-log         disable request/response console logging
        --no-etag        disable ETag optimization
        --no-watch       disable watch dump files for changes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Prerequisites&lt;/h2&gt;
&lt;ul&gt;
    &lt;li&gt;Java 15 or above&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Get started&lt;/h2&gt;
&lt;ol&gt;
    &lt;li&gt;Download the &lt;a href="https://github.com/xnbox/DeepfakeHTTP/releases/latest"&gt;latest release&lt;/a&gt; of &lt;code&gt;df.jar&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/xnbox/DeepfakeHTTP"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Computing the Pearson correlation matrix on huge datasets in Python</title>
      <author>Linus Kohl</author>
      <pubDate>Mon, 06 Sep 2021 22:29:22 +0000</pubDate>
      <link>https://dev.to/linuskohl/computing-the-pearson-correlation-matrix-on-huge-datasets-in-python-561</link>
      <guid>https://dev.to/linuskohl/computing-the-pearson-correlation-matrix-on-huge-datasets-in-python-561</guid>
      <description>&lt;p&gt;One of the latest tasks at &lt;a href="https://goodip.de"&gt;GoodIP&lt;/a&gt; was to calculate the similarities between around 480k items having around 800 observations in the range of 0–50k each. Reducing the dimensionality would compromise the quality of the long-tail results, which is undesirable. The following article evaluates the performance of different implementations, describes how to split the dataset into multiple chunks and process them in parallel. I also want to mention &lt;a href="https://deepgraph.readthedocs.io/en/latest/tutorials/pairwise_correlations.html"&gt;DeepGraph&lt;/a&gt;, which provides an interesting, different approach.&lt;br&gt;
As a short refresher, the Pearson correlation assigns a value in the range of −1, signifying a negative correlation (if the value in A increases, the corresponding value in B decreases) and 1, a positive correlation (if A increases B also increases). A value of 0 means no correlation. It is defined as&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SJu0GdhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2suhcgvtxma4neypyeql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SJu0GdhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2suhcgvtxma4neypyeql.png" alt="Pearson correlation"&gt;&lt;/a&gt;&lt;br&gt;
where x̄, and ȳ are the means of values in x and y.&lt;/p&gt;

&lt;p&gt;In our case, the CSV file containing the dataset is around 1GB in size. We are going to load it and create a NumPy ndarray from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./items.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;numpy_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_numpy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--APkJpKiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glpyrwq3znoh5kfse7if.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--APkJpKiP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glpyrwq3znoh5kfse7if.png" alt="Dataset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simply trying to run np.corrcoef(numpy_items) raises the exception &lt;em&gt;MemoryError: Unable to allocate 1.6 TiB for an array with shape (480000, 480000) and data type float64&lt;/em&gt; — which illustrates the dimension of the problem. The actual number of pairings that actually need to be processed is the number of different, unordered combinations — choosing r objects from a set of n objects. &lt;em&gt;nCr(n,r)=n!/r!(n−r)!&lt;/em&gt; In this case &lt;em&gt;nCr(480000,2)&lt;/em&gt;, but still 115 199 760 000 combinations.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementations-performance-comparison"&gt;
  &lt;/a&gt;
  Implementations performance comparison
&lt;/h1&gt;

&lt;p&gt;Let’s first compare the performance of different implementations from Pandas, NumPy, and CuPy and find out which works with parallelization. Therefore we only use a 1% subset of the data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cupy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.stats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pearsonr&lt;/span&gt;
&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cuda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_allocator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Disable cache
&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;numpy_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_numpy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cupy_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy_items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Pandas implementation
&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 1 loop, best of 5: 37 s per loop
&lt;/span&gt;
&lt;span class="c1"&gt;# NumPy implementation
&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corrcoef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy_items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 1 loop, best of 5: 1.21 s per loop
&lt;/span&gt;
&lt;span class="c1"&gt;# CuPy implementation (on Tesla K80)
&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;r3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corrcoef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cupy_items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 1 loop, best of 5: 66 ms per loop
&lt;/span&gt;
&lt;span class="c1"&gt;# NumPy custom
&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy_profiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[(&lt;/span&gt;&lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;datam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy_profiles&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;datass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;r4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy_profiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datass&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;datass&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;r4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 1 loop, best of 5: 44.7 s per loop
&lt;/span&gt;
&lt;span class="c1"&gt;# CuPy custom version (on Tesla K80)
&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cupy_profiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[(&lt;/span&gt;&lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;datam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cupy_profiles&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;datass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;r5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cupy_profiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datass&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;datass&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;r5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 1 loop, best of 5: 2.35 s per loop
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xnx7VoUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b92emcmmw7sl9aoj7ku2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xnx7VoUM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b92emcmmw7sl9aoj7ku2.jpg" alt="We are going to use the fastest implementation, right"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GPUs perform great with matrix operations, which could be the cause why CuPy outperforms the other implementations by far. This approach could also outperform our parallelized CPU approach and will be evaluated in a follow-up article. In the following, however, we use the custom implementation that utilizes NumPy, precomputed means, and can easily be distributed to different processes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#chunking-the-dataset"&gt;
  &lt;/a&gt;
  Chunking the dataset
&lt;/h1&gt;

&lt;p&gt;As we do not want to precompute all pairings, mainly due to memory constraints, the approach is to take one row, compute the correlation with all other rows below that index, increment the index, etc. This way, we exclude reflexive comparisons and use the commutativity of the function by ignoring the order. The computational effort for the first indices is then way higher than for the last, and we only want to split at full index positions, both taken into consideration with the following naive split. We need the nCr function for the number of total combinations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ncr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Calculates the number of different, unordered combination 
    of r objects from a set of n objects.
    nCr(n,r) = nPr(n,r) / r!

    Args:
        n (int): Number of objects in set
        r (int): Number of objects to combine
    Returns:
        int: Number of combinations
    """&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;numer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;denom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numer&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;denom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since Python 3.8 you can also use math.comb. The following code finds the indices that split the index into n_chunks close to equal sized parts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n_chunks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="c1"&gt;# Number of chunks
&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy_items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# Number items
&lt;/span&gt;&lt;span class="n"&gt;nr_pairings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ncr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numpy_items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Number of all pairings
# Minimum nr. of pairings per chunk
&lt;/span&gt;&lt;span class="n"&gt;per_chunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nr_pairings&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_chunks&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;split_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;# Array containing the indices to split at
&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# There are n - i pairings at index i
&lt;/span&gt;    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="c1"&gt;# If the current chunk has enough pairings 
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;per_chunk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;split_indices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check the number of pairings in each chunk running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;s_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;split_indices&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;pairings_chunks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_indices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s_indices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s_indices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;pairings_chunks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#processing-the-dataset"&gt;
  &lt;/a&gt;
  Processing the dataset
&lt;/h1&gt;

&lt;p&gt;At first, we precompute the means of the dataset. As the data is read-only, we can just define it in the global scope. All the child processes will then be able to access it, and it will not be copied — provided you don’t write to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy_profiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[(&lt;/span&gt;&lt;span class="nb"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;datam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy_profiles&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt;
&lt;span class="n"&gt;datass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The initial idea was to send the results from the workers to a dedicated storage worker through a queue. Unfortunately, this decreased the performance significantly due to blocking and serialization. The fastest option to implement was to write the results to disk directly from the worker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;output_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/var/tmp/"&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;processor_fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Calculate correlation of rows in the range of i_start and i_end
    and the rows below these indices.
Args:
        i_start (int): Index of the start row
        i_end (int): Index of the end row
    Returns:
        None
    """&lt;/span&gt;    
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i_end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;datam&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datass&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;datass&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;rs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="c1"&gt;# Create nparray that contains information about the indices
&lt;/span&gt;        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;
        &lt;span class="c1"&gt;# Save CSV file
&lt;/span&gt;        &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savetxt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                   &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'%d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'%d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'%0.13f'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# Create pool of worker processes which will carry out the
# computation
&lt;/span&gt;&lt;span class="n"&gt;n_cpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu_count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cpus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Start workers
&lt;/span&gt;&lt;span class="n"&gt;s_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;split_indices&lt;/span&gt;
&lt;span class="n"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_indices&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s_indices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s_indices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s_indices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;processor_fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'i_start'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'i_end'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Close the pool and wait till all workers are done
&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With our dataset, this creates 480k CSV files with a total size of approx. 4TB. We batched and gzip compressed the results to ~ 4GB parts and loaded them into Google BigQuery for production use.&lt;/p&gt;

</description>
      <category>python</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>How To Break Into Data Engineering And Why It's So Hard</title>
      <author>SeattleDataGuy</author>
      <pubDate>Mon, 06 Sep 2021 22:06:29 +0000</pubDate>
      <link>https://dev.to/seattledataguy/how-to-break-into-data-engineering-and-why-it-s-so-hard-4koi</link>
      <guid>https://dev.to/seattledataguy/how-to-break-into-data-engineering-and-why-it-s-so-hard-4koi</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@rocinante_11?utm_source=medium&amp;amp;utm_medium=referral"&gt;Mick Haupt&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being a data engineer can be both challenging and rewarding. But it's not always easy to break into this part of the tech field.&lt;/p&gt;

&lt;p&gt;Data engineering in itself is such a broad term filled with tools, buzzwords and ambiguous roles.&lt;/p&gt;

&lt;p&gt;This can make it very difficult for developers and prospective graduate to get these roles as well as understand how they can create a career path towards said role.&lt;/p&gt;

&lt;p&gt;Let's talk about the different challenges you will face trying to become a data engineer. While finishing this article off with some solutions and paths you can take in order to break into the data engineering field.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges-with-learning-data-engineering"&gt;
  &lt;/a&gt;
  Challenges With Learning Data Engineering
&lt;/h2&gt;

&lt;p&gt;One of the biggest challenges with this career trajectory is related to a lack of general opportunity and gaps in the process of making your way from one level of experience and mastery to another. There may not be an easy path for you to follow as you work your way up to the higher levels of this type of expertise.&lt;/p&gt;

&lt;p&gt;It starts with a relative lack of relevant college and university programs that really prepare you for the ins and outs of data engineering, such as dealing with wild or unstructured data or higher-level database concepts.&lt;/p&gt;

&lt;p&gt;Much of the available higher education in this realm has more to do with other aspects of data science or with software development as a specific practice. That's all well and good, but what about specialization in data engineering? &lt;a href="https://seattledataguy.substack.com/p/are-companies-hiring-fewer-data-scientists"&gt;Data engineering&lt;/a&gt; as a concept is a more elusive part of a given college program.&lt;/p&gt;

&lt;p&gt;In fact, experts who understand the pathways to becoming a data engineer often see what they would call a "gap" between the education that's available and the skills and experience that are required on the job. That's something you'll have to deal with as you put together your career strategy for this type of role.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-lack-of-junior-data-engineer-positions"&gt;
  &lt;/a&gt;
  A Lack Of Junior Data Engineer Positions
&lt;/h2&gt;

&lt;p&gt;Another related problem is that there are a finite number of junior data engineering positions available at today's companies, as well as challenges with building the skill sets and experience that take you from a junior to a senior position as you go.&lt;/p&gt;

&lt;p&gt;For example, getting the requisite experience with &lt;a href="https://www.theseattledataguy.com/what-are-etls-and-why-we-use-them/"&gt;ETL&lt;/a&gt; processes and &lt;a href="https://seattledataguy.substack.com/p/what-is-cloud-data-warehousing"&gt;data warehousing&lt;/a&gt; can be difficult.&lt;/p&gt;

&lt;p&gt;Without access to large complex data sets as well as complex infrastructure, it can be difficult to really replicate the challenges you will face as a data engineer.&lt;/p&gt;

&lt;p&gt;So without a wide range of junior positions, many employees who may want to become a data engineer, might not have an easy route. Now I do think I am seeing some companies trying to fix this problem but its a slow process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developing-a-good-enough-data-engineering-project"&gt;
  &lt;/a&gt;
  Developing A Good Enough Data Engineering Project
&lt;/h2&gt;

&lt;p&gt;So what about doing projects on your own and building a portfolio that any professional would be proud of?&lt;/p&gt;

&lt;p&gt;There are some challenges with that too. If you're not in the field, in a practical position, it's likely that you're not seeing a lot of the specific challenges you would encounter with unruly data or workarounds to particular enterprise problems. Trying to re-create these in a vacuum is also tough, to put it mildly.&lt;/p&gt;

&lt;p&gt;It's not to say that it's impossible. In fact I did put together a list of &lt;a href="https://www.theseattledataguy.com/5-data-engineering-projects-to-add-to-your-resume/"&gt;data engineering projects&lt;/a&gt; I thought looked really great. However, it can be challenging because data engineering also doesn't lend itself as much to applications compared to software engineering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-more-challenge-diversity-in-skill-sets"&gt;
  &lt;/a&gt;
  One More Challenge: Diversity in Skill Sets
&lt;/h2&gt;

&lt;p&gt;In talking about why it's so hard to break into data engineering, we should also talk about the breadth of skills that are needed.&lt;/p&gt;

&lt;p&gt;A good data engineer will have a basis in programming, not just with Python or Scala but in a diverse environment of technologies. Employers and headhunters talk about the "full-stack data scientist or engineer" as a holy grail in the industry, but they don't often talk about how that personal achievement gets unlocked.&lt;/p&gt;

&lt;p&gt;Or if it ever truly gets unlocked.&lt;/p&gt;

&lt;p&gt;In addition to programming, supposedly the successful data engineer should also have a good understanding of around DevOps. He or she should understand the setup of cloud services and APIs, know how to work with SQL as well as interact with NoSQL database, and how open source and vendor tools can work together. He or she should have some hands-on experience with data pipelines and data warehousing.&lt;/p&gt;

&lt;p&gt;All of that is a tall order!&lt;/p&gt;

&lt;p&gt;So how do you get it done?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-to-become-a-data-engineer"&gt;
  &lt;/a&gt;
  Ways to Become a Data Engineer
&lt;/h2&gt;

&lt;p&gt;Now we can talk about some of the solutions that may put you closer to your goals as a professional data engineer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#becoming-a-data-engineer-analysts-and-software-engineers"&gt;
  &lt;/a&gt;
  Becoming a Data Engineer: Analysts and Software Engineers
&lt;/h2&gt;

&lt;p&gt;One of the best ways to work toward a career in data engineering is to start in a related position that's a bit more common or maybe more geared toward the entry-level end of the spectrum.&lt;/p&gt;

&lt;p&gt;To put it another way, the analyst is a fairly standard role in IT. Like the associate in retail, being an analyst in IT can mean various things. You may have a role as a data analyst, business analyst or financial analyst. There really are a ton of roles with the term analyst that can require some similar skills. For example, you will likely need some SQL and you will also need to understand data warehouses. These are the beginning skills of a data engineer.&lt;/p&gt;

&lt;p&gt;In this way you will likely be working close to a data engineering position and maybe even have the chance to occasionally build a data pipeline or two. Setting up a clear path for you to go from &lt;a href="https://www.youtube.com/watch?v=lGzh-QendJc"&gt;analyst to data engineer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The basic idea is that, as you do these things, you build skills that are directly parallel to what you would do as a data engineer. As you do that, you also are hopefully networking toward having more prominence in your particular company. You're getting some of that proximity to the types of problem-solving we talked about above that will come in handy in the trenches.&lt;/p&gt;

&lt;p&gt;There is a similar thing to be said for people wanting to go from software engineer to data engineer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-startups"&gt;
  &lt;/a&gt;
  Working With Startups
&lt;/h2&gt;

&lt;p&gt;Another route to a successful data engineering career is to get yourself into a team situation where you are one of a few people taking on a new and exciting project from scratch.&lt;/p&gt;

&lt;p&gt;Startups are a great place to start a tech career.&lt;/p&gt;

&lt;p&gt;The idea of the startup is that small, scrappy teams are competing with those established blue-chip companies and their armies of developers and engineers to come up with their own data solutions.&lt;/p&gt;

&lt;p&gt;The reason I sometimes suggest working with startups is that you have a lot more general skill-building opportunities. You have more skin in the game, and you're closer to the heart of the machine. You tend to wear a lot of hats, but as you go, you develop more skills accordingly.&lt;/p&gt;

&lt;p&gt;It's not always as lucrative as working for a FAANG, but it will likely be a great learning opportunity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-internship-route"&gt;
  &lt;/a&gt;
  The Internship Route
&lt;/h2&gt;

&lt;p&gt;There is a very different way to approach data engineering that you might think about.&lt;/p&gt;

&lt;p&gt;If you don't want the uphill challenge of trying to design work from a startup perspective, you can try for an internship at one of those more established companies, where others before you have likely fine-tuned DevOps and cloud approaches and other elements of data engineering.&lt;/p&gt;

&lt;p&gt;The pros and cons are evident. On one hand, you won't be blazing a trail. On the other hand, you have a defined structure to work with as you try to climb the ladder.&lt;/p&gt;

&lt;p&gt;In addition, if you perform well, then you are likely to get a return offer and you won't have to stress about getting a job once you graduate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;The truth is for many people reading this article, you may not even know what role you want. I often have people asking me how they would know which role they would enjoy. The truth is, this is so variable depending not only on the person but also the company and team that you end up working on.&lt;/p&gt;

&lt;p&gt;In some cases you may really enjoy working as a data engineer at a start-up and dislike at a different company. Some companies use lots of code to develop their pipelines, others use drag and drop code.&lt;/p&gt;

&lt;p&gt;All in all, your next steps is to start your journey. &lt;a href="https://www.youtube.com/watch?v=KfFm-ZQEe74"&gt;Try building a data engineering project or get an internship at a company.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#readwatch-these-next"&gt;
  &lt;/a&gt;
  Read/Watch These Next
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://seattledataguy.substack.com/p/modernizing-your-data-architecture"&gt;Modernizing Your Data Architecture With The "Modern Data Stack"&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=lGzh-QendJc"&gt;How I Went From Analyst To Data Engineer&lt;/a&gt;\
&lt;em&gt;How to become a data engineer --- and know if it's right for you&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=ZK-5yS7jJC8&amp;amp;t=1s"&gt;How To Start A Consulting Business As A Consultant&lt;/a&gt;\
&lt;em&gt;Getting Your First Client&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0subscribe-to-my-mailing-list-for-community-updates-and-freebies"&gt;
  &lt;/a&gt;
  ✉️ &lt;a href="https://seattledataguy.substack.com/p/scaling-a-data-analytics-team-for"&gt;Subscribe to my Mailing List For Community Updates And Freebies&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me-on-social-network"&gt;
  &lt;/a&gt;
  Connect with Me on Social Network
&lt;/h2&gt;

&lt;p&gt;✅ YouTube:&lt;a href="https://www.youtube.com/channel/UCmLGJ3VYBcfRaWbP6JLJcpA"&gt;https://www.youtube.com/channel/SeattleDataGuy&lt;/a&gt;\&lt;br&gt;
✅ Website: &lt;a href="https://www.theseattledataguy.com/"&gt;https://www.theseattledataguy.com/&lt;/a&gt;\&lt;br&gt;
✅ LinkedIn: &lt;a href="https://www.linkedin.com/company/18129251"&gt;https://www.linkedin.com/company/18129251&lt;/a&gt;\&lt;br&gt;
✅ Personal Linkedin: &lt;a href="https://www.linkedin.com/in/benjaminrogojan/"&gt;https://www.linkedin.com/in/benjaminrogojan/&lt;/a&gt;\&lt;br&gt;
✅ FaceBook: &lt;a href="https://www.facebook.com/SeattleDataGuy"&gt;https://www.facebook.com/SeattleDataGu&lt;/a&gt;y&lt;/p&gt;

</description>
      <category>database</category>
      <category>datascience</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to deploy Node.js Socket.IO server with load balancing &amp; reverse proxy using pm2 &amp; Nginx?</title>
      <author>Amr Elmohamady</author>
      <pubDate>Mon, 06 Sep 2021 22:05:41 +0000</pubDate>
      <link>https://dev.to/amrelmohamady/how-to-deploy-node-js-socket-io-server-with-load-balancing-reverse-proxy-using-pm2-nginx-7k0</link>
      <guid>https://dev.to/amrelmohamady/how-to-deploy-node-js-socket-io-server-with-load-balancing-reverse-proxy-using-pm2-nginx-7k0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#imagine-that-you-are-building-an-app-with-chat-rooms-and-it-will-have-thousands-of-users-how-do-you-think-a-server-could-handle-this-load-"&gt;
  &lt;/a&gt;
  Imagine that you are building an app with chat rooms and it will have thousands of users how do you think a server could handle this load ?!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#with-two-concepts"&gt;
  &lt;/a&gt;
  With Two concepts:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Reverse Proxy&lt;/strong&gt;&lt;br&gt;
A reverse proxy server provides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and servers.&lt;/p&gt;

&lt;p&gt;Examples of Web Servers are Nginx and Apache.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Balancing&lt;/strong&gt;&lt;br&gt;
A reverse proxy server can act as a “traffic cop,” sitting in front of your backend servers and distributing client requests across a group of servers in a manner that maximizes speed and capacity utilization while ensuring no one server is overloaded, which can degrade performance. If a server goes down, the load balancer redirects traffic to the remaining online servers.&lt;/p&gt;



&lt;p&gt;This tutorial assumes that you are able to deploy a normal nodejs app with nginx.&lt;/p&gt;

&lt;p&gt;First, we won't be starting our app normally like &lt;code&gt;node index.js&lt;/code&gt;, but we'll install a package called &lt;a href="https://pm2.keymetrics.io/"&gt;pm2&lt;/a&gt;:&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;npm i pm2&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;pm2 is an Advanced process manager and Load Balancer for production Node.js applications.&lt;/p&gt;

&lt;p&gt;we'll run the app in the &lt;a href="https://pm2.keymetrics.io/docs/usage/cluster-mode/"&gt;cluster mode&lt;/a&gt; (The cluster mode allows networked Node.js applications to be scaled across all CPUs available)&lt;/p&gt;

&lt;p&gt;So set the start command to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm2 start index.js -i max
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; for number of instances and &lt;code&gt;max&lt;/code&gt; to be scaled across all CPUs available&lt;/p&gt;

&lt;p&gt;To stop the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm2 stop index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To Inspect Logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm2 logs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To restart the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm2 restart index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normally, the code that start the server looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listening on *:8000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But for socket.Io we need more than one server or Port to run multiple node instances so we use something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_APP_INSTANCE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`listening on *:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_APP_INSTANCE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The NODE_APP_INSTANCE environment variable is set by the app instance index so if we have four instances then we'll have &lt;code&gt;localhost:8000&lt;/code&gt;, &lt;code&gt;localhost:8001&lt;/code&gt;, &lt;code&gt;localhost:8002&lt;/code&gt;, &lt;code&gt;localhost:8003&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This was the part of load balancing.&lt;/p&gt;

&lt;p&gt;Now, let's go to do reverse proxy with nginx.&lt;/p&gt;

&lt;p&gt;In nginx main config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# 80 for http, 443 for https&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kn"&gt;proxy_http_version&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Upgrade&lt;/span&gt; &lt;span class="nv"&gt;$http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Connection&lt;/span&gt; &lt;span class="s"&gt;"upgrade"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="kn"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;nodes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# enable sticky session with either "hash" (uses the complete IP address)&lt;/span&gt;
    &lt;span class="kn"&gt;hash&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt; &lt;span class="s"&gt;consistent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# or "ip_hash" (uses the first three octets of the client IPv4 address, or the entire IPv6 address)&lt;/span&gt;
    &lt;span class="c1"&gt;# ip_hash;&lt;/span&gt;
    &lt;span class="c1"&gt;# or "sticky" (needs commercial subscription)&lt;/span&gt;
    &lt;span class="c1"&gt;# sticky cookie srv_id expires=1h domain=.example.com path=/;&lt;/span&gt;

    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8002&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8003&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, let's understand this file line by line:&lt;/p&gt;

&lt;p&gt;First, In the server config we listen to the default port of http which is 80, 443 for https.&lt;/p&gt;

&lt;p&gt;Then, the server name = site's domain name&lt;/p&gt;

&lt;p&gt;Then, at the root location we set couple of headers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The X-Forwarded-For (XFF) header is a de-facto standard header for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or a load balancer. When traffic is intercepted between clients and servers, server access logs contain the IP address of the proxy or load balancer only. To see the original IP address of the client, the X-Forwarded-For request header is used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Host header to determine which server the request should be routed to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;we'll pass proxy_pass for now&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;http version to be 1.1 the version that supports WebSockets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTP Upgrade is used to indicate a preference or requirement to switch to a different version of HTTP or to another protocol, if possible, so here in socket.IO implementation we need to upgrade to a websocket connection&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don't know how Socket.IO work under the hood I suggest you read &lt;a href="https://socket.io/docs/v4/how-it-works/"&gt;this page&lt;/a&gt; from the Socket.IO Documentation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upstream nodes block is used to enable sticky session so Socket.IO could work and to set the servers that our load balancer will use, so we set proxy_pass in the location block to be the upstream "nodes" so it can do its reverse proxy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, Finally, Go Run &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;I hope you found this article useful and please share your thoughts below :-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/amrelmohamady"&gt;For more Useful Articles don't forget to FOllOW ;-)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://mobile.twitter.com/Amr__Elmohamady"&gt;@Amr__Elmohamady&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LinkedIn: &lt;a href="https://www.linkedin.com/in/amr-elmohamady-06342a1ba"&gt;Amr Elmohamady&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>nginx</category>
      <category>devops</category>
    </item>
    <item>
      <title>Master objects in JS 🍨 (Part 2)</title>
      <author>Ben Matt, Jr.</author>
      <pubDate>Mon, 06 Sep 2021 21:23:10 +0000</pubDate>
      <link>https://dev.to/jrmatanda/master-objects-in-js-part-2-2fnn</link>
      <guid>https://dev.to/jrmatanda/master-objects-in-js-part-2-2fnn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#objects-and-prototypes"&gt;
  &lt;/a&gt;
  Objects and Prototypes
&lt;/h2&gt;

&lt;p&gt;Like many &lt;strong&gt;object-oriented&lt;/strong&gt; languages, JavaScript provides support for implementation inheritance: the reuse of code or data through a dynamic delegation mechanism. But unlike many conventional languages, &lt;strong&gt;JavaScript&lt;/strong&gt;’s inheritance mechanism is based on prototypes rather than classes. For many programmers, &lt;strong&gt;JavaScript&lt;/strong&gt; is the first object-oriented language they encounter without classes.&lt;/p&gt;

&lt;p&gt;In many languages, every object is an instance of an associated class, which provides code shared between all its instances. &lt;strong&gt;JavaScript&lt;/strong&gt;, by contrast, has no built-in notion of classes. Instead, objects inherit from other objects. Every object is associated with some other object, known as its prototype. Working with prototypes can be different from classes, although many concepts from traditional object-oriented languages still carry over.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understand-the-difference-between-raw-prototype-endraw-raw-getprototypeof-endraw-and-raw-proto-endraw-"&gt;
  &lt;/a&gt;
  Understand the difference between &lt;code&gt;prototype&lt;/code&gt;, &lt;code&gt;getPrototypeOf&lt;/code&gt; and &lt;code&gt;__proto__&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Prototypes involve three separate but related accessors, all of which are named with some variation on the word prototype. This unfortunate overlap naturally leads to quite a bit of confusion. Let’s get straight to the point.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;C.prototype&lt;/code&gt; is used to establish the &lt;strong&gt;prototype&lt;/strong&gt; of &lt;strong&gt;objects&lt;/strong&gt; created by new C().&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt; is the standard &lt;strong&gt;ES5&lt;/strong&gt; mechanism for retrieving &lt;code&gt;obj&lt;/code&gt;’s prototype object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;obj.__proto__&lt;/code&gt; is a nonstandard mechanism for retrieving &lt;code&gt;obj&lt;/code&gt;’s &lt;strong&gt;prototype&lt;/strong&gt; object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To understand each of these, consider a typical definition of a JavaScript datatype. The User constructor expects to be called with the new operator and takes a name and the hash of a password string and&lt;br&gt;
stores them on its created object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwordHash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordHash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;passwordHash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[User &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordHash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sfalken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0ef33ae791068ec64b502d6cb0191387&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The User &lt;strong&gt;function&lt;/strong&gt; comes with a default &lt;strong&gt;prototype&lt;/strong&gt; property, containing an &lt;strong&gt;object&lt;/strong&gt; that starts out more or less empty. In this example, we add two methods to the &lt;code&gt;User.prototype&lt;/code&gt; object: &lt;code&gt;toString&lt;/code&gt; and &lt;code&gt;checkPassword.&lt;/code&gt; When we create an instance of User with the new operator, the resultant object u gets the object stored at &lt;code&gt;User.prototype&lt;/code&gt;&lt;br&gt;
automatically assigned as its &lt;strong&gt;prototype object&lt;/strong&gt;. The image below shows a diagram of these objects&lt;/p&gt;

&lt;p&gt;Notice the arrow linking the instance object u to the prototype object&lt;br&gt;
&lt;code&gt;User.prototype&lt;/code&gt;. This link describes the inheritance relationship.&lt;br&gt;
Property lookups start by searching the &lt;code&gt;object&lt;/code&gt;’s &lt;code&gt;own properties&lt;/code&gt;; for example, u.name and &lt;code&gt;u.passwordHash&lt;/code&gt; return the current values of immediate properties of u. Properties not found directly on u are looked up in u’s prototype. Accessing &lt;code&gt;u.checkPassword&lt;/code&gt;, for example, retrieves a method stored in &lt;code&gt;User.prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This leads us to the next item in our list. Whereas the &lt;strong&gt;prototype&lt;/strong&gt; property of a constructor function is used to set up the &lt;strong&gt;prototype&lt;/strong&gt; relationship of new instances, the ES5 function &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; can&lt;br&gt;
be used to retrieve the prototype of an existing object. So, for example, after we create the object u in the example above, we can test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://firebasestorage.googleapis.com/v0/b/code-rainbow.appspot.com/o/blog-posts%2Fjs%20objects%2FDiagram.png?alt=media&amp;amp;token=80eceac8-d133-4bdd-a776-fb0be71f5525"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n1Sx-mEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/code-rainbow.appspot.com/o/blog-posts%252Fjs%2520objects%252FDiagram.png%3Falt%3Dmedia%26token%3D80eceac8-d133-4bdd-a776-fb0be71f5525" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This illustrates the &lt;strong&gt;prototype&lt;/strong&gt; relationships for the User &lt;strong&gt;constructor&lt;/strong&gt; and&lt;br&gt;
&lt;strong&gt;instance&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some environments produce a nonstandard mechanism for retrieving&lt;br&gt;
the &lt;strong&gt;prototype&lt;/strong&gt; of an &lt;strong&gt;object&lt;/strong&gt; via a special &lt;code&gt;__proto__&lt;/code&gt; property. This can&lt;br&gt;
be useful as a stopgap for environments that do not support &lt;strong&gt;ES5&lt;/strong&gt;’s &lt;code&gt;Object.getPrototypeOf&lt;/code&gt;. In such environments, we can similarly test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A final note about &lt;strong&gt;prototype&lt;/strong&gt; relationships: &lt;strong&gt;JavaScript&lt;/strong&gt; programmers will often describe User as a class, even though it consists of little more than a function. Classes in JavaScript are essentially the combination of a constructor function (User) and a &lt;strong&gt;prototype&lt;/strong&gt; &lt;strong&gt;object&lt;/strong&gt; used to share methods between instances of the &lt;strong&gt;class&lt;/strong&gt; (&lt;code&gt;User.prototype&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://firebasestorage.googleapis.com/v0/b/code-rainbow.appspot.com/o/blog-posts%2Fjs%20objects%2Fdiagram2.png?alt=media&amp;amp;token=1b38b56a-86c4-4583-acd3-5377f453690c"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6dWA26F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/code-rainbow.appspot.com/o/blog-posts%252Fjs%2520objects%252Fdiagram2.png%3Falt%3Dmedia%26token%3D1b38b56a-86c4-4583-acd3-5377f453690c" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a conceptual view of the User “class”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The image above provides a good way to think about the User &lt;strong&gt;class&lt;/strong&gt; conceptually. The User &lt;strong&gt;function&lt;/strong&gt; provides a &lt;strong&gt;public constructor&lt;/strong&gt; for the class, and &lt;code&gt;User.prototype&lt;/code&gt; is an internal implementation of the methods shared between instances. Ordinary uses of User and u have no need to access the &lt;strong&gt;prototype&lt;/strong&gt; &lt;strong&gt;object&lt;/strong&gt; directly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-remember"&gt;
  &lt;/a&gt;
  Things to Remember 🧠
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;C.prototype&lt;/code&gt; determines the prototype of objects created by new &lt;code&gt;C()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt; is the standard ES5 function for retrieving the &lt;strong&gt;prototype&lt;/strong&gt; of an &lt;strong&gt;object&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;obj.__proto__&lt;/code&gt; is a nonstandard mechanism for retrieving the &lt;strong&gt;prototype&lt;/strong&gt; of an &lt;strong&gt;object&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A class is a &lt;strong&gt;design pattern&lt;/strong&gt; consisting of a &lt;strong&gt;constructor&lt;/strong&gt; &lt;strong&gt;function&lt;/strong&gt; and
an associated &lt;strong&gt;prototype&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prefer-raw-objectgetprototypeof-endraw-to-raw-proto-endraw-"&gt;
  &lt;/a&gt;
  Prefer &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; to &lt;code&gt;__proto__&lt;/code&gt; 🦄
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ES5&lt;/strong&gt; introduced &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; as the standard &lt;strong&gt;API&lt;/strong&gt; for retrieving an object’s prototype, but only after a number of &lt;strong&gt;JavaScript&lt;/strong&gt; engines had long provided the special &lt;code&gt;__proto__&lt;/code&gt; property for the same purpose. Not all &lt;strong&gt;JavaScript&lt;/strong&gt; environments support this extension, however, and those that do are not entirely compatible. Environments differ, for example, on the treatment of objects with a null prototype. In some environments, &lt;strong&gt;proto&lt;/strong&gt; is inherited from &lt;code&gt;Object.prototype&lt;/code&gt;, so an object with a null prototype has no special &lt;strong&gt;proto&lt;/strong&gt; property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object with no prototype&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false (in some environments)&lt;/span&gt;
&lt;span class="c1"&gt;// In  others,  __proto__  is  always  handled  specially,  regardless  of  an object’s state:&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object with no prototype&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true (in some environments&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wherever &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; is available, it is the more standard and portable approach to extracting prototypes. Moreover, the &lt;code&gt;__proto__&lt;/code&gt; property leads to a number of bugs due to its pollution of&lt;br&gt;
all objects. JavaScript engines that currently support the extension may choose in the future to allow programs to disable it in order to avoid these bugs. Preferring &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; ensures that code will continue to work even if &lt;code&gt;__proto__&lt;/code&gt; is disabled.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;JavaScript&lt;/strong&gt; environments that do not provide the &lt;strong&gt;ES5&lt;/strong&gt; API, it is easy to implement in terms of &lt;code&gt;__proto__&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not an object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This implementation is safe to include in ES5 environments, because it avoids installing the function if &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; already exists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#things-to-remember"&gt;
  &lt;/a&gt;
  Things to Remember 🧠
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Prefer the standards-compliant &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; to the non-&lt;br&gt;
standard &lt;code&gt;__proto__&lt;/code&gt; property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; in non-ES5 environments that&lt;br&gt;&lt;br&gt;
support &lt;code&gt;__proto__&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#never-modify-raw-proto-endraw-"&gt;
  &lt;/a&gt;
  Never modify &lt;code&gt;__proto__&lt;/code&gt; 🍕
&lt;/h2&gt;

&lt;p&gt;The special &lt;strong&gt;proto&lt;/strong&gt; property provides an additional power that &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; does not: the ability to modify an &lt;strong&gt;object&lt;/strong&gt;’s &lt;strong&gt;prototype&lt;/strong&gt; link. While this power may seem innocuous (after all, it’s just another property, right?), it actually has serious implications and should be avoided. The most obvious reason to avoid modifying&lt;br&gt;
&lt;code&gt;__proto__&lt;/code&gt; is portability: Since not all platforms support the ability to&lt;br&gt;
change an &lt;strong&gt;object&lt;/strong&gt;’s &lt;strong&gt;prototype&lt;/strong&gt; you simply can’t write portable code that does it.&lt;/p&gt;

&lt;p&gt;Another reason to avoid modifying &lt;code&gt;__proto__&lt;/code&gt; is performance. All modern &lt;strong&gt;JavaScript&lt;/strong&gt; engines heavily optimize the act of getting and setting &lt;strong&gt;object&lt;/strong&gt; &lt;strong&gt;properties&lt;/strong&gt;, since these are some of the most common operations that JavaScript programs perform. These optimizations are built on the engine’s knowledge of the structure of an object. When you change the object’s internal structure, say, by adding or removing properties to the object or an object in its prototype chain, some of these optimizations are invalidated. Modifying &lt;code&gt;__proto__&lt;/code&gt; actually changes the inheritance structure itself, which is the most destructive change possible. This can invalidate many more optimizations than modifications to ordinary properties.&lt;/p&gt;

&lt;p&gt;But the biggest reason to avoid modifying &lt;code&gt;__proto__&lt;/code&gt; is for maintaining predictable behavior. An object’s prototype chain defines its behavior by determining its set of properties and property values. Modifying an object’s prototype link is like giving it a brain transplant: It swaps the object’s entire inheritance hierarchy. It may be possible to imagine exceptional situations where such an operation could be helpful, but as a matter of basic sanity, an inheritance hierarchy should remain stable.&lt;/p&gt;

&lt;p&gt;For creating new objects with a custom prototype link, you can use &lt;strong&gt;ES5&lt;/strong&gt;’s &lt;code&gt;Object.create&lt;/code&gt;. For environments that do not implement ES5, Item 33 provides a portable implementation of &lt;code&gt;Object.create&lt;/code&gt; that does not rely on &lt;code&gt;__proto__&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-remember"&gt;
  &lt;/a&gt;
  Things to Remember 🧠
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Never modify an object’s &lt;code&gt;__proto__&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Object.create&lt;/code&gt; to provide a custom &lt;strong&gt;prototype&lt;/strong&gt; for new objects.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading-the-second-part-this-article"&gt;
  &lt;/a&gt;
  🎉🎉🎉 Thank you for reading the second part this article! 🎉🎉🎉
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dont-forget-to-checkout-the-third-part-of-this-serie-make-your-constructors-newagnostic"&gt;
  &lt;/a&gt;
  Don't forget to checkout the third part of this serie! 🥳 &lt;a href="https://code-rainbow.web.app/blog/Master%20Objects%20in%20JS%20%F0%9F%8D%A8%20(Part%203).html"&gt;Make your Constructors new-Agnostic&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;And if you want more in depth knowledge about your favorite programming languages checkout my personal &lt;a href="https://code-rainbow.web.app"&gt;blog&lt;/a&gt; to become an on demand developer 😉, and you can find me on &lt;a href="https://twitter.com/JrMatanda"&gt;twitter&lt;/a&gt; as well😃.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Video preview on hover with HTML and JavaScript</title>
      <author>Juan Belieni</author>
      <pubDate>Mon, 06 Sep 2021 21:13:24 +0000</pubDate>
      <link>https://dev.to/juanbelieni/video-preview-on-hover-with-html-and-javascript-1b00</link>
      <guid>https://dev.to/juanbelieni/video-preview-on-hover-with-html-and-javascript-1b00</guid>
      <description>&lt;p&gt;In this post, I will be showing how to add a preview feature for the videos inside your HTML page.&lt;/p&gt;

&lt;p&gt;First, I will be using this simple HTML code as the base to create the preview feature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;video&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; 
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, to start, we should create the &lt;code&gt;startPreview&lt;/code&gt; and &lt;code&gt;stopPreview&lt;/code&gt; functions. To contextualize, the preview will be played during 4 seconds, starting after the first second at a playback rate of 50%.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;startPreview&lt;/code&gt; will set the values so that the preview will be played as mentioned, and &lt;code&gt;stopPreview&lt;/code&gt; will reset the values to the default ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startPreview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;muted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;playbackRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;stopPreview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;playbackRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After it, we should create the event listeners so that the preview can be played on hover. To accomplish this, a timeout will be used to stop the preview after 4 seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;previewTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouseenter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;startPreview&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;previewTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stopPreview&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouseleave&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previewTimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;previewTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;stopPreview&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to clear the timeout every time the user leaves the video area, because it can happen that a previous timeout stops the video when the user enters the video area for a second time before the 4 seconds.&lt;/p&gt;




&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/juanbelieni/embed/jOwMaaG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I got into Computer Engineering?</title>
      <author>Muhammad</author>
      <pubDate>Mon, 06 Sep 2021 20:45:02 +0000</pubDate>
      <link>https://dev.to/midnqp/how-i-got-into-computer-engineering-58gb</link>
      <guid>https://dev.to/midnqp/how-i-got-into-computer-engineering-58gb</guid>
      <description>&lt;p&gt;It all started in the age of 12.&lt;/p&gt;

&lt;p&gt;Smartphones were pretty rare then. But I had one. The other thing I had was Broadband Internet. One day I woke up from sleep and said, why not combine both. And then I tried to do it. And I failed. &lt;/p&gt;

&lt;p&gt;Kept failing until I succeeded to turn on the &lt;code&gt;hosted network&lt;/code&gt; at my Windows 10 laptop, and share bandwidth. That's how I could use Internet on my tiny smartphone as Wi-Fi, without using a Network Router. &lt;/p&gt;

&lt;p&gt;That was a victory! And victories feel good. &lt;strong&gt;Really good.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instantly got interested in computers. Started learning to code the same day. Started with learning &lt;code&gt;C&lt;/code&gt;, and started respecting Denis Ritchie.&lt;/p&gt;

&lt;p&gt;To the 12-years-old me, &lt;code&gt;C&lt;/code&gt; wasn't easy. But to my unquenching curiosity, it wasn't hard. I even learnt &lt;code&gt;pointers&lt;/code&gt;!!! Kept learning it, until I realized Python is a better one to start with.&lt;/p&gt;

&lt;p&gt;Fast forward and now, I'm a &lt;strong&gt;Web Systems Engineer&lt;/strong&gt; at a Dubai-based startup. And I got my first paycheck before all of my friends and peers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lesson-of-the-day"&gt;
  &lt;/a&gt;
  Lesson of the Day
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you have a dream that you believe in, keep chasing that dream.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>motivation</category>
    </item>
    <item>
      <title>WHAT IS SQL INJECTION? TYPES, EXAMPLES, PREVENTION</title>
      <author>Sudip Sengupta</author>
      <pubDate>Mon, 06 Sep 2021 20:07:09 +0000</pubDate>
      <link>https://dev.to/sudip_sg/what-is-sql-injection-types-examples-prevention-541e</link>
      <guid>https://dev.to/sudip_sg/what-is-sql-injection-types-examples-prevention-541e</guid>
      <description>&lt;p&gt;Code injections are the oldest known web application attack vectors, with successful hacks leading to a &lt;strong&gt;denial of service, loss of data integrity, data loss,&lt;/strong&gt; and the &lt;strong&gt;compromise of entire networks.&lt;/strong&gt; As a result, &lt;a href="https://crashtest-security.com/what-are-the-different-types-of-injection-attacks/"&gt;injection-based security vulnerabilities&lt;/a&gt; rank number one on the &lt;a href="https://crashtest-security.com/owasp/"&gt;OWASP Top 10 Security Risks&lt;/a&gt;. They allow attackers to apply malicious code into information systems through user input interfaces. One such mechanism is a &lt;strong&gt;SQL Injection&lt;/strong&gt; attack that involves the insertion of SQL queries to client input to access and manage backend databases. SQL Injection attacks are mostly carried out on web applications that rely on dynamic databases but lack sufficient input validation.&lt;/p&gt;

&lt;p&gt;This article delves into SQL Injection based security risks and the various best practices and tools to prevent such attacks.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectiondeepdive"&gt;A Deep Dive into SQL Injection Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionassessment"&gt;SQLi Security Assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionattacktypes"&gt;Types of SQL Injection Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionperformattack"&gt;How Attackers Perform SQLi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionattackexamples"&gt;Commonly Known SQLi Attack Examples &amp;amp; Technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionprevention"&gt;How to Prevent SQL injection Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectiontools"&gt;Tools to Prevent, Detect and Remediate SQLi Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ul65TZoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezcpw19830jmp1kiujm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ul65TZoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezcpw19830jmp1kiujm7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-deep-dive-into-sql-injection-vulnerabilities"&gt;
  &lt;/a&gt;
  A DEEP DIVE INTO SQL INJECTION VULNERABILITIES
&lt;/h2&gt;

&lt;p&gt;When a malicious user performs an SQL Injection (SQLi) attack, they typically intend to control the web application’s database server using malicious SQL statements. This allows them to bypass authentication controls required to access and retrieve the contents of the database. This usually is initiated by hackers scouting the application firewall for vulnerable user input points. Once identified, the attacker creates input content known as a &lt;strong&gt;malicious payload,&lt;/strong&gt; executing unauthorized SQL injection commands at the back-end database. &lt;/p&gt;

&lt;p&gt;Attackers commonly develop SQL injection commands to perform a wide variety of malicious acts, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieving user credentials within the database&lt;/li&gt;
&lt;li&gt;Selecting and outputting crucial system data&lt;/li&gt;
&lt;li&gt;Appending or adding new data to a database&lt;/li&gt;
&lt;li&gt;Deleting tables and records from the database&lt;/li&gt;
&lt;li&gt;Using the back-end database server to access the Operating System&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sqli-security-assessment"&gt;
  &lt;/a&gt;
  SQLI SECURITY ASSESSMENT
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lS0l4wSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p4edng48sf9i7cogfqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lS0l4wSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p4edng48sf9i7cogfqe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CVSS Vector: &lt;a href="https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N"&gt;AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-sql-injection-attacks"&gt;
  &lt;/a&gt;
  TYPES OF SQL INJECTION ATTACKS
&lt;/h2&gt;

&lt;p&gt;SQLi is a common and well-documented attack strategy whose success has far-reaching business consequences such as unauthorized viewing of credentials and gaining administrative access to the application’s database. SQLi attacks are categorized based on the following methods used to gain database access:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inband-sqli"&gt;
  &lt;/a&gt;
  IN-BAND SQLI
&lt;/h3&gt;

&lt;p&gt;The attacker gathers their results using the same communication channel they use to launch attacks. This code injection technique is common since it offers a simple, efficient way to access the database server. There are several types of in-band SQLi, including:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#errorbased-sqli"&gt;
  &lt;/a&gt;
  ERROR-BASED SQLI
&lt;/h3&gt;

&lt;p&gt;The attacker relies on error messages relayed by the database server to learn about the database structure. Sometimes the error messages can provide sufficient data to enumerate the entire database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unionbased-sqli"&gt;
  &lt;/a&gt;
  UNION-BASED SQLI
&lt;/h3&gt;

&lt;p&gt;In this case, the malicious payload uses SQLs UNION operator to combine the results of several SELECT statements to one output, which is returned along with the HTTP response. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blind-sql-injectioninferential-sqli"&gt;
  &lt;/a&gt;
  BLIND SQL INJECTION/INFERENTIAL SQLI
&lt;/h3&gt;

&lt;p&gt;In a Blind SQL injection technique, the hacker sends malicious data payloads, then reconstructs the database server’s structure using the web application’s response. In Blind SQLi, data is not actually retrieved by the web application, so the attacker cannot view the results of an attack using the same communication channel they used to launch this type of attack. Blind SQL Injection, also commonly referred to as the Inferential method, is of several types:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contentbased-sqli"&gt;
  &lt;/a&gt;
  CONTENT-BASED SQLI
&lt;/h3&gt;

&lt;p&gt;Content/Boolean-based SQLi attacks force the web application to return different results depending on whether the malicious SQL query returns a TRUE or FALSE result. The query result determines whether the content in the HTTP response stays the same or changes. As a result, the attacker can determine whether the malicious payload returns a true or false result even though the query returns no data from the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timebased-sqli"&gt;
  &lt;/a&gt;
  TIME-BASED SQLI
&lt;/h3&gt;

&lt;p&gt;The attacker sends a query that forces the application to wait for a specific duration before returning a response. The attacker uses the response time to determine whether the result of a query is TRUE or FALSE. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outofband-sqli"&gt;
  &lt;/a&gt;
  OUT-OF-BAND SQLI
&lt;/h3&gt;

&lt;p&gt;The attacker uses the same channel to launch the attack and gather results. While this attack is uncommon since it relies on certain  database server features being enabled, it offers an alternative for orchestrating injection attacks if the server responses are unstable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-attackers-perform-sqli"&gt;
  &lt;/a&gt;
  HOW ATTACKERS PERFORM SQLI
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#webpage-sqli"&gt;
  &lt;/a&gt;
  WEB-PAGE SQLI
&lt;/h3&gt;

&lt;p&gt;When a web application asks for user input, some attackers supply SQL statements that are run unknowingly on the database. This section explores ways in which attackers create payloads that generate valid SQL statements at the user input.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sqli-based-on-11-is-always-true"&gt;
  &lt;/a&gt;
  SQLI BASED ON 1=1 IS ALWAYS TRUE
&lt;/h3&gt;

&lt;p&gt;The attacker uses an OR statement to access all records in a table. When prompted for a User ID, the attacker inputs 105 OR 1=1. If the web application lacks sufficient input validation, this statement is accepted the generates a SQL command of the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM Users WHERE UserId = 105 OR 1=1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query accesses and displays all records in the Users table since 1=1 is always TRUE.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sqli-based-on-is-always-true"&gt;
  &lt;/a&gt;
  SQLI BASED ON “=” IS ALWAYS TRUE
&lt;/h3&gt;

&lt;p&gt;Attackers use an OR statement to get combinations of related data. When prompted for a Username and Password, they key in ” or ” “=” on both fields. The database server then executes a command of the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM Users WHERE Name =”” or “”=”” AND Pass =”” or “”=””
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command returns every row in the Users table since OR “=” is always true for Usernames and Passwords.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sqli-based-on-batched-statements"&gt;
  &lt;/a&gt;
  SQLI BASED ON BATCHED STATEMENTS
&lt;/h3&gt;

&lt;p&gt;Modern database servers accept batch statements, which hackers may exploit to target particular records or tables. For instance, when prompted for their User ID, they input 105; DROP TABLE Suppliers. This executes a valid statement of the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This deletes the table Suppliers from User records.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commonly-known-sqli-attack-examples-amp-technique"&gt;
  &lt;/a&gt;
  COMMONLY KNOWN SQLI ATTACK EXAMPLES &amp;amp; TECHNIQUE
&lt;/h2&gt;

&lt;p&gt;Successful SQLi attacks can be used to tamper with existing data, disclose crucial information, gain administrative rights to networks and cause repudiation issues. Examples of SQLi attacks on enterprise systems include:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-2019-bulgarian-national-revenue-agency-data-breach"&gt;
  &lt;/a&gt;
  THE 2019 BULGARIAN NATIONAL REVENUE AGENCY DATA BREACH
&lt;/h3&gt;

&lt;p&gt;On 15th July 2019, an anonymous hacker announced that they successfully deployed an SQL injection on the national tax authority’s servers. The hacker extracted 11 GB of data in 57 folders of .csv files that contained names and identification information of over 6 million people. The files also included citizens’ social security payments, taxes, online betting data, debts, company activities, and revenues collected for over 12 years.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-20202021-accellion-data-breach"&gt;
  &lt;/a&gt;
  THE 2020/2021 ACCELLION DATA BREACH
&lt;/h3&gt;

&lt;p&gt;Attackers used an SQL injection vulnerability to gain initial access to the Accellion File Transfer Appliance (FTA) and cause a massive data breach affecting multiple companies in different sectors and multiple countries. The victims’ data began to appear on CLOP LEAKS, a ransomware forum. The zero-day vulnerabilities that enabled a successful attack are yet to be fixed as more companies keep reporting compromises of user data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prevent-sql-injection-attacks"&gt;
  &lt;/a&gt;
  HOW TO PREVENT SQL INJECTION ATTACKS
&lt;/h2&gt;

&lt;p&gt;Preventing SQLi attacks is a complex and rigorous process since prevention techniques vary according to the programming language used, the SQL database engine, and the SQLi subtype being addressed. This section explores the tools and best practices to prevent SQL Injection vulnerabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices-to-prevent-sqli-vulnerabilities"&gt;
  &lt;/a&gt;
  BEST PRACTICES TO PREVENT SQLI VULNERABILITIES
&lt;/h3&gt;

&lt;p&gt;Some strategic principles and practices to keep web applications safe from SQLi attacks include:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#training-amp-awareness"&gt;
  &lt;/a&gt;
  TRAINING &amp;amp; AWARENESS
&lt;/h4&gt;

&lt;p&gt;Everyone involved in developing and managing the application should understand the risk and impacts of SQL injections. Training should also be extended to users to understand why it is important only to include valid inputs when prompted.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#filter-user-input"&gt;
  &lt;/a&gt;
  FILTER USER INPUT
&lt;/h4&gt;

&lt;p&gt;A database administrator should never trust user input. Internal and public user inputs should all be filtered and validated before being exposed to the database server.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-whitelistbased-filters"&gt;
  &lt;/a&gt;
  USE WHITELIST-BASED FILTERS
&lt;/h4&gt;

&lt;p&gt;Attackers will always develop clever methods to circumvent blacklists. Whitelisting prevents attacks using a list that only allows certain users to access the protected system. In addition, malicious payloads deployed by SQLi injections cannot execute when they don’t exist in the whitelist.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-updated-web-technologies"&gt;
  &lt;/a&gt;
  USE UPDATED WEB TECHNOLOGIES
&lt;/h4&gt;

&lt;p&gt;Software updates often include patches for discovered vulnerabilities. Hackers typically rely on these vulnerabilities to deploy malicious payloads. Using the latest patched versions of development environments and frameworks will meet compliance standards and keep the web application safe from exploits as most software organizations try to stay ahead of hackers. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#regular-scanning"&gt;
  &lt;/a&gt;
  REGULAR SCANNING
&lt;/h4&gt;

&lt;p&gt;Attackers inject malicious input through vulnerabilities they discover in the system code. Therefore, security teams should undertake a SQL vulnerability assessment using the right tools to find any possible vulnerabilities before attackers can take advantage of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sql-injection-practical-prevention-tips"&gt;
  &lt;/a&gt;
  SQL INJECTION PRACTICAL PREVENTION TIPS
&lt;/h3&gt;

&lt;p&gt;To prevent SQL injection attacks, treat all user input as potentially malicious and follow some programming guidelines:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#filter-user-input"&gt;
  &lt;/a&gt;
  FILTER USER INPUT
&lt;/h4&gt;

&lt;p&gt;For an attacker to successfully execute an SQL injection, he needs to plant some code run by the web application’s database. Therefore all user input should be validated first and limited to the needed characters. E.g., you may ask a user to input a username, password, and e-mail address in a registration form. You can limit the allowed characters of these input fields to characters that do not interfere with the database. The following example filters out user input for the three values in PHP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (preg_match("/[^A-Za-z0-9]/", $username) ||
  (preg_match("/[^A-Za-z0-9\!_-]/", $password) ||
  (preg_match("/[^A-Za-z0-9_-@]/", $email)) {
    echo "Invalid Characters!";
} else {
    # Run Database Command
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#database-mappers"&gt;
  &lt;/a&gt;
  DATABASE MAPPERS
&lt;/h4&gt;

&lt;p&gt;Most modern web frameworks provide some abstraction of database handling. E.g., Laravel provides Eloquent queries. Created objects are automatically converted and stored or retrieved from the database. In the example of the user registration form, one could create the user object in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$user = new User;
$user-&amp;gt;username = $request-&amp;gt;username;
$user-&amp;gt;password = $request-&amp;gt;password;
$user-&amp;gt;email = $request-&amp;gt;email;
$user-&amp;gt;save();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resulting SQL statement is automatically sanitized and will prevent SQL injections.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sanitize-user-input-prepared-statements"&gt;
  &lt;/a&gt;
  SANITIZE USER INPUT / PREPARED STATEMENTS
&lt;/h4&gt;

&lt;p&gt;It may not always be possible to use a database mapper. In these cases, use prepared statements to create your SQL queries. These forms of statements validate and sanitize the user-provided values and therefore prevent SQL injections. E.g., in PHP, you can create a prepared statement the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$stmt = $mysqli-&amp;gt;prepare("INSERT INTO users(username, password, email) VALUES (?, ?, ?)");
$stmt-&amp;gt;bind_param("sss", $username, $password, $email) # "sss" here states, that three strings are expected.
$username = $request-&amp;gt;username;
$password = $request-&amp;gt;password;
$email = $request-&amp;gt;email;
$stmt-&amp;gt;execute();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tools-to-prevent-detect-and-remediate-sqli-vulnerabilities"&gt;
  &lt;/a&gt;
  TOOLS TO PREVENT, DETECT AND REMEDIATE SQLI VULNERABILITIES
&lt;/h2&gt;

&lt;p&gt;Regular SQL vulnerability assessment scan is the first actionable remediation to keeping web applications safe from SQLi vulnerabilities. Here is a list of popular vulnerability scanners that can help security teams identify and resolve SQLi vulnerabilities:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crashtest-security"&gt;
  &lt;/a&gt;
  &lt;a href="https://crashtest-security.com/"&gt;CRASHTEST SECURITY&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Crashtest Security&lt;/strong&gt; is an end-to-end security testing suite that simplifies vulnerability scanning through quick security assessments, risk reduction, and rich vulnerability reports. In addition, Crashtest integrates with multiple layers of the development stack, thereby allowing teams to establish a continuous testing process and eliminate attack surfaces on APIs and web applications.&lt;/p&gt;

&lt;p&gt;The security platform also automates vulnerability scanning and seamlessly delivers security information on the web application, allowing development teams to focus on clean code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#acunetix"&gt;
  &lt;/a&gt;
  ACUNETIX
&lt;/h3&gt;

&lt;p&gt;A complete security testing solution that can be used for both distributed and standalone systems. &lt;a href="https://www.acunetix.com/"&gt;Acunetix&lt;/a&gt; integrates seamlessly with market-leading development frameworks and comes with in-built vulnerability scanning and management functions. Acunetix also interfaces with third-party issue trackers to help with end-to-end vulnerability management.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#burp-suite"&gt;
  &lt;/a&gt;
  BURP SUITE
&lt;/h3&gt;

&lt;p&gt;A Web Application Security Testing solution developed by &lt;a href="https://www.imperva.com/"&gt;PortSwigger&lt;/a&gt; to help organizations fight zero-day threats through automated scanning. The suite also includes penetration testing functions that can be used to identify the impact of SQLi attacks on web servers. The suite comes in an Enterprise and Professional Edition that offers different vulnerability management tools for web application security. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imperva-database-security"&gt;
  &lt;/a&gt;
  IMPERVA DATABASE SECURITY
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.imperva.com/"&gt;Imperva&lt;/a&gt; is a database risk &amp;amp; compliance management platform that delivers analytics, response, and protection for organizational data assets. The platform integrates with any database so organizations can use its global preconfigured reports, policies, and templates as soon as Imperva is deployed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  SUMMARY
&lt;/h2&gt;

&lt;p&gt;Despite extensive efforts to remediate issues, SQLi vulnerabilities are still popular. It is estimated that &lt;strong&gt;8% of websites and web applications&lt;/strong&gt; have at least one vulnerability. In addition, attackers leverage SQLi vulnerabilities in many ways to compromise a web application through unauthorized database access. &lt;/p&gt;

&lt;p&gt;To help with this, the &lt;a href="https://crashtest-security.com/vulnerability-scanner/"&gt;Crashtest Security Suite&lt;/a&gt; helps organizations protect their web applications and APIs from injection attacks through continuous vulnerability scans and testing. In addition, the security platform fits seamlessly in the DevOps toolchain, enabling organizations to develop and deploy safer javascript, web applications, and APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://crashtest.cloud/registration?utm_source=blog&amp;amp;utm_medium=referral&amp;amp;utm_campaign=blog_reg&amp;amp;_ga=2.249044103.1096107355.1630931897-1082379764.1630931897"&gt;Sign up for free here&lt;/a&gt; to know how Crashtest Security can help with a rapid vulnerability assessment scan to achieve a robust security model. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article has already been published on &lt;a href="https://crashtest-security.com/sql-injections/"&gt;https://crashtest-security.com/sql-injections/&lt;/a&gt; and has been authorized by Crashtest Security for a republish.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Configure HTTP security response headers for Azure Static Web Apps
</title>
      <author>Rebin</author>
      <pubDate>Mon, 06 Sep 2021 19:48:08 +0000</pubDate>
      <link>https://dev.to/rebin/configure-http-security-response-headers-for-azure-static-web-apps-2b81</link>
      <guid>https://dev.to/rebin/configure-http-security-response-headers-for-azure-static-web-apps-2b81</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;HTTP security headers is the most crucial part of the web applications that helps to protect against some variety of attacks most likely cross-site scripting, clickjacking and other script attacks, configure HTTP security headers is frequently forgotten by Developers! So, I recently checked my blog on &lt;a href="https://securityheaders.com"&gt;securityheaders.com&lt;/a&gt; and results indicated that HTTP security headers are not configured so I decided to put some HTTP security headers for my Azure Static Web Apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommended-http-security-headers"&gt;
  &lt;/a&gt;
  Recommended HTTP security headers
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Strict-Transport-Security&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content-Security-Policy&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;X-Frame-Options&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;X-Permitted-Cross-Domain-Policies&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;X-Content-Type-Options&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Permissions-Policy&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#configure-http-security-headers"&gt;
  &lt;/a&gt;
  Configure HTTP security headers
&lt;/h3&gt;

&lt;p&gt;You can create a json file called ( staticwebapp.config.json ) in the root of the web site and put the configuration like below then deploy it to your Azure Static Web App host.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"globalHeaders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"content-security-policy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"frame-ancestors 'self'; 
         upgrade-insecure-requests"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"X-Frame-Options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SAMEORIGIN"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"X-Permitted-Cross-Domain-Policies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Referrer-Policy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"no-referrer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"X-Content-Type-Options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nosniff"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Permissions-Policy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"autoplay=()"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>azure</category>
      <category>security</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How I cleared AWS Certified Cloud Practitioner</title>
      <author>Anjali Jha</author>
      <pubDate>Mon, 06 Sep 2021 19:27:16 +0000</pubDate>
      <link>https://dev.to/anjalijha22/how-i-cleared-aws-certified-cloud-practitioner-4g7a</link>
      <guid>https://dev.to/anjalijha22/how-i-cleared-aws-certified-cloud-practitioner-4g7a</guid>
      <description>&lt;p&gt;Recently I successfully passed my AWS Certified Cloud Practitioner (CLF-C01) exam. Here, I want to share my experiences, so you can judge better on why you should go for the certification, and how to prepare.&lt;/p&gt;

&lt;p&gt;I got the opportunity to write the test through SheBuilds-CloudU program run by AWS. It's an eight week self paced learning program with a very supportive and positive community of mentors and participants from all around the world. I would definitely recommend it to females trying to explore cloud. &lt;br&gt;
&lt;em&gt;To know more&lt;/em&gt;:&lt;br&gt;
&lt;a href="https://awscloudushebuildcpeapj.splashthat.com/"&gt;https://awscloudushebuildcpeapj.splashthat.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-the-certification"&gt;
  &lt;/a&gt;
  About the certification
&lt;/h3&gt;

&lt;p&gt;It gives you exposure to cloud fluency, foundational AWS knowledge and tests your basic knowledge of AWS platform.&lt;br&gt;
&lt;a href="https://aws.amazon.com/certification/certified-cloud-practitioner/"&gt;https://aws.amazon.com/certification/certified-cloud-practitioner/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-preparation"&gt;
  &lt;/a&gt;
  The preparation
&lt;/h3&gt;

&lt;p&gt;Overall, I had eight weeks from when I signed-up – to the day of the exam. This was clearly more than enough time to prepare. If you're a student like me, who has other commitments as well and whose only purpose is to clear the exam then a week of studying is enough. Nonetheless if you want to gain more exposure and knowledge, then you can avail hands-on-lab tutorials and explore AWS a lot more.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To get a raw idea about the exam and to get started, visit: 
&lt;a href="https://aws.amazon.com/training/"&gt;https://aws.amazon.com/training/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://aws.amazon.com/certification/certification-prep/"&gt;https://aws.amazon.com/certification/certification-prep/&lt;/a&gt; provides you with exam guides and sample questions which gives the idea about areas of focus in the exam. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.aws.training/Details/Curriculum?id=27076"&gt;https://www.aws.training/Details/Curriculum?id=27076&lt;/a&gt; is a free digital course provided by AWS to help clear your exam.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;According to me reading AWS whitepapers, FAQ and practicing sample questions make clearing the exam easier. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-of-the-free-resources"&gt;
  &lt;/a&gt;
  &lt;em&gt;Some of the free resources&lt;/em&gt;-
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#aws-whitepapers-amp-guides"&gt;
  &lt;/a&gt;
  AWS Whitepapers &amp;amp; Guides
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/whitepapers"&gt;https://aws.amazon.com/whitepapers&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#aws-exam-preparation-overview"&gt;
  &lt;/a&gt;
  AWS Exam Preparation Overview
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/certification/certification-prep/testing"&gt;https://aws.amazon.com/certification/certification-prep/testing&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#practice-exam"&gt;
  &lt;/a&gt;
  Practice exam
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://www.awsboy.com/aws-practice-exams/practitioner"&gt;https://www.awsboy.com/aws-practice-exams/practitioner&lt;/a&gt;&lt;br&gt;
&lt;a href="https://testoutce.com/pages/aws-certified-cloud-practitionerpractice-quiz-clf-c01-quiz-1"&gt;https://testoutce.com/pages/aws-certified-cloud-practitionerpractice-quiz-clf-c01-quiz-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope it helps!!!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Af8-zVJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8odk80sbdfms8cxuq2c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Af8-zVJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8odk80sbdfms8cxuq2c.gif" alt="pic"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
    </item>
    <item>
      <title>Coding Games</title>
      <author>Ronaldo Peres</author>
      <pubDate>Mon, 06 Sep 2021 19:26:13 +0000</pubDate>
      <link>https://dev.to/ronaldoperes/coding-games-581f</link>
      <guid>https://dev.to/ronaldoperes/coding-games-581f</guid>
      <description>&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;I just read this post below on FreeCodeCamp:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/12-free-coding-games-to-learn-programming-for-beginners/#codingame"&gt;FreeCodeCamp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I am just sharing to beginners programmers!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sites"&gt;
  &lt;/a&gt;
  Sites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codingame.com/start"&gt;Codingame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flukeout.github.io/"&gt;CSS Diner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flexboxfroggy.com/"&gt;Flexbox Froggy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.flexboxdefense.com/"&gt;Flexbox Defense&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cssgridgarden.com/"&gt;CSS Grid Garden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codecombat.com/"&gt;Code Combat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tynker.com/"&gt;Tynker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mystery.knightlab.com/"&gt;SQL Murder Mystery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexnisnevich.github.io/untrusted/"&gt;Unstrusted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://play.elevatorsaga.com/"&gt;Elevator saga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://checkio.org/"&gt;CheckiO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I already knew some of these sites, others didn't&lt;/p&gt;

&lt;p&gt;I recommend Codingame, if anyone wanna follow me there:&lt;br&gt;
&lt;a href="https://www.codingame.com/servlet/urlinvite?u=1638407"&gt;Peres at Codingame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
  </channel>
</rss>
