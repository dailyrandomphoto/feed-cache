<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I designed an abuse-resistant, fault-tolerant, zero cost, multiplayer online game</title>
      <author>Jeremy Kahn</author>
      <pubDate>Tue, 28 Dec 2021 23:47:58 +0000</pubDate>
      <link>https://dev.to/jeremyckahn/how-i-designed-an-abuse-resistant-fault-tolerant-zero-cost-multiplayer-online-game-140g</link>
      <guid>https://dev.to/jeremyckahn/how-i-designed-an-abuse-resistant-fault-tolerant-zero-cost-multiplayer-online-game-140g</guid>
      <description>&lt;p&gt;Nearly a year ago I deployed a multiplayer feature for &lt;a href="https://www.farmhand.life/"&gt;Farmhand&lt;/a&gt;, an &lt;a href="https://github.com/jeremyckahn/farmhand"&gt;open source&lt;/a&gt; and web-based farming game that I created. Since that initial deployment, the multiplayer system has experienced &lt;strong&gt;no downtime or service degradation&lt;/strong&gt;. And best of all, &lt;strong&gt;I've paid nothing&lt;/strong&gt; to host the service and therefore I am able to allow others to play for free. This article is an overview of how I designed this system from the ground up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-game"&gt;
  &lt;/a&gt;
  The game
&lt;/h2&gt;

&lt;p&gt;In short, Farmhand is a game that mixes farming and market mechanics. The goal is to buy seeds for a low price, plant and harvest them, and then sell the crops at a high price. Prices fluctuate from day-to-day, so you'll have to be smart about your buy/sell decisions.&lt;/p&gt;

&lt;p&gt;Farmhand was initially designed as a single-player game and seed/crop values were randomly generated at the start of each game day. One day I thought it would be cool to create a shared, online market that players around the world could participate in together. My vision was for one player's buy/sell decisions to affect the global market that determines the seed/crop values for all connected players.&lt;/p&gt;

&lt;p&gt;In order for this market system to be fun, it needed to be simple and reliable. I gave myself the following constraints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Zero hosting costs&lt;/strong&gt;. I'm not making money from Farmhand, so I don't want to spend money to host it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Minimal devops involvement&lt;/strong&gt;. Farmhand is just a hobby for me, and I have a day job. I don't want to be dealing with managing service outages during the work day (or the middle of the night).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fault-tolerance and abuse-resistant&lt;/strong&gt;. If you're putting a service online, expect people to abuse it. I wanted this system to not only be highly-available, but resistant to &lt;a href="https://en.wikipedia.org/wiki/Griefer"&gt;griefing&lt;/a&gt; as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end I was able to ship a fun and functional multiplayer system that adhered to all of these constraints.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tech"&gt;
  &lt;/a&gt;
  The tech
&lt;/h2&gt;

&lt;p&gt;There are a few pieces to this system:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-client"&gt;
  &lt;/a&gt;
  The client
&lt;/h3&gt;

&lt;p&gt;Farmhand is implemented as a &lt;a href="https://web.dev/progressive-web-apps/"&gt;PWA&lt;/a&gt; that runs in a web browser. The client's overall architecture is outside the scope of this article, but for the purposes of online multiplayer it uses &lt;a href="https://github.com/dmotz/trystero"&gt;Trystero&lt;/a&gt; with the &lt;a href="https://github.com/dmotz/trystero#strategy-comparison"&gt;WebTorrent matchmaking strategy&lt;/a&gt; to connect peers to each other. It interacts with the central market server via a REST API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-server"&gt;
  &lt;/a&gt;
  The server
&lt;/h3&gt;

&lt;p&gt;Farmhand's API is hosted on &lt;a href="https://vercel.com/pricing"&gt;Vercel's Hobby tier&lt;/a&gt;. Vercel provides an excellent &lt;a href="https://en.wikipedia.org/wiki/Serverless_computing"&gt;Serverless&lt;/a&gt; platform that offers scalable runtime performance, as well as static file hosting, automatic preview builds (great for testing out PRs), and more.&lt;/p&gt;

&lt;p&gt;The Vercel-based API is backed by a Redis instance for data "persistence." "Persistence" is in quotes because the data only ever lives in memory, so a system failure would result in complete data loss. However, the application logic is designed such that this kind of failure would be a &lt;strong&gt;feature&lt;/strong&gt; and not a bug. The Redis instance is hosted on &lt;a href="https://redis.com/redis-enterprise-cloud/pricing/"&gt;Redis Labs' free tier&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Farmhand, both Vercel and Redis Labs are configured to run in AWS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#system-architecture"&gt;
  &lt;/a&gt;
  System architecture
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nZMPVQE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irjruka4kas61u2d619f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nZMPVQE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irjruka4kas61u2d619f.png" alt="Farmhand System Design" width="880" height="581"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At any given time, a player can go to &lt;a href="https://www.farmhand.life/"&gt;https://www.farmhand.life/&lt;/a&gt;, switch the "Play online" toggle and join a room of their choosing (&lt;code&gt;global&lt;/code&gt; by default). When this happens, two things occur:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A request is made to &lt;code&gt;GET https://farmhand.vercel.app/api/get-market-data?room=global&lt;/code&gt;, which is a Serverless function. This retrieves the latest market data and also informs the server of the player's presence. This request is repeated to serve as a heartbeat until the player leaves the room to maintain an "active" session with the API.&lt;/li&gt;
&lt;li&gt;A WebSocket connection to a WebTorrent tracker is made. The tracker then connects the client to any other clients in the requested room. The peer-to-peer connection is persistent until the player leaves the room. This complexity is abstracted away via Trystero.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The API manages room data that is stored in Redis. When &lt;a href="https://github.com/jeremyckahn/farmhand/blob/d2953b195d4d1470eb3dbce84ea04d057e524614/api/get-market-data.js#L25-L69"&gt;a &lt;code&gt;GET https://farmhand.vercel.app/api/get-market-data?room=global&lt;/code&gt; request&lt;/a&gt; is made, the API checks to see if a value associated with the key &lt;code&gt;room-global&lt;/code&gt; exists. &lt;a href="https://github.com/jeremyckahn/farmhand/blob/d2953b195d4d1470eb3dbce84ea04d057e524614/api-etc/utils.js#L29-L40"&gt;If not, it is initialized&lt;/a&gt;. Here's an example of a room object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"activePlayers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"4a793fe2-9eb1-4041-935b-5caf55177dde"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1640727668293&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"58f90cc1-1089-4394-a7e7-2f079f87ed4d"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1640727669934&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"b26b2d59-79f5-40f3-bc91-cfc0554bb994"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1640727674791&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"d1e34686-925e-4344-b7cb-e15ce6d7dad3"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1640727667860&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"valueAdjustments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"asparagus"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.6798235686529905&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"asparagus-seed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.9797840434970977&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"carrot"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.5382522777963925&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"carrot-seed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.1233740954422615&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"corn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.1524067154896047&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"corn-seed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.2309158460921086&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;activePlayers&lt;/code&gt; is a map of unique player IDs (determined by clients via &lt;a href="https://github.com/uuidjs/uuid"&gt;uuid&lt;/a&gt; to timestamps of when they last made a &lt;code&gt;GET https://farmhand.vercel.app/api/get-market-data?room=global&lt;/code&gt; request. Each time the function is invoked, it examines the map to see which timestamps are older than the &lt;a href="https://github.com/jeremyckahn/farmhand/blob/d2953b195d4d1470eb3dbce84ea04d057e524614/src/common/constants.js#L3"&gt;&lt;code&gt;HEARTBEAT_INTERVAL_PERIOD&lt;/code&gt;&lt;/a&gt; (currently 10 seconds) and deletes any that are expired. This data is returned to the client and also written back to Redis to be persisted across function invocations. This is how the active room participants are tracked.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;valueAdjustments&lt;/code&gt; is the current state of the room's market. The map's keys refer to an item ID in the game and the values represent their respective in-game market value. Market values are bound between &lt;code&gt;0.5&lt;/code&gt; and &lt;code&gt;1.5&lt;/code&gt; and go up or down based on individual player activity. When a player ends their in-game day, an API request to &lt;code&gt;POST https://farmhand.vercel.app/api/post-day-results&lt;/code&gt; is made with a payload that looks something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"positions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"carrot-seed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"room"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"global"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;positions&lt;/code&gt; represents all the items that the player either increased or decreased inventory of in their most recent in-game day. &lt;code&gt;1&lt;/code&gt; means that they increased their inventory of the associated item ID (either by buying seeds or harvesting crops), which increases the item's market value. &lt;code&gt;-1&lt;/code&gt; means they decreased their inventory (typically by selling the item), which decreases the item's market value. &lt;a href="https://github.com/jeremyckahn/farmhand/blob/ea40a1e364dbbd87a46494ccb87e6a1f750c17aa/api/post-day-results.js#L28-L56"&gt;Here's the source&lt;/a&gt; for that logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;applyPositionsToMarket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valueAdjustments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valueAdjustments&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;itemPositionChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;positions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;variance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.2&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MAX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemPositionChange&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MAX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;variance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemPositionChange&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;variance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cm"&gt;/* itemPositionChange == 0 */&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If item value is at a range boundary but was not changed in this&lt;/span&gt;
        &lt;span class="c1"&gt;// operation, randomize it to introduce some variability to the market.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;MAX&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;MIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;MIN&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;valueAdjustments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The updated market data is again persisted back to Redis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abuse-mitigation"&gt;
  &lt;/a&gt;
  Abuse mitigation
&lt;/h2&gt;

&lt;p&gt;One of the nice things about this server-side logic is that it naturally mitigates abuse. There is nothing stopping people from crafting custom &lt;code&gt;POST https://farmhand.vercel.app/api/post-day-results&lt;/code&gt; requests to manipulate the market however they want. However, once the adjusted value for any given item reaches the upper or lower bound (&lt;code&gt;1.5&lt;/code&gt; or &lt;code&gt;0.5&lt;/code&gt;, respectively), the item's value is randomized within those bounds. So while nefarious people can manipulate the market, it will reset itself and balance out before long. Even in those cases, it only presents as normal (if somewhat volatile) market dynamics to players.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fault-tolerance"&gt;
  &lt;/a&gt;
  Fault tolerance
&lt;/h2&gt;

&lt;p&gt;Farmhand room data is only stored in memory via Redis and never written to a disk. Because of this, it is inherently ephemeral. The worst case scenario with this design is that room data gets lost either due to the Redis server shutting down or something like a &lt;a href="https://redis.io/commands/flushall"&gt;&lt;code&gt;FLUSHALL&lt;/code&gt;&lt;/a&gt; command being issued. However, since &lt;a href="https://github.com/jeremyckahn/farmhand/blob/d2953b195d4d1470eb3dbce84ea04d057e524614/api-etc/utils.js#L29-L40"&gt;the API initializes requested room data that doesn't already exist&lt;/a&gt;, this would only present to the user as a bit of market volatility that would likely go unnoticed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#peertopeer-interaction"&gt;
  &lt;/a&gt;
  Peer-to-peer interaction
&lt;/h2&gt;

&lt;p&gt;The Vercel-based API effectively manages the shared market data, but I wanted players to have a sense of who else is playing with them and how they are affecting the experience for everyone else. This is where the peer-to-peer communication comes into play.&lt;/p&gt;

&lt;p&gt;Instead of a server and logic to act as a broker between clients, they connect to each other directly via Trystero and WebTorrent as explained previously. As players perform various actions such as buying or selling items, messages are broadcast to all connected peers to display in the "Active Players" modal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I7ylo5Hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnpe69wy9g0rplgkryxn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7ylo5Hw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnpe69wy9g0rplgkryxn.png" alt="Farmhand active players" width="456" height="728"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In an effort to mitigate abuse, player names are the result of &lt;a href="https://github.com/jeremyckahn/farmhand/blob/ea40a1e364dbbd87a46494ccb87e6a1f750c17aa/src/utils.js#L1007-L1021"&gt;a simple hashing algorithm based on player IDs&lt;/a&gt; (which are stable).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPlayerName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;playerId&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;playerIdNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;playerId&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adjective&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;adjectives&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;playerIdNumber&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;adjectives&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adjectiveNumberValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;adjective&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charCodeAt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;animalNames&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;playerIdNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;adjectiveNumberValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;animalNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;adjective&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#retrospective-analysis"&gt;
  &lt;/a&gt;
  Retrospective analysis
&lt;/h2&gt;

&lt;p&gt;This system has been effective so far. Vercel and Redis Labs have provided excellent performance and availability since this system launched nearly a year ago, which is impressive given that I'm using the free tier of both services. The fault-tolerance and abuse mitigation measures have resulted in the minimal maintenance burden I was hoping to achieve. The only manual intervention that's been required from me so far to keep things running is having to log into Redis Labs every couple of months to indicate that my account is still active.&lt;/p&gt;

&lt;p&gt;I'm quite pleased with how this multiplayer system has turned out so far. I'd like to expand on Farmhand's multiplayer features and further develop its online market mechanics. I'd like to know what others think as well, as I've never designed a full stack system before this and I would like to learn how it can be improved. Let me know what you think via the comments below! And if you're up for some easygoing farming fun, &lt;a href="https://www.farmhand.life/"&gt;give Farmhand a try&lt;/a&gt; sometime. 🙂&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>gamedev</category>
      <category>architecture</category>
      <category>serverless</category>
    </item>
    <item>
      <title>The Origin of the Programming "Paradigm" by the Combination of Enum Functions and Pipeline Operators</title>
      <author>Susumu Yamazaki</author>
      <pubDate>Tue, 28 Dec 2021 22:56:11 +0000</pubDate>
      <link>https://dev.to/zacky1972/the-origin-of-the-programming-paradigm-come-from-the-combination-of-enum-functions-and-pipeline-operators-4mc6</link>
      <guid>https://dev.to/zacky1972/the-origin-of-the-programming-paradigm-come-from-the-combination-of-enum-functions-and-pipeline-operators-4mc6</guid>
      <description>&lt;p&gt;Interviewee: José Valim, the creator of Elixir, Chief Adoption Officer at Dashbit;&lt;br&gt;
Interviewer: Susumu Yamazaki, an associate professor at Univ. of Kitakyushu, an organizer of ElixirConf JP.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita.com/zacky1972/items/2dc7c4930f6ab8a4688a"&gt;Japanese Translation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dec-17-2021-to-jos%C3%A9-valim"&gt;
  &lt;/a&gt;
  Dec. 17, 2021. To: José Valim
&lt;/h2&gt;

&lt;p&gt;Hi, José,&lt;/p&gt;

&lt;p&gt;Masakazu Mori (He made a presentation at ElixirConf US 2021 [1]) and I lecture the course "Programming Theory" at the University of Kitakyushu, including the mainstream programming paradigms: imperative programming, OOP, and functional programming, relating to the history of the architecture of the computer systems. Of course, one of the course's main topics is "Why Elixir?". In Programming Elixir [2], Dave Thomas said, "I don't want to hide data. I want to transform it." I identified this consideration as a new programming paradigm instead of functional programming: &lt;strong&gt;The data transformation paradigm.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, I want to interview you about the history of what you consider about designing Elixir by email, including this topic. I plan to edit and publish this interview as one of the 10th-anniversary articles of the foundation of Elixir.&lt;/p&gt;

&lt;p&gt;[1] Masakazu Mori: &lt;em&gt;Live coding a membership site in 20min by Phoenix and &lt;code&gt;phx_gen_auth&lt;/code&gt;&lt;/em&gt;, ElixirConf 2021. The movie is available at &lt;a href="https://youtu.be/t5TT0-mI2O4"&gt;https://youtu.be/t5TT0-mI2O4&lt;/a&gt;&lt;br&gt;
[2] Dave Thomas: &lt;em&gt;Programming Elixir 1.6: Functional &lt;code&gt;|&amp;gt;&lt;/code&gt; Concurrent &lt;code&gt;|&amp;gt;&lt;/code&gt; Pragmatic &lt;code&gt;|&amp;gt;&lt;/code&gt; Fun&lt;/em&gt;, 2nd edition, The Pragmatic Bookshelf, 2018. &lt;a href="https://pragprog.com/titles/elixir16/programming-elixir-1-6/"&gt;https://pragprog.com/titles/elixir16/programming-elixir-1-6/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, an essential feature of Elixir, which brings a base to the data transformation, is a combination of &lt;code&gt;Enum&lt;/code&gt; functions and pipeline operators. As you know, this brings intense pleasure to programming! In fact, it is one of the reasons that someone chooses Elixir. However, the first version of Elixir 10 years ago is not functional but object-oriented. Then, I guess your first ideation of Elixir may not include such a concept towards data transformation. So, my first question is about your consideration process towards the feature: &lt;strong&gt;When did you form the idea, and what brought it?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: José said that Elixir was on born May 24, 2012.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#dec-28-2021-from-jos%C3%A9-valim"&gt;
  &lt;/a&gt;
  Dec. 28, 2021. From: José Valim
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;When did you form the idea, and what brought it?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don't think there was one specific moment when the idea was formed. Rather, it was the exposure to several ideas and concepts that slowly unraveled Object Orientation. One of such moments was a talk by Rich Hickey, the creator of Clojure, called &lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Simple Made Easy&lt;/a&gt;. The other one was while reading a book called &lt;a href="https://mitpress.mit.edu/books/concepts-techniques-and-models-computer-programming"&gt;"Concepts, Techniques, and Models of Computer Programming", by Peter Van Roy and Seif Haridi.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the book, they build a programming language by introducing new concepts and their benefits one by one. When it comes to Object Orientation, they argue that Object Orientation is nothing more than syntax sugar for dispatching to a known module. For example, if you have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the same as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see Object Orientation as syntax sugar, you have to answer the question: is the syntax sugar worth it? The trouble with this syntax sugar (and Object Orientation) is that it couples state and behaviour. The state (car) can only be handled by a given entity (the class Car). This is often sold as a feature but the truth is that developers spend a lot of time trying to undo or reason about this coupling. The need for inheritance, for example, is caused directly by this coupling. However, introducing inheritance brought its own issues, leading languages to introduce concepts such as multiple inheritance (mixins), open-classes (monkey patching), etc. All with their own flaws too!&lt;/p&gt;

&lt;p&gt;The other part of the puzzle is that functional programming has shown the complexity of a software is not in its computations and algorithms. If the system has no shared state, if the system has no side-effects, it becomes much easier for both humans and compilers to reason about your code. Therefore, by encapsulating state, objects have taught us to hide the complex parts of our system. Not only that, we often split this state into several objects, which makes understanding and visualizing how our applications work very hard!&lt;/p&gt;

&lt;p&gt;Finally, the industry has learned something that was known in academy for decades: the properties that are positively associated to Object Orientation, such as encapsulation, abstraction, and polymorphism, are not actually specific to objects, and can be leveraged, sometimes even with more success, in other paradigms.&lt;/p&gt;

&lt;p&gt;So, going back to our original questions: is this syntax sugar worth it? Is object orientation worth it? The answer to me is a clear no, the downsides are many more than the upsides. And, without objects, all we have is state (data) and functions (transformations), as separate entities. The Elixir programming modal comes as a direct consequence of it.&lt;/p&gt;

&lt;p&gt;Elixir also provides the pipeline operator, which can also be seen as syntax sugar. It transforms this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frequencies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphemes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Elixir"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="s2"&gt;"Elixir"&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graphemes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frequencies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In some sense, it can be seen as the "." in Object Oriented languages, but without the coupling of the state and the behaviour. The state, in this case it starts as the "Elixir" string, can be sent to any behaviour that accepts the string type.&lt;/p&gt;

</description>
      <category>elixir</category>
    </item>
    <item>
      <title>Log4j 2.17.0 に関わる新たな RCE 脆弱性 (CVE-2021-4483)</title>
      <author>Heddi Nabbisen</author>
      <pubDate>Tue, 28 Dec 2021 22:40:42 +0000</pubDate>
      <link>https://dev.to/nabbisen/log4j-2170-niguan-waruxin-tana-rce-cui-ruo-xing-cve-2021-4483-43n6</link>
      <guid>https://dev.to/nabbisen/log4j-2170-niguan-waruxin-tana-rce-cui-ruo-xing-cve-2021-4483-43n6</guid>
      <description>&lt;p&gt;&lt;a href="https://logging.apache.org/log4j/2.x/"&gt;Log4j&lt;/a&gt; 2.17.1 がリリースされました。新たな RCE 脆弱性が発見されたためです。(&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44832"&gt;CVE-2021-4483&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;Apache ソフトウェア財団 によると&lt;/a&gt;、CVSS は 6.6 で深刻度は中程度です。&lt;/p&gt;

&lt;p&gt;攻撃者がログ設定ファイルの編集権限を有する場合に、危険があります。&lt;/p&gt;




&lt;p&gt;本記事は&lt;a href="https://twitter.com/scqrinc/status/1475957703545856001"&gt;小社のツイート&lt;/a&gt;をもとにしています。&lt;/p&gt;

</description>
      <category>log4j</category>
      <category>security</category>
      <category>vulnerability</category>
      <category>cve</category>
    </item>
    <item>
      <title>A new RCE vulnerability on Log4j 2.17.0 (CVE-2021-4483)</title>
      <author>Heddi Nabbisen</author>
      <pubDate>Tue, 28 Dec 2021 22:36:48 +0000</pubDate>
      <link>https://dev.to/nabbisen/a-new-rce-vulnerability-on-log4j-2170-cve-2021-4483-3pme</link>
      <guid>https://dev.to/nabbisen/a-new-rce-vulnerability-on-log4j-2170-cve-2021-4483-3pme</guid>
      <description>&lt;p&gt;&lt;a href="https://logging.apache.org/log4j/2.x/"&gt;Log4j&lt;/a&gt; 2.17.1 was released because a new vulnerability on RCE (Remote Code Execution) had been found in 2.17.0. (&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44832"&gt;CVE-2021-4483&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logging.apache.org/log4j/2.x/security.html"&gt;According to The Apache Software Founndation&lt;/a&gt;, CVSS is 6.6 and the severity is moderate.&lt;/p&gt;

&lt;p&gt;There is the risk when an attacker has the permission to modify the logging configuration file.&lt;/p&gt;




&lt;p&gt;This post is based on &lt;a href="https://twitter.com/scqrinc/status/1475957089738850309"&gt;the tweet by my company&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>log4j</category>
      <category>security</category>
      <category>vulnerability</category>
      <category>cve</category>
    </item>
    <item>
      <title>Serve html from your command line</title>
      <author>Waylon Walker</author>
      <pubDate>Tue, 28 Dec 2021 21:50:07 +0000</pubDate>
      <link>https://dev.to/waylonwalker/serve-html-from-your-command-line-ch4</link>
      <guid>https://dev.to/waylonwalker/serve-html-from-your-command-line-ch4</guid>
      <description>&lt;p&gt;When I first moved to vim from and ide like vscode or sublime text one of my very first issues was trying to preview my website at &lt;code&gt;localhost:8000&lt;/code&gt;.  There had always just been a button there to do it in all of my other editors, not vim.  There are not many buttons for anything in vim.  While there is probably a plugin that can run a webserver for me in vim, it's not necessary, we just need the command line we are already in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-a-separate-process"&gt;
  &lt;/a&gt;
  running a separate process
&lt;/h2&gt;

&lt;p&gt;You will need a way to run another process alongside vim, here are a couple ideas to get you going that are not the focus here.style&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use background jobs

&lt;ul&gt;
&lt;li&gt;c-z to send a job to the background&lt;/li&gt;
&lt;li&gt;fg to bring it back&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;use a second terminal&lt;/li&gt;
&lt;li&gt;use a second tab&lt;/li&gt;
&lt;li&gt;use tmux and run it in a separate split/window&lt;/li&gt;
&lt;li&gt;use an embeded nvim terminal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#running-a-development-webserver-from-the-command-line"&gt;
  &lt;/a&gt;
  running a development webserver from the command line
&lt;/h2&gt;

&lt;p&gt;Python already exists on most linux systems by default, and most are now on python3.  If you are on windows typing python will take you directly to the windows store to install it, or you can also use wsl.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# python3&lt;/span&gt;
python &lt;span class="nt"&gt;-m&lt;/span&gt; http.server

&lt;span class="c"&gt;# running on port 5000&lt;/span&gt;
python &lt;span class="nt"&gt;-m&lt;/span&gt; http.server &lt;span class="nt"&gt;--directory&lt;/span&gt; markout 5000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# for the low chance you are on python2
python -m SimpleHTTPServer

# running on port 5000
python -m SimpleHTTPServer 5000
python -m SimpleHTTPServer --directory markout 5000

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zhtI7zrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/python-m-http-server.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zhtI7zrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/python-m-http-server.png" alt="running a python static webserver from the command line" width="863" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-nodejs"&gt;
  &lt;/a&gt;
  using nodejs
&lt;/h2&gt;

&lt;p&gt;If you are a web developer it's likely that you need nodejs and npm on your system anyways and may want to use one of the servers from npm.  I'll admit with these not being tied to the long term support of a language they are much more feature rich with things like compression out of the box.  In my opinion they are nice things that you would want out of a production server, but may not be necessary for development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-npx"&gt;
  &lt;/a&gt;
  installing npx
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# if you don't alredy have npx&lt;/span&gt;
npm i &lt;span class="nt"&gt;-g&lt;/span&gt; npx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;npx is a handy tool that lets you run command line applications straight from npm without installing them.  It pulls the latest version every time you want to run, then executes it without it being installed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#running-the-httpserver-with-npx"&gt;
  &lt;/a&gt;
  running the http-server with npx
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx http-server

&lt;span class="c"&gt;# running on port 5000&lt;/span&gt;
npx http-server &lt;span class="nt"&gt;-p&lt;/span&gt; 5000
npx http-server markout &lt;span class="nt"&gt;-p&lt;/span&gt; 5000

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9elCDNnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/npx-http-server.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9elCDNnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.waylonwalker.com/npx-http-server.png" alt="running a nodejs static webserver from the command line" width="656" height="501"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#til"&gt;
  &lt;/a&gt;
  TIL
&lt;/h2&gt;

&lt;p&gt;I am shortening up my content pipeline by releasing short #til articles The full list of them is posted on my website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://waylonwalker.com/til"&gt;https://waylonwalker.com/til&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect"&gt;
  &lt;/a&gt;
  connect
&lt;/h2&gt;

&lt;p&gt;twitter: &lt;a href="https://twitter.com/_WaylonWalker"&gt;https://twitter.com/_WaylonWalker&lt;/a&gt;&lt;br&gt;
twitch: &lt;a href="https://www.twitch.tv/waylonwalker"&gt;https://www.twitch.tv/waylonwalker&lt;/a&gt;&lt;br&gt;
github: &lt;a href="https://github.com/waylonwalker/"&gt;https://github.com/waylonwalker/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vim</category>
      <category>linux</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Como emular um iOS no Linux utilizando Docker</title>
      <author>Iaan Mesquita</author>
      <pubDate>Tue, 28 Dec 2021 21:47:12 +0000</pubDate>
      <link>https://dev.to/ianito/como-emular-um-ios-no-linux-utilizando-docker-3l75</link>
      <guid>https://dev.to/ianito/como-emular-um-ios-no-linux-utilizando-docker-3l75</guid>
      <description>&lt;p&gt;Depois de várias tentativas sem sucesso, enfim consegui virtualizar um macOS para fazer testes em um aplicativo iOS no qual eu estava trabalhando.&lt;/p&gt;

&lt;p&gt;Mas antes de continuar, é necessário saber que essa não é uma solução estável e possue diversos problemas de desempenho, porém, para meu propósito consegui fazer o que queria.&lt;/p&gt;

&lt;p&gt;Nós utilizaremos o QEMU para emular um macOS e dentro dele, utilizaremos o xCode para emular um iOS, só nisso você já consegue perceber que não vai ser uma coisa leve.&lt;/p&gt;

&lt;p&gt;O repositório no github do &lt;a href="https://github.com/sickcodes/Docker-OSX"&gt;Docker OSX&lt;/a&gt; tem uma explicação de como usar um iPhone via usb ao invés de emular, mas eu não tenho iPhone :p&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sum%C3%A1rio"&gt;
  &lt;/a&gt;
  Sumário
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#o-que-%C3%A9-o-docker-osx"&gt;O que é o Docker OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#minhas-especifica%C3%A7%C3%B5es-de-hardware"&gt;Especificações de hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#instala%C3%A7%C3%A3o"&gt;Instalação&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rodando-um-app-com-react-native"&gt;Rodando um app com React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rodando-um-app-com-cordova"&gt;Rodando um app com Cordova&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#criando-uma-conex%C3%A3o-de-pastas-utilizando-o-sshfs"&gt;Criando uma conexão de pastas utilizando o sshfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;Considerações finais&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-o-docker-osx"&gt;
  &lt;/a&gt;
  O que é o Docker OSX
&lt;/h2&gt;

&lt;p&gt;O Docker OSX é uma docker image que utiliza por debaixo dos panos o QEMU para que possamos emular um sistema operacional.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Leia mais: &lt;a href="https://stack.desenvolvedor.expert/appendix/docker/oquee.html"&gt;O que é docker?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minhas-especifica%C3%A7%C3%B5es-de-hardware"&gt;
  &lt;/a&gt;
  Minhas especificações de hardware
&lt;/h2&gt;

&lt;p&gt;As especificações do meu computador são consideradas OK pra fazer isso, porém, ainda consegui perceber algumas engasgadas enquanto utilizava o Docker OSX + xCode + Visual Studio Code + Dev Server. (Consegui até aquecer meu quarto com esse tanto de coisa.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;OS:&lt;/strong&gt; Manjaro Linux x86_64 &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Kernel:&lt;/strong&gt; 4.19.220-1-MANJARO &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Shell:&lt;/strong&gt; zsh 5.8 &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resolution:&lt;/strong&gt; 1440x900&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DE:&lt;/strong&gt; GNOME 41.2 &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;WM:&lt;/strong&gt; Mutter &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;WM Theme:&lt;/strong&gt; Orchis-orange-compact &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Icons:&lt;/strong&gt; Win11-purple-dark [GTK2/3] &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Terminal:&lt;/strong&gt; gnome-terminal &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CPU:&lt;/strong&gt; Intel i7-3770 (8) @ 3.900GHz &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GPU:&lt;/strong&gt; NVIDIA GeForce GTX 1050 Ti &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memory:&lt;/strong&gt; 4105MiB / 15985MiB &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SSD:&lt;/strong&gt; Crucial BX500 240gb (Altamente recomendado um SSD)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#instala%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Instalação
&lt;/h2&gt;

&lt;p&gt;Primeiramente, é necessário ter o docker instalado no seu computador. No meu caso eu utilizo Manjaro, então basta abrir o terminal e digitar:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação docker&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;pacman -S docker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ativando os serviços do docker&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;systemctl start docker.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ativando os serviços do docker para iniciar junto com o sistema&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;systemctl enable docker.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testando o docker:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker run hello-world&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Xaqj_-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgj3c3zue8x13y0tps7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Xaqj_-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xgj3c3zue8x13y0tps7c.png" alt="Docker run hello-world" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Certo, agora iremos baixar a imagem e executa-la utilizando o comando abaixo:&lt;br&gt;
&lt;code&gt;docker run -it --device /dev/kvm -p 50922:10022 -e DEVICE_MODEL="iMacPro1,1" -e WIDTH=1440 -e HEIGHT=900 -e RAM=8 -e INTERNAL_SSH_PORT=23     -e AUDIO_DRIVER=alsa -e CORES=2 -v /tmp/.X11-unix:/tmp/.X11-unix -e "DISPLAY=${DISPLAY:-:0.0}"  -e GENERATE_UNIQUE=true  -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist sickcodes/docker-osx:big-sur&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Você pode conferir o que cada flag significa olhando o repositório no &lt;a href="https://github.com/sickcodes/Docker-OSX"&gt;github do docker osx&lt;/a&gt;, mas resumidamente, especifiquei a resolução, memória ram, cores do processador, versão big-sur do macOS e etc.&lt;/p&gt;

&lt;p&gt;Em seguida, ele irá baixar a imagem e executar.&lt;/p&gt;

&lt;p&gt;Quando abrir o emulador, de enter na opção &lt;code&gt;macOS Base System&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TlFdf8Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fubit7hhx6x50d4rynwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TlFdf8Aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fubit7hhx6x50d4rynwe.png" alt="Emulador Docker OSX" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quando carregar o sistema, clicaremos em &lt;code&gt;Disk Utility&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tdkFod8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5ksa4x7piwfsj4qe291.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tdkFod8R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5ksa4x7piwfsj4qe291.png" alt="Emulador Docker OSX" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora, procuraremos a partição que está com mais espaço de armazenamento e clicaremos na opção &lt;code&gt;Erase&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jb5wbvFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irj97wizelw0hbfoamql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jb5wbvFA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irj97wizelw0hbfoamql.png" alt="Docker OSX apagando sistema" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para formatar é preciso que as opções estejam estritamentes iguais a esta:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4a_4IFwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drf8gki6wway416rb85h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4a_4IFwh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drf8gki6wway416rb85h.png" alt="Formatação opções" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clique em &lt;code&gt;Erase&lt;/code&gt;, aguarde e pode fechar a janela do Disk Utility. &lt;/p&gt;

&lt;p&gt;Em seguida, iremos em &lt;code&gt;Reinstall macOS Big Sur&lt;/code&gt; aceitamos os termos, selecionamos a partição que acabamos de criar &lt;code&gt;macOS&lt;/code&gt; e nisso, ele começará a instação do sistema. (Esse processo geralmente leva 30min ~ 1h). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AIYydlCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd67yhek2mjer3bkm1h5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AIYydlCD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd67yhek2mjer3bkm1h5.png" alt="Docker OSX Instalação" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aguardado esse tempo, o sistema deve reiniciar (ou não), no meu caso, eu tive que fazer isso de forma manual pois ele não reiniciou. Nesse caso, feche a janela do QEMU.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gO0tFS4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44eandfh00uh6swzrc0k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gO0tFS4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44eandfh00uh6swzrc0k.png" alt="Qemu error" width="880" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Novamente no terminal, digitaremos:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker ps -a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para saber qual o ID do nosso container, e em seguida iremos inicia-lo com:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker start ID&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RWpujTQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0ythg12xpdnf5x9zhls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWpujTQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0ythg12xpdnf5x9zhls.png" alt="Docker IDS" width="880" height="70"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selecione o &lt;code&gt;macOS Installer&lt;/code&gt; e deixe que a instalação continue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6OacQF7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq39lesxjerdba85w41k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6OacQF7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq39lesxjerdba85w41k.png" alt="Docker OSX Instalação" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após o processo, ele irá reiniciar automaticamente (ou não), sendo assim, feche novamente o emulador e dê start no container mais uma vez.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tD2mHb9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe5lk5aq4xzw55j0afwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tD2mHb9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe5lk5aq4xzw55j0afwj.png" alt="Docker OSX Instalação" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ao iniciar, novamente selecione a opção &lt;code&gt;macOS Installer&lt;/code&gt; e aguarde o processo terminar, feito isso ele irá reiniciar. (Agora é verdade).&lt;/p&gt;

&lt;p&gt;Nosso macOS foi instalado, com isso, vamos selecionar a opção &lt;code&gt;macOS&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_7juyzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkzdtw9jozj91gi66v2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_7juyzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wkzdtw9jozj91gi66v2f.png" alt="Docker OSX Inicialização" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, irá reiniciar novamente e você selecione a mesma opção &lt;code&gt;macOS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Show, nossa tela de bem vindo apareceu. Essa parte é bastante lenta, mas após isso irá ficar normal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RS2rsYRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/up2vajvs9p2l8g1vq39f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RS2rsYRS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/up2vajvs9p2l8g1vq39f.png" alt="Tela de bem vindo macOS" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Configure a sua maneira, mas não faça login no AppleID agora.&lt;/p&gt;

&lt;p&gt;Após esse processo, nossa área de trabalho aparecerá e então iremos aguardar até a dock aparecer, pois após isso o sistema fica mais fluído.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---pVNfn4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydprxzwqrnyp88tht3hf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---pVNfn4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydprxzwqrnyp88tht3hf.png" alt="Tela de instalação mac OS Sem dock" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3sqeiPjX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoucf5ea5kl7r8cd2zr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3sqeiPjX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xoucf5ea5kl7r8cd2zr4.png" alt="Tela de instalação mac OS Com dock" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora iremos utilizar o gerenciador &lt;code&gt;brew&lt;/code&gt; para instalar as coisas mais rapidamente.&lt;/p&gt;

&lt;p&gt;Abra o terminal no macOS e instale o brew com o comando:&lt;br&gt;
&lt;code&gt;/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Irá pedir sua senha definida anteriormente para instalar.&lt;/p&gt;

&lt;p&gt;Agora iremos instalar o &lt;code&gt;xcode&lt;/code&gt; na apple store.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c-Mp2I6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrchopyo4u207fyou05a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c-Mp2I6---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrchopyo4u207fyou05a.png" alt="Apple store xcode" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora sim, podemos fazer o login da nossa conta AppleID. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6jI1pDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elma6mfjd6us7pst5y0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6jI1pDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elma6mfjd6us7pst5y0l.png" alt="Login apple store" width="880" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, aguarde a instalação. &lt;br&gt;
Em seguida, abra o xcode e aceite os termos e aguarde instalar as dependências.&lt;/p&gt;

&lt;p&gt;Em seguida, vá em &lt;code&gt;Preferences -&amp;gt; Locations -&amp;gt; Command-Line Tools&lt;/code&gt; vai estar vazio, selecione a opção com a versão do xcode.&lt;/p&gt;

&lt;p&gt;Quando a instalação terminar, abriremos o terminal novamente e instalaremos o cocoapods. Ele serve como um gerenciador de dependências do xCode.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install cocoapods&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, nosso macOS está instalado e configurado para rodar os projetos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rodando-um-app-com-react-native"&gt;
  &lt;/a&gt;
  Rodando um app com React Native
&lt;/h2&gt;

&lt;p&gt;Vamos rodar um hello world do React Native para ver se está tudo certo, lembrando que não irei testar o android somente o iOS.&lt;/p&gt;

&lt;p&gt;Abra o terminal&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação no node:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;brew install node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do yarn (opcional):&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install -g yarn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criando um projeto react native:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npx react-native init teste&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Se pedir pra instalar o cocoapods novamente, selecione a opção com brew.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrando no diretório do react native:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd teste&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrando no diretório do ios:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalando as dependências:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;pod install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voltando para o diretório raiz:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd ..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listando os simuladores disponíveis:&lt;/strong&gt; (Opcional)&lt;br&gt;
&lt;code&gt;xcrun simctl list devices&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rodando o projeto utilizando xcode:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npx react-native run-ios --simulator="iPhone 13"&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kEMfg3IE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq34wwlfr17dubmhcy4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kEMfg3IE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jq34wwlfr17dubmhcy4s.png" alt="App rodando react native" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para uma experiência melhor, veja a seção: &lt;a href="#criando-uma-conex%C3%A3o-de-pastas-utilizando-o-sshfs"&gt;Criando uma conexão de pastas utilizando o sshfs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rodando-um-app-com-cordova"&gt;
  &lt;/a&gt;
  Rodando um app com Cordova
&lt;/h2&gt;

&lt;p&gt;Vamos rodar um hello world do Quasar para ver se está tudo certo, lembrando que não irei testar o android somente o iOS.&lt;/p&gt;

&lt;p&gt;Lembrando que o Quasar usa o Cordova/Capacitor pro iOS e Android.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação no node:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;brew install node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do yarn (opcional):&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;npm install -g yarn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do quasar:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yarn global add @quasar/cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do cordova:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yarn global add cordova&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criando um projeto com Quasar-CLI:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;quasar create teste&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrando no diretório do projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd teste&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adicionando cordova ao projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;quasar mode add cordova&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entrar no diretório do cordova:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd src-cordova&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adicionar o iOS ao projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cordova platform add ios&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Verificar se está tudo certo:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cordova requirements&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listar emuladores disponíveis:&lt;/strong&gt; (Opcional)&lt;br&gt;
&lt;code&gt;cordova emulate iOS --list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalar as dependências do projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voltar ao diretório raiz:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;cd ..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalar as dependências do projeto:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;yarn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rodar o quasar no modo desenvolvimento ioS:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;quasar dev -m iOS -e "iPhone 8, 15.2"&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--peEzskTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjoyvlx1pl9u41n9jy15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--peEzskTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjoyvlx1pl9u41n9jy15.png" alt="macOS quasar" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para uma experiência melhor, veja a seção: &lt;a href="#criando-uma-conex%C3%A3o-de-pastas-utilizando-o-sshfs"&gt;Criando uma conexão de pastas utilizando o sshfs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-uma-conex%C3%A3o-de-pastas-utilizando-o-sshfs"&gt;
  &lt;/a&gt;
  Criando uma conexão de pastas utilizando o sshfs
&lt;/h2&gt;

&lt;p&gt;Agora que fizemos tudo e nosso app já está rodando no macOS, temos um problema: Abrir nosso editor de código ou IDE dentro do macOS é uma experiência muito ruim por causa da lentidão, glitches, mapping do teclado e etc. Dessa forma, eu pesquisei uma solução para criar uma conexão de arquivos utilizando o SSH.&lt;/p&gt;

&lt;p&gt;Ou seja, eu posso abrir o servidor de desenvolvimento dentro do macOS e criar uma conexão em que eu possa alterar os arquivos direto do meu linux ou do macOS, de forma que atualize em ambos os lados, como uma via dupla. Isso nos garante tirar o proveito de algumas coisas que existem no modo desenvolvimento, como o fast refresh.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conex%C3%A3o-do-linux-para-o-mac"&gt;
  &lt;/a&gt;
  Conexão do Linux para o Mac
&lt;/h3&gt;

&lt;p&gt;Primeiramente, precisamos permitir a conexão via ssh por login no mac. Para isso, abriremos o terminal e digitaremos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para abrir editar o arquivo de configuração do ssh:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Busque por &lt;code&gt;PasswordAuthentication&lt;/code&gt; e coloque a configuração como &lt;code&gt;yes&lt;/code&gt; e remova o &lt;code&gt;#&lt;/code&gt; no começo da linha.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQHermMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqms7coe0l4xwdga0j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQHermMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqms7coe0l4xwdga0j1.png" alt="Configuração sshd" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Salve o arquivo.&lt;br&gt;
Vá para em &lt;code&gt;System Preferences -&amp;gt; Sharing -&amp;gt; Remote Login&lt;/code&gt; e ative para todos os usuários:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BlYj-1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77o3ld5524ufbtvue507.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BlYj-1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77o3ld5524ufbtvue507.png" alt="macOS configuração" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para reiniciar o ssh:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo launchctl stop com.openssh.sshd &amp;amp;&amp;amp; sudo launchctl start com.openssh.sshd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora, no terminal do nosso Linux:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação do sshfs:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo pacman -S sshfs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pegando o IP do nosso container&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ID_CONTAINER&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criar uma pasta:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;mkdir projeto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para abrir a conexão:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo sshfs USER_MAC@IP_CONTAINER:/CAMINHO/DO/PROJETO/NO/MAC /CAMINHO/NO/LINUX -p 23&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUyhPclG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwcd70m354t5hnviy9h9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUyhPclG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwcd70m354t5hnviy9h9.png" alt="Exemplo de conexão" width="880" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, agora eu posso abrir o visual studio code no meu Linux e atualizar diretamente no Mac.&lt;/p&gt;

&lt;p&gt;Se você tiver um outro computador, pode fazer essa conexão também e deixar o seu principal apenas pra emular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conex%C3%A3o-do-mac-para-o-linux"&gt;
  &lt;/a&gt;
  Conexão do Mac para o Linux
&lt;/h3&gt;

&lt;p&gt;Mesmo processo anteriormente, só que o pacote do ssfs no mac pode ser instalado pelo comando abaixo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instalação sshfs no mac&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;brew install --cask macfuse &amp;amp;&amp;amp; brew install gromgit/fuse/sshfs-mac&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;No Linux:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para abrir editar o arquivo de configuração do ssh:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo nano /etc/ssh/sshd_config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Busque por &lt;code&gt;PasswordAuthentication&lt;/code&gt; e coloque a configuração como &lt;code&gt;yes&lt;/code&gt; e remova o &lt;code&gt;#&lt;/code&gt; no começo da linha.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQHermMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqms7coe0l4xwdga0j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQHermMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3aqms7coe0l4xwdga0j1.png" alt="Configuração sshd" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Salve o arquivo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para reiniciar o SSH no Manjaro:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo systemctl restart sshd.service&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;De volta ao mac, criaremos uma pasta e abriremos a conexão.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Criar uma pasta:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;mkdir projeto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comando para abrir a conexão:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;sudo sshfs USER_LINUX@IP_HOST:/CAMINHO/LINUX /CAMINHO/MAC -p 23&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Após rodar o comando, irá acontecer um erro:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kKIvhJK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgq3r1245m3s94qe5yql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKIvhJK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgq3r1245m3s94qe5yql.png" alt="Erro MAC" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abra as prefêrencias e clique em &lt;code&gt;Allow&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--opJruFbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smhcxmmfcvvxdmrf8ssg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opJruFbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smhcxmmfcvvxdmrf8ssg.png" alt="MacOS Preferencias" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reincie o mac.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agora podemos abrir nossa conexão:&lt;/strong&gt; (Meu SSH está com uma porta diferente, mas a padrão é 22)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eypMDH_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr871w7pezvkz80t1k53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eypMDH_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr871w7pezvkz80t1k53.png" alt="Conexão SSH OK" width="880" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feito isso, podemos atualizar de qualquer lado que também irá atualizar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;
  &lt;/a&gt;
  Considerações finais
&lt;/h2&gt;

&lt;p&gt;Muito obrigado por ler este tutorial, que aliás, é o primeiro que publico depois de anos. Qualquer dúvida ou sugestão é sempre bem vinda.&lt;/p&gt;

&lt;p&gt;Ah, nunca atualize o mac.&lt;/p&gt;

&lt;p&gt;:)&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ios</category>
      <category>virtualization</category>
      <category>xcode</category>
    </item>
    <item>
      <title>How I m Learning new Technologies so Quickly(Open Source Way)?!</title>
      <author>Atharva Shirdhankar</author>
      <pubDate>Tue, 28 Dec 2021 21:29:19 +0000</pubDate>
      <link>https://dev.to/star_trooper/how-i-m-learning-new-technologies-so-quicklyopen-source-way-58ao</link>
      <guid>https://dev.to/star_trooper/how-i-m-learning-new-technologies-so-quicklyopen-source-way-58ao</guid>
      <description>&lt;p&gt;When I see myself one year back I was completely confused like how should I learn new things and do some progress in the Tech Field🙁.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_dbYMSFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9jeptqrqh87zb821lvw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_dbYMSFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9jeptqrqh87zb821lvw.gif" alt="Image description" width="220" height="190"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But now!!!! when I see back in time currently I m doing great progress and easily learning new technologies😁.&lt;/p&gt;

&lt;p&gt;But actually what I did or steps I took cause of which I m doing great progress within a year.&lt;br&gt;
Let me tell you how I did it in this article and even how you can do it , if you are struggling in Coding or learning new technologies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XNthvpLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7b78igp3k00ey08omep.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XNthvpLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h7b78igp3k00ey08omep.gif" alt="Image description" width="220" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many things helped me learning new technical things but let start this first article let me share with you how Open Source helped me&lt;br&gt;
(More article on &lt;strong&gt;How I m Learning new Technologies so Quickly&lt;/strong&gt; is &lt;strong&gt;coming soon...&lt;/strong&gt;)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#open-source-contribution"&gt;
  &lt;/a&gt;
  Open Source Contribution
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#my-open-source-journey"&gt;
  &lt;/a&gt;
  My Open Source Journey
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I started Open Source Contribution in November 2020 somewhat and I made my first contribution to github-docs as a contributor cause only text and typo were needed to be corrected which was perfect for a beginner like me to get started with open source contribution.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/github/docs/pull/1242"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg"&gt;
      &lt;span class="issue-title"&gt;
        Improve documentation issue no #1034
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#1242&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/StarTrooper08"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqLYiA1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/72031540%3Fv%3D4" alt="StarTrooper08 avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/StarTrooper08"&gt;StarTrooper08&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/github/docs/pull/1242"&gt;&lt;time&gt;Nov 10, 2020&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;Done with the minor fixes for open issue number #1034 .&lt;/p&gt;

&lt;h3&gt;
&lt;a id="user-content-why" class="anchor" href="#why"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Why:&lt;/h3&gt;

&lt;h3&gt;
&lt;a id="user-content-whats-being-changed" class="anchor" href="#whats-being-changed"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What's being changed:&lt;/h3&gt;

&lt;h3&gt;
&lt;a id="user-content-check-off-the-following" class="anchor" href="#check-off-the-following"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Check off the following:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[ ] All of the tests are passing.&lt;/li&gt;
&lt;li&gt;[ ] I have reviewed my changes in staging.&lt;/li&gt;
&lt;li&gt;[ ] For content changes, I have reviewed the &lt;a href="https://github.com/github/docs/blob/main/contributing/localization-checklist.md"&gt;localization checklist&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] For content changes, I have reviewed the &lt;a href="https://github.com/github/docs/blob/main/contributing/content-style-guide.md"&gt;Content style guide for GitHub Docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/github/docs/pull/1242"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;And when I doing my first contribution I was literally confused what should I do cause I was not familiar with Git and Github .The mechanism of commiting and creating pull request was new to me.&lt;/li&gt;
&lt;li&gt;But thanks to Github docs maintainer team they helped a lot in my first contribution and even I explored and learned about Git and Github on the way.&lt;/li&gt;
&lt;li&gt;After my first contribution I did more 2 contribution to github docs that was too related to documentation and typo work.&lt;/li&gt;
&lt;li&gt;As I did my 3 contributions I got use to Github's contribution workflow (fork repository, commit changes, create pull request stuff)and even got confidence to contribute to other project which has actual coding stuff.&lt;/li&gt;
&lt;li&gt;I started with contributing to html , css , javascript codebase projects. Slow and steady I started contributing to Reactjs codebase projects and now currently working on Docker and Android related issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-did-i-learned-from-open-source-and-by-doing-contribution-to-oss"&gt;
  &lt;/a&gt;
  What did I learned from Open Source and by doing contribution to OSS?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The journey of Open Source was amazing I learned so new many things on the way. And not only learned new technologies and framework but also made new friends .&lt;/li&gt;
&lt;li&gt;The Open Source contribution I did helped me to learn different web frameworks like Django, flask, etc. And frontend library reactJs.&lt;/li&gt;
&lt;li&gt;Many a times during open source contribution I came across codebase that was overwhelming at first. Even came across new technologies I've never heard of. So by doing Open Source contribution I was learning on the way and I learned those stuff first and I used to implement it by contributing.&lt;/li&gt;
&lt;li&gt;By contributing to open source software's I became habitual to deal with overwhelming codebase ,read the codebase and do the changes in the code where required.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;And yes if you think how I can those new technologies and do the contribution work.&lt;br&gt;
Just ask for some help in the open source community. There will surely someone to help you and guide you if you are stuck somewhere. &lt;strong&gt;That's the Amazing part ,I like about Open Source😃&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;When you do Open Source Contribution you are gaining experience which will surely help in future.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Conclusion &lt;br&gt;
In short, I learned new programming language, new technologies in public and also implemented those learnings on the way and gained some experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#how-you-can-start-with-open-source-and-learn-new-things"&gt;
  &lt;/a&gt;
  How you can start with Open Source and learn new things
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To get started with open source at first you need know few &lt;strong&gt;git commands like clone, commit, push&lt;/strong&gt;. And little bit familiar with &lt;strong&gt;Github's issue ,pull request feature&lt;/strong&gt;. Other advance concepts of git and Github you will &lt;strong&gt;learn on the way by doing contribution&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;After learning few concepts of git and github.
On github search for some repository which are specific for &lt;strong&gt;documentation&lt;/strong&gt; or &lt;strong&gt;html,css,javascript&lt;/strong&gt; base project and best for beginner to start with open source.
Below are Few of them to which I contributed and still contribute
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/github"&gt;
        github
      &lt;/a&gt; / &lt;a href="https://github.com/github/docs"&gt;
        docs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The open-source repo for docs.github.com
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/EddieHubCommunity"&gt;
        EddieHubCommunity
      &lt;/a&gt; / &lt;a href="https://github.com/EddieHubCommunity/LinkFree"&gt;
        LinkFree
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Open source alternative to LinkTree
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/EddieHubCommunity"&gt;
        EddieHubCommunity
      &lt;/a&gt; / &lt;a href="https://github.com/EddieHubCommunity/EventCalendar"&gt;
        EventCalendar
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Community events from TwitterSpaces to Live streams to Conferences
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/JuliaLang"&gt;
        JuliaLang
      &lt;/a&gt; / &lt;a href="https://github.com/JuliaLang/www.julialang.org"&gt;
        www.julialang.org
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Julia Project website
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Now search for good first issues in issue tab .&lt;/li&gt;
&lt;li&gt;And work on those issues accordingly&lt;/li&gt;
&lt;li&gt;After getting use to with Github workflow(find issue , do some required changes in code or documentation(text),create pull request and merge your code), I recommend work on the project which you think is quite overwhelming for you or you want to learn programming language search for those projects which include it.&lt;/li&gt;
&lt;li&gt;Slow and steady you will learn new programming language or technology and that too efficiently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(I didn't mention everything in detail how you can do open source contribution but I m sure you got this😅. My motive behind this article is simple do open source contribution and learn new things on the way and also gain some experience 🚀)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6bba7GvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54jznykroempml165f25.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6bba7GvJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54jznykroempml165f25.gif" alt="Image description" width="220" height="123"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You for Reading this Article and yes stay tune for next part of this blog series by following me.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>opensource</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>DNS Compression In Dart</title>
      <author>kyorohiro (kiyohiro kawamura)</author>
      <pubDate>Tue, 28 Dec 2021 21:19:07 +0000</pubDate>
      <link>https://dev.to/kyorohiro/dns-compression-in-dart-cb3</link>
      <guid>https://dev.to/kyorohiro/dns-compression-in-dart-cb3</guid>
      <description>&lt;p&gt;Last time, we successfully generated a DNS Query and get the results from the DNS server.&lt;/p&gt;

&lt;p&gt;I would like to analyze this result, but this data is compressed.&lt;/p&gt;

&lt;p&gt;In this Section. I'll explain about dns compression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dns-message-compression"&gt;
  &lt;/a&gt;
  DNS Message Compression
&lt;/h2&gt;

&lt;p&gt;According to  (RFC1035)[&lt;a href="https://datatracker.ietf.org/doc/html/rfc1035"&gt;https://datatracker.ietf.org/doc/html/rfc1035&lt;/a&gt;], We can specify the location to be referenced by OFFSET in the following format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a domain name represented as a sequence of labels, where each label consists of a length octet followed by that number of octets.  

The domain name terminates with the zero length octet for the null label of the root.  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
| 1  1|                OFFSET                   |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, adding "example.com" to the buffer would look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  13 |           6           |           e           |
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  22 |           x           |           a           |
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  24 |           m           |           p           |
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  26 |           l           |           e           |
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  28 |           3           |           c           |
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  30 |           o           |           m           |
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  30 |           0           | 
     +--+--+--+--+--+--+--+--+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From now on, if you return a URL named &lt;a href="http://www.example.com"&gt;www.example.com&lt;/a&gt;, you can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  40 |           3           |           w           |
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  42 |           w           |           w           |
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
  44 | 1  1|                13                       |
     +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be able to express yourself in the above way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#write-this-in-dart"&gt;
  &lt;/a&gt;
  Write This In Dart
&lt;/h1&gt;

&lt;p&gt;Let's write a code to compress URLs, which can be written in about 30 lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dnsdict.dart&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:typed_data'&lt;/span&gt; &lt;span class="kd"&gt;show&lt;/span&gt; &lt;span class="n"&gt;Uint8List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DNSCompressionDictItem&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DNSCompressionDict&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DNSCompressionDictItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{};&lt;/span&gt;
  &lt;span class="n"&gt;Uint8List&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sublist&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;join&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 既に登録されていれば、そのアドレスを返す&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mh"&gt;0xC000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addAll&lt;/span&gt;&lt;span class="o"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Uint8List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 登録されていないならば、保存する&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addAll&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]));&lt;/span&gt;
        &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DNSCompressionDictItem&lt;/span&gt;&lt;span class="o"&gt;()..&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// 登録されていないならば、保存する&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Uint8List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dnsdict_test.dart&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:info.kyorohiro.dns/dns.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:test/test.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DNSName'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;

    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'DNSName.encode()'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DNSCompressionDict&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bufferSrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'yahoo.co.jp'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;bufferSrc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DNSBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufferSrc&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toHex&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;'057961686f6f02636f026a7000'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// 057961686f6f02636f026a7000(13)&lt;/span&gt;

      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bufferSrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'google.co.jp'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;bufferSrc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DNSBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufferSrc&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toHex&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;'06676f6f676c65c006'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// 057961686f6f02636f026a7000(13)&lt;/span&gt;
      &lt;span class="c1"&gt;// 06676f6f676c65c006(9)&lt;/span&gt;

      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bufferSrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'www.google.co.jp'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;bufferSrc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DNSBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufferSrc&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toHex&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;'03777777c00d'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// 057961686f6f02636f026a7000(13)&lt;/span&gt;
      &lt;span class="c1"&gt;// 06676f6f676c65c006(9)&lt;/span&gt;
      &lt;span class="c1"&gt;// 03777777c00d(6)&lt;/span&gt;

      &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bufferSrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'www.google.co.jp'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;bufferSrc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DNSBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bufferSrc&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toHex&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;'c016'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#decompress-in-dart"&gt;
  &lt;/a&gt;
  Decompress In Dart
&lt;/h1&gt;

&lt;p&gt;If you are writing in C, you need to check if you are accessing invalid memory. However, since this is a Dart program, we have not checked for infinite loops.&lt;br&gt;
You may want to check for infinite loops.&lt;/p&gt;

&lt;p&gt;This too can be written in about 30 lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dnsname.dart&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Tuple2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;createUrlFromName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Uint8List&lt;/span&gt; &lt;span class="n"&gt;srcBuffer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;outBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringBuffer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;srcBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nameLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;srcBuffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nameLength&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TEXT END&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Tuple2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;outBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="mh"&gt;0xC0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;nameLength&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0xC0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Compression&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;nameLength&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x3f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;srcBuffer&lt;/span&gt;&lt;span class="o"&gt;[++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createUrlFromName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;srcBuffer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;outBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;outBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;item1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Tuple2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;outBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nameBytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;srcBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sublist&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nameLength&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;outBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;outBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nameBytes&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;allowInvalid:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;nameLength&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;DNSNameException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Not Found Null Char'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#next-time"&gt;
  &lt;/a&gt;
  Next time
&lt;/h1&gt;

&lt;p&gt;Parse the DNS Message retrieved from the DNS server last time and display the result.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>dartlang</category>
      <category>dns</category>
    </item>
    <item>
      <title>Please stop doing stupidly complex technical interviews!</title>
      <author>Eduardo Ortega</author>
      <pubDate>Tue, 28 Dec 2021 20:47:09 +0000</pubDate>
      <link>https://dev.to/proco/please-stop-doing-stupidly-complex-technical-interviews-44kg</link>
      <guid>https://dev.to/proco/please-stop-doing-stupidly-complex-technical-interviews-44kg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--INo1pPHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtbxzu5iqvglban30gye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--INo1pPHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtbxzu5iqvglban30gye.png" alt="Please stop stupidly complex interviews?" width="768" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh the technical interviews, I am a 15 years experienced software engineer and I'm still afraid of them!. So we as human beings fear the unknown, but a good interview should be more like a conversation instead of a police interrogation.&lt;/p&gt;

&lt;p&gt;Interviewers have asked me if I know S.O.L.I.D. principles, unit testing in deep and even I've been asked to use graph theory to solve a problem. When I got the job, there is a high dependency on a specific dll that do a lot of different things (This by it's own violates all SOLID principles), I never used anything they asked me, so what's the need to make the technical interview unnecessarily complex and tedious?. When I am interviewing a candidate I try to make a conversation like: Tell me about your experience, the latest project you are working on, what technology you like the most, and why. I guess that they are trying to emulate top-tech companies like GAFAM, what I have heard about these companies is that the technical interviews are very focused on data structures and problem-solving (not sure if they are used in daily work).&lt;/p&gt;

&lt;p&gt;My point is: if your company focuses on a specific product, ask what you're looking for, ask for the technologies you are currently using, please stop doing stupidly complex technical tests unless your company is currently using these techniques to solve complex problems.&lt;/p&gt;

&lt;p&gt;And as always, happy coding!.&lt;/p&gt;

</description>
      <category>management</category>
    </item>
    <item>
      <title>Secrets of MicroPython: How to blink an LED</title>
      <author>Bhavesh Kakwani</author>
      <pubDate>Tue, 28 Dec 2021 20:44:20 +0000</pubDate>
      <link>https://dev.to/bhav/secrets-of-micropython-how-to-blink-an-led-cb6</link>
      <guid>https://dev.to/bhav/secrets-of-micropython-how-to-blink-an-led-cb6</guid>
      <description>&lt;p&gt;This tutorial was originally published &lt;a href="https://bhave.sh/micropython-blink-led/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Welcome to the Secrets of MicroPython tutorial series! MicroPython is an incredible tool for rapidly prototyping and iterating on hardware projects. It's similar to Arduino but instead of using C++, which you have to re-compile each time you make a code change, it runs on the Python interpreter which allows you to run code changes immediately. The quick feedback cycle enabled by MicroPython will, I believe, power the future of embedded development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What is the "hello world" of embedded software? Why, blinking an LED, of course! In this first tutorial, we'll get you acquainted with the fundamentals of MicroPython and more importantly, the online simulator we'll be using for all the tutorials. That's right, an online simulator! No need to feel pressured to throw down money on a box of hardware gadgets to learn MicroPython - though you are certainly welcome to when you feel ready.&lt;/p&gt;

&lt;p&gt;In the simulator, we are going to be writing code for a Raspberry Pi Pico. The Pico is a powerful $4 microcontroller by the makers of the Raspberry Pi, and it comes with solid MicroPython support and documentation. The simulator we'll use is an excellent online service called Wokwi, and it has a &lt;a href="https://wokwi.com/arduino/new?template=micropython-pi-pico"&gt;starting point for Pi Pico + MicroPython projects here&lt;/a&gt;. I suggest you bookmark that link so you can always quickly get started on a new tutorial or project with one click. Here's a quick overview of the simulator window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1D0aL6q4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7yxc7wd8o1f2m3hw0j7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1D0aL6q4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7yxc7wd8o1f2m3hw0j7.png" alt="The Wokwi simulator" width="880" height="499"&gt;&lt;/a&gt;The Wokwi simulator. The left pane is where we write MicroPython code. The right pane is where we connect hardware to the Pico using wires. On the bottom right is the console which shows printed output from our program. Press the "play" button in the top right to see it in action!&lt;/p&gt;

&lt;p&gt;If you clicked the "play" button in the simulator, congratulations - you've just run your first MicroPython program! As shown in the screenshot above, it prints out "Hello, Pi Pico!" in the console on the bottom right. But we're here for something much more interesting - blinking LEDs (aw yeah)! If you look closely, there's a small LED on the top left corner of the Pico board, with the silkscreen "LED" printed in white underneath it. But which pin is it connected to?&lt;/p&gt;

&lt;p&gt;Luckily, we have Raspberry Pi Pico's excellent documentation to help us. You can snag the &lt;a href="https://datasheets.raspberrypi.com/pico/Pico-R3-A4-Pinout.pdf"&gt;pinout diagram here&lt;/a&gt;. Save it and maybe even print it out - it will be useful for every project. Let's zoom in and have a look at how to read the pinout diagram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XunhAJAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvl0ecz89ggaaymy05l3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XunhAJAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvl0ecz89ggaaymy05l3.png" alt="Top section of the Pi Pico pinout diagram" width="880" height="252"&gt;&lt;/a&gt;Top section of the Pi Pico pinout diagram. We can see from the label at the top that the onboard LED is connected to pin &lt;strong&gt;GP25&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So the onboard LED is on pin GP25. Take a moment here to also notice how pins 1 and 2 have &lt;em&gt;multiple&lt;/em&gt; labels attached to them. This is common in microcontrollers and it signifies that these pins can be used for any &lt;em&gt;one&lt;/em&gt; of these labeled functions, and that it's up to the programmer to decide which one will be active.&lt;/p&gt;

&lt;p&gt;In order to blink this happy little diode, we need to know two things: how to toggle the voltage on the output pin, and how to work with time in MicroPython. These are accomplished using the &lt;em&gt;machine&lt;/em&gt; and &lt;em&gt;time&lt;/em&gt; libraries, respectively. Before we write the code, it is helpful to visualize by drawing a flowchart.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwPzCVmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je0a5ytj0pv3lzuniclc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwPzCVmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/je0a5ytj0pv3lzuniclc.png" alt="Flowchart for blinking an LED" width="839" height="1487"&gt;&lt;/a&gt;Flowchart for blinking an LED&lt;/p&gt;

&lt;p&gt;The code to accomplish this in MicroPython is fortunately quite simple. Take a look at the code below, and &lt;em&gt;type it in&lt;/em&gt; (&lt;strong&gt;do not copy-paste&lt;/strong&gt;) to your simulator. I can't stress enough that you should type it in yourself - it is the best way to truly understand programming and it's a very important habit to build in your learning, no matter how trivial a piece of code may seem. After you type it in, press the 'play' button to run the code and see your result!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XFE7QEZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywijrweycpi2tewvxik4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XFE7QEZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywijrweycpi2tewvxik4.png" alt="Code for blinking LED in MicroPython" width="552" height="382"&gt;&lt;/a&gt;Yes, I did just post the code as an image to prevent copy-pasting. Shame on you for trying. &lt;/p&gt;

&lt;p&gt;In the first two lines, we import the libraries we need. When using MicroPython with any kind of hardware, you will basically always need the &lt;em&gt;machine&lt;/em&gt; library as it provides you access to control every aspect of the hardware. The &lt;em&gt;time&lt;/em&gt; library is also needed in most projects so that we can control the rate at which things happen in our code. After importing the libraries, we set up the LED pin as a digital output. Finally we start an infinite loop in which the code sleeps (does nothing) for half a second, then toggles the LED pin. Check out the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kdc2fU6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1govj18bb6zgu4j047g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kdc2fU6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1govj18bb6zgu4j047g.gif" alt="Pi Pico onboard LED blinking" width="600" height="421"&gt;&lt;/a&gt; The simulated green photons emanating from this simulated LED are truly magnificent 🥲&lt;/p&gt;

&lt;p&gt;Cool! Are you satisfied? I am not. In real hardware projects, most of the LEDs to be controlled are &lt;em&gt;outside&lt;/em&gt; the microcontroller's circuit board. Let's take it up a notch and blink an external LED. When wiring up an LED, you need to ensure you are not putting too much current through it, otherwise it may 'pop' and die - trust me, I've done it too many times. To control the current going through it, we use a &lt;em&gt;resistor&lt;/em&gt;. The higher the resistance, the lower the current. The lower the current, the lower the brightness of the light from the LED.&lt;/p&gt;

&lt;p&gt;The Wokwi simulator doesn't actually display a different LED brightness based on the current, so for now we won't worry too much about the precise value of the resistor (in a real physical hardware project, you will need to calculate it based on your needs). We will just focus on how to wire it up. Let's first draw up a schematic diagram before implementing it in Wokwi.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hBdgTDs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4kjqlwwbk2h60n03992.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBdgTDs6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4kjqlwwbk2h60n03992.png" alt="Schematic for connecting external LED to Pi Pico" width="880" height="434"&gt;&lt;/a&gt;Current flows out from the Pico's output pin, through the LED and resistor, then to a ground pin on the Pico. &lt;/p&gt;

&lt;p&gt;In the right pane in Wokwi, click on the 'plus' button and add an LED into your design. Click the 'plus' button again and add a resistor. Let's connect them as shown in the schematic above. To connect, just click on your desired starting pin - e.g. the LED's negative pin / cathode - and then click on the destination pin - e.g. one of the pins on the resistor - to create a wire connection between those two points.&lt;/p&gt;

&lt;p&gt;Refer to the Pico's pinout diagram to figure out which pins you can use as 'output pin' and 'ground'. For the output pin, I will use pin GP0 (a.k.a pin 1 - confusing, I know) at the very top-left of the board. For the ground pin, I will connect to pin no. 3, also at the top-left. At this point you may be tempted to run the code, but first make sure to change the pin number in line no. 5 of the code from pin no. 25 to pin no. 0, so that we now blink the external LED instead of the onboard one. Click 'play' and watch the result!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--89mEwMpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn96tc38sibscjz3zadh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--89mEwMpg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn96tc38sibscjz3zadh.gif" alt="Blinking external LED using Pi Pico" width="600" height="238"&gt;&lt;/a&gt;Ahhh, the simulated red photons soothe my soul and do not remind me of an emergency vehicle speeding down the street and making very loud noises&lt;/p&gt;

&lt;p&gt;And there you have it! LEDs be blinking. As a small exercise/challenge, try to make both the onboard LED and the external LED blink in unison. And to take it up another notch, try to blink them perfectly out of sync, i.e. green is on when red is off, and vice versa. Good luck, and please ask any questions you have in the comments below.&lt;/p&gt;

&lt;p&gt;Next time in Secrets of MicroPython, we will learn to interface with and control other hardware peripherals and sensors. We will build our knowledge of all these parts before combining them to create cool projects! Stay tuned.&lt;/p&gt;

</description>
      <category>micropython</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
    <item>
      <title>How I Made an API for Duck Jokes 🦆</title>
      <author>William McGonagle</author>
      <pubDate>Tue, 28 Dec 2021 20:27:58 +0000</pubDate>
      <link>https://dev.to/williammcgonagle/how-did-i-make-an-api-for-duck-jokes-pmg</link>
      <guid>https://dev.to/williammcgonagle/how-did-i-make-an-api-for-duck-jokes-pmg</guid>
      <description>&lt;p&gt;I've been working on my website for some time now, but it felt like there was something missing. I wasn't really sure what it was, so I ignored it for a bit of time. Later that week, I was hanging out with friends and we started making puns about ducks- "wisequacks". That's when I had a moment of realization. &lt;/p&gt;

&lt;p&gt;I decided to drop everything that I was doing and build a really simple API for duck jokes. Right now the API has a couple of jokes, but we need some more, so if you want to submit some, you can respond to &lt;a href="https://github.com/fairfield-programming/backend-server/issues/66"&gt;this issue&lt;/a&gt; or you can just drop a pull request on &lt;a href="https://github.com/fairfield-programming/backend-server"&gt;this repository&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can check out the joke API &lt;a href="https://fairfield-programming.herokuapp.com/joke"&gt;here&lt;/a&gt; and you can use it in any of your projects if you would like. All of the code for the project can be found in the linked repository and it is all under the MIT license if you want to use it in your own project. Cheers! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make Sure to Drop the Repository a Star if You Like It!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fairfield-programming/backend-server/"&gt;Fairfield Programming Association's Backend Server&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>showdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Approval Workflow: Manual and Automated Approvals in CI/CD</title>
      <author>Francesco Ciulla</author>
      <pubDate>Tue, 28 Dec 2021 20:11:50 +0000</pubDate>
      <link>https://dev.to/tinystacks/approval-workflow-manual-and-automated-approvals-in-cicd-2p7m</link>
      <guid>https://dev.to/tinystacks/approval-workflow-manual-and-automated-approvals-in-cicd-2p7m</guid>
      <description>&lt;p&gt;Recently, I've gone into detail on  &lt;a href="https://blog.tinystacks.com/stacks-stages-aws"&gt;stacks and stages&lt;/a&gt;. I've also examined the importance of dev stacks for both teams and individual developers. Building on these topics, I wanted to talk today about approvals. &lt;/p&gt;

&lt;p&gt;How do you promote changes to your stacks to production? More importantly, how do you gate promotions to ensure quality code? I'll look at the two major approaches to approvals - manual vs. automatic - and when and how to use each approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-change-management-approval-process"&gt;
  &lt;/a&gt;
  What is a Change Management Approval Process?
&lt;/h2&gt;

&lt;p&gt;Traditionally, nothing strikes more fear in the heart of a dev team than pushing a change to production. Change promotion is usually an "all hands on deck" affair. Engineers and support personnel often stand at the ready, testing lives sites and monitoring dashboards for the slightest hint of trouble.&lt;/p&gt;

&lt;p&gt;What can go wrong when pushing a change? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A code change that wasn't thoroughly tested or reviewed can break on release. &lt;/li&gt;
&lt;li&gt;A code change that worked in dev might not work in production. &lt;/li&gt;
&lt;li&gt;A configuration change could break a production server or not be distributed to all instances in a cluster. &lt;/li&gt;
&lt;li&gt;A new part of your cloud infrastructure could fail to deploy correctly. &lt;/li&gt;
&lt;li&gt;...and any number of other things that keep developers awake at night. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The question isn't "What can go wrong?" during a deployment. It's more like, "What &lt;strong&gt;can't&lt;/strong&gt; go wrong?"&lt;/p&gt;

&lt;p&gt;Because of this, software teams don't just shove a change into production and hope for the best. Most teams have some sort of &lt;strong&gt;change management approval process&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;As I discussed previously, a deployment pipeline consists of a number of stages. Each stage - dev, test, staging, prod - is used to widen a change's availability and vet its quality. A change management approval process sets guidelines for when a change can flow from one stage to the next. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-approvals"&gt;
  &lt;/a&gt;
  Types of Approvals
&lt;/h2&gt;

&lt;p&gt;Traditionally, there are two types of approvals. Often, both types are used at different stages of the development process. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manual-approvals"&gt;
  &lt;/a&gt;
  Manual Approvals
&lt;/h3&gt;

&lt;p&gt;With a manual approval, a change requires some sort of human intervention to progress to the next stage. Often, this takes the form of a code review or buddy test, in which another member of your team reviews your changes before approving them. Once approved, the change migrates to the next stage.&lt;/p&gt;

&lt;p&gt;A manual approval is also a good way to await feedback from stakeholders and customers. For example, you may make changes or a new feature available in a staging or demo environment that internal stakeholders and other teams can access. Once the changes have passed all tests and have secured stakeholder approval, you can approve and push them into production. &lt;/p&gt;

&lt;p&gt;Manual approval doesn't mean that your release pipeline contains zero automation. You will likely still have steps in your deployment pipeline where you're running unit tests, smoke tests, service health checks, and other automated quality checks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-approvals"&gt;
  &lt;/a&gt;
  Automated Approvals
&lt;/h3&gt;

&lt;p&gt;With an automated approval, a change migrates to the next stage if it passes a set of automated checks. These can include but are not limited to unit tests, service health checks, and security checks. &lt;/p&gt;

&lt;p&gt;Automated approvals are typical in earlier stages of a release pipeline - e.g., moving from dev to test, or test to stage. They're harder to achieve in production, as they require a high degree of automated testing and verification to ensure users don't get broken bits. Automated delivery into production is often referred to as  &lt;a href="https://aws.amazon.com/builders-library/automating-safe-hands-off-deployments/"&gt;continuous delivery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Typically, an automated approval into production will use some sort of phased release strategy. For example, you may deploy code changes to a single server (a canary). You would then test/monitor the results before deploying to all machines in a fleet. Or you may do a rolling deployment in which you deploy new code to a small percentage of your servers or serverless endpoints. If the change doesn't produce any errors (HTTP server errors, virtual machine connectivity issues, etc.), the system continues the promotion process. If there are errors, it rolls back the changes and stops the rollout.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-manual-approvals-on-a-pipeline-in-aws"&gt;
  &lt;/a&gt;
  Implementing Manual Approvals on a Pipeline in AWS
&lt;/h2&gt;

&lt;p&gt;Most pipeline technologies provide some way to switch easily between manual and automated approvals. &lt;/p&gt;

&lt;p&gt;For example, &lt;a href="https://blog.tinystacks.com/using-codebuild-and-codepipeline-to-deploy-aws-applications-easily"&gt;AWS CodePipeline&lt;/a&gt; structures a pipeline in a series of stages. Each step consists of a series of actions. In AWS, you can add a Manual Approval action to a stage. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dI0RpiHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640036288779/YfhSAMFou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dI0RpiHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640036288779/YfhSAMFou.png" alt="image.png" width="516" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The manual approval action will stop pipeline execution until someone approves it. AWS sends approval requests to an Amazon SNS (Simple Notification Service) topic. This means you can send the request to one or multiple potential reviewers. You can also configure the message to include a URL link. This is helpful if your team uses a code review software system like &lt;a href="https://www.reviewboard.org/"&gt;Review Board&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tinystacks-makes-approvals-easy"&gt;
  &lt;/a&gt;
  TinyStacks Makes Approvals Easy
&lt;/h2&gt;

&lt;p&gt;At TinyStacks, our goal is to make DevOps easy. Our simplified pipeline creation tools will flow approvals automatically from stage to stage. Adding a manual approval is as simple as clicking a checkbox! Your teammates can then easily view and approve the migration to the next stage from the TinyStacks dashboard. Contact us today to see how TinyStacks can simplify your journey to DevOps maturity!&lt;/p&gt;

&lt;p&gt;Article by Jay Allen&lt;/p&gt;

</description>
      <category>aws</category>
      <category>codequality</category>
      <category>codereview</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
