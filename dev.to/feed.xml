<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Full Stack E-Commerce App (+8 hours free tutorial)</title>
      <author>Safak</author>
      <pubDate>Tue, 12 Oct 2021 14:11:38 +0000</pubDate>
      <link>https://dev.to/safak/full-stack-e-commerce-app-8-hours-free-tutorial-10pb</link>
      <guid>https://dev.to/safak/full-stack-e-commerce-app-8-hours-free-tutorial-10pb</guid>
      <description>&lt;p&gt;Hi, I'm Safak. I am a full-stack web developer and I'm sharing open source web projects on my YouTube channel. I want to share my +8 hours "MERN Stack E-Commerce App with an Admin Dashboard" tutorial for free. You can reach the playlist from &lt;a href="https://www.youtube.com/watch?v=c1xTDSIXit8&amp;amp;list=PLj-4DlPRT48mxPG8TAXOH4qqQ1ijuERO4"&gt;here&lt;/a&gt;. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-technologies-are-used"&gt;
  &lt;/a&gt;
  What technologies are used?
&lt;/h2&gt;

&lt;h6&gt;
  &lt;a href="#backend-server-nodejs-express-framework-jwt"&gt;
  &lt;/a&gt;
  Backend Server: Node.js Express Framework, JWT
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#database-mongodb"&gt;
  &lt;/a&gt;
  Database: MongoDB
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#payment-method-stripe-api"&gt;
  &lt;/a&gt;
  Payment Method: Stripe API
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#frontend-framework-reactjs-with-hooks"&gt;
  &lt;/a&gt;
  Front-End Framework: React.js with hooks
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#ui-library-styled-components"&gt;
  &lt;/a&gt;
  UI library: Styled Components
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#state-management-library-redux"&gt;
  &lt;/a&gt;
  State Management Library: Redux
&lt;/h6&gt;




&lt;h2&gt;
  &lt;a href="#design-part-of-the-ecommerce-app"&gt;
  &lt;/a&gt;
  Design Part of the E-Commerce App
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to design an e-commerce app using React.js functional components, hooks and Styled Components. For now, we are going to be using a dummy data to display products but in the last part we'll fetch all data from MongoDb using a Rest API&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c1xTDSIXit8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend-part-of-the-ecommerce-app"&gt;
  &lt;/a&gt;
  Back-End Part of the E-Commerce App
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to create a Rest API using Express server with MongoDB connection and create necessary models and routes in order to handle CRUD operations. We'll provide the security using JWT and authenticate and authorize users. And also you'll see how easy to get payment using Stripe API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stripe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/payment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;usd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeErr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stripeRes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeErr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeErr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stripeRes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rMiRZ1iRC0A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mern-stack-part-of-the-ecommerce-app"&gt;
  &lt;/a&gt;
  MERN Stack Part of the E-Commerce App
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to combine the API with the UI Design and make our application dynamic. We'll fetch data and make POST requests using &lt;strong&gt;axios&lt;/strong&gt;. And also we'll be covering &lt;strong&gt;Redux Toolkit&lt;/strong&gt; in depth.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@reduxjs/toolkit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSlice&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;products&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;isFetching&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;reducers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//GET ALL&lt;/span&gt;
    &lt;span class="na"&gt;getProductStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;getProductSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;//DELETE&lt;/span&gt;
    &lt;span class="na"&gt;deleteProductStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;deleteProductSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;//UPDATE&lt;/span&gt;
    &lt;span class="na"&gt;updateProductStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;updateProductSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;//ADD&lt;/span&gt;
    &lt;span class="na"&gt;addProductStart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;addProductSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFetching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/y66RgYMAgSo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope it was useful. If you want to learn more about web development and practice with real-world projects, you can check out my channel and other posts.&lt;/p&gt;

&lt;p&gt;📺 &lt;a href="https://dev.to/safak/full-stack-netflix-app-7-hours-free-tutorial-1o6l"&gt;Full Stack Netflix App (+7 Hours free tutorial)&lt;/a&gt;&lt;br&gt;
🧑‍🤝‍🧑 &lt;a href="https://dev.to/safak/social-media-app-using-mern-stack-4ic6"&gt;Full Stack Social Media App (+7 Hours free tutorial)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔥 &lt;a href="https://www.youtube.com/c/lamadev"&gt;Lama Dev YouTube Channel&lt;/a&gt;&lt;br&gt;
⚡️ &lt;a href="https://www.facebook.com/groups/lamadev"&gt;Lama Dev Facebook&lt;/a&gt;&lt;br&gt;
👾 &lt;a href="https://github.com/safak/youtube/tree/mern-ecommerce-app"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>How To Implement Heatmap In Tables Using Directives In Angular</title>
      <author>Adithya Sreyaj</author>
      <pubDate>Tue, 12 Oct 2021 14:11:37 +0000</pubDate>
      <link>https://dev.to/angular/how-to-implement-heatmap-in-tables-using-directives-in-angular-2f60</link>
      <guid>https://dev.to/angular/how-to-implement-heatmap-in-tables-using-directives-in-angular-2f60</guid>
      <description>&lt;p&gt;Let's see how easy it is to add heatmaps to tables in Angular using Directives. We'll go for a really simple and elegant solution to have separate heatmap colors to different columns in the table.&lt;/p&gt;

&lt;p&gt;As I always say, Directives are a really powerful feature of Angular. It can be used as an elegant solution to implement a lot of cool functionalities. You can clearly see why the directive approach makes more sense when you reach the end of the post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heatmaps-in-table"&gt;
  &lt;/a&gt;
  Heatmaps in table
&lt;/h2&gt;

&lt;p&gt;Even though it's not that often we see heatmaps in tables, but heatmaps can really add some value in terms of visualization. It would make sense in data sets where there is some kind of comparison or range.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxiMR6oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q835doonjic4o3cloq85.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxiMR6oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q835doonjic4o3cloq85.png" alt="Table with Heatmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-directives"&gt;
  &lt;/a&gt;
  Why Directives?
&lt;/h2&gt;

&lt;p&gt;If you have this question in mind, here are some reasons which justify why creating a directive for implementing this feature will make sense.&lt;br&gt;
The logic can be completely moved outside of the component, making it simpler and leaner. If the logic is separated from the component, that means it's more reusable.&lt;br&gt;
When something is built in a re-usable manner, it will be easy to scale and maintain.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#heatmap-logic"&gt;
  &lt;/a&gt;
  Heatmap Logic
&lt;/h2&gt;

&lt;p&gt;For implementing this functionality let's look at what exactly needs to be done here. So basically, heatmaps give the user idea of the magnitude of something by variation in color or hue.&lt;/p&gt;

&lt;p&gt;So If we have a set of numbers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here based on the value we can manipulate the intensity of a color. Meaning &lt;code&gt;1&lt;/code&gt; will be the lightest shade of the color and &lt;code&gt;10&lt;/code&gt; will be the color itself. So we just need to map the values to the intensity of the colors here. We can also have the opposite condition as well.&lt;/p&gt;

&lt;p&gt;There are different ways to implement this. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-using-alpha-channel"&gt;
  &lt;/a&gt;
  1. Using Alpha Channel
&lt;/h3&gt;

&lt;p&gt;We can easily implement heatmaps using &lt;strong&gt;RGBA&lt;/strong&gt; or &lt;strong&gt;HSLA&lt;/strong&gt; by just changing the alpha channel meaning the transparency of the color.&lt;/p&gt;

&lt;p&gt;I am not going with this approach as we are also trying to generate accessible text colors based on the background color. This will ensure the text will remain readable for all the color stops.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-using-hsl-color-expression"&gt;
  &lt;/a&gt;
  2. Using HSL Color Expression
&lt;/h3&gt;

&lt;p&gt;Here I am gonna be using HSL color expression to easily get the right color for each value by manipulating the &lt;code&gt;L (Lightness)&lt;/code&gt; parameter. &lt;br&gt;
&lt;strong&gt;HSL&lt;/strong&gt; is a really good way to express colors and manipulating the colors is very easy with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HSL&lt;/strong&gt; stands for &lt;code&gt;Hue&lt;/code&gt; &lt;code&gt;Saturation&lt;/code&gt; &lt;code&gt;Lightness&lt;/code&gt; and it can also have an &lt;code&gt;Alpha&lt;/code&gt; channel with &lt;strong&gt;HSLA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the idea here is to find the &lt;code&gt;Lightness&lt;/code&gt; factor for each value. Here's how we can do it.&lt;/p&gt;

&lt;p&gt;So here the original color value is first parsed to HSLA:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hsla(234, 77%, 46%, 1)&lt;/code&gt; --&amp;gt; &lt;code&gt;Lightness = 46%&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We have the min possible value for Lightness ie 0.46. So the highest value will have a lightness of &lt;code&gt;46%&lt;/code&gt; and for other values, it will be higher. When lightness increases it moves nearer to &lt;code&gt;White&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the formula:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#1b2dd0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseHSLA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- [234, 0.77,0.46,1]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;highestValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- 1 - 0.46 = 0.54&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;highestValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// 1 --&amp;gt; 1 - (1 * 0.54 / 10) = (1 - 0.05) ~ 95% &lt;/span&gt;
&lt;span class="c1"&gt;// 5 --&amp;gt; 1 - (5 * 0.46 / 10) = (1 - 0.23) ~ 77%&lt;/span&gt;
&lt;span class="c1"&gt;// 10 -&amp;gt; 1 - (10 * 0.54 / 10) = (1 - 0.54) ~ 46%&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here 10 will be the lowest number and hence we need a very light color so 95% will make it very light.&lt;br&gt;
Lightness % as it increases makes the color whiter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dhmN8_to--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0nmoynd38w87o48epet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dhmN8_to--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0nmoynd38w87o48epet.png" alt="Lightness Palette"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now we have the logic in place, let's start with the directives!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-heatmap-directives"&gt;
  &lt;/a&gt;
  Creating Heatmap Directives
&lt;/h2&gt;

&lt;p&gt;So I mentioned "Directives" (plural) as we will be creating multiple directives for this functionality. To be specific 3 of them. Out of the 3, two of them are just for tagging the element and setting some metadata:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Heatmap Table&lt;/li&gt;
&lt;li&gt;Heatmap Column&lt;/li&gt;
&lt;li&gt;Heatmap Cell&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is how we will use the directives in the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;heatMapTable&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Company&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Manager&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;[heatMapColumn]=&lt;/span&gt;&lt;span class="s"&gt;"options.employees"&lt;/span&gt;  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"employees"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Employees
    &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;[heatMapColumn]=&lt;/span&gt;&lt;span class="s"&gt;"options.contractors"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contractors"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Contractors
    &lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ item.company }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{ item?.manager }}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;[heatMapCell]=&lt;/span&gt;&lt;span class="s"&gt;"item.employees"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"employees"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         {{ item?.employees }}
      &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;[heatMapCell]=&lt;/span&gt;&lt;span class="s"&gt;"item.contractors"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"contractors"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ item?.contractors }}
      &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#heatmap-cell-directive"&gt;
  &lt;/a&gt;
  Heatmap Cell Directive
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[heatMapCell]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatMapCell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;heatMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;colId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have an input to pass the value into the directive and also accept the id of the column to which the cell belongs in the table. We inject the &lt;code&gt;ElementRef&lt;/code&gt; so that we can manipulate the element later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heatmap-column-directive"&gt;
  &lt;/a&gt;
  Heatmap Column Directive
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[heatMapColumn]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HeatmapColumnDirective&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;colId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heatMapColumn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we can pass options for styling like the color etc and also the id of the column.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heatmap-table-directive"&gt;
  &lt;/a&gt;
  Heatmap Table Directive
&lt;/h3&gt;

&lt;p&gt;This is the main directive where all the work is done. This directive is placed on the table. And the other directives are placed on the column and the cells.&lt;/p&gt;

&lt;p&gt;Here we can see how we can access child directives from the parent directive using &lt;a href="https://angular.io/api/core/ContentChildren#description"&gt;ContentChildren&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[heatMapTable]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HeatmapTableDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;AfterViewInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;descendants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;heatMapCells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- Get all the cells&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HeatmapColumnDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;descendants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;heatMapColumns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HeatmapColumnDirective&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- Get all the columns&lt;/span&gt;

  &lt;span class="nx"&gt;highestValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="nl"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HeatmapColumnDirective&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

  &lt;span class="nx"&gt;ngAfterViewInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heatMapCells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heatMapColumns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calculateHighestValues&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyHeatMap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;calculateHighestValues&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heatMap&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heatMap&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;?.[&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heatMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;applyHeatMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heatMap&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;getColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseToHsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readableColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me break down the code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#get-access-to-the-cells-and-columns"&gt;
  &lt;/a&gt;
  Get access to the cells and columns
&lt;/h4&gt;

&lt;p&gt;We get access to the cells to which the heatmap needs to be applied:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;descendants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;heatMapCells&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HeatmapCellDirective&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;heatMapCells&lt;/code&gt; variable will have the list of &lt;code&gt;td&lt;/code&gt; to which the &lt;code&gt;heatMapCell&lt;/code&gt; was applied. Make sure to set &lt;code&gt;{ descendants: true }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note: If true include all descendants of the element. If false then only query direct children of the element.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#save-the-options-for-each-column"&gt;
  &lt;/a&gt;
  Save the options for each column
&lt;/h4&gt;

&lt;p&gt;We can save the options provided for each column in an object. Currently, we are only configuring the color, but this object can be used for all kinds of different options for customizing the heatmap for each column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;employees&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contractors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#309c39&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#calculate-the-highest-value-for-each-column"&gt;
  &lt;/a&gt;
  Calculate the Highest Value for each column
&lt;/h4&gt;

&lt;p&gt;We can now calculate the highest value for each column and save it in an object with the &lt;code&gt;colId&lt;/code&gt; as the key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;employees&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1239&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;contractors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;453&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#applying-the-heatmap-styles"&gt;
  &lt;/a&gt;
  Applying the Heatmap styles
&lt;/h4&gt;

&lt;p&gt;We can now loop through the cells and then apply &lt;code&gt;backgroundColor&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; to the cell. Since we have injected the &lt;code&gt;ElementRef&lt;/code&gt; in the cell, we can use the &lt;code&gt;el&lt;/code&gt; property to modify styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a helper function which finds the color for each cell based on the logic we have discussed above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;getColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseToHsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxLightness&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highestValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;bgColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readableColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The color manipulation is done using a super simple library &lt;code&gt;color2k&lt;/code&gt; which provides a lot of utilities to mess with colors.&lt;/p&gt;

&lt;p&gt;We have used something called &lt;code&gt;readableColor()&lt;/code&gt; which returns black or white for best contrast depending on the luminosity of the given color. This will make our heatmap more accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo-and-code"&gt;
  &lt;/a&gt;
  Demo and Code
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/angular-ivy-ohdjff?embed=1&amp;amp;view=preview&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/edit/angular-ivy-ohdjff?file=src/app/heatmap.directive.ts"&gt;Stackblitz Link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;As you can see, there is not much code in the component. All the logic is beautifully handled inside the directive. The only complex stuff going on in the directive is finding the colors. Everything else is straightforward.&lt;/p&gt;

&lt;p&gt;This is a very basic implementation and not perfect too. To make it better, we might have to add some validation and error handling as well. Also, this can be extended by providing more options like Ascending/Descending heatmaps, color ranges, positive and negative heatmaps, and more.&lt;/p&gt;

&lt;p&gt;The whole idea of the blog post is to showcase how a directive can be used for implementing this feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AdiSreyaj"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adisreyaj"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/adithyasreyaj/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://compito.adi.so"&gt;Compito&lt;/a&gt; - Open source project management app&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.buymeacoffee.com/adisreyaj"&gt;Buy Me a Pizza&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do add your thoughts in the comments section.&lt;br&gt;
Stay Safe ❤️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hacktoberfest ASCII Art</title>
      <author>Adrino Rosario</author>
      <pubDate>Tue, 12 Oct 2021 14:04:18 +0000</pubDate>
      <link>https://dev.to/adrinorosario/hacktoberfest-ascii-art-1cbp</link>
      <guid>https://dev.to/adrinorosario/hacktoberfest-ascii-art-1cbp</guid>
      <description>&lt;p&gt;ASCII art is intriguing and wonderful, yet feels sophisticated to create, especially by writing code. But it's not. &lt;/p&gt;

&lt;p&gt;Here is an open-source ASCII Art Generator project written in Python3 that can help you in understanding ASCII Art. You can find it at: &lt;a href="https://github.com/adrinorosario/ASCII_Art"&gt;https://github.com/adrinorosario/ASCII_Art&lt;/a&gt; . Do contribute to it if you find it helpful and star it on GitHub.&lt;/p&gt;

&lt;p&gt;ASCII art or keyboard art is a copy-pasteable digital age art form. It's about making text pictures with text symbols. Basically, the computer identifies each pixel in an image or images and then fills them with a character (example- $), based on various factors like density of pixels, color, etc.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>python</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>4C - The Cool Community of Content Creators</title>
      <author>Francesco Ciulla</author>
      <pubDate>Tue, 12 Oct 2021 13:08:26 +0000</pubDate>
      <link>https://dev.to/francescoxx/4c-the-cool-community-of-content-creators-1oee</link>
      <guid>https://dev.to/francescoxx/4c-the-cool-community-of-content-creators-1oee</guid>
      <description>&lt;p&gt;What do the 4C community members think of the 4C community itself?&lt;br&gt;
Let's ask them.&lt;/p&gt;

&lt;p&gt;Join the community: &lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;https://discord.com/invite/TcmA2kbJeA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ysqRgoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634041616139/LIxgbJOci.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vikkybliz"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/Vikkybliz"&gt;Vikkybliz&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a group for content creators. If you don’t know how to start or you have even started, 4C is a place to interact with other content creators, share tips and tricks, and just chart. The earlier you join the better &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayush-agarwal"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/ayushdev_24"&gt;Ayush Agarwal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you are into content creation and ever felt lonely and unmotivated, You must be a part of 4C. We help each other out , learn lots of new things. And the best part is that we connect weekly where we can share or discuss anything we want. Hope to see you in our community soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sophyia"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/sophiairoegbu_"&gt;Sophyia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Hi Francesco, I'm Sophia Iroegbu. &lt;br&gt;
The community is beautiful and helpful. I have been more confident about tech and tech writing and the community and its members helped me achieve that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#merkim"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/KimMerdi"&gt;Merkim&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C community has been an amazing place so far. Having that opportunity to get knowledge from other content creators has been helpful to me. With open-minded people inside the community, everyone gets additional knowledge from others. I would highly recommend this community!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suraj-kumar-agarwal"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/AgarwalSurajk"&gt;Suraj Kumar Agarwal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C group helped me to reach excellent community members and to learn and explore how groups work together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yash-prakash"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/csandyash"&gt;Yash Prakash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Despite my short time in this community, I’m very impressed by the number of good resources and helpful people there are here. I’m very excited to learn from them as I grow as a developer. The exchange of ideas so far looks and feels very coordinated, and led by my favorite devs from Twitter and YouTube, so I find it very encouraging to learn and give back to the community as well.&lt;/p&gt;

&lt;p&gt;Thanks so much! 😁&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ramya-chinnadurai"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/code_rams"&gt;Ramya Chinnadurai&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a really cool community, and the members here are really friendly. I could see the tremendous support for the hacktoberfest challenge and interactive guidance to solve PRs. I love the &lt;code&gt;count-to-10k&lt;/code&gt; channel, it’s really cool and funny. I would add the number whenever I visit this channel and there are a lot more fantastic additional channels here to explore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#siddharth-shyniben"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/SiddharthShyn"&gt;Siddharth Shyniben&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Even though I’ve only been here for a short time, I can already see the benefits of joining 4C; the viewership and genuine interactions have improved a lot on my blog.&lt;/p&gt;

&lt;p&gt;This is not the only benefit of joining 4C: There are a lot of other things to do. From useful stuff like collaborating, resources, finding work, hacktoberfest to just fun things like a counting channel and off-topic chat.&lt;/p&gt;

&lt;p&gt;If you feel the content you create doesn’t reach anyone, 4C can be a great way to motivate you and spread your content. And if you do reach others, 4C can still help you ;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avneesh-agarwal"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/avneesh0612"&gt;Avneesh Agarwal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a great community for us content creators. We discuss ideas on what and how to create content. We also have a weekly call where we talk about the latest events like hacktoberfest! I have been loving the 4C community so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meenakshi"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/SankarMeenakshi"&gt;Meenakshi &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C community is very supportive and a great platform for collaboration on various activities. It is an exciting space to see developers both new and established lift each other up. I am glad to be a part of this community. It adds great value to anyone who joins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arjun"&gt;
  &lt;/a&gt;
  Arjun
&lt;/h3&gt;

&lt;p&gt;4C has been a great community for me. I have been meeting a lot of new developers, designers, content creators and like-minded people. I have also learned how to work with a team. The people here are super-patient and extremely talented. We discuss topics and events like Hacktoberfest and help each other with their problems. I’ve been loving it and if you join you’ll love it too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#muthu-annamalai-venkatachalam"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/muthuannamalai_"&gt;Muthu Annamalai Venkatachalam&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is everything anyone could ever wish for in a community. Wonderful, supportive, exciting, and a lot to like. The best thing that ever happened to me. All in all, it's a great opportunity to develop your skills, form connections with people in different fields of the community, and give back to the community. Slide into the server and get ready to ride a roller coaster of learning opportunities! I'll always be grateful to this community and will keep contributing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#savvas-stephanides"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/SavvasStephnds"&gt;Savvas Stephanides&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As someone who loves sharing knowledge through blog posts and articles, the tips and inspiration I’ve found from the 4C community have been more than invaluable. I am so thankful this community exists!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eddy-vinck"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/EddyVinckk"&gt;Eddy Vinck&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I love what you're doing with the 4C community, Francesco! Keep it up!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kaarthik"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/MDvlpr"&gt;Kaarthik&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A good community needs to be filled with people who really want to help and grow together. You can expect this from the 4C community. They're very supportive when it comes to helping people create content.&lt;/p&gt;

&lt;p&gt;I feel like 4C community motto: We water you, You water us, Let's grow together.&lt;br&gt;
I’ve been loving it and if you join you’ll love it too :) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#haseeb-udeen"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/HaseebUdeen"&gt;Haseeb Udeen&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a great community of content creators. It keeps me motivated. Every new day when I look at the 4C community, it makes me do something extra to work for my self-branding other than the regular job. The job is fine but it’s not freedom; freedom is working for your own self, not for some giant company. And here at 4C, I get to work for myself and other contributors of the open-source world; and this leads to lasting happiness and cool life where you are not under anyone's pressure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sunrit"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/JanaSunrise"&gt;Sunrit &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is not only a great community for content creators but everyone. Wonderful and incredible community, supportive people, and all the events are superb! Loving all the things that take place, and all the support and love between people, It’s truly amazing. An exciting place to learn, collaborate with people, get to know and connect with people, and a lot more. It’s something more than amazing. Keep up the great work, Proud to be a part of it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#anish-de"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/AnishDe12020"&gt;Anish De&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is a great community for anyone who creates content, be it blog posts or be it videos. It is a great place to learn a lot from a very friendly community and also grow from sharing quality content which someone else might find useful. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#palash"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/palashv2"&gt;Palash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C Community is the best place for Cool Content Creators. Thanks to  Francesco for all the hard work and dedication to building this awesome community! Keep it up!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pratham"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/PrasoonPratham"&gt;Pratham&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I love the effort and care put into making the 4c community, can’t wait to see where this goes next!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wale-adetona"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/waleadetonahq"&gt;Wale Adetona&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C Community is a place to be for anyone looking to connect with the best and like-minds in the tech industry. You won't regret joining, mark my words. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vasanth-srivatsa"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/vsnthdev"&gt;Vasanth Srivatsa&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The 4C Community is really diverse &amp;amp; inclusive. The opportunities are really great, you just need to get involved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sumudu-siriwardana"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/sumusiriwardana"&gt;Sumudu Siriwardana&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;4C is the best community for content creators! I’ve been here for a short time, but I can see the effort and contribution that everyone put in for this community. It’s a great place to learn, collaborate, and share your knowledge with other creators like you. And also we have so much fun here as well. I managed to get into a group call with everyone once and it was fun and productive at the same time. I would love to appreciate Francesco’s effort on building up this community! And if you are looking for a supportive community, this is the place for you, come and join us! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prathamesh-shanbhag"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/Prathamesh_117"&gt;Prathamesh Shanbhag&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Content Creation is hard, especially doing it by yourself &amp;amp; so the community 4C has been such a huge relief &amp;amp; help because now I have people who relate to my situation plus they help me out &amp;amp; I help them out in situations when we need help. Kudos to Francesco for creating such an amazing &amp;amp; collaborative community for content creators!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vivian-plasencia"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/ViviPlasenciaC"&gt;Vivian Plasencia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I'm glad to be a part of the 4C community. It's very supportive and welcoming.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ysqRgoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634041616139/LIxgbJOci.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Join the community: &lt;a href="https://discord.com/invite/TcmA2kbJeA"&gt;https://discord.com/invite/TcmA2kbJeA&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>APIs 101 Using Postman </title>
      <author>Maniprakash123-creator</author>
      <pubDate>Tue, 12 Oct 2021 13:00:48 +0000</pubDate>
      <link>https://dev.to/maniprakash123creator/apis-101-using-postman-4ek7</link>
      <guid>https://dev.to/maniprakash123creator/apis-101-using-postman-4ek7</guid>
      <description>&lt;p&gt;7 th of October 2021 I have attended "APIs 101 Using Postman" workshop organised by the Postman Student Experts &lt;a class="mentioned-user" href="https://dev.to/zeoshark"&gt;@zeoshark&lt;/a&gt;
 and Swastik Mishra from ITER SOA virtually on YouTube live. It was a great experience overall and I learn about Postman APIs. Workshop covered basic request methods that are GET, POST ,PUT and DELETE along with data retrieval in JSON format. All these methods were explained in fun manner with examples in which ever member can create their IDs and posts their fun jokes individually.&lt;br&gt;
Overall it was an overwhelming experience to attend this learning along with fun. Kudos to the Postman Student Experts &lt;a class="mentioned-user" href="https://dev.to/zeoshark"&gt;@zeoshark&lt;/a&gt;
 and Swastik Mishra.&lt;br&gt;
Thank you  for the opportunity &lt;a class="mentioned-user" href="https://dev.to/zeoshark"&gt;@zeoshark&lt;/a&gt;
 and @Swastik Mishra .....&lt;br&gt;
Waiting for swags eagerly 😍🤩&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Automatically organize imports</title>
      <author>Tony Hicks</author>
      <pubDate>Tue, 12 Oct 2021 13:00:40 +0000</pubDate>
      <link>https://dev.to/tonyhicks20/automatically-organize-imports-dmj</link>
      <guid>https://dev.to/tonyhicks20/automatically-organize-imports-dmj</guid>
      <description>&lt;p&gt;While refactoring your javascript/typescript code it's easy to remove things but forget to get rid of the unused imports.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hHymgPer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfb04yf67dur21b7gotn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hHymgPer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfb04yf67dur21b7gotn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In VSCode, you can easily remove these with the shortcut : Shift + Alt + O. &lt;br&gt;
This is sometimes easy to forget to do though, and wouldn't it be better if there was some way to do this automatically every time you save? &lt;/p&gt;

&lt;p&gt;In VSCode, go to File -&amp;gt; Preferences -&amp;gt; Settings and click on the icon in the top right hand corner to open up the settings in JSON.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icIjwqpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9eab8h2071qde0goq7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icIjwqpl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9eab8h2071qde0goq7z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the following json:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"editor.codeActionsOnSave": {
    "source.organizeImports": true
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that it looks something like the following: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhBbTEzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojdjwjz7fs2svtz6nnkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhBbTEzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojdjwjz7fs2svtz6nnkp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Et voilà! &lt;br&gt;
Your imports will now be organized every time you save a file. &lt;br&gt;
Enjoy :-)&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>tip</category>
    </item>
    <item>
      <title>The Importance of Representation</title>
      <author>Josefine Schfr</author>
      <pubDate>Tue, 12 Oct 2021 12:59:38 +0000</pubDate>
      <link>https://dev.to/s2engineers/the-importance-of-representation-1i22</link>
      <guid>https://dev.to/s2engineers/the-importance-of-representation-1i22</guid>
      <description>&lt;p&gt;Today, on &lt;strong&gt;Ada Lovelace Day&lt;/strong&gt;, we are celebrating women in STEM - and while we have come a  &lt;del&gt;far&lt;/del&gt; well ... a way since Ada wrote the first ever computer program in 1843, there is still a lot to do.  &lt;/p&gt;

&lt;p&gt;Lately, I have been reminded of the importance of representation quite a lot. We keep discussing why less women sign up to study computer science, why we have fewer applicants from non-male developers and why it’s apparently “so difficult to diversify staff” (imagine me rolling my eyes here). &lt;strong&gt;Yet we fail to accommodate the few folks that were brave enough to join this industry.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;I’m tired of explaining why we need equal pay, equal recognition, equal opportunities &amp;amp; challenges - and I can only imagine how those who have been part of this battle much, much longer are feeling. Or why are not willing to continue the fight. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I love the support among women and other underrepresented groups in the tech community.&lt;/strong&gt; It’s one of the reasons I got in and am still here. But it can’t be all we got - we need representation. We need people who look and think like us at the top. In the middle. In all the damn places. And &lt;strong&gt;we need allies.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Take today as a reminder to value all the great women in tech - to celebrate Ada Lovelace and all that came after her and are yet to come. &lt;strong&gt;Make sure they know.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GdAcDrT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://1.bp.blogspot.com/-dtZsgEkZLIs/VAGRofvh-mI/AAAAAAAALCI/owNqmsalzXE/s1600/Amazing-Women-of-History_AdaLovelaceGIF8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GdAcDrT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://1.bp.blogspot.com/-dtZsgEkZLIs/VAGRofvh-mI/AAAAAAAALCI/owNqmsalzXE/s1600/Amazing-Women-of-History_AdaLovelaceGIF8.gif" alt="Ada Lovelace Gif"&gt;&lt;/a&gt;&lt;br&gt;
Artwork by the &lt;a href="http://amazingwomenofhistory.blogspot.com/2014/08/ada-lovelace-free-artwork-links.html"&gt;Amazing Women of History&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are not sure how, here is a &lt;a href="https://rapidapi.com/blog/seven-ways-to-celebrate-ada-lovelace-day/"&gt;list of seven ways to celebrate Ada Lovelace Day&lt;/a&gt;, &lt;strong&gt;including a list of videos to binge, tips on where you can donate to support women in STEM and a little guidance on how to diversify / audit your Twitter feed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What great achievements by women in this industry are you celebrating today? Happy Ada Lovelace Day, let’s make it count!💜&lt;/p&gt;

</description>
      <category>womenintech</category>
      <category>adalovelace</category>
      <category>codeiscolorful</category>
    </item>
    <item>
      <title>Avoiding the Reason 92% of SaaS Companies Fail</title>
      <author>Jeffrey Fate</author>
      <pubDate>Tue, 12 Oct 2021 12:50:57 +0000</pubDate>
      <link>https://dev.to/jeffreyfate/avoiding-the-reason-92-of-saas-companies-fail-5el</link>
      <guid>https://dev.to/jeffreyfate/avoiding-the-reason-92-of-saas-companies-fail-5el</guid>
      <description>&lt;p&gt;&lt;em&gt;The questions I'm answering as the first step in building a SaaS in 2021.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The employee to business owner transition is awkward and uncomfortable. Worse is making that transition and failing due to the primary downfall of SaaS companies: lack of product market fit.&lt;/p&gt;

&lt;p&gt;Obvious problem? Yes. Obvious solution? Not really.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#questions-im-asking-to-find-product-market-fit"&gt;
  &lt;/a&gt;
  Questions I'm asking to find product market fit
&lt;/h2&gt;

&lt;p&gt;Creating software as an employee is the ONLY part, but now that is just the easy part. The hard part is answering these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Who am I helping?&lt;/li&gt;
&lt;li&gt;What do they need?&lt;/li&gt;
&lt;li&gt;What are they willing to pay for?&lt;/li&gt;
&lt;li&gt;Is there competition?&lt;/li&gt;
&lt;li&gt;How can I attract people?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#who-am-i-helping"&gt;
  &lt;/a&gt;
  Who am I helping?
&lt;/h2&gt;

&lt;p&gt;I've struggled with this for a long time now. My first try at business was in the summer of 2020. I found my first 3 clients in a couple of weeks because I hustled. I helped each of them toward a goal. I was a health coach and the business didn't fit my personality. Building a customized, healthy lifestyle is incredibly important, but I really love working with other developers.&lt;/p&gt;

&lt;p&gt;Developers have lots to do with limited time. Work. Learning. A personal life. Parenthood. I must be able to help devs who are burned out, looking for the next level, or trying to get better at life.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-they-need"&gt;
  &lt;/a&gt;
  What do they need?
&lt;/h2&gt;

&lt;p&gt;Ok, this one is harder. Actually, this is probably the hardest question (combined with the next one). I think I know what developers need because I am one.&lt;/p&gt;

&lt;p&gt;Shortcuts.&lt;/p&gt;

&lt;p&gt;All developers need shortcuts of one type or another. Really, this is developer experience. Maybe not the way some people think about it, but that's what it is. What shortcuts do they need most? That leads us to...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-they-willing-to-pay-for"&gt;
  &lt;/a&gt;
  What are they willing to pay for?
&lt;/h2&gt;

&lt;p&gt;TODO.&lt;/p&gt;

&lt;p&gt;Seriously, I don't know what most developers will pay for. The only thing I have to go with is a shortcut to get the correct time zone. This came from a recent episode of The Art of Product, straight from Derrick Reimer's mouth:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pca.st/l5bhzmz4#t=32m41s"&gt;187: Wait, There Are How Many Time Zones?! - The Art of Product&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm not taking this idea too seriously. I think of it as a small bet, an experiment, and a way to get my feet wet building a SaaS business. Will someone pay for a quicker, easier, better way to find the correct time zone? I'll build the MVP and find out.&lt;/p&gt;

&lt;p&gt;All the content I've consumed on the topic says I should validate the idea better. But, I'm biasing toward action and speed over accuracy on this one. Maybe I'll find that was the wrong path and correct for it next time. Experiment and learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-there-competition"&gt;
  &lt;/a&gt;
  Is there competition?
&lt;/h2&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;There's &lt;a href="https://dev.timeanddate.com/time/pricing"&gt;timeanddate.com&lt;/a&gt; and &lt;a href="http://worldtimeapi.org/"&gt;worldtimeapi.org&lt;/a&gt; and of course &lt;a href="https://developers.google.com/maps/documentation/timezone/overview"&gt;Google&lt;/a&gt;. People must need this problem solved. The key is finding a way to be different enough and add some value that none of the other services have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-attract-people"&gt;
  &lt;/a&gt;
  How can I attract people?
&lt;/h2&gt;

&lt;p&gt;I have a few ideas about this. Demonstrating the utter rediculousness of time zones is one path. For example, the way time zones are always changing and how it makes development harder. Take this example:&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzFs2I5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAv7UPuVEAA87S9.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--sS_bPZiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1369555721033904131/SkcVjCe3_normal.jpg" alt="Maz Jovanovich profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Maz Jovanovich
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @maz_jovanovich
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      PSA: As of today, Australia has 5 time zones once again. Apologies in advance to our overseas friends trying to make sense of this temporal anarchy. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:47 AM - 03 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1444524436548296705" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
Do developers really want to take an extra day or two to add logic for the correct time in Brisbane on January 15th, and also Melbourne, and every other location in all of Australia? Every location in all of the world?

&lt;p&gt;Probably not.&lt;/p&gt;

&lt;p&gt;If I can make this explanation funny and entertaining as well as persuasive, I think it will make many people realize how crazy it is to reinvent the time zone wheel. Why not pay for a shortcut?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;

&lt;p&gt;Find some developers to interview. I really need to get some answers to what developers will pay for. The best way to do this is one-on-one interviews. Perhaps nobody wants a time zone solution. Maybe there is a different common problem that I can help solve. Time to get to work.&lt;/p&gt;

&lt;p&gt;What did I miss? I'm new at this, so please leave comments to plug holes in my strategy. Feedback always appreciated!&lt;/p&gt;

</description>
      <category>saas</category>
      <category>startup</category>
    </item>
    <item>
      <title>Free React Admin Dashboard with Recharts Template</title>
      <author>Kishan Sheth</author>
      <pubDate>Tue, 12 Oct 2021 12:33:23 +0000</pubDate>
      <link>https://dev.to/koolkishan/free-react-admin-dashboard-with-recharts-template-87k</link>
      <guid>https://dev.to/koolkishan/free-react-admin-dashboard-with-recharts-template-87k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-can-get-the-template-from-the-link-proivided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  You can get the template from the link proivided in the description of the video.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#technologies-used-"&gt;
  &lt;/a&gt;
  Technologies Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;REACT&lt;/li&gt;
&lt;li&gt;SASS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#libraries-and-assets-used-"&gt;
  &lt;/a&gt;
  Libraries and Assets Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Node Sass&lt;/li&gt;
&lt;li&gt;React Icons&lt;/li&gt;
&lt;li&gt;Recharts&lt;/li&gt;
&lt;li&gt;Google Fonts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-learn-how-to-create-this-template-watch-the-complete-video-you-can-get-the-template-for-free-from-the-link-provided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  To learn how to create this template watch the complete video. You can get the template for free from the link provided in the description of the video.
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S3PpDpEeer8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-do-like-the-video-and-subscribe-to-the-channel-it-helps-and-motivates-me-to-create-more-content-like-this"&gt;
  &lt;/a&gt;
  Please do like the video and subscribe to the channel. It helps and motivates me to create more content like this.
&lt;/h2&gt;

</description>
      <category>html</category>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Use Cypress with Next.js and Nx to battle test your React Components</title>
      <author>Juri Strumpflohner</author>
      <pubDate>Tue, 12 Oct 2021 12:25:07 +0000</pubDate>
      <link>https://dev.to/nx/use-cypress-with-next-js-and-nx-to-battle-test-your-react-components-dij</link>
      <guid>https://dev.to/nx/use-cypress-with-next-js-and-nx-to-battle-test-your-react-components-dij</guid>
      <description>&lt;p&gt;In the &lt;a href="https://juristr.com/blog/2021/08/nextjs-storybook-tailwind-nx/"&gt;previous article&lt;/a&gt;, we talked about how Nx comes with first-class support for setting up Storybook. Nx also automatically generates Cypress e2e tests for the various Storybook stories, which is exactly what we're going to explore in this article.&lt;/p&gt;

&lt;p&gt;Adding automated tests for our personal blog platform is probably overkill and most people wouldn't probably do. One of the key benefits of Nx is that it automatically integrates a variety of tools. So far in the series, we've seen&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;automated setup of Next.js apps with TypeScript support&lt;/li&gt;
&lt;li&gt;allowing to split your application logic into separate libraries and seamlessly integrate them into an application, in our case a Next.js based one&lt;/li&gt;
&lt;li&gt;integrating Storybook with React components and TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By having Nx generate these configs for you, you don't have to deal with the complexity of setting up all these tools. Also, it will lower the entry barrier and friction for developers to start using them. Such as the automated Cypress setup. I probably wouldn't write Cypress tests for my personal blog platform, but given the hard task of setting everything up is already done, what's left is really only to write some high-level tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-cypress-e2e-tests-for-your-nextjs-application"&gt;
  &lt;/a&gt;
  Writing Cypress e2e tests for your Next.js application
&lt;/h2&gt;

&lt;p&gt;Right at the very beginning of this series when we &lt;a href="https://juristr.com/blog/2021/06/create-nextjs-webapp-nx/"&gt;generated our Nx workspace with the Next.js preset&lt;/a&gt;, you might have noticed that we also got a &lt;code&gt;apps/site-e2e&lt;/code&gt; folder setup automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K6HOKkyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://juristr.com/blog/assets/imgs/nextjs-nx-series/next-cypress-e2e-folderstructure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K6HOKkyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://juristr.com/blog/assets/imgs/nextjs-nx-series/next-cypress-e2e-folderstructure.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nx also generated a default Cypress spec file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// apps/site-e2e/src/integration/app.spec.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getGreeting&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../support/app.po&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;site&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should display welcome message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Custom command example, see `../support/commands.ts` file&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-email@something.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Function helper example, see `../support/app.po.ts` file&lt;/span&gt;
    &lt;span class="nx"&gt;getGreeting&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome to site!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run the Next.js app Cypress tests very much the same way as we did for our Storybook Cypress tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx nx e2e site-e2e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obviously, they might not pass successfully right now since we've modified the initially generated application. Let's fix them and to make an example, let's test whether our &lt;a href="https://juristr.com/blog/2021/06/read-render-markdown-nextjs-and-nx/"&gt;markdown rendered article we've covered in a previous post&lt;/a&gt;, renders properly at &lt;code&gt;/articles/dynamic-routing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0z8_uWu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://juristr.com/blog/assets/imgs/nextjs-nx-series/nextjs-cypress-article-to-test.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0z8_uWu5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://juristr.com/blog/assets/imgs/nextjs-nx-series/nextjs-cypress-article-to-test.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we want to test is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When navigating to &lt;code&gt;/articles/dynamic-routing&lt;/code&gt;, the page loads properly.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;h1&lt;/code&gt; contains the expected title of the article.&lt;/li&gt;
&lt;li&gt;the embedded Youtube component we talked about in the article about &lt;a href="https://juristr.com/blog/2021/07/component-hydration-nextjs-nx/"&gt;component hydration with MDX&lt;/a&gt; renders properly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can launch Cypress in "watch mode" such that we can see the test running as we make adjustments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx nx e2e site-e2e &lt;span class="nt"&gt;--watch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's modify the existing &lt;code&gt;apps/site-e2e/src/integration/app.spec.ts&lt;/code&gt; file to implement the Cypress test.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;, you might want to create a dedicated spec file for testing the article loading, while the &lt;code&gt;app.spec.ts&lt;/code&gt; might be more suitable for loading more high-level things about the web app. Like whether the navbar loads etc. But for the purpose of demoing the Cypress integration quickly, it works 🙂.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's the modified test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// apps/site-e2e/src/integration/app.spec.ts&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;site&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// navigate to an example article&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/articles/dynamic-routing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render the title of the article&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;contain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dynamic Routing and Static Generation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should properly render the Youtube component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;iframe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have a look at the Cypress runner, you should see it pass properly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SL2XFnur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://juristr.com/blog/assets/imgs/nextjs-nx-series/nextjs-cypress-run.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SL2XFnur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://juristr.com/blog/assets/imgs/nextjs-nx-series/nextjs-cypress-run.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-cypress-e2e-tests-for-our-previously-created-storybook-stories"&gt;
  &lt;/a&gt;
  Writing Cypress e2e tests for our previously created Storybook stories
&lt;/h2&gt;

&lt;p&gt;Similarly to the Next.js app based e2e tests, Nx also generated e2e tests specifically for our Storybook setup, which we generated in the &lt;a href="https://juristr.com/blog/2021/08/nextjs-storybook-tailwind-nx/"&gt;previous article&lt;/a&gt;. All those tests reside in the &lt;code&gt;apps/storybook-e2e/ui-e2e&lt;/code&gt; folder. The reason why they are in a separate "storybook-e2e" folder is because I specifically passed that as the Cypress directory when generating the Storybook setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLYbfqX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://juristr.com/blog/assets/imgs/nextjs-nx-series/storybook-e2e-treeview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLYbfqX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://juristr.com/blog/assets/imgs/nextjs-nx-series/storybook-e2e-treeview.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The default Cypress spec generated by Nx is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// apps/storybook-e2e/ui-e2e/src/integration/topic-button/topic-button.spec.ts&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shared-ui: TopicButton component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/iframe.html?id=topicbutton--primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render the component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;contain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome to TopicButton!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a couple of things to notice here in terms of the testing strategy. What Nx leverages here when generating the Storybook tests, is &lt;a href="https://storybook.js.org/docs/react/workflows/interaction-testing"&gt;Storybook's interaction testing&lt;/a&gt; functionality. That feature allows to directly target the story rendering via a URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/iframe.html?id=topicbutton--primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Furthermore, we can control the different component props variation by leveraging the possibility to also pass the &lt;a href="https://storybook.js.org/docs/react/writing-stories/args#setting-args-through-the-url"&gt;Story args via the URL&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/iframe.html?id=topicbutton--primary&amp;amp;args=topicName:Next.js;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Having that knowledge we can easily develop our Cypress test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-storybook-cypress-e2e-tests"&gt;
  &lt;/a&gt;
  Launch Storybook Cypress e2e tests
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;npx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;nx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;e&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;storybook-e&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;e-ui-e&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;--watch&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By passing the &lt;code&gt;--watch&lt;/code&gt; flag, we can interact with the Cypress runner which is handy during development. Without the flag, the e2e tests will run in headless mode which is suitable for CI.&lt;/p&gt;

&lt;p&gt;When you launch this command, behind the scenes, Nx serves our Storybook for the &lt;code&gt;shared/ui&lt;/code&gt; library, followed by launching Cypress and making sure it points to the local Storybook server.&lt;/p&gt;

&lt;p&gt;Obviously running the Cypress e2e now wouldn't really work as we've changed the implementation of our React component meanwhile. So let's fix that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-the-cypress-test-for-our-storybook-story"&gt;
  &lt;/a&gt;
  Implementing the Cypress test for our Storybook story
&lt;/h2&gt;

&lt;p&gt;We want to have two different test cases for our simple Topic Button component:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;make sure it renders the passed &lt;code&gt;topicName&lt;/code&gt; properly&lt;/li&gt;
&lt;li&gt;make sure it passes the topic name to the event handler when clicking on the Topic button component&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#test-case-1"&gt;
  &lt;/a&gt;
  Test case 1
&lt;/h3&gt;

&lt;p&gt;In order to have "hook points" that can be grabbed during the Cypress test run, it is &lt;a href="https://docs.cypress.io/guides/references/best-practices#Selecting-Elements"&gt;good practice&lt;/a&gt; to use &lt;code&gt;data-testid&lt;/code&gt; attributes on the DOM elements which we want to use in our test implementation. Thus, we need to change our &lt;code&gt;topic-button.tsx&lt;/code&gt; and add one to the rendering element of our &lt;code&gt;topicName&lt;/code&gt; as well as to the entire topic button div:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// libs/shared/ui/src/lib/topic-button/topic-button.tsx&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TopicButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TopicButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
      &lt;span class="err"&gt;...&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;testid&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"topicButton"&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-12"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"p-5"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-bold text-4xl"&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;testid&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"topicName"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;topicName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in our test case, we use &lt;a href="https://storybook.js.org/docs/react/writing-stories/args#setting-args-through-the-url"&gt;set the Story args via the URL&lt;/a&gt;, in this case passing first &lt;code&gt;topicName:Next.js&lt;/code&gt;, and then we verify whether the &lt;code&gt;[data-testid=topicName]&lt;/code&gt; element contains the correct name. And to be sure, we also change it to &lt;code&gt;React&lt;/code&gt;and assert those changes are reflected in the rendering&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// apps/storybook-e2e/ui-e2e/src/integration/topic-button/topic-button.spec.ts&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shared-ui: TopicButton component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render the topic name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/iframe.html?id=topicbutton--primary&amp;amp;args=topicName:Next.js;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-testid=topicName]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;contain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/iframe.html?id=topicbutton--primary&amp;amp;args=topicName:React;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-testid=topicName]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;contain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-case-2"&gt;
  &lt;/a&gt;
  Test case 2
&lt;/h3&gt;

&lt;p&gt;Back when implementing our &lt;code&gt;topic-button.stories.tsx&lt;/code&gt; we added a feature to the story that registers to the &lt;code&gt;TopicButton&lt;/code&gt;'s &lt;code&gt;onClick&lt;/code&gt; event and renders the result directly below the button. This makes it particularly easy to test it in our Cypress test. To make it easy to grab the according DOM element in our Cypress test, we add another &lt;code&gt;data-testid="click-result"&lt;/code&gt; to that element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// libs/shared/ui/src/lib/topic-button/topic-button.stories.tsx&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; 

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TopicButtonProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;clickedTopic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClickedTopic&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-gray-100 p-20"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TopicButton&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topicName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setClickedTopic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topicName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickedTopic&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;testid&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"click-result"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Button has been clicked: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickedTopic&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Primary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
&lt;span class="nx"&gt;Primary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;topicName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Next.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;topic-button.spec.ts&lt;/code&gt; we add another test case, set the &lt;code&gt;topicName&lt;/code&gt; to &lt;code&gt;React&lt;/code&gt;, click the topic button component and verify the output matches our expectations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// apps/storybook-e2e/ui-e2e/src/integration/topic-button/topic-button.spec.ts&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shared-ui: TopicButton component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render the topic name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clicking the icon should properly pass the name of the topic to the event handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/iframe.html?id=topicbutton--primary&amp;amp;args=topicName:React;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-testid=topicButton]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-testid=click-result]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;contain&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-cypress-tests"&gt;
  &lt;/a&gt;
  Running Cypress tests
&lt;/h2&gt;

&lt;p&gt;Finally we can run the Cypress tests again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;nx&lt;/span&gt; &lt;span class="nx"&gt;e2e&lt;/span&gt; &lt;span class="nx"&gt;storybook&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;e2e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;e2e&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;watch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




  
Your browser does not support the video tag.


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article we learned&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How Nx is able to automatically generates a Cypress e2e test for our Nx apps as well as our Storybook stories&lt;/li&gt;
&lt;li&gt;How the Cypress setup works&lt;/li&gt;
&lt;li&gt;How to implement a simple Cypress test for our Next.js app&lt;/li&gt;
&lt;li&gt;How to implement the Cypress e2e test for our Topic button story&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://storybook.js.org/docs/react/workflows/interaction-testing"&gt;https://storybook.js.org/docs/react/workflows/interaction-testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://storybook.js.org/docs/react/writing-stories/args#setting-args-through-the-url"&gt;https://storybook.js.org/docs/react/writing-stories/args#setting-args-through-the-url&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.cypress.io/guides/references/best-practices#Selecting-Elements"&gt;https://docs.cypress.io/guides/references/best-practices#Selecting-Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GitHub repository&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the sources for this article can be found in this GitHub repository's branch: &lt;a href="https://github.com/juristr/blog-series-nextjs-nx/tree/08-storybook-cypress-tests"&gt;https://github.com/juristr/blog-series-nextjs-nx/tree/08-storybook-cypress-tests&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>react</category>
      <category>storybook</category>
    </item>
    <item>
      <title>Css Button | Css Custom Checkbox Style With 3D Toggle Effect 2021</title>
      <author>Sadee</author>
      <pubDate>Tue, 12 Oct 2021 12:24:44 +0000</pubDate>
      <link>https://dev.to/codewithsadee/css-button-css-custom-checkbox-style-with-3d-toggle-effect-2021-53c7</link>
      <guid>https://dev.to/codewithsadee/css-button-css-custom-checkbox-style-with-3d-toggle-effect-2021-53c7</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OpbbPLPqSDc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Css Button | Css Custom Checkbox Style With 3D Toggle Effect 2021&lt;/p&gt;

&lt;p&gt;Today, we'll go through how to create css custom checkbox style with 3d toggle effect step by step.&lt;br&gt;
If you're new here, make sure to Subscribe my youtube channel.&lt;/p&gt;

&lt;p&gt;🅰️ | Get the font I used&lt;br&gt;
→  M Plus Rounded 1c : &lt;a href="https://fonts.google.com/specimen/M+PLUS+Rounded+1c?query=m+plu"&gt;https://fonts.google.com/specimen/M+PLUS+Rounded+1c?query=m+plu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❤️ | Interested in seeing more videos? SUBSCRIBE NOW&lt;br&gt;
→  &lt;a href="https://bit.ly/3m4UgF5"&gt;https://bit.ly/3m4UgF5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👤 | Like - Follow &amp;amp; Subscribe&lt;br&gt;
→  Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
→  Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
→  YouTube : &lt;a href="https://bit.ly/3m4UgF5"&gt;https://bit.ly/3m4UgF5&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Caching XHR Responses in Local Storage</title>
      <author>Dave Cozens</author>
      <pubDate>Tue, 12 Oct 2021 12:23:49 +0000</pubDate>
      <link>https://dev.to/davecozens/caching-xhr-responses-in-local-storage-3g33</link>
      <guid>https://dev.to/davecozens/caching-xhr-responses-in-local-storage-3g33</guid>
      <description>&lt;p&gt;So, I've been working on my site recently - &lt;a href="https://uktidetimes.com/"&gt;https://uktidetimes.com/&lt;/a&gt; - and it occurred to me that since I'm serving content that only changes once a day, there's really no reason for the same user to repeatedly hit the service. &lt;/p&gt;

&lt;p&gt;I was already using Axios for my XHR requests, so I've put together an NPM module that wraps Axios but adds additional caching capabilities using local storage in the browser.&lt;/p&gt;

&lt;p&gt;There's two primary benefits to this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It reduces the amount of traffic to my API (which is running on AWS Lambda) - therefore reducing costs.&lt;/li&gt;
&lt;li&gt;It improves load time for the user if they've already views this data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/xhr-cache-with-ttl"&gt;https://www.npmjs.com/package/xhr-cache-with-ttl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a coder, I obviously want to do as little typing as possible so I wanted to take the approach of wrapping a known-awesome HTTP request library (in this case Axios) because most of the work has been done already. Nobody wants to reinvent that wheel today, thank you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function xhrCache(method, url, options = {}) {
    return new Promise(function (resolve, reject) {
        axios[method](url, options).then((res) =&amp;gt; {
            resolve(res)
        })
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice and easy. Axios wrapped in a promise, passing through the method, URL and options attributes that it already uses.&lt;/p&gt;

&lt;p&gt;This just left me to throw together a basic caching mechanism.&lt;/p&gt;

&lt;p&gt;I decided that I'd create two keys in local storage per cached request - one for the metadata (TTL and timestamp) and one for the response. This avoids a potentially heavy deserialisation cost of expired cache items.&lt;/p&gt;

&lt;p&gt;I'm using the URL of the request as part of the key in local storage. This helps with diagnosing any issues but there's an argument for hashing it for brevity (and differentiating more complex requests). Maybe for another day.&lt;/p&gt;

&lt;p&gt;The flow of the function is nice and simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (cache exists &amp;amp;&amp;amp; cache not expired){
    return cached content
} else {
    fetch content using Axios
    cache content
    return content
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The whole thing comes in at less than 100 lines of code, and it's open source so feel free to make off with it :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/davecozens/xhr-cache-with-ttl"&gt;https://github.com/davecozens/xhr-cache-with-ttl&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
