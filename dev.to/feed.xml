<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Root LG Stylo 2 Device With PC?</title>
      <author>Safe Box Guide</author>
      <pubDate>Mon, 27 Dec 2021 10:34:29 +0000</pubDate>
      <link>https://dev.to/box_guide/how-to-root-lg-stylo-2-device-with-pc-1eef</link>
      <guid>https://dev.to/box_guide/how-to-root-lg-stylo-2-device-with-pc-1eef</guid>
      <description>&lt;h2&gt;&lt;span&gt;Guide To Root LG Stylo 2 Device&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;As you know, before installing recovery, you need to root your device. You don't need any PC/laptop to root the LG Stylo 2 device. Just follow our steps to root LG Stylo 2 without a PC.&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;Vital Steps&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;span&gt;These steps are the same for installing recovery and rooting. &lt;/span&gt; &lt;span&gt;You need to enable the developer option and also Unlock OEM unlock. Now you're good to go.&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;&lt;span&gt;Steps To Root LG Stylo 2 Without PC&lt;/span&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;span&gt;First, Download the &lt;/span&gt;&lt;span&gt;&lt;a href="https://twrpupdate.com/download-latest-magisk-zip/"&gt;latest magisk zip&lt;/a&gt;&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Switch off your LG Stylo 2 Device and boot into the recovery mode.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Now Press and hold the &lt;span&gt;volume up + Power button&lt;/span&gt;, and don't leave until you see the boot logo. And always note down, don't release the volume up buttons until the TWRP mode open in the device.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Next, Tap on install and select the downloaded magisk zip file.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Now your device screen will look like this below screenshot.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span&gt;As you'll see, the button on your screen, i.e., "&lt;span&gt;Swipe to confirm flash&lt;/span&gt;," Right! Just Swipe up, and you're done. Congrats, you have successfully Root your LG Stylo 2 device.&lt;/span&gt; &lt;span&gt;You clear the first barrier to install recovery. &lt;/span&gt; Hope you enjoy this article.&lt;/p&gt;

</description>
      <category>android</category>
      <category>root</category>
    </item>
    <item>
      <title>DevOps Myths! Are these true?
</title>
      <author>aashiya123</author>
      <pubDate>Mon, 27 Dec 2021 09:56:50 +0000</pubDate>
      <link>https://dev.to/aashiya123/devops-myths-are-these-true-4bjl</link>
      <guid>https://dev.to/aashiya123/devops-myths-are-these-true-4bjl</guid>
      <description>&lt;p&gt;Irrespective of many DevOps myths around the market, it is still deployed to achieve effective decision making. DevOps definition may vary from company to company, thus results in a different way of implementation. DevOps tends to improve the speed and quality of the software delivery process with agile technology, but it may not work in the same way. DevOps results are significant when it is appropriately implemented and can improve the working within the organization. &lt;/p&gt;

&lt;p&gt;But before we implement it, we need to understand what it means to the organization and how we want it to impact our work. So we have to consider and understand the myths that are revolving around the market. We have discussed a few of them in detail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth 1- DevOps is a replacement for Agile.&lt;/strong&gt;&lt;br&gt;
It is not entirely true that DevOps is a replacement, but it is more a successor to Agile that has overcome some of the hindrances using Agile. With time, Agile has been evolved and grown with some of the challenges, which later on optimized with DevOps. Agile lacks communications among different team members working on various project stages resolved by DevOps and saves the team morale without any blame game. Unlike Agile, a DevOps service engineer will perform activities from developing to deploying code into production.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth 2- DevOps implementation may vary from project to project&lt;/strong&gt;&lt;br&gt;
Though every project has different requirements and demands from the coding, testing, and deployment perspective, so DevOps practice must be flexible so that every team can adapt accordingly. If you have the proper understanding of the DevOps procedure, only you will be able to implement it efficiently based on different project needs. But the working process will be the same if you are implementing DevOps as the procedure are standard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth 3- DevOps deals with automated tools&lt;/strong&gt;&lt;br&gt;
DevOps is an approach that provides you with a different way to deploy and manage your applications and project. DevOps comes with many practices like collaboration, CI/CD, and continuous testing, which need to be understood for implementation. Well, the DevOps procedure can be implemented using various tools like JIRA, Git Hub, Chef, Puppet, and many more. But you will be able to perform the DevOps process efficiently when you know how to leverage and optimize these tools. So, DevOps is all about methodology and standard procedures that need to be followed irrespective of the provided toolset.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth 4- Error rates tend to raise using DevOps&lt;/strong&gt;&lt;br&gt;
Well, DevOps is an approach where you follow procedures to get immediate feedback about your application code. This will intend to discover more errors than before to make the application completely error-free. This will, in turn, log several mistakes than before, which is obvious. Many organizations feel using DevOps raising the level of accounted errors without even realizing that the mistakes have always been there. Still, with the DevOps approach, errors are now coming up to the surface more clearly. In this way, you will get the learning and a way to remove all possible errors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth 5- Automation will overcome all hindrances.&lt;/strong&gt;&lt;br&gt;
DevOps offers you benefits like automating the deployment process, but it will not completely solve all the problems. Automating the continuous integration and deployment process will be efficient to some extent as it is applicable for one or two stages of the software delivery process. DevOps process requires team collaboration; otherwise, automating the process at one stage will move all the bottlenecks to another stage. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth 6- DevOps means NoOps&lt;/strong&gt;&lt;br&gt;
It is a myth that DevOps has nothing to do with IT operations. It is because mostly DevOps is more dedicated to deploy codes and maintain service levels. But, we cannot say that the development part is overpowering IT operational services. If we want to leverage DevOps completely to get instant feedback, speed, and quality, IT operations have a significant role in implementing it. There is also a great dependency of DevOps on IT services to get the work done in lead time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth 7- DevOps is not suitable for large and complex systems.&lt;/strong&gt;&lt;br&gt;
Working with a complex system requires team collaboration on a large scale to get the work done efficiently. DevOps comes with the benefit of collaborating, integrating, and integration features, making it suitable for large projects. However, the complex system has various demands of software and hardware pertaining to different delivery cycles, which is also handled by DevOps with excellent coordination.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>java</category>
      <category>cloud</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Reasons Why You Should Prefer PHP for Website Development</title>
      <author>Freita Browning</author>
      <pubDate>Mon, 27 Dec 2021 09:53:19 +0000</pubDate>
      <link>https://dev.to/freita_browning/5-reasons-why-you-should-prefer-php-for-website-development-4c46</link>
      <guid>https://dev.to/freita_browning/5-reasons-why-you-should-prefer-php-for-website-development-4c46</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bsQmSzo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8os3jstthpbks3eq1wt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bsQmSzo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8os3jstthpbks3eq1wt.jpg" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
PHP has emerged as a leading technology for creating dynamic and static websites and web applications. And, there are lots of websites or web app already using PHP today. PHP is a popular server-side scripting language offering several benefits in website development. If you want to develop a complete website or web application for your business, you can choose PHP for creating the desired solution. Indeed, PHP provides several benefits over other web development technologies to develop well-customized solutions. There are many reasons you should choose PHP web development to create your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-the-five-reasons-for-choosing-php-for-web-development"&gt;
  &lt;/a&gt;
  Here are the five reasons for choosing PHP for web development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Open-source and free&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PHP, which is an acronym for Hypertext Preprocessor, is a free and open-source technology. Since it is a free technology, everyone can use this tech without incurring any cost or having a paid license. Like any other open-source technology, PHP has a cost-benefit for any business to create various web solutions. You can choose a reliable PHP development service to create the desired web solutions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Support multiple platforms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PHP is a cross-platform technology that means it is supported on different types of operating systems. It is fully compatible with major operating systems and many servers. Hence, PHP scripts can run on most major servers, making it easy to develop web applications on various servers. So, PHP's multi-server and multi-platform compatibility make it a preferred choice for web development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Flexible and dynamic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PHP is a flexible technology because of its open-source nature. It allows web developers to build customized solutions. PHP-based websites and web applications are also secure because it offers numerous security features such as fool-proof encryption. Further, PHP-based web apps can load automatically and don’t require mutual intervention. It provides greater flexibility than other server-side languages, along with scalability and encryption that make PHP a robust option for creating top-notch web solutions. You can &lt;a href="https://www.csschopper.com/hire-dedicated-php-developer-professional.shtml"&gt;hire the best PHP developer&lt;/a&gt; to create unique web solutions as per your requirements leveraging the flexibility of the PHP language. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. PHP frameworks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PHP frameworks are conducive to developing top-notch solutions with expedited workflows and simplified coding. There are lots of PHP frameworks like Laravel, CodeIgniter, CakePHP, Zend, etc., that enable developers to create PHP solutions efficiently. These frameworks offer extensive functions and libraries, various development architecture support such as MVVM and MVC. PHP frameworks help in deep-down PHP coding and developers' additional libraries and tools to create custom web solutions. All in all, these frameworks are powerful tools for creating efficient and out-of-box solutions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. PHP powers CMSs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another solid reason why PHP web development is a preferred CMS (Content Management System). Drupal, WordPress, Joomla, Magento, and many more CMSs work on PHP that means they are written in PHP. PHP is your entry ticket if you want to develop a custom website with any of these CMSs. You need to &lt;a href="https://www.csschopper.com/php-web-development.shtml"&gt;choose a reliable PHP website development company&lt;/a&gt; for creating the desired website using any CMS. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-note"&gt;
  &lt;/a&gt;
  Final note
&lt;/h2&gt;

&lt;p&gt;Websites have become a crucial factor for every business because they help them reach out to customers easily. However, PHP offers many advantages and features for website development. There are a lot of things like core PHP, CMSs, and PHP frameworks that you can utilize to create a perfect website for your business. You can use these frameworks and platforms to build customized web solutions according to your business needs. However, selecting the right PHP Web Development Company can help you create quality solutions.&lt;/p&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>ES6 way of coding Javascript!</title>
      <author>Ritesh Kumar</author>
      <pubDate>Mon, 27 Dec 2021 09:40:46 +0000</pubDate>
      <link>https://dev.to/wordssaysalot/es6-way-of-coding-javascript-2kl2</link>
      <guid>https://dev.to/wordssaysalot/es6-way-of-coding-javascript-2kl2</guid>
      <description>&lt;p&gt;JavaScript is an incredibly fast and efficient programming language to use for a variety of purposes. Today Every type of software uses JavaScript, including Web apps, 3D games, robots, IoT devices, etc.&lt;br&gt;&lt;br&gt;
Back in 2007, Jeff Atwood (founder of StackOverflow), made a case that JavaScript would become a bigger part of web development. Atwood coined the term  &lt;code&gt;Atwood’s Law&lt;/code&gt;, which states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Any application that can be written in JavaScript, will eventually be written in JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s now ten years later, and Atwood’s statement is truer than ever. JavaScript is continuing to gain more and more adoption. The “next generation” of Javascript is something known as ES6. ES6 is so far the best and biggest update javascript has ever received. It streamlined the javascript development and almost killed jQuery's career. ES6 mainly allows you to write less code and do more.&lt;br&gt;
In this post, I'll go over the six major differences between ES6 and ES5. Let’s take a look.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#arrow-function-write-less-do-more"&gt;
  &lt;/a&gt;
  Arrow function: write less do more
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ES5 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function add(a,b){ 
    return a+b
}
console.log(add(2,3))
//OUTPUT: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ES6 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const add (a,b)=&amp;gt; a+b
console.log(add(2,3))
//OUTPUT: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#use-const-if-you-dont-want-to-reassign-the-element-variable-by-mistake"&gt;
  &lt;/a&gt;
  Use const if you don't want to reassign the 'element variable by mistake.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ES5 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var element = document.getElementById('myForm')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ES6 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const element= document.getElementById('myForm')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#destructuring-write-less-do-more"&gt;
  &lt;/a&gt;
  De-structuring: write less do more!
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ES5 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var user = {
    name "Ritesh Kumar", 
    username: "@0xRitesh"
}
const name = user.name
const username user.username
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ES6 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var user = {
    name "Ritesh Kumar".
    username: "@0xRitesh"
}
const {name,username} = user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#template-literals"&gt;
  &lt;/a&gt;
  Template Literals
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ES5 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getUsertMessage(name,country){
    console.log('Hi, my name is '+ name+ ',and I am from '+ country)
}
logUserMessage('Ritesh, 'India')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ES6 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function logUserMessage(name,country){
    console.log('Hi, my name is ${name}, and I am from ${country}')
}
logUserMessage('Ritesh', 'India')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#improve-object-literals"&gt;
  &lt;/a&gt;
  improve Object Literals
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ES5 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getUserObj ( name, age, address){
    return {
        name: name,
        age: age,
        address: address
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ES6 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getUserObj ( name, age, address){
    return {
        name,
        age,
        address
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#default-parameters"&gt;
  &lt;/a&gt;
  Default Parameters
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ES5 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function ES5Fun( username, platform){
    username, = username, || '@wordssaysalot';
    platform = platform || 'Hashnode';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;ES6 WAY&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function ES6Fun( username = '@wordssaysalot' , platform= 'Hashnode') {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading the article! I hope you guys found this article useful, and I hope I was able to introduce you to some of the ES6 features. &lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>I finally learnt some Rust</title>
      <author>Liftoff Studios</author>
      <pubDate>Mon, 27 Dec 2021 09:27:47 +0000</pubDate>
      <link>https://dev.to/liftoffstudios/i-finally-learnt-some-rust-1op2</link>
      <guid>https://dev.to/liftoffstudios/i-finally-learnt-some-rust-1op2</guid>
      <description>&lt;p&gt;Yay.... I can now make proper functional programs in Rust. &lt;/p&gt;

&lt;p&gt;I found Rust to be a joy to work with... Cargo and the way the language is structured was amazing. Much more challenging and interesting than learning Go for that matter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-your-opinion-on-rust"&gt;
  &lt;/a&gt;
  What's your opinion on Rust
&lt;/h2&gt;

&lt;p&gt;I feel it is way more better and productive once you get the hang of it 😃&lt;/p&gt;

&lt;p&gt;Comment your opinion below too&lt;/p&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Getting started with Docker &amp; Flask.</title>
      <author>Phylis Jepchumba</author>
      <pubDate>Mon, 27 Dec 2021 09:15:45 +0000</pubDate>
      <link>https://dev.to/phylis/getting-started-with-docker-flask-262p</link>
      <guid>https://dev.to/phylis/getting-started-with-docker-flask-262p</guid>
      <description>&lt;h6&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h6&gt;

&lt;p&gt;Docker makes it easier, simpler and safer to build, deploy and manage applications in a docker container.&lt;br&gt;
This article will help you get a detailed understanding of;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is docker?&lt;/li&gt;
&lt;li&gt;Why use Docker?&lt;/li&gt;
&lt;li&gt;What is a docker image?&lt;/li&gt;
&lt;li&gt;What is a docker container?&lt;/li&gt;
&lt;li&gt;Dockerizing a flask application&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker?
&lt;/h6&gt;

&lt;p&gt;Docker is an open source containerization platform for developing, shipping and running applications.&lt;/p&gt;

&lt;p&gt;Docker packages software into standardized units called containers. Containers have everything the software needs to run including libraries, system tools, code, and runtime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/get-started/overview/"&gt;More about what docker is&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#why-use-docker"&gt;
  &lt;/a&gt;
  Why use Docker?
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Responsive deployment and scaling.&lt;/li&gt;
&lt;li&gt;Faster And Consistent Delivery Of Applications.&lt;/li&gt;
&lt;li&gt;Automated container creation- with docker, one can automatically build a container based on application source code.&lt;/li&gt;
&lt;li&gt;Container reuse- just like templates for building new containers, existing containers can be used as base images. &lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#docker-image"&gt;
  &lt;/a&gt;
  Docker image.
&lt;/h6&gt;

&lt;p&gt;Image is a read-only template with instruction for creating containers.&lt;br&gt;
Docker images can be considered as the blueprint of the entire application environment that you create. &lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#docker-container"&gt;
  &lt;/a&gt;
  Docker container.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;A Docker container is a virtualized run-time environment where users can isolate applications from the underlying system.&lt;/li&gt;
&lt;li&gt;Containers are compact, portable units in which you can start up an application quickly and easily.&lt;/li&gt;
&lt;li&gt;Docker containers contains all the essential things required to run an application like code, runtime, system tools, system libraries, and settings. &lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#dockerizing-a-flask-application"&gt;
  &lt;/a&gt;
  Dockerizing a flask application
&lt;/h6&gt;
&lt;h6&gt;
  &lt;a href="#file-structure-and-setup"&gt;
  &lt;/a&gt;
  File structure and setup
&lt;/h6&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;\-- dockerExample
    |-- app.py
    |-- Dockerfile
    |-- requirements.txt
   \-- templates
        |-- index.html

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;First I created a simple Flask application and added the following code to app.py.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://dev.to/phylis/my-first-flask-application-2mm"&gt;Check how to create a simple flask application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the following code to index.html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Getting started with Docker&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is my Dockerfile&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to dockerize the flask application by creating a &lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Dockerfile&lt;/strong&gt;is a text document that contains all the commands a user could call on the command line to assemble an image.&lt;/p&gt;

&lt;p&gt;Add the following code to docker;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.6&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /doc&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./requirements.txt /doc/requirements.txt&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /doc&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 5000:5000&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["python","app.py"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;FROM&lt;/strong&gt; keyword is used to specify the base image to be used. We'll be making use of a python base image.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;WORKDIR&lt;/strong&gt; defines the main directory of operations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;EXPOSE&lt;/strong&gt; informs Docker that the container listens on the specified network ports at runtime. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;RUN&lt;/strong&gt;  is used to install the project’s dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CMD&lt;/strong&gt; provide defaults for an executing container.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Read more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now build our image with the &lt;strong&gt;docker build&lt;/strong&gt; command as shown below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker image build -t docker_example .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oNPxYvVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/diz8ysgh6lusn2mew4bm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oNPxYvVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/diz8ysgh6lusn2mew4bm.png" alt="Screenshot (119)" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the build process is done, we can run the application with the docker run command as shown below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -p 5000:5000 docker_example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FIKY0By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytw5p8frcbtjcxspnp4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FIKY0By--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytw5p8frcbtjcxspnp4c.png" alt="Screenshot (122)" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>docker</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>🚀 Angular 13 Starter with ESLint, Material, Transloco, Jest, TestCafe, Docker &amp; Prettier 🚀</title>
      <author>wlucha</author>
      <pubDate>Mon, 27 Dec 2021 09:15:25 +0000</pubDate>
      <link>https://dev.to/wlucha/angular-13-starter-with-eslint-material-transloco-jest-testcafe-docker-prettier-56di</link>
      <guid>https://dev.to/wlucha/angular-13-starter-with-eslint-material-transloco-jest-testcafe-docker-prettier-56di</guid>
      <description>&lt;p&gt;Angular 13 Starter with Material, Transloco, Jest, Compodoc, Docker Support, ESLint &amp;amp; Prettier&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find the project here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/wlucha/angular-starter"&gt;https://github.com/wlucha/angular-starter&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;✅ &lt;a href="https://angular.io/"&gt;Angular 13&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ &lt;a href="https://material.angular.io/"&gt;Angular Material&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ Unit Testing with &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ End-to-End Testing with &lt;a href="https://testcafe.io/"&gt;TestCafé&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ Internationalization with &lt;a href="https://github.com/ngneat/transloco"&gt;Transloco&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ Auto documentation with &lt;a href="https://compodoc.app/"&gt;Compodoc&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ Analyse your project with &lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;webpack-bundle-analyzer&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ &lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt;&lt;br&gt;&lt;br&gt;
✅ &lt;a href="https://github.com/conventional-changelog/commitlint"&gt;Commit Linting&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/github/wlucha/angular-starter"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98Y60Jnj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7531596/83507657-2424e180-a4c9-11ea-8e4f-b3f8e7d6b4c5.png" alt="StackBlitz Demo" width="146" height="37"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-development"&gt;
  &lt;/a&gt;
  Install / Development
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Clone the project&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/wlucha/angular-starter
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;angular-starter

&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;# Start server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start

&lt;span class="c"&gt;# Open in browser: http://localhost:4200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#docker-deployment"&gt;
  &lt;/a&gt;
  Docker Deployment
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Build Docker image&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nt"&gt;-t&lt;/span&gt; angular-starter

&lt;span class="c"&gt;# Run Docker Container&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 3000:80 angular-starter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#docker-hub"&gt;
  &lt;/a&gt;
  Docker Hub
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hub.docker.com/r/wlucha/angular-starter"&gt;https://hub.docker.com/r/wlucha/angular-starter&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm run start&lt;/code&gt; - start the app&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run lint&lt;/code&gt; - lint the project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run test&lt;/code&gt; - run unit tests&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run build&lt;/code&gt; - build the project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run build:prod&lt;/code&gt; - build the project in production mode&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run build:prod:stats&lt;/code&gt; - build the project in product mode with stats&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run analyse&lt;/code&gt; - analyse bundle with &lt;a href="https://github.com/webpack-contrib/webpack-bundle-analyzer"&gt;webpack-bundle-analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run compodoc&lt;/code&gt; - generate &lt;a href="https://github.com/compodoc/compodoc"&gt;compodoc&lt;/a&gt; documentation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run changelog&lt;/code&gt; - generate changelog&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run prettier&lt;/code&gt; - format the whole project&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>My 2021 Recap</title>
      <author>Yehezkiel Gunawan</author>
      <pubDate>Mon, 27 Dec 2021 09:09:57 +0000</pubDate>
      <link>https://dev.to/yehezkielgunawan/my-2021-recap-kk8</link>
      <guid>https://dev.to/yehezkielgunawan/my-2021-recap-kk8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Well, without realizing it we are already at the end of 2021. Is it just me or not, this pandemic era makes time goes faster? I remember the last time we can meet each other by a person is about March 2020, and we're almost done everything online for nearly 2 years LOL.&lt;/p&gt;

&lt;p&gt;I hope you're all good until today. Like most people do at the end of the year, I'd like to write some of my yearly recap and hope for the next year as a newbie frontend developer. Feels opinionated, but I think this can give you some new insight for planning what to do for the next year. For me, writing this can also be a self-reminder for myself when I read it again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learned-throughout-the-year"&gt;
  &lt;/a&gt;
  What I've Learned Throughout The Year
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#struggling-to-overcome-burnout-of-fulltime-job-workload"&gt;
  &lt;/a&gt;
  Struggling to Overcome Burnout of Fulltime Job Workload
&lt;/h3&gt;

&lt;p&gt;We all know the Covid-19 pandemic has caused a lot of companies to enable Work From Home (WFH) regulation, except my previous company at that time LOL. From February 2021 until I resigned, still had to Work From Office (WFO) 100% every day even it's a software house company and very possible to do everything remotely.&lt;/p&gt;

&lt;p&gt;I started to feel that I'm not enjoying my job at my previous company due to the toxic environment. I even did not learn anything except about mitigation and survival, LOL. For about one year I work spontaneously rather than making planning like a sprint planning routine like common tech companies did. When there're requests from the client, then my senior and I just work on it based on the requests.&lt;/p&gt;

&lt;p&gt;The manager didn't give support at all. They just give ideas (actually add the workload for the devs) without explicit and concrete examples. So I have to think harder about the implementation. When the app is successfully developed, the developer never received any appreciation, only the managers.&lt;/p&gt;

&lt;p&gt;In August 2021, I got burned out and didn't have the energy to work anymore because of the workload and the workflow. It lasts for several weeks. Luckily it was not a busy moment because there's a lack of client requests at that time. Actually, I still love coding, but not for the company's tasks.&lt;/p&gt;

&lt;p&gt;I even spoke directly to him, and luckily the manager did not deny the facts that I've spoken. But the general environment and situation make the changes very impossible to be implemented. So I can say, there're no changes until I resigned from that place.&lt;/p&gt;

&lt;p&gt;I learned that &lt;strong&gt;work culture and environment are very crucial&lt;/strong&gt;. After I survived in this company for about one year and three months, I decided to not extend the work contract and luckily I got a new job for the next year.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-favourite-learning-path"&gt;
  &lt;/a&gt;
  My Favourite Learning Path
&lt;/h3&gt;

&lt;p&gt;In August 2021, after I healed from my burnout, I work on a freelance project with 2 of my former college friends. We made a web app using React (frontend) and Node.js (backend). I fell in love with React because of this.&lt;/p&gt;

&lt;p&gt;I struggled a lot on the first week because I used Angular before then I have to switch to React in a short time. But, when I understand the code pattern and the basic things of React I finally finished all of my tasks for the project. Thanks to &lt;a href="https://sznm.dev/"&gt;Agustinus Nathaniel&lt;/a&gt; for guiding and helping me to understand React properly.&lt;/p&gt;

&lt;p&gt;After that, I invested my money to buy a domain for myself and challenged myself to build my own portfolio site using Next.js. Finally, I can finish it within a month. Not only that, I still developed some personal projects using React &amp;amp; Next.js to sharpen my understanding of React things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finally-i-got-a-new-job"&gt;
  &lt;/a&gt;
  Finally I Got a New Job
&lt;/h3&gt;

&lt;p&gt;I remember the moment I decided to prepare for my resignation in September 2021. After I finished developing my personal site, I challenged myself to make several personal projects and published them on Linkedin. Sometimes I wrote some articles and published them on Linkedin once a week.&lt;/p&gt;

&lt;p&gt;My life changed since that time. I got several direct messages which contain a job offer as a frontend engineer (React-based). I also got a lot of phone calls from the talent hunter who offered me a job for their client company.&lt;/p&gt;

&lt;p&gt;Now, I'm very selective in finding a job because of my past job experience. I don't want to get into the same toxic place. So when I got a phone call from the talent hunter or recruiter, I &lt;strong&gt;did some research by myself to find out the information details about the company&lt;/strong&gt;, including the company reviews at &lt;a href="https://www.glassdoor.com/"&gt;Glassdoor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can identify the red flags regarding that company just by looking at the former employee reviews. Not only reviews, if the company does not have a professional profile like Linkedin Page, actually it can be a red flag too. &lt;/p&gt;

&lt;p&gt;Besides that, if I know that I have some friends who work there, I usually contact them and ask them about the work culture and situation there. Actually, I have got an offer letter from a Financial Technology (FinTech) company where some of my friends work there with a high salary. But without asking for more details, I canceled the offer because my friend often overwork and still have to work remotely from home on the weekend (hustle culture). I know the salary is interesting, but hustle culture is not for me and can lead me to burnout again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What you see is what you get. If you know you've been warned through the red flag that you got from the previous reviews or the information that got from friends, the reality won't be far from that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luckily, in November 2021, a recruiter from another hospitality company reach me through Linkedin. Then I followed the recruitment process and finished the take-home project. The pleasant moment is when during the user interview session with the squad leader. The user was not judgemental. He was even amazed at my take-home project result when he reviewed it. We spent time for the interview for about one hour, talking about my previous projects and experiences. It was so fun.&lt;/p&gt;

&lt;p&gt;Several days later, I do the final interview with the manager. He is the first supportive manager that I've ever met. He cares about the employees' mental health and workload. He even explained and tell the truth of the company's current situation to me during the interview. We talk about many things during the interview for about more than one hour, LOL.&lt;/p&gt;

&lt;p&gt;Finally, after the salary negotiation and the last interview, I received the offer letter. The recruiter was very helpful. She even reminds me of when there are some mistakes in my submitted personal data.&lt;/p&gt;

&lt;p&gt;For your information, I live in Bogor, Indonesia, and the company is at Bandung. It's pretty far from my home city, but luckily I got the option to work remotely even after the pandemic ends, yeah!!!&lt;/p&gt;

&lt;p&gt;I'll start to work again in January 2022. Wish me luck and I hope this is the better job for me to grow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projects-ive-worked-on-in-2021"&gt;
  &lt;/a&gt;
  Projects I've Worked on in 2021
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#yehezguncom"&gt;
  &lt;/a&gt;
  yehezgun.com
&lt;/h3&gt;

&lt;p&gt;As I mentioned before, this is the first personal project that I've done in 2021 using React &amp;amp; Next.js. You can access and take a look at &lt;a href="https://yehezgun.com"&gt;yehezgun.com&lt;/a&gt;. I don't like to make complex designs. I'd rather make the simple one so I can understand it by myself when I want to make some improvements, LOL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personalized-starter-template"&gt;
  &lt;/a&gt;
  Personalized Starter Template
&lt;/h3&gt;

&lt;p&gt;So far there are two starter templates that I've made.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://yehez-nextchakra-starter.yehezgun.com"&gt;yehez-nextchakra-starter.yehezgun.com&lt;/a&gt; -&amp;gt; Next.js (Typescript) + Chakra UI starter template&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yehez-vitechakra-starter.yehezgun.com/"&gt;yehez-vitechakra-starter.yehezgun.com&lt;/a&gt; -&amp;gt; React (using  Typescript and Vite as builder) + Chakra UI starter template&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read my previous article about the benefits of making your own starter template &lt;a href="https://yehezgun.com/articles/why-making-a-starter-template-matters"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-link-shortener"&gt;
  &lt;/a&gt;
  Personal Link Shortener
&lt;/h3&gt;

&lt;p&gt;When I wrote an article, sometimes I refer to some links as references. So I thought it will be great if I can have my own link shortener, so I don't need to use and repeatedly search for a link shortener. You can access and even use it at &lt;a href="https://link.yehezgun.com/"&gt;link.yehezgun.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-live-markdown-editor"&gt;
  &lt;/a&gt;
  Personal Live Markdown Editor
&lt;/h3&gt;

&lt;p&gt;The reason I made this is because I need a live markdown previewer when I wrote documentation (Readme file) for a project that I have made. I made it using React Markdown Previewer to enable the live markdown preview. You can access the live demo at &lt;a href="https://markdown.yehezgun.com"&gt;markdown.yehezgun.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#personal-docs-site"&gt;
  &lt;/a&gt;
  Personal Docs Site
&lt;/h3&gt;

&lt;p&gt;I've been exhausted from googling the same thing repeatedly. So I decided to make a site that contains the frequent things that I usually access or use to resolve "the redundancy" LOL. I made it using &lt;a href="https://github.com/shuding/nextra"&gt;Shuding's Nextra&lt;/a&gt;. You can see mine at &lt;a href="https://docs.yehezgun.com"&gt;docs.yehezgun.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can read my previous article about the reason why I made my own personal docs site &lt;a href="https://yehezgun.com/articles/why-I-made-my-own-personal-docs-site"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kai-access-app-amp-a-freelance-project"&gt;
  &lt;/a&gt;
  KAI Access App &amp;amp; A Freelance Project
&lt;/h3&gt;

&lt;p&gt;As I told you before, I never worked on a freelance project with my friends. Unfortunately, it's a private project based on client requests. But I can explain a little about what we've made.&lt;/p&gt;

&lt;p&gt;We made a warehousing system in the form of web and mobile apps. One of my friends created the mobile app, and I developed the web app, especially the CRUD process. So the employee just needs to scan the QR Code of the goods and the changes will be automatically done on the server. The other employee can also check and validate the data through the website.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://play.google.com/store/apps/details?id=com.kai.kaiticketing&amp;amp;hl=en_US&amp;amp;gl=US"&gt;KAI Access App&lt;/a&gt;, actually it's an app developed by my senior and me when I was working in the previous company. My senior developed it from scratch using Ionic &amp;amp; Angular. I just developed the requested feature like the Taxi Order system and PPOB feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hope-for-2022"&gt;
  &lt;/a&gt;
  Hope For 2022
&lt;/h2&gt;

&lt;p&gt;2021 is a tough year for me personally. You have read my experience about how I struggled to survive and finally can get the new job. Thank God I can survive this year, LOL.&lt;/p&gt;

&lt;p&gt;I know there're a lot of things changed and delayed due to the Covid-19 pandemic since 2020. But there're some things that I want to achieve and learn more deeply in 2022.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know I'm still a newbie in React development. I even still struggled with CSS even I'm a frontend engineer, LOL. So I decided to learn Tailwind CSS as my preferred and go-to CSS utility tool. Why? Because after I read the docs, it can push me to understand the design and little CSS fundamentals while I learn and use it. It also allows me to make my own design system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Clean Code&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For about one year I work in the previous company, I got a bad legacy code. It was very exhausting when I have to improve some features. The code is like a mess, LOL. If I optimize my parts, it also means I have to optimize the following features. That's why I often code like a barbarian. I realized that I can do this anymore and had to change my behavior.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Work-Life Balance&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is actually the common dream. Every people want to achieve it, LOL. I wish can achieve it through my new job soon. Hopefully, I also get a healthy environment and work culture, especially supportive colleagues.&lt;/p&gt;

&lt;p&gt;Yeah, that's all from me. That's my 2021 recap and hope for the next year. What's yours?&lt;/p&gt;

</description>
      <category>2021</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Remove console logs in production build (Angular 2.x)</title>
      <author>Akiko IKEHARA</author>
      <pubDate>Mon, 27 Dec 2021 09:01:43 +0000</pubDate>
      <link>https://dev.to/ikeakiko/remove-console-logs-in-production-build-angular-2x-1b43</link>
      <guid>https://dev.to/ikeakiko/remove-console-logs-in-production-build-angular-2x-1b43</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-goal"&gt;
  &lt;/a&gt;
  Problem / Goal
&lt;/h3&gt;

&lt;p&gt;For debugging, most of us often write console.log to enable us to analyze problems. &lt;br&gt;
But, it is might be dangerous because there is a risk of accidentally outputting confidential information (api key, password, etc).&lt;br&gt;
Therefor, we don't want to output console.log in production.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#solution-overview"&gt;
  &lt;/a&gt;
  Solution Overview
&lt;/h3&gt;

&lt;p&gt;Override console.log method on a function that does nothing.&lt;br&gt;
(There is also another way that use webpack settings.)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#concrete-steps"&gt;
  &lt;/a&gt;
  Concrete Steps
&lt;/h3&gt;

&lt;p&gt;Override console.log method on a function that does nothing.&lt;/p&gt;

&lt;p&gt;app/main.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (environment.production) {
  window.console.log = () =&amp;gt; {};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>angular</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Custom React useFetch() hook for data fetching with revalidation</title>
      <author>damilola jerugba</author>
      <pubDate>Mon, 27 Dec 2021 08:55:34 +0000</pubDate>
      <link>https://dev.to/brimble/custom-react-usefetch-hook-for-data-fetching-with-revalidation-f7k</link>
      <guid>https://dev.to/brimble/custom-react-usefetch-hook-for-data-fetching-with-revalidation-f7k</guid>
      <description>&lt;p&gt;This guide is to show you how to create a simple react hook for data fetching (with revalidation).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-this-hook"&gt;
  &lt;/a&gt;
  🤨 Why this hook?
&lt;/h2&gt;

&lt;p&gt;When fetching data for your react applications, you'd usually use both &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt;, with values like &lt;code&gt;loading&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; e.g &lt;a href="https://github.com/damiisdandy/use-pagination/blob/master/src/App.tsx"&gt;This example&lt;/a&gt;, this hook is to help abstract that functionality into one simple hook that can be used anywhere and multiple times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  🕺 Setting up the project
&lt;/h2&gt;

&lt;p&gt;We would be using the &lt;code&gt;create-react-app&lt;/code&gt; boiler template for typescript and the only external library we would be using is &lt;code&gt;axios&lt;/code&gt; for data fetching.&lt;/p&gt;

&lt;p&gt;Open up your terminal and type in the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create react-app use-fetch --template typescript
# for npm
npx create-react-app use-fetch --template typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Change into the directory and install &lt;code&gt;axios&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd use-fetch
yarn add axios
# for npm
npm install axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Within the &lt;code&gt;src&lt;/code&gt; directory delete the following file (because they aren't needed)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App.css&lt;/li&gt;
&lt;li&gt;App.test.tsx&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#custom-raw-usefetch-endraw-hook"&gt;
  &lt;/a&gt;
  🎣 Custom &lt;code&gt;useFetch&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;Within the &lt;code&gt;src&lt;/code&gt; directory create another directory called &lt;code&gt;hooks&lt;/code&gt;, this is where our hook will reside.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd src
mkdir hooks
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Your file structure should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z2erQZS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e1l0z0k8qi5nfsfj21m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2erQZS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3e1l0z0k8qi5nfsfj21m.png" alt="file structure" width="256" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within the &lt;code&gt;hooks&lt;/code&gt; directory create a file called &lt;code&gt;useFetch.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Type in the following inside the &lt;code&gt;useFetch&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UseFetchProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;UseFetchProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// function to fetch data&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchedData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// on first load fetch data&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The hook takes in a prop &lt;code&gt;url&lt;/code&gt;, which is the API url at which we want to fetch data from. It has two states &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; which are used to store data gotten from the API and check for errors respectively.&lt;/p&gt;

&lt;p&gt;We created a separate function for fetching the data called &lt;code&gt;fetch&lt;/code&gt; and wrapped it within a &lt;code&gt;useCallback&lt;/code&gt; hook, Visit &lt;a href="https://www.geeksforgeeks.org/react-js-usecallback-hook/#:~:text=The%20useCallback%20hook%20is%20used,of%20the%20dependencies%20has%20changed."&gt;here&lt;/a&gt; to see the reason why we used a &lt;code&gt;useCallback&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;Then we simply used a &lt;code&gt;useEffect&lt;/code&gt; hook to run the &lt;code&gt;fetch&lt;/code&gt; function as soon as the hook is mounted 🙂.&lt;/p&gt;

&lt;p&gt;The hook returns &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;revalidate&lt;/code&gt; which is the &lt;code&gt;fetch&lt;/code&gt; function for when we want to programmatically revalidate the data.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-the-hook"&gt;
  &lt;/a&gt;
  😎 Using the hook
&lt;/h2&gt;

&lt;p&gt;To use the hook we simply just import it and extract its values.&lt;br&gt;
Within the &lt;code&gt;App.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./hooks/useFetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;revalidate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://random-data-api.com/api/users/random_user?size=5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="nx"&gt;fetching&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;items&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;el&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
              &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`https://avatars.dicebear.com/api/big-smile/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.svg`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; profile`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item__img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item__info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(@{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;job&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;employment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`status &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
                  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blocked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;danger&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;warn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#adding-interval-revalidation"&gt;
  &lt;/a&gt;
  ⏰ Adding Interval revalidation
&lt;/h2&gt;

&lt;p&gt;You might need to fetch data from your API every 5 seconds for revalidation (ensuring your data is up-to-date).&lt;/p&gt;

&lt;p&gt;We need to add some modifications to our &lt;code&gt;useFetch&lt;/code&gt; hook. Lets and more props.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;UseFetchProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;revalidate&lt;/code&gt; will be a boolean to check if we want to implement interval revalidation or not, &lt;code&gt;interval&lt;/code&gt; will be the time taken between every revalidation (in seconds).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;UseFetchProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We'll create a state called &lt;code&gt;revalidateKey&lt;/code&gt; that we will change on every interval which will be added to our &lt;code&gt;useEffect&lt;/code&gt; dependency array. Adding this to our dependency array will ensure that the function within our &lt;code&gt;useEffect&lt;/code&gt; will run everytime the &lt;code&gt;revalidateKey&lt;/code&gt; changes.&lt;/p&gt;

&lt;p&gt;To change the &lt;code&gt;revalidateKey&lt;/code&gt;, we will create a new &lt;code&gt;useEffect&lt;/code&gt; that has a &lt;code&gt;setInterval&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;revalidateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRevalidateKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;revalidateInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setRevalidateKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// if no interval is given, use 3 seconds&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;revalidateInterval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Our &lt;code&gt;useFetch&lt;/code&gt; hook should then look something like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;UseFetchProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;revalidateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRevalidateKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// function to fetch data&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchedData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchedData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;revalidateInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setRevalidateKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// if no interval is given, use 3 seconds&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;revalidateInterval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// on first load fetch data and when revalidateKey changes&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;revalidateKey&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Using the &lt;code&gt;useFetch&lt;/code&gt; hook ✨&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;revalidate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://random-data-api.com/api/users/random_user?size=5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;revalidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// fetch every 5 seconds&lt;/span&gt;
    &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#graphql-support"&gt;
  &lt;/a&gt;
  ⚠️ Graphql support
&lt;/h3&gt;

&lt;p&gt;This hook uses only the &lt;code&gt;GET&lt;/code&gt; method, and Graphql uses &lt;code&gt;POST&lt;/code&gt; method for &lt;a href="https://medium.com/@stubailo/how-to-call-a-graphql-server-with-axios-337a94ad6cf9"&gt;data fetching&lt;/a&gt;. To make the hook more dynamic you can add more props like &lt;code&gt;isGraphql&lt;/code&gt; and &lt;code&gt;query&lt;/code&gt;, &lt;code&gt;isGraphql&lt;/code&gt; will be a boolean to check if its Graphql or REST so you can have a condition in your hook to use &lt;code&gt;axios.post()&lt;/code&gt; instead of &lt;code&gt;axios.get()&lt;/code&gt; and &lt;code&gt;query&lt;/code&gt; for the graphql query.&lt;/p&gt;

&lt;p&gt;Thank you for reading 🙏🏾, If you have any questions, additions, or subtractions please comment below.&lt;/p&gt;

&lt;p&gt;The full source code is linked below 👇👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/brimblehq"&gt;
        brimblehq
      &lt;/a&gt; / &lt;a href="https://github.com/brimblehq/use-fetch"&gt;
        use-fetch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      data fetching hook with revalidation
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>react</category>
      <category>typescript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Handling Opaque Responses in a Service Worker</title>
      <author>Kevin Basset</author>
      <pubDate>Mon, 27 Dec 2021 08:47:12 +0000</pubDate>
      <link>https://dev.to/progressier/handling-opaque-responses-in-a-service-worker-fgd</link>
      <guid>https://dev.to/progressier/handling-opaque-responses-in-a-service-worker-fgd</guid>
      <description>&lt;p&gt;&lt;a href="https://progressier.com"&gt;Progressier&lt;/a&gt; handles opaque responses automatically so that you don't have worry about them. But if you're interested in learning more about opaque responses, why they're a problem and how you should deal with them in your service worker, please continue reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-an-opaque-response"&gt;
  &lt;/a&gt;
  What's an opaque response?
&lt;/h2&gt;

&lt;p&gt;When a website requests an asset, e.g. a JPG image or a JavaScript file, it sends a request to a server. This server then responds with the requested image or JavaScript contents.&lt;/p&gt;

&lt;p&gt;Problems start when the asset is hosted on a different domain than the requesting site. Browsers follow a mechanism called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross-Origin Resource Sharing&lt;/a&gt; (or CORS). In a nutshell, it greatly limits what you can do with a resource located on a different domain.&lt;/p&gt;

&lt;p&gt;One way to prevent issues is for the owner of the resource to add a &lt;code&gt;access-control-allow-origin: *&lt;/code&gt; header to the response (also works with your specific domain instead of &lt;code&gt;*&lt;/code&gt;). It essentially tells the browser &lt;em&gt;hey Chrome, just let anyone freely use that resource on their site&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Here is where it gets interesting — even without this header, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags will still be able to request and use these resources. But your Javascript code or service worker won't be allowed to read or otherwise modify them. Responses that the browser can use but that you as a developer cannot are called &lt;em&gt;opaque responses&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-the-problem-with-opaque-responses-exactly"&gt;
  &lt;/a&gt;
  So... what's the problem with opaque responses, exactly?
&lt;/h2&gt;

&lt;p&gt;When a server sends a response to a browser, it also sends a HTTP &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;response status code&lt;/a&gt;, which tells the browser whether the request was successful or not.&lt;/p&gt;

&lt;p&gt;Anything starting with &lt;code&gt;2xx&lt;/code&gt; usually means success. &lt;code&gt;5xx&lt;/code&gt; means there was an error with the server. And &lt;code&gt;4xx&lt;/code&gt; an error with the request.&lt;/p&gt;

&lt;p&gt;For opaque responses, the response status code is always &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your service worker has no way to know whether a request was successful or whether it resulted in an error. And because the request is made completely opaque, it does not contain any other clues that can tell you which way it went. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Editor's Note: I understand why opaque responses are necessary, but I honestly have no idea why 'opaque' also has to mean hiding the request status code. If anyone knows, I'm genuinely interested in learning more about the reasoning behind this choice.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is that most apps and websites do receive quite a few opaque responses. And if you choose not to cache them, these resources won't be accessible offline at all when the network fails to send a successful response.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-1-the-last-resort-approach"&gt;
  &lt;/a&gt;
  Approach 1: The Last Resort Approach
&lt;/h2&gt;

&lt;p&gt;The approach we use at &lt;a href="https://progressier.com"&gt;Progressier&lt;/a&gt; is to cache resources that have opaque responses but only serve them as a last resort — when there is no other response available in cache and the network couldn't provide a response (because that server is down or the user is offline for example).&lt;/p&gt;

&lt;p&gt;In that case, the choice is between showing an error (100% probability of error) versus showing an opaque response that may or not have been a successful response (unknown probability of error but by definition less than 100%).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach-2-the-nocache-approach"&gt;
  &lt;/a&gt;
  Approach 2: The No-Cache Approach
&lt;/h2&gt;

&lt;p&gt;The default behavior in &lt;a href="https://developers.google.com/web/tools/workbox"&gt;Workbox&lt;/a&gt; is to not cache opaque responses at all. This is another valid approach. It eliminates the uncertainty described above and it also ensures that the resource will NOT be available offline. &lt;/p&gt;

&lt;p&gt;In cases where your front-end actually need to know what the error is (not just know that there is an error), this approach provides consistency and may be a better alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recognizing-and-caching-opaque-responses"&gt;
  &lt;/a&gt;
  Recognizing and caching opaque responses
&lt;/h2&gt;

&lt;p&gt;An opaque response can be identified by the status code in the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response"&gt;Response&lt;/a&gt; object. If it contains &lt;code&gt;response.status === 0&lt;/code&gt;, then you're dealing with an opaque response. &lt;/p&gt;

&lt;p&gt;Note that what you can do with opaque responses caching-wise is limited. You'll necessarily have to call &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/clone"&gt;response.clone()&lt;/a&gt; before putting it in cache. If you don't, the body of the response will be consumed when you put in cache and it will fail when you also return it as a response to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent"&gt;fetch&lt;/a&gt; event.&lt;/p&gt;

&lt;p&gt;Response.clone() sometimes isn't enough, i.e. if you need to alter the response before putting in cache. That's why you can usually make a copy of the headers and body of the request, and recreate a response from scratch using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/Response"&gt;Response&lt;/a&gt; constructor. &lt;/p&gt;

&lt;p&gt;Well, with opaque responses... you can't do that. The constructor simply doesn't allow to create opaque responses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When building &lt;a href="https://progressier.com"&gt;Progressier&lt;/a&gt;'s caching strategy builder, I had quite a bit of fun figuring out the inner workings of service workers. And opaque responses were definitely one of the highlights! Their quirks can be hard to grasp at first, but once you understand how they behave, dealing with them becomes a lot easier.&lt;/p&gt;

&lt;p&gt;If that article helped you understand anything about opaque responses, leave a comment. And if you have any questions, feel free to reach out to me 💪🎉😜&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>pwa</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Migrate from Jasmine to Jest and Testing Library in Angular</title>
      <author>Dany Paredes</author>
      <pubDate>Mon, 27 Dec 2021 08:16:52 +0000</pubDate>
      <link>https://dev.to/this-is-angular/migrate-from-jasmine-to-jest-and-testing-in-angular-286i</link>
      <guid>https://dev.to/this-is-angular/migrate-from-jasmine-to-jest-and-testing-in-angular-286i</guid>
      <description>&lt;p&gt;Angular, by default, comes with Jasmine; it is a great testing framework. I spent one year and a half running and writing tests with Jasmine, it works, but the market is moving to Jest and Testing library.&lt;/p&gt;

&lt;p&gt;Don't get scared because Jest is more straightforward and compatible with your Jasmine test.&lt;/p&gt;

&lt;p&gt;This post aims to guide how to get rid of Jasmine and Karma and set up Jest and testing library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-move-to-jest-and-testing-library"&gt;
  &lt;/a&gt;
  Why move to Jest and Testing library?
&lt;/h2&gt;

&lt;p&gt;I decided to move all my Angular projects to Jest and testing library for a few reasons.&lt;/p&gt;

&lt;p&gt;Jest is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faster than Karma. &lt;/li&gt;
&lt;li&gt;Easy to read test reports. &lt;/li&gt;
&lt;li&gt;Code Coverage out of the box&lt;/li&gt;
&lt;li&gt;Great command-line interface to interact with the tests.&lt;/li&gt;
&lt;li&gt;Great community support.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Testing library is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Focus user test&lt;/li&gt;
&lt;li&gt;So fast and easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are looking to the easy way use jest schematic &lt;a href="https://github.com/briebug/jest-schematic"&gt;https://github.com/briebug/jest-schematic&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#remove-jasmine-and-karma"&gt;
  &lt;/a&gt;
  Remove Jasmine and Karma
&lt;/h2&gt;

&lt;p&gt;To remove the package, delete them from the package.json and save it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"@types/jasmine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~3.10.0"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"jasmine-core"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~3.10.0"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"karma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~6.3.0"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"karma-chrome-launcher"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~3.1.0"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"karma-coverage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~2.1.0"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"karma-jasmine"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~4.0.0"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"karma-jasmine-html-reporter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~1.7.0"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And run the &lt;code&gt;npm install&lt;/code&gt; command from the terminal again to npm remove not used packages.&lt;/p&gt;

&lt;p&gt;Next, delete karma.conf.js and src/test.ts files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    &lt;span class="nb"&gt;rm &lt;/span&gt;karma.conf.js 
     &lt;span class="nb"&gt;rm &lt;/span&gt;src/test.ts 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove the test area from angular.json.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"builder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@angular-devkit/build-angular:karma"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/test.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"polyfills"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/polyfills.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"tsConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsconfig.spec.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"karmaConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"karma.conf.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"assets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"src/favicon.ico"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/assets"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"styles"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"src/styles.css"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, install and configure Jest for our angular app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-and-configure-jest"&gt;
  &lt;/a&gt;
  Install and configure Jest
&lt;/h2&gt;

&lt;p&gt;We will run the following command in our terminal to install jest library, Jest preset for angular, and jest types for typescript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; jest jest-preset-angular @types/jest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your project root, create the setup-jest.ts file and import the angular preset.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jest-preset-angular/setup-jest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Into the  package.json file edit the script&lt;code&gt;test: "ng test"&lt;/code&gt; to &lt;code&gt;test: "jest"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ng"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ng"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ng serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ng build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"watch"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ng build --watch --configuration development"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add a Jest area to load &lt;code&gt;jest-preset-angular&lt;/code&gt; and use the jest configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"preset"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jest-preset-angular"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"setupFilesAfterEnv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;rootDir&amp;gt;/setup-jest.ts"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit tsconfig.json into the compiler option :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit tsconfig.spec.json, remove node and Jasmine to Jest, close similar to my example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./tsconfig.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./out-tsc/spec"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"types"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"jest"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"src/**/*.spec.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"src/**/*.d.ts"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because jasmine tests are compatible, we run our existing test running the test script from the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; lab@0.0.0 &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Jest

 PASS  src/app/app.component.spec.ts
  AppComponent
    ✓ should create the app &lt;span class="o"&gt;(&lt;/span&gt;169 ms&lt;span class="o"&gt;)&lt;/span&gt;
    ✓ should have as title &lt;span class="s1"&gt;'lab'&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;43 ms&lt;span class="o"&gt;)&lt;/span&gt;
    ✓ should render title &lt;span class="o"&gt;(&lt;/span&gt;47 ms&lt;span class="o"&gt;)&lt;/span&gt;

Test Suites: 1 passed, one total
Tests:       3 passed, 3 total
Snapshots:   0 total
Time:        1.635 s, estimated 4 s
Ran all &lt;span class="nb"&gt;test &lt;/span&gt;suites.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-the-testing-library"&gt;
  &lt;/a&gt;
  Install the testing library
&lt;/h2&gt;

&lt;p&gt;The @testing-library helps test UI components in the user way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @testing-library/angular
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an app.component.ui.spect.ts file, and we use the testing library to play with the UI.&lt;/p&gt;

&lt;p&gt;First, import &lt;code&gt;render&lt;/code&gt; and &lt;code&gt;screen&lt;/code&gt; from @testing-library/angular,  &lt;code&gt;render&lt;/code&gt; help us to load the component, and &lt;code&gt;screen&lt;/code&gt; provide an extensive list o ways to find elements in the browser.&lt;/p&gt;

&lt;p&gt;In our quick example, we find the "Next steps" text to learn more about using the testing library &lt;a href="https://testing-library.com/docs/"&gt;https://testing-library.com/docs/&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We use the await keyword to wait for render and screen results.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/angular&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;AppComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render Welcome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Welcome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run your test again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run &lt;span class="nb"&gt;test&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; lab@0.0.0 &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Jest

 PASS  src/app/app.component.spec.ts
 PASS  src/app/app.ui.component.spec.ts

Test Suites: 2 passed, 2 total
Tests:       4 passed, 4 total
Snapshots:   0 total
Time:        4.631 s
Ran all &lt;span class="nb"&gt;test &lt;/span&gt;suites.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Well, in short, we learned how to remove karma and Jasmine, install and configure Jest running our existing test, and add the testing library in our angular projects.&lt;/p&gt;

&lt;p&gt;Hopefully, that will give you a bit of help with the Jest and Testing library. If you enjoyed this post, share it!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>testing</category>
      <category>frontend</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
