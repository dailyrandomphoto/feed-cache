<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The material design framework you have all been waiting for</title>
      <author>Posandu </author>
      <pubDate>Thu, 30 Dec 2021 09:03:49 +0000</pubDate>
      <link>https://dev.to/posandu/the-material-design-framework-you-have-all-been-waiting-for-1f66</link>
      <guid>https://dev.to/posandu/the-material-design-framework-you-have-all-been-waiting-for-1f66</guid>
      <description>&lt;p&gt;Yes, I'm here to introduce the Framework Tronic247 Material for you.&lt;br&gt;
It's an awesome framework that you can use to create your own material design websites. Here are the benefits of using it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is Super lightweight &lt;/li&gt;
&lt;li&gt;No dependencies&lt;/li&gt;
&lt;li&gt;Material Design&lt;/li&gt;
&lt;li&gt;Responsive&lt;/li&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Easy to learn&lt;/li&gt;
&lt;li&gt;Easy to customize&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-use-it"&gt;
  &lt;/a&gt;
  Why use it?
&lt;/h2&gt;

&lt;p&gt;If you know &lt;a href="https://material-ui.com/"&gt;Material UI&lt;/a&gt;, It's designed for React. So this framework is like Material UI for non React apps like PHP, ASP, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-use-it"&gt;
  &lt;/a&gt;
  How can I use it?
&lt;/h2&gt;

&lt;p&gt;You can open the &lt;a href="https://codepen.io/pen?template=MWErzzo"&gt;Codepen page&lt;/a&gt; to see the demo. Also the documentation is &lt;a href="https://material.tronic247.com/"&gt;material.tronic247.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-like-it-can-i-help"&gt;
  &lt;/a&gt;
  I like it, can I help?
&lt;/h2&gt;

&lt;p&gt;Yes, you can help me. You can send a pull request or open an issue on &lt;a href="https://github.com/tronic247/material"&gt;Github&lt;/a&gt;. And star the repo.&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>9 Best Coursera Courses + Projects for Web Developers</title>
      <author>javinpaul</author>
      <pubDate>Thu, 30 Dec 2021 08:56:18 +0000</pubDate>
      <link>https://dev.to/javinpaul/9-best-coursera-courses-projects-for-web-developers-1l62</link>
      <guid>https://dev.to/javinpaul/9-best-coursera-courses-projects-for-web-developers-1l62</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/web-development-unraveling-html-css-js?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5G8kkBRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/v2api/collection/10370001/5551624074297344/image/5668113229021184" alt="best Web Development course: Unraveling HTML, CSS, and JavaScript - Learn Interactively" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, if you are looking for the best web development courses and projects on Coursera to join in 2022, then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared the best Coursera courses to learn about &lt;a href="https://javarevisited.blogspot.com/2020/08/top-10-coursera-certifications-to-learn-cloud-computing-aws.html"&gt;&lt;strong&gt;Cloud Computing&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/6-best-software-development-and-project-management-books-for-tech-leads-and-project-managers-5a82a6fbed6b"&gt;&lt;strong&gt;Software Development&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2020/08/top-10-coursera-certifications-to-learn-Data-Science-Visualization-and-Data-Analysis.html"&gt;&lt;strong&gt;Data Science&lt;/strong&gt;&lt;/a&gt; as well as many Coursera projects for hands-on learning and today, I am going to share the best Coursera courses and projects one can join to learn &lt;strong&gt;Full-stack Development&lt;/strong&gt; and &lt;em&gt;essential web development skills&lt;/em&gt;] to become a professional web developer in 2022.&lt;/p&gt;

&lt;p&gt;The best thing about these Coursera courses and projects is that you can join them with &lt;em&gt;Coursera Plus&lt;/em&gt;, which means you don't need to buy them individually.&lt;/p&gt;

&lt;p&gt;If you have a &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;&lt;strong&gt;Coursera plus subscription&lt;/strong&gt;&lt;/a&gt; you can enter all of these courses without extra cost.&lt;/p&gt;

&lt;p&gt;Web Development is a very in-demand skill as every organization, business and now even celebrities need web pages. The demand for both frontend and backend developers has been increasing steadily since last 2 decades but the COVID just accelerated the Digital push and so is the demand for IT professionals.&lt;/p&gt;

&lt;p&gt;While I am not really sure how good 2022 would be compared to 2021 I am certain with one thing that demand for web developers will only go to increase this year. This means more jobs, better jobs, and better salaries.&lt;/p&gt;

&lt;p&gt;This is also a great time for web developers to learn new skills like React.js or Angular and full-stack development and switch companies. This not only helps you to earn better but the rush of adrenaline when you join a new company will also help you to learn new skills and make you a better developer.&lt;/p&gt;

&lt;p&gt;And when it comes to learning, &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2F"&gt;Coursera&lt;/a&gt; is one of my favorite places to go because of its well-structured and in-depth courses from top companies like Microsoft, Google, IBM as well as from the world's top universities like the University of Michigan, Illinois, Duke University, Stanford, etc. They collaborate with more than 200 leading institutions and companies around the world.&lt;/p&gt;

&lt;p&gt;By the way, If you are planning to join multiple Coursera courses or specializations then consider taking &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;Coursera Plus&lt;/a&gt;&lt;/strong&gt; subscription which provides you unlimited access to their most popular courses, specialization, professional certificate, and guided projects. It cost around $59 per month or $399/year but it's completely worth your money as you get unlimited certificates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P13cSFNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dfq8xeqiv5vng8jer20.gif" alt="Coursera Plus Discount coupon" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-best-coursera-web-development-specialization-and-projects-for-beginners-to-learn-in-2022"&gt;
  &lt;/a&gt;
  10 Best Coursera Web Development Specialization and Projects for Beginners to Learn in 2022
&lt;/h2&gt;

&lt;p&gt;without any further ado, here is the list of best online courses, specialization, and hands-on projects from Coursera a beginner can join to learn Web development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-fullstack-web-development-with-react"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Ffull-stack-react"&gt;Full-Stack Web Development with React&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;React.js is one of the most important skills for a web developer to learn in 2022. The demand for React developers has gone up in the last few years as more and more companies, both big and small have adopted React for their projects.&lt;/p&gt;

&lt;p&gt;I have been suggesting developers to &lt;a href="https://javinpaul.medium.com/top-5-courses-to-learn-react-js-in-2019-best-of-lot-fa02cd96cdf0"&gt;learn React.js&lt;/a&gt; for the last 2 years and 2022 is no different in this regard, learning React in 2022 can be the best thing for you, and when it comes to learning React this Coursera specialization is a great resource.&lt;/p&gt;

&lt;p&gt;This is one of the most popular Coursera programs to learn Full-stack web development. This one is offered by the Hong Kong University of Science and Technology. &lt;/p&gt;

&lt;p&gt;This specialization contains 3 courses to teach you frontend development with React.js and Bootstrap and backend development using &lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-nodejs-and-express-js-online-courses-for-web-developers.html"&gt;Node.js&lt;/a&gt;, &lt;a href="https://www.java67.com/2020/06/top-5-courses-to-learn-mern-stack-for-web-development.html"&gt;Express.js&lt;/a&gt;, and &lt;a href="https://medium.com/javarevisited/5-best-mongodb-courses-to-learn-nosql-for-beginners-in-2020-42df5af5496c"&gt;Mongo DB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Talking about social proof, more than 27K students have joined this course and it has an amazing 4.7 rating out of 5, which is quite amazing. If you want to become a full-stack web developer with REact.js then I highly recommend you t join this Coursera specialization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the link to join this React.js course&lt;/strong&gt; - &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Ffull-stack-react"&gt;Full-Stack Web Development with React&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Ffull-stack-react"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--847k9L6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-pE8pPZy1FD0/YclCJ8otuKI/AAAAAAAAqoc/lEd6C3GInGkzO5yWptYcCLIYxrH3Sz1gQCNcBGAsYHQ/w374-h196/XDP%25257ESPECIALIZATION%252521%25257Efull-stack-react.jpeg" alt="Best React.js course on Coursera" width="374" height="196"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-full-stack-web-development-with-angular"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Ffull-stack-mobile-app-development"&gt;Full Stack Web Development with Angular&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Apart from React.js if there is another framework that is worth learning for web developers then it is Angular which is backed by Google. While React.js is certainly more popular than Angular, there are still many companies using Angular for their projects and there are a lot of Angular jobs available in the market. I did a quick search in indeed and it revealed more than 13K Angular jobs in the USA itself.&lt;/p&gt;

&lt;p&gt;This means Angular is definitely worth learning for web developers and this is one of the best Coursera specializations to learn Angular from a Fullstack developer's perspective.&lt;/p&gt;

&lt;p&gt;This course is similar to the first course in this list, but this one uses Angular, another popular web development framework for beginners. &lt;/p&gt;

&lt;p&gt;Unlike the first course, which is about React and is supported by Facebook, this one is based on Angular and is endorsed by Google. This one is also offered by the Hong Kong University of Science and Technology&lt;/p&gt;

&lt;p&gt;Talking about social proof, more than 4.8K students have joined this course which is quite less compared to the React course and one more reason to choose React.js over Angular, if you want to learn only one frontend framework. It also has an amazing 4.7 rating out of 5, which is quite great and speaks a lot about the quality of the course. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the link to join this course&lt;/strong&gt; - &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Ffull-stack-mobile-app-development"&gt;Full Stack Web Development with Angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Ffull-stack-mobile-app-development"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C0ByotBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-VWo0qDc4quU/YclCWjALVmI/AAAAAAAAqok/GZHk4oGfmAEG2cCh1_erm_gy7Wl3xhTLACNcBGAsYHQ/w385-h202/1-J636VWZ8SXCCgbHV0ELxPg.jpeg" alt="Best Coursera course for Full stack web development with Angular" width="385" height="202"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-web-design-for-everybody-basics-of-web-development-amp-coding"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fweb-design"&gt;Web Design for Everybody: Basics of Web Development &amp;amp; Coding&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is probably the most popular web design course on Coursera. This course is offered by the University of Michigan and this will teach you web design, basics of web development, and coding in general. &lt;/p&gt;

&lt;p&gt;While the first two courses are for people already familiar with web development this course is for the complete beginner who wants to start with web development and coding in 2022.  This specialization contains 5 courses to teach you essential web development skills like HTML, CSS, JavaScript, and Responsive web design. &lt;/p&gt;

&lt;p&gt;It also comes with a final project which you will build as part of this specialization. Talking about the social proof, more than 230K people have joined this course to learn web design and development and I highly recommend this course to beginners who wants to start their web development career in 2022. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the link to join this program&lt;/strong&gt; - &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fweb-design"&gt;Web Design for Everybody: Basics of Web Development &amp;amp; Coding&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fweb-design"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CTDT-gM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-8moa4G8vRkY/YclCx3psw9I/AAAAAAAAqpE/uP5ewJcJL30RD-TD32h1Od4f86LgchtFACNcBGAsYHQ/w320-h168/XDP%25257ESPECIALIZATION%252521%25257Eweb-design.jpeg" alt="Best Coursera course for web design" width="320" height="168"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-responsive-website-development-and-design"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fwebsite-development"&gt;Responsive Website Development and Design&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As I have told you before Responsive design is one of the essential skills for professional web development, and this Coursera course will just teach you that. This course is offered by the Goldsmiths, University of London, and taught by expert trainers.&lt;/p&gt;

&lt;p&gt;This course will teach you how to create an interactive user experience and you will also learn the fundamentals of full-stack web development in five comprehensive courses. The course also comes with a final project where you will design and build a fully responsive website. &lt;/p&gt;

&lt;p&gt;Talking about social proof, this is one of the popular Coursera courses on website development and more than 60K students shave already joined this course. Recently this course has been added to &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;Coursera Plus&lt;/a&gt;, which means you can join this with your existing Coursera plus subscription for free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the link to join this program&lt;/strong&gt; - &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fwebsite-development"&gt;Responsive Website Development and Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fwebsite-development"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wFDxXmm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8zlbw44msuk2szjb3eh.jpeg" alt="Best Coursera program for Responsive web design" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-design-and-develop-a-website-using-figma-and-css"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fdesign-and-develop-website-using-figma-and-css"&gt;Design and Develop a Website using Figma and CSS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Figma is a fantastic tool for web design. It's also prevalent among web designers and web developers. This project from Coursera Project Network will teach you how to design and develop a complete website using Figma and CSS.&lt;/p&gt;

&lt;p&gt;Here are things you will learn in this Figma Guided Project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  how to use basic tools and features of Figma &lt;/li&gt;
&lt;li&gt;  how to design and create your website prototype&lt;/li&gt;
&lt;li&gt;  how to develop the prototype into a complete website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Talking about social proof, this is one of the highest-rated Courser projects to learn Figma and CSS with on average 4.7 ratings. More than 1600 students have already joined this course which shows the popularity of the course. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the link to join this program&lt;/strong&gt; - &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fdesign-and-develop-website-using-figma-and-css"&gt;Design and Develop a Website using Figma and CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/10-best-coursera-courses-for-web-development-and-web-design-9ec54ed92dd9"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Al8Tf7Jm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-TNglyBJVP4s/YclCrxpcELI/AAAAAAAAqpA/xqvhzB8b7hABMR7FEm12GnNIqRZLQaGHwCNcBGAsYHQ/w320-h168/XDP%25257ECOURSE%252521%25257Edesign-and-develop-website-using-figma-and-css.jpeg" alt="Best Coursera project for web development" width="320" height="168"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-introduction-to-accessible-web-development"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fintroduction-to-accessible-web-development"&gt;Introduction to Accessible Web Development &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is another project you can do to learn web development. This is a guided project which is provided by Coursera Project Network.  In this 2-hour project, you will learn the basics of accessible web development while building a newsletter signup page.&lt;/p&gt;

&lt;p&gt;Here are the key skills you will learn in this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  HTML&lt;/li&gt;
&lt;li&gt;  CSS&lt;/li&gt;
&lt;li&gt;  JavaScript&lt;/li&gt;
&lt;li&gt;  ARIA&lt;/li&gt;
&lt;li&gt;  Accessibility&lt;/li&gt;
&lt;li&gt;  Javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Talking about social proof, more than 1.5K learners have already have joined this course. It also has an amazing 4.8 rating out of 5, which is quite great and speaks a lot about the quality of the course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the link to join this course&lt;/strong&gt; - &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fintroduction-to-accessible-web-development"&gt;Introduction to Accessible Web Development &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fintroduction-to-accessible-web-development"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9hNae2CL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qxtf1iw0su50vyzck6b.jpeg" alt="best coursera course to learn full stack web development" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-introduction-to-web-development"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Flearn%2Fweb-development"&gt;Introduction to Web Development&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is another beginner-level course on Coursera to learn Web development offered by the University of California, Davis. This is a beginner-level course and it will take approximately 22 hours to complete this course.&lt;/p&gt;

&lt;p&gt;Unlike the first two specializations on this list, this is don't a specialization or collection of course but a single course where you will earn web development from scratch. You will learn how to use HTML, CSS, and JavaScript to build a real-world website in 2022.&lt;/p&gt;

&lt;p&gt;Talking about social proof, more than 181K students have joined this course and it has an amazing 4.7 rating out of 5 from close to 3.1K participants, which is quite phenomenal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-online-courses-to-learn-web-development.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jvs8CaVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-r8vLHMm9KMk/YclCRXwj26I/AAAAAAAAqog/obWnem4L-soQxVPCfwsjepxe5ZRiyBsSACNcBGAsYHQ/w320-h168/XDP%25257ECOURSE%252521%25257Eweb-development.jpeg" alt="Best Coursera course to learn web development" width="320" height="168"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-basic-user-interface-design-for-web-developers"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fbasic-user-interface-design-web-developers"&gt;Basic User Interface Design for Web Developers&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;UI Design and UX design is one of those skills that can make or break your web application. If you have used, well-designed apps and products like iPhone then you know that how well thought and intuitive design can make your products better, the same goes with web applications.&lt;/p&gt;

&lt;p&gt;If your web application is not well designed and has poor UI and UX elements then the user will not like it and it's more likely to fail to achieve its purpose.&lt;/p&gt;

&lt;p&gt;That's why it's important for web designers and web developers to have a basic idea of UI and UX design and this Coursera Project can help you to learn basics of user interface design from a web developer perspective.&lt;/p&gt;

&lt;p&gt;If you are just starting with building UI like creating HTML pages then you can join this guided project to learn some UI essentials and get skills to improve user experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2021/05/top-5-courses-to-learn-figma-for-ui-and.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9w4qe8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-b9IL06PXmBE/YclDt4MjzzI/AAAAAAAAqpk/28hTCwYn7oQAEqLgSvC-VAv_qOyuOyQMACNcBGAsYHQ/w320-h168/XDP%25257ECOURSE%252521%25257Ebasic-user-interface-design-web-developers.jpeg" alt="Best Coursera course for UI Design" width="320" height="168"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-introduction-to-css-in-web-development"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fintro-css-web-development"&gt;Introduction to CSS in Web Development&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As I have told you before, CSS is another important skill for both web developers and designers but mastering CSS is very tough. There are so many attributes and concepts like classes, flexbox, grids, a layout which can confuse even experienced developers.&lt;/p&gt;

&lt;p&gt;This Courser project will help you to start with CSS in a hands-on and guided way as you will learn  CSS by following live instructions. This is like someone sitting next to you and guiding you on how to do it and also overseeing that you are doing it in the right way or not.&lt;/p&gt;

&lt;p&gt;If you are just starting with CSS then I highly recommend you to join this 2-hour long CSS course on Coursera Project Network. More than 3K students have already joined this course and it has on average 4.6 ratings which are amazing.&lt;/p&gt;

&lt;p&gt;By the way, If you are planning to join multiple Coursera courses or specializations then consider taking &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fcourseraplus"&gt;Coursera Plus subscription&lt;/a&gt;&lt;/strong&gt; which provides you unlimited access to their most popular courses, including all of them listed here,  specialization, professional certificate, and guided projects. It cost around $399/year but it's completely worth your money as you get unlimited certificates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=40328&amp;amp;murl=https%3A%2F%2Fwww.coursera.org%2Fprojects%2Fintro-css-web-development"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5Nxbnl4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-K9xn2tDXZNw/YclDHzQqLtI/AAAAAAAAqpY/6hY92AL2tPo47bod_f_q1zmQREqSx90_wCNcBGAsYHQ/w395-h207/XDP%25257ECOURSE%252521%25257Eintro-css-web-development.jpeg" alt="Best CSS course from Coursera" width="395" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about the &lt;strong&gt;best web development courses and projects on Coursera&lt;/strong&gt;. The best thing about these courses and web development projects is that you don't need to join them individually, instead, you can just join Coursera Plus and get access to all of these best web development programs. I have specially chosen the courses and projects which are part of Coursera Plus.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Coursera and Programming Articles&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/08/top-10-coursera-courses-specilizations-and-certifications.html"&gt;Top 10 Courses Courses for Programmers in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/18-coursera-courses-you-can-join-in-2020-to-learn-from-the-worlds-top-tech-companies-google-74af46967d1e"&gt;My favorite Coursera Courses from Google and IBM&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/08/top-10-coursera-projects-to-learn-essential-programming-skills.html"&gt;Top 10 Coursera Projects for Programmers and Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/top-5-coursera-professional-certificates-for-programmers-IT-professionals.html"&gt;5 Best Coursera Professional Certificates for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/8-projects-you-can-buil-to-learn-python-in-2020-251dd5350d56"&gt;8 Projects You can do to learn Python in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/is-it-possible-to-get-master-of-computer-science-degree-online-coursera.html"&gt;Top 5 Computer Science Degrees you can join online on Coursera&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/01/coursera-vs-udemy-which-is-better-for-programming-tech.html"&gt;Udemy vs. Coursera? which is better to learn Tech and Programming&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/08/top-10-coursera-certifications-to-learn-web-development.html"&gt;Top 10 Coursera Courses to learn Web Development&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/02/does-udemy-coursera-edx-educative-or.html"&gt;Does Coursera Certificates helps in Job and Career&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2021/05/15-free-coursera-courses-to-learn-online.html"&gt;15 Free Coursera Courses to Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2021/05/best-johns-hopkins-courses-for-data-science-coursera.html"&gt;6 Best Johns Hopkins Courses for Data Science&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2020/06/top-5-data-science-degree-you-can-earn-online-coursera-edx.html"&gt;5 Data Science degrees you can earn on Coursera Online&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-machine-learning-and-data-science-certifications-and-training-courses-for-beginners-and-a6308497b764"&gt;10 Data Science and Machine Learning Certifications form Coursera&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-coursera-certificates-to-start-your-career-in-cloud-data-science-ai-mainframe-and-it-558690c83587"&gt;Top 10 Coursera Certifications to start your career&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-artificial-intelligence-in-2020-26d59d62f6fe"&gt;7 Best courses to learn Artificial Intelligence in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/udemy-vs-pluralsight-review-which-is-better-to-learn-code.html"&gt;Udemy vs. Pluralsight? Which is a better learning platform?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/09/codecademy-vs-udemy-vs-onemonth-which-is-better-for-learning-code.html#axzz6VYKcmyZz"&gt;Udemy vs. CocdeCademy vs. OneMonth?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/codecademy-or-pluralsight-which-is-a-better-platform-to-learn-coding-skills-59251a080642"&gt;Udemy vs. Educative vs. Codecademy? Which is better for beginners&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article. If you like these &lt;em&gt;best Web development courses and projects from Coursera&lt;/em&gt; then please share them with your friends and colleagues. If you have any questions or feedback, then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are looking for free Coursera courses to learn Python, then you can also check out my list of &lt;strong&gt;&lt;a href="https://medium.com/javarevisited/10-free-python-tutorials-and-courses-from-google-microsoft-and-coursera-for-beginners-96b9ad20b4e6"&gt;free Python tutorials from Google, Microsoft, and Coursera&lt;/a&gt;.&lt;/strong&gt; It contains free Coursera courses to learn Python from scratch.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Lessons Learned from Building Businesses as a Technical Solo Founder</title>
      <author>Mo Boudra</author>
      <pubDate>Thu, 30 Dec 2021 07:58:27 +0000</pubDate>
      <link>https://dev.to/moboudra/lessons-learned-from-building-businesses-as-a-technical-solo-founder-5dpb</link>
      <guid>https://dev.to/moboudra/lessons-learned-from-building-businesses-as-a-technical-solo-founder-5dpb</guid>
      <description>&lt;p&gt;I've been working on my SaaS projects all by myself over the last four years, and I've had some failures and some success, here are some of the lessons that I've learned!&lt;/p&gt;

&lt;p&gt;Although it may look easy from the outside, doing all the development, marketing, customer service and everything else required to run a business takes a lot of time and effort, but it's not impossible. There are countless examples of highly successful businesses operated by a one-person team.&lt;/p&gt;

&lt;p&gt;Some examples that I know of are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a ref="nofollow" href="https://unicornplatform.com/"&gt;Unicorn Platform ($19k MRR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a ref="nofollow" href="https://bannerbear.com/"&gt;Bannerbear ($27k MRR)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a ref="nofollow" href="https://nomadlist.com/"&gt;NomadList ($46K MRR)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As far as I know, they're all run by a single person doing all the things, including the development of the product. They're all very open about how they go about things and their blogs are a great source of inspiration!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tame-your-inner-perfectionist"&gt;
  &lt;/a&gt;
  Tame your inner perfectionist
&lt;/h2&gt;

&lt;p&gt;You have to let go of your ego and allow yourself to ship something that might embarrass you.&lt;/p&gt;

&lt;p&gt;Don't get me wrong, I am not talking about shipping a half-assed product or something that doesn't work . The hustle MVP mentality of building something functional in a weekend, and releasing it to see if anyone is desperate enough to buy your product is not sustainable either, there's a middle ground where you can be proud of your product but release with some rough edges.&lt;/p&gt;

&lt;p&gt;For some reason we think that when we release a project to the wild people will start flocking to the signup page, "you build it, they will come" right? but it's never the case, which yeah it is frustrating.&lt;/p&gt;

&lt;p&gt;You've spent all this time building this great but no one knows about it yet, marketing is as important if not more important than the development of the product, so make sure you allocate some time for that.&lt;/p&gt;

&lt;p&gt;In my experience, unless you already have an audience, it's going to be a long time form when you deploy your project to get paid customers that are not your family or buddies, so the earlier you launch that the earlier you can start getting real feedback and iterate on your product.&lt;/p&gt;

&lt;p&gt;Whenever I get the urge to spend a whole day refactoring simple things I ask myself if this will bring more value to the customer, if in the same amount of time that it will take me to refactor this little thing I can provide more value elsewhere I try to do that instead. I know, easier said than done :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-what-energizes-you"&gt;
  &lt;/a&gt;
  Focus on what energizes you
&lt;/h2&gt;

&lt;p&gt;A business needs constant attention and you have to be able to put in the hours, even when you don't want to, the worst thing is having to work in areas that you don't enjoy. Make sure you work on something that uses your strengths as much as possible, this will also give you a competitive advantage against the competition.&lt;/p&gt;

&lt;p&gt;This is the reason why I decided to work on something like &lt;a href="https://geniebot.co"&gt;Genie&lt;/a&gt;, it's a problem that I am passionate about and I can see it evolve in many directions, which excites me and I know will keep me on my toes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-it-for-the-right-reasons"&gt;
  &lt;/a&gt;
  Do it for the right reasons
&lt;/h2&gt;

&lt;p&gt;I have realized that all my failed projects had something in common, they were all built for the wrong reasons. I was chasing a trend, trying to take advantage of a growth opportunity, or unconsciously copying someone else's idea.&lt;/p&gt;

&lt;p&gt;When that happens it eventually gets to a point where you don't have the energy to work on it anymore and lose motivation, whenever you start a new project you should ask whether you can see yourself working on this in the next years and if you don't then the idea might not be worth pursuing.&lt;/p&gt;

&lt;p&gt;You have to figure out the right reasons yourself as everyone has different priorities, my reason at the moment is that I'd like to make a living doing what I enjoy doing, so I start from there, and then pick something that can solve a real problem and turn it into a business, and not the other way around.&lt;/p&gt;

&lt;p&gt;It's been proven that most of what makes a business successful is being consistent and relentlessly market and improving your product to solve real problems, so ensuring that you work on something that you'll be able to still enjoy during years is a pretty great indicator of future success.&lt;/p&gt;




&lt;p&gt;I hope you found this insightful! Share if you did :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am currently working on &lt;a href="https://geniebot.co"&gt;Genie&lt;/a&gt;, a platform that streamlines the process of building and deploying custom bots.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>technical</category>
      <category>founder</category>
      <category>financial</category>
      <category>independence</category>
    </item>
    <item>
      <title>🛑 Stop Use Of Javascript Like This.</title>
      <author>CTen_A Live</author>
      <pubDate>Thu, 30 Dec 2021 07:51:17 +0000</pubDate>
      <link>https://dev.to/ctenlive/stop-use-of-javascript-like-this-oi9</link>
      <guid>https://dev.to/ctenlive/stop-use-of-javascript-like-this-oi9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello"&gt;
  &lt;/a&gt;
  Hello
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.Use Arrow function instead regular function.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for Reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>＄Tracing Money in Development</title>
      <author>Yusuf Turhan Papurcu</author>
      <pubDate>Thu, 30 Dec 2021 07:26:50 +0000</pubDate>
      <link>https://dev.to/yusufpapurcu/tracing-money-in-development-54dg</link>
      <guid>https://dev.to/yusufpapurcu/tracing-money-in-development-54dg</guid>
      <description>&lt;p&gt;After nearly 1 month, I am here with %40 but noticeable progress. I was so busy so I had a little chances in weeks to develop this fun product. In 1 month I worked less than 10 hours for this project.&lt;/p&gt;

&lt;p&gt;And we have a really basic telegram bot 🎉🎉🎉&lt;/p&gt;

&lt;p&gt;I am saying basic because this telegram bot has 2 commands at all. One command for expense logging and one command for income logging. It works and stores data to supabase. I think thats enough for first step. So before talking about our next steps lets talk about progress some.&lt;/p&gt;

&lt;p&gt;I used &lt;a href="//github.com/go-telegram-bot-api/telegram-bot-api"&gt;&lt;code&gt;go-telegram-bot-api&lt;/code&gt;&lt;/a&gt; as a telegram bot client library. This library is useful enough to create this bot. Also I used &lt;a href="//github.com/supabase/postgrest-go"&gt;&lt;code&gt;postgrest-go&lt;/code&gt;&lt;/a&gt; for implementing supabase. Also with &lt;code&gt;postgrest-go&lt;/code&gt; I can use local postgreSQL for testing. Thats a nice feature.&lt;/p&gt;

&lt;p&gt;For testing I created very basic &lt;code&gt;docker-compose&lt;/code&gt;. Even I didn't write that. I copied from postgrest document :)&lt;/p&gt;

&lt;p&gt;And thats the progress. Oh also I created a logo for this project. You can see it on &lt;a href="https://github.com/tracingmoney"&gt;github organization&lt;/a&gt;. I wrote &lt;code&gt;$&lt;/code&gt; in excalidraw and screenshooted it.&lt;/p&gt;

&lt;p&gt;For next I will do some data science and I will create usage analysis for my expenses. I hope this project can reach its destination.&lt;/p&gt;

</description>
      <category>go</category>
      <category>product</category>
      <category>opensource</category>
      <category>programming</category>
    </item>
    <item>
      <title>Introduction to a stateful &amp; maintainable React Local Storage hook</title>
      <author>prakash chokalingam</author>
      <pubDate>Thu, 30 Dec 2021 07:09:13 +0000</pubDate>
      <link>https://dev.to/prakash_chokalingam/introduction-to-a-stateful-maintainable-react-local-storage-hook-31ie</link>
      <guid>https://dev.to/prakash_chokalingam/introduction-to-a-stateful-maintainable-react-local-storage-hook-31ie</guid>
      <description>&lt;p&gt;When it comes to storing a value on the client-side persistently, most of us will prefer browser storage (local or session storage) because of its simplified APIs to store and retrieve data. &lt;/p&gt;

&lt;p&gt;Yet maintaining these storages in large-scale applications are not so easy, especially with micro frontends architecture.&lt;/p&gt;

&lt;p&gt;The hook &lt;a href="https://www.npmjs.com/package/@webcored/react-local-storage"&gt;&lt;strong&gt;@webcored/react-local-storage&lt;/strong&gt;&lt;/a&gt; provides an awesome set of features to maintain the browser storage effortlessly for the long run.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#namespacing"&gt;Namespacing &amp;amp; Configurations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stateful"&gt;Defaults &amp;amp; States&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migration"&gt;Versions &amp;amp; Migrations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#namespacing-amp-configurations"&gt;
  &lt;/a&gt;
  Namespacing &amp;amp; Configurations &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Unless it's documented, we don't know the storage keys being used in an application &amp;amp; we are not sure about the values of the keys as well.&lt;/p&gt;

&lt;p&gt;Key name conflicts are more common in micro-frontends. An app should control its own set of keys and it should not override the common or other app's key. Hence, namespacing plays a major factor to avoid these conflicts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dc3c2vHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f25oj8undch2lzidxpjw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dc3c2vHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f25oj8undch2lzidxpjw.gif" alt="conflict" width="480" height="270"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;storageConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@webcored/react-local-storage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;storageConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If the key is &lt;code&gt;user&lt;/code&gt;, the storage key value is &lt;code&gt;dev#user&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#other-available-storage-configurations"&gt;
  &lt;/a&gt;
  other available storage configurations,
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;storage: choose between local or session storage&lt;/li&gt;
&lt;li&gt;storages: key configurations&lt;/li&gt;
&lt;li&gt;react: instance for state management (useState hook)
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./storages/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;storageConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@webcored/react-local-storage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;storageConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;storages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="c1"&gt;// user key configs&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#defaults-amp-states"&gt;
  &lt;/a&gt;
  Defaults &amp;amp; States &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The default state for keys in browser storage is the most required feature. It indulges a lot of programming effort to maintain the default state for every key.&lt;/p&gt;

&lt;p&gt;In @webcored/react-local-storage each key can have its config, and the default states for keys can be incorporated easily.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;/storages/user.js&lt;/small&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;storageKeyConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@webcored/react-local-storage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storageKeyConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The storages are simply accessible via the &lt;code&gt;useLocalStorage&lt;/code&gt; hook in a stateful way.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;/component.js&lt;/small&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@webcored/react-local-storage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userStorage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocalStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And the dispatcher comes with painless APIs to invoke the storage programmatically.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  update
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;userStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;avatar.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#reset"&gt;
  &lt;/a&gt;
  reset
&lt;/h4&gt;

&lt;p&gt;Reset the storage to the default state.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;userStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#remove"&gt;
  &lt;/a&gt;
  remove
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;userStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#versions-amp-migrations"&gt;
  &lt;/a&gt;
  Versions &amp;amp; Migrations &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_NHloWYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reg6y36rod3svtanpir2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_NHloWYF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reg6y36rod3svtanpir2.gif" alt="versions" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the storages are persistent, changing its data structure quite often may be challenging, and it involves a lot of code changes per key. With @webcored/react-local-storage these data migrations can be simply handled with a version number &amp;amp; a migration callback in the key config.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;storageKeyConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@webcored/react-local-storage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storageKeyConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Guest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guest.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// new&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;@webcored/react-local-storage supports versioning of keys by default. &lt;br&gt;
As per the above code block, the current version of user storage is incremented. While rendering, if the browser had an outdated version of storage, the migration method will be invoked. The migrated value will be considered as the latest version.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#other-highlights"&gt;
  &lt;/a&gt;
  other highlights
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;supports all data types&lt;/li&gt;
&lt;li&gt;typescript supported&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#checkout-the-sample-apps"&gt;
  &lt;/a&gt;
  checkout the sample apps
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/webcored/react-local-storage-app-js"&gt;javascript&lt;/a&gt; | &lt;a href="https://github.com/webcored/react-local-storage-app-ts"&gt;javascript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you like, Promote the lib with a star ⭐️ &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/webcored"&gt;
        webcored
      &lt;/a&gt; / &lt;a href="https://github.com/webcored/react-local-storage"&gt;
        react-local-storage
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A stateful react hook for browser storage
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7d0cdd56ce9b3922b485bcdf7a0cf6cbe3ed5637448dece86abd03ffa758142c/68747470733a2f2f776562636f7265642d6173736574732e6e65746c6966792e6170702f72656163742d6c6f63616c2d73746f726167652e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/7d0cdd56ce9b3922b485bcdf7a0cf6cbe3ed5637448dece86abd03ffa758142c/68747470733a2f2f776562636f7265642d6173736574732e6e65746c6966792e6170702f72656163742d6c6f63616c2d73746f726167652e706e67" height="250px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
React Local Storage&lt;/h1&gt;
&lt;p&gt;A stateful react hook for browser storage.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/webcored/react-local-storage/actions/workflows/build.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UvrJSUlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/webcored/react-local-storage/actions/workflows/build.yml/badge.svg%3Fbranch%3Dmain" alt="build"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@webcored/react-local-storage" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f462fe8626e589ed2d9d417f0e5c2e11ca7445613be2b9487203c28e4a704d04/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40776562636f7265642f72656163742d6c6f63616c2d73746f726167653f636f6c6f723d2532333935394441" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@webcored/react-local-storage" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/264991ca77dd0c71a26a5253063c6af1fb50e1749786f045c7315d18821a3b63/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f40776562636f7265642f72656163742d6c6f63616c2d73746f726167653f636f6c6f723d2532333935394441" alt="downloads"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/410b79d62830611296203b20c771210777dd87dcd8acbb1997e408ae8c1530b4/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f74797065732f74797065736372697074"&gt;&lt;img src="https://camo.githubusercontent.com/410b79d62830611296203b20c771210777dd87dcd8acbb1997e408ae8c1530b4/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f74797065732f74797065736372697074" alt="typescript"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9c966211cb94a2ca8a589bdb5fe8a6227f8102c772a7c17281d0c6f49fc789da/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d253343434f4c4f522533452e7376673f7374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/9c966211cb94a2ca8a589bdb5fe8a6227f8102c772a7c17281d0c6f49fc789da/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d253343434f4c4f522533452e7376673f7374796c653d666c6174" alt="contributions"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Why?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/webcored/react-local-storage#configurations"&gt;Configurable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webcored/react-local-storage#defaults"&gt;Defaults support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webcored/react-local-storage#versions--migrations"&gt;Versions &amp;amp; Migrations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm install @webcored/react-local-storage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;component.jsx&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;useLocalStorage&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"@webcored/react-local-storage"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-s1"&gt;user&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;userStorage&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useLocalStorage&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'user'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

...&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
typescript

&lt;div class="highlight highlight-source-ts position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-s1"&gt;user&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;userStorage&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useLocalStorage&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-smi"&gt;User&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'user'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  
...&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;h5&gt;
update&lt;/h5&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;userStorage.update({ ...user, name: 'new name' });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;
remove&lt;/h5&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;userStorage.remove();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;
reset&lt;/h5&gt;
&lt;p&gt;Reset's to the default value provided in the &lt;a href="https://github.com/webcored/react-local-storage#defaults"&gt;key config&lt;/a&gt;&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;userStorage.reset();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Sample app&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://github.com/webcored/react-local-storage-app-js"&gt;View on Github&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://codesandbox.io/s/react-local-storage-js-di7we" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/90808661433696bc57dce8d4ad732307b5cec6270e6b846f114dcd7ee7f9458a/68747470733a2f2f636f646573616e64626f782e696f2f7374617469632f696d672f706c61792d636f646573616e64626f782e737667"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;&lt;/div&gt;
typescript

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://github.com/webcored/react-local-storage-app-ts"&gt;View on Github&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://codesandbox.io/s/react-local-storage-ts-gmmiy" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/90808661433696bc57dce8d4ad732307b5cec6270e6b846f114dcd7ee7f9458a/68747470733a2f2f636f646573616e64626f782e696f2f7374617469632f696d672f706c61792d636f646573616e64626f782e737667"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;h2&gt;
Configurations&lt;/h2&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;React&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'react'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;user&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'./storages/user'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;storageConfig&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"@webcored/react-local-storage"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-en"&gt;storageConfig&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;namespace&lt;/span&gt;: &lt;span class="pl-s"&gt;'app'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;delimiter&lt;/span&gt;: &lt;span class="pl-s"&gt;'/'&lt;/span&gt;
  &lt;span class="pl-s1"&gt;react&lt;/span&gt;: &lt;span class="pl-v"&gt;React&lt;/span&gt;
  &lt;span class="pl-s1"&gt;storages&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    user
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
available &lt;a href="https://github.com/webcored/react-local-storage/blob/main/src/types.ts#L9"&gt;configuration options&lt;/a&gt;
&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;config&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;optional&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;namespace&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;namespace your storage keys to &lt;br&gt; &lt;strong&gt;avoid conflicts especially&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/webcored/react-local-storage"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>reactlocalstorage</category>
      <category>react</category>
      <category>reacthooks</category>
      <category>javascript</category>
    </item>
    <item>
      <title>RPA: Catalyst of Industrial Revolution 4.0</title>
      <author>K S Monish Kumar</author>
      <pubDate>Thu, 30 Dec 2021 06:56:59 +0000</pubDate>
      <link>https://dev.to/monish3004/rpa-catalyst-of-industrial-revolution-40-53nj</link>
      <guid>https://dev.to/monish3004/rpa-catalyst-of-industrial-revolution-40-53nj</guid>
      <description>&lt;p&gt;Robotic Process Automation popularly known as RPA. It is used to automate a repetitive task such as sending 500 emails per day, extracting some data from any number of invoices which are partially structured and a storing it in a excel file which is structured.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It was invented to convert unstructured data generated in the third industrial revolution into structured data by analyzing it. It is capable of mimicking human actions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many IDE's (Integrated Development Environment) to handle RPA. The environment can be categorized into &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No Code Platform&lt;/li&gt;
&lt;li&gt;Coding Platform&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No Code Platform is preferred by everyone as it is efficient in many ways. The major Platforms are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;UiPath&lt;/li&gt;
&lt;li&gt;Blue Prism&lt;/li&gt;
&lt;li&gt;Automation Anywhere&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a automations that I have made which makes my life easy.&lt;/p&gt;

&lt;p&gt;During the pandemic everyone has to join meetings or classes virtually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joining-classes-or-meeting-on-the-scheduled-time"&gt;
  &lt;/a&gt;
  Joining classes or meeting on the scheduled time
&lt;/h2&gt;

&lt;p&gt;Here is the link for the video for the automation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1qs4yHUd32eKIKEmarNo7bDpO4BNL_5kw/view?usp=sharing"&gt;Video Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Subscribe for more automations.&lt;/p&gt;

</description>
      <category>automation</category>
      <category>uipath</category>
    </item>
    <item>
      <title>Create React App. Part 3 of 10: Routing</title>
      <author>101samovar</author>
      <pubDate>Thu, 30 Dec 2021 06:55:34 +0000</pubDate>
      <link>https://dev.to/101samovar/create-react-app-part-3-of-10-routing-gap</link>
      <guid>https://dev.to/101samovar/create-react-app-part-3-of-10-routing-gap</guid>
      <description>&lt;p&gt;We are creating a React App.&lt;br&gt;
The React MindMap App.&lt;br&gt;
We have done the layout.&lt;br&gt;
We have created icon buttons and toolbars.&lt;br&gt;
Now we need routing to change screens.&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="https://github.com/101samovar/react-mindmap.git"&gt;https://github.com/101samovar/react-mindmap.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our channel:&lt;br&gt;
&lt;a href="https://youtu.be/0XYtePSyFUs"&gt;https://youtu.be/0XYtePSyFUs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Awesome VSCode extensions for a better coding experience [ Part 1 ]</title>
      <author>Hyperloop007</author>
      <pubDate>Thu, 30 Dec 2021 06:52:36 +0000</pubDate>
      <link>https://dev.to/hyperloop/awesome-vscode-extensions-for-a-better-coding-experience-part-1--3i9b</link>
      <guid>https://dev.to/hyperloop/awesome-vscode-extensions-for-a-better-coding-experience-part-1--3i9b</guid>
      <description>&lt;p&gt;Imagine yourself typing all the HTML boilerplate code when you decided to make a new project or imagine not being able to recall the name of that single property in css and searching the web for it. Why am I talking about all this? It's obvious because this kind of stuff would really suck. So, that brings us to the wonderful extensions that we have in vscode made by a lot of people and you can use them for free.&lt;/p&gt;

&lt;p&gt;What are vscode extensions anyway?&lt;/p&gt;

&lt;p&gt;VSCode extensions let you add debuggers and various tools to your environment and works through various custom settings that the extensions bring with them.&lt;/p&gt;

&lt;p&gt;VSCode extensions are a great way to reduce your workload and make it easy for you to write your code and format it. You can even create your own vscode extensions but we won't talk about it here. There are a lots of extensions available on vscode as of today but I will mention some of which I find really useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Auto Close Tag:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you can probably figure out from the name here this extension automatically closes the HTML/XML opening tags you write. You can customize or change the settings from the vscode auto close tag settings.&lt;br&gt;
It can even be used to close the self closing tags in HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TaGmQfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwgs7zwzi13bqlguqjif.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TaGmQfL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwgs7zwzi13bqlguqjif.gif" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Auto Rename Tag:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This very extension lets you rename both the opening and the closing tag at once saving you the pain of renaming the tags one by one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjFaKrW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix2qhh1ykrcudrisciol.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjFaKrW0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix2qhh1ykrcudrisciol.gif" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Bracket Pair Colorizer:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension colors bracket pairs based on their positioning in the code i.e. bracket pairs adjacent to each other will have different set of color from each other.&lt;/p&gt;

&lt;p&gt;This makes the code look really clean and makes it easy to figure out the block of code you want to go to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWo1vZOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlowfxqsmbh9j83c8ewq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWo1vZOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlowfxqsmbh9j83c8ewq.jpg" alt="Image description" width="859" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Indent Rainbows:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This extension is not all that different from the Bracket Pair Colorizer, just that it does the same with levels of indentations which can prove to be helpful in a language like python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VwlXPE51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0eh2rsmjybtnmuc3mu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VwlXPE51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0eh2rsmjybtnmuc3mu4.png" alt="Image description" width="443" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Live Server:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not much needs to be said about one of the most popular and useful extensions of all in vscode where you can see live previews and changes of your work with just a single click.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qdqkQeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fdsh89duovgb9luf8v1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qdqkQeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fdsh89duovgb9luf8v1.gif" alt="Image description" width="880" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many more to come in part 2...&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>ChristmasLight Css</title>
      <author>0xKirz</author>
      <pubDate>Thu, 30 Dec 2021 05:42:31 +0000</pubDate>
      <link>https://dev.to/kirzin/christmaslight-css-593a</link>
      <guid>https://dev.to/kirzin/christmaslight-css-593a</guid>
      <description>&lt;p&gt;&lt;strong&gt;Merry Christmas &amp;amp; Happy New year Everyone&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BM9_6Xu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sth2alarcjgu8nsvuqh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BM9_6Xu6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sth2alarcjgu8nsvuqh1.png" alt="Image description" width="880" height="562"&gt;&lt;/a&gt;&lt;iframe height="600" src="https://codepen.io/kirzin/embed/RwLQQMZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>How to Rice Windows.</title>
      <author>Dhruv Anand</author>
      <pubDate>Thu, 30 Dec 2021 05:29:21 +0000</pubDate>
      <link>https://dev.to/ananddhruv295/how-to-rice-windows-2h12</link>
      <guid>https://dev.to/ananddhruv295/how-to-rice-windows-2h12</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ricing-windows"&gt;
  &lt;/a&gt;
  &lt;em&gt;Ricing Windows&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wg5_8xod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1p30bfgxqu3gmi849es.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wg5_8xod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1p30bfgxqu3gmi849es.png" alt="Desktop Preview" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#make-your-desktop-look-sick-amp-clean"&gt;
  &lt;/a&gt;
  Make your Desktop look sick &amp;amp; clean.
&lt;/h5&gt;




&lt;p&gt;Here is a list if software and applications that I have used to rice my desktop. &lt;/p&gt;

&lt;p&gt;&lt;u&gt;Web Browser&lt;/u&gt; ▻ &lt;strong&gt;Firefox&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Music Streaming&lt;/u&gt; ▻ &lt;strong&gt;Spotify&lt;/strong&gt; &lt;br&gt;
&lt;u&gt;Messaging Platform&lt;/u&gt; ▻ &lt;strong&gt;Discord&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Text Editor&lt;/u&gt; ▻ &lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Terminal&lt;/u&gt;▻ &lt;strong&gt;Windows Terminal&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;File Manager&lt;/u&gt; ▻ &lt;strong&gt;Files&lt;/strong&gt; &lt;br&gt;
&lt;u&gt;Wallpaper Manager&lt;/u&gt; ▻ &lt;strong&gt;Lively&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;App Launcher&lt;/u&gt; ▻ &lt;strong&gt;PowerToys Run&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Status Bar&lt;/u&gt; ▻ &lt;strong&gt;PolyBar&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Music Widget&lt;/u&gt; ▻ &lt;strong&gt;ModularPlayers&lt;/strong&gt;&lt;br&gt;
&lt;u&gt;Dock&lt;/u&gt; ▻ &lt;strong&gt;Nexus&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;Head over to my GitHub repository ↴&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iDCoded"&gt;
        iDCoded
      &lt;/a&gt; / &lt;a href="https://github.com/iDCoded/Windows-Rice"&gt;
        Windows-Rice
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      How to rice Windows. 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;i&gt;Windows Ricing&lt;/i&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147634871-af27d9fd-152c-4ea5-be52-48861ed60908.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4vKqtm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147634871-af27d9fd-152c-4ea5-be52-48861ed60908.png" alt="Desktop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Wallpaper&lt;/strong&gt; : Spaceman Wallpaper → &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/3bc9ba24d3301ac7fe8cf73062e44e7aba87e7d9fbb873b46422ca066ccc64b4/68747470733a2f2f6d796c69766577616c6c7061706572732e636f6d2f66616e746173792f73706163656d616e2d6a656c6c79666973682d6c6976652d77616c6c70617065722f"&gt;&lt;img src="https://camo.githubusercontent.com/3bc9ba24d3301ac7fe8cf73062e44e7aba87e7d9fbb873b46422ca066ccc64b4/68747470733a2f2f6d796c69766577616c6c7061706572732e636f6d2f66616e746173792f73706163656d616e2d6a656c6c79666973682d6c6976652d77616c6c70617065722f" alt="Here"&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;I have used &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a8926e4dcecc7bec7e3d82f91bce9d4ded6646cb77639656a7e97408c184c452/68747470733a2f2f6c6976656c7977616c6c70617065722e6e65742f"&gt;&lt;img src="https://camo.githubusercontent.com/a8926e4dcecc7bec7e3d82f91bce9d4ded6646cb77639656a7e97408c184c452/68747470733a2f2f6c6976656c7977616c6c70617065722e6e65742f" alt="Lively"&gt;&lt;/a&gt; for a live wallpaper.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Top bar&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://github.com/khanhas/Polybar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jOULg9Sf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/khanhas/Polybar" alt="Polybar"&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/73d2b848a51f3c355407ca539ce9318245a9b2e4cf7b7dcd2eadcc27259f8875/68747470733a2f2f7777772e7261696e6d657465722e6e65742f"&gt;&lt;img src="https://camo.githubusercontent.com/73d2b848a51f3c355407ca539ce9318245a9b2e4cf7b7dcd2eadcc27259f8875/68747470733a2f2f7777772e7261696e6d657465722e6e65742f" alt="Rainmeter"&gt;&lt;/a&gt; to add Widgets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dock&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2155e470231cba17281232606d788f55fc0da9a748585fe48cbfae2f4b930f26/68747470733a2f2f7777772e77696e737465702e6e65742f"&gt;&lt;img src="https://camo.githubusercontent.com/2155e470231cba17281232606d788f55fc0da9a748585fe48cbfae2f4b930f26/68747470733a2f2f7777772e77696e737465702e6e65742f" alt="Nexus"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Music Controller&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e724f97f5d9c028f73a9b0141325e113c3efe41f0ac13d0d20bf06b49358580c/68747470733a2f2f7777772e64657669616e746172742e636f6d2f6a61786f726967696e616c732f6172742f4d6f64756c6172506c61796572732d76312d332d383836353737323536"&gt;&lt;img src="https://camo.githubusercontent.com/e724f97f5d9c028f73a9b0141325e113c3efe41f0ac13d0d20bf06b49358580c/68747470733a2f2f7777772e64657669616e746172742e636f6d2f6a61786f726967696e616c732f6172742f4d6f64756c6172506c61796572732d76312d332d383836353737323536" alt="ModularPlayers"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
Applications&lt;/h1&gt;
&lt;h3&gt;
Discord&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147639804-098fe178-7ede-4437-83c1-d50cc108d2ee.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZpu0YpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147639804-098fe178-7ede-4437-83c1-d50cc108d2ee.png" alt="discord"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/iDCoded/Windows-Ricebetterdiscord.app/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vv-3L_yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/iDCoded/Windows-Ricebetterdiscord.app/" alt="BetterDiscord"&gt;&lt;/a&gt; for &lt;strong&gt;Plugins&lt;/strong&gt; &amp;amp; &lt;strong&gt;Themes&lt;/strong&gt; to enhance Discord.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Theme&lt;/strong&gt; : &lt;a rel="noopener noreferrer" href="https://github.com/CapnKitten/Material-Discord"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6l9UtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/CapnKitten/Material-Discord" alt="MaterialDiscord"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugins&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plugins&lt;/th&gt;
&lt;th&gt;Links&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;AppNotifications&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://betterdiscord.app/plugin/AppNotifications" rel="nofollow"&gt;https://betterdiscord.app/plugin/AppNotifications&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;BetterImageViewer&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://1lighty.github.io/BetterDiscordStuff/?plugin=BetterImageViewer" rel="nofollow"&gt;https://1lighty.github.io/BetterDiscordStuff/?plugin=BetterImageViewer&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GameActivityToggle&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://betterdiscord.app/plugin/GameActivityToggle" rel="nofollow"&gt;https://betterdiscord.app/plugin/GameActivityToggle&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SpotifyControls&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://betterdiscord.app/plugin/SpotifyControls" rel="nofollow"&gt;https://betterdiscord.app/plugin/SpotifyControls&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
Spotify&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147640259-aa7d17a3-3f1a-442d-b290-06fbe7a1f63e.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLRWKc1q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147640259-aa7d17a3-3f1a-442d-b290-06fbe7a1f63e.png" alt="spotify"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/317e2b641f21fade5e938163f6625394c2ede2e15069754c41faadad84531308/68747470733a2f2f7370696365746966792e6170702f"&gt;&lt;img src="https://camo.githubusercontent.com/317e2b641f21fade5e938163f6625394c2ede2e15069754c41faadad84531308/68747470733a2f2f7370696365746966792e6170702f" alt="Spicetify-cli"&gt;&lt;/a&gt; Commandline tool to customize Spotify client.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Theme&lt;/strong&gt; : &lt;strong&gt;Dribbblish&lt;/strong&gt; Color scheme : &lt;strong&gt;Nord-dark&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extensions&lt;/strong&gt; : &lt;strong&gt;Dribbblish&lt;/strong&gt;, &lt;strong&gt;Popup-Lyrics&lt;/strong&gt;, &lt;strong&gt;Full App Display&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Editor&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147641740-3f65c4f6-2582-49bf-b5fb-e40007b5a328.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWqfL_v5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147641740-3f65c4f6-2582-49bf-b5fb-e40007b5a328.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Theme&lt;/strong&gt; : &lt;strong&gt;GitHub Dark&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Font&lt;/strong&gt; : &lt;strong&gt;Fira Code&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Terminal&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Windows Terminal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147642117-409d2389-6c13-428c-83d1-739022060ad8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eYSlU7Yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147642117-409d2389-6c13-428c-83d1-739022060ad8.png" alt="windows terminal"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Colorscheme&lt;/strong&gt; : &lt;strong&gt;One Half Dark&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;System Info&lt;/strong&gt; : &lt;strong&gt;Screenfetch&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
File Manager&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Files&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147641318-768e3acd-3bb9-447d-9148-227d17a6ae1d.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTwG4lii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147641318-768e3acd-3bb9-447d-9148-227d17a6ae1d.png" alt="files"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Custom Theme&lt;/strong&gt; : &lt;strong&gt;Glass&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
App Launcher&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;PowerToys Run&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65074550/147641624-5eff79c0-975d-47a6-82ce-6c40061045e5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----OCf1PQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65074550/147641624-5eff79c0-975d-47a6-82ce-6c40061045e5.png" alt="powertoys run"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/iDCoded/Windows-Rice"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>windows</category>
      <category>ricing</category>
      <category>customization</category>
    </item>
    <item>
      <title>Reverse HTTP proxy over WebSocket in Go (Part 5)</title>
      <author>Kazuki Higashiguchi</author>
      <pubDate>Thu, 30 Dec 2021 04:51:58 +0000</pubDate>
      <link>https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-5-2i0f</link>
      <guid>https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-5-2i0f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#series-introduction"&gt;
  &lt;/a&gt;
  Series introduction
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c"&gt;part 4&lt;/a&gt; I talked about how to relay TCP connection from "App" to the peer of WebSocket, especially implementation to take a WebSocket connection available from pools for relaying received requests.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Reverse HTTP proxy over WebSocket in Go (Part 4)&lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi ・ Dec 28 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#websocket&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In this post, I will be starting to talk about how to send the request to the peer through the WebSocket connection.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start a WebSocket server (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-1-13n4"&gt;Part 1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Establish a WebSocket connection (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-2-o4a"&gt;Part 2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Relay TCP connection from "App" to the peer of WebSocket (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;Part 3&lt;/a&gt; | &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-213i-temp-slug-1615861"&gt;Part 4&lt;/a&gt; | Part 5)&lt;/li&gt;
&lt;li&gt;Relay TCP connection in WebSocket data to "internal API"&lt;/li&gt;
&lt;li&gt;Keep a established connection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reverse-http-proxy-over-websocket"&gt;
  &lt;/a&gt;
  Reverse HTTP proxy over WebSocket
&lt;/h2&gt;

&lt;p&gt;A reverse HTTP proxy over WebSocket is a type of proxies, which retrieves resources on behalf on a client from servers and uses the WebSocket protocol as a "tunnel" to pass TCP communication from server to client.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46eqlV8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iupaoeq283lyeqpkg049.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46eqlV8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iupaoeq283lyeqpkg049.png" alt="A network diagram for reverse proxy over WebSocket" width="681" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll introduce Go sample project forked from &lt;a href="https://github.com/root-gg/wsp"&gt;root-gg/wsp&lt;/a&gt; (I forked it because maintenance has stopped and the Go language and libraries version needed to be updated).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hgsgtk"&gt;
        hgsgtk
      &lt;/a&gt; / &lt;a href="https://github.com/hgsgtk/wsp"&gt;
        wsp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      HTTP tunnel over Websocket
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#send-the-request-to-the-peer-through-the-websocket-connection"&gt;
  &lt;/a&gt;
  Send the request to the peer through the WebSocket connection
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the continuation of the previous &lt;a href="https://github.com/hgsgtk/wsp/blob/8d7d7b4eb6aa700950c41756608177514b935507/server/server.go#L189"&gt;HTTP handler code&lt;/a&gt;, which waits the request from "app" to the endpoint &lt;code&gt;/requests/&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit): [1]: Receive requests to be proxied&lt;/span&gt;

    &lt;span class="c"&gt;// [2]: Take a WebSocket connection available from pools for relaying received requests.&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewConnectionRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c"&gt;// "Dispatcher" is running in a separate thread from the server by `go s.dispatchConnections()`.&lt;/span&gt;
    &lt;span class="c"&gt;// It waits to receive requests to dispatch connection from available pools to clients requests.&lt;/span&gt;
    &lt;span class="c"&gt;// https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L93&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// Notify request from handler to dispatcher through Server.dispatcher channel.&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
    &lt;span class="c"&gt;// Dispatcher tries to find an available connection pool,&lt;/span&gt;
    &lt;span class="c"&gt;// and it returns the connection through Server.connection channel.&lt;/span&gt;
    &lt;span class="c"&gt;// https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L189&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// Here waiting for a result from dispatcher.&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// It means that dispatcher has set `nil` which is a system error case that is&lt;/span&gt;
        &lt;span class="c"&gt;// not expected in the normal flow.&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// [3]: Send the request to the peer through the WebSocket connection.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// An error occurred throw the connection away&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;// Try to return an error to the client&lt;/span&gt;
        &lt;span class="c"&gt;// This might fail if response headers have already been sent&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the implementation up to &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c"&gt;part 4&lt;/a&gt;, we were able to identify the WebSocket connection to be relayed. Next, send an HTTP request over the connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hgsgtk/wsp/blob/191adde5c2b3ac535f8b94cdc345848b2f6f4258/server/connection.go#L109"&gt;connection.proxyRequest&lt;/a&gt; does it. Let's look at the implementation. There are six steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Serialize HTTP request&lt;/li&gt;
&lt;li&gt;Send the HTTP request to the peer&lt;/li&gt;
&lt;li&gt;Wait the HTTP response is ready&lt;/li&gt;
&lt;li&gt;Read the HTTP response from the peer&lt;/li&gt;
&lt;li&gt;Wait the HTTP response body is ready&lt;/li&gt;
&lt;li&gt;Read the HTTP response body from the peer&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a diagram describing the steps of communication over the WebSocket connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgDGHB1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzk8wn9u2b5l9grhfjl3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgDGHB1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gzk8wn9u2b5l9grhfjl3.png" alt="A diagram describing the steps of communication over the WebSocket connection" width="880" height="510"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-serialize-http-request-2-send-an-http-request-on-the-websocket-connection"&gt;
  &lt;/a&gt;
  1. Serialize HTTP request / 2. send an HTTP request on the WebSocket connection
&lt;/h2&gt;

&lt;p&gt;At first, it serializes an HTTP request and send it to the WebSocket connection peer.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"proxy request to %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// [1]: Serialize HTTP request&lt;/span&gt;
    &lt;span class="n"&gt;jsonReq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SerializeHTTPRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to serialize request : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// [2]: Send the HTTP request to the peer&lt;/span&gt;
    &lt;span class="c"&gt;// Send the serialized HTTP request to the the peer&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonReq&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to write request : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Pipe the HTTP request body to the the peer&lt;/span&gt;
    &lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BinaryMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to get request body writer : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe request body : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe request body (close) : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In WebSocket connection, the kind of message is defined in the  &lt;a href="https://datatracker.ietf.org/doc/html/rfc6455#section-11.8"&gt;RFC 6455&lt;/a&gt; called Opcode, and Text Frame and Binary Frame can be used for data exchange. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Opcode&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Continuation Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Text Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Binary Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Connection Close Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Ping Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Pong Frame&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In this case, it sends a JSON serialized HTTP meta data (URL, Method, Header, and Content-Length) in Text Frame, and sends a  request body in Binary Frame.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;HTTPRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Method&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;URL&lt;/span&gt;           &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;Header&lt;/span&gt;        &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;ContentLength&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;SerializeHTTPRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;HTTPRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HTTPRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentLength&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/hgsgtk/wsp/blob/191adde5c2b3ac535f8b94cdc345848b2f6f4258/request.go#L19"&gt;SerializeHTTPRequest&lt;/a&gt; serializes HTTP request.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;req.Header&lt;/code&gt; is a value who type is &lt;a href="https://pkg.go.dev/net/http#Header"&gt;http.Header&lt;/a&gt;. A Header represents the key-value pairs in an HTTP header.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;][]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A Header represents the key-value pairs in an HTTP header.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Accept"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"*/*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"User-Agent"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"curl/7.77.0"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"X-Proxy-Destination"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:8081/hello"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pkg.go.dev/encoding/json#Marshal"&gt;json.Marshal&lt;/a&gt;  returns the JSON encoding of the value. Struct values encode as JSON objects.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;jsonReq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Marshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SerializeHTTPRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Each exported struct field becomes a member of the object. If you want to customize the encoding struct field, you can use the struct field's tag &lt;code&gt;json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;HTTPRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"customized"`&lt;/span&gt; &lt;span class="c"&gt;// {"customized":"GET"}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Send JSON data when serialize is complete.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jsonReq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.WriteMessage"&gt;websocket.WriteMessage&lt;/a&gt; is the function to write any message in the connection, and &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#TextMessage"&gt;websocket.TextMessage&lt;/a&gt; is a constant representing a text data message.&lt;/p&gt;

&lt;p&gt;Then, pipe the HTTP request body to the WebSocket connection peer.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Pipe the HTTP request body to the the peer&lt;/span&gt;
&lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BinaryMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to get request body writer : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe request body : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bodyWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe request body (close) : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.NextWriter"&gt;websocket.NextWriter&lt;/a&gt; returns a writer for the next message to send. An application can send and receive messages using the io.WriteCloser and io.Reader interfaces. In this case, The content of &lt;code&gt;r.Body&lt;/code&gt; is written to writer.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-wait-the-http-response-is-ready-to-read"&gt;
  &lt;/a&gt;
  3. Wait the HTTP response is ready to read
&lt;/h2&gt;

&lt;p&gt;Let's move on the rest code, to receive an HTTP response and parse it. Here is one of difficult points to proxy an HTTP request over an WebSocket connection, because the &lt;code&gt;wsp_server&lt;/code&gt; does not know when the &lt;code&gt;wsp_client&lt;/code&gt; writes the HTTP response over the WebSocket connection. We need to implement waiting for response to come back.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UFO-NpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fr5h4tfs2m4dtxfefwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UFO-NpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fr5h4tfs2m4dtxfefwl.png" alt="A diagram describing the communication flow between wsp_server and wsp_client" width="880" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll show you the whole picture first to address the issue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkHO8BZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zibzczwpdckbgwkllr9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkHO8BZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zibzczwpdckbgwkllr9y.png" alt="The whole picture" width="880" height="534"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In advance, the &lt;a href="https://github.com/hgsgtk/wsp/blob/3ffb7b3da3ad80d2ddaa322da8150264766e62a7/server/connection.go#L70"&gt;read&lt;/a&gt; function waits to receive the HTTP response as an another thread (goroutine) "reader”.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="n"&gt;nextResponse&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// NewConnection returns a new Connection.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pool&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit: Initialize a new Connection)&lt;/span&gt;

    &lt;span class="c"&gt;// Start to listen to incoming messages over the WebSocket connection&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;recover&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"WebSocket crash recovered : %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;Closed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// https://godoc.org/github.com/gorilla/websocket#hdr-Control_Messages&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;Busy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// We received a wild unexpected message&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// When it gets here, it is expected to be either a HttpResponse or a HttpResponseBody has been returned.&lt;/span&gt;
        &lt;span class="c"&gt;//&lt;/span&gt;
        &lt;span class="c"&gt;// Next, it waits to receive the value from the Connection.proxyRequest function that is invoked in the "server" thread.&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextResponse&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// We have been unlocked by Close()&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Send the reader back to Connection.proxyRequest&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;

        &lt;span class="c"&gt;// Wait for proxyRequest to close the channel&lt;/span&gt;
        &lt;span class="c"&gt;// this notify that it is done with the reader&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When the new WebSocket connection is connected, it starts a goroutine which listens to incoming messages over the WebSocket connection. It continues running until the connection itself is closed or any unexpected error occurs. In this loop, use &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.NextReader"&gt;websocket.NewReader&lt;/a&gt; to read incoming messages.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// read loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;NextReader returns the next data message received from the peer. In this case, it means the message from a &lt;code&gt;wsp_client&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messageType&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The returned messageType, which means opcode in RFC 6455, is either TextMessage or BinaryMessage. In addition to these opcodes, the WebSocket protocol defines three control messages: close (8: Connection Close Frame), ping (9: Ping Frame), and pong (10: Pong Frame). If you implement WebSocket messaging from scratch, you need to process these control messages, but &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket"&gt;gorilla/websocket&lt;/a&gt; is designed so that you don't have to be concern about it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the application is not otherwise interested in messages from the peer, then the application should start a goroutine to read and discard messages from the peer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#hdr-Control_Messages"&gt;https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#hdr-Control_Messages&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And, the a must break out of the read loop when &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.NextReader"&gt;websocket.NextReader&lt;/a&gt; returns a non-nil error value. &lt;a href="https://github.com/gorilla/websocket/blob/v1.4.2/conn.go#L999"&gt;gorilla/websocket&lt;/a&gt; implements that if you do not break out the read loop and repeat many times, you will get a panic like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// gorilla/websocket conn.go&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messageType&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// Applications that do handle the error returned from this method spin in&lt;/span&gt;
    &lt;span class="c"&gt;// tight loop on connection failure. To help application developers detect&lt;/span&gt;
    &lt;span class="c"&gt;// this error, panic on repeated reads to the failed connection.&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErrCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErrCount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"repeated read on failed websocket connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;noFrame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;NextReader will block here until a message is received or the WebSocket connection is closed. The following code in &lt;a href="https://github.com/gorilla/websocket/blob/v1.4.2/conn.go#L979"&gt;gorolla/websocket&lt;/a&gt; keeps reading the next data frame until a TextMessage or BinaryMessage is received. Note that &lt;a href="https://datatracker.ietf.org/doc/html/rfc6455#section-5"&gt;data frame&lt;/a&gt; is a message format in the WebSocket protocol defined in RFC 6455.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// gorilla/websocket conn.go&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NextReader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;messageType&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;frameType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;advanceFrame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readErr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hideTempErr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;frameType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;TextMessage&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;frameType&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;BinaryMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messageReader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;messageReader&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messageReader&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readDecompress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newDecompressionReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;frameType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;See the following link more detail.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/how-websocket-protocol-designs-bidirectional-messaging-and-implements-in-go-260f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How WebSocket protocol designs bidirectional messaging and implements in Go&lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi ・ Dec 13 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#websocket&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;After a message is received from the peer, it waits to receive the value from the Connection.proxyRequest function that is invoked in the "server" thread.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5nhCkw7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj0tc7f5ljm9pf5xgkig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5nhCkw7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj0tc7f5ljm9pf5xgkig.png" alt='"reader" waits to receive a value from the nextResponse channel' width="880" height="384"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// (omit)&lt;/span&gt;

        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextResponse&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// We have been unlocked by Close()&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Send the reader back to Connection.proxyRequest&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;

        &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a "server" thread proxies, it sends the HTTP request over the WebSocket, and sends the channel of the io.Reader interface (chan io.Reader) that can read the HTTP response to the field &lt;code&gt;nextResponse&lt;/code&gt;, then waits until the value is written in the channel (chan io.Reader) by another thread "reader” (&lt;a href="https://github.com/hgsgtk/wsp/blob/29cc73bbd67de18f1df295809166a7a5ef52e9fa/server/connection.go#L143"&gt;code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIwnlWo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxehstr9thsk65y3usy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIwnlWo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxehstr9thsk65y3usy.png" alt='"server" waits to receive a value from the responseChannel' width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the thread "reader" detects that the HTTP response from the peer of the WebSocket connection has been written, it sends the value to the channel (chan io.Reader), and the "server" thread can proceed to process the rest procedures.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="n"&gt;nextResponse&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit) [1]: Serialize HTTP request&lt;/span&gt;
    &lt;span class="c"&gt;// (omit) [2]: Send the HTTP request to the peer&lt;/span&gt;

    &lt;span class="c"&gt;// [3]: Wait the HTTP response is ready to read&lt;/span&gt;
    &lt;span class="n"&gt;responseChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextResponse&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;responseChannel&lt;/span&gt;
    &lt;span class="n"&gt;responseReader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;responseReader&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// The value of ok is false, the channel is closed and empty.&lt;/span&gt;
            &lt;span class="c"&gt;// See the Receiver operator in https://go.dev/ref/spec for more information.&lt;/span&gt;
            &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to get http response reader : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we get to this point, we are ready to read the response written over the WebSocket connection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-read-the-http-response-from-the-peer"&gt;
  &lt;/a&gt;
  4. Read the HTTP response from the peer
&lt;/h2&gt;

&lt;p&gt;Let's move on the next step: read the HTTP response from the peer, where gets the serialized HTTP response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;HTTPResponse&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;StatusCode&lt;/span&gt;    &lt;span class="kt"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;Header&lt;/span&gt;        &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;
    &lt;span class="n"&gt;ContentLength&lt;/span&gt; &lt;span class="kt"&gt;int64&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// [4]: Read the HTTP response from the peer&lt;/span&gt;
    &lt;span class="c"&gt;// Get the serialized HTTP Response from the peer&lt;/span&gt;
    &lt;span class="n"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to read http response : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Notify the read() goroutine that we are done reading the response&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Deserialize the HTTP Response&lt;/span&gt;
    &lt;span class="n"&gt;httpResponse&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;httpResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to unserialize http response : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Write response headers back to the client&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;httpResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;httpResponse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value &lt;code&gt;responseReader&lt;/code&gt; implements &lt;a href="https://pkg.go.dev/io#Reader"&gt;io.Reader&lt;/a&gt; interface, that's why we can read the data in &lt;code&gt;responseReader&lt;/code&gt; by &lt;a href="https://pkg.go.dev/io#ReadAll"&gt;io.ReadAll&lt;/a&gt;, which is added in Go 1.16. &lt;/p&gt;

&lt;p&gt;After that, it closes the channel &lt;code&gt;responseChannel&lt;/code&gt; so that the "reader" thread will be notified that the response is finished to read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// (omit)&lt;/span&gt;

        &lt;span class="c"&gt;// Send the reader back to Connection.proxyRequest&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;

        &lt;span class="c"&gt;// Wait for proxyRequest to close the channel&lt;/span&gt;
        &lt;span class="c"&gt;// this notify that it is done with the reader&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "reader" thread waits until the "server" thread closes the &lt;code&gt;responseChannel&lt;/code&gt; channel because of the requirements of &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket@v1.4.2#Conn.NextReader"&gt;websocket.NextReader&lt;/a&gt;. As explained in &lt;a href="https://pkg.go.dev/github.com/gorilla/websocket#hdr-Control_Messages"&gt;godoc&lt;/a&gt;, we need to consider several specifications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No more than one goroutine calls the read methods (NextReader, SetReadDeadline, ReadMessage, ReadJSON, SetPongHandler, SetPingHandler) concurrently&lt;/li&gt;
&lt;li&gt;Connections support one concurrent reader and one concurrent writer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's why we need to wait for websocket.NextReader to be consumed before requesting the next one.&lt;/p&gt;

&lt;p&gt;Then next, unmarshal JSON into the struct &lt;code&gt;HTTPResponse&lt;/code&gt; by &lt;a href="https://pkg.go.dev/encoding/json#Unmarshal"&gt;json.Unmarshal&lt;/a&gt;. json.Unmarshal matches incoming JSON object keys to the keys used by Marshal, either the struct field name or its tag (&lt;code&gt;json:"xxx"&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Now we can get the HTTP response headers and status code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-wait-the-http-response-body-is-ready-6-read-the-http-response-body-from-the-peer"&gt;
  &lt;/a&gt;
  5. Wait the HTTP response body is ready / 6. Read the HTTP response body from the peer
&lt;/h2&gt;

&lt;p&gt;Finally, follow the same steps again to read the HTTP response body again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// [5]: Wait the HTTP response body is ready&lt;/span&gt;
    &lt;span class="c"&gt;// Get the HTTP Response body from the the peer&lt;/span&gt;
    &lt;span class="c"&gt;// To do so send a new channel to the read() goroutine&lt;/span&gt;
    &lt;span class="c"&gt;// to get the next message reader&lt;/span&gt;
    &lt;span class="n"&gt;responseBodyChannel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reader&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextResponse&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;responseBodyChannel&lt;/span&gt;
    &lt;span class="n"&gt;responseBodyReader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;responseBodyChannel&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;responseBodyReader&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// If more is false the channel is already closed&lt;/span&gt;
            &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to get http response body reader : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// [6]: Read the HTTP response body from the peer&lt;/span&gt;
    &lt;span class="c"&gt;// Pipe the HTTP response body right from the remote Proxy to the client&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;responseBodyReader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseBodyChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"unable to pipe response body : %w"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Notify read() that we are done reading the response body&lt;/span&gt;
    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responseBodyChannel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Following &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;part 3&lt;/a&gt; and &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c"&gt;part 4&lt;/a&gt;, I explained how to relay TCP connection from "App" to the peer of WebSocket. &lt;/p&gt;

&lt;p&gt;In part 6, I'll explain how to relay TCP connection in WebSocket data to "internal API".&lt;/p&gt;

</description>
      <category>go</category>
      <category>webdev</category>
      <category>websocket</category>
    </item>
  </channel>
</rss>
