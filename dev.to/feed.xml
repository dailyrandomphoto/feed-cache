<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Will No-Code Replace developers?</title>
      <author>Vik üìà</author>
      <pubDate>Fri, 14 Jan 2022 14:08:17 +0000</pubDate>
      <link>https://dev.to/heyvik/will-no-code-replace-developers-8ao</link>
      <guid>https://dev.to/heyvik/will-no-code-replace-developers-8ao</guid>
      <description>&lt;h3&gt;
  &lt;a href="#lets-first-understand-what-even-is-nocode-or-lowcode"&gt;
  &lt;/a&gt;
  Lets first understand, what even is No-Code or Low-Code?
&lt;/h3&gt;

&lt;p&gt;No-Code is made for people in every background to create stuff/software. No code platforms have pre-built drag-and-drop elements that have been coded for reuse and scale, so that anyone, even beginners can make anything they want easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#will-nolow-code-replace-programmers"&gt;
  &lt;/a&gt;
  Will No/Low Code replace programmers?
&lt;/h3&gt;

&lt;p&gt;No Not at all, we will surely need programmers... There will always be a need for coding. They benefited in there both alternatives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subscribe-to-my-newsletter"&gt;
  &lt;/a&gt;
  &lt;a href="https://devdairy.substack.com/p/coming-soon?showWelcome=true"&gt;Subscribe to my newsletter&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#so-does-nolow-code-does-have-any-future"&gt;
  &lt;/a&gt;
  So does No/Low Code does have any future?
&lt;/h3&gt;

&lt;p&gt;Yes No/Low Code do have a future but they are not the future of code. It is certainly having a place in the future and will be leveraged to make many applications For ANYONE. The future is low-code or no-code with an expected growth rate of 44.4% by 2022 to $27.23 billion (up from $4.32 billion in 2017).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-nolow-code-so-famous"&gt;
  &lt;/a&gt;
  Why No/Low Code so famous?
&lt;/h3&gt;

&lt;p&gt;No/Low Code is popular because it doesnt matter on what background you come from, you can make softwares. Making software in nocode platforms can be fast and done pretty regularly to build prototypes and MVP in a record time.&lt;/p&gt;

&lt;p&gt;Thats all for this blog, its a pretty small blog, but its just a start for me :) &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How To Convert a Lambda to a Step Function</title>
      <author>Matt Martz</author>
      <pubDate>Fri, 14 Jan 2022 13:39:56 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-convert-a-lambda-to-a-step-function-nfa</link>
      <guid>https://dev.to/aws-builders/how-to-convert-a-lambda-to-a-step-function-nfa</guid>
      <description>&lt;p&gt;I attended AWS re:Invent 2021 in-person and one of my big takeaways was the focus on AWS Step Functions.  With the &lt;a href="https://aws.amazon.com/blogs/aws/now-aws-step-functions-supports-200-aws-services-to-enable-easier-workflow-automation/"&gt;late September announcement that Step Functions now support 200+ AWS Services&lt;/a&gt; I could see why.&lt;/p&gt;

&lt;p&gt;So, what does that look like?  &lt;a href="https://github.com/martzcodes/blog-lambda-to-stepfunctions"&gt;Check Out the Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post I'll convert a Lambda to a Step Function without Lambdas (sometimes called lambda-less or function-less üòà).  The original lambda will call an "External" API Gateway, do a GET from DynamoDB, make a decision and potentially WRITE to DynamoDB.  The resulting step function will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--upEfVDK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/martzcodes/blog-lambda-to-stepfunctions/raw/main/stepfunctions_graph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--upEfVDK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/martzcodes/blog-lambda-to-stepfunctions/raw/main/stepfunctions_graph.png" alt="#Step Function Workflow" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again... NO lambdas ü§Ø&lt;/p&gt;

&lt;p&gt;This project uses CDK v2.3 and was initialized using &lt;code&gt;cdk init --language typescript&lt;/code&gt;.  It's not intended to be a step-by-step tutorial.  If you need one of those, &lt;a href="https://twitter.com/martzcodes"&gt;follow me on Twitter&lt;/a&gt; and keep an eye out for my upcoming CDK Crash Course video.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-the-mock-external-service"&gt;
  &lt;/a&gt;
  Creating the Mock External Service
&lt;/h1&gt;

&lt;p&gt;To get started we're going to create two API Gateways: Our "actual" one and one to mock an External API Gateway, and avoid circular dependencies.  If your external service wasn't hosted by AWS / API Gateway you'd probably need to use a small lambda to do the external API call.&lt;/p&gt;

&lt;p&gt;The mock external service lives in &lt;code&gt;lib/mock-external.ts&lt;/code&gt;.  It's fairly unremarkable in that it's a Lambda with an API Gateway ü§∑‚Äç‚ôÇÔ∏è.  The Lambda expects an APIGateway input with a &lt;code&gt;userId&lt;/code&gt; pathParameter... so &lt;code&gt;&amp;lt;mockApi&amp;gt;/asdf&lt;/code&gt; where &lt;code&gt;asdf&lt;/code&gt; would be the "userId".  From there it responds with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`EXTERNAL#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}).&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This simulates a "lookup" in an external service... here we just consistently change the userId and we generate a random name for the user.  Every time the endpoint is called the same user will get a new name (this isn't intended to be a real service, just representative of something that could have changing data).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-the-lambdalith"&gt;
  &lt;/a&gt;
  Building the Lambda-lith
&lt;/h1&gt;

&lt;p&gt;The lambdalith lives in &lt;code&gt;lambda/bigLambda.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It calls the external URL...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// make axios call to "external" api to get user name&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;externalUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Gets the "internal" user matching the external userId:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userGetItemInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DocumentClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetItemInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;PK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;externalUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;internalUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userGetItemInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It returns early if the internal user has a "LOCKED" status (set directly via DynamoDB)... otherwise it updates the DynamoDB entry (which would insert if needed).&lt;/p&gt;

&lt;p&gt;All "names" that the user has had will also get stored in DynamoDB with the time they were inserted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// store user in dynamodb&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateItemInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DocumentClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UpdateItemInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;TableName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;PK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;externalUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;UpdateExpression&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`SET #name = :name, #status = :status, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
      &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;internalUser&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#history = :history&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#history.#historical = if_not_exists(#history.#historical, :historical)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ExpressionAttributeNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#history&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;history&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;ExpressionAttributeValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;externalUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ACTIVE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;ReturnValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UPDATED_NEW&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;internalUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;updateItemInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExpressionAttributeValues&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:history&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;externalUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;updateItemInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExpressionAttributeNames&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#historical&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nx"&gt;externalUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;updateItemInput&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExpressionAttributeValues&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;:historical&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateItemInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All in all this is a fairly simple example that represents a few different challenges.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#converting-the-lambdalith-to-a-step-function"&gt;
  &lt;/a&gt;
  Converting the Lambda-lith to a Step Function
&lt;/h1&gt;

&lt;p&gt;I began the conversion by opening the AWS Step Function console and playing with the shiny "new" &lt;a href="https://docs.aws.amazon.com/step-functions/latest/dg/workflow-studio.html"&gt;Workflow Studio&lt;/a&gt;.  I used this to get a sense of the different kinds of steps I'd need.&lt;/p&gt;

&lt;p&gt;In this case, since we want an immediate (synchronous) response from the Step Function we use an Express Step Function&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1PYQjEwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641419107708/4NqhOsdPE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1PYQjEwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641419107708/4NqhOsdPE.png" alt="Screen Shot 2022-01-04 at 11.22.08 AM.png" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My first pass (pun intended) was simply this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SvikHnHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641419174828/B94pf1SVW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SvikHnHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641419174828/B94pf1SVW.png" alt="stepfunctions_graph.png" width="544" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But ultimately I found out that there weren't enough Pass steps in there.&lt;/p&gt;

&lt;p&gt;Pass Steps are handy... they act as easy placeholders while designing the step function and also do data transformations.&lt;/p&gt;

&lt;p&gt;To get started with the implementation I began with the Step Function itself and tied in the API Integration later.  &lt;/p&gt;

&lt;p&gt;üôåThe &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/04/aws-step-functions-adds-new-data-flow-simulator-for-modelling-input-and-output-processing/"&gt;Data Flow Simulator&lt;/a&gt; was incredibly useful in piecing together the &lt;a href="https://docs.aws.amazon.com/step-functions/latest/dg/amazon-states-language-paths.html"&gt;JSONPath Expressions&lt;/a&gt; and how they interact with the State Machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-step-and-issue"&gt;
  &lt;/a&gt;
  First Step (and Issue)
&lt;/h2&gt;

&lt;p&gt;The first &lt;em&gt;step&lt;/em&gt; (üòâ) of the State Machine is to make that external API Gateway call.  I wasted a lot of time on this because it's not super well documented in the case of dynamic / proxied URLs.  It seems like in most cases you'd use a POST with a body to hit an API Gateway to a pre-defined / static URL that points to a Step Function... and if you do that you can skip this first PASS step.  There's also an &lt;a href="https://github.com/aws/aws-cdk/issues/14243"&gt;open GitHub Issue&lt;/a&gt; related to this which is why I ultimately created the &lt;code&gt;lib/ModifiedCallApiGatewayRestApiEndpoint.ts&lt;/code&gt;.  The regular &lt;code&gt;CallApiGatewayRestApiEndpoint&lt;/code&gt; method can't make use of JsonPath expressions to extend endpoints.  What that means is in order to make use of my &lt;code&gt;userId&lt;/code&gt; path parameter I need to first do a data transformation and then hack it in via the modified class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RoutePass&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apiPath.$&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;States.Format('/{}', $.userId)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userId.$&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name.$&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first &lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_stepfunctions.Pass.html"&gt;Pass&lt;/a&gt; takes the userId via the input parameters from the API Gateway Integration, builds the API path that will be called (including the rendered path parameter) and then the &lt;code&gt;ModifiedCallApiGatewayRestApiEndpoint&lt;/code&gt; puts it in the step's parameters via &lt;code&gt;Parameters: { "Path.$": "$.apiPath", ...orig.Parameters },&lt;/code&gt;.  Normally you'd be able to directly assign that, but it's not exposed as part of the L2 Construct for the CallApiGatewayRestApiEndpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callExternal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModifiedCallApiGatewayRestApiEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Call External APIGW&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;api&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockExternalApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;stageName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prod&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resultPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.external&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resultSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JsonPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.ResponseBody&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I could not get &lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_stepfunctions_tasks.CallApiGatewayRestApiEndpoint.html#queryparameters"&gt;queryParameters&lt;/a&gt; to work correctly... it didn't like the resulting object... wasn't worth the trouble for this demo but if you have any tips let me know.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From there the API step takes the passed in RestAPI and that's it.  &lt;code&gt;resultPath&lt;/code&gt; extends the previous input and places the external API's &lt;code&gt;ResponseBody&lt;/code&gt; in the &lt;a href="https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html"&gt;StateMachine's context (&lt;code&gt;$&lt;/code&gt;)&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interacting-with-dynamodb"&gt;
  &lt;/a&gt;
  Interacting with DynamoDB
&lt;/h2&gt;

&lt;p&gt;Next we make the DynamoDB Get call that the lambdalith does.  We can directly interact with DynamoDB without a lambda by using the &lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_stepfunctions_tasks-readme.html#getitem"&gt;&lt;code&gt;DynamoGetItem&lt;/code&gt;&lt;/a&gt; construct.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dynamoGet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DynamoGetItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Get Internal User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;PK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DynamoAttributeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;JsonPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.external.user.userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resultPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.internal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It uses the context provided by the external call &lt;code&gt;$.external.user.userId&lt;/code&gt; to do the lookup and puts the result in the context's &lt;code&gt;internal&lt;/code&gt; key.&lt;/p&gt;

&lt;p&gt;If you were to sniff out the context at this point it'd look something like this (if DynamoDB already had the item*):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"external"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"userId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"EXTERNAL#asdf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Matt Martz"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"internal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Item"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"PK"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"EXTERNAL#asdf"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Matt Martz"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#choices"&gt;
  &lt;/a&gt;
  Choices
&lt;/h2&gt;

&lt;p&gt;Before we can implement the Choice (if/switch statement) we need to define the destinations for those situations.  We're going to use 3 types of results... Pass, DynamoDB PutItem and DynamoDB UpdateItem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pass"&gt;
  &lt;/a&gt;
  Pass
&lt;/h3&gt;

&lt;p&gt;There are 4 end cases for the API... No Changes, Locked, Inserted, and Updated.  All of the Pass steps look very similar and they all respond in the same general format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userWasLocked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User Was Locked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JsonPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.external.user.userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JsonPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.internal.Item.name.S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JsonPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.internal.Item.status.S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;userLocked&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;nameChanged&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inserted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dynamodb-writes"&gt;
  &lt;/a&gt;
  DynamoDB Writes
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_stepfunctions_tasks-readme.html#putitem"&gt;&lt;code&gt;DynamoPutItem&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_stepfunctions_tasks-readme.html#updateitem"&gt;DynamoUpdateItem&lt;/a&gt; Constructs follow very closely to what you'd do in the lambda code using the DocumentClient.  The &lt;code&gt;aws-stepfunctions-tasks&lt;/code&gt; module also exposes a nice helper function to convert into the DynamoDB JSON format.  Below is the PutItem while the UpdateItem follows a similar pattern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dynamoInsert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DynamoPutItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add Internal User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;PK&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DynamoAttributeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;JsonPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.external.user.userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DynamoAttributeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;JsonPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.external.user.name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DynamoAttributeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ACTIVE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;history&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DynamoAttributeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;JsonPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.external.user.name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="nx"&gt;DynamoAttributeValue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;JsonPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$.State.EnteredTime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resultPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.inserted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-choice"&gt;
  &lt;/a&gt;
  The Choice
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_stepfunctions.Choice.html"&gt;Choice&lt;/a&gt; Construct decides which steps are executed based on &lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_stepfunctions.Condition.html"&gt;Conditions&lt;/a&gt;.  There are a lot of helper methods in the Condition class.  In this case we use &lt;code&gt;isNotPresent&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, and &lt;code&gt;stringEquals&lt;/code&gt;.  This routes the State Machine to the right step based on the condition logic provided.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUserLocked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User Locked?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNotPresent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.internal.Item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;dynamoInsert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.internal.Item.name.S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.external.user.name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;userExists&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.internal.Item.name.S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.external.user.name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;dynamoUpdate&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$.internal.Item.status.S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LOCKED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;userWasLocked&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userExists&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-statemachine"&gt;
  &lt;/a&gt;
  The StateMachine
&lt;/h2&gt;

&lt;p&gt;To define the state machine itself, you first connect the steps together by chaining them with their &lt;code&gt;.next&lt;/code&gt; methods and then passing them into the StateMachine construct.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;definition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callExternal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dynamoGet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUserLocked&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dynamoInsert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInserted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dynamoUpdate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userWasUpdated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logGroup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LogGroup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BlogLambdaStepLogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;removalPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RemovalPolicy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DESTROY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;retention&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RetentionDays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ONE_DAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stateMachine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;StateMachine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`BlogLambdaStep`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;stateMachineType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;StateMachineType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EXPRESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;logGroup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grantReadWriteData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stateMachine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here it's important to also make sure the state machine has Read/Write access to DynamoDB using the table's &lt;code&gt;grantReadWriteData&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;üö®For Debugging it's useful to explicitly set the LogGroup for the StateMachine and set the LogLevel to ALL. üö®&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-api-gateway-to-invoke-the-statemachine"&gt;
  &lt;/a&gt;
  Getting API Gateway to Invoke the StateMachine
&lt;/h2&gt;

&lt;p&gt;Finally the last step is to actually invoke the StateMachine using an API Gateway Integration.  To do this we first need to provide a role for the API to be able to &lt;code&gt;StartSyncExecution&lt;/code&gt; for the stateMachine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;credentialsRole&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;getRole&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;assumedBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ServicePrincipal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apigateway.amazonaws.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;credentialsRole&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachInlinePolicy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;getPolicy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PolicyStatement&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;states:StartSyncExecution&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Effect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALLOW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;stateMachine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stateMachineArn&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we use that credentialsRole in the AwsIntegration.  We also have to do some &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html"&gt;Request and Response Mapping&lt;/a&gt; to make sure the API path and query parameters make it into the input, and the response only includes the payload we want to get to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stepApiResource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;step&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;stepApiResource&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;basic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{userId}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AwsIntegration&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;states&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;StartSyncExecution&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;integrationHttpMethod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;credentialsRole&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;integrationResponses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;responseTemplates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`#set ($parsedPayload = $util.parseJson($input.json('$.output')))
$parsedPayload`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;requestTemplates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`{
            "input": "{\\"userId\\": \\"$util.escapeJavaScript($input.params('userId'))\\", \\"name\\": \\"$util.escapeJavaScript($input.params('querystring').params('name'))\\"}",
            "stateMachineArn": "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;stateMachine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stateMachineArn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"
            }`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;methodResponses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-functionbacked-apis"&gt;
  &lt;/a&gt;
  Step Function-backed APIs?
&lt;/h3&gt;

&lt;p&gt;But what about &lt;a href="https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_apigateway-readme.html#aws-stepfunctions-backed-apis"&gt;API Gateway's AWS Step Functions-backed APIs?&lt;/a&gt;.  That's definitely useful but is similar to the &lt;code&gt;LambdaRestApi&lt;/code&gt; construct in that it proxies ALL requests to the StepFunction.  You can (theoretically) still add endpoints to it but if you want to add a different Step Function then you still have to go through an AwsIntegration anyways OR integrate the two StepFunctions together, but then you're tightly coupled üò¢.  In this case we were adding a Step Function to an existing API so that wasn't an option.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comparing-the-api-calls"&gt;
  &lt;/a&gt;
  Comparing the API calls
&lt;/h1&gt;

&lt;p&gt;When the Stack is deployed we get back the two RestAPIs back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Outputs:
BlogLambdaToStepfunctionsStack.BlogLambdaSFAPIEndpointC31D91D6 &lt;span class="o"&gt;=&lt;/span&gt; https://axg9uz4vxb.execute-api.us-east-1.amazonaws.com/prod/
BlogLambdaToStepfunctionsStack.MockExternalAPIEndpointCFF6F3A1 &lt;span class="o"&gt;=&lt;/span&gt; https://ab1bk91hb3.execute-api.us-east-1.amazonaws.com/prod/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, I can call the external API that both the Lambda-lith and Step Functions use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl https://ab1bk91hb3.execute-api.us-east-1.amazonaws.com/prod/asdf &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="s1"&gt;'\nTotal: %{time_total}s\n'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"userId"&lt;/span&gt;:&lt;span class="s2"&gt;"EXTERNAL#asdf"&lt;/span&gt;,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"Victor Roob"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
Total: 0.081028s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I call the Lambda-lith with &lt;code&gt;/asdf&lt;/code&gt; you get&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl https://axg9uz4vxb.execute-api.us-east-1.amazonaws.com/prod/big/asdf &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="s1"&gt;'\nTotal: %{time_total}s\n'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;:&lt;span class="s2"&gt;"EXTERNAL#asdf"&lt;/span&gt;,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"Troy Hammes"&lt;/span&gt;,&lt;span class="s2"&gt;"status"&lt;/span&gt;:&lt;span class="s2"&gt;"ACTIVE"&lt;/span&gt;,&lt;span class="s2"&gt;"userLocked"&lt;/span&gt;:false,&lt;span class="s2"&gt;"nameChanged"&lt;/span&gt;:true,&lt;span class="s2"&gt;"inserted"&lt;/span&gt;:false&lt;span class="o"&gt;}&lt;/span&gt;
Total: 1.473287s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which takes 1.5s because of the cold start time of the lambda!  Running it again you get:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl https://axg9uz4vxb.execute-api.us-east-1.amazonaws.com/prod/big/asdf &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="s1"&gt;'\nTotal: %{time_total}s\n'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;:&lt;span class="s2"&gt;"EXTERNAL#asdf"&lt;/span&gt;,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"Grady McGlynn"&lt;/span&gt;,&lt;span class="s2"&gt;"status"&lt;/span&gt;:&lt;span class="s2"&gt;"ACTIVE"&lt;/span&gt;,&lt;span class="s2"&gt;"userLocked"&lt;/span&gt;:false,&lt;span class="s2"&gt;"nameChanged"&lt;/span&gt;:true,&lt;span class="s2"&gt;"inserted"&lt;/span&gt;:false&lt;span class="o"&gt;}&lt;/span&gt;
Total: 0.223742s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which very quickly drops down to 0.2 seconds!&lt;/p&gt;

&lt;p&gt;The step-function, on the other hand, &lt;strong&gt;doesn't have cold start times!&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl https://axg9uz4vxb.execute-api.us-east-1.amazonaws.com/prod/step/basic/qwerty &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="s1"&gt;'\nTotal: %{time_total}s\n'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"status"&lt;/span&gt;:&lt;span class="s2"&gt;"ACTIVE"&lt;/span&gt;,&lt;span class="s2"&gt;"userLocked"&lt;/span&gt;:false,&lt;span class="s2"&gt;"nameChanged"&lt;/span&gt;:false,&lt;span class="s2"&gt;"inserted"&lt;/span&gt;:true,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"Sheldon Pouros DDS"&lt;/span&gt;,&lt;span class="s2"&gt;"id"&lt;/span&gt;:&lt;span class="s2"&gt;"EXTERNAL#qwerty"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
Total: 0.254265s
&lt;span class="nv"&gt;$ &lt;/span&gt;curl https://axg9uz4vxb.execute-api.us-east-1.amazonaws.com/prod/step/basic/qwerty &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="s1"&gt;'\nTotal: %{time_total}s\n'&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"userLocked"&lt;/span&gt;:false,&lt;span class="s2"&gt;"nameChanged"&lt;/span&gt;:true,&lt;span class="s2"&gt;"inserted"&lt;/span&gt;:false,&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"Randolph Padberg"&lt;/span&gt;,&lt;span class="s2"&gt;"id"&lt;/span&gt;:&lt;span class="s2"&gt;"EXTERNAL#qwerty"&lt;/span&gt;,&lt;span class="s2"&gt;"status"&lt;/span&gt;:&lt;span class="s2"&gt;"ACTIVE"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
Total: 0.256351s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's FAST!  The API Responses are also equivalent and if we check DynamoDB we get the same behavior.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;There's definitely a learning curve associated with configuring step functions because of the JSONPath Expressions / VTL required to get the steps working together correctly.  Steps themselves aren't reusable but if you pair those with smart use of existing functionality (existing or smaller/reusable Lambdas) you can get a lot of benefit.&lt;/p&gt;

&lt;p&gt;The tooling has gotten a lot better, and the &lt;a href="https://docs.aws.amazon.com/step-functions/latest/dg/workflow-studio.html"&gt;Workflow Studio&lt;/a&gt; and &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/04/aws-step-functions-adds-new-data-flow-simulator-for-modelling-input-and-output-processing/"&gt;Data Flow Simulator&lt;/a&gt; both made it much easier to troubleshoot.&lt;/p&gt;

&lt;p&gt;It took slightly more configuration (largely Infrastructure as Code) to setup the Step Function vs just having a large lambda, but by shifting the logic to the State Machine (and therefore managed AWS Services) you're reducing your code ownership.&lt;/p&gt;

&lt;p&gt;Steps can't be shared, but you can easily create your own constructs for frequently used AWS Service interactions that include customized JSONPath expressions for your/your organizations needs.&lt;/p&gt;

&lt;p&gt;I definitely see a lot of promise here.  What observations have you had related to step functions?  Comment below or hit me up on &lt;a href="https://twitter.com/martzcodes"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Create an AWS IAM account to deploy our applications with ASP.NET</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Fri, 14 Jan 2022 13:26:39 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/create-an-aws-iam-account-to-deploy-our-applications-with-aspnet-3bbd</link>
      <guid>https://dev.to/esdanielgomez/create-an-aws-iam-account-to-deploy-our-applications-with-aspnet-3bbd</guid>
      <description>&lt;p&gt;Amazon Web Services, also known as AWS, is a suite of cloud computing tools and services from Amazon. In this first article, our goal will be to create an IAM (AWS Identity and Access Management) account, focused on deploying web applications ASP.NET. In this sense, this will be the process: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get an AWS Free Tier account.&lt;/li&gt;
&lt;li&gt;Set up an IAM account.&lt;/li&gt;
&lt;li&gt;Set policies for a given user in IAM.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-sign-up-for-an-aws-free-tier-account"&gt;
  &lt;/a&gt;
  1. Sign up for an AWS Free Tier account
&lt;/h2&gt;

&lt;p&gt;AWS has a free tier to test and consume services for 12 months. At the following address we can make the corresponding registration: &lt;a href="https://aws.amazon.com/free"&gt;aws.amazon.com/free&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a fairly simple process, however, we must bear in mind that we must provide the data of our credit / debit card to activate it.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-set-up-an-iam-account"&gt;
  &lt;/a&gt;
  2. Set up an IAM account
&lt;/h2&gt;

&lt;p&gt;AWS &lt;em&gt;Identity and Access Management&lt;/em&gt; (IAM) provides fine-grained access control across AWS. With IAM, we can specify who can access which services and resources, and under what conditions. With IAM policies, we can also manage permissions for other users and systems we have in place to ensure least-privilege permissions.&lt;/p&gt;

&lt;p&gt;All right, assuming we've already created a root account, or if we already have one, when you sign in, you'll see the AWS console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3aB7M5ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qwxj3f845iqg6z684e3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3aB7M5ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5qwxj3f845iqg6z684e3.png" alt="" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When entering this IAM service, we will go to the Users section within the options menu and select Add User. The goal is to create a user, which will be used to associate the AWS services to be used, as it is not recommended to provide our root user access privileges. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X2Yf2W6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3vk2g1orymii71s3t87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X2Yf2W6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3vk2g1orymii71s3t87.png" alt="" width="880" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The form to add a new user will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vIqtBxqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o66e32s3wgwf3lsiapgq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIqtBxqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o66e32s3wgwf3lsiapgq.png" alt="" width="874" height="518"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once you are done creating the new IAM user, you need to download the credentials. These can be used later to perform an AWS configuration from Visual Studio for example. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odDf_3s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/put010of4ls7pwvqdp26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odDf_3s5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/put010of4ls7pwvqdp26.png" alt="" width="481" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: It is very important to keep this CSV file in a safe place, as the access credentials are located there. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-set-user-policies"&gt;
  &lt;/a&gt;
  3. Set user policies
&lt;/h2&gt;

&lt;p&gt;Depending on our purpose, we may provide permissions to access and use AWS services for our users. Suppose that in this case we want to deploy our applications with ASP.NET Core from Visual Studio to AWS, for this our new IAM user needs to be able to access certain AWS services. In this case, we will address the user in question within IAM on AWS and select the option |Add inline policy|. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ra1MLeha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w6w00f7ch8nrhpjpf5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ra1MLeha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5w6w00f7ch8nrhpjpf5g.png" alt="" width="757" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we will perform this process for each of the following services, which will be useful to be able to deploy our web applications ASP.NET:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elastic Beanstalk&lt;/li&gt;
&lt;li&gt;EC2&lt;/li&gt;
&lt;li&gt;S3&lt;/li&gt;
&lt;li&gt;CloudFormation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qlf4k90p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl1h4b5ck84jfy9kfxyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qlf4k90p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl1h4b5ck84jfy9kfxyo.png" alt="" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding each of the services, we will assign a name for this policy and save it. In the end we will have something like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKs9x8JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28njfw2xm8ga3hw3ywyi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKs9x8JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28njfw2xm8ga3hw3ywyi.png" alt="" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thanks for reading!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;With this process, our IAM will be created, and policies will be in place. In future articles we will review how to access AWS from Visual Studio 2019 thanks to this configuration. &lt;/p&gt;

&lt;p&gt;If you have any questions or ideas in mind, it will be a pleasure to be able to be in communication and together exchange knowledge with each other.&lt;/p&gt;

&lt;p&gt;See you at &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! Or if you like you can also write to me by other means: &lt;a href="https://esdanielgomez.com"&gt;esDanielGomez.com&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
      <category>dotnet</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Moving to Germany</title>
      <author>Santosh Yadav</author>
      <pubDate>Fri, 14 Jan 2022 13:00:26 +0000</pubDate>
      <link>https://dev.to/santoshyadav198613/moving-to-germany-4no9</link>
      <guid>https://dev.to/santoshyadav198613/moving-to-germany-4no9</guid>
      <description>&lt;p&gt;If you follow me, you know I have worked as a consultant for the last year. I have decided to take the next step in my career and move to Hamburg this week.&lt;/p&gt;

&lt;p&gt;It was a difficult choice, and I wanted to stay in india and grow with the community; the Indian tech community will always have a special place in my heart. I became GDE; you all voted me to be the First GitHub star from India and gave me lots of love.&lt;/p&gt;

&lt;p&gt;Some personal and professional decisions led to this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Better community outreach: Being in Europe will give me access to a broad community, as the timezone in india sometimes affects the participation in many conferences and meetups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My future ambitions: It is not a secret that I want to work as a Developer Advocate one day. Last year, I got a few calls, but many discussions due to salary and location expectations didn't go ahead.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will not miss the Indian community at all, I will keep rooting for you all, and if you need any help from me, I am just a DM away. I was lucky to meet a few of you before moving. &lt;/p&gt;

&lt;p&gt;Six years ago, I came to Pune and got everything I came looking for in this City: a better life for my family, money, and peaceful life. Wish us that we get the same thing in a new country as we start a new chapter of our life.&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>How to Create a Parking Space Finder App?</title>
      <author>Christine</author>
      <pubDate>Fri, 14 Jan 2022 12:57:21 +0000</pubDate>
      <link>https://dev.to/christinek989/how-to-create-a-parking-space-finder-app-4bf7</link>
      <guid>https://dev.to/christinek989/how-to-create-a-parking-space-finder-app-4bf7</guid>
      <description>&lt;p&gt;Around 95% of American households own a car, the &lt;a href="https://static.america.gov/uploads/sites/8/2016/04/You-Asked-Series_Does-Everyone-in-America-Own-a-Car_English_Lo-Res_508.pdf"&gt;Embassy of the United States of America&lt;/a&gt; says. In San Marino, the number of &lt;a href="https://www.titlemax.com/discovery-center/planes-trains-and-automobiles/u-s-cities-with-the-highest-and-lowest-vehicle-ownership/"&gt;cars per 1000 people is 1263&lt;/a&gt;. Estimates say the number of passenger cars worldwide is over 1 billion. No wonder traffic congestion has become a top problem both for the drivers and city administrations. In Moscow only, the average driver spends 210 hours a year waiting in traffic. &lt;br&gt;
Solution? Solutions are many like improving cycling infrastructure or building &lt;a href="https://cloudblogs.microsoft.com/industry-blog/automotive/2020/02/04/6-smart-mobility-solutions-that-are-helping-to-reduce-traffic-congestion/"&gt;connected infrastructure&lt;/a&gt;. While these are yet to proliferate in the future, parking space finder apps are an easier and more accessible way to solve the problem.&lt;br&gt;
If you are an entrepreneur and think of making money out of apps, parking space finder apps can be a great way of stepping into the market. How to create a parking space finder app? Before you get an answer to this question, you need to study the issue in depth. Sit comfortably and give yourself time to read this article. We will take you through a step by step process and help you build an app that is so much needed today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-parking-owners-need-a-parking-finder-app"&gt;
  &lt;/a&gt;
  Why Parking Owners Need a Parking Finder App?
&lt;/h2&gt;

&lt;p&gt;Efficiency is on top of the list when it comes to parking space finder apps. If you manage to find a parking space today, your first reaction is ‚ÄúI did it!‚Äù You feel like a hero. &lt;br&gt;
But the fact is that not all parking lots are full. In fact, many drivers use only on-street parking lots. But there are also off-street and indoor parking lots that drivers are not even aware of or don't take the trouble to travel believing they won't find a space anyway. Having an app solves this problem as drivers can book a spot and make sure that they will have a space.&lt;br&gt;
Mobile apps also reduce the amount of work for the parking staff. E.g., inspectors can check license plates by using a smartphone camera if the mobile app has a feature for parking inspectors. They can then issue an electronic ticket in case of a violation. Parking staff can handle more work in a day with mobile apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-a-parking-finder-mobile-app-work"&gt;
  &lt;/a&gt;
  How Does a Parking Finder Mobile App Work?
&lt;/h2&gt;

&lt;p&gt;Now let's get to the nuts and bolts of how things are done.&lt;br&gt;
The app locates the users and suggests spaces available in nearby parking lots. As simple as that. But how does that work in practice? There are some steps to follow. These are the six steps:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--akLTbYck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a06nkmgg0tivfbrdd02y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--akLTbYck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a06nkmgg0tivfbrdd02y.png" alt="Image description" width="880" height="220"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Searching:&lt;/strong&gt; first, the driver needs to enter the vehicle plate number and search for a parking space in the nearby area.&lt;br&gt;
&lt;strong&gt;Comparing:&lt;/strong&gt; they can compare the availability and charges and decide which one is the best fit according to price and distance or both of them.&lt;br&gt;
&lt;strong&gt;Booking:&lt;/strong&gt; Once they decide where to park, they need to specify the time and date and book a spot. They will be given a unique code after they book a space.&lt;br&gt;
&lt;strong&gt;Paying:&lt;/strong&gt; The driver needs to make a payment. Normally, payments are done online.&lt;br&gt;
&lt;strong&gt;Driving:&lt;/strong&gt; When they reach the parking lot, the app will guide them to their space through navigation.&lt;br&gt;
&lt;strong&gt;Parking:&lt;/strong&gt; finally, the drivers get their spots and park their cars.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-parking-finder-apps-make-money"&gt;
  &lt;/a&gt;
  How Do Parking Finder Apps Make Money?
&lt;/h2&gt;

&lt;p&gt;And, of course, the big issue. How do parking finder apps make money? At this age of apps when there are even &lt;a href="https://addevice.io/blog/how-to-make-a-mobile-wallet-app/"&gt;mobile wallet apps&lt;/a&gt; and &lt;a href="https://addevice.io/blog/how-do-free-apps-make-money-best-strategies-for-2020/"&gt;free apps that make money&lt;/a&gt;, it is no wonder that parking finder apps generate revenue. Below are the main sources of revenue for parking finder apps.&lt;br&gt;
&lt;strong&gt;Transaction fee&lt;/strong&gt;&lt;br&gt;
The obvious answer is that app owners take a commission on transactions. When a customer makes a payment, the app charges a portion as a transaction fee.&lt;br&gt;
But that is not the whole story.&lt;br&gt;
&lt;strong&gt;Premium listings&lt;/strong&gt;&lt;br&gt;
Parking space finder app owners can also charge parking lot owners. This is done when lot owners want to get a priority in selling their space.&lt;br&gt;
The parking space finder app owners may also offer premium membership to drivers for priority access to parking lots.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-tips-to-follow"&gt;
  &lt;/a&gt;
  Some Tips to Follow
&lt;/h3&gt;

&lt;p&gt;Needless to say that your app needs to be user-friendly and that you should research the market well before your product goes afloat. But here are some small tips that will help you add value.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Show details like photos, the cheapest time to park, or increase of charges;&lt;/li&gt;
&lt;li&gt;Include additional information like nearby restaurants, stores, gas stations, car washing services;&lt;/li&gt;
&lt;li&gt;Give the option to book in advance or on the go;&lt;/li&gt;
&lt;li&gt;Include information about charges and rates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#recommended-features-for-your-car-parking-app-development"&gt;
  &lt;/a&gt;
  Recommended Features for Your Car Parking App Development
&lt;/h3&gt;

&lt;p&gt;The car parking app has 3 main interfaces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User interface&lt;/li&gt;
&lt;li&gt;Admin interface&lt;/li&gt;
&lt;li&gt;Parking owner interface
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8Ik7fuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6u2nmte1amp5dqocclx4.jpg" alt="Image description" width="504" height="521"&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#groups-of-parking-space-finder-apps"&gt;
  &lt;/a&gt;
  Groups of Parking Space Finder Apps
&lt;/h2&gt;

&lt;p&gt;Parking apps can be grouped according to these categories:&lt;br&gt;
&lt;strong&gt;By available spot&lt;/strong&gt;&lt;br&gt;
Most of the parking space finder apps are integrated with maps like Google maps or use GPS features to define the free slot in real-time. If your app has a GPS feature, it will update a valid spot every minute.&lt;br&gt;
Apps can also suggest entering the location code which is visible on the street sign. The codes are valid for parking within a specific area.&lt;br&gt;
You can integrate your app for on-street parking or off-street parking.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;On-Street Parking&lt;/strong&gt; ‚Äì Some apps allow drivers to leave their car somewhere temporarily alongside the footpath or anywhere on the street.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Off-Street Parking&lt;/strong&gt; ‚Äì These include garages, private areas, or driveways that can be both indoors and outdoors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;By parking time&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Parking on the fly&lt;/strong&gt; ‚Äì a driver may find a space right away.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Parking in advance&lt;/strong&gt; ‚Äì An on-demand parking booking application may permit users to book a spot for two weeks in advance or more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;By geo-location&lt;/strong&gt;&lt;br&gt;
Parking apps may cover not only one area but a whole country. For example, Parkopedia covers up to 70 million parking spaces in 15000 cities. Drivers give their current location or address in order to locate available parking spaces. They can also get directions to the parking space.&lt;br&gt;
&lt;strong&gt;By payment method&lt;/strong&gt;&lt;br&gt;
Normally there is no charge for downloading parking apps but they contain integrated payment services. Among the most used methods are Apple Pay, Google Pay, PayPal, credit cards. Drivers can pay both online and in cash. Some apps suggest a prepayment option. Others give an option for payment by cash.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-cost-to-develop-a-parking-app"&gt;
  &lt;/a&gt;
  The Cost to Develop a Parking App
&lt;/h3&gt;

&lt;p&gt;Read also: &lt;a href="https://addevice.io/blog/how-much-does-it-cost-to-build-a-mobile-app/"&gt;How much does it cost to make an app for your business in 2021?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you have a basic idea about why and how to create a parking space finder app, it's time to talk about your budget.&lt;br&gt;
The cost will depend on several factors like the features and functionalities, the design, technology stack, etc. However, the most determining factor is the location of your developers. For example, the hourly rate for software engineers in the USA and Canada ranges from $100 whereas in Eastern Europe it may be as low as $25-$50.&lt;br&gt;
That's why your app may cost you $10,000 but it may also cost you 5 times more.&lt;br&gt;
If you need a precise estimate for your app cost developed by a software development company in Eastern Europe, feel free to &lt;a href="https://addevice.io/contacts/"&gt;contact us&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, why do you need a parking space finder app? Don‚Äôt laugh but chances are that you may generate 6-digit revenue. A UK-based company My Parking Space, for example, generates $12.7M in revenue. Parkpnp, an Ireland-based owner of a parking space, generates annual revenue of $1M.&lt;br&gt;
If you want more figures for a small-scale or medium-scale app, here is a &lt;a href="https://www.parkingboxx.com/parking-revenue-calculator-roi"&gt;calculator to go&lt;/a&gt;.&lt;br&gt;
If you would like a future like My Parking Space or Parkpnp have,  &lt;a href="https://addevice.io/contacts/"&gt;drop us a line&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>parking</category>
      <category>mobile</category>
      <category>programming</category>
      <category>app</category>
    </item>
    <item>
      <title>How To Undo Unstaged Changes In Git Working Directory</title>
      <author>Devtonight</author>
      <pubDate>Fri, 14 Jan 2022 12:40:23 +0000</pubDate>
      <link>https://dev.to/devtonight/how-to-undo-unstaged-changes-in-git-working-directory-5b2c</link>
      <guid>https://dev.to/devtonight/how-to-undo-unstaged-changes-in-git-working-directory-5b2c</guid>
      <description>&lt;p&gt;Git version controlling system lets you discard and undo mistakes that happen in several stages such as ‚Äúworking directory‚Äù, ‚Äústage/index‚Äù, ‚Äúhistory‚Äù and ‚Äúremote‚Äù. In this question, we are going to discard and undo changes in the working directory. In other words, discard the changes that are not yet staged in the repository. If you need to discard staged changes, refer to &lt;a href="http://laravel.test/questions/how-to-undo-staged-indexed-changes-in-git"&gt;this question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, initiate a local Git repository with the &lt;code&gt;git init&lt;/code&gt; command or use an existing repository that you have.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#clean-newly-created-unstaged-files"&gt;
  &lt;/a&gt;
  Clean Newly Created Unstaged Files
&lt;/h2&gt;

&lt;p&gt;Create a couple of sample files and add some content to them. If you need, you can use the following command for that. It will create a file called &lt;code&gt;file.txt&lt;/code&gt; and will add ‚ÄúTest Content‚Äù to it. Repeat the command a few times with different file names to create a few files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "Test Content" &amp;gt; file.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we call these files are ‚Äúuntracked‚Äù, ‚Äúunstaged‚Äù and in the ‚Äúworking directory‚Äù. You can confirm it by running the &lt;code&gt;git status&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say, you just accidentally created these files and now want to remove them all. We can easily undo such situations quickly with the &lt;code&gt;git clean -df&lt;/code&gt; command. It will discard all the newly created files and directories in the working directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clean -df
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you only need to remove some specific files, you can mention them like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clean -df file1.txt file2.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, you can use the &lt;code&gt;git status&lt;/code&gt; to check whether everything is cleaned and in its original state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discard-unstaged-changes-of-existing-files"&gt;
  &lt;/a&gt;
  Discard Unstaged Changes Of Existing Files
&lt;/h2&gt;

&lt;p&gt;Let's say, this time you have changed some committed files in the repository and now need to undo those changes. For the demonstration, again create some sample files (you may use the earlier mentioned command to create files). Stage them using the &lt;code&gt;git add .&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit the files using the &lt;code&gt;git commit&lt;/code&gt; command. We are using the &lt;code&gt;-m&lt;/code&gt; to mention the commit message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Add new files"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now change some content in these committed files. Then run the &lt;code&gt;git status&lt;/code&gt; to confirm whether there are modified files. After that, run the following command to clean and undo all the changes you made to files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -- .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you only need to discard some specific files, you can mention them like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -- file1.txt file2.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can use the &lt;code&gt;git reset&lt;/code&gt; command with &lt;code&gt;--hard&lt;/code&gt; as well. It will discard and clean both staged and unstaged modifications of &lt;strong&gt;existing&lt;/strong&gt; files in the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --hard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feel free to visit &lt;a href="https://devtonight.com?utm_source=dev&amp;amp;utm_medium=questions&amp;amp;utm_campaign=how-to-undo-unstaged-changes-in-git-working-directory"&gt;devtonight.com&lt;/a&gt; for more related content.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>howto</category>
      <category>beginners</category>
    </item>
    <item>
      <title>50 lines of JavaScript: animated source code statistics with Vizzu</title>
      <author>tczagany</author>
      <pubDate>Fri, 14 Jan 2022 12:14:14 +0000</pubDate>
      <link>https://dev.to/kiriwi/50-lines-of-javascript-animated-source-code-statistics-with-vizzu-oi7</link>
      <guid>https://dev.to/kiriwi/50-lines-of-javascript-animated-source-code-statistics-with-vizzu-oi7</guid>
      <description>&lt;p&gt;In this article I visualize the source code statistics of the open-source project which I am a developer of: &lt;a href="https://github.com/vizzuhq/vizzu-lib"&gt;Vizzu&lt;/a&gt;. Since it happens to be a data visualization library, I will use it to show metrics about the project itself.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#software-is-a-visual-affair"&gt;
  &lt;/a&gt;
  Software is a visual affair
&lt;/h2&gt;

&lt;p&gt;We like to talk about programming with my friends. The software developer members of the group usually mention how they visually ‚Äúperceive‚Äù the code they are working on. This visual representation is different for everyone, once I tried to describe mine to others with moderate success. &lt;/p&gt;

&lt;p&gt;Some have gone further in resolving this issue than a friendly conversation, like PayodPanda. It is worth checking out their thesis on the subject:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xfFXl32q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hywcciv2qbxjywborpmn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xfFXl32q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hywcciv2qbxjywborpmn.png" alt="thesis by PayodPanda" width="788" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;multidimensional visualizations of programming constructs by &lt;a href="http://payodpanda.com/MGDThesis/"&gt;PayodPanda&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This example graphically illustrates the essential components of software like variables, loops, and functions and describes algorithms. But the large-scale structures remain hidden, and we need to use other tools to explore those.&lt;/p&gt;

&lt;p&gt;An exciting option is Richard Wettel's CodeCity project, which depicts the source code and its metrics in the form of a 3D city:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YfPk_NwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5di9l9wdal8cprozqg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YfPk_NwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5di9l9wdal8cprozqg7.png" alt="CodeCity by Richad Wettel" width="710" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://wettel.github.io/codecity.html"&gt;CodeCity&lt;/a&gt; integrated software analysis environment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The buildings here represent the classes, districts are libraries, and the other properties - color, height, and floor space - are based on CodeCrawler's language-independent software metrics.&lt;/p&gt;

&lt;p&gt;For a programmer, the above figure is very informative, and it could have come in very handy when I needed to discover software source code as a new employee at a company. However, this has not happened to me yet. Creating visualizations with such detail takes a lot of work, and keeping them up-to-date takes even more.&lt;/p&gt;

&lt;p&gt;If we don't need this level of detail, we can use the source code as the basis of the visualization. For example, we can make a spreadsheet listing the files and the line count, the language (based on the extensions), and the folder structure. We can easily create this ‚Äúlow-end‚Äù database and keep it up-to-date, and we just need a generic visualization tool for the next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-collection-and-overview"&gt;
  &lt;/a&gt;
  Data collection and overview
&lt;/h2&gt;

&lt;p&gt;I use VSCode for my daily work, so I wanted to solve the data collection problem within this ecosystem. I found an extension called VSCode Counter, that seemed perfectly suitable for the job. Its output contained all the necessary information and I was able to produce it with a single click. The result is an easily processable csv file with the full path and the extracted information of the source file.&lt;/p&gt;

&lt;p&gt;After arranging the directory names, file names, and the number of lines into a table, we get something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oeuu4ZM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wd97auhxhj2e8ikbz3jp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oeuu4ZM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wd97auhxhj2e8ikbz3jp.jpg" alt="Raw data" width="880" height="258"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lines count and folder structure of the source code&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most important difference between the raw data table and this one above is the directory structure description. Since we want to examine the hierarchy of directories, we broke the full paths into parts so they can be used for grouping within the visualization. I used Google Spreadsheet for this task. After importing the data, I broke the directory names into columns with the SPLIT function. Next, I conditionally reassembled the path fragments based on their place in the hierarchy.&lt;/p&gt;

&lt;p&gt;After having the information in this form, we can look for correlations by creating simple charts with the popular spreadsheet app. Let's see how it supports us in doing so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i2P_5w0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqyrgt9e8k3mvoq67l4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i2P_5w0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqyrgt9e8k3mvoq67l4p.png" alt="Vizzu source code charts" width="725" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Charts from spreadsheet application&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are fine for a first attempt; the picture is much clearer. The first chart shows all the files and their sizes. There are no unusually large items, with a few exceptions, which we'll look at later. The histogram shows the healthy distribution of the source files with a tiny question: why does the source contain so many small files? The answer is on the pie chart: This is mainly a C++ project, and as such, it has many of the declarations in header files. But then, why is there a significant JavaScript part in the source? For that answer, we need to dig a little deeper.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-try-a-new-approach"&gt;
  &lt;/a&gt;
  Let‚Äôs try a new approach
&lt;/h2&gt;

&lt;p&gt;For further analysis, we have to rearrange the table. We could use the spreadsheet applications, but many pivot tables would be needed, which can become very inconvenient very soon. At this point, it‚Äôs better to choose a professional data visualization tool or select a library and write a few lines of code. Solving our task with Jupyter or Tableau is alright, but their usage is atypical among developers. For us, coding comes much more naturally.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbfeqkGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfeg3ktoshvm8q5p6t5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbfeqkGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfeg3ktoshvm8q5p6t5u.png" alt="Vizzu logo" width="475" height="136"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Animated, open source charting library: &lt;a href="https://vizzuhq.com/"&gt;Vizzu&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I chose the Vizzu library because it describes all chart types with a uniform description. I like that. And it‚Äôs open source. With Vizzu, I didn't have to know the parameters and settings of a bar chart, pie chart, or treemap. Instead, I can just construct them by changing generic settings. &lt;/p&gt;

&lt;p&gt;The theory in the background sounds simple: the charts are made of different markers. The markers have six visual parameters that the data series can control: the channels. The following channels are available: x (horizontal position), y (vertical position), color, size, lightness, and the label of the markers. One continuous and any number of discrete data series can be attached to these channels. Selecting the shape of the markers and the applied coordinate system gives access to a universe of different charts. In the late 90s, Leland Wilkinson built charts with a similar logic described in his book The Grammar of Graphics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-the-first-steps-with-vizzu"&gt;
  &lt;/a&gt;
  Taking the first steps with Vizzu
&lt;/h2&gt;

&lt;p&gt;I converted the table into a js file and put it into a git repository to start playing with the visualization in JSFiddle.&lt;br&gt;
To get acquainted with this generic logic, let‚Äôs try to recreate one of the charts from above using Vizzu. What will be the result if I attach the 'Line count' to the 'x‚Äô channel, and put the 'File names' on the 'y' channel? The answer is easy: rectangular markers for each file are distributed along the y-axis, and their width along the x-axis will represent the line count of each file. Bingo, this is the bar chart of the source code line count.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jsfiddle.net/tczagany/ou0tbL3f/"&gt;Bar chart in JsFiddle:&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Vizzu from '...';
import { data } from '...';
let chart = new Vizzu('myVizzu');
chart.initializing
.then(chart =&amp;gt; chart.animate({
  data: data,
  config: {
    channels: { y: 'Line count', x: 'File name' }
  }
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://jsfiddle.net/tczagany/ou0tbL3f/"&gt;In polar coordinate system:&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
channels: { x: 'Line count', y: 'File name' },
coordSystem: 'polar'
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://jsfiddle.net/tczagany/ow9r384L/"&gt;With circle marker geometry:&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
channels: { x: 'Line count', y: 'File name' },
coordSystem: 'polar',
geometry: 'circle'
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last example looks hardly understandable, but it has been our choice. The library doesn' make corrections on settings, just displays the chart with the given method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WjI5Pkfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um993qpt7aqoynqzo6c1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjI5Pkfp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um993qpt7aqoynqzo6c1.png" alt="Vizzu samples" width="880" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First steps with Vizzu&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, let‚Äôs recreate the pie chart showing the line count of the different languages. To achieve this, we will need a marker for each language with the summarised line count. The following line performs this job:&lt;br&gt;
&lt;code&gt;channels: { x: ['Line count', 'Language'], color: 'Language', }&lt;/code&gt;&lt;br&gt;
This example shows that channels can hold more than one data series. The first can be continuous, all the others must hold discrete values. We are nearly there now, just need to change the coordinate system to polar and our pie chart is ready.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwfUQrQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st4d34v2rgx4pjeigs5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwfUQrQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st4d34v2rgx4pjeigs5s.png" alt="Vizzu pie chart" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://jsfiddle.net/tczagany/ow9r384L/"&gt;Distribution of languages&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#and-yet-it-even-moves"&gt;
  &lt;/a&gt;
  And yet it even moves‚Ä¶
&lt;/h2&gt;

&lt;p&gt;The uniform description of charts in Vizzu has an interesting consequence: it allows the interpolation of two graphs since only their parameters differ from one another. In other words: it allows the creation of animated charts. The animation creates a strong link between the charts for the viewer, enables storytelling and a deeper understanding of the data.&lt;/p&gt;

&lt;p&gt;Let‚Äôs try and create an animated series of charts that give the same insight that the three, distinct, static charts provided in the beginning. This requires a specific approach where each transition has to be easily followed by the viewer. Sounds complex but as you‚Äôll see it‚Äôs quite easy if you change the chart settings one-by-one.&lt;br&gt;
Here‚Äôs an outline - or as we‚Äôre building an animation, a storyboard - of what I want to&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJvHxSQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xwjp34mc3ferz7n21v0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJvHxSQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xwjp34mc3ferz7n21v0.jpg" alt="Animation outline" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Storyboard of animated chart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first chart still shows the number of rows in the files. Then we sort them so we get to the histogram but with a much finer resolution then originally. So far so good, the animation can be followed easily. Next I just add the ‚Äòlanguages‚Äô to the color channel and I don't think there's a problem with that either especially since the legend automatically appears. Tracking the last step seems to be the most difficult, maybe I could have inserted some interim steps so that it‚Äôs easier for the viewer to follow along. Still, the end result is pretty clear, especially when I add the ‚ÄòLine count‚Äô to the ‚Äòlabel‚Äô channel. And I achieved all this with just 50 lines of code!&lt;/p&gt;

&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jvCE20RX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkctixdb9e9o6bzqxqdi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jvCE20RX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkctixdb9e9o6bzqxqdi.gif" alt="Animated source visualization" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://jsfiddle.net/tczagany/9zbyojrL/"&gt;Animation source in JsFiddle&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think this is a surprisingly good solution. During the animation, you can track exactly what languages the individual files belong to and how many lines are in those languages overall.&lt;/p&gt;

&lt;p&gt;At this point, we have the data from our source code and we have a tool to browse them efficiently. Plus, as a bonus, we‚Äôve got animations that allow us to connect the charts while keeping the context. But what about displaying the folder structure? How can we dig deeper, as I mentioned earlier? I will answer the questions in my next post. I enjoyed working with Vizzu and it has changed my understanding about chart drawing. Feel free to fiddle with the code snippets and hope you‚Äôll find it as much fun as I did.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>productivity</category>
      <category>opensource</category>
      <category>dataviz</category>
    </item>
    <item>
      <title>3. Accessing by value and references</title>
      <author>SungJunEun</author>
      <pubDate>Fri, 14 Jan 2022 12:04:13 +0000</pubDate>
      <link>https://dev.to/sungjuneun/3-accessing-by-value-and-references-14a2</link>
      <guid>https://dev.to/sungjuneun/3-accessing-by-value-and-references-14a2</guid>
      <description>&lt;h3&gt;
  &lt;a href="#articles"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Articles&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0"&gt;Explaining Value vs. Reference in Javascript ‚Äî Arnav Aggarwal&lt;/a&gt; 100%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c"&gt;Primitive Types &amp;amp; Reference Types in JavaScript ‚Äî Bran van der Meer&lt;/a&gt; 100%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/@benastontweet/lesson-1b-javascript-fundamentals-380f601ba851"&gt;Value Types, Reference Types and Scope in JavaScript ‚Äî Ben Aston&lt;/a&gt; 100%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18"&gt;Back to roots: JavaScript Value vs Reference ‚Äî Miro Koczka&lt;/a&gt; 100%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293"&gt;Grasp ‚ÄúBy Value‚Äù and ‚ÄúBy Reference‚Äù in JavaScript ‚Äî L√©na Faure&lt;/a&gt; 100%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0"&gt;JavaScript Reference and Copy Variables ‚Äî V√≠tor Capretz&lt;/a&gt; 100%&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/"&gt;JavaScript Primitive vs Reference Values&lt;/a&gt; 100%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value"&gt;JavaScript by Reference vs. by Value ‚Äî nrabinowitz&lt;/a&gt; 100%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f"&gt;JavaScript Interview Prep: Primitive vs. Reference Types ‚Äî Mike Cronin&lt;/a&gt; 100%]&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#primitve-amp-objects"&gt;
  &lt;/a&gt;
  Primitve &amp;amp; Objects
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#primitive"&gt;
  &lt;/a&gt;
  Primitive
&lt;/h3&gt;

&lt;p&gt;Primitve values are immutable. So, variable storing primitve value allocates fixed amount of memory. And we say that those variables are &lt;strong&gt;accessed by value&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#object"&gt;
  &lt;/a&gt;
  Object
&lt;/h3&gt;

&lt;p&gt;Objects are mutable. For performance reasons, reference(address) of that object is stored in variable. The real objects are stored in heap. We say that those variables are &lt;strong&gt;accessed by references&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#copying-variable"&gt;
  &lt;/a&gt;
  Copying variable
&lt;/h2&gt;

&lt;p&gt;One rule: in-memory value is copied.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;primitve value: actual value is stored in memory
-&amp;gt; actual value is copied
As actual values are copied, copied variables has no relationships.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// a = 10, but no relationship with x&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// b = 'abc', but no relationship with y&lt;/span&gt;

&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;object: reference of object is stored in memory
-&amp;gt; reference of the object is stored.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;object2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="c1"&gt;// object2 and object has same reference that points &lt;/span&gt;
                     &lt;span class="c1"&gt;//to same object&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;## Reassigning variable&lt;br&gt;
 One rule: reassigning variable -&amp;gt; variable points to new primitve or object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As primitve values are immutable, 4 didn't changed to 5. 4 has been replaced with 5.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// object stores a reference &amp;lt;#001&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;third&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fourth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// reference &amp;lt;#001&amp;gt; replaced to &amp;lt;#002&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say that {first:'second'}'s address is #001 and {third: 'fourth'}'s address is #002. &lt;br&gt;
Then first variable &lt;code&gt;object&lt;/code&gt; stores #001. And when it has been assigned with new object, #001 is replaced to #002. &lt;/p&gt;

&lt;p&gt;In above case, data stored in address #001 has losts its reference to object. Then Javascript engine performs &lt;strong&gt;garbage collection&lt;/strong&gt;, which finds unneccessary memory and deletes it.&lt;/p&gt;

&lt;p&gt;However, modifying the property of object works little different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// address #001&lt;/span&gt;
&lt;span class="nx"&gt;reference&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;third&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fourth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reference&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {first:'second', thrid: 'fourth'};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modifying the property of the assigned object changes the underlying object, not assigning new object. Reference stored in the &lt;code&gt;reference&lt;/code&gt; has not replaced.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#passing-variable-to-parameter"&gt;
  &lt;/a&gt;
  Passing variable to parameter
&lt;/h2&gt;

&lt;p&gt;Passing variable as a parameter of function is same as copying variable; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;primitive type: actual value is passed.&lt;/li&gt;
&lt;li&gt;object: reference of object is passed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pure-funciton"&gt;
  &lt;/a&gt;
  Pure funciton
&lt;/h3&gt;

&lt;p&gt;Pure funciton is a function that doesn't affect anything outside the scope. &lt;code&gt;Array.map&lt;/code&gt;, &lt;code&gt;Array.filer&lt;/code&gt; are written as pure function.&lt;/p&gt;

&lt;p&gt;If function only takes primitve vaule as parameter, and doesn't uses any variable outside scope, it's pure funciton. &lt;br&gt;
If object is passed to parameter and modified inside the function, change it makes may persist in outer scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;impure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;John&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;impure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;John&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;John&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 20;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we should be careful to distinguish modifying property and reassigning variable. Reassigning doesn't affect the underlying object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reassigning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;John&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;reassigning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;John&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;John&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//{name: 'John', gender: 'male'};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above example, first, reference stored in &lt;code&gt;John&lt;/code&gt; is copied and stored in &lt;code&gt;object&lt;/code&gt;. Next, new reference is stored in &lt;code&gt;object&lt;/code&gt; in the &lt;code&gt;reassigning&lt;/code&gt; function. This doesn't affects &lt;code&gt;John&lt;/code&gt;. After the function is returned, variabe &lt;code&gt;object&lt;/code&gt; is garbage collected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spread-operator"&gt;
  &lt;/a&gt;
  spread operator
&lt;/h3&gt;

&lt;p&gt;There can be situation where we want to keep the originality of object and apply the function on copied one. In this case, we can use spread operator. It works as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;car2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;car1&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, new reference is stored in &lt;code&gt;car2&lt;/code&gt; with same properties of car1. So modifying car2 doesn't affects &lt;code&gt;car1&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-amp-"&gt;
  &lt;/a&gt;
  == &amp;amp; ===
&lt;/h2&gt;

&lt;p&gt;When equality operators are used in reference-type variables, they check if the references are the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check if the properties of the object are same,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr1str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr2str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1str&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;arr2str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have changed it to string, which is primitive data type.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>JUnit Complete Tutorial For Beginners </title>
      <author>LambdaTest</author>
      <pubDate>Fri, 14 Jan 2022 12:03:50 +0000</pubDate>
      <link>https://dev.to/lambdatest/junit-complete-tutorial-for-beginners-5a78</link>
      <guid>https://dev.to/lambdatest/junit-complete-tutorial-for-beginners-5a78</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HXtC-a_4HAc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This JUnit tutorial teaches you everything you need to know to work with JUnit for Selenium automation testing. &lt;/p&gt;

</description>
      <category>junit</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How practice and improve trade skills with demo trading on trading view with bar reply mode feature? (open source project)</title>
      <author>Ali Moradi</author>
      <pubDate>Fri, 14 Jan 2022 12:00:50 +0000</pubDate>
      <link>https://dev.to/xibalbas/how-practice-and-improve-trade-skills-with-demo-trading-on-trading-view-with-bar-reply-mode-feature-open-source-project-3gjk</link>
      <guid>https://dev.to/xibalbas/how-practice-and-improve-trade-skills-with-demo-trading-on-trading-view-with-bar-reply-mode-feature-open-source-project-3gjk</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/xibalbas/paper_trading_view.git"&gt;paper trading view repo on github&lt;/a&gt;&lt;br&gt;
a few weeks ago when i was practicing price action method in MT4 i found out Trading View has a feature call Bar reply , you can cut the candlestick chart to the back , so i decided to buy a pro account .&lt;/p&gt;

&lt;p&gt;but after a while i find out this feature does not prepare paper test . if you want to practice with Bar reply mode you should write your trade on paper and this was not a good idea.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_S9HbnuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvf8q6uak3s8crx2jh2i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_S9HbnuB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hvf8q6uak3s8crx2jh2i.gif" alt="Image description" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zW962uAD4TU&amp;amp;t=28s"&gt;Quick installation tutorial video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so i decided to search i found another package on Git hub they call tradingview-trainer but this did not help me because it was not complete .&lt;/p&gt;

&lt;p&gt;it‚Äôs simple work with Selenium , tkinter&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#papertradingview-features"&gt;
  &lt;/a&gt;
  paper-trading-view Features
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;work with TradingView: For bar reply and getting price we use trading view.

&lt;p&gt;Limit/Market orders: you can place a Limit or Market order in 2 side "long", "Short" .&lt;/p&gt;

&lt;p&gt;SL/TP set: you can set stop loss and take profit for your market or limit order .&lt;/p&gt;

&lt;p&gt;see Open orders: you can see list of open orders.&lt;/p&gt;

&lt;p&gt;see Open positions: you can see list of open positions.&lt;/p&gt;

&lt;p&gt;see trade history: you can see list of trade history.&lt;/p&gt;

&lt;p&gt;Next/Play/Pause in bar reply: you can use this items in PTV and when price is changing open positions and open orders will be check.&lt;/p&gt;

&lt;p&gt;initial setting: you can set your initial money / commission.&lt;/p&gt;

&lt;p&gt;profit/loss of account: your total profit / loss calculate when your position close.&lt;/p&gt;

&lt;p&gt;save report: you can save your trade history in a csv file.&lt;br&gt;
&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#papertradingview-github-source"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  paper-trading-view Github Source&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kjv0Dfwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3i93trlgc2kkpbgxkgr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kjv0Dfwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3i93trlgc2kkpbgxkgr.png" alt="Image description" width="880" height="511"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/xibalbas/paper_trading_view.git"&gt;https://github.com/xibalbas/paper_trading_view.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The installation instructions can be found on project page! If you have any questions or comments, feel free to leave them down below! Good luck on your practice trading, hope this tool helps!&lt;/p&gt;

&lt;p&gt;if you like it give a start :)))&lt;/p&gt;

&lt;p&gt;designed with love&lt;/p&gt;

</description>
      <category>python</category>
      <category>github</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Zebrunner and LambdaTest
smart test execution and
transparent test analytics</title>
      <author>LambdaTest</author>
      <pubDate>Fri, 14 Jan 2022 11:51:52 +0000</pubDate>
      <link>https://dev.to/lambdatest/zebrunner-and-lambdatestsmart-test-execution-andtransparent-test-analytics-3g7j</link>
      <guid>https://dev.to/lambdatest/zebrunner-and-lambdatestsmart-test-execution-andtransparent-test-analytics-3g7j</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/t86qAmICBEg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brief&lt;/strong&gt;&lt;br&gt;
Keeping the effective test automation process usually requires much effort and time from QA teams. To simplify test execution and analysis, Zebrunner and &lt;a href="https://www.lambdatest.com/?utm_source=dev%20to&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan_14&amp;amp;utm_term=nt&amp;amp;utm_content=webpage"&gt;LambdaTest&lt;/a&gt; are happy to present an innovative combo solution that helps QA engineers perform testing in an easier way.&lt;/p&gt;

&lt;p&gt;Now users can run tests via LambdaTest Selenium Grid, report test results directly into Zebrunner, and quickly analyze them with a wide range of artifacts (video, screenshots, test logs), AI/ML failure classification, and quality trend reports. With Zebrunner, it‚Äôs also possible to keep traceability between systems using integrations with the most popular Project Management/Quality Assurance tools on the market.&lt;/p&gt;

&lt;p&gt;Join this 1-hour webinar with Zebrunner and LambdaTest to dive deeper into effective test automation with the combo solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are the key takeaways:&lt;/strong&gt;&lt;br&gt;
Overview: what are the benefits of LambdaTest + Zebrunner integration&lt;br&gt;
Getting started: how to configure LambdaTest and Zebrunner accounts&lt;br&gt;
Smart execution: how to launch tests on LambdaTest side from Zebrunner&lt;br&gt;
Advanced test analysis: how to detect failures with rich artifacts and AI/ML&lt;br&gt;
Customized test reporting: how to track product quality with live dashboards&lt;/p&gt;

</description>
    </item>
    <item>
      <title>8 ways to become a BETTER SRE ( Right now! ) | 8 non-technical characteristics to have</title>
      <author>Tharun Shiv</author>
      <pubDate>Fri, 14 Jan 2022 11:25:11 +0000</pubDate>
      <link>https://dev.to/developertharun/8-ways-to-become-a-better-sre-right-now-8-non-technical-characteristics-to-have-3n4p</link>
      <guid>https://dev.to/developertharun/8-ways-to-become-a-better-sre-right-now-8-non-technical-characteristics-to-have-3n4p</guid>
      <description>&lt;p&gt;Site Reliability Engineering, also popularly referred to as the SRE, is a role in Computer Science Engineering where the main purpose is to provision, maintain, monitor, and manage the infrastructure to provide maximum application uptime and reliability. SRE is an emerging role, but the tasks that the SRE does were always there ever since the first application that was developed. The scope of the software developers ends where they write code to develop the application and right from setting up the infrastructure, the various services that run on them, the network connectivity that is required, providing a platform for the application to run and making sure every part of the application is up and running reliably 24x7 is the duty of an SRE. We can consider Site Reliability Engineers are the strong bridge between the users and a reliable application.&lt;/p&gt;

&lt;p&gt;Let us look at 8 ways in which you can become a better SRE at work. SRE not just involves various technologies to deal with and keep them running, but also several non-technical characteristics. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2drsyhJzcao"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sre-is-all-about-the-right-mindset"&gt;
  &lt;/a&gt;
  1. SRE is all about the right Mindset
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a. No blame game

b. Thirst to solve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As an SRE we deal with multiple components and are a bridge between the users and the application. Even though the application is well written, a bigger responsibility falls upon SRE to keep the applications and the services it uses up and running. In this process, there might be a few situations where one of the SRE does a mistake that causes a disruption or even an outage. When this happens, the first thing to happen shouldn't be to blame anyone for the outage, but the following has to be performed. &lt;/p&gt;

&lt;p&gt;i. Fix the issue&lt;/p&gt;

&lt;p&gt;ii. Write an RCA ( Root Cause Analysis ) that mentions why the issue occurred in the first place, the names can be anonymous.&lt;/p&gt;

&lt;p&gt;iii. Mention the first aid and the fix for the issue&lt;/p&gt;

&lt;p&gt;iv. Discuss how the issue can be prevented the next time &lt;/p&gt;

&lt;p&gt;v. Set an ETA for the fix&lt;/p&gt;

&lt;p&gt;Another aspect is to have the right mindset to solve problems. As an SRE you have the responsibility to optimize the infrastructure, fix issues, build automation tools, monitoring tools, and more, which requires a lot of problem-solving skills. Unless you have the thirst to solve the problems, you will only feel more stressed out, or even worse, would cause issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-communication"&gt;
  &lt;/a&gt;
  2. Communication
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a. Overcommunication is not a problem

b. Be kind and show empathy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Are you performing a production activity or even a stage change that could affect other teams? Have you made progress in the project that you are working on? Make sure to keep the necessary stakeholders in sync always. Write emails, send slack messages well in advance before the production activity, just before and after the activity. It might sound like over-communication, but trust me, as the company scales, you need to keep everyone relevant to the component that you are working on in sync. This way, if they have to take any actions from their side, they will do it, or if they face any issues post-activity they'll know who the right person to get in touch with is.&lt;/p&gt;

&lt;p&gt;One other important characteristic to have as a human being is to be kind and show empathy. This will apply to all levels of engineering on either side of the conversation, period. Whether someone asks a silly question, or does a mistake, or behaves rudely with you, you should never mirror that behavior.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-stay-synced-with-the-team"&gt;
  &lt;/a&gt;
  3. Stay synced with the team
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a. Do not miss team meetings

b. Prevent duplication of work

c. Do not compete, but contribute
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In this work from home ( WFH ) period, the only time where you have an opportunity to speak to your teammates is during a team meet. The reason why this is special is, you get an opportunity to stay synced with your team on what they all are working on, whether they are blocked on any tasks, how you can contribute to their tasks and also you will be using this opportunity to convey on what you are working on and get help if necessary. This also prevents duplication of work.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-shadow-teammates-on-tasks-and-issues"&gt;
  &lt;/a&gt;
  4. Shadow teammates on tasks and issues
&lt;/h2&gt;

&lt;p&gt;The best way to learn is by doing it hands-on and the best way to begin would be by watching how it is done. I also believe that the best way to retain the learned information is by performing it repeatedly. This also includes watching your teammates perform the activities. It ensures that the activity is done without any mistakes when there are several eyes to watch it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-no-spoonfeeding-do-homework"&gt;
  &lt;/a&gt;
  5. No Spoon-feeding, do homework
&lt;/h2&gt;

&lt;p&gt;Do not expect all details to be taught by your teammates and seniors. Read the documentation, watch tutorials, read engineering blogs, practice on your own, and suggest improvisations. Even a well-built system will have much more efficient solutions, that you can propose. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6YviJar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qlsvmu5wowdihngs04h.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6YviJar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qlsvmu5wowdihngs04h.PNG" alt="SRE mindmap" width="880" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-be-attentive-and-cautious-on-production"&gt;
  &lt;/a&gt;
  6. Be attentive and cautious on production
&lt;/h2&gt;

&lt;p&gt;I've heard people pretending to work while watching web series. They might be proud of their multitasking skills, but as far as I know, there is no such thing as multitasking at work while watching a web series and I highly recommend one to not do that. If you are interested in watching a series, I would suggest you use that motivation to focus on the work, finish the tasks quickly and reward yourself with a couple of episodes later in the evening.&lt;/p&gt;

&lt;p&gt;Attention is the core necessity of life, and the same holds true to an SRE. Be attentive to the commands you run, the alerts you get, the trend the charts show, and the logs of the services and applications. Prepare for activities well in advance and let the actual activities be a no-brainer copy-paste so that you can pay attention to other indications during the activity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-think-before-you-hit-enter"&gt;
  &lt;/a&gt;
  7. Think before you hit enter
&lt;/h2&gt;

&lt;p&gt;Do not underestimate sudo privilege. A lot of us have a habit to enter into the sudo mode as soon as we login into a machine, which is unnecessary. Even if the command you are running looks like a harmless command, make sure to get the process and commands reviewed by your teammates, seniors, or the subject experts, this will save you from outages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-keep-version-control-systems-in-sync"&gt;
  &lt;/a&gt;
  8. Keep version control systems in sync
&lt;/h2&gt;

&lt;p&gt;Whether it is NGINX config or any service config, make sure to keep the version control system that is isolated from the system in sync. No one hopes for the machine to become unresponsive, but when the machine becomes unusable all of a sudden, you have another opportunity to bring up alternate machines with the same configs as the previous ones. Keeping the version control system in sync also helps in automation.&lt;/p&gt;

&lt;p&gt;Listen to the Podcast with more examples and explanation&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://open.spotify.com/embed/episode/1xAQZ0u0He3VDQ4bzPzS7y" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Read about what Site Reliability Engineering is and what are the 4 main things that the Site Reliability Engineers take part in: &lt;a href="https://dev.to/developertharun/1-whats-site-reliability-engineering-sre-roles-responsibilities-technologies-involved-1dcc"&gt;Link to the Article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JgS4ZlQZfj4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Check out my YouTube Channel here: &lt;a href="https://www.youtube.com/c/developerTharun"&gt;Developer Tharun - YouTube&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thank you for reading the article.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>security</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
