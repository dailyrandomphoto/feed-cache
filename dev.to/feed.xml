<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Mastering Webpack</title>
      <author>Kinanee Samson</author>
      <pubDate>Tue, 12 Jan 2021 22:47:51 +0000</pubDate>
      <link>https://dev.to/kalashin1/mastering-webpack-12fk</link>
      <guid>https://dev.to/kalashin1/mastering-webpack-12fk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#webpack-for-beginners-series" class="anchor"&gt;
  &lt;/a&gt;
  Webpack for Beginners Series
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#learn-how-to-use-webpack-to-bundle-your-code-and-manage-your-assets-and-automate-easy-processes-and-optimize-your-code" class="anchor"&gt;
  &lt;/a&gt;
  Learn how to use Webpack to bundle your code and manage your assets, and automate easy processes and optimize your code.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-webpack" class="anchor"&gt;
  &lt;/a&gt;
  What is webpack?
&lt;/h3&gt;

&lt;p&gt;Webpack is a module bundler and asset management tool that helps us to bundle our code which is split across different files and directories into one single file that is optimized for production environment. Webpack also helps us to mange assets in our code like stylesheets, fonts, icon, images e.t.c and provides some out of the box features like transpilation of typescript, sass, scss, makrdown, jade into plain vanilla JavaScript, CSS and HTML, webpack also provides cool features like css scoping, a cool development server and many more exciting features.&lt;br&gt;
The importance of webpack as a tool cannot be understated because &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Webpack can help us to reduce load time by bundling all our code which is split across different files and spit them out into a single file, this way our browser only ever loads a single JavaScript file that it needs to run and this significantly decreases load time.&lt;/li&gt;
&lt;li&gt;Webpack can help us to convert our code which might be written in a language that is not too familiar with the browser to something that most browsers can understand, this also helps reduce time spent developing because most tasks are already automated.&lt;/li&gt;
&lt;li&gt;It comes with a cool development sever where we can get a live reload of our work, this server also allows for source mapping so we can see the exact line in the particular file that is causing the error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First thing first make sure you have nodejs installed on your pc first before we proceed and you can do that tying &lt;code&gt;node -v&lt;/code&gt; in your terminal and that will throw of the version of node you have installed on your pc if there is one, else you can head to &lt;a href="https://nodejs.org"&gt;node js&lt;/a&gt; to download and install the latest version of node on your device and once you've done that, let's move to installing webpack. Still inside the command line type &lt;code&gt;mkdir bundle-app &amp;amp;&amp;amp; cd bundle-app&lt;/code&gt;  and hit enter. This creates a folder for us with the name bundle-app and navigates to that directory from the command line. Next thing is to create a package.json file that will keep track of all our dependencies. Enter &lt;code&gt;npm init --y&lt;/code&gt; and press enter, this creates a package.json file for us with the default configuration, don't really worry about that for now, just know that it keeps an eye on all the modules that our application depends on to run. Next thing we do now is to install webpack, type &lt;code&gt;npm i webpack webpack-cli --save&lt;/code&gt; and hit enter, this installs webpack and webpack-cli and saves them to our dependency. Now we let's get our hands dirty, from the command line inside the bundle-app folder type &lt;code&gt;code .&lt;/code&gt; and this opens up visual studio code for you with that directory loaded in or else just open up the folder in any editor of your choice. Your directory structure should look like this. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;em&gt;you can find the complete code base for this lesson on thisÂ &lt;a href="https://github.com/Kalashin1/Webpack-for-beginners-series"&gt;repository&lt;/a&gt;&lt;/em&gt;&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;---------------------&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
                        &lt;span class="o"&gt;|-----&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next thing add an index.html file and add the basic markup for a normal web page, your directory structure should now look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-----------------------&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open up your index.html file up and link to main.js, your typical index.html file should look like this;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;em&gt;webpack will create main.js for us&lt;/em&gt;&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack Tutorial&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;      
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Great, now create a JavaScript file, let's call that file index.js. Okay create another JavaScript file again and let's call this one hero.js, your new directory structure should look like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-----------------------&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open up your hero.js and define a very simple Hero Object using object literal notation, our person object should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Incredible Hulk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;personality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bruce Banner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;suit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;short Jeans&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;strength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;super human strength&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next thing open up your index.js and import the hero object we declared in our hero.js, your index.js file should look like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hero.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// create an html list object&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// create a div tag&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// we will loop through hero object and append a new li tag to the div for each property&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//appendn the list to the div and then the div to the body of the document&lt;/span&gt;
&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;whew! Now let's feel the raw power of webpack by using it from the command line, so if your terminal is still up and you are inside the bundle-app directory, cool, otherwise please open your command line and navigate to the directory bundle-app. Once you've done that, in the command line, type &lt;code&gt;npx webpack ./index.js -o ./&lt;/code&gt; and press enter, it will compile your code down and once that is done you can open up your index.html in your browser and you should see the document in the browser with the the properties of the hero on it. &lt;br&gt;
In this instance we used wepack via the command line this is one of the methods of using webpack, however i will advice you to only use this approach for very simple projects, more complex projects require a different approach which we will be using from now on. If you look at that example, webpack took our code we wrote in two separate files and spit them out into one file which is then loaded by the browser, webpack is able to this efficiently and gracefully because before it spits out the code, it checks the files for their dependencies and builds a dependency graph which it uses to keep track of the dependencies in our application and then it spits out our code and the dependencies into one single file. Webpack can watch your will watch our file and recompile it again once there is a change in our file and it will update the dependency graph to accommodate new dependencies if there are any, use this command to that  &lt;code&gt;npx webpack ./index.js -o ./  --watch&lt;/code&gt;. In our example above we just did simple plain common is module export and import style, however we can use ES6 style module import system in our code and webpack will bundle down that to a version of JavaScript that most browser will understand, and for this we will now update our directory structure and files, and we will use a webpack.config.js file for our webpack set up hence forth, so create that file and it should sit at the root folder, our directory structure should now look like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;----------------------&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="kr"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;/---------&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt;           
                &lt;span class="o"&gt;|&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/---------&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt;                   &lt;span class="o"&gt;|------&lt;/span&gt;&lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
                &lt;span class="o"&gt;|&lt;/span&gt;
                &lt;span class="o"&gt;|-------------&lt;/span&gt;&lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;One of the cool features of webpack is that we can write versions of JavaScript that we want in our code like ES6 JavaScript and webpack will be so nice that it will transpile that our code with ES6 syntax to a version of JavaScript that both modern and old browsers alike will be able to understand, open up the hero.js folder and make the following adjustment to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//hero.js&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Incredible Hulk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;personality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bruce Banner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;suit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Short Raggerd Jeans&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;strength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;super human strength&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now use ES6 style for declaring our hero object, next thing you head over to the index.js file and then we also use ES6 import statement to import our Hero object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./hero.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;//only change this line&lt;/span&gt;

&lt;span class="c1"&gt;// create an html list object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ul&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// create a div tag&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// we will loop through hero object and append a new li tag to the div for each property&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//appendn the list to the div and then the div to the body of the document&lt;/span&gt;
&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We need to edit our html code to link up to the bundle.js file that will be generated for us by webpack, so your html file should look like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack Tutorial&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;      
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Fine, we've got everything set and inplace, next thing we will do is to open up our webpack.config.js and here we define some configurations to webpack about how we want webpack to bundle our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//webpack.config.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//we require the path core module to help us resolve a directory&lt;/span&gt;

&lt;span class="c1"&gt;//this will hold our configuration object&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//we first specify an entry script to webpack&lt;/span&gt;
    &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/index.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;//next is our output file and directory&lt;/span&gt;
    &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bundle.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That simple configuration object requires two things;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The file that we want to process which is specified in the entry variable, it contains the starting point to our code, normally this entry script should import all other scripts that our app depends on.&lt;/li&gt;
&lt;li&gt;Where our processed file should be put and for that we import the path module which is a core node.js module and this will help us resolve the directory we want to place our file inside. Our output is specified via an output object that holds two keys, the path we want the file to sit in, and then the filename, which is what we want to name the file.&lt;/li&gt;
&lt;li&gt;Webpack created that bundle.js for us even if it did not exist, much like it did when we first used it via the command line, the benefit of this command line is that we can easily pass information to webpack about how it should handle the things we import into our code and that helps with assets and style management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use the resolve method on the path core module to get the directory with a name of dist, which we created earlier, remeber? next thing is the what we want the file to be named, and in this instance i'm just calling it bundle.js, ring any bells? To process our file simply open up your terminal inside the root folder that is bunde-app and then from the terminal simply type &lt;code&gt;npx webpack --config webpack.config.js&lt;/code&gt; and tada! If everything goes according to plan which it should do except there's a typo somewhere you should see information concerning your file and information and the processed file and then a compiled successfully message in your console. &lt;/p&gt;

&lt;p&gt;This is this for this article in this series, we will be looking at how we can convert typescript code into plain vanilla JavaScript with webpack in our next article so do stay tuned, don't forget to drop your comments in the comment section and do have a nice day.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>webpack</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 12 Jan 2021 18:32:40 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3p4j</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3p4j</guid>
      <description>&lt;p&gt;Every Tuesday, we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. â¤ï¸&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2021-the-year-of-fullstack" class="anchor"&gt;
  &lt;/a&gt;
  2021 â The year of full-stack
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/itsnitinr"&gt;@itsnitinr&lt;/a&gt;
 has decided to learn the following technologies this year. By the end of this post, you might be on the same page!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/itsnitinr" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G4BI-70A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ETUrsG6Q--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/243850/50980395-72a9-45f6-ae80-ed8aa49b87d6.jpeg" alt="itsnitinr image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/itsnitinr/technologies-that-i-ll-be-learning-in-2021-as-a-mern-stack-developer-with-resources-4pci" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Technologies That I'll Be Learning in 2021 as a MERN Stack Developer (with resources)&lt;/h2&gt;
      &lt;h3&gt;Nitin Ranganath ã» Jan  5 ã» 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#paper-experiments" class="anchor"&gt;
  &lt;/a&gt;
  Paper experiments
&lt;/h3&gt;

&lt;p&gt;Ok, these are not &lt;em&gt;actual&lt;/em&gt; paper experiments by &lt;a class="comment-mentioned-user" href="https://dev.to/s_aitchison"&gt;@s_aitchison&lt;/a&gt;
 (this is DEV after all). But I think youâll find these  CSS effects to look pretty close to the real thing!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/s_aitchison" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoDdcmYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qrj_wG6s--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197075/58e853e9-29a9-4228-86e8-b5f7d203e9e1.jpg" alt="s_aitchison image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/s_aitchison/3-experiments-with-css-paper-effects-2o56" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;3 experiments with CSS paper effects&lt;/h2&gt;
      &lt;h3&gt;Suzanne Aitchison (she/her) ã» Jan  8 ã» 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#consistency-consistency-consistency-git-it" class="anchor"&gt;
  &lt;/a&gt;
  Consistency, consistency, consistency (git it?)
&lt;/h3&gt;

&lt;p&gt;This tutorial by &lt;a class="comment-mentioned-user" href="https://dev.to/timmybytes"&gt;@timmybytes&lt;/a&gt;
 will help your commit history look neat, navigable, and consistent. Who doesnât need more of that in their life?&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/timmybytes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWf_WZbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SiqH_69u--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/432562/87334fb8-21a1-49e5-888a-51b1e0fa01fc.png" alt="timmybytes image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/timmybytes/keeping-git-commit-messages-consistent-with-a-custom-template-1jkm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Keeping Git Commit Messages Consistent with a Custom Template&lt;/h2&gt;
      &lt;h3&gt;Timothy Merritt ã» Jan 10 ã» 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#git&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#github&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#a-model-view-controller-primer" class="anchor"&gt;
  &lt;/a&gt;
  A Model View Controller primer
&lt;/h3&gt;

&lt;p&gt;In this tutorial by &lt;a class="comment-mentioned-user" href="https://dev.to/eaetukudo"&gt;@eaetukudo&lt;/a&gt;
, we explore building endpoints using the MVC architecture. Interesting stuff!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/eaetukudo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72k6CwHq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9L9EGwJW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/335531/499c7927-e174-408e-8400-98185445eb5e.jpg" alt="eaetukudo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/eaetukudo/understanding-mvc-pattern-in-nodejs-2bdn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Understanding MVC pattern in Nodejs&lt;/h2&gt;
      &lt;h3&gt;Emmanuel Etukudo ã» Jan  6 ã» 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#taking-your-data-back" class="anchor"&gt;
  &lt;/a&gt;
  Taking your data back
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/kiraemclean"&gt;@kiraemclean&lt;/a&gt;
 vowed to get off Google entirely -- a lofty goal they achieved. If you thought this was impossible, think again.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kiraemclean" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFFX9knM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--PbinKRAE--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/543677/51abc13b-09f0-4f33-8a61-511847acc074.jpg" alt="kiraemclean image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiraemclean/what-i-use-now-instead-of-google-56lf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What I Use Now Instead Of Google&lt;/h2&gt;
      &lt;h3&gt;Kira McLean ã» Jan  6 ã» 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#degoogle&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ungoogle&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#privacy&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#dedicate-2-hours-every-day-no-matter-what" class="anchor"&gt;
  &lt;/a&gt;
  Dedicate 2 hours every day. No matter what.
&lt;/h3&gt;

&lt;p&gt;Great tips from &lt;a class="comment-mentioned-user" href="https://dev.to/oleksandrbezhan"&gt;@oleksandrbezhan&lt;/a&gt;
 on building a business when life seems to have infinite distractions.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/oleksandrbezhan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNjioAw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--pVdGyRnu--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/82062/3bd1c890-b717-4d64-8ca4-33cb04c96564.jpeg" alt="oleksandrbezhan image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/oleksandrbezhan/how-i-launched-a-5-figure-business-while-working-as-a-full-time-software-dev-and-how-you-can-do-the-same-290b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I launched a 5-figure business while working as a full-time software dev. And how you can do the same&lt;/h2&gt;
      &lt;h3&gt;Aleksandr Bezhan ã» Jan 10 ã» 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sideprojects&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#startup&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#financialfreedom&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programmer&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#what-is-jwt" class="anchor"&gt;
  &lt;/a&gt;
  What is JWT?
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/kmistele"&gt;@kmistele&lt;/a&gt;
 breaks it down wonderfully&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kmistele" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o5fY6yQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_XKCR9V--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/538761/6da6c30a-e7d2-4b31-9bcc-13fd7db0c6c1.png" alt="kmistele image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kmistele/demystifying-jwt-how-to-secure-your-next-web-app-9h0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Demystifying JWT: How to secure your next web app&lt;/h2&gt;
      &lt;h3&gt;Kyle Mistele ã» Jan  5 ã» 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cybersecurity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Productivity Life Hacks for Software Engineers (and All Knowledge Workers)</title>
      <author>Tyler Hawkins</author>
      <pubDate>Tue, 12 Jan 2021 18:23:46 +0000</pubDate>
      <link>https://dev.to/thawkin3/productivity-life-hacks-for-software-engineers-and-all-knowledge-workers-flm</link>
      <guid>https://dev.to/thawkin3/productivity-life-hacks-for-software-engineers-and-all-knowledge-workers-flm</guid>
      <description>&lt;p&gt;Everyone seems to be strapped for time these days and desperate to get more done in less time. I'm in the same boat.&lt;/p&gt;

&lt;p&gt;Enter "life hacks": simple tricks to make your life easier. Or, questionable bits of productivity advice from strangers on the internet with hit-or-miss results.&lt;/p&gt;

&lt;p&gt;As gimmicky as productivity life hacks can be, they really can help when the advice is grounded in science. Understanding the psychology of your mind at work allows you to tap into your hidden potential. The trick is not to work more â instead, it's to work more meaningfully.&lt;/p&gt;

&lt;p&gt;Below are five ideas to get more out of your work day. So grab your shovels, because it's time to dig in.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-work-less-but-in-deeply-focused-blocks-of-time" class="anchor"&gt;
  &lt;/a&gt;
  1. Work less, but in deeply focused blocks of time
&lt;/h2&gt;

&lt;p&gt;Study after study has confirmed this simple truth: If you want to get more done, &lt;a href="https://hbr.org/2015/08/the-research-is-clear-long-hours-backfire-for-people-and-for-companies"&gt;working longer hours is not the solution&lt;/a&gt;. Instead, we need to learn to work more deeply. Cal Newport highlights this concept in his aptly titled book, &lt;a href="https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692"&gt;Deep Work&lt;/a&gt;. In it, he argues that the ability to think deeply is becoming increasingly difficult to develop and also increasingly valuable.&lt;/p&gt;

&lt;p&gt;An example of deep work could be thinking through how to architect a new software feature. Contrast this with shallow work like checking email, which often does not require a lot of mental effort or concentration.&lt;/p&gt;

&lt;p&gt;When you are performing deep work, you enter a "flow" state, to use the term coined by Mihaly Csikszentmihalyi in his 1990 book, &lt;a href="https://www.amazon.com/Flow-Psychology-Experience-Perennial-Classics/dp/0061339202"&gt;Flow&lt;/a&gt;. When someone experiences flow, they will often report being entirely present. Their sense of time is altered. Concentration deepens. There is a perfect balance between their skill level and the difficulty of the current challenge. When we are experiencing flow, we are happy and we are productive.&lt;/p&gt;

&lt;p&gt;So, what are the obstacles stopping us from entering flow state every day? For starters, Newport states that you can only handle about one to four hours of deep concentration in a day before youâre drained. So we can't be experiencing flow all day. But we can &lt;em&gt;and should&lt;/em&gt; be able to experience flow often!&lt;/p&gt;

&lt;p&gt;Part of the problem lies in our work schedules. If you're like most knowledge workers, your day is riddled with meetings, many of which probably could have been an email. Meetings themselves aren't inherently bad, but when they're scheduled throughout the day leaving only 30-60 minute blocks of time in between, productivity plummets. It takes time to get into the zone, and 30 minutes simply isn't enough time to accomplish anything meaningful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4BJP7kh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ywx9rn0i3ok28x2ztw75.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4BJP7kh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ywx9rn0i3ok28x2ztw75.gif" alt="Dilbert comic on useless meetings"&gt;&lt;/a&gt;&lt;/p&gt;
Dilbert - Scott Adams



&lt;p&gt;Paul Graham's famous essay, &lt;a href="http://www.paulgraham.com/makersschedule.html"&gt;Maker's Schedule, Manager's Schedule&lt;/a&gt;, outlines the problem beautifully: Managers operate in one-hour blocks, but makers operate in half-day blocks. Meetings don't disrupt managers' schedules, but a meeting scheduled in the middle of a maker's day can blow their whole afternoon.&lt;/p&gt;

&lt;p&gt;The solution? Block off time in your schedule for deep work. This is your time to focus and to get work done. Treat it like an actual meeting, and don't let people schedule over it. When you do need to attend meetings, try to schedule them for the beginning or end of your day so as to not create interruptions. You might even consider creating "office hours" for when people can stop by to ask you for help.&lt;/p&gt;

&lt;p&gt;And if you initially struggle with working on only one thing for a given period of time, try a &lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro&lt;/a&gt; timer. The Pomodoro Technique helps you chunk work into intervals (typically 25 minutes long) followed by short breaks. Its purpose is to time-box your tasks while encouraging you to focus on only one thing at a time without distractions. You can be low-tech and use a physical kitchen timer for your sessions. Or, try one of the many free Pomodoro timer apps available online. &lt;a href="https://pomodoro-thawkin3.herokuapp.com/"&gt;Here's one I built&lt;/a&gt; and hosted on &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-take-care-of-your-body" class="anchor"&gt;
  &lt;/a&gt;
  2. Take care of your body
&lt;/h2&gt;

&lt;p&gt;This shouldn't come as a surprise to anyone, but if you want to be productive at work and have energy for your day, you need to take care of your body. &lt;em&gt;[I write, as I take another sip of my Mountain Dew...]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's all too easy to stay up late binge-watching your favorite TV show, then wake up and eat junk food throughout the day, all while sitting hunched over in your chair as you strain your eyes staring at your monitor. I struggle with many of these problems myself. So, let's look at some of the benefits of maintaining a healthy lifestyle when it comes to work productivity.&lt;/p&gt;

&lt;p&gt;Why do we need sleep, anyway? Why shouldn't you routinely stay up late into the night coding? After all, time spent sleeping is time &lt;em&gt;not&lt;/em&gt; spent getting work done. But, it turns out that &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3768102/"&gt;sleep is crucial in retaining what you learn&lt;/a&gt;. It's during slow-wave sleep (SWS) and rapid-eye-movement (REM) sleep that the information you've learned is consolidated and stored in long-term memory. We sleep in cycles, so a short amount of sleep or a restless night of sleep means less time spent in these phases. To that effect, it is counterproductive to consistently spend late nights working and studying without giving your brain adequate time to process and save all this new information. &lt;a href="https://www.hult.edu/blog/how-sleep-deprivation-affects-work-and-performance/"&gt;Lack of sleep&lt;/a&gt; can also lead to irritability, the inability to focus, and lower productivity, which hurts your work performance as well as your &lt;a href="https://www.heroku.com/podcasts/codeish/12-mindfulness-at-work"&gt;relationships with your coworkers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.heroku.com/podcasts/codeish/special-episode-active-for-good"&gt;Exercise&lt;/a&gt; is also important, not just for your body, but for your mind. &lt;a href="https://content-manager.devspotlight.com/draft/Exercise%20is%20shown%20to%20reduce%20stress,%20combat%20fatigue,%20improve%20performance%20and%20lead%20to%20fewer%20workday%20absences"&gt;Numerous studies&lt;/a&gt; show that exercise is linked to reduced stress, higher work performance, and increased creativity. Conversely, &lt;a href="https://pubmed.ncbi.nlm.nih.gov/25886270/"&gt;sitting for long periods of time&lt;/a&gt; is correlated with lower work output and poorer mental health. So next time you're feeling an afternoon slump, rather than reach for the caffeine, try taking a short walk.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-take-breaks" class="anchor"&gt;
  &lt;/a&gt;
  3. Take breaks
&lt;/h2&gt;

&lt;p&gt;Working non-stop or long hours doesn't actually make you more productive. In fact, breaks are an essential part of any knowledge worker's day. When you take a break from a difficult problem, your brain enters a &lt;a href="https://fs.blog/2019/10/focused-diffuse-thinking/"&gt;diffuse mode of thinking&lt;/a&gt; during which it solves problems in the background. This is why it's so common to have a sudden stroke of insight after a game of ping-pong with a colleague or while showering in the morning. So if you're feeling stuck on a problem, try standing up and walking around for five minutes before coming back to your desk. You may be surprised to find new ideas flowing through your mind to help get you moving in the right direction.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1kmTfF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/67t93okjssi1xpwigybv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1kmTfF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/67t93okjssi1xpwigybv.jpg" alt="Hey are you sleeping - comic"&gt;&lt;/a&gt;&lt;/p&gt;
Reddit r/ProgrammerHumor post



&lt;p&gt;Breaks also allow you to casually interact with your co-workers. Google and other like-minded companies have intentionally designed their offices to facilitate these kinds of encounters by placing &lt;a href="https://99u.adobe.com/articles/16408/how-to-build-a-collaborative-office-space-like-pixar-and-google"&gt;micro-kitchens&lt;/a&gt; filled with snacks throughout their offices. Each micro-kitchen contains different treats, which means that you may need to visit a different floor to find your favorite items. This leads engineers to bump into sales reps, or marketing heads to run into customer support technicians. These chance encounters with people outside your normal bubble can lead to fascinating breakthroughs and creative ideas.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-remove-distractions-from-your-environment" class="anchor"&gt;
  &lt;/a&gt;
  4. Remove distractions from your environment
&lt;/h2&gt;

&lt;p&gt;Have you ever tried to focus on a difficult task in a loud environment filled with distractions? Imagine trying to solve a bug in the middle of a rock concert. Not an ideal work environment, right? And yet, we can often unintentionally create workplace environments for ourselves that are filled with distractions. Do you have email notifications turned on? How about Slack notifications? Does your phone or smartwatch ding or buzz every time you get a text? How many tabs are currently open in your browser? Is your desk cluttered with papers? All of these things create small interruptions that can derail your productivity.&lt;/p&gt;

&lt;p&gt;In Adam Alter's book &lt;a href="https://www.amazon.com/Irresistible-Addictive-Technology-Business-Keeping/dp/1594206643"&gt;Irresistible&lt;/a&gt;, he notes that "by one estimate, it takes up to twenty-five minutes to become re-immersed in an interrupted task. If you open just twenty-five emails a day, evenly spaced across the day, you'll spend literally no time in the zone of maximum productivity. The solution is to disable new email notifications and to check your email account infrequently" (&lt;em&gt;Irresistible&lt;/em&gt;, pages 109-110).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLGVinAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/59hi7fuu4il40jsgjx0r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLGVinAZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/59hi7fuu4il40jsgjx0r.png" alt="Dilbert comic on interruptions at work"&gt;&lt;/a&gt;&lt;/p&gt;
Dilbert - Scott Adams



&lt;p&gt;This highlights an incredibly important point: There is a cost to each interruption, and it's much greater than the time the interruption itself takes. A quick 30-second interruption can cause you to lose your train of thought, setting you several minutes back. So consider temporarily disabling Slack messages while you're in the zone or silencing your phone during your most productive hours. These simple practices will allow you to maintain your flow state for much longer periods of time.&lt;/p&gt;

&lt;p&gt;And if your coworkers can't take a hint that when your headphones are on you're trying to focus, feel free to send them this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3mETCpHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/336isvkzm4gkvjxxqd64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3mETCpHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/336isvkzm4gkvjxxqd64.png" alt="Jason Heeris comic on interruptions"&gt;&lt;/a&gt;&lt;/p&gt;
Why you shouldn't interrupt a programmer






&lt;h2&gt;
  &lt;a href="#5-take-time-to-sharpen-the-saw" class="anchor"&gt;
  &lt;/a&gt;
  5. Take time to âsharpen the sawâ
&lt;/h2&gt;

&lt;p&gt;Finally, take time to "sharpen the saw." This term, coined by Stephen R. Covey, is the last habit in his book &lt;a href="https://www.franklincovey.com/the-7-habits/"&gt;The 7 Habits of Highly Effective People&lt;/a&gt;. To quote Dr. Covey: "We must never become too busy sawing to take time to sharpen the saw."&lt;/p&gt;

&lt;p&gt;It's easy to fall into the trap of only completing task work during work hours. After all, you're on the clock, and your employer is paying you to be there, so you should be "working," right? However, that type of thinking is short-sighted. It's like trying to cut down a large tree with a saw for hours while never taking time to &lt;a href="https://www.heroku.com/podcasts/codeish/39-evolving-alongside-your-tech-stack"&gt;sharpen the saw&lt;/a&gt;. The time you spend sharpening the saw is time &lt;em&gt;not&lt;/em&gt; spent cutting down the tree. But with a sharper saw, the more effective your cuts will be. You'll actually be able to cut the tree down in less time than it would have taken to cut the tree down had you not stopped to sharpen the saw. This life hack applies to lumberjacks and programmers alike!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--irBxK-E9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kf7ap3kh86g41nue2dqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--irBxK-E9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kf7ap3kh86g41nue2dqv.png" alt="No thanks, we're too busy"&gt;&lt;/a&gt;&lt;/p&gt;
The danger of choosing not to take time for learning



&lt;p&gt;&lt;a href="https://www.instructure.com/bridge/taxonomy/term/56?newhome=bridge&amp;amp;page=2"&gt;Good employers recognize this truth&lt;/a&gt;, and they actively encourage employees to spend a few hours each week doing some intentional learning. Don't feel guilty about taking time to read an article or watch a video tutorial during work hours. When you do these things as part of your deliberate skill-sharpening practice, you'll become a far more effective engineer than you would be if you solely focused on task work 100% of the time.&lt;/p&gt;

&lt;p&gt;So if you feel like you struggle with writing unit tests, go watch a &lt;a href="https://www.pluralsight.com/"&gt;Pluralsight&lt;/a&gt; course for two hours on unit testing with &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; (or whatever testing framework is relevant to your programming language).&lt;/p&gt;

&lt;p&gt;If you are trying to learn &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, go read the docs â the &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React docs&lt;/a&gt; are actually really good!&lt;/p&gt;

&lt;p&gt;Don't just slog through things. Be deliberate in what you are trying to learn.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Being more productive isn't about working more â it's about maximizing your results in the time you do have. So if you find your work productivity is lower than you'd like it to be, give these life hacks a shot â after only a few weeks, you may be impressed by how much more productive you've become. And remember, as the old adage goes: work smarter, not harder.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>career</category>
      <category>heroku</category>
    </item>
    <item>
      <title>Concepts you should know to be a master of JavaScript</title>
      <author>Mihai Stanciu</author>
      <pubDate>Tue, 12 Jan 2021 18:17:30 +0000</pubDate>
      <link>https://dev.to/mstanciu552/concepts-you-should-know-to-be-a-master-of-javascript-2nn8</link>
      <guid>https://dev.to/mstanciu552/concepts-you-should-know-to-be-a-master-of-javascript-2nn8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#mlh-majorleaguehacking-localhackday" class="anchor"&gt;
  &lt;/a&gt;
  MLH #MajorLeagueHacking #LocalHackDay
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-javascript" class="anchor"&gt;
  &lt;/a&gt;
  How to use JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is an amazing programming language. It is most popular as the browser's programming language, but that does not mean that's all it is good for. It is used for much more...backend development, desktop development, machine learning, and many more. &lt;br&gt;
For anything not in the browser, one way to compile and run JavaScript is &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#with-the-browser" class="anchor"&gt;
  &lt;/a&gt;
  With the browser
&lt;/h3&gt;

&lt;p&gt;In the browser, you can just add a file with the &lt;code&gt;.js&lt;/code&gt; extension to your HTML using the &lt;code&gt;script&lt;/code&gt; tag like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Page Title&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"path/to/file.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Everything in the JavaScript file will be executed in the browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  With Node.js
&lt;/h3&gt;

&lt;p&gt;In order to run a JavaScript file on your machine all you need to do is use the console like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// script.js&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node script.js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-you-need-to-know-to-master-javascript" class="anchor"&gt;
  &lt;/a&gt;
  What you need to know to master JavaScript
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#data-structures" class="anchor"&gt;
  &lt;/a&gt;
  Data Structures
&lt;/h3&gt;

&lt;p&gt;The concept of Data Structures is not specific to JavaScript. But there are some interesting features in JS for them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#arrays" class="anchor"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h4&gt;

&lt;p&gt;In JavaScript, arrays have special functions attached to them, called &lt;em&gt;Array Methods&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The examples will use the following array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;1.the &lt;code&gt;forEach&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will return the sum of all elements in the array, without creating a new array.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;value&lt;/em&gt; parameter has a specific element of the specified array.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;index&lt;/em&gt; parameter is optional and returns the current index.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.the &lt;code&gt;map&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This does the same thing as the &lt;code&gt;forEach&lt;/code&gt; function, but it generates a new array to work on.&lt;/p&gt;

&lt;p&gt;3.the &lt;code&gt;filter&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This function creates a new array with element that pass the test from the function passed as parameter.&lt;/p&gt;

&lt;p&gt;4.the &lt;code&gt;reduce&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This function will reduce the array to a single number. In this case it will reduce it to the sum of all elements within it.&lt;/p&gt;

&lt;p&gt;The parameters are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;total&lt;/code&gt; - initial value / previously returned value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt; - the current value&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#objects" class="anchor"&gt;
  &lt;/a&gt;
  Objects
&lt;/h4&gt;

&lt;p&gt;In JavaScript, objects are a collection of other elements of the language. I say &lt;em&gt;other elements&lt;/em&gt;, because it can also contain functions and other objects.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;elem1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//a string&lt;/span&gt;
  &lt;span class="na"&gt;elem2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="c1"&gt;//an integer&lt;/span&gt;
  &lt;span class="na"&gt;elem3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="c1"&gt;// a function&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;elem4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       &lt;span class="c1"&gt;// an object&lt;/span&gt;
    &lt;span class="na"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#how-to-access-elements-of-an-object" class="anchor"&gt;
  &lt;/a&gt;
  How to access elements of an object
&lt;/h5&gt;

&lt;p&gt;You can access an element from an object using the &lt;code&gt;.&lt;/code&gt; notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elem1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;//return "text"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elem2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;//return 2&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elem3&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;   &lt;span class="c1"&gt;//return 5(2+3);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elem4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//return "text2"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions" class="anchor"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;In JavaScript there are 3 ways to declare functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Named function
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Anonymous function
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Arrow functions
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//code here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#there-are-different-ways-of-using-functions" class="anchor"&gt;
  &lt;/a&gt;
  There are different ways of using functions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Normal
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;IIFE (Instantly Invoked Function Expression)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//code here&lt;/span&gt;
&lt;span class="p"&gt;}();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: As you can see the function is called &lt;em&gt;instantly&lt;/em&gt; after it is declared. We can tell by the parenthesis &lt;code&gt;()&lt;/code&gt; at the end of the function declaration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#returning-a-function" class="anchor"&gt;
  &lt;/a&gt;
  Returning a function
&lt;/h3&gt;

&lt;p&gt;A function can return another function, with the returned function being called a &lt;strong&gt;Closure&lt;/strong&gt;. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parentFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returnedFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//code here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;parentFunction&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;returnedFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;**Note: **This concept helps with encapsulation(technique for compartmentalizing information).&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parentFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_privateFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text to be returned&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returnedFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_privateFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;parentFunction&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;returnedFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;//"text to be returned"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#promises" class="anchor"&gt;
  &lt;/a&gt;
  Promises
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Producing code&lt;/strong&gt; is code that can take some time. &lt;strong&gt;Consuming code&lt;/strong&gt; is code that must wait for the result. A &lt;strong&gt;Promise&lt;/strong&gt; is a JavaScript object that links producing code and consuming code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myPromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;//when successful&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;   &lt;span class="c1"&gt;//when an error occurs&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;myPromise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//when the call is successful&lt;/span&gt;
    &lt;span class="c1"&gt;//we have access to the result via the res parameter&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//when an error occurs&lt;/span&gt;
    &lt;span class="c1"&gt;// we have access to the error via the err parameter&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#asyncawait" class="anchor"&gt;
  &lt;/a&gt;
  Async/await
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;the 'async' keyword
When &lt;code&gt;async&lt;/code&gt; is in front of the function declaration, the function will return a &lt;em&gt;Promise&lt;/em&gt;. So:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;is equivalent with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;await&lt;/code&gt; keyword
The &lt;code&gt;await&lt;/code&gt; keyword before a function makes the function wait for a promise.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;**Note: **The &lt;code&gt;await&lt;/code&gt; keyword can only be used inside an &lt;code&gt;async&lt;/code&gt;. function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-api-requests" class="anchor"&gt;
  &lt;/a&gt;
  Web API requests
&lt;/h3&gt;

&lt;p&gt;Making requests to APIs is an essential part of JavaScript. Every developer is required to know this. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a front-end dev is required to know in order to access APIs to make the project more interactive(sending emails, saving in databases, etc.)&lt;/li&gt;
&lt;li&gt;a back-end dev needs to know this to be able to access existing services(Spotify API, Discord API, Twilio API, etc.), instead of coding the from 0(not reinventing the wheel)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are 2 great ways to make API calls: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with the &lt;code&gt;fetch&lt;/code&gt; function (included in the basic JavaScript installation) - no need to install anything
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET/POST/PUT/DELETE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;//optional&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;  &lt;span class="c1"&gt;//optional&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;    &lt;span class="c1"&gt;//optional&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url/of/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this returns a promise so we could and should use the await keyword&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// returns a JSON object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET/POST/PUT/DELETE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;//optional&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;  &lt;span class="c1"&gt;//optional&lt;/span&gt;
  &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;    &lt;span class="c1"&gt;//optional&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url/of/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//returns a JSON object&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//code for error here&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;with the &lt;code&gt;axios&lt;/code&gt; function - &lt;em&gt;axios&lt;/em&gt; function needs to be installed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;**Note: **You have to import the &lt;code&gt;axios&lt;/code&gt; library like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;//optional&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;  &lt;span class="c1"&gt;//optional&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="sr"&gt;/put/&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url/to/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// can access a JSON object&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;//optional&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;  &lt;span class="c1"&gt;//optional&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET/POST/PUT/DELETE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url/to/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// can access a JSON object&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-helps-in-mastering-anything-code-related" class="anchor"&gt;
  &lt;/a&gt;
  What helps in mastering anything code related
&lt;/h2&gt;

&lt;p&gt;This next section is &lt;em&gt;important&lt;/em&gt;, however it does not have any &lt;em&gt;technical explanations&lt;/em&gt;. These are some tips on how to &lt;em&gt;grow as a developer&lt;/em&gt; and what helps when you are looking to get hired. If you're not interested you can skip this part.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Join a community&lt;br&gt;
Communities of developers can help you meet new people interested in the same topics. It's not only fun but also leads to learning from other developer's experience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contribute to Open Source&lt;br&gt;
Join GitHub. Find something interesting. Add value to that project. For more information, I recommend &lt;a href="https://www.youtube.com/user/eddiejaoude"&gt;Eddie Jaoude's Youtube channel&lt;/a&gt;. He has amazing content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Participate in hackathons&lt;br&gt;
Currently I am taking part in MLH's Local Hack Day: Build, and the challenges are great. They propose topics such as &lt;em&gt;Combine Two APIs&lt;/em&gt;, &lt;em&gt;Use a Music API&lt;/em&gt; or &lt;em&gt;Use the Twilio API&lt;/em&gt;, and many other interesting problems you can solve alone or with your guildmates. It is an amazing experience and I recommend it to anyone serious about development and coding. #MLH #MajorLeagueHacking #LocalHackDay&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>majorleaguehacking</category>
      <category>localhackday</category>
      <category>mlh</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Bulma CSS - Open-Source LIVE Editor</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 12 Jan 2021 18:14:27 +0000</pubDate>
      <link>https://dev.to/sm0ke/bulma-css-open-source-live-editor-b9m</link>
      <guid>https://dev.to/sm0ke/bulma-css-open-source-live-editor-b9m</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;This article presents an open-source tool for Bulma CSS, a popular framework based on Flexbox. The product allows to edit and download components crafted on top of this popular framework. The core project can be downloaded from Github and used locally for unlimited hobby &amp;amp; commercial projects.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! TL;DR;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://components.bulma-css.com/"&gt;Bulma CSS Editor&lt;/a&gt; - the LIVE deployment&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/bulma-css"&gt;Bulma CSS Editor Sources&lt;/a&gt; - published on Github&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wpeSchK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/bulma-css/bulma-live-editor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wpeSchK_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/bulma-css/bulma-live-editor.gif" alt="Bulma CSS - LIVE Editor, animated presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Using the product is fairly simple. We can access the LIVE deployment, edit the existing components and download the code or clone the project from the public repository and compile from sources.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Sections and elements&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;Elements: &lt;a href="https://components.bulma-css.com/components/buttons.html"&gt;Buttons&lt;/a&gt;, &lt;a href="https://components.bulma-css.com/components/badges.html"&gt;Badges&lt;/a&gt;, &lt;a href="https://components.bulma-css.com/components/avatar.html"&gt;Avatars&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Sections: &lt;a href="https://components.bulma-css.com/components/cta.html"&gt;CTAs&lt;/a&gt;, &lt;a href="https://components.bulma-css.com/components/team.html"&gt;Teams&lt;/a&gt;, &lt;a href="https://components.bulma-css.com/components/feature.html"&gt;Features&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://components.bulma-css.com/components/pricing.html"&gt;Widgets&lt;/a&gt;, &lt;a href="https://components.bulma-css.com/components/avatar.html"&gt;Avatars&lt;/a&gt;, &lt;a href="https://components.bulma-css.com/components/form.html"&gt;Layouts&lt;/a&gt;, &lt;a href="https://components.bulma-css.com/components/shopping.html"&gt;Pricing cards&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;For each element, we can toggle the &lt;strong&gt;dark-mode&lt;/strong&gt; and all changes are reflected instantly in the viewer. Samples:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bulma CSS&lt;/strong&gt; - Pricing Card&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CNJKZEjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/bulma-css/bulma-live-editor-component-card.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CNJKZEjS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/bulma-css/bulma-live-editor-component-card.png" alt="Bulma Css - Pricing card component."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bulma CSS&lt;/strong&gt; - Login Box&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wazErKMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/bulma-css/bulma-live-editor-component-login.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wazErKMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/bulma-css/bulma-live-editor-component-login.png" alt="Bulma CSS - Login Box Component."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bulma CSS&lt;/strong&gt; - eCommerce widget&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0b7JfUZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/bulma-css/bulma-live-editor-component-ecommerce.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0b7JfUZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/static/master/bulma-css/bulma-live-editor-component-ecommerce.gif" alt="Bulma CSS - eCommerce product card, animated presentation."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Being a young project, the feedback/suggestions and contributions are welcomed - More resources:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bulma.io/"&gt;Bulma CSS&lt;/a&gt; - official website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/apps/bulma-css"&gt;Bulma CSS starters&lt;/a&gt; - provided by AppSeed&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Btw, my (nick) name is &lt;strong&gt;Sm0ke&lt;/strong&gt; and I'm pretty active also on &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>bulma</category>
      <category>webdev</category>
      <category>tools</category>
    </item>
    <item>
      <title>Create a chat in the command line with Ruby</title>
      <author>Aurelie Verrot</author>
      <pubDate>Tue, 12 Jan 2021 17:08:47 +0000</pubDate>
      <link>https://dev.to/aurelieverrot/create-a-chat-in-the-command-line-with-ruby-2po9</link>
      <guid>https://dev.to/aurelieverrot/create-a-chat-in-the-command-line-with-ruby-2po9</guid>
      <description>&lt;p&gt;Last weekend I learned how to create a chat application in the command line. The idea was to open at least 3 tabs in the terminal: one for the server that will handle the connexion between the users, and X number of tabs for the users to communicate, at least 2.&lt;/p&gt;

&lt;p&gt;This project made me discover two built-in classes in Ruby that we don't really use when we do a full stack application with Rails:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Socket&lt;/li&gt;
&lt;li&gt;Thread&lt;/li&gt;
&lt;li&gt;ARGV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will talk about them later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-about-the-server" class="anchor"&gt;
  &lt;/a&gt;
  Let's talk about the server
&lt;/h2&gt;

&lt;p&gt;So what do we need exactly to create this chat? We talked about a server, so we will need a file for this that will be called server.rb&lt;br&gt;
What do we need to do here? We need to establish the connexion through the port of our choice. For this we will need the class Socket, and we have to require it at the beginning of the file.&lt;br&gt;
To understand what this method offers, make sure to understand what a socket is. Here is a definition provided by Oracle docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"A socket is one endpoint of a two-way communication link between two programs running on the network. A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Requiring Socket will give us access to other classes and methods to create our server (&lt;a href="https://ruby-doc.org/stdlib-2.7.0/libdoc/socket/rdoc/Socket.html"&gt;see the Ruby documentation for Socket&lt;/a&gt;).&lt;br&gt;
Our first line of command will be to create a TCP server on the port we want, and to make sure it's launched I will print a confirmation text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'socket'&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt; &lt;span class="c1"&gt;# Server bound to port 2000&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"I'm ready to accept new clients on port 2000"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our server is working, now we need it to listen to whatever connexion is coming up from a client, and we need to do it constantly. So we need to create a loop. We also want the server to handle multiple clients, and give information to users. So we will create an array to store them, and append every new client to the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# we wait for a client to connect, and assign it to client&lt;/span&gt;
  &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;accept&lt;/span&gt;
  &lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It is now time to introduce Thread. We use a thread to split a program and have a tasks that will run simultaneously (or pseudo-simultaneously). Creating a thread will allow our program to run two processes in the same time (&lt;a href="https://ruby-doc.org/core-2.7.0/Thread.html"&gt;see documentation for Thread&lt;/a&gt;)&lt;br&gt;
We need it because while the server is waiting for a client to connect in the loop, we also need to constantly handle the messaging between the clients already connected. &lt;br&gt;
We do that by writing &lt;code&gt;Thread.new {}&lt;/code&gt;. The block will be used to tell the program what to do with this thread. &lt;br&gt;
So what do we need from it? We need to know who connects to it, to receive and display text to others. We also need to detect when a client disconnect and remove it from the &lt;code&gt;clients&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;It's a lot, so let's create a method for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# for this method I need the new client, and the list of existing clients.&lt;/span&gt;

  &lt;span class="c1"&gt;# client_name will take whatever name the client put when it will connect to the server. We will see later how it's sent from the client perspective.&lt;/span&gt;
  &lt;span class="n"&gt;client_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

  &lt;span class="c1"&gt;# here we will display a welcome message and show how many clients are already connected&lt;/span&gt;
  &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;! Clients connected: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="c1"&gt;# this method is described below. It announces to all clients who is the new client.&lt;/span&gt;
  &lt;span class="n"&gt;announce_to_everyone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; joined!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# this is another loop. gets will take any text coming from the client...&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;
    &lt;span class="n"&gt;incoming_data_from_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;
    &lt;span class="c1"&gt;#... and this text will be shared to all the clients. A little bit of formatting to indicate who said what.&lt;/span&gt;
    &lt;span class="n"&gt;announce_to_everyone&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;incoming_data_from_client&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# it will close the client connexion and remove it from the clients array. And other clients will receive a notification.&lt;/span&gt;
  &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
  &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;announce_to_everyone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;client_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; left!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# this method takes the text sent by a client, and the clients connected. For each client from clients, the text will be displayed&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;announce_to_everyone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are done with &lt;code&gt;server.rb&lt;/code&gt;. The server is running, and waiting to get clients connexions. It will receive messages and display them to all connected clients, and give them cool info for a better user experience (well, from the terminal... for what it's worth).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-talk-about-the-client" class="anchor"&gt;
  &lt;/a&gt;
  Let's talk about the client
&lt;/h2&gt;

&lt;p&gt;The idea here is to open let say 3 terminal tabs to simulate 3 clients / users, we will launch the client's program from each tab.&lt;br&gt;
For that we need to create a file that we will call &lt;code&gt;client.rb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First we need to make sure our client will create a connexion on the server. Previously, on server side, we used &lt;code&gt;TCPServer.new&lt;/code&gt;. This time, we will create an instance of &lt;code&gt;TCPSocket&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'socket'&lt;/span&gt;
&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;TCPSocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="s1"&gt;'localhost'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;  
&lt;span class="c1"&gt;# bound to port 2000, like the server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we connect to the chat, we want a way to enter the user name. There is a simple way to do that. &lt;br&gt;
From the terminal, we can write &lt;code&gt;$ruby client.rb Aurelie&lt;/code&gt;, where &lt;code&gt;Aurelie&lt;/code&gt; is an argument passed to the script.&lt;br&gt;
In our file, first thing to do is to grab this argument and assign it to a variable. For that we need to use the ARGV built-in class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;shift&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;ARGV takes all the arguments you pass to a script, and put them into an array in order of apparition. And #shift will use the first one of the array.&lt;/p&gt;

&lt;p&gt;Do you remember how we assigned the client's name in &lt;code&gt;server.rb&lt;/code&gt; above? &lt;br&gt;
Here we will use &lt;code&gt;name&lt;/code&gt;, and do a &lt;code&gt;puts&lt;/code&gt; applied to the socket. The first connexion to the server through the socket will be to send the name to the server, and that's how the server will pick-up &lt;code&gt;name&lt;/code&gt; with its &lt;code&gt;gets&lt;/code&gt; and assign it to &lt;code&gt;client_name&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we need a way to take what the user types in the client and send it to the server, but we also need to keep receiving whatever messages other clients send to us. Two processes at a time, it's time to use Thread again!&lt;/p&gt;

&lt;p&gt;We will create one thread for the local typing, and one for what the client receives from the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;local_typing_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;local_typing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;receive_from_server_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;receive_from_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Two things here, we assign each thread to a variable for a later use, and we pass in each thread a method to handle our processes.&lt;/p&gt;

&lt;p&gt;Let's talk about the &lt;code&gt;local_typing&lt;/code&gt; method.&lt;br&gt;
This method needs to know which socket to use to give information to the server. It also needs to constantly check for what to send, so we need a loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_typing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# when a user sends a message, this message will appear in the user client preceded by a little string that shows it's the user's message. For example: (me)&amp;gt; Hey it's me!&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"(me)&amp;gt; "&lt;/span&gt;
    &lt;span class="n"&gt;text_to_send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;text_to_send&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we need to tackle the &lt;code&gt;receive_from_server&lt;/code&gt; method.&lt;br&gt;
Again, it needs to know about the socket. And again, we want it to constantly capture all the messages sent to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;receive_from_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# read the lines coming from the socket, and write them in the terminal&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gets&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, since we created two separate threads, we need to make them join, and we need to close the socket when we are done&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;local_typing_thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
&lt;span class="n"&gt;receive_from_server_thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;

&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Tadaa! We created a little chat in the terminal, on localhost.&lt;br&gt;
See what it looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3zL02rui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jjhm48b7otnpdbdx77zu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zL02rui--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jjhm48b7otnpdbdx77zu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the files in my repo &lt;a href="https://github.com/aurelieverrot/ruby-chat"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The React Roadmap ð 10 Steps to Become a React Developer in 2021</title>
      <author>Reed Barger</author>
      <pubDate>Tue, 12 Jan 2021 16:20:09 +0000</pubDate>
      <link>https://dev.to/reedbarger/the-react-roadmap-10-steps-to-become-a-react-developer-in-2021-2945</link>
      <guid>https://dev.to/reedbarger/the-react-roadmap-10-steps-to-become-a-react-developer-in-2021-2945</guid>
      <description>&lt;p&gt;Learning how to become a confident React developer takes hard work, but not knowing the right way to become one can make it much harder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learning React doesn't have to be a chore.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's break down the 10 steps that will make your time and effort becoming a React developer easier and more fun. All while delivering consistent, career-changing results along the way.&lt;/p&gt;

&lt;p&gt;If you want to watch this article as an interactive video (along with some extra bonuses), be sure to check out the &lt;a href="https://bit.ly/react-bootcamp-email-course"&gt;&lt;strong&gt;3-day React email course&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-commit-to-45-hours-of-coding-per-weekday" class="anchor"&gt;
  &lt;/a&gt;
  Step 1. Commit to 4-5 hours of coding per weekday
&lt;/h2&gt;

&lt;p&gt;The most important factor in deciding how soon you will be able to learn React is time and how you use it.&lt;/p&gt;

&lt;p&gt;You need to keep a regular schedule of coding throughout the week. Without this, it will be almost impossible to reach your goals in coding on time. The truth is most people will never excel at React because they cannot to dedicate enough time and focus to coding.&lt;/p&gt;

&lt;p&gt;If you plan on coding every day from nine to five once youâre on the job you need to have a similar schedule for yourself while learning. Ideally, you should spend around four to five hours of focused coding every weekday. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why exactly four to five hours?&lt;/em&gt; I'll cover that in step 3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-spend-your-time-doing-focused-coding" class="anchor"&gt;
  &lt;/a&gt;
  Step 2. Spend your time doing focused coding
&lt;/h2&gt;

&lt;p&gt;What do I mean by focused coding? Focused coding is coding without distraction. In a separate quiet space, where you can sit upright at your computer, and focus entirely on the process of coding.&lt;/p&gt;

&lt;p&gt;During this time, much of what youâre doing will not be 100% coding. As you code, youâll be reading documentation, reading an article, taking notes, et cetera.&lt;/p&gt;

&lt;p&gt;If youâre focused on your work, four to five hours should be all that you need. The idea of coding 12 hours a day is not realistic, especially if you are getting started. If you can spend more time and you do feel focused, go ahead. But itâs very hard to code and consume new information while youâre already tired.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-use-the-pomodoro-technique-for-optimal-time-management" class="anchor"&gt;
  &lt;/a&gt;
  Step 3. Use the Pomodoro technique for optimal time management
&lt;/h2&gt;

&lt;p&gt;There is a special technique that will help you make the most out of that four to five hours. Itâs called the &lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro technique&lt;/a&gt;. Itâs an approach thatâs made for optimal productivity and it consists of working in 25 minute periods at a time.&lt;/p&gt;

&lt;p&gt;You start your timer and after each period or &lt;em&gt;pomodoro&lt;/em&gt;, you take a five minute break. During this break, get up from your chair. Have something to drink. Adjust your focus away from your computer or your phone. In short, take a real mental &lt;em&gt;and&lt;/em&gt; physical break from what youâre doing.&lt;/p&gt;

&lt;p&gt;Taking breaks with purpose and giving your brain and body a rest will help you make the most of your time. Instead of trying to work for hours on end. And after every fourth 25 minute period or pomodoro, you take a longer 15 minute break.&lt;/p&gt;

&lt;p&gt;If you do 8-10 pomodoros of solid work, you will have a very productive day, guaranteed. I use this technique every day I code and it is the best technique to ensure consistent results day-in and day-out. Consistent results are the only thing that is going to make the difference between learning React in months versus a year or more.&lt;/p&gt;

&lt;p&gt;There are many free pomodoro timers that you can find online. Iâll link to a couple of them below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://apps.apple.com/us/app/be-focused-focus-timer/id973130201"&gt;Be Focused - Pomodoro Timer for Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pomofocus.io/"&gt;Online Pomodoro Timer - Pomofocus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-4-read-through-reactjsorg-from-front-to-back" class="anchor"&gt;
  &lt;/a&gt;
  Step 4. Read through ReactJS.org from front to back
&lt;/h2&gt;

&lt;p&gt;Weâve talked how to work and the amount of time to spend working, but how do you approach learning the skills needed to be a React developer? &lt;/p&gt;

&lt;p&gt;Many developers would recommend diving right into whatever you can find. To look through various websites, articles, YouTube videos, and ebooks. In fact, thereâs one best place to go to first of all to start working with and learning React. And that is &lt;a href="https://reactjs.org"&gt;reactjs.org&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Go through their documentation from front to back. Itâs the best guide that you will find online and every working React developer relies upon it. Itâs guaranteed to be up to date, will get you familiar with the concepts you need, and best of all, give you a lot of examples to work with. As you read through the site, take the code examples they provide and run them yourself.&lt;/p&gt;

&lt;p&gt;How do you run the React code you find? Instead of trying to create a React application on your own computer, create a React app in the browser. To create a new react app in two seconds, go to &lt;a href="https://react.new"&gt;react.new&lt;/a&gt;. It will create a brand new React app in your browser that you can start working with. Then start experimenting with examples from the React.js documentation. On your own, type in the code from the guides, run it and see what works and what doesnât.&lt;/p&gt;

&lt;p&gt;Instead of reading a book and being told what code does, run the code yourself. See what happens when you try different things. To test the boundaries of React and what it can do is the best thing possible to understand how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-start-small-build-small-apps-and-learn-to-add-features-as-you-go" class="anchor"&gt;
  &lt;/a&gt;
  Step 5. Start small. Build small apps and learn to add features as you go
&lt;/h2&gt;

&lt;p&gt;Once you have gone through the documentation at reactjs.org, start building small things. Try to build a todo application from scratch. If not a todo application, a basic &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt; application, a note-taking application, etc. Make a complete app, that consists of simple, clearly divisible parts.&lt;/p&gt;

&lt;p&gt;As you build your project, you'll encounter the questions all React developers ask themselves throughout their app planning: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;How do I go about making this app? Are there any extra packages do I need besides React?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What basic features do I need to build out?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What components will I need and how are they organized?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Where will my app data live?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/join"&gt;Sign up for a Github account&lt;/a&gt; if you donât have one already. Not only to save your React projects to your Github for easy access, but it will allow you to search for how other people built similar apps themselves. &lt;/p&gt;

&lt;p&gt;Once you have something small youâve built, add more features. If youâre making a todo app, you might ask:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;How can I search through todos?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How can I save my todos between visits?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How do I add authentication to my todo app (to make it for only authenticated users)?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How do I add different pages to my app?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How do I style it with a component library like Material UI?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add new features based around what you want to learn. The possibilities are endless and will drive your learning forward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-asking-questions-is-essential-always-ask-questions" class="anchor"&gt;
  &lt;/a&gt;
  Step 6. Asking questions is essential. Always ask questions.
&lt;/h2&gt;

&lt;p&gt;Be aware that itâs fine to search the web when you have a question or when you're stuck in your coding. Itâs what all React developers do by searching sites like &lt;a href="https://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt; or Github. &lt;em&gt;Asking your own questions is essential.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Make sure to keep track the questions you ask. Whenever I have a problem with a React project that I need to solve, I write it down and search for the answer. When I find the solution to it, I make sure to record the answer and bookmark it in my browser for future reference. &lt;/p&gt;

&lt;p&gt;To record your questions and the answers you find for them is essential. If you have a problem once, &lt;em&gt;I can almost guarantee&lt;/em&gt; that you will run into the same problem sometime in the future. Recording your questions and answers will not only serve as a great resource, but also save you large amounts of time and frustration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-actively-coding-is-your-key-to-success" class="anchor"&gt;
  &lt;/a&gt;
  Step 7. Actively coding is your key to success
&lt;/h2&gt;

&lt;p&gt;This approach weâve been talking about is very different than reading a book or article. &lt;/p&gt;

&lt;p&gt;Reading or consuming information alone is called &lt;strong&gt;passive learning&lt;/strong&gt; and is much slower. Actively coding yourself is &lt;strong&gt;active learning&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Active learning is what will drive you to code more, ask questions, fail more often in the short term, but succeed and grow faster in the long term.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-8-build-apps-similar-the-ones-you-use-daily-and-know-well" class="anchor"&gt;
  &lt;/a&gt;
  Step 8. Build apps similar the ones you use daily (and know well)
&lt;/h2&gt;

&lt;p&gt;After building your todo app, ask yourself can I make a small version of Twitter? Can I build a small version of Facebook or some other social network? Can I build a small version of Instagram? &lt;/p&gt;

&lt;p&gt;Try to build something more other apps that you use and are familiar with. Youâll be able to see that as time goes on, these applications all share similar features. Being able to see common features among apps and develop them yourself is what will take you from an average to an impressive, self-directed developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-9-deploy-your-best-work-and-put-it-on-your-resume-for-employers" class="anchor"&gt;
  &lt;/a&gt;
  Step 9. Deploy your best work and put it on your resume for employers
&lt;/h2&gt;

&lt;p&gt;And finally, after building larger and larger applications, make sure to put all these projects on your resume. To do that, youâll need to deploy them to the web first. &lt;/p&gt;

&lt;p&gt;Deploying React apps is very simple. You need only learn how to use basic hosting services like &lt;a href="https://www.freecodecamp.org/news/how-to-deploy-a-react-application-to-netlify-363b8a98a985/"&gt;Netlify&lt;/a&gt; or Heroku which are free and as simple as can be. &lt;/p&gt;

&lt;p&gt;Include links to each project on your resume as well as a description of the app and the technologies you used to build it. Doing so will immediately show the value that you can bring to potential employers.&lt;/p&gt;

&lt;p&gt;If youâre interested in becoming an independent app developer, try turning one of these projects into an actual business. Youâd be surprised how many people are able to do that. They learn React, start building projects, and turn one of them into an app or service which they sell for a profit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-10-have-fun" class="anchor"&gt;
  &lt;/a&gt;
  Step 10. Have fun!
&lt;/h2&gt;

&lt;p&gt;I'll be the first to admit it: learning React can be very frustrating. Even once you become a professional developer, it will &lt;em&gt;still&lt;/em&gt; be very frustrating at times. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There will be problems you come across as you become a skilled React developer, but none that can't be overcome.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My final advice to you is to become involved with fun, engaging React projects that you want to build or be a part of. You will not only learn more easily, but discover what you like most about being a React developer. All of which will give you confidence and help take you where you want to be in your career.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-this-post-join-the-react-bootcamp" class="anchor"&gt;
  &lt;/a&gt;
  Enjoy this post? Join The React Bootcamp
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;The React Bootcamp&lt;/a&gt;&lt;/strong&gt; takes everything you should know about learning React and bundles it into one comprehensive package, including videos, cheatsheets, plus special bonuses.&lt;/p&gt;

&lt;p&gt;Join thousands of developers learning how to become a React pro in record time:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when it opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Svelte for Appwrite</title>
      <author>Torsten Dittmann</author>
      <pubDate>Tue, 12 Jan 2021 16:06:40 +0000</pubDate>
      <link>https://dev.to/torstendittmann/svelte-for-appwrite-4fkg</link>
      <guid>https://dev.to/torstendittmann/svelte-for-appwrite-4fkg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#%E2%96%B6-introduction" class="anchor"&gt;
  &lt;/a&gt;
  â¶ Introduction
&lt;/h1&gt;

&lt;p&gt;I've been a fan of Svelte for a long time now and started every project I came up with in 2020 with the &lt;a href="https://github.com/sveltejs/template"&gt;sveltejs/template&lt;/a&gt;. While working on these ideas, I discovered a self-hosted Firebase alternative called Appwrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-appwrite" class="anchor"&gt;
  &lt;/a&gt;
  â What is Appwrite?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FkiMU6mE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5ltvzuemkjv1iwfqagju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FkiMU6mE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5ltvzuemkjv1iwfqagju.png" alt="68747470733a2f2f61707077726974652e696f2f696d616765732f6769746875622e706e67"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source backend-as-a-service server that abstracts and simplifies complex and repetitive development tasks behind a very simple to use REST API. Appwrite aims to help you develop your apps faster and in a more secure way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you haven't heard of Appwrite before, you should really &lt;a href="https://appwrite.io"&gt;check it out&lt;/a&gt;! ð&lt;/p&gt;

&lt;p&gt;If you ask yourself, why you should use Appwrite over something like Firebase, I've written down my reasons here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/torstendittmann" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0B4hzSYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fSaWYjcZ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/206882/20323e85-2ed6-4239-a5b6-4ae557bb943b.jpg" alt="torstendittmann image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/torstendittmann/why-i-moved-from-baas-to-appwrite-self-hosted-backend-1e6b" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why I moved from BaaS to Appwrite (self-hosted Backend)&lt;/h2&gt;
      &lt;h3&gt;Torsten Dittmann ã» Apr 13 '20 ã» 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#appwrite&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#backend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#%E2%AC%85-back-to-the-topic" class="anchor"&gt;
  &lt;/a&gt;
  â¬ Back to the topic
&lt;/h2&gt;

&lt;p&gt;Hooked by the concept, I started contributing to Appwrite, became part of its community, and in 2021 I became a fulltime Core Member.&lt;/p&gt;

&lt;p&gt;Using the Javascript SDK worked right away, but didn't really fit the component driven approach of Svelte. So I sat down, inspired by &lt;a href="https://github.com/codediodeio/sveltefire"&gt;sveltefire&lt;/a&gt;, and worked out a collection of components which feel at home in Svelte projects. This resulted in the project &lt;code&gt;svelte-appwrite&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comparison" class="anchor"&gt;
  &lt;/a&gt;
  ð Comparison
&lt;/h1&gt;

&lt;p&gt;Enough talking, let's start with a code comparison between &lt;code&gt;appwrite&lt;/code&gt; and &lt;code&gt;svelte-appwrite&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZebEjLU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4o36tarfr9uvvyo5uuyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZebEjLU1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4o36tarfr9uvvyo5uuyh.png" alt="picture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Short isn't always better, except in this case. Let's take a look at the shorter variant, the &lt;code&gt;svelte-appwrite&lt;/code&gt; one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AuthEmail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost/v1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5ffc6c043586d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;Appwrite&lt;/span&gt; &lt;span class="err"&gt;{...&lt;/span&gt;&lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;User&lt;/span&gt; &lt;span class="na"&gt;let:user&lt;/span&gt; &lt;span class="na"&gt;let:actions&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello {user.name}!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{actions.logout}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;AuthEmail&lt;/span&gt; &lt;span class="na"&gt;let:authorize&lt;/span&gt; &lt;span class="na"&gt;on:success=&lt;/span&gt;&lt;span class="s"&gt;{actions.reload}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{email}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{password}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{authorize(email,&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="err"&gt;)}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    Login
                &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/AuthEmail&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/User&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Appwrite&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This small snippet handles Initialization and Authentication via E-Mail with an &lt;a href="https://appwrite.io"&gt;Appwrite&lt;/a&gt; project for you with just a few lines.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-break-it-down" class="anchor"&gt;
  &lt;/a&gt;
  ð§¬ Let's break it down
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#-raw-ltappwrite-configgt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;Appwrite {...config}&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;Appwrite /&amp;gt;&lt;/code&gt; component initializes the SDK for your Appwrite project and must wrap every &lt;code&gt;svelte-appwrite&lt;/code&gt; component. You can simply spread a configuration like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost/v1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5f4938898667e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;de&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltuser-letuser-letactionsgt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;User let:user let:actions&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;User/&amp;gt;&lt;/code&gt; component requests the currently logged in user and provides you 2 &lt;a href="https://svelte.dev/docs#slot_let"&gt;let:directives&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;let:user&lt;/li&gt;
&lt;li&gt;let:actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;user&lt;/code&gt; directive provides you with the currently logged-in user and &lt;code&gt;actions&lt;/code&gt; with following set of functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reload()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logout()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logoutFrom(session: string)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logoutAll()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, everything inside the &lt;code&gt;&amp;lt;User /&amp;gt;&lt;/code&gt; component is only shown when a user is logged in. By using the &lt;code&gt;error&lt;/code&gt; &lt;a href="https://svelte.dev/docs#slot"&gt;slot&lt;/a&gt; we can show content when a user is not logged in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;User&lt;/span&gt; &lt;span class="na"&gt;let:user&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello {user.name}!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;{user.email}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    You are not logged in!
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;slot=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Loading...
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/User&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltauthemail-letauthorize-onsuccessgt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;AuthEmail let:authorize on:success&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The last component we used lets users authenticate via e-mail with the provided &lt;code&gt;authorize(email, password)&lt;/code&gt; method. This component can also emit &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt; events.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;AuthEmail&lt;/span&gt; &lt;span class="na"&gt;let:authorize&lt;/span&gt; &lt;span class="na"&gt;on:success=&lt;/span&gt;&lt;span class="s"&gt;{actions.reload}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{email}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{password}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{authorize(email,password)}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Login&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/AuthEmail&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see in the example above, the &lt;code&gt;on:success&lt;/code&gt; event points to the &lt;code&gt;reload()&lt;/code&gt; function from &lt;code&gt;&amp;lt;User /&amp;gt;&lt;/code&gt;. This way, when a successful login happens, the component will fetch the user from Appwrite and renders the default slot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-find-more-components-here" class="anchor"&gt;
  &lt;/a&gt;
  You can find more components &lt;a href="https://github.com/appwrite/sdk-for-svelte"&gt;here&lt;/a&gt;
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  ð Conclusion
&lt;/h1&gt;

&lt;p&gt;Of course, there are many more components that cover all the functionalities (except teams, that's coming) of Appwrite. This library allows you to kickstart ideas in no time with Svelte. If you have any feedback you'd like to share with me, I'd be glad to read your comments!&lt;/p&gt;

&lt;p&gt;To support this claim, a tutorial series will be published in the coming weeks, in which I will present all aspects of this library and Appwrite itself by building an Instagram clone. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/sdk-for-svelte"&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/svelte-appwrite"&gt;npm Package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>svelte</category>
      <category>appwrite</category>
      <category>baas</category>
      <category>selfhosted</category>
    </item>
    <item>
      <title>Debugging a .NET Serverless App</title>
      <author>Justin Hunter</author>
      <pubDate>Tue, 12 Jan 2021 15:35:31 +0000</pubDate>
      <link>https://dev.to/exceptionless/debugging-a-net-serverless-app-4cfg</link>
      <guid>https://dev.to/exceptionless/debugging-a-net-serverless-app-4cfg</guid>
      <description>&lt;p&gt;Serverless development has become the hot thing in tech. Renting time on a virtual machine only when you need it saves money and resources. However, there are many gotchas that can make working with serverless technology difficult if you're not prepared. One such gotcha is event handling. &lt;/p&gt;

&lt;p&gt;Unlike a Web Server applications, events in a serverless function act very similarly to console applications. Take AWS Lambda, for example. A Lambda function is going to spin up, execute, and spin down as quickly as it can. You want this. This is one of the key selling points of serverless, and how developers can ultimately save money. However, this can lead to problems when trying to process asynchronous events. We'll cover how to solve that in this post. &lt;/p&gt;

&lt;p&gt;Today, we're going to build a simple .NET Hello World serverless application and we're going to implement event handling to log errors and other events. We're going to use the &lt;code&gt;dotnet&lt;/code&gt; cli to install a new Lambda template, but first we need to make sure we have the &lt;a href="https://www.nuget.org/packages/Amazon.Lambda.Templates"&gt;Amazon Lambda Templates Package&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Once that's installed, create a new directory. I'm calling mine &lt;code&gt;MyFunction&lt;/code&gt;, but you can call yours whatever you'd like. Change into that directory and run the following command: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;dotnet new lambda.EmptyFunction --name MyFunction&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create your new serverless function project in .NET. If you open up your project in Visual Studio or whatever IDE or code editor you prefer, you'll see your main file is &lt;code&gt;Function.cs&lt;/code&gt;. You'll also have a &lt;em&gt;very&lt;/em&gt; helpful README, and a json file with some default configuration. We're not going to be editing anything besides the &lt;code&gt;Function.cs&lt;/code&gt; file, but it's good to know what's provided out of the box when generating a new lambda project. &lt;/p&gt;

&lt;p&gt;We now need to add &lt;a href="https://exceptionless.com?utm_source=serverless-blog-post"&gt;Exceptionless&lt;/a&gt; to the project. Exceptionless is an open-source event monitoring service available to all programming languages, but dedicated to .NET. Let's install it by running this command at the command line: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;dotnet add package Exceptionless&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;This will install the most recent version of Exceptionless and is the foundation to you adding event handling in your serverless app. Once Exceptionless is installed, we can take a look at our code and see about where we might want to utilize Exceptionless. &lt;/p&gt;

&lt;p&gt;Open up the &lt;code&gt;Function.cs&lt;/code&gt; file again and add the Exceptionless namespace like this: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;using Exceptionless;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, let's take a look at the function itself. It's a pretty simple function that returns a string in its uppercase form. We're going to change this around to instead return "Hello" plus the string passed in. Of course, that's not the focus of the tutorial, so we're going to also wire up error handling and event processing. &lt;/p&gt;

&lt;p&gt;So, let's start with error handling. We can manually force an error that will fall into the catch block of a try/catch by not passing in a string to our function. Update your function to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Exceptionless&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Amazon.Lambda.Core&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;LambdaSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Amazon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SystemTextJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultLambdaJsonSerializer&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyFunction&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Function&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;FunctionHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ILambdaContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ExceptionlessClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ApiKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR EXCEPTIONLESS API KEY"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;var&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ProcessQueueDeferred&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="k"&gt;try&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"input value is required"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SubmitException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We've added the Exceptionless namespace, we've converted the function to take in a string and return a hello world string.&lt;/p&gt;

&lt;p&gt;To test error handling, we have set up a try/catch that will throw if no string is passed into our function. If that happens, we send the exception to Exceptionless. &lt;/p&gt;

&lt;p&gt;Because we need to make sure events are sent to Exceptionless before the function ends, we are using the Exceptionless method &lt;code&gt;ProcessQueueDeferred()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now, it's time to test. Fortunately, there's a super easy way to test our code before we deploy to AWS. In your root directory, find the &lt;code&gt;test&lt;/code&gt; folder. Nested in that folder is a test file called &lt;code&gt;MyFunction.Test.cs&lt;/code&gt;. We're going to edit this file a bit and run our tests from the command line. &lt;/p&gt;

&lt;p&gt;Update the file to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Linq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Xunit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Amazon.Lambda.Core&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Amazon.Lambda.TestUtilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;MyFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;MyFunction.Tests&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FunctionTest&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HelloWorldFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TestLambdaContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;upperCase&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FunctionHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, John!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upperCase&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This test should pass and we should not be sending anything to Exceptionless. To test it, switch into &lt;code&gt;MyFunction/test/MyFunction.Tests&lt;/code&gt; and run &lt;code&gt;dotnet test&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If your test passed, you're in great shape! But we don't just want to test our function. We want to make sure errors are sent to Exceptionless. So let's force an error. &lt;/p&gt;

&lt;p&gt;Add the following to your test file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ErrorTest&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fact&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ErrorFunctionTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TestLambdaContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;helloworld&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FunctionHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NotEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, John!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The test should pass because we don't get a response of "Hello, John!". But what we want to do is check to see if the exception was sent to Exceptionless. &lt;/p&gt;

&lt;p&gt;Open up your Exceptionless dashboard and you shoud see something like &lt;code&gt;Exception in FunctionHandler input value is required&lt;/code&gt;. If you click on it, you'll see more details like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5EnMb0lX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a4ezgwz4elxp3yuw92of.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5EnMb0lX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a4ezgwz4elxp3yuw92of.png" alt="Example exception"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three tabs on the details page. In the above screenshot, I have selected the "Overview" tab. However, if you explore the other tabs, you'll see value data captured for you automatically. &lt;/p&gt;

&lt;p&gt;Cool, so we created an exception. What about something a little more complex? &lt;/p&gt;

&lt;p&gt;Let's say we want to track the usage of our new serverless function. We can do that pretty easily with Exceptionless. Let's change the current try/catch block to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt; &lt;span class="k"&gt;try&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"input value is required"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SubmitFeatureUsage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Serverless Function"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SubmitException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are sending a feature usage event to Exceptionless as soon as the serverless function is triggered and we're sure the input is not null. The nice thing about this is that it doesn't rely on any errors being thrown and the rest of your function can continue to execute. &lt;/p&gt;

&lt;p&gt;Let's run our tests again. We should get the feature usage event as well as an additional error because, remember, one of our tests forces a null exception. &lt;/p&gt;

&lt;p&gt;In our dashboard, if we look at all event, we will see our feature usage event logged. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9SjNLcpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/50pqfti1rnjnrvgb3m2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9SjNLcpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/50pqfti1rnjnrvgb3m2j.png" alt="feature usage example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These types of events (features, logs, errors) because especially useful in serverless environments. Often, default logging in a serverless environment is either non-existent or much more difficult to set up. By dropping &lt;a href="https://exceptionless.com"&gt;Exceptionless&lt;/a&gt; into your serverless application, you can track just about anything you're interested in. If you'd like to see full examples of Exceptionless in Lambda functions, check out our examples &lt;a href="https://github.com/exceptionless/Exceptionless.Net/tree/master/samples/Exceptionless.SampleLambda"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/exceptionless/Exceptionless.Net/tree/master/samples/Exceptionless.SampleLambdaAspNetCore"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>serverless</category>
      <category>aws</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Get to Know A of MEAN Stack</title>
      <author>Farhat Sharif</author>
      <pubDate>Tue, 12 Jan 2021 15:08:24 +0000</pubDate>
      <link>https://dev.to/farhatsharifh/get-to-know-a-of-mean-stack-3bjf</link>
      <guid>https://dev.to/farhatsharifh/get-to-know-a-of-mean-stack-3bjf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#angular" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Angular&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://angular.io/docs"&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/a&gt; is a component based web application framework used to build efficient front-end solutions. Angular simplifies the ways of creating single-page client-side applications using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML"&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://www.typescriptlang.org/docs/"&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/a&gt; (a superset of JavaScript).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Overview&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Angular app consists of &lt;a href="https://angular.io/guide/architecture#modules"&gt;&lt;strong&gt;module(s)&lt;/strong&gt;&lt;/a&gt;. Every module represents a particular functionality and organizes related components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://angular.io/guide/architecture#components"&gt;&lt;strong&gt;Components&lt;/strong&gt;&lt;/a&gt; are the building blocks of an Angular app. Every component defines an angular view. Components use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML templates to define the view part of the component. These templates contain Angular &lt;a href="https://angular.io/guide/template-syntax"&gt;&lt;strong&gt;template syntax&lt;/strong&gt;&lt;/a&gt; to alter the views dynamically according to the app logic, state and data. &lt;/li&gt;
&lt;li&gt;Classes (written in TypeScript) to define componentsâ logic to handle data and functionality.&lt;/li&gt;
&lt;li&gt;Component-specific styles for the UI design.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then there are &lt;a href="https://angular.io/guide/architecture#services-and-dependency-injection"&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;/a&gt;, i.e. classes used to define the functionality that is not associated with a view. Services can be injected into components with a mechanism known as &lt;a href="https://angular.io/guide/architecture-services#dependency-injection-di"&gt;&lt;strong&gt;dependency injection&lt;/strong&gt;&lt;/a&gt;. Services are shared across components. &lt;/p&gt;

&lt;p&gt;The TypeScript code is translated to JavaScript instructions by the frameworkâs compiler at build time. It brings all the efficiency associated with JavaScript to the Angular app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Benefits&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Angular supports &lt;strong&gt;highly scalable systems&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Angular produces &lt;strong&gt;high-performance apps&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Angular provides the ability to design &lt;a href="https://angular.io/guide/accessibility"&gt;&lt;strong&gt;accessible apps&lt;/strong&gt;&lt;/a&gt; with &lt;a href="https://material.angular.io/"&gt;&lt;strong&gt;Angular Material library&lt;/strong&gt;&lt;/a&gt;, for people with visual or motor impairments.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>meanstack</category>
    </item>
    <item>
      <title>Caching in NodeJS with Redis</title>
      <author>Taslan Graham</author>
      <pubDate>Tue, 12 Jan 2021 14:33:10 +0000</pubDate>
      <link>https://dev.to/taslangraham/caching-in-nodejs-with-redis-4p24</link>
      <guid>https://dev.to/taslangraham/caching-in-nodejs-with-redis-4p24</guid>
      <description>&lt;p&gt;Speed performance is critical in modern day applications. Most of the times your application may have to make requests to an endpoint/server to get some data. Or your application may frequently request a specific dataset. &lt;br&gt;&lt;br&gt;Depending on the size of your dataset along with other things like query database and network speed, the speed at which your application can fetch certain data to display to users may get slower over time (as data increases).&lt;br&gt;&lt;br&gt;This is where caching comes in handy and can dramatically improve your application's speed. In this tutorial we will look at how to implement redis caching in a node application  (API) to improve the speed at which we are able to serve data to client apps. Let's dive in!&lt;/p&gt;

&lt;h2&gt;What is Caching&lt;/h2&gt;

&lt;p&gt;Before we dive into creating our own Redis cache, we have to first answer the question of &lt;em&gt;what is caching&lt;/em&gt;?  &lt;br&gt;&lt;em&gt;&lt;strong&gt;In computing, a cache is a high-speed data storage layer which stores a subset of data, typically transient(existing for a short  period of time) in nature, so that future requests for that data are served up faster than is possible by accessing the dataâs primary storage location. Caching allows you to efficiently reuse previously retrieved or computed data&lt;/strong&gt;&lt;/em&gt; -  &lt;a href="https://aws.amazon.com/caching/"&gt;https://aws.amazon.com/caching/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a scenario to help you think about how caching works. Imagine you're watching your favorite sport (Soccer/Football for me ) or the news or a movie.&lt;br&gt; &lt;br&gt;You're also a big fan of Potato chips, so you decide that every 15 minutes you'll go to the kitchen to get a little potato chips to eat.&lt;br&gt; &lt;br&gt;You then noticed that going to the kitchen every 15 minutes is time consuming, not to mention the fact that you miss out a minute or two of what you're watching.&lt;br&gt; &lt;br&gt;So instead of repeatedly making trips to the kitchen you decide fill a large bowl with chips and have it right next to you while watching the TV. &lt;/p&gt;

&lt;p&gt;Now you can get your chips much faster and you don't need to go back to the kitchen unless your bowl is empty or you want a different kind or chips/snack . That bowl of chips is your cache. &lt;/p&gt;

&lt;p&gt;In the world of IT, caching is similar. Data is stored somewhere (the bowl) where it can be accessed fast without having to go to the original source (the kitchen) unless the data needed is not inside the bowl.&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;What is Redis&lt;/h2&gt;

&lt;p&gt;Seeing that we will be using Redis to implement caching inside our node application it makes sense to first discuss what is Redis. Redis is an in memory key value pair database. Yes, you read that right, Redis stores data in memory (RAM). &lt;br&gt;Reading and writing to RAM is magnitudes faster than reading from a disk drive. This makes Redis perfect for caching.&lt;/p&gt;

&lt;h2&gt;Benefits of caching&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Redis cache uses RAM as its storage (more on this further down) which is faster than disk storage, reading from cache is extremely fast. Being able to  read data at higher rates will significantly improve application performance.
&lt;/li&gt;
&lt;li&gt;Caching  frequently requested data will result in a reduction in the number of database queries needed retrieved particular data.
&lt;/li&gt;
&lt;li&gt;Following up on the previous benefit, if we are making less database queries or even less network request to fetch external resources then our application will have lower latency.
&lt;/li&gt;
&lt;li&gt;Your application can scale better since you can cache that is requested more frequently as more person uses your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Node App&lt;/h2&gt;

&lt;p&gt;Now that we understand what caching is and got an introduction to Redis  we will create a node application that utilizes caching through Redis.&lt;br&gt;Our application will be a simple e-commerce API server that allows users to fetch a list products. Let's start coding!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a folder name node-redis-cache (or whatever you like )&lt;/li&gt;
&lt;li&gt;open the folder inside your text editor(I use VScode)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll be using a few npm packages in our app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;express - handle routing in our app&lt;/li&gt;
&lt;li&gt;redis - use redis commands in node&lt;/li&gt;
&lt;li&gt;axios - to make API calls&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open your terminal inside the project folder (&lt;em&gt;node-redis-cache&lt;/em&gt;) and run the following command to install the needed packages:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;npm install express redis axios&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The command above installs the express, redis, and axios packages&lt;/p&gt;

&lt;h4&gt;Create Server&lt;/h4&gt;

&lt;p&gt;Now lets finally write some code. We'll first create our express server. Create a file name &lt;em&gt;index.js&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Add the  following imports to &lt;em&gt;index.js&lt;/em&gt;&lt;/p&gt;

&lt;pre class="wp-block-syntaxhighlighter-code"&gt;const express = require('express'); 
const app = express();
const axios = require('axios');
const PORT = 9000;

const redis = require("redis");
const cacheClient= redis.createClient(); // redis client used to interact with redis database

app.listen(PORT, () =&amp;gt; console.log(`listening on port ${PORT}`));&lt;/pre&gt;



&lt;p&gt;We've created our server and set it to listen on port 9000. We've also required in the redis and axios packages which we'll use later on.&lt;/p&gt;



&lt;h3&gt;
&lt;br&gt;Route&lt;/h3&gt;



&lt;p&gt;Now we'll add a route that returns a list of products to the user. Add the following to &lt;em&gt;index.js&lt;/em&gt;&lt;/p&gt;



&lt;pre class="wp-block-syntaxhighlighter-code"&gt;app.get('/products', async (req, res) =&amp;gt; {
  const { data } = await axios.get('https://fakestoreapi.com/products'); // This is a real API ;)
  return res.send(data);
});&lt;/pre&gt;



&lt;p&gt;Here we've created a route handler for &lt;strong&gt;&lt;em&gt;/products&lt;/em&gt;&lt;/strong&gt; that will return a list of products. We are making a request to an external API to get these products.&lt;br&gt;&lt;br&gt;Lets assume that this external API also makes a database request get this list of products. As you can see, when a user requests the list of available products it may take a while for them to get a response. &lt;/p&gt;



&lt;h3&gt;API Speed (without cache)&lt;/h3&gt;



&lt;p&gt;Let's test our endpoint using &lt;a rel="noreferrer noopener" href="https://www.postman.com/"&gt;postman&lt;/a&gt; (or your favorite API testing tool).  This will show us the speed performance of our application without caching.&lt;/p&gt;



&lt;a href="https://taslangraham.files.wordpress.com/2021/01/request-1.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk1Kzg2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://taslangraham.files.wordpress.com/2021/01/request-1.jpg%3Fw%3D1024" alt="" class="wp-image-1193"&gt;&lt;/a&gt;



&lt;p&gt;Without caching implemented our API request takes &lt;strong&gt;1540 milliseconds&lt;/strong&gt; (or 1.54 seconds) to be processed. Now let's add caching to our route handler.&lt;/p&gt;



&lt;h3&gt;Adding caching&lt;/h3&gt;



&lt;p&gt;Update the &lt;em&gt;&lt;strong&gt;/products&lt;/strong&gt;&lt;/em&gt; route handler to the following. &lt;/p&gt;



&lt;pre class="wp-block-syntaxhighlighter-code"&gt;app.get('/products', async (req, res) =&amp;gt; {
    const TIME_TO_LIVE = 1800; // 30 minutes as seconds

    cacheClient.get("products", async (err, cachedProducts) =&amp;gt; {
        if (cachedProducts) {
            res.send(JSON.parse(cachedProducts));
        } else {
            const { data } = await axios.get('https://fakestoreapi.com/products');
            cacheClient.setex("products", TIME_TO_LIVE, JSON.stringify(data))
            return res.send(data);
        }
    });
});
&lt;/pre&gt;

&lt;p&gt;Here, we are changing how our &lt;strong&gt;&lt;em&gt;/products&lt;/em&gt;&lt;/strong&gt; route handler operates. When we get a request to fetch for products, we first check to see if we already have that data available in cache.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;If the cached data is available then we return that to the user. If there's no cached data available, we first make a call to the external API for the data.  Then we cache the newly fetched data. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;sete&lt;/em&gt;x()&lt;/strong&gt;&lt;em&gt; &lt;/em&gt;method allows us to set the Time To Live (TTL) for the cached data. This means that after the specified amount of time (in seconds) the cached data will be deleted. Finally we return the data to the user.&lt;/p&gt;

&lt;h3&gt;API Speed (with cache)&lt;/h3&gt;

&lt;p&gt;This will show us the speed performance of our application with caching implemented. Lets make a call to the API endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://taslangraham.files.wordpress.com/2021/01/request-3-1.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4_Ts8tj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://taslangraham.files.wordpress.com/2021/01/request-3-1.jpg%3Fw%3D1024" alt="" class="wp-image-1201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whoa, wait, that's not much faster! Why is that so? On the first request, there's no data in the cache, so we'd have to the make a call to the external API which will take some time. The fetched data is then cached and is available on subsequent requests. So, let's make another request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://taslangraham.files.wordpress.com/2021/01/request-4.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOjSNRuQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://taslangraham.files.wordpress.com/2021/01/request-4.jpg%3Fw%3D1024" alt="" class="wp-image-1202"&gt;&lt;/a&gt;Now look at that! Our request took only &lt;strong&gt;2 milliseconds&lt;/strong&gt; (or 0.002 seconds). That's fast, very fast compared to when we don't have cache implemented.&lt;br&gt;&lt;br&gt;As you can see, caching can significantly improve your application's performance. There's a lot more to redis caching and caching in general. If you're interested in learning more about caching and redis, see the following links:&lt;/p&gt;

&lt;p&gt;https://aws.amazon.com/caching/&lt;/p&gt;

&lt;p&gt;https://www.cloudflare.com/learning/cdn/what-is-caching/&lt;/p&gt;

&lt;p&gt;https://wp-rocket.me/blog/different-types-of-caching/&lt;/p&gt;

&lt;p&gt;https://redis.io/documentation&lt;/p&gt;

&lt;p&gt;https://www.npmjs.com/package/redis&lt;br&gt;&lt;br&gt;If you found this helpful leave a comment below and share with devs who will find it useful. Until next time &lt;em&gt;think, learn, create, repeat&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The &lt; kbd &gt; HTML Tag</title>
      <author>Braydon Coyer</author>
      <pubDate>Tue, 12 Jan 2021 14:19:39 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/the-kbd-html-tag-2n2o</link>
      <guid>https://dev.to/braydoncoyer/the-kbd-html-tag-2n2o</guid>
      <description>&lt;p&gt;Welcome to part two of the  &lt;a href="https://hashnode.com/series/uncommon-html-tags-ckjiqctar042xzgs1bei2e9a3"&gt;Uncommon HTML Tag series&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;With each article in this series, I will introduce a widely unknown HTML tag, discuss compatibility across browsers and cover some real-world use cases with the element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-lt-kbd-gt-tag" class="anchor"&gt;
  &lt;/a&gt;
  The &amp;lt; kbd &amp;gt; Tag
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;kbd&amp;gt;&amp;lt;/kbd&amp;gt;&lt;/code&gt; tag defines user input on your document and, by default, uses the browser's monospace font for visual distinction. &lt;/p&gt;

&lt;p&gt;While the most common use-case for using this tag is to denote keyboard input, it can also be used for input such as voice or other commands.&lt;/p&gt;

&lt;p&gt;Let's take a look at how it's used!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;To open a new tab on Mac, press 
   &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;Cmd&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt; + &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;T&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt;.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;To open a new tab on Windows, press 
   &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;Ctrl&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt; + &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;T&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&lt;/span&gt;.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PhQHNTsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123792192/MXExc-oWS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PhQHNTsU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123792192/MXExc-oWS.png" alt="Screen Shot 2021-01-08 at 10.35.54 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both the opening and closing tags are mandatory and, unlike some of the other HTML tags we've discussed, does not contain any unique attributes (global attributes can be used).&lt;/p&gt;

&lt;p&gt;If you want to have the content of the tag stand out a little more, consider applying some custom CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nbVHspL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123799122/9IRGM_RSs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbVHspL7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123799122/9IRGM_RSs.png" alt="Screen Shot 2021-01-08 at 10.36.23 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to play around with the tag, feel free to fork the pen below!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/braydoncoyer/embed/RwGBpPm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compatibility" class="anchor"&gt;
  &lt;/a&gt;
  Compatibility
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;kbd&amp;gt;&amp;lt;/kbd&amp;gt;&lt;/code&gt; tag is part of the HTML Living Standard and is supported on all major web browsers! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--33Vhw9Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123865495/0KAlfI3qf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--33Vhw9Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610123865495/0KAlfI3qf.png" alt="Screen Shot 2021-01-08 at 10.37.30 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading! Have you ever used the &lt;code&gt;&amp;lt;kbd&amp;gt;&amp;lt;/kbd&amp;gt;&lt;/code&gt; tag in a project? Let me know in the comments below!&lt;/p&gt;

&lt;p&gt;If you liked this article and want more content like this, read some of my &lt;a href="https://blog.braydoncoyer.dev/"&gt;other articles&lt;/a&gt; , subscribe to my newsletter and make sure to follow me on &lt;a href="https://twitter.com/BraydonCoyer"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
