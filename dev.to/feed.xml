<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>TypeScript's Unknown data type</title>
      <author>Basile Bong</author>
      <pubDate>Wed, 28 Apr 2021 17:10:50 +0000</pubDate>
      <link>https://dev.to/basilebong/typescript-s-unknown-data-type-4p9b</link>
      <guid>https://dev.to/basilebong/typescript-s-unknown-data-type-4p9b</guid>
      <description>&lt;p&gt;There are data types in TypeScript that are better known than others. Today I would like to introduce a less known data type: &lt;code&gt;unknown&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-unknown-endraw-data-type"&gt;
  &lt;/a&gt;
  The &lt;code&gt;unknown&lt;/code&gt; data type
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;unknown&lt;/code&gt; type exists since TypeScript 3.0 (the current version is 4.2) and is a &lt;a href="https://en.wikipedia.org/wiki/Top_type"&gt;top type&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Similar to the &lt;code&gt;any&lt;/code&gt; type, a &lt;strong&gt;variable&lt;/strong&gt; of type &lt;code&gt;unknown&lt;/code&gt; accepts values of any type. &lt;/p&gt;

&lt;p&gt;The difference is that a &lt;strong&gt;value&lt;/strong&gt; of type &lt;code&gt;any&lt;/code&gt; can be assigned to variables of all types and a &lt;strong&gt;value&lt;/strong&gt; of type &lt;code&gt;unknown&lt;/code&gt; can only be assigned to variables of the type &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;unknown&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * New variable of type unknown
 **/&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Assigning a value to an unknown variable
 **/&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;               &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;          &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Audio&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;         &lt;span class="c1"&gt;// Works!&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Using an unknown variable
 **/&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// Error: Type 'unknown' is not assignable to type 'string'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myBool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// Error: Type 'unknown' is not assignable to type 'booelan'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// Works!&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// Works!&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Error: Object is of type 'unknown'&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Error: Object is of type 'unknown'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-raw-unknown-endraw-"&gt;
  &lt;/a&gt;
  When to use &lt;code&gt;unknown&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;unknown&lt;/code&gt; forces type checking and is safer than &lt;code&gt;any&lt;/code&gt;. That's why its use should always be favored over &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example with &lt;code&gt;JSON.parse()&lt;/code&gt;, which always returns a value of type &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the following situation the code will compile without noticing that there is a &lt;strong&gt;huge error&lt;/strong&gt;. The JSON string is not of type &lt;code&gt;IPerson&lt;/code&gt; and should not be assignable to the variable &lt;code&gt;phoebe&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"alias": "rose", "color": "red"}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This returns any&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;phoebe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This should throw a type error, but doesn't...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To make our code safer and catch the type error, we can use &lt;code&gt;unknown&lt;/code&gt; in combination with a custom Type Guard.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;{"name": "rose", "age": 25}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsonString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This returns any.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notPerson&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Error Type 'unknown' is not assignable to type 'IPerson'.&lt;/span&gt;

&lt;span class="cm"&gt;/** 
 * Create a custom Type Guard to make sure that
 * the parsed data is of type Person.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Use Type Guard.
 */&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is a person!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// With the Type Guard the assignement of the &lt;/span&gt;
    &lt;span class="c1"&gt;// variable as type Person works.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;phoebe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Parsed string is not a Person.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/basilebong" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbNFqOPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uDYN3xRa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/298794/cb1468a9-5fad-407c-aa55-b2a844d9da28.jpg" alt="basilebong image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/basilebong/custom-type-guards-in-typescript-dg8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Custom Type Guards in TypeScript&lt;/h2&gt;
      &lt;h3&gt;Basile Bong ・ Sep 26 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;p&gt;Follow me on &lt;a href="https://dev.to/basilebong"&gt;dev.to&lt;/a&gt; and &lt;a href="https://twitter.com/basilebong/"&gt;twitter&lt;/a&gt;!&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__298794"&gt;
  
    .ltag__user__id__298794 .follow-action-button {
      background-color: #ffffff !important;
      color: #5a4afb !important;
      border-color: #5a4afb !important;
    }
  
    &lt;a href="/basilebong" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbNFqOPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uDYN3xRa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/298794/cb1468a9-5fad-407c-aa55-b2a844d9da28.jpg" alt="basilebong image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/basilebong"&gt;Basile Bong&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/basilebong"&gt;Software Developer @userlike. TypeScript,  UX Design, Machine Learning, biking and music. 💬 French, German, English and a little Dutch 🏔️ He/Him&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mariusschulz.com/blog/the-unknown-type-in-typescript"&gt;The unknown Type in TypeScript by Marius Schulz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.benmvp.com/blog/when-use-typescript-unknown-versus-any/"&gt;When to use TypeScript unknown vs any by Ben Ilegbodu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create CSS Gradient Animations Effortlessly 🌌</title>
      <author>Jordi Enric</author>
      <pubDate>Wed, 28 Apr 2021 17:02:59 +0000</pubDate>
      <link>https://dev.to/jordienr/create-css-gradient-animations-effortlessly-4je9</link>
      <guid>https://dev.to/jordienr/create-css-gradient-animations-effortlessly-4je9</guid>
      <description>&lt;p&gt;Here's a preview of what we'll make 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jordienric/embed/JjEVgXv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-gradient"&gt;
  &lt;/a&gt;
  1. Create a gradient
&lt;/h2&gt;

&lt;p&gt;I'll save mine in a variable for easy reuse.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--main-gradient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-66deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#15162a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#291a33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#381a2c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#121e42&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-create-a-container-div-and-add-the-background"&gt;
  &lt;/a&gt;
  2. Create a container div and add the background
&lt;/h2&gt;

&lt;p&gt;We use background-size to zoom into the gradient.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--main-gradient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-create-the-animation"&gt;
  &lt;/a&gt;
  3. Create the animation
&lt;/h2&gt;

&lt;p&gt;This is a basic animation that changes the background-position. Since we zoomed into the gradient it will look like it's moving.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;00%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-add-the-animation-to-our-container"&gt;
  &lt;/a&gt;
  4. Add the animation to our container!
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--main-gradient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gradient&lt;/span&gt; &lt;span class="m"&gt;8s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check the codepen &lt;a href="https://codepen.io/jordienric/pen/JjEVgXv"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it!&lt;/p&gt;

&lt;p&gt;If you enjoy this content consider &lt;a href="https://twitter.com/jordienr"&gt;following me on twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I built a chat app using React and GraphQL</title>
      <author>Abdou Ouahib</author>
      <pubDate>Wed, 28 Apr 2021 16:12:24 +0000</pubDate>
      <link>https://dev.to/aouahib/i-built-a-chat-app-using-react-and-graphql-1ejm</link>
      <guid>https://dev.to/aouahib/i-built-a-chat-app-using-react-and-graphql-1ejm</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h4&gt;

&lt;p&gt;You can try the app here: &lt;a href="https://chat.abdou.dev/"&gt;chat.abdou.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can view the source code in this &lt;a href="https://github.com/aouahib/very_good_chat"&gt;github repo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;About 4 months ago, I decided to start learning web development, and I thought that the best way to know that I became a job-ready developer, is to build a complex, real-world application, from scratch. My first choice was to build a chat app. It seemed complex enough for me, and I knew I would learn many things along the way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h1&gt;

&lt;p&gt;I think it's only fair to say that, although I had no experience in web dev, I wasn't a complete newbie to the coding world. I did some C programming, I worked with Flutter a little, and I think it made it a lot easier for me to pick up all those new technologies like React. Otherwise, this would have taken me a lot more than 4 months :). Also, here's my GitHub graph in the aftermath.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y8x1V4-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/849vrcxceax5mlyr98dk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y8x1V4-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/849vrcxceax5mlyr98dk.png" alt="Github graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-first-steps"&gt;
  &lt;/a&gt;
  The first steps
&lt;/h1&gt;

&lt;p&gt;I knew that I had to learn the basics. It doesn't make sense to start learning the crazy stuff (React) first, before having a solid (meh) understanding of HTML, CSS, and Javascript (SPOILERS: I ended up learning Typescript instead).&lt;/p&gt;

&lt;p&gt;So, my first destination was FreeCodeCamp. It had a big nice curriculum of everything you need to get you started in web dev. I finished the first 3 certifications, and by then, I was ready to go out into the wilderness, and start learning on my own.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the app
&lt;/h1&gt;

&lt;p&gt;Now that I had all the basics I needed, it was time to start building the chat app.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-tech-stack"&gt;
  &lt;/a&gt;
  The tech stack
&lt;/h1&gt;

&lt;p&gt;I took a look around some job listings here and there, to see what's popular in the market, and I finally decided to use these technologies for my next project (non-exhaustive list):&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Redux&lt;/strong&gt;: I'm building a full fledged chat app after all. I will need a solid state management solution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MaterialUI&lt;/strong&gt; for components/styling&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Apollo client&lt;/strong&gt; for GraphQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Node.js&lt;/strong&gt; and &lt;strong&gt;Express&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Apollo server&lt;/strong&gt; for GraphQL&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;TypeGraphQL&lt;/strong&gt;:  for building GraphQL APis&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PostgreSQL&lt;/strong&gt; in combination with &lt;strong&gt;Prisma&lt;/strong&gt; (The next generation ORM, very cool stuff) for the database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did I mention that I used Typescript throughout the project? I really find it hard to work without type-safety.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;At that time, I've been hearing about &lt;strong&gt;Next.js&lt;/strong&gt;, and it seemed like something I'd want to learn, so I decided to use it. I was also planning to do all the coding using TDD (test driven development), so setting up a test environment was a must. After lots of headaches, I finally got &lt;strong&gt;jest&lt;/strong&gt; and &lt;strong&gt;React Testing Library&lt;/strong&gt; to work with Typescript. Now I'm ready to start coding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#app-features"&gt;
  &lt;/a&gt;
  App features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;p&gt;To make things simple, I used Google for authentication. The user signs in with Google, I grab the token and send it to the backend. If no user is associated with that Google account, I create it, then proceed.&lt;/p&gt;

&lt;p&gt;I spent some time researching different authentication methods, the simplest one was to use &lt;strong&gt;jwt&lt;/strong&gt;. Other solutions like auth0 seemed very complicated. I tried to implement jwt authentication in the best way I could. I didn't use local storage to store any tokens (although it's widely used in many tutorials), and I used a refresh/access token strategy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Refresh token&lt;/strong&gt;: it's generated with a very long expiry date (it basically never expires), and it is set in a http-only cookie, so the client can never access it. It's used to generate new access tokens when they expire.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Access token&lt;/strong&gt;: it's generated with a low expiration time (30min), and it's only stored in memory (in a variable) in the frontend. It is sent with all future http requests to make authenticated actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also implemented auto-refreshing in the frontend, so when the access token expires, a new one is generated without the user noticing anything. Not very sophisticated, but I'm happy with the results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-profiles"&gt;
  &lt;/a&gt;
  User profiles
&lt;/h3&gt;

&lt;p&gt;Each user has a unique username, a name, and a profile photo. These are all public, and can be viewed by anyone. The user has the ability to change his username, name, and upload new profile pictures. It's kinda worth noting that pictures are resized to different sizes (small, medium, and original). So we don't need to fetch a 1280x1024 picture for a 48x48 user avatar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#friends"&gt;
  &lt;/a&gt;
  Friends
&lt;/h3&gt;

&lt;p&gt;Each user can send friend requests to other users, and they can either accept or decline them, exactly like facebook. A user can also block another user, preventing them from sending further friend requests and messages. Being friends with someone makes you able to text them and view their active status (last seen date) if they don't hide it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notifications"&gt;
  &lt;/a&gt;
  Notifications
&lt;/h3&gt;

&lt;p&gt;For now, they only show if someone accepted your friend request. I can't think of any other use-case at the moment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#messaging"&gt;
  &lt;/a&gt;
  Messaging
&lt;/h3&gt;

&lt;p&gt;The core feature of the app, It was the last one implemented after all the above. I tried to clone Facebook Messenger's behaviour. It wasn't that hard since I was already familiar with everything at this point, but I still faced some very annoying problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The delivery status&lt;/strong&gt;: If you look at facebook messenger, you'll notice that every message has a delivery status, that can be either &lt;code&gt;SENDING&lt;/code&gt;, &lt;code&gt;SENT&lt;/code&gt;,
&lt;code&gt;RECEIVED&lt;/code&gt;, &lt;code&gt;DELIVERED&lt;/code&gt;, or &lt;code&gt;SEEN&lt;/code&gt;. Trying to implement it exactly the same way messenger did, was very tricky. I didn't think about this problem from the start, so I ended up modifying many things to get it working.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Race conditions&lt;/strong&gt;: You usually expect things to happen in a certain order, for example, a message status can go from &lt;code&gt;SENDING&lt;/code&gt; to &lt;code&gt;SENT&lt;/code&gt;, and then to
&lt;code&gt;DELIVERED&lt;/code&gt;, but sometimes it's not the case. If the internet is slow for example, you can get notified that the message was delivered, before a response has reached the client to confirm that the message was sent, therefore the status goes from &lt;code&gt;SENDING&lt;/code&gt; to &lt;code&gt;DELIVERED&lt;/code&gt;, and then to &lt;code&gt;SENT&lt;/code&gt;, which is not at all desired, and can lead to annoying bugs, like the message being shown twice, or not at all. Handling these race conditions was not straightforward, and I think the code became a little messy afterwards.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The user can also send multiple images/videos with each message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realtime"&gt;
  &lt;/a&gt;
  Realtime
&lt;/h2&gt;

&lt;p&gt;Before starting the messaging feature, I always thought I was going to use sockets to make it realtime. Then I figured that there's a chance GraphQL has a solution for this kind of problem, and I was right. GraphQL supports&lt;br&gt;
&lt;strong&gt;Subscriptions&lt;/strong&gt;, which are (quoting &lt;a href="https://www.apollographql.com/docs/react/data/subscriptions/"&gt;Apollo docs&lt;/a&gt;) "&lt;em&gt;useful for notifying your client in real time about changes to back-end data, such as the creation of a new object or updates to an important field&lt;/em&gt;". They were perfect for this use-case, and implementing them was fairly simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-and-vitejs"&gt;
  &lt;/a&gt;
  Next.js and Vite.js
&lt;/h2&gt;

&lt;p&gt;Almost halfway through the project, I realized that I'm not really benefiting from most of Next.js features (Or maybe I didn't know how to?). At the same time I discovered &lt;strong&gt;Vite.js&lt;/strong&gt; that uses &lt;strong&gt;esbuild&lt;/strong&gt;, which is the fastest bundler out there, so I switched to it. It was indeed really fast, I could make changes to the code and see them instantly in the browser, so I'm sticking with it for now. I'm not completely giving up on Next.js, I will definitely learn it later, while building a suitable project (A blog/portfolio for example). After all, concepts like Server Side Rendering are a little too advanced, and I'm still new to all of this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosting"&gt;
  &lt;/a&gt;
  Hosting
&lt;/h2&gt;

&lt;p&gt;I used digitalocean to host both the front and the backend. I bought a droplet for 5$/month and put everything inside. Deploying was fun, I always disliked everything related to IP addresses, DNS, firewalls... but it turned out to be not that bad, everything has an article/tutorial explaining all the details, and you just have to follow.&lt;/p&gt;

&lt;p&gt;For file hosting, you'd usually want to use some cloud storage solution, like an Amazon s3 bucket for example, but it doesn't make sense to pay for it separately, since this is just a personal project. So I decided to just use the droplet's memory instead.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-hard-parts"&gt;
  &lt;/a&gt;
  The hard parts
&lt;/h1&gt;

&lt;p&gt;These are the things I found difficult the most. They sometimes made me sit and consider my options of quitting the whole thing, and becoming a full time baker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;I'm not sure what to call it, so I called it configuration, but you know... when you're trying to make jest work, but it just won't work, even though you followed all the instructions. To finally discover, by accident, in a comment buried deep inside a github conversation, that you have to remove a certain line from you tsconfig.json... Or that time when I wanted to use decorators inside a Next.js project, but it didn't work, so I had to painfully experiment with Babel config, which I know absolutely nothing of, until it started working, but then I discovered that Next.js HMR broke, so I had to give up using decorators after all that wasted time. The funny thing is, I tried to use them in the backend project, and they just worked from the first try.&lt;/p&gt;

&lt;p&gt;I always stumble upon terms like webpack, bundlers, build tools..., but they remain foreign to me, I just use them without knowing anything about how they work, and I feel bad about it. Maybe I should start learning them seriously, maybe that will help me with those time-consuming configuration problems in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h2&gt;

&lt;p&gt;Styling was one of the hardest things, I didn't know how should I style my components. Should I use plain CSS files? Should I use CSS modules instead? Should I use bootstrap or something more modern like Tailwind? It was a really hard decision to make. I used CSS modules at first, and then switched to Styled Components, to finally settle down with MaterialUI. At last, I had to migrate everything to use MaterialUI and its JSS solution. It was a real mess, the refactoring was very time-consuming, and I still think I'm not doing things as they're supposed to be done. Now I can't even add dark-mode without modifying every single component in the code base.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtualization"&gt;
  &lt;/a&gt;
  Virtualization
&lt;/h2&gt;

&lt;p&gt;I already use pagination, if a conversation has a 1000 messages, I don't fetch them all at once. I fetch only the first 30, and when the user scrolls all the way to the top, I fetch another 30, and so on and so forth.&lt;/p&gt;

&lt;p&gt;This is not enough, because after fetching all those 1000 messages, we will have a 1000 message elements in the DOM, and that's not good performance wise. Virtualization solves this problem by rendering only the visible elements. Let's say the user's viewport can fit 20 messages, then only 20 (usually a little more than 20) elements will be present in the DOM, and while the user scrolls, the invisible messages will be replaced by the visible ones, but the DOM will always have the same number of elements.&lt;br&gt;
(The below illustration is from this &lt;a href="https://twitter.com/addyosmani/status/1104645563138506753"&gt;tweet&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6k2l7_9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkqgoqxbbr1bn91fsmme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6k2l7_9N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkqgoqxbbr1bn91fsmme.png" alt="virtualization explained"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some libraries like Virtuoso and React Window are doing a nice job implementing virtualization for us, but in my case, both of them didn't work well. Message elements have variable heights, and those heights must be calculated before rendering, along with many other calculations. When the list of messages gets big, those calculations become very heavy, and the app becomes unusable. I spent so much time trying to make virtualization work, but in the end, I decided it's better to stop trying, and just render everything into the DOM. So far I haven't noticed any performance issues, and I checked Facebook Messenger and Whatsapp Web, they both don't use virtualization, it was a big relief knowing that Facebook is doing the same thing I'm doing :).&lt;/p&gt;

&lt;p&gt;In mobile development (or at least in Flutter), you have built-in virtualization that's working out-of-the-box, and until now, I always thought that it's something standard, and you can find it in all other SDKs, I took it for granted. I'm still confused why React doesn't have such a thing, is virtualization not that important in the web?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keeping-everything-tested"&gt;
  &lt;/a&gt;
  Keeping everything tested
&lt;/h2&gt;

&lt;p&gt;Since I was doing test driven development, I had to write tests for almost every piece of production code. Keeping your codebase well tested is a very important thing, there's no doubt about that, but this process becomes extremely tedious. Some tests are harder than others, and sometimes you spend 90% of the time writing mock objects for a test, and only 10% to write the actual testing, and if, god forbid, you made changes to the code you tested, you'll have to go through those tests all over again.&lt;/p&gt;

&lt;p&gt;In the end, it's always worth it. Having a strong test suite gives you confidence that your code is actually working. Whenever you want to make a new commit, you just run those tests, and if everything passes, you're good to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0zL2y3yQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/128skuxi3e3mkk6ovsgc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0zL2y3yQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/128skuxi3e3mkk6ovsgc.png" alt="Frontend test suite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#things-im-not-proud-of"&gt;
  &lt;/a&gt;
  Things I'm not proud of
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#theming"&gt;
  &lt;/a&gt;
  Theming
&lt;/h2&gt;

&lt;p&gt;I know I already complained about styling, but theming is one of the things that I didn't do correctly, and I blame myself for that. I knew that I shouldn't hardcode colors, or font sizes, or anything related to styling, inside every component. I had to use a global theme instead, and material UI provided a convenient way to do it, but sill, I was always in a rush to see the results of my work on screen, I just had to build those components as quickly as possible, telling myself that I will refactor things later, but little did I know. At one point, it became too much, and I was too lazy to refactor everything, so I just gave up and left things as they are.&lt;/p&gt;

&lt;p&gt;Next time, I will write down my global theme first, before writing any component code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h2&gt;

&lt;p&gt;I'm pretty sure I could've implemented routing a lot better than the way it is now. I didn't discover React Router until I had already finished the whole authentication feature. I was using conditional rendering, if the user is logged in I display the main screen, if not I display the login screen. After that, I started using React Router, and I'm still not sure if I'm fully utilizing its power, I had to use some hacky tricks to get things working as I wanted&lt;br&gt;
(I needed a custom back button, that does not always act like the one in the browser), which wasn't very clean in my opinion. I'll definitely give more time and thought to routing in my next project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#app-size"&gt;
  &lt;/a&gt;
  App size
&lt;/h2&gt;

&lt;p&gt;Lastly, the app is over 1.4 MB in size, I'm not sure, but I think it should be a lot smaller than this. I will take some time later to analyze the issue.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;This little journey was fun, and you can say I'm satisfied with the final result. I think I can finally call myself a "fullstack developer"? I know There are many other things in this field that I have yet to explore and get good at, but this is just the start.&lt;/p&gt;

&lt;p&gt;I don't know where to go from here, so I'll take my time reflecting and deciding on the next steps. Otherwise, I hope you had a good read, feel free to try out the app and leave me some feedback. Bye bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif" alt="bye bye"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>graphql</category>
    </item>
    <item>
      <title>This Month on CodeSandbox - April 2021 Edition</title>
      <author>Ceora Ford</author>
      <pubDate>Wed, 28 Apr 2021 15:58:13 +0000</pubDate>
      <link>https://dev.to/codesandboxio/this-month-on-codesandbox-april-2021-edition-1e0m</link>
      <guid>https://dev.to/codesandboxio/this-month-on-codesandbox-april-2021-edition-1e0m</guid>
      <description>&lt;p&gt;Welcome to the first edition of This Month on CodeSandbox. This is a series where I'll be highlighting some of the amazing work being done by people in the community. As you can tell from the title, this will be a monthly series and, typically, the work I share will center around a certain topic or technology. I'll share work from CodeSandbox along with other platforms too. You can also find out what we've been working on so you can keep up to date with the CodeSandbox team.&lt;/p&gt;

&lt;p&gt;This edition is all about animation. Animations are great because they can be created with a variety of different technologies like React and Three.js and they can take your design to the next level. Lots of people use CodeSandbox to create and share some really fascinating animations and it’s mind-blowing! Here are a few I've come across that I really loved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-spotlight"&gt;
  &lt;/a&gt;
  Community Spotlight
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/9cenu"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://codesandbox.io/s/9cenu"&gt;Playground&lt;/a&gt; by &lt;a href="https://codesandbox.io/u/supahfunk"&gt;Fabio Ottaviani&lt;/a&gt; - This mesmerizing 3D animation was built with Three.js and react-three-fiber. Three.js and react-three-fiber together make building 3D animations in React applications possible. I'm already thinking of ways I want to use this in the future!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/nhndw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://codesandbox.io/s/nhndw"&gt;Rotating Stars&lt;/a&gt; by &lt;a href="https://codesandbox.io/u/twanmulder"&gt;Twan Mulder&lt;/a&gt; - This is the kind of animation that would make a great addition to a portfolio, blog, or even a product site. You can recreate this with just HTML and CSS so it's the perfect way to spice up a project.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/cell-fracture-forked-3rjsl"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://codesandbox.io/s/cell-fracture-forked-3rjsl"&gt;Cell Fracture&lt;/a&gt; by &lt;a href="https://codesandbox.io/u/drcmda"&gt;Paul Henschel&lt;/a&gt; - This animation may seem deceptive at first glance. You only see the word "Hello" in simple black text. But click once to see "Hello" burst into colorful pieces. Cell Fracture was built with Three.js.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#around-the-web"&gt;
  &lt;/a&gt;
  Around the Web
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Xm4BObh4MhI"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://youtu.be/Xm4BObh4MhI"&gt;12HR+ YouTube Coding Bootcamp 2021!&lt;/a&gt; by &lt;a href="https://codesandbox.io/u/kubowania"&gt;Ania Kubów&lt;/a&gt; - This isn't really related to animation. But I just had to share this. Ania created this free, 12-hour coding boot camp, all taught using CodeSandbox. She covers HTML, CSS, and JavaScript through project building. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.thatsanegg.com/blog/your-first-css-animation/"&gt;Your First CSS Animation&lt;/a&gt; by &lt;a href="https://codesandbox.io/u/twanmulder"&gt;Twan Mulder&lt;/a&gt; - If you like "Rotating Stars" animation, then you'll really enjoy this article. Twan gives a step-by-step explanation of how to recreate his rotating CSS animation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2020/11/threejs-react-three-fiber/"&gt;A Dive Into React And Three.js Using react-three-fiber&lt;/a&gt; by &lt;a href="https://codesandbox.io/u/iamfortune"&gt;Fortune Ikechi&lt;/a&gt; - A few of the projects featured earlier were built using Three.js and react-three-fiber. If you're interested in learning more about these technologies, this is a great place to start.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-were-up-to"&gt;
  &lt;/a&gt;
  What We're Up To
&lt;/h2&gt;

&lt;p&gt;These announcements aren't really related to animation. But I'm still very excited to share some of what we've been doing at CodeSandbox. &lt;/p&gt;

&lt;p&gt;This month, we launched two new podcasts - &lt;a href="https://codesandbox.io/podcasts/version-one"&gt;Version One&lt;/a&gt; and the &lt;a href="https://codesandbox.io/podcasts/codesandbox-podcast"&gt;CodeSandbox Podcast&lt;/a&gt;. Version One dives into the product development journey of some really amazing online tools while the CodeSandbox Podcast focuses on members of the community and how they use CodeSandbox.&lt;/p&gt;

&lt;p&gt;Episodes for both podcasts are released twice a month. So episodes one and two of Version One and the CodeSandbox Podcast are already available! Find the latest episodes below. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3lIxK1Qbi5g0Z5ZBmOCic4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3UZIORihk3z3jQdEYFkS2v"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codesandbox</category>
      <category>community</category>
      <category>animation</category>
    </item>
    <item>
      <title>Ultimate Tech Jobs</title>
      <author>DHANUSH N</author>
      <pubDate>Wed, 28 Apr 2021 15:32:55 +0000</pubDate>
      <link>https://dev.to/dhanushxeno/ultimate-tech-jobs-84h</link>
      <guid>https://dev.to/dhanushxeno/ultimate-tech-jobs-84h</guid>
      <description>&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;The below is my github repository which lists of all the available famous job sites, &lt;/p&gt;

&lt;p&gt;I will be updating the repository frequently&lt;/p&gt;

&lt;p&gt;Use it &amp;amp; share it to someone who needs this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DHANUSHXENO/Ultimate-Tech-Jobs"&gt;Ultimate Tech Jobs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more technology related information connect with me&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Dhanush_Xen?s=09"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>codenewbie</category>
      <category>showdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Best Lead Generation Tools (For Busy Dev)</title>
      <author>GoOnlineTools</author>
      <pubDate>Wed, 28 Apr 2021 15:30:01 +0000</pubDate>
      <link>https://dev.to/goonlinetools/best-lead-generation-tools-for-busy-dev-2g7o</link>
      <guid>https://dev.to/goonlinetools/best-lead-generation-tools-for-busy-dev-2g7o</guid>
      <description>&lt;p&gt;Lead generation falls into several categories of tools depending on who your target market is. For instance, there are tools for data collection, email marketing tools, landing page tools, live chat, contests, and social media tools all available for lead generation.&lt;/p&gt;

&lt;p&gt;Every developer has not had management skills. If one has lacked these skills, the performance of the daily activities will be haphazard. So you must use some tools so that you can keep everything well organized. If you want to keep your works well organized, you can use the tools.&lt;/p&gt;

&lt;p&gt;These tools also provide &lt;strong&gt;API access&lt;/strong&gt;. So you can automate many things from your app/web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-leadpages"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://bit.ly/332FTIh"&gt;LeadPages&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yzk2qPiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r338e61x71btkv9pvp5e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yzk2qPiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r338e61x71btkv9pvp5e.jpg" alt="Leadpages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leadpages is an online tool that you can use to collect email subscribers. Mainly a landing page falls into two categories: to capture leads that enable you to market to people in the future, or. to "warm-up" potential customers to the product you're trying to sell to them before sending them further into your sales funnel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LeadPages offers 15 days of free pro access for new users.&lt;/strong&gt; If you haven't used LeadPages before then &lt;a href="https://bit.ly/332FTIh"&gt;click here&lt;/a&gt; to try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-instapage"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://bit.ly/32YzA8G"&gt;Instapage&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BsbTR3eX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iso49jpuzsvofg9d1p6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsbTR3eX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iso49jpuzsvofg9d1p6.jpg" alt="Instapage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instapage is the leader in post-click automation and helps digital advertisers create more relevant and impactful advertising by unifying the post-click stage of the advertising funnel. With Instapage, marketers can maximize conversions by creating, personalizing, and optimizing post-click landing pages at scale, and automatically connecting ads with relevant post-click pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-moosend"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://bit.ly/3eSAnxN"&gt;Moosend&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7_CJRw9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixjh60f2t8anrns7gtgp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7_CJRw9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixjh60f2t8anrns7gtgp.jpg" alt="MOOSEND"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Moosend is your number one Email Marketing Service Provider and Lead generation tool, equipping you with world-class features to step up your marketing game. With our platform, you can dive into the world of email marketing and create the most responsive newsletters to amaze your subscribers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moosend offers unlimited days of free pro access (up to 1000 subs) for new users.&lt;/strong&gt; If you haven't used Moosend before then &lt;a href="https://bit.ly/3eSAnxN"&gt;click here&lt;/a&gt; to try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If your main purpose is lead generation then &lt;a href="https://bit.ly/332FTIh"&gt;LeadPages&lt;/a&gt; is the best tool for you but if you want extra features (Email marketing) then &lt;a href="https://bit.ly/3eSAnxN"&gt;Moosend&lt;/a&gt; is the best tool for you because Moosend provides a lead generation tool with all email marketing tools.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create a MERN app from a CSV</title>
      <author>gaston gorosterrazu</author>
      <pubDate>Wed, 28 Apr 2021 15:19:35 +0000</pubDate>
      <link>https://dev.to/gastonius/create-a-mern-app-from-a-csv-5h4m</link>
      <guid>https://dev.to/gastonius/create-a-mern-app-from-a-csv-5h4m</guid>
      <description>&lt;p&gt;Hello, so a new player is in town: Aptugo. And I would love to show you how it changes the paradigm on software development.&lt;/p&gt;

&lt;p&gt;It takes literally less than 2 minutes to have a CRUD application from a CSV up and working built on MERN (MongoDB Express React Node)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Open Aptugo&lt;/p&gt;

&lt;p&gt;If you haven't got a copy yet, just head to their website (&lt;a href="https://www.aptugo.com"&gt;https://www.aptugo.com&lt;/a&gt;) and send a contact inquiry asking for a trial. Chances are that in less than 1 hour you'll have it up and running.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Create a new App&lt;/p&gt;

&lt;p&gt;Set any name, you don't need instructions for this :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Drop a CSV&lt;/p&gt;

&lt;p&gt;Make sure you choose the right option (it changes, but usually says: "process the CSV as data")&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8iXj4NE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://crm.aptugo.com/img/Screen%2520Shot%25202021-04-28%2520at%252012.07.33%2520PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8iXj4NE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://crm.aptugo.com/img/Screen%2520Shot%25202021-04-28%2520at%252012.07.33%2520PM.png" alt="Drop CSV into Aptugo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will ask for the table name to save this into. Keep in mind it will create your API, reducers, etc related to this name. I went with "companies"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Move companies inside the dashboard&lt;/p&gt;

&lt;p&gt;In order for the link to magically appear in the sidebar. Trivial step, but otherwise this tutorial would be way too short:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4aUj34P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://crm.aptugo.com/img/Screen%2520Shot%25202021-04-28%2520at%252012.12.28%2520PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4aUj34P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://crm.aptugo.com/img/Screen%2520Shot%25202021-04-28%2520at%252012.12.28%2520PM.png" alt="Move Companies inside Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is just a drag-n-drop in the Pages section.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Save and Build&lt;/p&gt;

&lt;p&gt;Hit the SAVE button, then the BUILD button next to it.&lt;/p&gt;

&lt;p&gt;Done. Head to your builds folder and you'll have your application ready to run as shown (first time it builds it takes one minute or two as it automatically performs the npm install for us as well)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOT8uN4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://crm.aptugo.com/img/Screen%2520Shot%25202021-04-28%2520at%252012.16.22%2520PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOT8uN4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://crm.aptugo.com/img/Screen%2520Shot%25202021-04-28%2520at%252012.16.22%2520PM.png" alt="Basic Application up and running in 30 secs!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! I would say it is like create-react-app but also creates the back-end for us, and the redux store... but it is much more than that!&lt;/p&gt;

</description>
      <category>aptugo</category>
      <category>react</category>
      <category>node</category>
      <category>mern</category>
    </item>
    <item>
      <title>Enhance your GITHUB experience by using Chrome extensions</title>
      <author>Peteroums</author>
      <pubDate>Wed, 28 Apr 2021 15:16:29 +0000</pubDate>
      <link>https://dev.to/peterthoums/enhance-your-github-experience-by-using-chrome-extensions-5h5c</link>
      <guid>https://dev.to/peterthoums/enhance-your-github-experience-by-using-chrome-extensions-5h5c</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3QsBK_K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii9r6i0we7dvd9dp2azw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3QsBK_K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii9r6i0we7dvd9dp2azw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a developer, we use GitHub every day and it is already a great tool, but what if we can make it even better with some chrome extensions!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-octotree"&gt;
  &lt;/a&gt;
  1. Octotree
&lt;/h1&gt;

&lt;p&gt;It enhances GitHub code review and exploration with features like:&lt;br&gt;
IDE-like code tree&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Folder and file search&lt;/li&gt;
&lt;li&gt;Issues and Pull Request bookmarking&lt;/li&gt;
&lt;li&gt;Support for private repositories&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I like this extension very much! It lets you explore the files and folders of a repository with a tree like structure.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2refined-github"&gt;
  &lt;/a&gt;
  2.Refined GitHub
&lt;/h1&gt;

&lt;p&gt;It simplifies the GitHub interface and adds useful features too, for instance:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Adds reaction avatars showing who reacted to a comment&lt;/li&gt;
&lt;li&gt;Adds one-click merge conflict fixers&lt;/li&gt;
&lt;li&gt;Adds a button to revert all the changes to a file in a PR&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#3-donotmergewip"&gt;
  &lt;/a&gt;
  3. Do-not-merge-WIP
&lt;/h1&gt;

&lt;p&gt;Disables "Merge pull request" button while ANY of the following is true:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Title contains "[wip]" (case insensitive)&lt;/li&gt;
&lt;li&gt;Any tasks remain incomplete&lt;/li&gt;
&lt;li&gt;Any commit messages remain prefixed with "squash!" or "fixup!"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://cmsinstallation.blogspot.com/2021/04/chrome-extensions-i-use-to-enhance-my.html"&gt;GET SOME MORE EXTENSTION&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>programming</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Still 100 underline/overlay animations | The advanced CSS collection 🚀</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 28 Apr 2021 15:06:28 +0000</pubDate>
      <link>https://dev.to/afif/still-100-underline-overlay-animations-the-advanced-css-collection-4mol</link>
      <guid>https://dev.to/afif/still-100-underline-overlay-animations-the-advanced-css-collection-4mol</guid>
      <description>&lt;p&gt;300 animations were not enough? Ok, I have done 100 more animations and, guess what, still No extra elements, No pseudo element, No SVG, No Keyframe and No JS. Only &lt;strong&gt;one&lt;/strong&gt; element and some magic transitions!&lt;/p&gt;

&lt;p&gt;This time I will introduce the &lt;code&gt;@property&lt;/code&gt; to be able to animate CSS variables. Sorry Firefox users, most of animations won't work since there is no support for &lt;code&gt;@property&lt;/code&gt;. I highly recommend Chrome or Edge to fully enjoy all the 100 animations!&lt;/p&gt;

&lt;p&gt;Refer to my previous article for more detail about &lt;code&gt;@property&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/we-can-finally-animate-css-gradient-kdk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;We can finally animate CSS gradient&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Feb 26 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-shape-ii"&gt;The Shape II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-multisteps"&gt;The Multi-Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-mixed"&gt;The Mixed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-colorful"&gt;The Colorful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-pixelated"&gt;The Pixelated&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-irregular-ii"&gt;The Irregular II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-multicolor-ii"&gt;The Multicolor II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-all-sides-iii"&gt;The All Sides III&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-fancy-iv"&gt;The Fancy IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-inverted-iv"&gt;The Inverted IV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-broken-ii"&gt;The Broken II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-crushed"&gt;The Crushed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-area-51"&gt;The Area 51&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-arcade-ii"&gt;The Arcade II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-shape-ii"&gt;
  &lt;/a&gt;
  The Shape II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BapEMRd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-multisteps"&gt;
  &lt;/a&gt;
  The Multi-Steps
&lt;/h3&gt;

&lt;p&gt;PS: all the below will not work on Firefox&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/rNjbPzR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-mixed"&gt;
  &lt;/a&gt;
  The Mixed
&lt;/h3&gt;

&lt;p&gt;PS: #6 will not work on Firefox&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKaYJyx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-colorful"&gt;
  &lt;/a&gt;
  The Colorful
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/xxgeMWb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-pixelated"&gt;
  &lt;/a&gt;
  The Pixelated
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abpxXRz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-irregular-ii"&gt;
  &lt;/a&gt;
  The Irregular II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRrLzwM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-multicolor-ii"&gt;
  &lt;/a&gt;
  The Multicolor II
&lt;/h3&gt;

&lt;p&gt;PS: all the below will not work on Firefox&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BapEMvr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-all-sides-iii"&gt;
  &lt;/a&gt;
  The All Sides III
&lt;/h3&gt;

&lt;p&gt;PS: #1, #2 and #7 will not work on Firefox&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/LYxvaPb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fancy-iv"&gt;
  &lt;/a&gt;
  The Fancy IV
&lt;/h3&gt;

&lt;p&gt;PS: all the below will not work on Firefox&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJWGqJE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-inverted-iv"&gt;
  &lt;/a&gt;
  The Inverted IV
&lt;/h3&gt;

&lt;p&gt;The below will not work on Firefox due to a &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1571244"&gt;known bug&lt;/a&gt; and also due to the lack of support for &lt;code&gt;@property&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/yLgrwaB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-broken-ii"&gt;
  &lt;/a&gt;
  The Broken II
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abpxMWB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-crushed"&gt;
  &lt;/a&gt;
  The Crushed
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWdmJvm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-area-51"&gt;
  &lt;/a&gt;
  The Area 51
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;☢️ Danger Zone&lt;/strong&gt;: hover the below at your own risk!&lt;/p&gt;

&lt;p&gt;PS: #2 will not work on Firefox&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWdmJyV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-arcade-ii"&gt;
  &lt;/a&gt;
  The Arcade II
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: the below may 🤯🤯 &lt;/p&gt;

&lt;p&gt;PS: All the below will not work on Firefox&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/YzNMgvL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Tell me which one is your favorite 👇 and don't forget to ❤️🦄 if you want me to do another collection. Can we make this reach 500 animations? Your reactions will decide!&lt;/p&gt;

&lt;p&gt;I am also on twitter:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0-click-here-amp-follow-me"&gt;
  &lt;/a&gt;
                       &lt;a href="https://twitter.com/ChallengesCss"&gt;Click Here &amp;amp; Follow me&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;           &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Hooks in React</title>
      <author>Mursal Furqan</author>
      <pubDate>Wed, 28 Apr 2021 15:06:11 +0000</pubDate>
      <link>https://dev.to/mursalfk/hooks-in-react-46d1</link>
      <guid>https://dev.to/mursalfk/hooks-in-react-46d1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;When it comes to web development, who doesn't love using one of the most awesome and lively featured Javascript library, React, often referred to as ReactJS. Today we are going to know about of the most awesome feature of ReactJS' version 16.8.&lt;br&gt;
Cutting the chase, I was introduced to the awesome world of React by my mentors at my current workplace, and since then I am after React and learning it as much as I can in a befitting manner. And no doubt, one of the most fascinating features to me was &lt;strong&gt;React Hooks&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-hooks-in-react"&gt;
  &lt;/a&gt;
  What are hooks in &lt;strong&gt;React&lt;/strong&gt;?
&lt;/h2&gt;

&lt;p&gt;Hooks were introduced in React Version 16.8. One of their most awesome and well knows feature is it that they let you use state and other React features in a &lt;em&gt;Functional Component&lt;/em&gt;. &lt;br&gt;
So Basically, Hooks are the functions which literally, Hook Into, React state, and lifecycle features from functional components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-hooks-work"&gt;
  &lt;/a&gt;
  How Hooks work?
&lt;/h2&gt;

&lt;p&gt;Before we know how React hooks work, let us define what closure is. “Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.”&lt;/p&gt;

&lt;p&gt;To make it a bit easy to understand, hooks let you use the functions instead of switching between HOCs, Classes, and functions. As Hooks are regular Javascript functions, thus you can use the built-in Hooks and create your own custom one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#always-remember"&gt;
  &lt;/a&gt;
  Always remember
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hooks should always be called at the Top Level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By following this rule, you are making sure that Hooks are always called in the same order as they were declared each time your component renders. (Remember that don't ever call the hooks inside the functions that are nested and also inside the loops.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hooks should always be called from React Functions.
Don't call Hooks from regular JavaScript functions. Instead, you can&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Call Hooks from React Function components.&lt;/li&gt;
&lt;li&gt;Call Hooks from custom Hooks.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Can't quench your thirst for learning more about hooks in react? Stay tuned for more articles on types, examples, usages, and other aspects of mastering the art of using hooks in React.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>hooks</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Stop pressuring people into programming</title>
      <author>Matteo Vignoli</author>
      <pubDate>Wed, 28 Apr 2021 14:58:16 +0000</pubDate>
      <link>https://dev.to/damienpirsy/stop-pressuring-people-into-programming-29if</link>
      <guid>https://dev.to/damienpirsy/stop-pressuring-people-into-programming-29if</guid>
      <description>&lt;p&gt;100 days of code. Side projects. Weekend projects. Hackatons. Night coding sessions on Twitch. Evening courses on Udemy.&lt;/p&gt;

&lt;p&gt;Please, stop.&lt;/p&gt;

&lt;p&gt;When I started my career into web development, more than a dozen years ago, there were plenty of resources for learning but I don't remember all this huge pressure into becoming a programmer. There wasn't a proliferation of bootcamps, online courses, no one was telling you from every direction that you needed to code every day or you would've been invisible.&lt;/p&gt;

&lt;p&gt;Stackoverflow wasn't born yet - it was a matter of months, but until that day all the knowledge was in dead forum posts or the "website with the hyphen" (after changing the ambiguous domain name); in frontend, jQuery was the king among libraries and the PHP environment was dominated by Joomla!, Drupal or Wordpress; frameworks where starting to appear (Laravel was at version 3 when I first knew about it, and Codeigniter was the most widely used among beginners) but most entry level tutorials were just a mess of unsafe spaghetti code.&lt;/p&gt;

&lt;p&gt;In the blink of an eye everything changed: Node.js, AngularJS and then Angular, React, CSS pre-processors, Javascript was again EcmaScript. The frontend avalanche relentlessy changed the face of web development pushing us full-stack jQuery+PHP dinosaurs into the brink of extinction.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YU0I9Hf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sczsmfmllqv6sn7hpf8u.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YU0I9Hf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sczsmfmllqv6sn7hpf8u.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More and more online courses were sprouting and there was an explosion of frameworks, packages, libraries. The Cloud stormed the infrastructure environment, microservices where the new structural paradigm and containers (almost) the new infrastructural standard.&lt;/p&gt;




&lt;p&gt;All jobs need you to stay updated, I know. But man, I don't think there is one so demanding and draining, today, as the programmer.&lt;/p&gt;

&lt;p&gt;The young generations are pouring their massive energy into working and coding, pushed by those who want to sell their courses or promote their content. They're encouraged to teach something as soon as they learned it for the first time, creating a plethora of beginner tutorials which rarely go far from the official documentation of what they're teaching. They're told to show skills by building something, and now we're full of NPM packages for every trivial thing (just search for "lowercase" or "uppercase". Really?) and a lot of abandoned github projects. They're molded into thinking that every project they want to build must be a start-up: investors, fundraising rounds, promotion, marketing, a total commitment of your life - when you just wanted to make a website for fun.&lt;/p&gt;




&lt;p&gt;Don't get me wrong, this widespread diffusion of programming is doing way more good than harm in every aspect; but there's something which is often overlooked, something off, a toxic substrate permeating the ecosystem.&lt;/p&gt;

&lt;p&gt;Everywhere I look there's someone telling me to keep a rich and shiny GitHub profile so I could make a difference in job interviews, to do as many side projects as possible in order to be a better programmer, to dedicate my free time to learning and becoming a Rockstar (or Ninja) developer, or they want me to learn the secrets that could make me a "10x engineer" in no time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do what you love, and you'll never work another day in your life.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Except you won't have any free time.&lt;/p&gt;

&lt;p&gt;Do you have a 8+ hours regular job as a programmer? Well, that's not enough. When you badge out your daily work, you need to badge into the "passionate work", because you're a programmer, right? You have a passion for programming, don't you? What, no weekend project to learn new languages and new skills? No github repo to push your code to? You must be a slacker, then.&lt;/p&gt;

&lt;p&gt;I'm sick and tired of this attitude. I might be just getting old, but I don't want to sacrifice my free time running behind the technology train. I want to turn off my PC after a day's work and be done with it, without feeling guilty. I want to spend time with my wife and my daughter, I have a house to clean and attend to, I want to watch a movie, sleep, or just plain do nothing on the couch.&lt;/p&gt;

&lt;p&gt;And that doesn't make me a mediocre programmer. I don't want to be coding all the time, always building something, always studying, always solving problems. I have a huge passion for my job and I pour it into what I do in my regular work, but I want free time to cultivate &lt;em&gt;other&lt;/em&gt; passions (because there's something beyond coding), or just to relax - without the overwhelming push to become a more productive person, a top programmer, an open source contributor, a tech guru or whatever.&lt;/p&gt;

&lt;p&gt;Time is always in short supply - you can't do everything you want, let alone everything the society wants you to become.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>motivation</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Add a Redis cache to your NestJS backend</title>
      <author>Leonidas</author>
      <pubDate>Wed, 28 Apr 2021 14:53:19 +0000</pubDate>
      <link>https://dev.to/fastmodularproject/add-a-redis-cache-to-your-nestjs-backend-aog</link>
      <guid>https://dev.to/fastmodularproject/add-a-redis-cache-to-your-nestjs-backend-aog</guid>
      <description>&lt;p&gt;Hi Sparta!&lt;/p&gt;

&lt;p&gt;In this article I will share with you how to use Redis as scalable cache system in your NestJS backend. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The full source code and the documentation is available &lt;a href="https://fast-modular-project.com/modules/redis-cache-nest-js"&gt;here&lt;/a&gt;&lt;/strong&gt; 🙂&lt;/p&gt;

&lt;p&gt;This cache system module will be added top of the React/Node/MySQL starter. This starter has already been presented to you in &lt;a href="https://dev.to/fastmodularproject/web-starter-react-nestjs-mysql-3o9i"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#redis-in-3-words"&gt;
  &lt;/a&gt;
  Redis in 3 words
&lt;/h1&gt;

&lt;p&gt;Redis is an open source in-memory data structure store, that can be used either as a &lt;strong&gt;cache&lt;/strong&gt;, either as a &lt;strong&gt;database&lt;/strong&gt;, or a &lt;strong&gt;message broker&lt;/strong&gt; (like JMS or RabbitMQ). Even in critical applications, Redis is used in production as it provides a high availability via the Redis Sentinels and a automatic partitioning thanks to the Redis Cluster.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configure-your-nestjs-backend-to-use-redis"&gt;
  &lt;/a&gt;
  Configure your NestJS backend to use Redis
&lt;/h1&gt;

&lt;p&gt;This section is an overhead on top for the &lt;a href="https://docs.nestjs.com/techniques/caching"&gt;official documentation&lt;/a&gt; from NestJS, to adapt it to the web starter.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You should install following packages:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install cache-manager
npm install cache-manager-redis-store
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You should specify your backend environments variables:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    export const environment = {
        ...,
        redis: {
            host: process.env.LOCAL_IP,
            port: process.env.REDIS_PORT,
            defaultTtl: 86400
        }
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You should now create a NestJS module &lt;code&gt;MyRedisCacheModule&lt;/code&gt; with it's service &lt;code&gt;MyRedisCacheService&lt;/code&gt; to interact with your cache through the &lt;code&gt;cache-manager&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;set&lt;/code&gt;: allows you to set a cached value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;get&lt;/code&gt;: allows to retrieve the value (will be undefined when TTL expired).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;del&lt;/code&gt;: allows you to deleted a stored key.&lt;/p&gt;

&lt;p&gt;The controller and the service:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gets a cached value in Redis&lt;/li&gt;
&lt;li&gt;stores a value in Redis&lt;/li&gt;
&lt;li&gt;deletes a stored key &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The controller and service are available &lt;a href="https://fast-modular-project.com/modules/redis-cache-nest-js"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; 🙂&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup-redis-for-dev-environment"&gt;
  &lt;/a&gt;
  Setup Redis for dev environment
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The initial starter's &lt;code&gt;docker-compose&lt;/code&gt; file launches our local databases (with a volume attached), our backend and our frontend. We'll modify it to also launch a redis server locally when starting our web app with &lt;code&gt;docker-compose up&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;services:
  db:
    ...

  back:
    ...

  cache:
    image: "redis:alpine"
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    env_file: ./.env

  front:
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(optional) to specify a password for this service you can add &lt;code&gt;command: redis-server --requirepass yourpassword&lt;/code&gt; in the &lt;code&gt;docker-compose.yaml&lt;/code&gt; and add also the password in your backend &lt;code&gt;redisStore&lt;/code&gt;: &lt;code&gt;auth_pass: 'password'&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The environments variables in &lt;code&gt;.env&lt;/code&gt; are loaded by docker when launching your app with &lt;code&gt;docker-compose up&lt;/code&gt;. You'll to add to this file the redis port you wanna use:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
REDIS_PORT = 6379
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your redis cache system is now alive locally 🙂&lt;br&gt;
You can test the test endpoints created in last section with Postman!&lt;/p&gt;

&lt;p&gt;You want to use a cache system in production ? Let's jump to the next section.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup-redis-for-prod-environment"&gt;
  &lt;/a&gt;
  Setup Redis for prod environment
&lt;/h1&gt;

&lt;p&gt;From your code point of view, you'll only need to adapt your environment variables to route to a production AWS ElastiCache. For your Redis instance, the non clustered mode should be enough if not dealing with a large volume of datas. The best documentation to be read for this step is the great one provided by &lt;a href="https://aws.amazon.com/fr/blogs/database/latency-reduction-of-hybrid-architectures-with-amazon-elasticache/"&gt;AWS for ElastiCache&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope this module will help you saving some time while trying to optimize your backend performance with a Redis cache. If you have any question, I'll be present as usual in the comment section!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The platform sharing the starter and it's modules: &lt;a href="https://fast-modular-project.com"&gt;Fast Modular Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Module "Scalable caching system with Redis and NestJS" is available &lt;a href="https://fast-modular-project.com/modules/redis-cache-nest-js"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do not hesitate to pin and like if you appreciated the article ❤️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>redis</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
