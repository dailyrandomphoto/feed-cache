<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Things Always Break When You Run</title>
      <author>Clifton Hill</author>
      <pubDate>Fri, 11 Dec 2020 20:15:17 +0000</pubDate>
      <link>https://dev.to/cliftonhill/things-always-break-when-you-run-1fn8</link>
      <guid>https://dev.to/cliftonhill/things-always-break-when-you-run-1fn8</guid>
      <description>&lt;p&gt;Trying to learn a new skill deeply, with a family to support, in 2020 of all years, while networking with others and job hunting, well...it was bound to happen.&lt;/p&gt;

&lt;p&gt;I had my Linux VM setup on my Windows machine. Was doing all of my development and training on Linux, when I lost months of notes, files and projects.&lt;/p&gt;

&lt;p&gt;I suppose I had it coming to me, working in Linux was something I only started at the end of 2019 because that was how Hack Reactor taught (either on a Mac or Linux). Finding this out mid-stream meant I had to setup Linux in a hurry, and I didn't bother with a backup option. (I'm really not that sloppy.) Months ago, I had tried to connect my Linux VM to my home network USB HD drives, but I could find no solution there, so I went back to the grind, crossing my fingers it would all be okay.&lt;/p&gt;

&lt;p&gt;I must have uncrossed my fingers at some point.&lt;/p&gt;

&lt;p&gt;Still not sure what happened, but it would appear that all of my changes were lost since the prior Snapshot taken on Virtual Box. The worst part of it all were the copious notes I had taken during my learning process.&lt;/p&gt;

&lt;p&gt;But, as it happens, Win 10 is working just fine for web development, and I won't be developing in Linux until I have a moment to get that network problem figured out and back up like I should have done from the beginning.&lt;/p&gt;

&lt;p&gt;Learn from me and don't wait 10 months to backup your work and end up losing 6 months of notes. &lt;/p&gt;

</description>
      <category>linux</category>
      <category>tips</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Dotfiles - Put your home directory under `git`</title>
      <author>Corey Alexander</author>
      <pubDate>Fri, 11 Dec 2020 15:08:18 +0000</pubDate>
      <link>https://dev.to/coreyja/dotfiles-put-your-home-directory-under-git-51l9</link>
      <guid>https://dev.to/coreyja/dotfiles-put-your-home-directory-under-git-51l9</guid>
      <description>&lt;p&gt;&lt;span&gt;Photo by &lt;a href="https://unsplash.com/@cgower"&gt;Christopher Gower&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/code"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Silicon Valley Season 2 ruined it for me. Richard had worked so hard on Pied Piper, but Gavin is almost able to steal it from him. Why? Cause Richard pulled down the code he had written on his work device and ran the test suite. How could something so trivial almost cost him so much! That season embedded itself in me, and now I try to keep my personal and professional software as separate as can be. And one thing this requires is having a personal machine, on top of the computer provided by my employer.&lt;/p&gt;

&lt;p&gt;As anyone who's done development on different machines can speak to, I found it frustrating at first when settings from one device didn't transfer to the other. For a while, I used Google Drive to manage settings for a few different apps, including the text editor I used at the time. But eventually, I started doing more things in my terminal, and I wanted to keep a copy of the configuration files for all my terminal programs and tools, somewhere that I could share between machines. I did what seemed to me to be the norm and created a &lt;code&gt;dotfiles&lt;/code&gt; repo on Github. And used some tool to symlink or copy between the actual 'live' files in my home directory &lt;code&gt;~&lt;/code&gt;, and the repo files living in their project directory, something like &lt;code&gt;~/Projects/dotfiles&lt;/code&gt;. I did this for years and thought of it as a solved problem. That isn't to say this setup didn't have issues. I would often experiment with something and edit the 'live' configuration files for a quicker feedback loop and forget to update the 'project' files. Or once I switched to symlinks, I would add a new file to a directory 'live', and it would never end up in the &lt;code&gt;git&lt;/code&gt; repo at all. I had half-solutions to both of these issues, though, and I was happy.&lt;/p&gt;

&lt;p&gt;One day, I talked to a co-worker, and they told me something that would change my dotfiles forever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can make your home directory a git repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This thought immediately struck me. Why should I keep a separate directory with a copy of these files or deal with symlinking across the directories? It made so much sense! With a single set of files, I would eliminate a whole suite of small annoyances I had with my dotfiles.&lt;/p&gt;

&lt;p&gt;However, I was worried about this kind of setup. I have my projects nested under my home directory, so would that break things? Was I going to commit these projects in my dotfiles? Was I finally going to learn what git sub-modules were?&lt;/p&gt;

&lt;p&gt;Luckily my co-worker also gave me the magic sauce to make this happen, and I've adopted it in my dotfiles ever since! The 'trick' is to change your &lt;code&gt;.gitignore&lt;/code&gt; file to an 'allow list' instead of a 'block list'. The syntax of &lt;code&gt;.gitignore&lt;/code&gt; makes this pretty easy!&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.gitignore&lt;/code&gt; file is processed from top to bottom, so to start this trick, we add &lt;code&gt;*&lt;/code&gt; as the first line in our &lt;code&gt;gitignore&lt;/code&gt;. Now, &lt;code&gt;git&lt;/code&gt; is actually going to ignore every file. We can go back in, and one by one, allow different files and directories with the &lt;code&gt;!&lt;/code&gt; prefix operator! For example, a very minimalistic &lt;code&gt;.gitignore&lt;/code&gt; for a dotfiles repo like this might be like the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*

!.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this setup, you can easily share your &lt;code&gt;bash_profile&lt;/code&gt; between machines in your dotfiles repo and be confident this is the only file shared. Only the things you explicitly allow in the &lt;code&gt;.gitignore&lt;/code&gt; file will be included in the repo! I find this works really well for a dotfiles repo, as I have many more files in my home directory that I want git to ignore, it would be tedious and error-prone to try to block each of them individually.&lt;/p&gt;

&lt;p&gt;Luckily having 'nested' git repo's like this doesn't really affect the 'inner' repos at all. By that, I mean that my project repos are none the wiser to my dotfiles setup, and no special config is needed for them. Git tools simply look upwards for the closest &lt;code&gt;.git&lt;/code&gt; directory, so having one farther up the directory tree isn't an issue.&lt;/p&gt;

&lt;p&gt;The one caveat to be aware of if you dive in with me and take this approach is that you are almost &lt;em&gt;always&lt;/em&gt; in a git repo. Even if you are simply in a git ignored directory. Does this matter? In practice, I find it really doesn't a ton. My &lt;code&gt;bash_prompt&lt;/code&gt; always shows me I'm in a git repo, but nothing else is really affected.&lt;/p&gt;

&lt;p&gt;I've been doing my dotfiles like this for a while, and I can't imagine going back! Maybe give it a shot and let me know what you think.&lt;/p&gt;

&lt;p&gt;If you want a more detailed explanation of how to set this up, keep reading with me, and we'll walk through it together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;The actual how of doing it is slightly more complicated but only as a one-time setup. Let's walk through how you might set up a new dotfiles repo directly in your home directory and share it across multiple machines!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-repo-on-your-first-machine" class="anchor"&gt;
  &lt;/a&gt;
  Creating a repo on your first machine
&lt;/h3&gt;

&lt;p&gt;So to start out, let's assume you have some files in your home directory that you want to put in your dotfiles repo. &lt;/p&gt;

&lt;p&gt;Warning: If your dotfiles are symlinks to the 'real' files elsewhere, you will want to replace those symlinks with actual copies of the files before we get started. If you follow these steps with symlinks, git will only pick up the symlink destination and not the actual file contents.&lt;/p&gt;

&lt;p&gt;Ok, let's get started! I'm gonna hop into a VM so that we can start fresh together.&lt;br&gt;
I have three files I want to share between machines: &lt;code&gt;.bash_profile&lt;/code&gt; and &lt;code&gt;.bash_prompt&lt;/code&gt; for all my 100% necessary bash customizations. And then &lt;code&gt;.gnupg/gpg-agent.conf&lt;/code&gt;, which contains some setup that I needed to make my Yubikey work. But even in a brand new VM, my home directory is full of way more than that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pwd
/home/coreyja
$ ls -a
.       Downloads .sudo_as_admin_successful
..      .gnupg   Templates
.bash_history gpg.pub    .vboxclient-clipboard.pid
.bash_logout  .local     .vboxclient-display-svga-x11.pid
.bash_prompt  Music  .vboxclient-draganddrop.pid
.cache      Pictures  .vboxclient-hostversion.pid
.config    .profile  .vboxclient-seamless.pid
Desktop    Public    Videos
Documents   .ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, we need to create a new git repo. We can just run &lt;code&gt;git init .&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git init .
Initialized empty Git repository in /home/coreyja/.git/
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As an optional step, we will also switch to a &lt;code&gt;main&lt;/code&gt; branch that we will use here as the default branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout -b main
Switched to a new branch 'main'
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Tip: If you have &lt;code&gt;git&lt;/code&gt; version 2.28.0 or newer, you can do this from your git init with the &lt;code&gt;--initial-branch&lt;/code&gt; flag. Ex: &lt;code&gt;git init . --initial-branch=main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Right now, we have an empty git repo, but it 'wants' to track everything in my home directory. Nothing is tracked because we haven't &lt;code&gt;git add&lt;/code&gt;ed anything, but the entire home directory is coming up as untracked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git status
On branch main

No commits yet

Untracked files:
 (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
    .bash_history
    .bash_logout
    .bash_prompt
    .cache/
    .config/
    .gnupg/
    .local/
    .profile
    .ssh/
    .sudo_as_admin_successful
    .vboxclient-clipboard.pid
    .vboxclient-display-svga-x11.pid
    .vboxclient-draganddrop.pid
    .vboxclient-seamless.pid
    gpg.pub

nothing added to commit but untracked files present (use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's add a &lt;code&gt;.gitignore&lt;/code&gt; file that ignores everything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '*' &amp;gt; .gitignore
$ git status
On branch main

No commits yet

nothing to commit (create/copy files and use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, &lt;code&gt;git status&lt;/code&gt; shows that there is nothing to commit because we ignored everything. But we actually DO want to track the &lt;code&gt;.gitignore&lt;/code&gt; file we made. That is because &lt;code&gt;.gitignore&lt;/code&gt; basically becomes the 'manifest' of files to commit to the repo, and as such, does need to be present on each machine. So let's add to our &lt;code&gt;.gitignore&lt;/code&gt; file to tell it we DO want to track the &lt;code&gt;.gitignore&lt;/code&gt; file itself, how meta.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '!.gitignore' &amp;gt;&amp;gt; .gitignore
$ git status
On branch main

No commits yet

Untracked files:
 (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
    .gitignore

nothing added to commit but untracked files present (use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The syntax used was to put a &lt;code&gt;!&lt;/code&gt; before the file name, which acts like a NOT ignore; tracking the file!&lt;/p&gt;

&lt;p&gt;Now that git shows some untracked changes, we can add the &lt;code&gt;.gitignore&lt;/code&gt; file and commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add --all
$ git commit -m "The bare bones of our dotfiles setup. Currently just a gitignore file that ignores everything besides itself"
[main (root-commit) 664ab8d] The bare bones of our dotfiles setup. Currently just a gitignore file that ignores everything besides itself
 1 file changed, 2 insertions(+)
 create mode 100644 .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And from here, we can just repeat what we did for &lt;code&gt;.gitignore&lt;/code&gt; and add the rest of the files we want to track! Lets start with the &lt;code&gt;.bash_profile&lt;/code&gt; and &lt;code&gt;.bash_prompt&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '!.bash_profile' &amp;gt;&amp;gt; .gitignore
$ echo '!.bash_prompt' &amp;gt;&amp;gt; .gitignore
$ git status
On branch main
Changes not staged for commit:
 (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)
 (use "git restore &amp;lt;file&amp;gt;..." to discard changes in working directory)
    modified:  .gitignore

Untracked files:
 (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
    .bash_profile
    .bash_prompt

no changes added to commit (use "git add" and/or "git commit -a")
$ git add --all
$ git commit -m "Track the bash_profile and bash_prompt files"
[main fdd42e4] Track the bash_profile and bash_prompt files
 3 files changed, 4 insertions(+)
 create mode 100644 .bash_profile
 create mode 100644 .bash_prompt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's do the for the &lt;code&gt;.gnupg/gpg-agent.conf&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '!.gnupg/gpg-agent.conf' &amp;gt;&amp;gt; .gitignore
$ git status
On branch main
Changes not staged for commit:
 (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)
 (use "git restore &amp;lt;file&amp;gt;..." to discard changes in working directory)
    modified:  .gitignore

no changes added to commit (use "git add" and/or "git commit -a")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Hmm, that didn't work quite as well... That's due to how gitignore works on directories. You need to allow BOTH the directory and the file. For things in sub-directories, you need the 'allow' each directory and the final file. Once we ignore the directory, we can go ahead and commit the &lt;code&gt;gpg-agent.conf&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ echo '!.gnupg/' &amp;gt;&amp;gt; .gitignore
$ git status
On branch main
Changes not staged for commit:
 (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)
 (use "git restore &amp;lt;file&amp;gt;..." to discard changes in working directory)
    modified:  .gitignore

Untracked files:
 (use "git add &amp;lt;file&amp;gt;..." to include in what will be committed)
    .gnupg/

no changes added to commit (use "git add" and/or "git commit -a")
$ git add -all
$ git status
On branch main
Changes to be committed:
 (use "git restore --staged &amp;lt;file&amp;gt;..." to unstage)
    modified:  .gitignore
    new file:  .gnupg/gpg-agent.conf
$ git commit -m "Add the gpg-agent file as well"
[main e228187] Add the gpg-agent file as well
 2 files changed, 5 insertions(+)
 create mode 100644 .gnupg/gpg-agent.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After all this, here is my &lt;code&gt;.gitignore&lt;/code&gt; file (eagle-eyed readers will notice I reordered this, so the &lt;code&gt;.gnupg/&lt;/code&gt; directory comes before the filename, this is optional, but I like how it looks better personally).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat .gitignore 
*
!.gitignore
!.bash_profile
!.bash_prompt
!.gnupg/
!.gnupg/gpg-agent.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can push this up to your Git host of choice; I'll use Github here to demo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git remote add origin git@github.com:coreyja/example-dotfiles.git
$ git push --set-upstream origin main
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (13/13), 1.07 KiB | 1.07 MiB/s, done.
Total 13 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To github.com:coreyja/example-dotfiles.git
 * [new branch]   main -&amp;gt; main
Branch 'main' set up to track remote branch 'main' from 'origin'.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And there we go! You can expand on this to add any files you want in your dotfiles repo! You can edit the 'live' files in place and easily commit the results. You don't have to worry about accidentally leaking anything from your home directory since you have to manually allow files and directories.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloning-this-repo-on-your-second-machine" class="anchor"&gt;
  &lt;/a&gt;
  Cloning this repo on your second machine
&lt;/h3&gt;

&lt;p&gt;Ok, so now let's move to machine two, and copy these dotfiles down. For this demo, let's also look at what happens when there is a conflict and your second machine's version doesn't match the version we had on our original machine.&lt;/p&gt;

&lt;p&gt;On this machine, we have a slightly different bash prompt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ cat .bash_prompt 
export PS1="Machine2$ "
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we try to clone the repo we created, we will get an error since we don't have an empty directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git clone git@github.com:coreyja/example-dotfiles.git .
fatal: destination path '.' already exists and is not an empty directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So what we need to do is create an empty git repo, and then wire up the origin and do a fetch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git init
Initialized empty Git repository in /home/coreyja/.git/
Machine2$ git remote add origin git@github.com:coreyja/example-dotfiles.git
Machine2$ git fetch
remote: Enumerating objects: 13, done.
remote: Counting objects: 100% (13/13), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 13 (delta 1), reused 13 (delta 1), pack-reused 0
Unpacking objects: 100% (13/13), 1.05 KiB | 540.00 KiB/s, done.
From github.com:coreyja/example-dotfiles
 * [new branch]   main    -&amp;gt; origin/main
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So now we have our remote all set up, let's set up a local branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git checkout -b main
Switched to a new branch 'main'
Machine2$ git reset --mixed origin/main
Unstaged changes after reset:
M   .bash_prompt
D   .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we used &lt;code&gt;git reset&lt;/code&gt; to tell git that our &lt;code&gt;HEAD&lt;/code&gt; is the same as the origin version, or we want to operate as if we were 'on' that commit. We use &lt;code&gt;--mixed&lt;/code&gt; so that it keeps our local changes. We can then see if any of our local changes are things we want to keep or remove.&lt;br&gt;
You might also notice it says we 'deleted' the &lt;code&gt;.gitignore&lt;/code&gt; file. This is because this machine didn't have a &lt;code&gt;.gitignore&lt;/code&gt;. We want to take this file from the version we already committed on the first machine. If we don't and run &lt;code&gt;git status&lt;/code&gt;, you will see we aren't yet ignoring the rest of the home directory. So let us go ahead and checkout the origin copy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git checkout origin/main -- .gitignore
Machine2$ git status
On branch main
Changes not staged for commit:
 (use "git add &amp;lt;file&amp;gt;..." to update what will be committed)
 (use "git restore &amp;lt;file&amp;gt;..." to discard changes in working directory)
    modified:  .bash_prompt

no changes added to commit (use "git add" and/or "git commit -a")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can take a look at the diff between our local version and the origin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ git diff
diff --git a/.bash_prompt b/.bash_prompt
index 6d41176..fdbe383 100644
--- a/.bash_prompt
+++ b/.bash_prompt
@@ -1 +1 @@
-export PS1="$ "
+export PS1="Machine2$ "
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this case, I think I want to throw away both versions and create a new prompt to use on both machines!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Machine2$ echo 'export PS1="coreyja $ "' &amp;gt; .bash_prompt
Machine2$ source .bash_prompt
coreyja $ git add -all
coreyja $ git commit -m "Get second machine setup and create a more unified prompt"
[main 9449185] Get second machine setup and create a more unified prompt
 1 file changed, 1 insertion(+), 1 deletion(-)
coreyja $ git push --set-upstream origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 311 bytes | 311.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To github.com:coreyja/example-dotfiles.git
  e228187..9449185 main -&amp;gt; main
Branch 'main' set up to track remote branch 'main' from 'origin'.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;While we were doing those last steps, we used &lt;code&gt;git add --all&lt;/code&gt;. When I've talked to people about this workflow before, they get worried that commands like this will accidentally commit more than they want. But as you can see, that isn't the case! &lt;code&gt;git add&lt;/code&gt; follows the &lt;code&gt;.gitignore&lt;/code&gt; file, so it will only add the files we explicitly allow.&lt;/p&gt;

&lt;p&gt;And there you have it! Now we have a dotfiles repo setup on two machines, but even better, the repo lives directly in your home directory! No more copying or symlinking! Simply edit the files and create a commit, nice and simple and using all the tools you already know and love!&lt;/p&gt;

&lt;p&gt;I hope more people give this technique a try and let me know what you think!&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>dotfiles</category>
      <category>terminal</category>
    </item>
    <item>
      <title>You Can Run Containers on AWS Amplify Now</title>
      <author>swyx</author>
      <pubDate>Fri, 11 Dec 2020 14:24:37 +0000</pubDate>
      <link>https://dev.to/swyx/you-can-run-containers-on-aws-amplify-now-23ka</link>
      <guid>https://dev.to/swyx/you-can-run-containers-on-aws-amplify-now-23ka</guid>
      <description>&lt;p&gt;The second week of &lt;a href="https://reinvent.awsevents.com/"&gt;AWS re:Invent&lt;/a&gt; brought a surprise major announcement from the AWS Amplify team: &lt;strong&gt;You can run Docker containers as AWS Amplify APIs now&lt;/strong&gt;!!!&lt;/p&gt;

&lt;p&gt;The main Achilles heel of migrating to serverless architectures is having to relearn and rewrite traditional serverful code. With &lt;a href="https://aws.amazon.com/blogs/mobile/zero-effort-container-deployment-for-graphql-and-rest-apis-and-web-hosting-with-amplify-cli/"&gt;the new Amplify Serverless Containers&lt;/a&gt;, it is now possible to deploy code in stateful Docker containers with the &lt;em&gt;exact same workflow&lt;/em&gt; as the rest of Amplify CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# example of the new CLI workflow, see docs for details&lt;/span&gt;
&lt;span class="c"&gt;# Amplify CLI version 4.39+&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;amplify init &lt;span class="c"&gt;# if you're setting up new Amplify project&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;amplify configure project
 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;container-based deployments? Yes

&lt;span class="nv"&gt;$ &lt;/span&gt;amplify add api

Please &lt;span class="k"&gt;select &lt;/span&gt;from one of the below mentioned services: REST
? Which service would you like to use 
  API Gateway + Lambda 
❯ API Gateway + AWS Fargate &lt;span class="o"&gt;(&lt;/span&gt;Container-based&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the first time, this opens up the possibility of running &lt;strong&gt;Rails, Django, Laravel&lt;/strong&gt;, or any other traditionally serverful APIs &lt;em&gt;seamlessly&lt;/em&gt; alongside a serverless architecture. If it fits in a Docker container, you can run it! This thus unlocks the full capabilities of their respective ecosystems. &lt;/p&gt;

&lt;p&gt;Emphasis on &lt;em&gt;seamless&lt;/em&gt; integration: this means that frontend and mobile developers don't need to go to 9 months of cloud school (having to learn the details of VPC, subnets, NACLs, IAM policies, SSL generation, continuous deploy, cost optimization, etc) just in order to get a containerized API up and running on AWS.&lt;/p&gt;

&lt;p&gt;This, to me, is a big deal for a number of interrelated reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Long Running Code&lt;/strong&gt;: AWS Lambda functions are limited to 15 minutes. If I need to run longer tasks, like video conversion or batch processing, I would have to jump out of my existing workflow and use a completely different set of tools. Now, I can run Rails + &lt;a href="https://github.com/mperham/sidekiq"&gt;Sidekiq&lt;/a&gt; or &lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xxii-background-jobs"&gt;Flask + Celery&lt;/a&gt; with just an industry standard &lt;code&gt;docker-compose.yml&lt;/code&gt;. Because Amplify's Serverless Containers feature uses AWS Fargate, we may in future have the option of vertically scaling system resources as needed, beyond the traditional &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html"&gt;resource constraints&lt;/a&gt; of AWS Lambda.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Access Entire Ecosystems&lt;/strong&gt;: Libraries and frameworks that were written for serverful paradigms typically become useless when shifting to serverless/Jamstack architectures, requiring yet another learning curve and search for tools. Now you are free to mix and match them - anything that runs in a Docker container is fair game (and &lt;em&gt;everything&lt;/em&gt; runs in a Docker container!)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Incremental Migration&lt;/strong&gt;: This also means that it is no longer a heavy lift to move existing apps and codebases to a serverless/Jamstack architecture. As long as you can separate your UI layer from your API layer, you are now able to host your UI on &lt;a href="https://aws.amazon.com/blogs/aws/amplify-console-hosting-for-fullstack-serverless-web-apps/"&gt;Amplify Console&lt;/a&gt;, and your APIs as a REST or GraphQL service with API Gateway + AWS Fargate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy Access to other &lt;a href="https://docs.amplify.aws/cli/start/workflows#amplify-category-add"&gt;Amplify categories&lt;/a&gt;&lt;/strong&gt;: because this plugs right into the Amplify API category workflow, this means that your code inside your containers get all the same benefits of Amplify APIs like easy authentication with Amazon Cognito and easy access to Amplify-managed resources like &lt;a href="https://docs.amplify.aws/cli/storage/overview"&gt;Storage&lt;/a&gt;, &lt;a href="https://docs.amplify.aws/cli/function"&gt;Functions&lt;/a&gt;, &lt;a href="https://docs.amplify.aws/cli/graphql-transformer/overview"&gt;GraphQL&lt;/a&gt; and more. Because networking is handled for you, you can &lt;em&gt;even talk to other containers&lt;/em&gt; - the default &lt;code&gt;docker-compose.yml&lt;/code&gt; example in the CLI shows how you can make an Express (JS) app interoperate with a Flask (Python) app!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, yeah. I think this is awesome - You can run basically anything on AWS Amplify now - meaning that you spend less time wrangling infrastructure and more time writing valuable features. Don't take my word for it, see &lt;a href="https://twitter.com/IamStan/status/1337088737243783174?s=20"&gt;Ant Stanley&lt;/a&gt; (organizer of Serverless Days and overall cloud expert):&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ceO-EJGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1316347776071094272/hLHrZQc__normal.jpg" alt="Ant Stanley Partial Landscaping #BLM profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ant Stanley Partial Landscaping #BLM
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/iamstan"&gt;@iamstan&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      This is awesome. Easiest way to run a stateful workload in the cloud. Got Wordpress, Django, Express, Joomla, Flask, Laravel etc ... this is the easiest and quickest way to get it running in a scalable way in the cloud. &lt;a href="https://t.co/vTjfKShQtd"&gt;twitter.com/renebrandel/st…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:36 PM - 10 Dec 2020
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Rene Brandel
          &lt;/span&gt;
          @renebrandel
        &lt;/div&gt;
        ⭐️NEW: @AWSAmplify now supports containers⭐️

👉 Deploy APIs &amp;amp; host web apps using @awscloud Fargate
👉 Build &amp;amp; deploy pipeline out-of-the-box
👉 Single &amp;amp; multi-container deployments (incl. networking)

Amazing work by @panchorodriguez @menyao &lt;a class="comment-mentioned-user" href="https://dev.to/undef_obj"&gt;@undef_obj&lt;/a&gt;
 

https://t.co/YBhqVkqnCS
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1337088737243783174" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1337088737243783174" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      2
      &lt;a href="https://twitter.com/intent/like?tweet_id=1337088737243783174" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      10
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;P.S. for those who are making comparisons with AWS CDK, note that &lt;a href="https://twitter.com/undef_obj/status/1337217826436747266?s=20"&gt;this capability was actually made with CDK&lt;/a&gt; - it solves a higher level problem than CDK. &lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>How I created the 1st Full Stack playground</title>
      <author>Kirk</author>
      <pubDate>Fri, 11 Dec 2020 13:07:37 +0000</pubDate>
      <link>https://dev.to/scaledynamics/how-i-created-the-1st-full-stack-playground-ehf</link>
      <guid>https://dev.to/scaledynamics/how-i-created-the-1st-full-stack-playground-ehf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;My name is Gilbert, I’m an engineer for +30 years (and CEO for +10 years). I designed a technology called WarpJS to integrate JavaScript Front end &amp;amp; Back end, and I wanted people to be able to try it without installing anything… so I developed an online JavaScript editor with WarpJS, and I ended up creating the first real time JavaScript Full Stack playground! &lt;/p&gt;

&lt;p&gt;This is the story of its creation. Hope you’ll find it interesting and inspiring. &lt;br&gt;
You can test right away the live demo of the &lt;a href="https://playground.scaledynamics.cloud"&gt;JavaScript Full Stack Playground&lt;/a&gt; and let me know what you think about it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LSxMbvnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607691892635/EYlxKSkWo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LSxMbvnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607691892635/EYlxKSkWo.gif" alt="playground-modify-backend-v2.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existing-inbrowser-code-sandbox-front-end-only" class="anchor"&gt;
  &lt;/a&gt;
  Existing in-browser code sandbox: front end only!
&lt;/h2&gt;

&lt;p&gt;When creating a website, you generally have to code a front end &amp;amp; a back end connected and working with one other. &lt;/p&gt;

&lt;p&gt;For the front end, I often used developers sandbox to get code snippets that I adapted to the UI of the website. It’s really cool and it makes coding so much easier. As the web dev community is so rich, you basically can find anything you’re looking for! &lt;br&gt;
Though, for the back end, it’s really another story! Blog posts articles, getting started guides, GitHub projects… is your new credo 😨. &lt;/p&gt;

&lt;p&gt;And that’s only to select the right back end stack for your project! That’s why I thought it would be so much more efficient to have a back end playground. It would show you examples and code snippets to get to throw a quick prototype. &lt;br&gt;
I could have created a back end only playground, but I thought it would not be as effective. Also, my team and I created a technology called WarpJS. It integrates JavaScript Front and Back ends, so I wanted developers to be able to test it without having to install anything. That’s why I decided to build a front end AND back end playground, to code them at the same time, and to see the results in real time. &lt;/p&gt;

&lt;p&gt;So let’s get started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design" class="anchor"&gt;
  &lt;/a&gt;
  Design
&lt;/h2&gt;

&lt;p&gt;I’ve chosen to focus only on web development languages: HTML, CSS, JavaScript for the front end, and Node.js for the back end. &lt;/p&gt;

&lt;p&gt;Here’s what we get: the development environment is composed of the front end, back end editor panels, sitting side-by-side to code faster. I’ve also added a preview window on the right side to see the rendered page in real time. &lt;/p&gt;

&lt;p&gt;On the left side, I wanted a code snippet search area, so developers can search in the code snippet database. I really wanted everything to be in a single page, so developers can create new snippets, and explore available ones quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdVZBP8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607677986721/orM9I8urZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdVZBP8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607677986721/orM9I8urZ.png" alt="playground-design.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I made every window adjustable, so you can customize your experience as you wish: resize any panel, allow full screen view… It’s handy to focus on some codes, or to make sure web components are responsive… &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-playground-with-a-unique-recipe" class="anchor"&gt;
  &lt;/a&gt;
  A playground with a unique recipe
&lt;/h2&gt;

&lt;p&gt;There’s a catch, right? How can we write a back end and use it in the front end without creating endpoints, routing for APIs and HTTP requests? The secret recipe is the technology I mentioned above, WarpJS, which I wanted people to be able to test really easily. It automatically transforms an exported function of a Node.js module into an HTTP server API. On the client side, you no longer need to use HTTP to call the back end module, it just basically calls its functions.&lt;/p&gt;

&lt;p&gt;So this means that, in the back end, you just need to create functions and to export them. In the front end, you just call it. &lt;br&gt;
As you avoid writing HTTP layers, this playground offers you more time to only focus on the core logic of the snippet. It enables any JavaScript developer, even junior one, to use it easily! You no longer need to be an HTTP expert to work as a Full Stack 😬! Icing on the cake, the Playground is connected with the ScaleDynamics Virtual Cloud, which means it also takes care of deployment processes: you can deploy and run on any cloud. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building" class="anchor"&gt;
  &lt;/a&gt;
  Building
&lt;/h2&gt;

&lt;p&gt;To lay the first stone, I chose &lt;a href="https://golden-layout.com/"&gt;GoldenLayout&lt;/a&gt; as window layout management. For the editors’ views, I selected the &lt;a href="https://microsoft.github.io/monaco-editor/"&gt;Monaco code editor&lt;/a&gt; that powers Visual Studio Code. It takes care of error detection, auto identification, code completion… &lt;/p&gt;

&lt;p&gt;The preview is an iframe to inject code snippets, which are stored in a MongoDB database, and to provide a live-reload feature for the preview window. &lt;/p&gt;

&lt;p&gt;For the search area, I choose to made it pretty simple: instead of being classified by categories, I choose to sort them with hashtags (for instance #react, #fauna, #AI and so on). Developers can add title and a 250 characters description.&lt;/p&gt;

&lt;p&gt;The back-end panel is connected to the &lt;a href="https://scaledynamics.com/deploy-javascript-microservices-any-cloud"&gt;ScaleDynamics code-to-cloud Suite&lt;/a&gt; to redeploy instantly and to support the full stack live-reload.&lt;/p&gt;

&lt;p&gt;Finally, I’ve naturally coded the whole playground back end with WarpJS itself: I’ve got my first fully functional prototype within two days 😎. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result-a-javascript-full-stack-playground" class="anchor"&gt;
  &lt;/a&gt;
  The result: a JavaScript Full Stack Playground
&lt;/h2&gt;

&lt;p&gt;It’s live! You can test right the &lt;a href="https://playground.scaledynamics.cloud"&gt;JavaScript Full Stack Playground&lt;/a&gt;.&lt;br&gt;
Feedbacks are much appreciated so I can improve it!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>discuss</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How Java Has Advanced In The Past 6 Years (From Java 8 to Java 15)</title>
      <author>Wejdi</author>
      <pubDate>Fri, 11 Dec 2020 13:00:11 +0000</pubDate>
      <link>https://dev.to/wejdi_gh/how-java-has-advanced-in-the-past-6-years-from-java-8-to-java-15-4gj3</link>
      <guid>https://dev.to/wejdi_gh/how-java-has-advanced-in-the-past-6-years-from-java-8-to-java-15-4gj3</guid>
      <description>&lt;h1&gt;
  &lt;a href="#java-release-cycle" class="anchor"&gt;
  &lt;/a&gt;
  Java Release Cycle
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rb5PGY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ixge2lyra4pg9695apg8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rb5PGY6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ixge2lyra4pg9695apg8.PNG" alt="Java Release"&gt;&lt;/a&gt;&lt;br&gt;
Until version 8 , Java version release  was one every 3 years ,so there were few versions with many features.&lt;/p&gt;

&lt;p&gt;It was therefore complicated to deliver a new version of Java and complicated for developers to upgrade their applications due to the number of changes included.&lt;/p&gt;

&lt;p&gt;This pace no longer keeps up with the reality of the IT world where everything is going faster and faster! So Java architects decided to publish a version every 6 months (therefore a fixed schedule)&lt;/p&gt;

&lt;p&gt;In each version, all the ready features are incorporated, those that are not ready will be delivered in the next one (no more late version).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-8-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 8 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m84mWFWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q5owx5pm8ihx15ftowfe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m84mWFWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q5owx5pm8ihx15ftowfe.jpg" alt="java 8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) New Features in Java language&lt;/strong&gt;&lt;br&gt;
● &lt;strong&gt;forEach() method&lt;/strong&gt;&lt;br&gt;
Java 8 has introduced forEach method in java.lang.Iterable interface so that while writing code we focus on business logic only.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tMDCOk6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bkjtewsoc1esrs4tvne1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tMDCOk6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bkjtewsoc1esrs4tvne1.PNG" alt="foreach"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Lambda Expression&lt;/strong&gt;&lt;br&gt;
The biggest new feature of Java 8 is language level support for lambda expressions (Project Lambda).&lt;br&gt;
 Lambda Expressions syntax is (argument) -&amp;gt; (body).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YKY7uRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pnil6wy1puzm8hhhjg17.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YKY7uRll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pnil6wy1puzm8hhhjg17.PNG" alt="lambada exemples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Interface’s default and Static Methods&lt;/strong&gt;&lt;br&gt;
Prior to java 8, interface in java can only have abstract methods. All the methods of interfaces are public &amp;amp; abstract by default. Java 8 allows the interfaces to have default and static methods. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;-Default methods :&lt;/em&gt; The reason we have default methods in interfaces is to allow the developers to add new methods to the interfaces without affecting the classes that implements these interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xxh2xa4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnr8ilfar20f2ybj9nnh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xxh2xa4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vnr8ilfar20f2ybj9nnh.PNG" alt="default interface method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;-Static methods :&lt;/em&gt; in interfaces are similar to the default methods except that we cannot override these methods in the classes that implements these interfaces.&lt;br&gt;
For example, there are many static methods on the new Stream interface. This makes “helper” methods easier to find since they can be located directly on the interface, instead of a different&lt;br&gt;
class such as StreamUtil or Streams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNYCrXG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7e2843453cqpimh0dde6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNYCrXG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7e2843453cqpimh0dde6.PNG" alt="static interface method"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Functional Interface&lt;/strong&gt;&lt;br&gt;
In Java 8 a functional interface is defined as an interface with exactly one abstract method. This even applies to interfaces that were created with previous versions of Java.&lt;br&gt;
Java 8 comes with several new functional interfaces in the package, java.util.function.&lt;br&gt;
 -Function - takes an object of type T and returns R.&lt;br&gt;
 -Supplier - just returns an object of type T.&lt;br&gt;
 -Predicate - returns a boolean value based on input of type T.&lt;br&gt;
 -Consumer - performs an action with given object of type T.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWZtr59B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ek81rt1zsumtf1y5fg51.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWZtr59B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ek81rt1zsumtf1y5fg51.PNG" alt="lambada exemples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Method References&lt;/strong&gt;&lt;br&gt;
Method references are a special type of lambda expressions. They're often used to create simple lambda expressions by referencing existing methods.&lt;br&gt;
There are four kinds of method references:&lt;br&gt;
  -Static methods&lt;br&gt;
  -Instance methods of particular objects&lt;br&gt;
  -Instance methods of an arbitrary object of a particular type&lt;br&gt;
  -Constructor&lt;br&gt;
Exemple :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ucq9KeOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m68oku3tsecmy1fh3i75.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ucq9KeOY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m68oku3tsecmy1fh3i75.PNG" alt="Reference methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) New Features in Java libraries&lt;/strong&gt;&lt;br&gt;
● &lt;strong&gt;Stream API&lt;/strong&gt;&lt;br&gt;
The Stream interface is such a fundamental part of Java 8 .&lt;/p&gt;

&lt;p&gt;We can use Java Stream API to implement internal iteration, that is better because java framework is in control of the iteration.&lt;/p&gt;

&lt;p&gt;The Stream interface supports the map/filter/reduce pattern and executes lazily, forming the basis&lt;br&gt;
(along with lambdas) for functional-style programming in Java 8.&lt;/p&gt;

&lt;p&gt;There are also corresponding primitive streams (IntStream, DoubleStream, and LongStream) for performance reasons.&lt;/p&gt;

&lt;p&gt;With Java 8, Collection interface has two methods to generate a Stream :&lt;br&gt;
 -stream():Returns a sequential stream considering collection as its source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_TsuiUTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08eppxbjnzf62vhxztq4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_TsuiUTz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/08eppxbjnzf62vhxztq4.PNG" alt="stream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-parallelStream() : Returns a parallel Stream considering collection as its source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwH6ofYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i9afzmhbyfwjk5ku4o39.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwH6ofYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i9afzmhbyfwjk5ku4o39.PNG" alt="parallelStream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Optional&lt;/strong&gt;&lt;br&gt;
Java 8 comes with the Optional class in the java.util package for avoiding null return values (and thus NullPointerException).&lt;/p&gt;

&lt;p&gt;If a value is present, isPresent() will return true and get() will return the value. Stream terminal operations return Optional object. &lt;br&gt;
Some of these methods are:&lt;br&gt;
 -Optional reduce(BinaryOperator accumulator)&lt;br&gt;
 -Optional min(Comparator&amp;lt;? super T&amp;gt; comparator)&lt;br&gt;
 -Optional max(Comparator&amp;lt;? super T&amp;gt; comparator)&lt;br&gt;
 -Optional findFirst()&lt;br&gt;
 -Optional findAny()&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Date/Time API&lt;/strong&gt;&lt;br&gt;
With Java 8, a new Date-Time API is introduced to cover the following drawbacks of old date-time API:&lt;br&gt;
 -Not thread safe&lt;br&gt;
 -Poor design&lt;br&gt;
 -Difficult time zone handling &lt;/p&gt;

&lt;p&gt;Java 8 Date Time API consists of following packages:&lt;br&gt;
1.java.time Package: This is the base package of new Java Date Time API. such as LocalDate, LocalTime, LocalDateTime, Instant, Period, Duration etc. All of these classes are immutable and thread safe.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;java.time.chrono Package: This package defines generic APIs for non ISO calendar systems. We can extend AbstractChronology class to create our own calendar system.&lt;/li&gt;
&lt;li&gt;java.time.temporal Package: This package contains temporal objects and we can use it for find out specific date or time related to date/time object. For example, we can use these to find out the first or last day of the month. You can identify these methods easily because they always have format “withXXX”.&lt;/li&gt;
&lt;li&gt;java.time.zone Package: This package contains classes for supporting different time zones and their rules.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#java-9-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 9 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0BRQeQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vtqupju2h7sz78m9r9fl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0BRQeQV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vtqupju2h7sz78m9r9fl.jpg" alt="java9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 9 included better support for multi-gigabyte heaps, better native code integration, a different default garbage collector (G1, for "shorter response times") and a self-tuning JVM.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Java Platform Module System (Project Jigsaw)&lt;/strong&gt;&lt;br&gt;
It is a new kind of Java programing component that can be used to collect Java code (classes and packages). The main goal of this project is to easily scale down application to small devices. In Java 9, JDK itself has divided into set of modules to make it more lightweight. It also allows us to develop modular applications.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;JShell: the interactive Java REPL&lt;/strong&gt;&lt;br&gt;
JShell is a REPL (Read Evaluate Print Loop) tool and run from the command line.&lt;br&gt;
It is an interactive Java Shell tool, it allows us to execute Java code from the shell and shows output immediately.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTnbh9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1ii6ukss5fn89qs2lwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTnbh9Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1ii6ukss5fn89qs2lwh.png" alt="Jshell"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Process API Improvements&lt;/strong&gt;&lt;br&gt;
Java has improved its process API in Java 9 version, they have added couple new classes and methods to ease the controlling and managing.&lt;br&gt;
Two new interfcase in Process API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;java.lang.ProcessHandle&lt;/li&gt;
&lt;li&gt;java.lang.ProcessHandle.Info&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyA4EAaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m3g4nfqky7gd8uund1kv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyA4EAaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m3g4nfqky7gd8uund1kv.PNG" alt="process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Interface Private Methods&lt;/strong&gt;&lt;br&gt;
In Java 9, we can create private methods inside an interface. Interface allows us to declare private methods that help to share common code between non-abstract methods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59IF0kD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ajt9ru8f3giai9vt5e6f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59IF0kD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ajt9ru8f3giai9vt5e6f.PNG" alt="private methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Java Collection Factory Methods&lt;/strong&gt;&lt;br&gt;
Factory methods are special type of static methods that are used to create unmodifiable instances of collections. It means we can use these methods to create list, set and map of small number of elements.&lt;br&gt;
It is unmodifiable, so adding new element will throw java.lang.UnsupportedOperationException&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6AN6lH3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkecqmzel3hl03dt0p6w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AN6lH3y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkecqmzel3hl03dt0p6w.PNG" alt="private methods"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Stream API Improvement&lt;/strong&gt;&lt;br&gt;
The Streams API is arguably one of the best improvements to the Java standard library in a long time.&lt;br&gt;
In Java 9, Stream API has improved and new 4 methods are added to the Stream interface :iterate(), dropWhile(), takeWhile(), ofNullable().&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kQQ2pK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yqn475h0w14cseqkztxn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kQQ2pK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yqn475h0w14cseqkztxn.PNG" alt="stram improvement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Reactive Streams&lt;/strong&gt;&lt;br&gt;
Java SE 9 Reactive Streams API is a Publish/Subscribe Framework to implement Asynchronous, Scalable and Parallel applications.&lt;br&gt;
Reactive Streams is about asynchronous processing of stream, so there should be a Publisher and a Subscriber. The Publisher publishes the stream of data and the Subscriber consumes the data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O5CA-72j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y5a9vy6zgy0dcimzkhqd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O5CA-72j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y5a9vy6zgy0dcimzkhqd.PNG" alt="reactive stream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;HTTP 2 Client&lt;/strong&gt;&lt;br&gt;
A new way of performing HTTP calls arrives with Java 9. This much overdue replacement for the old HttpURLConnection API also supports WebSockets and HTTP/2 protocol.&lt;br&gt;
 It supports both Synchronous (Blocking Mode) and Asynchronous Modes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lCM2O3p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cry4pz2f7t4cw5g9cicj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lCM2O3p8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cry4pz2f7t4cw5g9cicj.PNG" alt="HTTP2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;G1 Garbage Collector&lt;/strong&gt; &lt;br&gt;
The “Garbage-first” garbage collector, aka G1, is a concurrent multi-threaded GC. It mostly works alongside the application threads (much like the concurrent mark sweep GC) and is designed to offer shorter, more predictable pause times – while still achieving high throughput.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Other new Fectures&lt;/strong&gt; &lt;br&gt;
  -Stack-Walking API&lt;br&gt;
  -Filter Incoming Serialization Data&lt;br&gt;
  -Deprecate the Applet API&lt;br&gt;
  -Indify String Concatenation&lt;br&gt;
  -Enhanced Method Handles&lt;br&gt;
  -Java Platform Logging API and Service&lt;br&gt;
  -Compact Strings&lt;br&gt;
  -Parser API for Nashorn&lt;br&gt;
  -Javadoc Search&lt;br&gt;
  -HTML5 Javadoc&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-10-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 10 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJhRtYZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5l3nqa2knbcurs0k3i9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJhRtYZh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/v5l3nqa2knbcurs0k3i9.png" alt="java10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 10 is the fastest release of a java version in its 23-year history. Java has been criticized for its slow growth and evolution, but Java 10 just shattered that concept. &lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Local-Variable Type Inference&lt;/strong&gt; &lt;br&gt;
Local variable type inference is the biggest new feature in Java 10 for developers. &lt;br&gt;
Similar to Javascript, Kotlin, and Scala, now Java will also have a var keyword that allows you to declare a local variable without specifying its type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05yxDyE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vwuidgs0dtfup44djuve.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05yxDyE4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vwuidgs0dtfup44djuve.PNG" alt="var"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Time-Based Release Versioning&lt;/strong&gt; &lt;br&gt;
From JDK 10 release, Java has adopted a new schedule of a new release every six months. There is a lot of debate whether this is a practical approach or not, larger companies also appreciated the stability and the low rate of change of Java so far.&lt;/p&gt;

&lt;p&gt;Oracle has responded to these concerns and continues to&lt;br&gt;
offer long-term releases on a regular basis, but also at&lt;br&gt;
longer intervals. And after Java 8, it is Java 11, which will&lt;br&gt;
receive a long term support again. &lt;/p&gt;

&lt;p&gt;In fact, Java 9 and Java 10 support has just ended, since&lt;br&gt;
Java 11 is out.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Application Class-Data Sharing&lt;/strong&gt; &lt;br&gt;
This feature extends the existing CDS feature for allowing application classesto be placed in the shared archive in order to improve startup and footprint.&lt;/p&gt;

&lt;p&gt;The general idea was that when the JVM first launched, anything loaded was serialized and stored in a file on disk that could be reloaded on future launches of the JVM.&lt;/p&gt;

&lt;p&gt;This meant that multiple instances of the JVM shared the class metadata so it wouldn’t have to load them all every time.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Parallel Full GC for G1&lt;/strong&gt; &lt;br&gt;
G1 garbage collector was made default in JDK 9.However, the full GC for G1 used a single threaded mark sweepcompact algorithm.&lt;/p&gt;

&lt;p&gt;This has been changed to the parallel mark-sweep-compact algorithm&lt;br&gt;
in Java 10 effectively reducing the stop-the-world time during full GC.&lt;/p&gt;

&lt;p&gt;This change won’t help the best-case performance times of the&lt;br&gt;
garbage collector, but it does significantly reduce the worst-case&lt;br&gt;
latencies. &lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Garbage-Collector Interface&lt;/strong&gt;&lt;br&gt;
This is one more interesting and useful Java 10 feature which improves the code isolation of different garbage collectors by introducing a common Garbage Collector Interface.&lt;/p&gt;

&lt;p&gt;It will help in the future for adding new GC without changing existing codebase, also help in removing or housekeeping of the previous GC.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Root Certificates&lt;/strong&gt;&lt;br&gt;
With Java 10, Oracle has open-sourced the root certificates in&lt;br&gt;
Oracle’s Java SE Root CA program in order to make OpenJDK&lt;br&gt;
builds more attractive to developers and to reduce the&lt;br&gt;
differences between those builds and Oracle JDK builds. &lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Thread-Local Handshakes&lt;/strong&gt;&lt;br&gt;
This is an internal JVM feature to improve performance.&lt;br&gt;
This feature provides a way to execute a callback on threads without performing a global VM safepoint. Make it both possible and cheap to stop individual threads and not just all threads or none.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;API’s Added&lt;/strong&gt;&lt;br&gt;
-List, Map &amp;amp; Set Interfaces are added with a static copyOf(Collection) method. Its returns an unmodifiable List, Map or Set containing the entries provided. For a List, if the given List is subsequently modified, the returned List will not reflect such modifications.&lt;/p&gt;

&lt;p&gt;-Optional &amp;amp; its primitive variations get a method orElseThrow(). This is exactly same as get(), however the java doc states that it is a preferred alternative then get().&lt;/p&gt;

&lt;p&gt;-Collectors class gets various methods for collecting unmodifiable collections (Set, List, Map).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wx5LqoZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fxuvgxld30whuxngzikx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wx5LqoZ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fxuvgxld30whuxngzikx.PNG" alt="java10 added API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-11-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 11 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wA_o2lh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a050qvgs7mxaqkgnk1ke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wA_o2lh9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a050qvgs7mxaqkgnk1ke.png" alt="java11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 11 is the second LTS release after Java 8. Since Java 11, Oracle JDK would no longer be free for commercial use.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Running Java File&lt;/strong&gt;&lt;br&gt;
We can avoid the compilation phase. We can compile execute in one command. We use the java command. It will implicitly compile without saving the.class file. &lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Java String Methods&lt;/strong&gt;&lt;br&gt;
1) isBlank(): This method returns true if the string is empty or contains only white spaces code points.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DDLl15qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zadb2rugxjfknimvfpxp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DDLl15qF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zadb2rugxjfknimvfpxp.PNG" alt="isBlank"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) lines() :  returns a reference for a stream of strings that are substrings we received after splitting by lines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFNw0VKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dqx783h4vabzoj8rh1uo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFNw0VKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dqx783h4vabzoj8rh1uo.PNG" alt="lines"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;3) strip(), stripLeading() and the stripTrailing : remove white spaces from the beginning, the ending and the remr of the string. Itis a 'Unicode-Aware' evolution of trim();&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onvh-OwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aet1nuovc035j8lv8isb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onvh-OwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aet1nuovc035j8lv8isb.PNG" alt="strip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) repeat(): method repeats the string on which it is invoked the number of times it receives.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HF0XjE11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n289nynt5pocl6z8tmgy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HF0XjE11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n289nynt5pocl6z8tmgy.PNG" alt="repeat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Using var in Lambda Expressions&lt;/strong&gt;&lt;br&gt;
As of Java 11 we can use the var keyword within lambda expressions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiKOtRqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c02pc0eui5hf21c5g69c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiKOtRqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c02pc0eui5hf21c5g69c.PNG" alt="lambda var"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using var in a lambda expression we must use it on all parameters and we cannot mix it with using specific types.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1TpDOa7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eacab6dimdj0w90l9262.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1TpDOa7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/eacab6dimdj0w90l9262.PNG" alt="lambda var error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Nested Based Access Control&lt;/strong&gt;&lt;br&gt;
Before Java 11, Java allows classes and interfaces to be nested within each other. These nested types have unrestricted access to each other, including to private fields, methods, and constructors.&lt;/p&gt;

&lt;p&gt;As of Java 11, there are new methods in Class class that assist us with getting information about the created nest. These methods include the following: &lt;br&gt;
&lt;strong&gt;getNestHost()&lt;/strong&gt; : This returns the nest host of the nest to which this Class object belongs&lt;br&gt;
&lt;strong&gt;getNestMembers()&lt;/strong&gt; : This returns an array containing Class objects representing all the members of the nest to which this Class object belongs&lt;br&gt;
&lt;strong&gt;isNestemateOf()&lt;/strong&gt; : This determines if the given Class is a nestmate of this Class object&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HaJ2chHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ix4hyxo9zqqa9lspn2vz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaJ2chHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ix4hyxo9zqqa9lspn2vz.PNG" alt="nested1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38bLkQAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2h3fdm1tr67yxom3ueag.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38bLkQAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2h3fdm1tr67yxom3ueag.PNG" alt="nested2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Epsilon: A No-Op Garbage Collector&lt;/strong&gt;&lt;br&gt;
As of Java 11, the JVM has an experimental feature that allows us to run the JVM without any actual memory reclamation.&lt;/p&gt;

&lt;p&gt;The goal is to provide a completely passive garbage collector implementation with a bounded allocation limit and the lowest latency overhead possible.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;ZGC Scalable Low Latency GC&lt;/strong&gt;&lt;br&gt;
As of Java 11, we can use the ZGC. This new GC is available as an experimental feature.&lt;br&gt;
ZGC is a scalable low latency garbage collector. It performs the expensive work concurrently without stopping the execution of application threads for more than 10ms. &lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;HTTP Client&lt;/strong&gt;&lt;br&gt;
As of Java 11, the HTTP Client API is more standardized. The new API supports both HTTP/1.1 and HTTP/2. The new API also supports HTML5 WebSockets. &lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Files Reading and Writing&lt;/strong&gt;&lt;br&gt;
Java 11 introduces two new methods that significantly assist with reading and writing strings from and to files : &lt;strong&gt;readString()&lt;/strong&gt;, &lt;strong&gt;writeString()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8ZQv3_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4lg6psnlecbb7zl43863.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8ZQv3_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4lg6psnlecbb7zl43863.PNG" alt="write read file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Flight Recorder&lt;/strong&gt;&lt;br&gt;
Flight Recorder which earlier used to be a commercial add-on in Oracle JDK is now open-sourced since Oracle JDK is itself not free anymore.&lt;/p&gt;

&lt;p&gt;JFR is a profiling tool used to gather diagnostics and profiling data from a running Java application.&lt;/p&gt;

&lt;p&gt;Its performance overhead is negligible and that’s usually below 1%. Hence it can be used in production applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-12-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 12 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOlCi7Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i4o37y7z0x06hstbnzif.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOlCi7Ct--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i4o37y7z0x06hstbnzif.jpg" alt="java12"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 12 was launched on March 19 2019 , which is a part of the six-month release cycle.&lt;br&gt;
It is a Non-LTS version. Hence it won’t have long term support.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;JVM Changes&lt;/strong&gt;&lt;br&gt;
– Shenandoah A Low-Pause-Time Garbage Collector: Java 12 adds Shenandoah, an experimental garbage-collection algorithm, to reduce garbage-collection pause times by performing evacuation work concurrently with running of Java threads.&lt;/p&gt;

&lt;p&gt;-Prompt return of unused committed memory: G1 to automatically return Java heap memory to the operating system when idle. This memory is released in a reasonable period of time when there is very low application activity.&lt;/p&gt;

&lt;p&gt;-Abortable Mixed Collections for G1: Improvements in G1 efficiency include making G1 mixed collections abortable if they might exceed the defined pause target. This is done by splitting the mixed collection set into mandatory and optional.&lt;/p&gt;

&lt;p&gt;-Default CDS Archives: The end goal is to improve the JDK build process by generating a class data-sharing (CDS) archive. Among the goals for this feature are: &lt;br&gt;
1) Improve out-of-the-box startup time.&lt;br&gt;
2) Get rid of the need to run -Xshare: dump to benefit from the CDS.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Switch Expressions&lt;/strong&gt;&lt;br&gt;
There are two main changes to switch in Java with this JEP:&lt;br&gt;
1) Introduction of case L -&amp;gt; syntax that removes the need for break statements, because only the statements next to -&amp;gt; is executed.&lt;br&gt;
2) switch can be an expression, so it can have a value, or it can return a value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKwAXg5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vm93e579q93u5gawc8bb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKwAXg5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vm93e579q93u5gawc8bb.PNG" alt="switch 12 "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;File.mismatch method&lt;/strong&gt;&lt;br&gt;
Java 12 added the following method to compare two files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46MUFGal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4v705r4h56opasd4lyfu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46MUFGal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4v705r4h56opasd4lyfu.PNG" alt="file mismatch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method returns the position of the first mismatch or -1L if there is no mismatch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ypT9KXb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5nrl3e4zgnmsac42gtuy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ypT9KXb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5nrl3e4zgnmsac42gtuy.PNG" alt="mismatch 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BK6u3l4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qlovtmmwclaltd8xyolu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BK6u3l4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qlovtmmwclaltd8xyolu.PNG" alt="mismatch result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Compact Number Formatting&lt;/strong&gt;&lt;br&gt;
Java 12 extends existing number formatting APIs to provide support for locale-sensitive compact number formatting.&lt;br&gt;
Now numbers like 1000 (for example) can be formatted as "1K" (short style) or "1 thousand" (long style).  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xw-JxvRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxyxsc4xcdacz4zjjo4x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xw-JxvRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lxyxsc4xcdacz4zjjo4x.PNG" alt="number formatter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Teeing Collectors&lt;/strong&gt;&lt;br&gt;
Teeing Collector is the new collector utility introduced in the Streams API.&lt;br&gt;
This collector has three arguments – Two collectors and a Bi-function.&lt;br&gt;
All input values are passed to each collector and the result is available in the Bi-function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qq83aDfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2a59u9j7syqx23ijwf41.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qq83aDfF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2a59u9j7syqx23ijwf41.PNG" alt="teening collectors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Java Strings New Methods&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#1-javalangstring-" class="anchor"&gt;
  &lt;/a&gt;
  1) java.lang.String :
&lt;/h5&gt;

&lt;p&gt;-indent​(int n): Adjusts the indentation of each line of this string based on the value of n, and normalizes line termination characters.&lt;/p&gt;

&lt;p&gt;-If n &amp;gt; 0, then n spaces (U+0020) are inserted at the beginning of each line.&lt;br&gt;
 -If n &amp;lt; 0, then up to n white space characters are removed from the beginning of each line. If a given line does not contain sufficient white space then all leading white space characters are removed. The tab character is also treated as a single character.&lt;br&gt;
 -If n = 0, then the line remains unchanged. However, line terminators are still normalized&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Z9TizYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ifwc5bwm239bc7lfablu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Z9TizYw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ifwc5bwm239bc7lfablu.PNG" alt="sring indent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;- R transform​(Function&amp;lt;? super String,​? extends R&amp;gt; f): This method allows the application of a function to this string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ptMlxaX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7g58ogj3qwc475x4rcfj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ptMlxaX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7g58ogj3qwc475x4rcfj.PNG" alt="sring transform"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#2-jvm-constants-api-" class="anchor"&gt;
  &lt;/a&gt;
  2) JVM Constants API :
&lt;/h5&gt;

&lt;p&gt;The Constants API methods don’t have much usage for normal development related tasks.&lt;/p&gt;

&lt;p&gt;-Optional describeConstable(): Returns an Optional containing the nominal descriptor for this instance, which is the instance itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHhdIaZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3edzvvdbulmryv3yalga.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHhdIaZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3edzvvdbulmryv3yalga.PNG" alt="DescribeConstable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-String resolveConstantDesc​(MethodHandles.Lookup lookup): Resolves this instance as a ConstantDesc, the result of which is the instance itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7eg0LXAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m6tz6gbtnt6bz9n7r9m0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7eg0LXAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m6tz6gbtnt6bz9n7r9m0.PNG" alt="resolveConstantDesc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;#Java 13 most important Features with Examples#&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F5NbRxCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyr9zxal2olw9zto769c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F5NbRxCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pyr9zxal2olw9zto769c.png" alt="java13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 13 was released for production use on 17th September 2019. There are not a lot of developer-specific features in Java 13 because of the 6-month release cycle.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Switch Expressions&lt;/strong&gt;&lt;br&gt;
We initially saw switch expressions in JDK 12. Java 13's switch expressions build on the previous version by adding a new yield statement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rloCmJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jqe3upy8cpx093gbjdja.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rloCmJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jqe3upy8cpx093gbjdja.PNG" alt="switch 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Text Blocks&lt;/strong&gt;&lt;br&gt;
Text blocks for multi-line Strings such as embedded JSON, XML, HTML, etc.It allows us to create multiline strings easily. The multiline string has to be written inside a pair of triple-double quotes.&lt;/p&gt;

&lt;p&gt;Earlier, to embed JSON in our code, we would declare it as a String literal:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbjjY4bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/npib8c06mk8ptsjaeekw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbjjY4bH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/npib8c06mk8ptsjaeekw.PNG" alt="json string"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, it’s useful in easily creating HTML and JSON strings in our Java program :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8j8CVQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e4d9cwtnob2ta7ox3jzn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8j8CVQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e4d9cwtnob2ta7ox3jzn.PNG" alt="json html 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, java.lang.String now has three new methods to manipulate text blocks:&lt;br&gt;
1) formatted(Object… args): it’s similar to the String format() method. It’s added to support formatting with the text blocks.&lt;/p&gt;

&lt;p&gt;2) stripIndent(): used to remove the incidental white space characters from the beginning and end of every line in the text block. This method is used by the text blocks and it preserves the relative indentation of the content.&lt;/p&gt;

&lt;p&gt;3) translateEscapes(): returns a string whose value is this string, with escape sequences translated as if in a string literal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qgrvJt1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1a9spp58z224ed9gk8lg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qgrvJt1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1a9spp58z224ed9gk8lg.PNG" alt="string 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynFZVH9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/un3viqud5q1v36zsznsy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynFZVH9L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/un3viqud5q1v36zsznsy.PNG" alt="output string 13"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Dynamic CDS Archive&lt;/strong&gt;&lt;br&gt;
Class data sharing (CDS) has been a prominent feature of Java HotSpot VM for a while now. It allows class metadata to be shared across different JVMs to reduce startup time and memory footprint.&lt;br&gt;
Now, the creation of CDS archive and using it is much easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m_uCsziQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkmhagirwvv6qehfsvzy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m_uCsziQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkmhagirwvv6qehfsvzy.PNG" alt="dynamic cds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;ZGC: Uncommit Unused Memory&lt;/strong&gt;&lt;br&gt;
The Z Garbage Collector was introduced in Java 11 as a low-latency garbage collection mechanism.It adds a short pause time before the heap memory cleanup. But, the unused memory was not being returned to the operating system.&lt;/p&gt;

&lt;p&gt;Starting with Java 13, the ZGC now returns uncommitted memory to the operating system by default.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;FileSystems.newFileSystem() Method&lt;/strong&gt;&lt;br&gt;
Three new methods have been added to the FileSystems class to make it easier to use file system providers, which treats the contents of a file as a file system : &lt;br&gt;
-newFileSystem(Path)&lt;br&gt;
-newFileSystem(Path, Map)&lt;br&gt;
-newFileSystem(Path, Map, ClassLoader)&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;DOM and SAX Factories with Namespace Support&lt;/strong&gt;&lt;br&gt;
There are new methods to instantiate DOM and SAX factories with Namespace support:&lt;br&gt;
-newDefaultNSInstance()&lt;br&gt;
-newNSInstance()&lt;br&gt;
-newNSInstance(String factoryClassName, ClassLoader classLoader)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJrQ9kTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hxcst95ew27cxqddv8c8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJrQ9kTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hxcst95ew27cxqddv8c8.PNG" alt="dom sax"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Miscellaneous Changes&lt;/strong&gt;&lt;br&gt;
 Java 13 has given us a few more notable changes:&lt;br&gt;
-java.time – new official Japanese era name added&lt;br&gt;
-javax.crypto – support for MS Cryptography Next Generation (CNG)&lt;br&gt;
-javax.security – property jdk.sasl.disabledMechanisms added to disable SASL mechanisms&lt;br&gt;
-javax.xml.crypto – new String constants introduced to represent Canonical XML 1.1 URIs&lt;br&gt;
-javax.xml.parsers – new methods added to instantiate DOM and SAX factories with namespaces support&lt;br&gt;
-Unicode support upgraded to version 12.1&lt;br&gt;
-Support added for Kerberos principal name canonicalization and cross-realm referrals&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-14-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 14 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5Nj6L9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bz5heu9oo66h0k0e04yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5Nj6L9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bz5heu9oo66h0k0e04yr.png" alt="java 14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keeping up with the six-month cycle tradition, Java 14, another non-LTS version is scheduled to release on March 17, 2020.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Switch Expressions&lt;/strong&gt;&lt;br&gt;
Switch Expressions after staying a preview feature in the last two releases –Java 12 and Java 13 have finally attained permanent status in Java 14.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1fZmSZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/apoow4x49kwaxtq99wb9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1fZmSZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/apoow4x49kwaxtq99wb9.PNG" alt="switch 14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Pattern Matching for instanceof&lt;/strong&gt;&lt;br&gt;
The old way to typecast a type to another type is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxOHp-qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xbd7i5f9wk9mw4x7h75t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxOHp-qR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xbd7i5f9wk9mw4x7h75t.PNG" alt="instance old"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new way is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aJnatqEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gx0hoss6tdcsr3brwh5j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJnatqEI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gx0hoss6tdcsr3brwh5j.PNG" alt="instance new"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above code, the instance jd would be only assigned if obj is of type Journaldev. The scope of the variable is limited to the conditional block only.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Helpful NullPointerExceptions&lt;/strong&gt;&lt;br&gt;
 Improvement in NullPointerExceptions exception message generated by JVM.&lt;/p&gt;

&lt;p&gt;Before Java 14:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPEtZoS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w54hfu2bg28ykvbeheez.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPEtZoS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/w54hfu2bg28ykvbeheez.PNG" alt="NullPointer old "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 14 introduced a new JVM feature which gives better insights with a more descriptive stack as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YWPFHWm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71h80cqpvochy3k4tzxq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YWPFHWm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/71h80cqpvochy3k4tzxq.PNG" alt="NullPointer new "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Records&lt;/strong&gt;&lt;br&gt;
We need to write a lot of low-value, repetitive code to write a simple data carrier class responsibly: constructors, accessors, equals(), hashCode(), toString(), etc. To avoid this repetitive code, Java is planned to use record.&lt;/p&gt;

&lt;p&gt;Before Java 14 :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TsL5DtLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p0bx7johm33vr7sa0lol.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsL5DtLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p0bx7johm33vr7sa0lol.PNG" alt="records old"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After Java 14 : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOf540GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tw3j4a5q7td1y7qjqwsx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOf540GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tw3j4a5q7td1y7qjqwsx.PNG" alt="record new"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, we can add additional fields, methods, and constructor to the record in the following way:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrOwK1G_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m84zdewhycsqvb9cuys.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrOwK1G_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m84zdewhycsqvb9cuys.PNG" alt="record extra PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few important things to note about Records:&lt;br&gt;
-A record can neither extend a class nor it can be extended by another class. It’s a final class.&lt;br&gt;
-Records Can Implement Interfaces.&lt;br&gt;
-Records support multiple constructors.&lt;br&gt;
-Records Allow Modifying Accessor Methods.&lt;br&gt;
-Records cannot be abstract.&lt;br&gt;
-Records cannot extend any other class and cannot define instance fields inside the body. Instance fields must be defined in the state description only.&lt;br&gt;
-Declared fields are private and final.&lt;br&gt;
-The body of a record allows static fields and methods.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Text Blocks&lt;/strong&gt;&lt;br&gt;
Text Blocks were introduced as a preview feature in Java 13 with the goal to allow easy creation of multiline string literals. It’s useful in easily creating HTML and JSON or SQL query strings.&lt;/p&gt;

&lt;p&gt;In Java 14, Text Blocks are still in preview with some new additions:&lt;br&gt;
-Backslash for displaying nice-looking multiline string blocks.&lt;br&gt;
-\s is used to consider trailing spaces which are by default ignored by the compiler. It preserves all the spaces present before it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IRPkQGqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5uqmxpz2aw6n85fz75ww.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IRPkQGqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5uqmxpz2aw6n85fz75ww.PNG" alt="text blocks 14"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Foreign-Memory Access API&lt;/strong&gt;&lt;br&gt;
An effective Java API is to be introduced in the Java 14 JDK, which enables Java applications to safely and efficiently access foreign memory stored outside the Java heap. The foreign-memory access API introduces three main abstractions: MemorySegment, MemoryAddress and MemoryLayout.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#java-15-most-important-features-with-examples" class="anchor"&gt;
  &lt;/a&gt;
  Java 15 most important Features with Examples
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQEXKex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9hfyio1u2vrkyb5tqzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQEXKex9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r9hfyio1u2vrkyb5tqzt.png" alt="java 15"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java 15 (Java SE 15) and its Java Development Kit 15 (JDK 15) open-source has been released on 15 September 2020.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Sealed Classes&lt;/strong&gt;&lt;br&gt;
Sealed classes have been there in Kotlin since a while and Java 15 finally introduces this feature for better control over inheritance.&lt;br&gt;
A class can be sealed by using the &lt;strong&gt;sealed&lt;/strong&gt; modifier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_h00nre3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qvrwynkx41gg95zwym2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_h00nre3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9qvrwynkx41gg95zwym2.PNG" alt="sealed class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, the above code means, only the classes defined after the keyword &lt;strong&gt;permits&lt;/strong&gt; are allowed to extend the Vehicle sealed class.&lt;/p&gt;

&lt;p&gt;Every permitted class must be set with an explicit modifier. It can either be final or sealed or non-sealed :&lt;br&gt;
-A permitted subclass that’s declared final cannot be extended further.&lt;br&gt;
-A permitted subclass that’s declared sealed can be extended further but only by classes that are permitted by the subclass.&lt;br&gt;
-A permitted subclass may be declared non-sealed can be extended further by any class. The superclass cannot restrict the subclasses further down this class hierarchy.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Hidden Classes&lt;/strong&gt;&lt;br&gt;
While most developers won't find a direct benefit from them, anyone who works with dynamic bytecode or JVM languages will likely find them useful.&lt;/p&gt;

&lt;p&gt;The goal of hidden classes is to allow the runtime creation of classes that are not discoverable.&lt;/p&gt;

&lt;p&gt;Classes such as these typically have a short lifecycle, and thus, hidden classes are designed to be efficient with both loading and unloading.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Foreign Memory API&lt;/strong&gt;&lt;br&gt;
Foreign memory access is already an incubating feature of Java 14. In Java 15, the goal is to continue its incubation status while adding several new features:&lt;br&gt;
-A new VarHandle API, to customize memory access var handles&lt;br&gt;
-Support for parallel processing of a memory segment using the Spliterator interface&lt;br&gt;
-Enhanced support for mapped memory segments&lt;br&gt;
-Ability to manipulate and dereference addresses coming from things like native calls&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;Garbage Collectors&lt;/strong&gt;&lt;br&gt;
In Java 15, both ZGC and Shenandoah will be no longer be experimental. Both will be supported configurations that teams can opt to use, while the G1 collector will remain the default.&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;The Nashorn JavaScript engine&lt;/strong&gt;&lt;br&gt;
Of note, The Nashorn JavaScript engine, originally introduced in Java 8, is now removed. With the introduction of GraalVM and other VM technologies recently, it's clear Nashorn no longer has a place in the JDK ecosystem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This article presented the evolution of Java from Java 8 to Java 15 .&lt;/p&gt;

&lt;p&gt;Java has evolved enormously as a language and as an ecosystem since Java 8 was released over six years ago by adding many new features help to make Java a competitive option compared to other JVM-based rivals.&lt;/p&gt;

</description>
      <category>java</category>
    </item>
    <item>
      <title>Copy URL To Clipboard On Npm Run Start</title>
      <author>David Dal Busco</author>
      <pubDate>Fri, 11 Dec 2020 12:11:37 +0000</pubDate>
      <link>https://dev.to/daviddalbusco/copy-url-to-clipboard-on-npm-run-start-3gp</link>
      <guid>https://dev.to/daviddalbusco/copy-url-to-clipboard-on-npm-run-start-3gp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLXoeBNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvO-uFCV6MmXmDCbHS5iO-Q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLXoeBNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AvO-uFCV6MmXmDCbHS5iO-Q.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@giabyte?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Gia Oris&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;I am not sure anyone will ever need the following tricks but, at my client’s place, we have an application which can only be accessed through an URL which contains a dynamic base64 parameter. Needless to say, it makes its local development a bit inconvenient.&lt;/p&gt;

&lt;p&gt;In addition, I have to admit, I am not a big fan of CLI’s options which can automatically open browser. Even though I mostly use the Chrome Incognito mode for development purpose, I like to switch often between browsers to try out what I developed.&lt;/p&gt;

&lt;p&gt;Finally, I don’t use bookmarks (don’t judge me) and, I often switch between technologies. Therefore, without configuration, every time another port has to be used ( &lt;code&gt;:3333&lt;/code&gt; or &lt;code&gt;:4200&lt;/code&gt; or &lt;code&gt;:8000&lt;/code&gt; or &lt;code&gt;:8100&lt;/code&gt; etc.).&lt;/p&gt;

&lt;p&gt;That’s why I had the idea to add a pre-start script to the application which should copy the start URL of the application to my clipboard. Doing so, I can then just select a browser, paste the URI and, I am good to go.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h3&gt;

&lt;p&gt;In order to copy or read value to the clipboard from a NodeJS script, I used the library &lt;a href="https://github.com/sindresorhus/clipboardy"&gt;clipboardy&lt;/a&gt; which implement such a cross-platform feature.&lt;/p&gt;

&lt;p&gt;In addition, I also added &lt;a href="https://github.com/chalk/chalk"&gt;chalk&lt;/a&gt; ann &lt;a href="https://github.com/sindresorhus/boxen"&gt;boxen&lt;/a&gt; to print out the URL to the console in a stylish way.&lt;/p&gt;

&lt;p&gt;You may notice that all these dependencies are open source and developed by the same person, &lt;a href="https://twitter.com/sindresorhus"&gt;Sindre Sorhus&lt;/a&gt;, which definitely deserve a shout-out for this awesome contribution and work 👍.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i clipboardy chalk boxen &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#script" class="anchor"&gt;
  &lt;/a&gt;
  Script
&lt;/h3&gt;

&lt;p&gt;Once the dependencies fetched, I created the pre-start script itself. In this example, I create a file &lt;code&gt;start-url.js&lt;/code&gt; at the root of the project.&lt;/p&gt;

&lt;p&gt;The script primary generates the &lt;code&gt;url&lt;/code&gt; which I am looking to copy in my clipboard. On purpose, I am using an &lt;code&gt;Hello World 👋&lt;/code&gt; string to demonstrate that it is possible to encode complex parameters.&lt;/p&gt;

&lt;p&gt;To print out a nice message, I use &lt;code&gt;chalk&lt;/code&gt; with colors, in for- and background, and the bold option. I use &lt;code&gt;\n\n&lt;/code&gt; to create newlines. It is worth to notice that the library offer many options such as combining or nesting styles.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;clipboardy&lt;/code&gt; to copy the URL to the clipboard is actually really few work and can be solved by calling its function &lt;code&gt;copy&lt;/code&gt; with the all URL as input parameter.&lt;/p&gt;

&lt;p&gt;Finally, in a &lt;code&gt;console.log&lt;/code&gt; , I print out the message inside a box generated with &lt;code&gt;boxen&lt;/code&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;write&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;clipboardy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chalk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;boxen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;boxen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;encodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World 👋&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`http://localhost:3333/profile/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Your URL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Copied local address to clipboard!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Cannot copy &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to clipboard 🥺\n\n&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;boxen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;borderStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;borderColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#life-cycle" class="anchor"&gt;
  &lt;/a&gt;
  Life Cycle
&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href="https://docs.npmjs.com/cli/v6/using-npm/scripts"&gt;npm&lt;/a&gt; it is possible to execute scripts at different life cycles. Because I was looking to copy the URL when I start locally the application, I added it as a &lt;code&gt;prestart&lt;/code&gt; script to my &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"prestart"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node start-url.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You might ask “But David, why a prestart and not poststart?” to which I would answer that &lt;code&gt;prestart&lt;/code&gt; is executed for sure. On the contrary, &lt;code&gt;poststart&lt;/code&gt;, is indeed also executed but, only when the &lt;code&gt;start&lt;/code&gt; life cycle would be released. If your local server, as often, would stay active to watch for changes, &lt;code&gt;poststart&lt;/code&gt; would only resolve when you would cancel your local server.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Everything being in place, when I hit &lt;code&gt;npm run start&lt;/code&gt; in my console, the URL is generated, copied to the clipboard and, I notice the following output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BTN_SgeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ald-QYTtC5iBSisGVvNzPMA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BTN_SgeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ald-QYTtC5iBSisGVvNzPMA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I open one of my browser, I can paste the result in the navigation bar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--exYQWh5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AglgIo-xgThAKIlL-Y1uqtw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--exYQWh5Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AglgIo-xgThAKIlL-Y1uqtw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, hit &lt;code&gt;enter&lt;/code&gt; and access my URL with the generated parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O4sv78cO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZgx91lAb1eO8wN66IqYuYA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O4sv78cO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZgx91lAb1eO8wN66IqYuYA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;As underlined in the introduction of this post, I am really not sure if anyone will ever need this solution ever 😅. Anyway, I hope it was a fun read and let me know if you would improve anything.&lt;/p&gt;

&lt;p&gt;To infinity and beyond!&lt;/p&gt;

&lt;p&gt;David&lt;/p&gt;




&lt;p&gt;You can reach me out on &lt;a href="https://twitter.com/daviddalbusco"&gt;Twitter&lt;/a&gt; and, why not, give a try to &lt;a href="https://deckdeckgo.com/"&gt;DeckDeckGo&lt;/a&gt; for your next presentations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://deckdeckgo.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4yatxfq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://deckdeckgo.com/assets/meta/deckdeckgo-meta.png" alt="DeckDeckGo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>Three unusual qualities we look for to hire amazing developers</title>
      <author>Douglas Parsons</author>
      <pubDate>Fri, 11 Dec 2020 12:05:00 +0000</pubDate>
      <link>https://dev.to/dglsparsons/three-unusual-qualities-we-look-for-to-hire-amazing-developers-50pd</link>
      <guid>https://dev.to/dglsparsons/three-unusual-qualities-we-look-for-to-hire-amazing-developers-50pd</guid>
      <description>&lt;p&gt;Here at Shamaazi, we’ve recently gone through a round of hiring… and wow, hiring is hard!&lt;/p&gt;

&lt;p&gt;It’s challenging finding engineers who have the right qualities, attitude and personality to join a team. We’re a &lt;strong&gt;tiny&lt;/strong&gt; company, with just 2 engineers, so any new teammates have a massive impact on our products and culture.&lt;/p&gt;

&lt;p&gt;We’re super careful about who we hire because of this.&lt;/p&gt;

&lt;p&gt;We don’t expect or search for rockstar developers who can recite algorithms and live and breath software. We don’t expect the world’s most qualified experts in the technology we use. We don’t expect people to spend every moment of their spare time programming.&lt;/p&gt;

&lt;p&gt;The qualities we do look for are probably considered unusual compared to most software engineering outfits. Let's take a look at the three we use to ensure a good fit for working at Shamaazi.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eagleeyed-attention-to-detail-" class="anchor"&gt;
  &lt;/a&gt;
  Eagle-eyed attention to detail 🔍 &lt;a href="#eagle-eyed-attention-to-detail-%F0%9F%94%8D"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We give our potential candidates a short engineering assignment as part of our hiring process. We explicitly request that they don't spend more than an hour on it, but it still gives us a vast amount of information that just simply isn't evident from their CV.&lt;/p&gt;

&lt;p&gt;Reviewing these assignments has been eye-opening. Most solutions lack attention to detail in at least one area. We begin by asking relatively simple questions of the submissions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Correctness&lt;/strong&gt; – does the solution work for all inputs?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Validation&lt;/strong&gt; – are the inputs validated, what happens if we try to break the system?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testing&lt;/strong&gt; – How do we know their solution is correct? Is there any proof that it reliably works?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quality&lt;/strong&gt; – How easy is their solution to understand, maintain or extend?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most technical tests we’ve seen fail on at least two or three of these, if not all four. Quite simply, they lack attention to detail in both their quality and behaviour.&lt;/p&gt;

&lt;p&gt;This lack of attention to detail also applies to CVs. We’ve seen poor grammar, typos and even sentences that don’t make sense! Quite frankly, if they can’t complete a short assignment with rigour, or can’t write a CV without errors, can we really trust them with a product that could shape the future of our company?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ability-to-express-clearly-" class="anchor"&gt;
  &lt;/a&gt;
  The ability to express clearly 🗣️ &lt;a href="#the-ability-to-express-clearly-%F0%9F%97%A3%EF%B8%8F"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Writing good code, a good CV, or writing prose all have a lot in common. They are all forms of &lt;a href="https://dev.to/dglsparsons/why-effective-communication-is-the-key-skill-for-being-an-awesome-programmer-546"&gt;communication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Writing good code is about communicating a set of requirements both to the computer, and to a future maintainer, CVs communicate your skills and knowledge to a potential employer, and prose is a form of communicating ideas by writing them down.&lt;/p&gt;

&lt;p&gt;As a result, the ability to express yourself clearly is super important. Engineering teams don’t work in isolation, and working remotely causes a whole new set of challenges for communication. In order to stay well-aligned, agile, and have the ability to discuss complicated topics, we communicate constantly as a team. This is a fundamental aspect of a team being &lt;a href="https://timreview.ca/article/567"&gt;high-performing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, when reviewing engineers, we have to consider a few key questions: Does their code communicate its purpose clearly? Is it well structured? Well written? Does it clearly separate concerns? Does it have sensible naming? Does their CV communicate their strengths and experience eloquently and concisely? When prompted in an interview, can a candidate clearly express their thought-process? Can they articulate complicated ideas?&lt;/p&gt;

&lt;p&gt;If the answer to all of these is ‘yes’, then we know we have a candidate who is going to be a delight to work with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-positive-outlook-" class="anchor"&gt;
  &lt;/a&gt;
  A positive outlook 😄 &lt;a href="#a-positive-outlook-%F0%9F%98%84"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This one sounds strange, but I was first introduced to the idea by Patrick Collison, the Founder and CEO of Stripe. In his excellent talk &lt;a href="https://www.youtube.com/watch?v=fPfYN5gU_C0"&gt;‘How to Scale’&lt;/a&gt;, Patrick discusses in great depth the difficulties in building the culture he wanted.&lt;/p&gt;

&lt;p&gt;At an ideal company, we would go to work and everyone would be happy. People would love their jobs and be enthusiastic and supportive. The question then becomes: ‘how do we create a company where this is the culture? Where the atmosphere is happy’. This is an incredible challenge, one that has no easy solution.&lt;/p&gt;

&lt;p&gt;As a side note, if anyone knows how to build a company that can turn unhappy people into happy ones, please let me know (I’d like to send my parents there)!&lt;/p&gt;

&lt;p&gt;Thankfully, Patrick Collison also shared his ‘cheat’ to achieve this. Simply hire people who are happy, positive people already. This is the culture we want to build, so we’re taking the same shortcut he did at Stripe. By hiring happy people, we can ensure we maintain a happy culture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts-" class="anchor"&gt;
  &lt;/a&gt;
  Closing Thoughts &lt;a href="#closing-thoughts"&gt;#&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As a tiny company, we have to be incredibly careful about the people we hire. They can have a massive impact on our products, for better or for worse, and contribute heavily towards our culture. Because of this, we deliberately look for these three qualities as signs of excellence in people.&lt;/p&gt;

&lt;p&gt;If we can find people to hire who show three key qualities: a happy outlook, the ability to express themselves clearly, and a keen eye for details, then we know they will be a brilliant hire.&lt;/p&gt;




&lt;p&gt;Would you like to hear more about our hiring process? Do you want to know more about the problems people have in our technical assessment, or the common errors on CVs? Get in touch and let me know.&lt;/p&gt;




&lt;p&gt;Enjoyed this post? Want to share your thoughts on the matter? Found this article helpful? Disagree with me? Let me know by &lt;a href="https://twitter.com/dglsparsons"&gt;messaging me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Boilerplate - the Angular vs React difference</title>
      <author>Dean Radcliffe</author>
      <pubDate>Fri, 11 Dec 2020 10:25:49 +0000</pubDate>
      <link>https://dev.to/deanius/boilerplate-the-angular-vs-react-difference-2cbk</link>
      <guid>https://dev.to/deanius/boilerplate-the-angular-vs-react-difference-2cbk</guid>
      <description>&lt;p&gt;In React - a component is a function that returns a DOM tree (possibly by calling other component-functions). To test the function, you call it with different arguments, and assert different results.&lt;/p&gt;

&lt;p&gt;In Angular, a component is a class, with a decorator and a corresponding module, which must be registered by some other component's module, and whose dependencies are injected via a constructor (whew - say that twice!) It's a class, but you never call new yourself on the component in prod code or tests. To test an Angular component involves setting up mock providers, repeating some of the registration of imports/declarations etc so that the test environment (or Storybook) satisfies all the same things the prod code has.&lt;/p&gt;

&lt;p&gt;The difference is the amount of boilerplate.&lt;/p&gt;

&lt;p&gt;Boilerplate/configuration is not code you step through, or write 'from the head' or test-drive - it's stuff you trial-and-error your way through, with manuals and examples. A part of every coders job, yes, but hopefully a decreasing amount over time. Boilerplate gives you a low BizCode-to-FrameworkCode ratio, and leaves BizCode coupled tightly to the framework. I wrote some Angular tests where I manually new-ed up a component. They didn't get me very far.&lt;/p&gt;

&lt;p&gt;I think this difference is why React is eating the world - the mental model is simple enough yet composes arbitrarily, and you can do amazing things with it. There are fewer concepts to wire together in tests and code to simply get the return value of a function merged into the DOM. I'm not crapping on Angular or those who like it - it's powerful and opinionated. But newer frameworks (React, Vue, Svelte) area generally simpler, and that's a trend that won't likely reverse, imho. So let's hop the next bus out of boilerplate-town - we won't miss it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>angular</category>
      <category>functional</category>
    </item>
    <item>
      <title>Java: OOP in brief</title>
      <author>Supriya Nivrutti Kolhe</author>
      <pubDate>Fri, 11 Dec 2020 10:14:02 +0000</pubDate>
      <link>https://dev.to/supriya2371997/java-oop-in-brief-4hlf</link>
      <guid>https://dev.to/supriya2371997/java-oop-in-brief-4hlf</guid>
      <description>&lt;p&gt;Q1: what do you mean by OOP concept?&lt;br&gt;
Q2: List of OOP Features?&lt;br&gt;
Q3: Why use OOP concepts or advantages of OOP?&lt;br&gt;
Q4: Disadvantages of OOP?&lt;br&gt;
Q5: Difference between Procedural and OOP programming?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: For detailed information on OOP feature click on one you wish to explore&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;1. what do you mean by OOP concept:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1.1 stands for Object-Oriented Programming.&lt;br&gt;
1.2 OOP is a methodology or paradigm to design a program using classes and objects.&lt;br&gt;
1.3 OOP simplifies software development and maintenance by providing a few concepts such as:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymOHw4aF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rewxsx85fqmolo6r49p9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymOHw4aF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rewxsx85fqmolo6r49p9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. List of OOP Features:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2.1 class: a collection of object &amp;amp; logical entity, eg. bike&lt;br&gt;
2.2 object: a real-life entity that has state &amp;amp; behaviour of its own, eg. colour&lt;br&gt;
2.3 &lt;a href="https://dev.to/supriya2371997/java-oop-inheritance-178l"&gt;Inheritance&lt;/a&gt;: acquiring properties and behaviour from another class, eg. father and son&lt;br&gt;
2.4 Polymorphism: one task in different ways, speak can be as meow and for the dog, it can be woof.&lt;br&gt;
2.5 Abstraction: hiding internal details and showing functionality, eg. ATM machine&lt;br&gt;
2.6 Encapsulation: binding/ wrapping code &amp;amp; data together into a single unit, eg. capsule containing different medicines&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3. Why use OOP concepts or advantages of OOP:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3.1 faster&lt;br&gt;
3.2 Simple and provide a clear understanding and structure of code&lt;br&gt;
3.3 reusability - able to reuse content and behaviour of the existing class in a new class.&lt;br&gt;
3.4 code optimisation&lt;br&gt;
3.5 Modifiability i.e. easy to update&lt;br&gt;
3.6 Secure because of data hiding concept&lt;br&gt;
3.7 easy to upgrade from small to large system&lt;br&gt;
3.8 we cn eliminate redundant code and extend the use of existing classes&lt;br&gt;
3.9 possible to have multiple objects&lt;br&gt;
3.10 easy to partition the work in a project based on objects&lt;br&gt;
3.11 provide message passing technique for communication between objects&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;4. Disadvantages of OOP:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;4.1 require more memory to increase speed&lt;br&gt;
4.2 larger program size&lt;br&gt;
4.3 not suitable for all type of programs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;5. Difference between OOP programming &amp;amp; Procedural oriented language:-&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OOPs makes development and maintenance easier i.e. if code grows it's easy to manage it&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL is not easy to manage &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP provide data hiding&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;in procedure-oriented programming global data can be accessed from anywhere&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MBa_2ig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dliqxhamrky8rak7bz1j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MBa_2ig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dliqxhamrky8rak7bz1j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP follows the bottom-up approach&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL follows the top-down approach&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP have many access specifiers such as public, private, protected etc&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL does not have any&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;updation in OOP based program is easy&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;updation in POL based program is difficult&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;because of data hiding, OOP is secure&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL doesn't have any proper way of data hiding, thus it is less secure&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;in OOP data is more important&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;in POL functions are more important&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OOP is mainly used to solve real-world problems&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;POL is mainly used for unreal issues&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bbZZGs3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pdokcalwp2nycijouyok.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bbZZGs3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pdokcalwp2nycijouyok.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt;

</description>
      <category>java</category>
      <category>oop</category>
    </item>
    <item>
      <title>Intro epicReact.dev Review</title>
      <author>Jannik Wienecke</author>
      <pubDate>Fri, 11 Dec 2020 09:51:01 +0000</pubDate>
      <link>https://dev.to/jannikwienecke/intro-epicreact-dev-review-3pe6</link>
      <guid>https://dev.to/jannikwienecke/intro-epicreact-dev-review-3pe6</guid>
      <description>&lt;center&gt;
&lt;br&gt;
Hello folks, this first post is a short introduction to my series, reviewing and summarising the epicReact.dev Course by Kent C. Dodds.&lt;br&gt;
&lt;/center&gt;



&lt;p&gt;In this series I want to review the most important principles that I have learned, repeat the materials another time for myself, write about it to deepen my understanding, explain it and give code examples.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-course-is-divided-into-8-subcourses" class="anchor"&gt;
  &lt;/a&gt;
  The course is divided into 8 Sub-Courses:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;React Fundamentals&lt;/li&gt;
&lt;li&gt;React Hooks&lt;/li&gt;
&lt;li&gt;Advanced React Hooks&lt;/li&gt;
&lt;li&gt;Advanced React Patterns&lt;/li&gt;
&lt;li&gt;React Perfomance&lt;/li&gt;
&lt;li&gt;Testing React Apps&lt;/li&gt;
&lt;li&gt;React Suspense (&lt;strong&gt;Experimental&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Build an Epic React App&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of the chapters as the names describe focus on a specific concept and topic. For each Course I will write a review which will come within the next weeks.&lt;br&gt;
I won't cover the last chapter though, since it mostly covers the same concepts as the previous chapters.&lt;/p&gt;

&lt;p&gt;The course is built based on the eggHead.io learning style. Meaning, the instructor shortly gives you an overview about the task that you are expected to solve by yourself. Then you will find instructions about the task itself and background information with links to posts or third party libraries.&lt;br&gt;
Within the file that you have to write the solution in, you'll find additional hints and tips to successfully solve this exercise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Tip create useState with the name counter and setCounter&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Maybe, inside the React Hooks Course you see the comment above, giving you the hint that you need React.useState, so you know you have to create this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// create useState with the name counter and setCounter&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Each of the Courses is divided into multiple topics which each contain several exercises. Each Exercise again has several Extra Credit Exercises. For those, you won't find any tips. This is intentional and should force the student to find the solution by himself.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#who-is-this-course-for" class="anchor"&gt;
  &lt;/a&gt;
  Who is this Course for?
&lt;/h3&gt;

&lt;p&gt;Before I started this course I had done some courses on Udemy and FrontendMasters, watched several talks on Youtube and build several small Apps(non professional). While I found that I knew most of what was teached in the first 4 Courses, I still learned something in every course. Further I only knew the most of the content of the Advanced React Patterns because I watched Kent C. Dodds Workshop about it at FrontendMasters.&lt;br&gt;
From the courses 5-7 I learned a lot. I had almost never used testing and profiling before, so this was a lot new and really helpful stuff. Further, the Suspense Concepts which are an experimental feature, were great. Giving you a glimpse into what will come in the future. The Last Course, building an App helped you to remember and deepen the understanding, since a lot of the material was repeated.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-who-should-takes-the-course" class="anchor"&gt;
  &lt;/a&gt;
  So who should takes the course:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I think someone without any Javascript experience should first buy a Course in Udemy or some other plattform (or buy a book) &lt;/li&gt;
&lt;li&gt;Someone with Javascript but without any React Experience can take the course but I think it will be very challenging. Maybe a short introduction into react and some reading can be very helpful&lt;/li&gt;
&lt;li&gt;Someone with Javascript and React Experience should definitely take the Course. It will bring you to the next level. It will teach you most of what you need to know to work as a Frontend Developer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#should-experienced-developer-take-the-course" class="anchor"&gt;
  &lt;/a&gt;
  Should experienced developer take the course?
&lt;/h4&gt;

&lt;p&gt;In my opinion yes. First of all while writing our programs we often get comfortable with our way of writing code. We forget stuff doesn't keep up with new material and come across bad habits. Taking the course will give you a fresh perspective, remind you of basic principles and will definitively teach you some new concepts. &lt;/p&gt;




&lt;p&gt;To sum it up, I enjoyed taking the course, I learned a lot and I will come back to the course material to recap and to use some of the great code snippets that the instructor will show you. In total, it took me about 3 weeks to finish the course!! Each day I spend about 4 hours on the material. So there is a lot of it :)&lt;/p&gt;

&lt;p&gt;PS: The Materials are open source. So everyone can use it and work through by himself. Though I recommend, buying the course, since firstly you support the creator, and secondly having the videos, will clarify a lot if you get stuck and will give you more insides. Further, the Extra Credits won't have tips that help you solve the exercise. So, its very helpful to get the explanation for why something is done the way it is shown in the solution.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check out the reviews of the individual chapters that will come in the future. Those will be a lot more focused on the contents itself and will contain more code examples&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>testing</category>
      <category>epicreact</category>
    </item>
    <item>
      <title>Coding interviews post COVID-19</title>
      <author>Nimrod Kramer</author>
      <pubDate>Fri, 11 Dec 2020 09:47:00 +0000</pubDate>
      <link>https://dev.to/dailydotdev/coding-interviews-post-covid-19-26i1</link>
      <guid>https://dev.to/dailydotdev/coding-interviews-post-covid-19-26i1</guid>
      <description>&lt;p&gt;One of the strongest trends in the tech world is working remotely. It introduced great opportunities to work for your desired company that, in many cases, was only hired locally before the pandemic. &lt;/p&gt;

&lt;p&gt;If you’re now preparing for a coding interview, you might also want to check &lt;a href="https://daily.dev/posts/coding-interviews-great-tools-and-useful-tips-to-make-smarter-choices"&gt;Coding interviews: great tools and useful tips to make smarter choices&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-changed" class="anchor"&gt;
  &lt;/a&gt;
  What’s changed?
&lt;/h2&gt;

&lt;p&gt;From an interview preparation standpoint, you want to be aware that it impacted many companies' hiring processes. A standard HR process can’t work anymore since it has to be done online, mostly through video conferencing. That means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There’s less “human touch” in the process&lt;/li&gt;
&lt;li&gt;The process can be much faster since scheduling has fewer constraints when people work from home&lt;/li&gt;
&lt;li&gt;Location matters less than ever before&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-does-covid19-have-to-do-with-coding-interviews" class="anchor"&gt;
  &lt;/a&gt;
  What does COVID-19 have to do with coding interviews?
&lt;/h2&gt;

&lt;p&gt;Some of the changes I mentioned above can definitely work in your favor!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-preinterview-small-talks-well-not-exactly" class="anchor"&gt;
  &lt;/a&gt;
  No pre-interview small talks (well… not exactly)
&lt;/h3&gt;

&lt;p&gt;It’s not a secret that HR specialists often start testing candidates from when they arrived at the office. There’s a lot of things you can learn about a person from how he or she communicates with the receptionist or with the office manager. Other scenarios used to be quite common, like going with your interviewer to prepare a coffee cup before starting the meeting. All of these can’t happen anymore.&lt;/p&gt;

&lt;p&gt;Given those circumstances, you can have much better control over your first impression. You know exactly when the meeting starts, and you can be ready. However, the thing you really need to be aware of is that the interviewers also get more sophisticated. It’s not rare that instead of starting from the coding interview itself, the interviewer would try to start a small talk. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In some cases, it can come in the interviewer's form, starting with sharing something personal about him or her. It can be something nice or funny about their home or family. They do it on purpose, not only to break the ice. They do it to see if you get the signal that they want small talk. It can be a test of your emotional intelligence. So be aware ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#youre-probably-going-to-be-stressed-but-its-fine" class="anchor"&gt;
  &lt;/a&gt;
  You’re probably going to be stressed, but it’s fine
&lt;/h3&gt;

&lt;p&gt;That’s natural. However, it is much more difficult to spot it when using video conferencing (usually, the interviewer can’t see the movement of your hands, micro-expressions, and your sitting posture). It can definitely work for your benefit, so you can actually focus mostly on the professional side.&lt;/p&gt;

&lt;p&gt;The fact that your interviewer won’t have the full image will give you a better chance of emphasizing your professional strengths. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eye-contact-is-tricky" class="anchor"&gt;
  &lt;/a&gt;
  Eye contact is tricky
&lt;/h3&gt;

&lt;p&gt;When doing a coding interview online, you have to juggle sometimes between solving a challenge and answering a question. Once everything is done by video, it makes things complicated. Keep in mind that when you talk with the interviewer, you want to keep eye contact as much as possible (even though in real life, it means looking at the camera rather than their eyes).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-advice-for-video-interviews-for-programmers" class="anchor"&gt;
  &lt;/a&gt;
  General advice for video interviews for programmers
&lt;/h2&gt;

&lt;p&gt;Here’s a good checklist with some points worth keeping in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep the background neutral. &lt;/li&gt;
&lt;li&gt;Find a good camera angle.&lt;/li&gt;
&lt;li&gt;Use a high-quality microphone. &lt;/li&gt;
&lt;li&gt;Look professional. &lt;/li&gt;
&lt;li&gt;Don't do anything else while interviewing. &lt;/li&gt;
&lt;li&gt;Do your research. &lt;/li&gt;
&lt;li&gt;Hold a mock interview.
Here a resource that I really love, which is a &lt;a href="https://medium.com/better-programming/a-comprehensive-guide-to-video-interviews-for-programmers-ed92961f57c1"&gt;Comprehensive Guide to Video Interviews for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Don’t miss the signal for small talk. That can be the difference between a good and great interview.&lt;/li&gt;
&lt;li&gt;Doing interviews by video works to your advantage. Make sure it counts.&lt;/li&gt;
&lt;li&gt;Keep eye contact whenever you can. It has a profound effect on the interview result.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; is the easiest way to stay updated on the latest programming news. It's a feed of articles that's ranked by a community of +60,000 developers. Get the best content from the top tech publications on any topic you want. All in one extension.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BuAxU7zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fuiu65dyow99idmn6e3e.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>interview</category>
      <category>covid19</category>
    </item>
    <item>
      <title>How is React different from vanilla JS</title>
      <author>Aman Sethi</author>
      <pubDate>Fri, 11 Dec 2020 09:14:06 +0000</pubDate>
      <link>https://dev.to/amansethi00/how-is-react-different-from-vanilla-js-4lfn</link>
      <guid>https://dev.to/amansethi00/how-is-react-different-from-vanilla-js-4lfn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#vanilla-js" class="anchor"&gt;
  &lt;/a&gt;
  Vanilla Js
&lt;/h1&gt;

&lt;p&gt;VanillaJS is a name to refer to using plain JavaScript without any additional libraries. All major web browsers have a built-in JavaScript engine that executes the code on the user's device. It is the language to communicate with the browsers directly. Let it be any framework Angular, React, etc they are all built on top of vanilla JS. When making small web apps using vanilla JS or any of the framework wouldn't make any big of a difference. But when there are more functionalities to be added code gets messier.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react" class="anchor"&gt;
  &lt;/a&gt;
  React
&lt;/h1&gt;

&lt;p&gt;It is a framework built on vanilla JS. Think of it as the middleware to communicate with the browser. Modern browsers provide many functionalities that improve user experience and provide good visual animations also. To communicate with the browser we use vanilla JS. But the code gets many times too long making things look complicated in vanilla JS. React hides these complexities and let a developer access the features of the browser using less code. Also, I would like to remind you here that &lt;em&gt;React is a &lt;code&gt;declarative&lt;/code&gt; language for this reason.&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;React is a &lt;code&gt;Component-Based&lt;/code&gt; framework. This means components are once written and used multiple times within the app. In vanilla JS it is not the same case as everything has to be hard-wired to make things work.&lt;/p&gt;

&lt;p&gt;React can also render on the server using Node and power mobile apps using &lt;code&gt;React Native&lt;/code&gt;.Many companies use React Native for their mobile app because the same code can be deployed to both &lt;code&gt;Play Store&lt;/code&gt; and &lt;code&gt;App Store&lt;/code&gt;.This helps them ship out new features and information to their users in less time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I hope that this article helped you learn something new today. If it did you can follow me on &lt;a href="https://twitter.com/amansethi00"&gt;Twitter&lt;/a&gt;, to stay connected.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
