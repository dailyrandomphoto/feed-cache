<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Beginner's Guide to The Intersection Observer API.</title>
      <author>David Herbert💻🚀</author>
      <pubDate>Sat, 22 May 2021 09:43:40 +0000</pubDate>
      <link>https://dev.to/daveyhert/a-beginner-s-guide-to-the-intersection-observer-api-2d50</link>
      <guid>https://dev.to/daveyhert/a-beginner-s-guide-to-the-intersection-observer-api-2d50</guid>
      <description>&lt;p&gt;Have you ever visited a website where as you scroll down the page, the contents of the webpage gradually begin to reveal themselves as you approach them? You got to admit, it's a pretty sleek feature. Have you ever wondered how you could implement this feature in your projects without using third-party libraries or plugins? Well, JavaScript has a native Intersection Observer API that lets you do just that... and much, much more. In this article, we will discuss how this Intersection Observer API works and how we can use it to detect the visibility of an element by building a simple web page that implements this "reveal contents on scroll" feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A basic knowledge of JavaScript (beginner level is acceptable as I'll explain everything in great details like I was explaining to a 5-year-old. :)&lt;/li&gt;
&lt;li&gt;A basic knowledge of HTML and CSS (you've built at least one basic webpage with them).&lt;/li&gt;
&lt;li&gt;A code editor (VS Code recommended).&lt;/li&gt;
&lt;li&gt;And a browser of course (Chrome or Firefox recommended).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-intersection-observer"&gt;
  &lt;/a&gt;
  What is the Intersection Observer?
&lt;/h2&gt;

&lt;p&gt;The Intersection Observer API is simply a new way to observe (monitor) the position and visibility of an element in the DOM relative to another root element and to run a callback function if these elements intersect (meet). &lt;/p&gt;

&lt;p&gt;Now you might wonder, What exactly is a root element? Well, a root element is simply an element that is a parent or container element to other elements. Meaning, If we created a &lt;code&gt;div&lt;/code&gt; in an HTML document and inside this &lt;code&gt;div&lt;/code&gt; we placed a &lt;code&gt;p&lt;/code&gt; text, the &lt;code&gt;div&lt;/code&gt; becomes the direct root element (parent) of the &lt;code&gt;p&lt;/code&gt; text as it is what contains the paragraph.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;Lorem, ipsum.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on this logic, we can safely say the &lt;code&gt;body&lt;/code&gt; is also the immediate parent to this &lt;code&gt;div&lt;/code&gt;  and also a grandparent to the &lt;code&gt;p&lt;/code&gt; text. But you know what else is the ancestral root element of everything in the DOM? The browser viewing the HTML document becomes a container (root) to whatever area of the webpage that is visible to the browser's viewport (screen) at any time. &lt;/p&gt;

&lt;p&gt;So in essence, the Intersection Observer API can be used to observe an element to see if that element intersects (meets or passes across) its root element in the DOM or if it simply enters or leaves the browser's viewport. And for the observer to trigger a callback function when this event takes place. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: A callback function is simply a normal function that is provided to another function as that function's argument (the actual value for its parameter).&lt;/p&gt;

&lt;p&gt;Below is an image I've prepared that illustrates an actual Intersection in action, It should give you an idea of how it works, but if it's still unclear, don't sweat it... I'll explain everything in a minute.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E2wPbfiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adw3k34zoqkasy5pjnth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E2wPbfiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adw3k34zoqkasy5pjnth.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-basic-htmlcss-page"&gt;
  &lt;/a&gt;
  Creating A Basic HTML/CSS Page
&lt;/h2&gt;

&lt;p&gt;Now that we know what an Intersection Observer is, let’s dive into its implementation. We’ll start by creating a simple HTML page with 3 sections, the first and third section is of little interest to us as we will mostly be working with the second section, we simply want more room to be able to scroll down the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
    &amp;lt;section class="section-1"&amp;gt;
      &amp;lt;h2&amp;gt;Section 1&amp;lt;/h2&amp;gt;
    &amp;lt;/section&amp;gt;
    &amp;lt;section class="section-2"&amp;gt;
      &amp;lt;img class="img" src="background.jpg" alt="" /&amp;gt;
    &amp;lt;/section&amp;gt;
    &amp;lt;section class="section-3"&amp;gt;
      &amp;lt;h2&amp;gt;Section 3&amp;lt;/h2&amp;gt;
    &amp;lt;/section&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for the CSS, we'll give each section a &lt;code&gt;height&lt;/code&gt; of &lt;code&gt;100vh&lt;/code&gt;, center the contents of each section using &lt;code&gt;flex&lt;/code&gt;, then give the image a fixed responsive width and make each section obvious by applying a background colour to separate them. Lastly, we will create a &lt;code&gt;hidden&lt;/code&gt; class that will be responsible for hiding and revealing our content later on using JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;h2 {
  font-size: 3rem;
}

.img {
  width: 95%;
  max-width: 600px;
  transition: all 1.5s ease-in;
}

section {
  background-color: #dbe6eb;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}

.section-2 {
  background-color: #fff;
}

.hidden {
  opacity: 0;
  transform: translateX(100%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resulting layout👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEl8oful--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53n536jlyu56jf8vb0sg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEl8oful--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53n536jlyu56jf8vb0sg.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Great, we have our basic webpage set up, now let's dive into JavaScript and talk about the Intersection Observer.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-the-intersection-observer-api"&gt;
  &lt;/a&gt;
  Implementing the Intersection Observer API
&lt;/h2&gt;

&lt;p&gt;To use the intersection observer API we need to start by first creating one using its default object constructor function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new IntersectionObserver();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This constructor function is basically an in-built function in JavaScript that is responsible for creating an observer that we can then use to observe our target element, and this constructor has two parameters that take in two arguments. &lt;/p&gt;

&lt;p&gt;The first argument is a callback function that is called when there is an intersection with the observed element. Remember what a callback function is? Simply a normal function that is passed to another function as that functions argument, so basically the Intersection Observer is given a function to call when there is an intersection.&lt;/p&gt;

&lt;p&gt;The second argument is an object containing options to customize the observer. This argument is actually optional and can be left out, if not provided the observer will use its default options (more on that later). Now let's create an Intersection Observer.&lt;/p&gt;

&lt;p&gt;Firstly, let’s select the target element we want to observe.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const section = document.querySelector(‘.section-2’);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let’s create an observer to observe this&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;section element&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Const theObserver = IntersectionObserver(callbackFunction, options);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have created an observer, we have to tell the observer what target element to observe using its built-in &lt;code&gt;observe()&lt;/code&gt; method on the observer. This method receives the target element to be observed as its argument. So let's do just that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;theObserver.observe(section);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s go through what we just did now, we first selected a target element to be observed &lt;code&gt;section&lt;/code&gt;, then created an observer &lt;code&gt;theObserver&lt;/code&gt;, and finally we told the observer what to observe by passing the target element to be observed into the observer using the &lt;code&gt;observe()&lt;/code&gt;  method. That's it, we have everything set up, the only problem is we have neither defined our &lt;code&gt;callbackFunction&lt;/code&gt; nor the &lt;code&gt;options&lt;/code&gt; object so they are currently undefined. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-options-object"&gt;
  &lt;/a&gt;
  The Options Object
&lt;/h3&gt;

&lt;p&gt;Now, let's define the &lt;em&gt;options&lt;/em&gt; that we initially passed into the observer constructor on creation as it is still linked to nothing at the moment. I’ll start with defining the options object (recall that this is used to customize the observer) and then explain each property inside.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;Because an object can not be hoisted (used before it is defined), to avoid errors it should always be defined at the top before passing it to the observer, or the actual object itself can be passed as an argument to the *Observer&lt;/em&gt; when creating the observer.*&lt;/p&gt;

&lt;p&gt;With that in mind, let's rewrite the JavaScript code we have written so far in the appropriate order.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const section = document.querySelector(‘.section-2’);

const options = {
  root: null,
  threshold: 0.3,
  rootMargin: "-100px",
}

const theObserver = new IntersectionObserver(callbackFunction, options);
}
theObserver.observe(section);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;root&lt;/code&gt;: This is where we specify what exact root element we want our observed element to intersect against. The &lt;code&gt;root&lt;/code&gt; is usually an ancestor of the target element in the DOM (i.e a container or parent element of the observed element). The value is set to &lt;code&gt;null&lt;/code&gt; if we want the observed element to intersect with the entire browser's viewport (that's the default value). Think of the root element as a rectangular “capturing frame” that the observed target element needs to make contact with.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;threshold&lt;/code&gt;:  The &lt;code&gt;threshold&lt;/code&gt; is basically the percentage of the observed target that should come into view before it can be considered an intersection. Confused? Well, do you want the target element to completely come into view (become 100% visible) before triggering the callback? or do you want just a fraction of it to be visible in the browser's viewport before running the callback? That's what you have to specify as the &lt;code&gt;threshold&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The threshold receives a numeric value between 0 and 1 which represents the percentage in which the target intersects the root. Meaning 0.1 represents 10%, 0.2 is 20%, 0.5 is 50%, and 1 is 100%. The default value is 0, which means the intersection occurs as soon as the observed element hits even 0px of the &lt;code&gt;root&lt;/code&gt; (about to come into view).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The received value can either be a single value (which means you want the target element to make a single intersection) or multiple values in an array (which means you want the target element to make multiple intersections and to run the callback for each intersection). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The intersection is triggered each time the target element is making an entry or exiting the root (viewport). Meaning if the threshold is 0.1, the intersection will occur when 10% of the element is visible and another 10% intersection will occur when it is leaving the viewport.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;rootMargin&lt;/code&gt;: Because the root element is considered to be a rectangular frame (bounding box) with four sides, margins (positive or negative) can be applied to the root element just like in CSS, to grow or shrink its frame of intersection. &lt;/p&gt;

&lt;p&gt;Recall that the browser's viewport is our &lt;code&gt;root&lt;/code&gt; element (which is a rectangular frame) and we set the threshold to &lt;code&gt;0.3&lt;/code&gt;? that means the intersection should occur when 30% of the observed element comes into view. Now, we also went ahead to set the &lt;code&gt;rootMargin&lt;/code&gt; to &lt;code&gt;-100px&lt;/code&gt;, this will shrink the intersection frame by -100px and the intersection will no longer occur at our specified &lt;code&gt;30% threshold&lt;/code&gt; but would instead wait until another 100px of the target element has come into view after the initial 30% (think of it as adding 100px to the 30%). &lt;/p&gt;

&lt;p&gt;If the margin was set to &lt;code&gt;100px&lt;/code&gt; the intersection would be triggered while the observed element was still &lt;code&gt;100px&lt;/code&gt; away from the 30% threshold (the negative margin shrinks the frame of intersection while the positive margin grows it/pushes it outwards).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-callback-function"&gt;
  &lt;/a&gt;
  The Callback Function
&lt;/h3&gt;

&lt;p&gt;We can now define our callback function, which is the last piece of the puzzle. So let's define the function but we won't do anything with it just yet because we have to first take a look at the behaviour of the Intersection Observer and how it actually works. &lt;/p&gt;

&lt;p&gt;When a webpage with an Intersection Observer is initially loaded for the first time, the Observer always fires the provided callback function once by default regardless of an actual intersection or not (I know, it's a weird behaviour). When this occurs, the observer passes an &lt;code&gt;entries&lt;/code&gt; array to the callback function, and this &lt;code&gt;entries&lt;/code&gt; array itself contains an &lt;code&gt;IntersectionObserverEntry&lt;/code&gt;object inside of it. This object contains several properties that describe the intersection between the target element and its root container. &lt;/p&gt;

&lt;p&gt;Enough talk... let's define the callback function so we can see the object itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function callbackFunction(entries) {
  console.log(entries);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have defined the callback and provided an &lt;code&gt;entries&lt;/code&gt; parameter for the observer to pass its observations and we are logging to the console the actual argument that is passed into the parameter when the callback is fired. If we now load the site and open up the dev tool, below is what we see 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OgCSIYj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2h59w99udcvpn631jli.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OgCSIYj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2h59w99udcvpn631jli.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the dev tool the entries contain several details about the intersection, you can explore each of these properties on your own but in this article, we'll only be looking at the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;target:&lt;/code&gt; This is the actual element that is being observed by the observer for an intersection with the root element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isIntersecting:&lt;/code&gt; This returns a &lt;em&gt;Boolean&lt;/em&gt; value of true if the target element being observed is currently intersecting (if the &lt;em&gt;threshold&lt;/em&gt; of the target element has intersected) with the root element or &lt;code&gt;false&lt;/code&gt; if that's not the case.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isVisible:&lt;/code&gt; This returns a &lt;em&gt;Boolean&lt;/em&gt; value of &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; which indicates whether or not the target element being observed is currently visible in the browser's viewport.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we understand what returned values these properties contain, we can now write a proper function that checks the entries object to see if our target element has intersected with the browser's viewport and to do something with that info.&lt;/p&gt;

&lt;p&gt;But before proceeding to the callback, let's select the content we wish to reveal on Intersection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const imgContent = document.querySelector(".img");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's define the callback, before going through it line by line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function callBackFunction(entries) {
  const [entry] = entries;
  if (entry.isIntersecting) {
    imgContent.classList.remove("hidden");
  } else {
    imgContent.classList.add("hidden");
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's dissect the function line by line.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const [entry] = entries&lt;/code&gt;: Recall that the Observer passes an entries array to the callback containing an IntersectionObserverEntry object? I simply deconstructed (extracted the object in) the array and stored it in an &lt;code&gt;entry&lt;/code&gt; variable to make it easier to directly access the properties of interest stored in that object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if(entry.isIntersecting) {imgContent.classList.remove("hidden")}&lt;/code&gt;: Afterwards, we check the &lt;code&gt;isIntersecting&lt;/code&gt; property to see if our target element (the target section-2) has intersected with the viewport, If the value is &lt;code&gt;true&lt;/code&gt; we remove the &lt;code&gt;hidden&lt;/code&gt; class that we initially created in our CSS from the image to reveal it (you might be wondering why we are removing a hidden class that we never did add to the image... the else block below is your answer).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;else {imgContent.classList.add("hidden")}&lt;/code&gt;: Else if the &lt;code&gt;isIntersecting&lt;/code&gt;value is &lt;code&gt;false&lt;/code&gt; we add the &lt;code&gt;hidden&lt;/code&gt; class to the image, But do you recall that the callback function gets fired once by the Observer when we load the webpage? When this happens the initial entry is passed to our function. Since there is no Intersection, this else block will run, thereby hiding our image on load.&lt;/p&gt;

&lt;p&gt;That's all, our webpage should now behave as expected&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7lH8j2Lt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iorbpxdmbyjtn0uzal2w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7lH8j2Lt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iorbpxdmbyjtn0uzal2w.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Excuse the lag in the recording, my screen recorder was acting up. But as you can see, as we scroll towards the observed section, once 30% of the element comes into view we ought to get an Intersection, but because we set the rootMargin to &lt;code&gt;-100px&lt;/code&gt; the Intersection will now occur when the target section scrolls another 100px into view, then an Intersection is triggered and the callback is fired. The image then gets revealed and slides back into its original position as the hidden class gets removed. &lt;/p&gt;

&lt;p&gt;And as the observed section scrolls out of view (exits) the callback is fired again by the Observer, If you can recall, we discussed how the observer is fired on entry and again fired when exiting the viewport... and since the second time there is no actual intersection, the hidden class is added again and the image is hidden as we scroll out of view.&lt;/p&gt;

&lt;p&gt;here is the entire JavaScript code we wrote.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const section = document.querySelector(".section-2");
const imgContent = document.querySelector(".img");

const objOptions = {
  root: null,
  threshold: 0.3,
  rootMargin: "-100px",
};

const sectionObserver = new IntersectionObserver(callBackFunction, objOptions);
sectionObserver.observe(section);

function callBackFunction(entries) {
  const [entry] = entries;
  console.log(entry);
  if (entry.isIntersecting) {
    imgContent.classList.remove("hidden");
  } else {
    imgContent.classList.add("hidden");
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/DaveHert/Intersection-Observer"&gt;Source Code&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://revealimageonscroll.netlify.app/"&gt;Demo&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congrats!!! You have successfully implemented a basic Intersection, but there are a few things I didn't get to cover as the article was getting too long. We did not cover how to observe multiple elements, nor did we discuss how to unobserve an element after Intersection. For this, I'll make part two of this article where we cover these and also build another webpage where we observe multiple sections and do something for each of their respective Intersection.&lt;/p&gt;

&lt;p&gt;And if you were wondering what else you could do with the IntersectionObserver, your imagination is the limit, you could implement an Infinite scrolling page, a lazy loading feature, a sticky menu and so much more. I'll probably make more tutorials covering these features so stay tuned.&lt;/p&gt;

&lt;p&gt;If you found this article helpful in any way, do well to like and follow for more contents. And if you've got any questions or spot any errors... please do well to leave some feedback as this is my first technical article. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver"&gt;MDN Web Docs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.w3.org/TR/intersection-observer/"&gt;W3.Org&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to cartoonize an image with Python</title>
      <author>Stokry</author>
      <pubDate>Sat, 22 May 2021 08:43:08 +0000</pubDate>
      <link>https://dev.to/stokry/how-to-cartoonize-an-image-with-python-1e01</link>
      <guid>https://dev.to/stokry/how-to-cartoonize-an-image-with-python-1e01</guid>
      <description>&lt;p&gt;In this tutorial, I will show you how to give a cartoon-effect to an image in Python with OpenCV.&lt;/p&gt;

&lt;p&gt;OpenCV is an open-source python library used for computer vision and machine learning. It is mainly aimed at real-time computer vision and image processing. It is used to perform different operations on images which transform them using different techniques.&lt;/p&gt;

&lt;p&gt;Many apps can turn your photos into cartoons, but you can do this on your own with few lines of code Python code. &lt;/p&gt;

&lt;p&gt;This is our test image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PNUkIXqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bFh6dM0/elon-musk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PNUkIXqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/bFh6dM0/elon-musk.jpg" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's jump to the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after that we we read our image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'elon.jpeg'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we will define our &lt;code&gt;resizeImage&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resizeImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;scale_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale_ratio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale_ratio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_dimensions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_dimensions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;interpolation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INTER_AREA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resized&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the we need to find contours:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;findCountours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;contoured_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;
    &lt;span class="n"&gt;gray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cvtColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contoured_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLOR_BGR2GRAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;edged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Canny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hierarchy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findContours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edged&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RETR_EXTERNAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHAIN_APPROX_NONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawContours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contoured_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contourIdx&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;thickness&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Image after countouring'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contoured_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;destroyAllWindows&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;contoured_image&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after that, we do a color quantization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ColorQuantization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we convert image to numpy float32:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;also we need to define critera and apply kmeans:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;criteria&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TERM_CRITERIA_EPS&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TERM_CRITERIA_MAX_ITER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0001&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;compactness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kmeans&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;criteria&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KMEANS_RANDOM_CENTERS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we convert to &lt;code&gt;uint8&lt;/code&gt; and apply to original image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
   &lt;span class="n"&gt;res2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resized_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resizeImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;coloured&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ColorQuantization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resized_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;contoured&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;findCountours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coloured&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;final_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;contoured&lt;/span&gt;
    &lt;span class="n"&gt;save_q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Save the image? [y]/[n] "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;save_q&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cartoonized_"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;final_image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Image saved!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is our final result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPDPT10I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Qmpgwyn/cartoonized-elon-musk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPDPT10I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/Qmpgwyn/cartoonized-elon-musk.jpg" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you all. &lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>showdev</category>
      <category>computervision</category>
    </item>
    <item>
      <title>Hoisting in JavaScript?</title>
      <author>Utkarsh Yadav</author>
      <pubDate>Sat, 22 May 2021 08:42:53 +0000</pubDate>
      <link>https://dev.to/uyadavdev/hoisting-in-javascript-285c</link>
      <guid>https://dev.to/uyadavdev/hoisting-in-javascript-285c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What is hoisting?&lt;/li&gt;
&lt;li&gt;Undefined or not-defined?&lt;/li&gt;
&lt;li&gt;Only declarations are hoisted!&lt;/li&gt;
&lt;li&gt;Examples&lt;/li&gt;
&lt;li&gt;Thanks for reading. support!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-hoisting"&gt;
  &lt;/a&gt;
  what is hoisting?
&lt;/h1&gt;

&lt;p&gt;Hoisting in JavaScript is a must known concept for beginners. Well, It is a phenomenon where we can access the functions and variable in JavaScript even-before initialising it.&lt;/p&gt;

&lt;p&gt;Sounds Amazing! But it's true we can do this is JavaScript. Unlike other languages like C, C++, python etc. where we need to initialise or define the variable prior to make a call or access it.&lt;/p&gt;

&lt;p&gt;Conceptually, for example, a strict definition of hoisting suggests that variable and function declarations are physically moved to the top of your code, but this is not in fact what happens. Instead, the variable and function declarations are put into memory during the compile phase, but stay exactly where you typed them in your code.&lt;/p&gt;

&lt;p&gt;This is know as &lt;code&gt;Hoisting&lt;/code&gt;. The hoisting is can be little confusing while understanding it in first go. So i would recommend you to understand &lt;a href="https://dev.to/uyadavdev/behind-the-scenes-javascript-3ebh"&gt;Behind the scenes working of JavaScript&lt;/a&gt; from my previous post. To know about jargon like: GEC(Global Execution Context), LEC(Local Execution Context), Call Stack etc.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#undefined-or-notdefined"&gt;
  &lt;/a&gt;
  Undefined or not-defined?
&lt;/h1&gt;

&lt;p&gt;Just remember, when JavaScript skims the code in first go, all the variables are placed with a &lt;code&gt;Undefined&lt;/code&gt; Placeholder.&lt;/p&gt;

&lt;p&gt;In other words, when the variable is defined in memory stack initially by JavaScript. The default value is set to be &lt;strong&gt;Undefined&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h1&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'mma  Hoisted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Console LOG[]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;I&lt;span class="s1"&gt;'mma Hoisted
undefined
ƒ getName(){
   console.log("I'&lt;/span&gt;mma  Hoisted&lt;span class="s2"&gt;");
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exaplanation"&gt;
  &lt;/a&gt;
  Exaplanation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;getName();&lt;/code&gt; - The function is called here, and the function outputs the console statement inside it. As functions can be declared and accessed from anywhere.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Console.log(x);&lt;/code&gt; - This is a variable and if a variable is declared prior to initialisation, IT IS HOISTED BY JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;console.log(getName);&lt;/code&gt; - This is the name of function being logged out. This means the reference to the function is invoked/logged from the memory component of global variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#only-declarations-are-hoisted"&gt;
  &lt;/a&gt;
  Only declarations are Hoisted!
&lt;/h1&gt;

&lt;p&gt;JavaScript only hoists declarations, not initialisation. If a variable is declared and initialised after using it, the value will be undefined. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Returns undefined, as only declaration was hoisted, no initialisation has happened at this stage&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Declaration&lt;/span&gt;
&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Initialisation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Conclusions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessing variable prior to initialisation is hoisting.&lt;/li&gt;
&lt;li&gt;Hoisting are done mostly in variables.&lt;/li&gt;
&lt;li&gt;Only declarations are Hoisted.&lt;/li&gt;
&lt;li&gt;Also, if functions are declared with variable that will also be hoisted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;getName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Not Hoisted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;undefined
// because we are using variable names &lt;span class="k"&gt;for &lt;/span&gt;the &lt;span class="k"&gt;function &lt;/span&gt;declaration. and we know it will hoisted &lt;span class="k"&gt;if &lt;/span&gt;tried to access prior to initialisation.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading.&lt;br&gt;
Happy Coding.&lt;/p&gt;

&lt;p&gt;Follow me on:&lt;/p&gt;

&lt;p&gt;LinkedIn: &lt;a href="https://linkedin.com/in/yadavutkarsh"&gt;https://linkedin.com/in/yadavutkarsh&lt;/a&gt;&lt;br&gt;
Website: &lt;a href="https://utkarshwhocodes.netlify.app"&gt;https://utkarshwhocodes.netlify.app&lt;/a&gt;&lt;br&gt;
Blogs-Dev: &lt;a href="https://dev.to/uyadav207"&gt;https://dev.to/uyadav207&lt;/a&gt;&lt;br&gt;
Blogs-Personal: &lt;a href="https://utkarshwhocodesblogs.netlify.app"&gt;https://utkarshwhocodesblogs.netlify.app&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Send email with MailKit in .NET</title>
      <author>Joe Enos</author>
      <pubDate>Sat, 22 May 2021 07:28:46 +0000</pubDate>
      <link>https://dev.to/jtenos/send-email-with-mailkit-in-net-326f</link>
      <guid>https://dev.to/jtenos/send-email-with-mailkit-in-net-326f</guid>
      <description>&lt;p&gt;.NET Framework used to use SmtpClient, which read this from the app.config/web.config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;mailSettings&amp;gt;
    &amp;lt;smtp deliveryMethod="Network"&amp;gt;
      &amp;lt;network host="my-host" 
               port="587" 
               userName="my-user"
               password="my-password" 
               enableSsl="true"
               defaultCredentials="false" 
      /&amp;gt;
    &amp;lt;/smtp&amp;gt;
&amp;lt;/mailSettings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Microsoft has deprecated SmtpClient, and they recommend a library like MailKit.&lt;/p&gt;

&lt;p&gt;MailKit is a little more verbose than the old way, but it's still reasonably straightforward. Here's how to use it:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GZgBUIPqSJU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>dotnetcore</category>
      <category>csharp</category>
      <category>mailkit</category>
    </item>
    <item>
      <title>Learning Web Development from Youtube</title>
      <author>Theodorus Clarence</author>
      <pubDate>Sat, 22 May 2021 07:24:27 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/learning-web-development-from-youtube-1hop</link>
      <guid>https://dev.to/theodorusclarence/learning-web-development-from-youtube-1hop</guid>
      <description>&lt;p&gt;May 2020 is the first time I started learning web development. In the beginning, I learn from a &lt;a href="https://www.udemy.com/course/the-complete-web-development-bootcamp/"&gt;Udemy Course&lt;/a&gt; by Angela Yu. In my opinion, that course is really great, but it is a very long course, about 54 hours. This course is really good if you really have no clue about Web Development because she explains it thoroughly.&lt;/p&gt;

&lt;p&gt;But, that only course is not enough, there are some materials that are outdated and she teaches the styling with bootstrap and skipped the fundamental of CSS. I cover all of that with these youtube channels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-css"&gt;
  &lt;/a&gt;
  HTML CSS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCJZv4d5rbIKd4QHMPkcABCw"&gt;Kevin Powell&lt;/a&gt; → This channels cover so many fundamentals of CSS, I learned so much from this channel. I also follow his best practice in writing CSS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCVyRiMvfUNMA1UPlDPzG5Ow"&gt;Design Course&lt;/a&gt; → Focuses on how to design a website&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw"&gt;Web Dev Simplified&lt;/a&gt; → Really good for beginners because he covers basic stuff&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/DevEd/videos"&gt;Dev Ed&lt;/a&gt; → There are some video that covers common layouting in HTML and CSS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/TheNetNinja/featured"&gt;The Net Ninja&lt;/a&gt; → There is a crash course on HTML CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA"&gt;Traversy Media&lt;/a&gt; → There are so many stuff besides JavaScript like React&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCeU-1X402kT-JlLdAitxSMA"&gt;Florin Pop&lt;/a&gt; → Check out the Higher Order Function (like map, foreach, filter), also check his project with Vanilla Javascript&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/codeSTACKr/videos"&gt;codeSTACKr&lt;/a&gt; → Check the &lt;a href="https://www.youtube.com/watch?v=bGDK1rpykOQ"&gt;Javascript in 90 seconds&lt;/a&gt; series, there are also some crash courses and some fundamental stuff like this, async await, fetch api&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reactjs"&gt;
  &lt;/a&gt;
  React.js
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA"&gt;Traversy Media&lt;/a&gt; → There is a React Course that is released in early 2021 (very recommended)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/DevEd/videos"&gt;Dev Ed&lt;/a&gt; → Nice content on Advanced React like Context, Reducer&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/TheNetNinja/featured"&gt;The Net Ninja&lt;/a&gt; → This Channel also has an ongoing course on React&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UC-T8W79DN6PBnzomelvqJYw"&gt;James Q Quick&lt;/a&gt; → Some of Gatsby course if you are interested, I personally choose Next.js over Gatsby&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nextjs"&gt;
  &lt;/a&gt;
  Next.js
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCZMli3czZnd1uoc1ShTouQw"&gt;Lee Robinson&lt;/a&gt; → Great explaining on Next.js, he actually worked for Vercel he also has a course which called &lt;a href="https://www.youtube.com/watch?v=JCOPVq2AYXc&amp;amp;list=PL6bwFJ82M6FXgctyoWXqj7H0GK8_YIeF1"&gt;React 2025&lt;/a&gt; using Next.js and Firestore&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UC-8QAzbLcRglXeN_MY9blyw"&gt;Ben Awad&lt;/a&gt; → Great videos, but he uses some stack that is not familiar for beginners like Typescript and GraphQL&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#animation-in-react"&gt;
  &lt;/a&gt;
  Animation in React
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCqrxiLP9RHz2GxDJaZuTRBw"&gt;Wrong Akram&lt;/a&gt; → Many materials on GSAP, framer-motion and some other libraries&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/SamSelikoff/videos"&gt;Sam Selikoff&lt;/a&gt; → Focus on Framer Motion and Tailwindcss&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCGyjrq09z9tblkAzvsHtHtg"&gt;Austin Shelby&lt;/a&gt; → explains the design pattern using Tailwindcss&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCnty0z0pNRDgnuoirYXnC5A"&gt;Jason Lengstorf&lt;/a&gt; → Check his 90 minutes stream that covers a lot of topics. Also, check out his &lt;a href="https://www.youtube.com/watch?v=DocXo3gqGdI&amp;amp;t=3837s"&gt;react-query video&lt;/a&gt;: it is pretty similar to SWR for data fetching and caching&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA"&gt;Fireship&lt;/a&gt; → A lot of 'quick course' in 10 or 1 minute to give you knowledge about another tech stack&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#courses-that-i-have-completed"&gt;
  &lt;/a&gt;
  Courses that I Have Completed
&lt;/h2&gt;

&lt;p&gt;The course is sorted based on the first one I completed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/the-complete-web-development-bootcamp/"&gt;The Complete 2020 Web Development Bootcamp&lt;/a&gt; → long duration, great materials, some of them are outdated&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/the-complete-nodejs-developer-course-2/"&gt;The Complete Node.js Developer&lt;/a&gt; → Very recommended if you are interested in learning backend language with MongoDB&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/ui-ux-web-design-using-adobe-xd/"&gt;User Experience Design Essentials - Adobe XD UI UX Design&lt;/a&gt; → Course to learn how to use Adobe XD, I prefer Figma more because it's free&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/learn-figma/"&gt;Learn Figma - UI/UX Design Essential Training&lt;/a&gt; → really good, has many exercise that can make you feel comfortable on how to use Figma&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwju3-Lv1KnuAhWCX3wKHff6BmQQFjAAegQIAhAC&amp;amp;url=https%3A%2F%2Fscrimba.com%2Flearn%2Fdesign&amp;amp;usg=AOvVaw0APhC4yWLlXDOfQk0cDMAO"&gt;Learn UI Design Fundamentals&lt;/a&gt; → FREE on scrimba, Gary Simon created this course covers the UI Design Fundamentals&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/complete-python-developer-zero-to-mastery/"&gt;Complete Python Developer in 2020: Zero to Mastery&lt;/a&gt; → Really good, teach you from the basic, then covers topic like automation using beautiful soup&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/modern-react-front-to-back/"&gt;React Front to Back&lt;/a&gt; → Great course by Brad Traversy, more like hands-on project using React Context and Redux&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Learning web development can be very tiring because there are so many things that need to be covered from the very basic like HTML, CSS, JS, then you need to learn Git for version control, frontend framework, styling framework, backend services, database. But, you will eventually understand it with some time.&lt;/p&gt;

&lt;p&gt;But, if you enjoy doing web development, watching these videos will feel like entertainment, you learn new stuff every day and keeps investing yourself with knowledge. Also, try to not only watching the video but follow along with the code and make your own project. It was the fastest way to learn for me.&lt;/p&gt;

&lt;p&gt;Good luck! Contact me if you need some personal recommendation, I will be glad to help you!&lt;/p&gt;

&lt;p&gt;Pro Tips: change the playback speed to 1.5x speed to make your productivity 1.5x faster&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-your-favorite-youtube-channels-to-learn-from"&gt;
  &lt;/a&gt;
  What are your favorite youtube channels to learn from?
&lt;/h3&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://theodorusclarence.com"&gt;my personal site&lt;/a&gt;, find more &lt;a href="https://theodorusclarence.com/blog"&gt;blog posts&lt;/a&gt; and &lt;a href="https://theodorusclarence.com/library"&gt;code snippets library&lt;/a&gt; I put up for easy access on my site 🚀&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to create a taxi app like Uber, Grab in 2021? [Cost + Technology + Features]
</title>
      <author>Mohamed</author>
      <pubDate>Sat, 22 May 2021 07:10:34 +0000</pubDate>
      <link>https://dev.to/flutterappdev/how-to-create-a-taxi-app-like-uber-grab-in-2021-cost-technology-features-2d</link>
      <guid>https://dev.to/flutterappdev/how-to-create-a-taxi-app-like-uber-grab-in-2021-cost-technology-features-2d</guid>
      <description>&lt;p&gt;We often hear these questions from our potential customers [Entrepreneurs] - How can we create a ridesharing app like Uber, Grab? and how much does it cost to create one? &lt;/p&gt;

&lt;p&gt;And we thought you guys must have these questions on your mind too. &lt;/p&gt;

&lt;p&gt;So we decided to create an article answering all their queries. &lt;/p&gt;

&lt;p&gt;Why wait? Let's get started. &lt;/p&gt;

&lt;p&gt;So first things first. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-you-want-to-create-a-taxi-app-now"&gt;
  &lt;/a&gt;
  Why do you want to create a taxi app now?
&lt;/h2&gt;

&lt;p&gt;The answer is - People love getting services instantly, and they don't have much time waiting to get their needs done. &lt;/p&gt;

&lt;p&gt;Consider Uber - The Ridesharing Market Giant. &lt;/p&gt;

&lt;p&gt;Uber had total bookings of $57 billion in the year 2020 alone. It is real-time evidence of the success of instant / on-demand taxi services. &lt;/p&gt;

&lt;p&gt;But, Uber is a big company, how can I be successful? - You may ask.&lt;/p&gt;

&lt;p&gt;Here's a thing - "All great things are done by taking that first step." &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-simple-steps-to-be-successful-in-your-taxi-business"&gt;
  &lt;/a&gt;
  5 Simple steps to be successful in your taxi business
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Have a clear business plan&lt;/li&gt;
&lt;li&gt;Identify your market&lt;/li&gt;
&lt;li&gt;Analyze your customers paint points&lt;/li&gt;
&lt;li&gt;Provide exceptional customer service&lt;/li&gt;
&lt;li&gt;Then, scale your business&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll be successful in any business if you are passionate and patient. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-create-an-app-like-uber-grab-or-lyft"&gt;
  &lt;/a&gt;
  How can you create an app like Uber, Grab, or Lyft?
&lt;/h2&gt;

&lt;p&gt;Before diving into the taxi app development process, let's discuss some basics. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How many applications do you need to start and manage your business? &lt;/li&gt;
&lt;li&gt;Features to be incorporated&lt;/li&gt;
&lt;li&gt;5 Uber-like app development stages&lt;/li&gt;
&lt;li&gt;Finally, cost and a perfect solution to create an app like Uber, Grab. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#i-how-many-applications-your-taxi-business-need"&gt;
  &lt;/a&gt;
  I. How many applications your taxi business need?
&lt;/h3&gt;

&lt;p&gt;2 Mobile applications + an Admin panel. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Customers app [iOS and Android] &lt;/li&gt;
&lt;li&gt;Drivers app [iOS and Android] &lt;/li&gt;
&lt;li&gt;Admin panel [Web] &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Admin panel is for you [the owner of the platform] to manage the business operations at ease. &lt;/p&gt;

&lt;p&gt;Okay, now you know the basic details, let's get it to the features you need in your Uber-like app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-to-be-incorporated-into-your-taxi-applications"&gt;
  &lt;/a&gt;
  Features to be incorporated into your taxi applications
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#customers-app"&gt;
  &lt;/a&gt;
  Customers app:
&lt;/h4&gt;

&lt;p&gt;Here're some of the crucial features that should be present in your customers' app,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple registration process&lt;/li&gt;
&lt;li&gt;Ride fare estimation&lt;/li&gt;
&lt;li&gt;Secure transaction&lt;/li&gt;
&lt;li&gt;SOS assistance&lt;/li&gt;
&lt;li&gt;Ride scheduling&lt;/li&gt;
&lt;li&gt;In-app chat&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#drivers-app"&gt;
  &lt;/a&gt;
  Drivers app:
&lt;/h4&gt;

&lt;p&gt;Here're some of the best features that your drivers can use in your application, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy registration&lt;/li&gt;
&lt;li&gt;Document verification &lt;/li&gt;
&lt;li&gt;Payout addition&lt;/li&gt;
&lt;li&gt;Route optimization &lt;/li&gt;
&lt;li&gt;Active/Inactive status&lt;/li&gt;
&lt;li&gt;In-app chat&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#admin-panel"&gt;
  &lt;/a&gt;
  Admin panel:
&lt;/h4&gt;

&lt;p&gt;Features of the admin panel help you manage the business operations effectively. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sub-admins management&lt;/li&gt;
&lt;li&gt;Driver and customers management&lt;/li&gt;
&lt;li&gt;Transactions management&lt;/li&gt;
&lt;li&gt;Geo-fencing&lt;/li&gt;
&lt;li&gt;Bookings management&lt;/li&gt;
&lt;li&gt;Vehicle category addition and removal&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#6-uberlike-app-development-stages"&gt;
  &lt;/a&gt;
  6 Uber-like app development stages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Identify your target market and create a strong business plan. &lt;/li&gt;
&lt;li&gt;Choose the best taxi app development company.&lt;/li&gt;
&lt;li&gt;Choose a technology on which you want to create your app. &lt;/li&gt;
&lt;li&gt;Share your idea and sign an NDA. &lt;/li&gt;
&lt;li&gt;Develop and test your taxi app. &lt;/li&gt;
&lt;li&gt;Publish your app on App Store and Play Store. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We've seen the application count, the features, the development stages, etc. &lt;/p&gt;

&lt;p&gt;Now's the time to get into the real development process of Uber, Grab-like taxi apps. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-perfect-solution-and-the-cost-to-create-an-app-like-uber-grab"&gt;
  &lt;/a&gt;
  A perfect solution and the cost to create an app like Uber, Grab.
&lt;/h2&gt;

&lt;p&gt;Developing an app like Uber from scratch takes up to 5 to 6 months, and it'll cost you around 50 to 70 thousand dollars. &lt;/p&gt;

&lt;p&gt;So much money, right? &lt;/p&gt;

&lt;p&gt;But can you believe when I say that you can create an app just like Uber within 5000$? &lt;/p&gt;

&lt;p&gt;Yesss, it's possible. &lt;/p&gt;

&lt;p&gt;Right now, I'm going to show exactly how you can create your own Uber or Grab-like app using a solution that costs you way less than other options available. &lt;/p&gt;

&lt;p&gt;We offer a &lt;a href="https://www.rentallscript.com/uber-clone/"&gt;Uber clone app solution&lt;/a&gt; - Wooberly that can help you create an app like Uber, Grab, or Lyft with advanced technology like Flutter. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>I built this cool GitHub UI based DEV Portfolio</title>
      <author>Himanshu</author>
      <pubDate>Sat, 22 May 2021 06:58:56 +0000</pubDate>
      <link>https://dev.to/hima_khaitan/i-built-this-cool-github-ui-based-dev-portfolio-1n6f</link>
      <guid>https://dev.to/hima_khaitan/i-built-this-cool-github-ui-based-dev-portfolio-1n6f</guid>
      <description>&lt;h3&gt;
  &lt;a href="#the-design-idea"&gt;
  &lt;/a&gt;
  The Design Idea
&lt;/h3&gt;

&lt;p&gt;Spitting the truth, I really came across 1000s of dev portfolio 💻 websites among which some inspired 🤓 too but that inspiration and design faded until I saw this amazing  💯 &lt;a href="http://vscode-portfolio.vercel.app/"&gt;VS-Code Themed Portfolio Website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The designs I came across before this, only confused me and made me hop on one to another but this react app gave me the idea for &lt;a href="https://github-portfolio.vercel.app/"&gt;My Dev Portfolio&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I really was excited to built this when I first got this idea. And on the future part I am yet excited to flood it with cool features and functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-themed-dev-portfolio"&gt;
  &lt;/a&gt;
  GitHub Themed Dev Portfolio
&lt;/h3&gt;

&lt;p&gt;If you're interested in exploring the project yourself, there's the link to it 👉🏻 &lt;a href="https://github-portfolio.vercel.app/"&gt;github-portfolio.vercel.app/&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/himakhaitan"&gt;
        himakhaitan
      &lt;/a&gt; / &lt;a href="https://github.com/himakhaitan/github-portfolio"&gt;
        github-portfolio
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
GitHub Themed Dev Portfolio&lt;/h3&gt;
&lt;p&gt;A GitHub themed developer portfolio website built with React.js and deployed on Vercel.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/himakhaitan/github-portfolio/blob/main/public/a.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kz2kdbmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/himakhaitan/github-portfolio/raw/main/public/a.png" alt="Dev Portfolio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
Feature Roadmap&lt;/h3&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Themes and customizations
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt;
 Default Light&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Dark Dimmed&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Default Dark (default)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class="task-list-item"&gt;
 Interactive custom pages and tabs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For other features and themes suggestions, please open an issue.&lt;/p&gt;

&lt;h3&gt;
Running the Project&lt;/h3&gt;
&lt;p&gt;In the project directory, you can run:&lt;/p&gt;
&lt;h5&gt;
&lt;code&gt;npm start&lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;Runs the app in the development mode.&lt;br&gt;
Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt;
&lt;p&gt;The page will reload if you make edits.&lt;br&gt;
You will also see any lint errors in the console.&lt;/p&gt;
&lt;h5&gt;
&lt;code&gt;npm run build&lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt;
It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt;
&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt;
Your app is ready to be deployed!&lt;/p&gt;

&lt;h3&gt;
Editing the Code&lt;/h3&gt;
&lt;p&gt;All Github related components can be found in the &lt;code&gt;Components&lt;/code&gt; folder. To change the…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/himakhaitan/github-portfolio"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This is a React Application which will of course have a backend in future and will lately be converted into a MERN Stack Project. 👩‍💻&lt;/p&gt;

&lt;p&gt;From Layout to Experience I have been working on to make this look and feel like the GitHub. I will be adding cool stuffs to it like themes, timeline and many more. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-need-a-help"&gt;
  &lt;/a&gt;
  I Need A Help
&lt;/h3&gt;

&lt;p&gt;As you can see that some of the pages have dummy content in it and also the application is not at all responsive at the stage when it comes to Mobile viewing.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hima_khaitan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6pp9-sSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HqJ6F18c--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/629989/94e5c19e-ce31-4a7d-a20b-603def943e7d.jpeg" alt="hima_khaitan image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hima_khaitan/i-built-this-dark-ui-25ej" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Built this Dark UI&lt;/h2&gt;
      &lt;h3&gt;Himanshu ・ May 15 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uiweekly&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;What other features would you like to see in this project? I would highly appreciate if you leave a feedback, criticism or suggestion of any kind. 🙌🏻&lt;/p&gt;

&lt;p&gt;You can always fork this repo and the project is yet not complete. You can give a new accent to the project by applying your ideas onto it. 🤝🏻&lt;/p&gt;

&lt;p&gt;I hope you find it interesting to contribute as the project is truly Open-Source. You may star this repo for future references. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Happily turning coffee into code ✅&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>react</category>
      <category>githunt</category>
    </item>
    <item>
      <title>A guide to planning a programming project.</title>
      <author>Siddharth</author>
      <pubDate>Sat, 22 May 2021 06:57:12 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/a-guide-to-planning-a-programming-project-3287</link>
      <guid>https://dev.to/siddharthshyniben/a-guide-to-planning-a-programming-project-3287</guid>
      <description>&lt;p&gt;In this post, I am going to explain how I plan my programming projects. Planning a project can make it easier for you to keep away from feature creep and recognize what to do next. Take some time to research this vital skill and you may see your productivity thrust upwards.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;‎‎Good projects need a robust foundation, a dependable and reusable schema which can help you and potential contributors know what to do and what not to do, and when to do it.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Now let's get right into it!&lt;/p&gt;

&lt;p&gt;
  Table of Contents
  &lt;ul&gt;
&lt;li&gt;&lt;a href="#before-you-read"&gt;Before you read...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#sandboxing"&gt;Sandboxing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-0-forget-everything-else"&gt;Step 0: Forget everything else&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1-identify-the-pain-points"&gt;Step 1: Identify the Pain Points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-plan-your-features"&gt;Step 2: Plan your features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#listing"&gt;Listing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-0-dump"&gt;Step 0: Dump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-1-create-a-bunch-of-sections"&gt;Step 1: Create a bunch of sections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-sort"&gt;Step 2: Sort!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-prioritize-and-add-dates"&gt;Step 3: Prioritize and add dates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#future"&gt;Future&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#before-you-read"&gt;
  &lt;/a&gt;
  Before you read...
&lt;/h2&gt;

&lt;p&gt;For this tutorial, we are going to plan the building of a Notes app as an example.&lt;/p&gt;

&lt;p&gt;I like to divide the planning into two parts: &lt;strong&gt;Sandboxing&lt;/strong&gt; and &lt;strong&gt;Listing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sandboxing&lt;/strong&gt; is the part where we &lt;strong&gt;determine all the possible features&lt;/strong&gt; your app will have. This will involve &lt;strong&gt;drawing a mind map&lt;/strong&gt;. I will use an online tool in this example, but only because my drawing is really bad 😅. Feel free to use any tool (paper works best).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Listing&lt;/strong&gt; is the part where we &lt;strong&gt;take the sandboxed mind map and convert it into an actionable, prioritized todo list&lt;/strong&gt;. Once again, feel free to use any tools you like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sandboxing"&gt;
  &lt;/a&gt;
  Sandboxing
&lt;/h2&gt;

&lt;p&gt;Before we start, create a mind map. The name of the root of the chart should be the name of whatever you are building. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lf9SxHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asryan5jxqpdqu3x8eln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lf9SxHg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asryan5jxqpdqu3x8eln.png" alt="root"&gt;&lt;/a&gt; &lt;/p&gt;
The base



&lt;h3&gt;
  &lt;a href="#step-0-forget-everything-else"&gt;
  &lt;/a&gt;
  Step 0: Forget everything else
&lt;/h3&gt;

&lt;p&gt;You may have some great piecemeal ideas which you want to add. For now, &lt;strong&gt;forget them&lt;/strong&gt; or write them down somewhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-identify-the-pain-points"&gt;
  &lt;/a&gt;
  Step 1: Identify the Pain Points
&lt;/h3&gt;

&lt;p&gt;First, draw a branch for Pain Points:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVbqx9SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9g1f8bxqej5ilukfxo2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVbqx9SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9g1f8bxqej5ilukfxo2.png" alt="pain points branch"&gt;&lt;/a&gt;&lt;/p&gt;
The pain points branch


 

&lt;p&gt;Pain points are the "problems" that your project solves. Usually, projects have a single pain point but you can come up with more. For example, Netflix removed the "pain" of traditional movie rentals. Make a new branch for each pain point you make.&lt;/p&gt;

&lt;p&gt;You can think of this as the base of the outline. It is the central focus of everything, so put some thought into this.&lt;/p&gt;

&lt;p&gt;One way of coming up with pain points is to compare it with other ways of doing what your project does. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Note: When you are starting out, don't compare your project with other projects, just compare it with what someone would do if there were no other projects like this. When you have a working project, you can think of comparisons.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For our example, let's compare our Notes app with a piece of paper and make some pain points: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8SttFOx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4t7l2hojwkgcujae9tl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8SttFOx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4t7l2hojwkgcujae9tl.png" alt="pain points"&gt;&lt;/a&gt; &lt;/p&gt;
Basic pain points



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;If you just want to build something that you think is awesome, that’s superb, and don't let something like finding 'pain points' stop you. However, each piece of software must have a central focus. So locate that earlier before you start building anything! You can even add your piecemeal ideas mentioned in &lt;a href="#step-0-forget-everything-else"&gt;Step 0&lt;/a&gt;!&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#step-2-plan-your-features"&gt;
  &lt;/a&gt;
  Step 2: Plan your features
&lt;/h3&gt;

&lt;p&gt;Now, we can start planning features which our software will offer. &lt;/p&gt;

&lt;p&gt;Keeping our pain point(s) in mind, we can start to think of what cool features we want our software to have. As we create this primary "layer" of features, we should constantly be asking ourselves, "Is this feature going to help solve our paint point?" If not, it’s probably a waste of our time to code it. This should keep feature creep in check.&lt;/p&gt;

&lt;p&gt;On your mind map, add a new branch for features. Then, add sub branches to list every feature you want. You can also link each branch to it's pain point.&lt;/p&gt;

&lt;p&gt;Depending on your project, you might want to add sub features. The more layers the better, because it helps to have small actionable tasks rather than big ones. Keep going until you feel that a component is small enough that you can build it easily. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Note: You can even add your piecemeal ideas mentioned in &lt;a href="#step-0-forget-everything-else"&gt;Step 0&lt;/a&gt;!&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For our example, let's list our features of our note taking app: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZPnDVEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh40zj2c9we1y33krl87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ZPnDVEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fh40zj2c9we1y33krl87.png" alt="features branch"&gt;&lt;/a&gt;&lt;/p&gt;
Now this is getting interesting.



&lt;p&gt;That's about it for the &lt;strong&gt;Sandboxing&lt;/strong&gt; part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listing"&gt;
  &lt;/a&gt;
  Listing
&lt;/h2&gt;

&lt;p&gt;Now, we have to create a Todo list of stuff to do. I'll be using an app, but you can choose anything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ns53c2bg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zetvpta8oimxc4lqdsiq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ns53c2bg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zetvpta8oimxc4lqdsiq.png" alt="The base"&gt;&lt;/a&gt;&lt;/p&gt;
The todo list


 

&lt;h3&gt;
  &lt;a href="#step-0-dump"&gt;
  &lt;/a&gt;
  Step 0: Dump
&lt;/h3&gt;

&lt;p&gt;List everything in the features branch of your mind map into your todo list in a new section called &lt;strong&gt;Dump&lt;/strong&gt; or &lt;strong&gt;Icebox&lt;/strong&gt;. Don't mind sorting or prioritizing – just dump. The only important thing is that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All features have been accounted for&lt;/li&gt;
&lt;li&gt;The features are detailed enough for you to understand&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's how it looks like for the example notes app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eNKLEjKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1fk3te2bovqijigvq24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eNKLEjKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1fk3te2bovqijigvq24.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;
There's more... too much to show



&lt;h3&gt;
  &lt;a href="#step-1-create-a-bunch-of-sections"&gt;
  &lt;/a&gt;
  Step 1: Create a bunch of sections
&lt;/h3&gt;

&lt;p&gt;Create some sections which will help you prioritize tasks. The sections may vary with projects, but I like to make 3 sections: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Basic&lt;/strong&gt; (the bare minimum features)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Useful&lt;/strong&gt; (the stuff which differentiates your software from basic alternatives)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bonus&lt;/strong&gt; (the stuff which differentiates your software from other similar software)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kqKz5Tnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0481d9js6chm51unz9mg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqKz5Tnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0481d9js6chm51unz9mg.png" alt="Screen Shot"&gt;&lt;/a&gt;&lt;/p&gt;
After creating sections

 

&lt;h3&gt;
  &lt;a href="#step-2-sort"&gt;
  &lt;/a&gt;
  Step 2: Sort!
&lt;/h3&gt;

&lt;p&gt;Now, you can take your tasks from the &lt;strong&gt;dump&lt;/strong&gt; and place them into their own sections. Put the bare minimum tasks into the basic section, and so on.&lt;/p&gt;

&lt;p&gt;Here's how it looks like for the notes app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xzlEK_d---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xas0lnx7szddsn9evzgg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzlEK_d---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xas0lnx7szddsn9evzgg.png" alt="Screen Shot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-prioritize-and-add-dates"&gt;
  &lt;/a&gt;
  Step 3: Prioritize and add dates
&lt;/h3&gt;

&lt;p&gt;Even in the sections some tasks have a higher importance. For example, creating notes has a higher priority than deleting them and so on. Now you have to prioritize your tasks based on importance. &lt;/p&gt;

&lt;p&gt;Here's how it looks like for the notes app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bnzex1zC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7exm3mkav6epf9hd8lf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bnzex1zC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7exm3mkav6epf9hd8lf.png" alt="Screen Shot"&gt;&lt;/a&gt;&lt;/p&gt;
Color represents priority



&lt;p&gt;The next thing to do is add due dates to each task. You have to guess how long a feature takes and add a date accordingly. If you are unsure of how long tasks take, just double your estimates. &lt;/p&gt;

&lt;p&gt;If you are starting right away, you might add "today" as the date for the first tasks in the basic section, "tomorrow" for the second and third tasks,  and so on.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;You might want to make similar functionality on the same day, and that's totally ok. For example you might want to make the note tagging and note coloring feature on the same day because they are easy to do together, and you can do that&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Here's how it looks for the notes app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---uX2JH5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t75zr9vit1cn90axgil4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uX2JH5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t75zr9vit1cn90axgil4.png" alt="Screen Shot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! Now you got a actionable todo list and you can start on your project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future"&gt;
  &lt;/a&gt;
  Future
&lt;/h2&gt;

&lt;p&gt;Now that you've made a todo list, you can do these things to further improve your workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can create an &lt;strong&gt;issues&lt;/strong&gt; and a &lt;strong&gt;pull requests&lt;/strong&gt; section, and add all new issues and PRs to your todo. You could even automate! (Tell me in the comments if you want a tutorial for that)&lt;/li&gt;
&lt;li&gt;You could create a &lt;strong&gt;in progress&lt;/strong&gt;, an &lt;strong&gt;up next&lt;/strong&gt; and an &lt;strong&gt;in review&lt;/strong&gt; section which will really be useful for teams&lt;/li&gt;
&lt;li&gt;Instead of checking off tasks, you could create a &lt;strong&gt;done&lt;/strong&gt; section so you can stay motivated.&lt;/li&gt;
&lt;li&gt;Whenever an idea pops up, add it to the &lt;strong&gt;dump&lt;/strong&gt; section. Once you've really thought about the feature and are sure that it is useful, you could add it to one of the sections&lt;/li&gt;
&lt;li&gt;And much more! It all depends on &lt;strong&gt;you&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>planning</category>
    </item>
    <item>
      <title>5 Vs code extension's to increase your developer productivity</title>
      <author>Ratul</author>
      <pubDate>Sat, 22 May 2021 06:50:52 +0000</pubDate>
      <link>https://dev.to/ratuloss/5-vs-code-extension-s-to-increase-your-developer-productivity-52f0</link>
      <guid>https://dev.to/ratuloss/5-vs-code-extension-s-to-increase-your-developer-productivity-52f0</guid>
      <description>&lt;p&gt;Hey there developers. How is it going. Today in this blog, I will be showing you 5 useful vs code extension's which will increase your developer productivity. So if you are interested, continue reading...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-bookmarks"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks"&gt;Bookmarks&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I use this extension all the time when I am working on any project. Basically this extension allows you to add bookmarks in specific lines in a file. You can also add a note why you have added this bookmark. And you can also explore the bookmarks in the bookmarks tab. Which will show you all the bookmarks in a particular project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGrSZHN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oas92hj28yxqe6nd5qhi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGrSZHN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oas92hj28yxqe6nd5qhi.jpg" alt="Vs Code extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-better-comments"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments"&gt;Better Comments&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extension is super helpful if you want to improve code commenting. By default the comments have a dimmed color. By using this extension. You can make them colorful for any specific purpose. Like if there is something todo, you can use the TODO tag before writing the comment. Like so - &lt;code&gt;// TODO: what to do&lt;/code&gt;. For more information's about usage, please check out the better comments documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GDO1uSra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl61n8t8hpid0iagbjyk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GDO1uSra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vl61n8t8hpid0iagbjyk.jpg" alt="Vs code extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-code-spell-checker"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Code Spell Checker&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you misspell any word in vs code, by default it doesn't shows any warning if the spelling is not correct. By using this extension, You can will get a warning message in the problems tab if any of the word is not spelled correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ_Lv6dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in8s228attz72h6s6jwh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RQ_Lv6dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/in8s228attz72h6s6jwh.jpg" alt="Vs Code Extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-prettier"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This extension formats your unformatted code. So you don't need to focus on formatting you code. Prettier will do it for you. To start formatting your code with prettier, make sure you add these settings in your &lt;code&gt;settings.json&lt;/code&gt; after installing it. And you will be good to go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"esbenp.prettier-vscode"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-thunder-client"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;Thunder Client&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Are you still using Postman for api testing? Well that's fine. Postman does this duty just perfectly. But for me, when I am working on any project in vs code, I do like to be in vs code. I don't like to open any other external application, it effects on my productivity. So I use this cool Vs code extension. It works same as postman. Nothing new, you can send request to any kind of api from vs code. It really helps me to increase my developer productivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GbCsFHej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8urq2g0b2hzh8gpexq8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GbCsFHej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8urq2g0b2hzh8gpexq8.jpg" alt="Vs code Extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are the productivity vs code extension's, Which I use all the time and wanted to share with you guys. Now I wanted to know what are your productivity extension's? Let me know in the discussions. And make sure you follow me for all the cool article just like that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  :)
&lt;/h1&gt;

&lt;p&gt;Get Me on -&amp;gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ratul-devr"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Ratul_devR"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/developer-ratul-407352211/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/minhazurrahaman.ratul/"&gt;Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Appwrite VS Code extension</title>
      <author>Alex Weininger</author>
      <pubDate>Sat, 22 May 2021 06:28:08 +0000</pubDate>
      <link>https://dev.to/streamlux/appwrite-vs-code-extension-1356</link>
      <guid>https://dev.to/streamlux/appwrite-vs-code-extension-1356</guid>
      <description>&lt;p&gt;In my very first post to dev.to I'll be talking about the Appwrite for VS Code extension, what you can use it for, and some features I hope to include in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;The team at Streamlux chose to utilize &lt;a href="https://appwrite.io/"&gt;Appwrite&lt;/a&gt; for many good reasons. One of my favorite reasons was that with Appwrite being relatively new, we'd have a great opportunity to contribute to the open source Appwrite community.&lt;/p&gt;

&lt;p&gt;To quickly summarize what Appwrite is, from their website:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, after a few weeks after using Appwrite, our first contribution to the Appwrite community is the Appwrite extension for Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/streamlux/vscode-appwrite"&gt;View Appwrite for VS Code on GitHub&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://marketplace.visualstudio.com/items?itemName=Streamlux.vscode-appwrite"&gt;View on the Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#current-features"&gt;
  &lt;/a&gt;
  Current features
&lt;/h1&gt;

&lt;p&gt;Here are the features we've built so far! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiproject-support"&gt;
  &lt;/a&gt;
  Multi-project support
&lt;/h3&gt;

&lt;p&gt;If you happen to be working with more than one Appwrite project, then the extension has you covered! Easily switch between as many projects as you'd like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SisJQIWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d38off1f69l8xg7nixmb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SisJQIWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d38off1f69l8xg7nixmb.gif" alt="Multi project gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;VS Code theme: &lt;a href="https://marketplace.visualstudio.com/items?itemName=wesbos.theme-cobalt2"&gt;Cobalt2&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;p&gt;The comprehensive and robust database features that Appwrite &lt;br&gt;
 provides were one of the things that ultimately led to the team and I choosing it to power Streamlux.&lt;/p&gt;

&lt;p&gt;With the extension, you can manage databases, collections, and documents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7mk2LiX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3629ya0lt79c9tup03uh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7mk2LiX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3629ya0lt79c9tup03uh.png" alt="Delete document image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also add, edit, and remove rules and permissions right from VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsTt3nbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ez5bl6du3srp5mrag4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsTt3nbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ez5bl6du3srp5mrag4.png" alt="Database permissions image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#users"&gt;
  &lt;/a&gt;
  Users
&lt;/h3&gt;

&lt;p&gt;Another feature that makes using Appwrite so simple are the features surrounding users. From authentication, to managing user sessions and preferences, Appwrite makes it a breeze.&lt;/p&gt;

&lt;p&gt;And we strive to match this experience in the extension. Easily view project users, as well as create new ones.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psDnsybg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcdtfuvtybcn7mazgon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psDnsybg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqcdtfuvtybcn7mazgon.png" alt="Users image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#health"&gt;
  &lt;/a&gt;
  Health
&lt;/h3&gt;

&lt;p&gt;And last but not least, you can monitor the health and status of all the services that make up your Appwrite project to make sure everything is running properly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---4t9Hprf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0myqf9lhiefych25xh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---4t9Hprf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0myqf9lhiefych25xh7.png" alt="Health image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-features"&gt;
  &lt;/a&gt;
  Future features
&lt;/h2&gt;

&lt;p&gt;One of the recently added features to Appwrite that also might be the best feature is &lt;a href="https://appwrite.io/docs/functions"&gt;Appwrite Functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We think we can provide a great experience for creating and debugging Appwrite Functions in VS Code. And so the next large feature we want to add is functions support.&lt;/p&gt;

&lt;p&gt;If you've made it this far through my first dev.to post, thank you for reading!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/streamlux/vscode-appwrite"&gt;View Appwrite for VS Code on GitHub&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://marketplace.visualstudio.com/items?itemName=Streamlux.vscode-appwrite"&gt;View on the Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I must mention it because the Appwrite team members provide absolute top tier support in their amazing &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;. If you're interested in Appwrite or already use Appwrite I highly recommend joining :)&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>30daysofappwrite</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Appwrite 0.8: ARM Support</title>
      <author>kodumbeats</author>
      <pubDate>Sat, 22 May 2021 06:27:38 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-0-8-arm-support-59bc</link>
      <guid>https://dev.to/appwrite/appwrite-0-8-arm-support-59bc</guid>
      <description>&lt;p&gt;Appwrite 0.8 brings support for ARM64 processors - you can now install Appwrite on Amazon's &lt;strong&gt;Graviton2&lt;/strong&gt; instances, &lt;strong&gt;Apple M1&lt;/strong&gt; systems (without Rosetta 2), Raspberry Pi 4 SoCs, or any other 64-bit ARM device! To appreciate ARM's position in today's computing, let's take a brief tour of the history of CPU architectures. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages. We love chatting about Appwrite, Aliens 👽 or Unicorns 🦄 over at &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#beginning-with-the-8086"&gt;
  &lt;/a&gt;
  Beginning with the 8086
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gcp5Os70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvn9jvevyf2tp96hq4nc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gcp5Os70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvn9jvevyf2tp96hq4nc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by Thomas Nguyen - &lt;a href="https://commons.wikimedia.org/w/index.php?curid=46809082"&gt;Own work&lt;/a&gt;, CC BY-SA 4.0, &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Intel 8086 processor was released in 1978 and was carried into households with the widespread success of the IBM 5150 Personal Computer, &lt;strong&gt;the&lt;/strong&gt; PC. Intel then built on the success of the 8086 with following processors: the 80286, 80386, 80486, and more, all the way through Pentium and beyond. The set of instructions used to command these processors, known now as "x86", is still supported on chips today - any assembly program written for the 8086 will run out-of-the-box on modern Intel processors, albeit much, &lt;em&gt;much&lt;/em&gt;, &lt;strong&gt;much&lt;/strong&gt; faster.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ever wonder how AMD is able to make x86-compatible processors without lawsuits from Intel? The legal landscape around the x86 architecture is fascinating - check out &lt;a href="https://jolt.law.harvard.edu/digest/intel-and-the-x86-architecture-a-legal-perspective"&gt;this commentary&lt;/a&gt; from Harvard Law to learn more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first "x86" instruction sets supported very basic processor-level operations: reading/writing from memory, basic arithmetic, and control flow logic, to name a few. To meet ever-growing computing demands, Intel needed to expand the x86 instruction set to handle more complex operations like handling memory in chunks, complicated maths like square root, logarithms, and trigonometry, and more. While the instruction set grew, so too did the power requirements. The computing industry was fine with power consumption, so long as their computers ran faster, that is, until power consumption mattered - the era of smartphones.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tale-of-two-arms"&gt;
  &lt;/a&gt;
  The Tale of Two ARMs
&lt;/h2&gt;

&lt;p&gt;Smartphones require a specific balance of power consumption and performance, and x86 processors didn't fit the bill - the complex x86 instructions required extra electricity, logic gates, and silicon surface area, and mobile computing had opposite requirements. RISC (Reduced Instruction Set Computers) processors took a more specialized approach: only include the basic instructions required for a modern computer, and make those instructions &lt;em&gt;highly optimized&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;ARM, an English semiconductor company, designs RISC instruction sets and licenses them to manufacturers to handle production.You probably recognize a few of these manufactors: Samsung, Broadcom, Qualcomm, and NVidia, to name a few. These companies handle the manufacturing and distribution of ARM-based systems, including smartphones, tablets, smart TVs, washing machines, cars, printers, and so much more. &lt;/p&gt;

&lt;p&gt;Low-power processors aren't just for mobile/IoT devices anymore, nor are they less capable than x86 computers. Most notably, the Apple M1 (ARM-based) has made a big splash with ARM now powering iPads, Macbooks, Mac Minis, and now iMacs, with other manufacturers set to follow in their footsteps. Amazon has also been a pioneer of ARM in the datacenter - Amazon employs a 64-core(!) Neoverse N1 ARM processor in their &lt;a href="https://aws.amazon.com/ec2/graviton/"&gt;Graviton2&lt;/a&gt; virtual servers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next?
&lt;/h2&gt;

&lt;p&gt;You can get started with your favorite 64-bit ARM device now - follow the &lt;a href="https://appwrite.io/docs/installation"&gt;installation instructions&lt;/a&gt; to get started. The Appwrite community is very excited about Appwrite apps which are now possible thanks to Appwrite on RPi (especially me), and we've installed it on a variety of operating systems: PiOS, Ubuntu, and BalenaOS. You can see Appwrite running on a Raspberry Pi 4 2GB with Ubuntu 20.04:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3kS5LB9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/md3tuuj5xehlsps14bhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3kS5LB9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/md3tuuj5xehlsps14bhu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What are you most excited to build? Do you have any homelab projects which just became easier thanks to Appwrite on ARM? Let us know on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;, &lt;a href="https://twitter.com/appwrite_io"&gt;Twitter&lt;/a&gt;, &lt;a href="https://dev.to/appwrite"&gt;Dev.to&lt;/a&gt;, or anywhere you find a friendly Appwriter. :) Also, the &lt;a href="https://github.com/appwrite/awesome-appwrite"&gt;awesome-appwrite&lt;/a&gt; repo keeps growing with new tutorials, demos, videos, and more!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>raspberrypi</category>
      <category>serverless</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Asynchronous C#: Cherry on the top 🍒 (Tips and Tricks)</title>
      <author>Paula Fahmy</author>
      <pubDate>Sat, 22 May 2021 06:20:28 +0000</pubDate>
      <link>https://dev.to/paulafahmy/asynchronous-c-cherry-on-the-top-tips-and-tricks-4eod</link>
      <guid>https://dev.to/paulafahmy/asynchronous-c-cherry-on-the-top-tips-and-tricks-4eod</guid>
      <description>&lt;p&gt;In &lt;a href="https://dev.to/paulafahmy/asynchronous-c-making-a-simple-cup-of-tea-13i"&gt;Part 1&lt;/a&gt; and &lt;a href="https://dev.to/paulafahmy/asynchronous-c-making-a-simple-cup-of-tea-part-2-1jcj"&gt;Part 2&lt;/a&gt; of the series, we took a nice dive to get us started in writing efficient async code in C#, I wanted to finalize the series with a couple of Tips and Tricks that will certainly come in handy in most development cases.&lt;/p&gt;

&lt;p&gt;Buckle up your seatbelts 🚀..&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%9C%94-tip-1"&gt;
  &lt;/a&gt;
  ✔ Tip #1
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;BoilWaterAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Starting the kettle"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kettle Finished Boiling"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;PourWaterAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;boilWaterTask&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;BoilWaterAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;boilWaterTask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Pouring boiling water."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Notice we are not awaiting the task!&lt;/span&gt;
    &lt;span class="nf"&gt;PourWaterAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not awaiting a method call means that no inner tasks would be awaited too, so &lt;code&gt;await boilWaterTask;&lt;/code&gt; has no effect, so does &lt;code&gt;await Task.Delay(3000);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, rewriting these two lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;boilWaterTask&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;BoilWaterAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;boilWaterTask&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;BoilWaterAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;.. would give the same result, the task of boiling the water would start running but would not be awaited.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%9C%94-tip-2"&gt;
  &lt;/a&gt;
  ✔ Tip #2
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;BoilWaterAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// DON'T&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// A NO-NO&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// PLEASE DON'T ⛔&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetAwaiter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above three &lt;strong&gt;DON'Ts&lt;/strong&gt; will cause the application's main thread to be blocked till the tasks are finished, the app might stop responding or processing new requests till the synchronous wait is completed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✅ DO:&lt;/strong&gt;&lt;br&gt;
Embrace the asynchronous nature of the task, await it, and return the result. Tasks being propagated throughout your code &lt;strong&gt;is normal&lt;/strong&gt;, just try to delay doing so as much as you can.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%E2%9C%94-tip-3"&gt;
  &lt;/a&gt;
  ✔ Tip #3
&lt;/h3&gt;

&lt;p&gt;Let's say we are implementing an interface, one of its methods requires a Task to be returned, &lt;strong&gt;BUT&lt;/strong&gt; the execution of the method itself does not require an asynchronous setup, it would not block the main thread and can run synchronously without problems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MyInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;DoSomethingAndReturnAString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;DoSomethingAndReturnAString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Some logic that does not need the await keyword&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Of course a compiler error, expecting Task&amp;lt;string&amp;gt; not a string&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can solve this issue with two approaches:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution-1-a-bad-one-"&gt;
  &lt;/a&gt;
  Solution 1 (a bad one 👎):
&lt;/h4&gt;

&lt;p&gt;Convert the method to be &lt;strong&gt;&lt;code&gt;async&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;(even though we do not need to await anything)&lt;/strong&gt;, and now we could return a string normally, right? &lt;strong&gt;DON'T ever do that!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The moment you mark a method as &lt;strong&gt;&lt;code&gt;async&lt;/code&gt;&lt;/strong&gt;, the compiler transforms your code into a &lt;strong&gt;state machine&lt;/strong&gt; that keeps track of things like yielding execution when an await is reached and resuming execution when a background job has finished. In fact, if you checked the IL &lt;em&gt;(Intermediate Language)&lt;/em&gt; generated from your code after marking a method as &lt;strong&gt;&lt;code&gt;async&lt;/code&gt;&lt;/strong&gt;, you'll notice that the function has turned into an entire class for that matter.&lt;/p&gt;

&lt;p&gt;So even on synchronous method marked with async (without await inside), a state machine will still be generated anyways and the code which could potentially be inlined and executed much faster will be generating additional complexity for state machine management.&lt;/p&gt;

&lt;p&gt;📝 &lt;strong&gt;That's why it's so important to mark methods as async if and only if there is await inside.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution-2-much-better-"&gt;
  &lt;/a&gt;
  Solution 2 (much better 👍):
&lt;/h4&gt;

&lt;p&gt;Instead: &lt;code&gt;return Task.FromResult("result");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's take another example:&lt;/p&gt;

&lt;p&gt;We have an HTTP client retrieving some text from an external web source,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetFromWebsite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetStringAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my.website.com"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="err"&gt;•••&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the objective is to only start retrieving the string from the website, then the best way to do it is to return the task of &lt;code&gt;GetStringAsync()&lt;/code&gt; as is, and &lt;strong&gt;do not await it here&lt;/strong&gt;, it boils down to the same reason of skipping the aimless creation of a state machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetFromWebsite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetStringAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my.website.com"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only case you'd want to await the call is that you want to perform some logic on the result &lt;strong&gt;inside&lt;/strong&gt; the method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Notice that we marked the method as async&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;GetFromWebsiteAndValidate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetStringAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my.website.com"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Perform some logic on the result&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, if you used the word "and" while describing what a method does, something might not be right.&lt;br&gt;
Example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"My method is doing &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; and &lt;em&gt;z&lt;/em&gt;" (NO-NO ⛔)&lt;/li&gt;
&lt;li&gt;"I have 3 methods, one for doing &lt;em&gt;x&lt;/em&gt;, another for &lt;em&gt;y&lt;/em&gt;, and the last for &lt;em&gt;z&lt;/em&gt;" (YES ✔)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will make your life much easier when trying to apply unit tests to your code.&lt;/p&gt;

&lt;p&gt;So a rule of thumbs 👍 to note down here:&lt;br&gt;
Only &lt;strong&gt;await&lt;/strong&gt; when you &lt;strong&gt;absolutely need&lt;/strong&gt; the result of the task.&lt;br&gt;
The async keyword does not run the method on a different thread, or do any other kind of hidden magic, hence, only mark a method as &lt;strong&gt;async&lt;/strong&gt; when you need to use the keyword &lt;strong&gt;await&lt;/strong&gt; in it.&lt;/p&gt;

&lt;p&gt;A couple of notes to always remember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;async&lt;/strong&gt; function can return either on of the three types: &lt;code&gt;void&lt;/code&gt;, &lt;code&gt;Task&lt;/code&gt;, or &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A function is "awaitable" because it returns a &lt;code&gt;Task&lt;/code&gt; or a &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;, not because it is marked &lt;code&gt;async&lt;/code&gt;, so we can &lt;code&gt;await&lt;/code&gt; a function that &lt;strong&gt;is not async&lt;/strong&gt; (a one just returning &lt;code&gt;Task&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;You cannot &lt;code&gt;await&lt;/code&gt; a function returning &lt;code&gt;void&lt;/code&gt;, hence, you should always return a &lt;code&gt;Task&lt;/code&gt; unless there is an absolute reason not to do so (a caller to the function expects a void return type), or that the function itself is a top-level function and there is no way other functions will be able to call it..&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#%E2%9C%94-tip-4"&gt;
  &lt;/a&gt;
  ✔ Tip #4
&lt;/h3&gt;

&lt;p&gt;We established that long-running tasks should always execute asynchronously, these tasks can fall down into two main categories, &lt;strong&gt;I/O-Bound&lt;/strong&gt; and &lt;strong&gt;CPU-Bound&lt;/strong&gt;. A task is said to be I/O bound when the time taken for it to complete is determined principally by the period spent waiting for input/output operations to be completed. In contrast, a CPU-Bound task is a task that's time of completion is determined principally by the speed of the central processor, examples for these would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I/O Bound Tasks:

&lt;ul&gt;
&lt;li&gt;Requesting data from the network&lt;/li&gt;
&lt;li&gt;Accessing the database&lt;/li&gt;
&lt;li&gt;Reading/Writing to a file system&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;CPU Bound Tasks: Generally performing an expensive calculation such as:

&lt;ul&gt;
&lt;li&gt;Graphics Rendering&lt;/li&gt;
&lt;li&gt;Video Compression&lt;/li&gt;
&lt;li&gt;Heavy mathematical computations&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generally, whenever you got an I/O Bound &lt;code&gt;Task&lt;/code&gt; or &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; at hands, &lt;code&gt;await&lt;/code&gt; it in an &lt;code&gt;async&lt;/code&gt; method. For CPU-bound code, you await an operation that is started on a background thread with the &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.run"&gt;&lt;code&gt;Task.Run&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; method. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 📝:&lt;/strong&gt;&lt;br&gt;
Make sure you analyzed the execution of your CPU-Bound code, and be mindful of the context switching overhead when multithreading, it might be not so costly after all in comparison.&lt;/p&gt;

&lt;p&gt;Okay, that's all I have for y'all today.&lt;br&gt;
Keep Coding 😉&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>webdev</category>
      <category>dotnet</category>
    </item>
  </channel>
</rss>
