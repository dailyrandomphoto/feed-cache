<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Two Symbol Turing Machine</title>
      <author>Dinesh Kumar Gnanasekaran</author>
      <pubDate>Wed, 27 Oct 2021 19:47:57 +0000</pubDate>
      <link>https://dev.to/dineshgdk/two-symbol-turing-machine-33a</link>
      <guid>https://dev.to/dineshgdk/two-symbol-turing-machine-33a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A Turing machine is a mathematical model used for computation by using infinitely long tape with symbols and a set of instructions. It was proposed by Alan Turing (remember, The Imitation Game) in 1936.&lt;/p&gt;

&lt;p&gt;All the programming languages are Turing complete and all the computer hardware (well almost) are Turing complete, meaning that they can do everything that a Turing machine can do. A two symbol Turing machine is a Turing machine that uses only two symbols (eg. 0’s and 1’s) for computation.&lt;/p&gt;

&lt;p&gt;Well!, let's get straight to the point and see what’s a two symbol Turing machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-components"&gt;
  &lt;/a&gt;
  The Components
&lt;/h2&gt;

&lt;p&gt;A Turing machine has three components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Infinitely long tape&lt;/li&gt;
&lt;li&gt;Read/write head&lt;/li&gt;
&lt;li&gt;Set of instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Turing machine uses infinite tape, to read and write symbols using the head on the tape by following a set of instructions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;Let us see the working of our Turing machine through an example of unary addition.&lt;/p&gt;

&lt;p&gt;Unary addition is simple stroke addition, say we add three strokes with two strokes we get five strokes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;||| + || = |||||
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, let's assume that our Turing machine uses two symbols 0 and 1.&lt;/p&gt;

&lt;p&gt;The initial tape is given below, where * represents the read/write head of the machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      * 
0 0 0 1 1 1 0 1 1 0 0 0 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The instructions are in three cards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ala17Vsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbns0orm4tqujewcc1dp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ala17Vsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbns0orm4tqujewcc1dp.png" alt="Image description" width="700" height="84"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The machine works as follows,&lt;/li&gt;
&lt;li&gt;The machine begins with an initial card&lt;/li&gt;
&lt;li&gt;The head reads the symbol on the tape&lt;/li&gt;
&lt;li&gt;The head erases and writes the new symbol on the tape according to the symbol read&lt;/li&gt;
&lt;li&gt;The head shifts in the direction (left or right) according to the symbol read&lt;/li&gt;
&lt;li&gt;The machine follows the next cards according to the symbol read&lt;/li&gt;
&lt;li&gt;The machine repeats the steps 2 to 5 until the halt card (CARD -0)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#walk-through"&gt;
  &lt;/a&gt;
  Walk Through
&lt;/h2&gt;

&lt;p&gt;Our machine starts initially with CARD -1, with the initial tape.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INITIAL STATE
      * 
0 0 0 1 1 1 0 1 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The head encounters symbol 1, so it writes 1 shift to the right and follows the instructions from the next card, CARD -1 itself. The same happens two more times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STEP 1
        * 
0 0 0 1 1 1 0 1 1 0 0 0

STEP 2
          * 
0 0 0 1 1 1 0 1 1 0 0 0

STEP 3
            * 
0 0 0 1 1 1 0 1 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At STEP 3 the machine stills follow CARD -1. The head reads the symbol 0, now the head erases 0 and writes 1, shifts to the right, and goes to CARD -2 for the next instructions. Then, the head reads 1, writes 1, and shifts to the right. This repeats again for another step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STEP 4
              * 
0 0 0 1 1 1 1 1 1 0 0 0

STEP 5
                * 
0 0 0 1 1 1 1 1 1 0 0 0

STEP 6
                  * 
0 0 0 1 1 1 1 1 1 0 0 0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the head reads symbol 0, following the instructions from CARD -2, it writes 0, shifts left and gets the next instructions from CARD-3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STEP 7
                * 
0 0 0 1 1 1 1 1 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the head reads symbol 1, it erases and writes 0, shift to the right, and the next card is CARD -0 (HALT)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we had a brief discussion on what is a Turing machine, especially a two symbol Turing machine. We went through the working of two symbols Turing machine through an example of unary addition.&lt;/p&gt;

&lt;p&gt;I have implemented the two-state Turing machine in C and you can access through this &lt;a href="https://github.com/dinesh-GDK/turing_machine"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create your own Turing machine with the flexibility of adding custom instructions and tape, with step-by-step visualization. I have added some interesting tapes and cards for you to implement.&lt;/p&gt;

&lt;p&gt;We have just touched the tip of the iceberg. There are very interesting puzzles which we can play with the Turing machine. One such puzzle is the Busy Beaver problem, a truly fascinating one. If interested just take a peek at it. The GitHub link contains some busy beaver cards and tapes as well.&lt;/p&gt;

</description>
      <category>turingmachine</category>
      <category>programming</category>
      <category>c</category>
    </item>
    <item>
      <title>Cache API Integration with HydratedBLoC in Flutter (Source Codes Included)</title>
      <author>Imran Sefat</author>
      <pubDate>Wed, 27 Oct 2021 19:25:15 +0000</pubDate>
      <link>https://dev.to/imransefat/cache-api-integration-with-hydratedbloc-in-flutter-source-codes-included-42kg</link>
      <guid>https://dev.to/imransefat/cache-api-integration-with-hydratedbloc-in-flutter-source-codes-included-42kg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction 🎉
&lt;/h1&gt;



&lt;p&gt;BLoC stands for Business Logic Controller. It was created by Google and introduced at Google I/O 2018. It is made based on Streams and Reactive Programming.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;I can assure you that every intermediate-level Flutter developer in their development lifetime heard about Bloc or maybe tried to learn bloc. Bloc is one of the most popular state management choices among developers because it has rich documentation and is well maintained. But yes, there are some downsides as well, for example, a lot of boilerplate codes.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;We will implement API integration at first, then persist the state so that when the user closes the app, it can maintain the state or load the data from the local device saved from the last API call to put it simply.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Note that after we kill the app, it starts right back where it left off. In addition, after it has loaded the previous (cached) state, the app requests the latest API data and updates seamlessly. Let’s get started!&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--32fs26Nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/0%2AOOohPMPoLAgC_hXS" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--32fs26Nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/0%2AOOohPMPoLAgC_hXS" alt="I won" width="500" height="363"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps 👣
&lt;/h1&gt;
&lt;h4&gt;
  &lt;a href="#1-configuring-the-flutter-project"&gt;
  &lt;/a&gt;
  1. Configuring the Flutter Project
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#2-add-the-datamodel"&gt;
  &lt;/a&gt;
  2. Add the datamodel
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#3-creating-the-bloc"&gt;
  &lt;/a&gt;
  3. Creating the bloc
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#4-creating-the-bloc-state-and-event"&gt;
  &lt;/a&gt;
  4. Creating the bloc state and event
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#5-creating-the-bloc-repository"&gt;
  &lt;/a&gt;
  5. Creating the Bloc Repository
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#6-implementing-the-bloc"&gt;
  &lt;/a&gt;
  6. Implementing the bloc
&lt;/h4&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nO0IzXa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/320/0%2A9wL0qaE3oOUUd0Nl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nO0IzXa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/320/0%2A9wL0qaE3oOUUd0Nl.gif" alt="I won" width="320" height="240"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#1-configuring-the-flutter-project"&gt;
  &lt;/a&gt;
  1. Configuring the Flutter project ⚙️
&lt;/h1&gt;

&lt;p&gt;Let’s add the necessary packages that we’re going to use throughout the application.&lt;/p&gt;

&lt;p&gt;Copy the dependencies to your Pubspec.yaml file. I am using the latest version available now at this moment.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then we need to install it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter packages get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You will get to understand everything as we go ahead.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUzMl_c9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/415/0%2ABB4B-IgNEWa0TJvb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUzMl_c9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/415/0%2ABB4B-IgNEWa0TJvb" alt="Datamodel" width="415" height="311"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#2-add-the-datamodel"&gt;
  &lt;/a&gt;
  2. Add the datamodel 📳
&lt;/h1&gt;

&lt;p&gt;We will implement the “FREETOGAME API”. For this, we have to make a datamodel of the API’s response. I have used the following website to make the datamodel class. It’s pretty easy, copy the JSON response and paste it on the website. The website will generate a class for you.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Website Link: &lt;a href="https://ashamp.github.io/jsonToDartModel/"&gt;https://ashamp.github.io/jsonToDartModel/&lt;/a&gt;&lt;br&gt;
Don’t forget to tick the Null Safety checkbox!&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;p&gt;Another datamodel that will contain the list of the games refers to the code below.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;The above code will show you some errors, as you can see that the 5th line contains a code that indicates that this file is part of another file that needs to be generated. Another thing, look at the 7th line, it is indicating that we will serialize so that we can save the response for later use.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Open a terminal and run the below code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;flutter packages pub run build_runner build&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wN7ickaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/320/0%2AgBkU4Qpdn7UjipHp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wN7ickaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/320/0%2AgBkU4Qpdn7UjipHp" alt="bloc" width="320" height="180"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-creating-the-bloc"&gt;
  &lt;/a&gt;
  3. Creating the bloc
&lt;/h1&gt;




&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
It contains the logic behind the main bloc. Now we have to make the event and state as well.

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ROfNuTDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/352/0%2A7-mIGJ58Wj7HPjwm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROfNuTDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/352/0%2A7-mIGJ58Wj7HPjwm" alt="bloc" width="352" height="232"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#4-creating-the-bloc-state-and-event"&gt;
  &lt;/a&gt;
  4. Creating the bloc state and event
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;There can be three(3) states.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Game list is loading -&amp;gt; GamelistLoading&lt;/li&gt;
&lt;li&gt;Game list loaded -&amp;gt; GamelistLoaded&lt;/li&gt;
&lt;li&gt;Game list cannot be loaded -&amp;gt; GamelistError&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WsxQQBjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2AoRzNrsG2ehRBKYEm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WsxQQBjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2AoRzNrsG2ehRBKYEm.gif" alt="loading" width="480" height="360"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#5-creating-the-bloc-repository"&gt;
  &lt;/a&gt;
  5. Creating the Bloc Repository👾
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We are calling the API using the HTTP package form from this file or class.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uK3nT-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2AmmOy98cWIGqgpjPd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uK3nT-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2AmmOy98cWIGqgpjPd.gif" alt="loading" width="480" height="480"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-implementing-the-bloc%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  6. Implementing the bloc🛠
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
This portion contains the UI and the Bloc implementation. You can check the main function. It is instantiating the hydrated bloc in the temporary directory.&lt;br&gt;
Note that after we kill the app it starts right back where it left off. In addition, after it has loaded the previous (cached) state, the app requests the latest API data and updates seamlessly.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;

&lt;h1&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  Congratulations! 🎊
&lt;/h1&gt;

&lt;p&gt;You just integrated an API with HydratedBloc that has Caching.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVyQq7oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2As1NXqYGxJqv9Tk9x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVyQq7oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2As1NXqYGxJqv9Tk9x.gif" alt="success" width="480" height="270"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#contact-me"&gt;
  &lt;/a&gt;
  Contact Me🌎
&lt;/h1&gt;

&lt;p&gt;YouTube Channel: &lt;a href="https://www.youtube.com/c/CodingwithImran"&gt;Coding with Imran&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/ImranSefat"&gt;@ImranSefat&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/imransefat/"&gt;MD. Al Imran Sefat&lt;/a&gt;&lt;br&gt;
Facebook Page: &lt;a href="https://www.facebook.com/CodingWithImran"&gt;Coding with Imran&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>api</category>
      <category>bloc</category>
      <category>cache</category>
    </item>
    <item>
      <title>How to create a custom radio button and make it functional in react?</title>
      <author>Tommy</author>
      <pubDate>Wed, 27 Oct 2021 19:08:47 +0000</pubDate>
      <link>https://dev.to/uttammarandi/how-to-create-a-custom-radio-button-and-make-it-functional-in-react-39hf</link>
      <guid>https://dev.to/uttammarandi/how-to-create-a-custom-radio-button-and-make-it-functional-in-react-39hf</guid>
      <description>&lt;p&gt;I was creating a product page for one of my e-commerce projects. And then I came into an issue of building a color and size selection component. I searched a lot on developer's best friend "Google" but could not find any optimal solution. After few exploration and testing I came up with this code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-setup"&gt;
  &lt;/a&gt;
  Basic Setup
&lt;/h2&gt;

&lt;p&gt;1.React&lt;br&gt;
2.Tailwind&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#preparing-the-data"&gt;
  &lt;/a&gt;
  Preparing the data
&lt;/h2&gt;

&lt;p&gt;Let's say we have an array of sizes for a particular product fetched from the db. We need to convert it to an object containing an id which will be used to map input to label and the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XXL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//map&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;productSize&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`input_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#defining-states"&gt;
  &lt;/a&gt;
  Defining States
&lt;/h2&gt;

&lt;p&gt;I defined a state for tracking the state of radio values. If you are using multiple radio buttons , you should create multiple states&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rendering-the-component"&gt;
  &lt;/a&gt;
  Rendering the component
&lt;/h2&gt;

&lt;p&gt;Map through the sizeData array and render each size. I am using tailwind css for styling which might make the code a bit messy.&lt;br&gt;
Radio input is set to invisible so that the label is the clickable element. input id is mapped to label for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main max-w-lg mx-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grid grid-cols-4 gap-8 gap-y-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizeData&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-mt-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
              &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;invisible radio_custom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sizeValue&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
              &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio_custom_label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`border border-gray-300 py-3 text-center cursor-pointer "
                        }`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;p&gt;Now, I have few issues with the above code. When a button is clicked , the other clicked buttons stays active. This doesn't give the toggle functionality that we require. The state is changing but the border on "onClick" persists. So even if the the state is changing, border stays on the element.&lt;br&gt;
What we need is to remove the border from all element and add border to the "target" element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;lastChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show_border&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextSibling&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show_border&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final Code
&lt;/h2&gt;

&lt;p&gt;I had to refactored the code like three times🙂. Here is the final code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XXL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;//map&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;productSize&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`input_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main max-w-lg mx-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grid grid-cols-4 gap-8 gap-y-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizeData&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-mt-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
              &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;invisible radio_custom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sizeValue&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
              &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;lastChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show_border&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextSibling&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show_border&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio_custom_label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`border border-gray-300 py-3 text-center cursor-pointer "
                        }`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used tailwind so need to add css code. Only extra one css class is required&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.show_border&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#2b2b2b&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-result"&gt;
  &lt;/a&gt;
  Final Result
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/4mDxFTVDZXd2pz3sLq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4mDxFTVDZXd2pz3sLq/giphy.gif" width="480" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h2&gt;

&lt;p&gt;There are multiple ways of doing this. If you have any suggestion or code improvement please do share. Feel free to connect. It's lively to make new friends.😀&lt;/p&gt;

</description>
      <category>react</category>
      <category>radiobutton</category>
      <category>functionalcomponent</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Projective Geometry Computer Vision</title>
      <author>He Codes IT</author>
      <pubDate>Wed, 27 Oct 2021 19:08:22 +0000</pubDate>
      <link>https://dev.to/hecodesit/projective-geometry-computer-vision-o9p</link>
      <guid>https://dev.to/hecodesit/projective-geometry-computer-vision-o9p</guid>
      <description>&lt;p&gt;Projective Geometry in Computer vision is an important concept. Projective geometry provides the mathematical formalism to describe the geometry of cameras and associated transformations, enable the manipulations of 2D projections of 3D objects. The definition of Projective Geometry in Wikipedia given HERE.&lt;/p&gt;

&lt;p&gt;Just like an English Grammar has First, Second and Third Person Perspectives, Computer vision has One Point, Two point and 3 Point Perspective of an image.&lt;/p&gt;

&lt;p&gt;One Point Perspective&lt;br&gt;
It has a single vanishing Point. All the edges are connected to this single vanishing Point.&lt;/p&gt;

&lt;p&gt;To read more visit &lt;a href="https://hecodesit.com/projective-geometry-computer-vision/"&gt;https://hecodesit.com/projective-geometry-computer-vision/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>computervision</category>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Encrypt/decrypt data with .NET 6 and Azure Key Vault</title>
      <author>Christos Matskas</author>
      <pubDate>Wed, 27 Oct 2021 18:48:31 +0000</pubDate>
      <link>https://dev.to/425show/encryptdecrypt-data-with-net-6-and-azure-key-vault-oak</link>
      <guid>https://dev.to/425show/encryptdecrypt-data-with-net-6-and-azure-key-vault-oak</guid>
      <description>&lt;p&gt;Security is hard. It's hard because there are so many things that can go wrong along the way. Attackers only need to find one small gap to make it through whereas developers and IT Pros have to think about all the possible attack permutations and potential security vulnerabilities every step of the way. That's why we talk about &lt;a href="https://gomindsight.com/insights/blog/what-are-the-7-layers-of-security/"&gt;"security in layers"&lt;/a&gt; when it comes to building systems that handle &lt;del&gt;sensitive&lt;/del&gt; data. And unless you're creating static marketing pages, it's very likely that your solution will need to work with some data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-do-i-start"&gt;
  &lt;/a&gt;
  Where do I start?
&lt;/h2&gt;

&lt;p&gt;If you're running on Azure (or other cloud providers) there are tools to help you keep your data secure both at rest and in transit. This is great &lt;a href="https://docs.microsoft.com/en-us/azure/security/fundamentals/encryption-overview"&gt;document&lt;/a&gt; that can help you get a high level overview of Azure data security and encryption. And there are many more tools to help you lock down and tightly monitor access to your data: &lt;a href="https://docs.microsoft.com/en-us/azure/security-center/security-center-introduction"&gt;Azure Security Center&lt;/a&gt;, [Azure Advisor] and &lt;a href="https://docs.microsoft.com/en-us/azure/security/fundamentals/overview"&gt;more&lt;/a&gt; etc etc.&lt;/p&gt;

&lt;p&gt;In this blog post we're going to look at client data encryption/decryption using .NET and Azure key Vault. However, if you're not a .NET developer, the practices and ideas in this blog post are applicable and available to every language that's supported by the Azure SDK and since everything is a wrapper around our Azure REST API, you can even roll out your own libraries (if you decide to choose so)&lt;/p&gt;

&lt;p&gt;The main point of this blog post is to help developers implement a robust solution to encrypt/decrypt data without having to worry about the underlying cryptographic implementation. Therefore, instead of spending weeks or months learning how cryptography works (symmetric, asymmetric, recommended algorithms and hard maths), you delegate the work to a service like Azure Key Vault. This way, you have a reliable and scalable service to manage your keys and perform complex operation outside your code! And that's the key: removing sensitive operations from you code makes it more robust&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To be able to use the code in this solution you'll need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An Azure Subscription &lt;a href="https://azure.microsoft.com/free"&gt;get a FREE one&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An Azure Key Vault (&lt;a href="https://docs.microsoft.com/en-us/azure/key-vault/general/quick-create-cli"&gt;create one&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;.NET 6 &lt;a href="https://dotnet.microsoft.com/download/dotnet/6.0"&gt;Download&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;VS Code &lt;a href="https://code.visualstudio.com/Download"&gt;Download&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing we haven't discussed yet is that this solution &lt;strong&gt;requires internet access&lt;/strong&gt; to call into Key Vault. Consequently, if you have an on prem app that needs to run in isolation and not call into Azure, you'll need to look at equivalent, on prem solutions like HashiCorp Vault etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#account-security-and-best-practices"&gt;
  &lt;/a&gt;
  Account security and best practices
&lt;/h2&gt;

&lt;p&gt;Most developers when working with Azure tend to use their own accounts out of convenience. However, this is not ideal. Instead, they should use Service Principals with restricted access rights to only the necessary resources. When moving to production, the Azure.Identity library makes it extremely easy to switch to Managed Identities without changing the code. Security end-to-end.&lt;/p&gt;

&lt;p&gt;Let's create a Service Principal with the right permissions:&lt;/p&gt;

&lt;p&gt;Open your favorite terminal (that has the Azure CLI installed) or jump straight to Azure Cloud Shell and run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;az ad sp create-for-rbac -n "cm-keyvault-crypto" --role "Key Vault Crypto User"
az keyvault set-policy --name cm-identity-kv --object-id a4e0e9c6-c507-4449-a9c4-25243ef61fe9 --key-permissions decrypt encrypt list get
az login --service-principal -u 2ff15c46-97bd-424a-b97a-433c8e5640d7 -p &amp;lt;your secret&amp;gt; --tenant 72f988bf-86f1-41af-91ab-2d7cd011db47
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first command creates a service principal account and assigns it to Crypto user RBAC role. Although we will not be using RBAC for this example, it's recommended practice to assign the appropriate roles to your SPs. Also note that the default &lt;code&gt;az ad sp create-for-rbac&lt;/code&gt; command behavior will change and stop assigning &lt;strong&gt;Contributor&lt;/strong&gt; role by default - a great security measure going forward! Contributor is an overprivileged role and we want to avoid using such accounts for dev/test/prod.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lg55z5N3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2bk1l3dg3tmmnpqmqo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lg55z5N3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2bk1l3dg3tmmnpqmqo6.png" alt="Image description" width="880" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second command assigns the appropriate Access Policies to Azure Key Vault to allow us retrieve keys to use for encryption/decryption. &lt;/p&gt;

&lt;p&gt;The final command signs in the Service Principal in the Azure CLI as we will be using this to provide credentials to our code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-write-some-code"&gt;
  &lt;/a&gt;
  Let's write some code
&lt;/h2&gt;

&lt;p&gt;For this solution we are going to use the .NET CLI and VS Code. In your terminal type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new console -n EncryptDecryptSample
dotnet add package install Azure.Identity
dotnet add package Azure.Security.KeyVault.Keys -v 4.3.0-beta.2 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the project in VS Code with &lt;code&gt;code .&lt;/code&gt;. Now we can write the necessary code to encrypt and decrypt data. Update the &lt;code&gt;Program.cs&lt;/code&gt; file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System.Text;
using Azure;
using Azure.Identity;
using Azure.Security.KeyVault.Keys;
using Azure.Security.KeyVault.Keys.Cryptography;

// vault URL could be passed as a parameter
var KeyVaultUrl = "https://cm-identity-kv.vault.azure.net";
// using Azure AD to support secretless authentication to Azure Key Vault
var credentials = new ChainedTokenCredential(
                        new AzureCliCredential(),
                        new ManagedIdentityCredential()
                );

var client = new KeyClient(new Uri(KeyVaultUrl), credentials);

//this could be parametarized as you may wish to pass different keys for different operations
var keyName = "MyEncryptionKey";

//get the key (or create one on the fly - very unlikely in a production environment)
KeyVaultKey key;
try 
{
    key = await client.GetKeyAsync(keyName); 
} 
catch (RequestFailedException ex) when (ex.Status == 404) 
{
    key = await client.CreateRsaKeyAsync(new CreateRsaKeyOptions(keyName));
} 

//get the crypto client of the key
var cryptoClient = client.GetCryptographyClient(key.Name, key.Properties.Version);

//do the fun stuff
var plainText = "My secret message";
var byteData = Encoding.Unicode.GetBytes(plainText);

Console.WriteLine("Encrypting...");
var encryptedResult = await cryptoClient.EncryptAsync(EncryptionAlgorithm.RsaOaep, byteData);
Console.WriteLine($"Encrypted data: {Convert.ToBase64String(encryptedResult.Ciphertext)}");
Console.WriteLine("Decrypting...");
var decryptedResult = await cryptoClient.DecryptAsync(EncryptionAlgorithm.RsaOaep, encryptedResult.Ciphertext);
Console.WriteLine($"Decrypted data: {Encoding.Unicode.GetString(decryptedResult.Plaintext)}");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the Service Principal is configured correctly then running the code with &lt;code&gt;dotnet run&lt;/code&gt; should yield the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q06K1lyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8aeiae8gqomx63esn5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q06K1lyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8aeiae8gqomx63esn5a.png" alt="Image description" width="880" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the Key Vault permissions are wrong (they shouldn't be if you followed the instructions above and signed in with the right account), you may receive the following error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzS9mJTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yza4yvkr7svmfqfa1zdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzS9mJTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yza4yvkr7svmfqfa1zdb.png" alt="Image description" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code makes use of the Azure.Identity library to authenticate to Azure Key Vault and then instantiate a &lt;code&gt;KeyClient&lt;/code&gt; and a &lt;code&gt;CryptographyClient&lt;/code&gt; to perform the necessary operations. This way, we never have to use and Keys or Secrets to authenticate to Key Vault making our application even more secure. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: this code attempts to retrieve a key and, if not found, it creates a new one. The current Service Principal (as configured earlier) doesn't have the appropriate permission to create keys so the code will fail. We can either create a key using a more privileged account, or temporarily update the SP with a &lt;code&gt;Create&lt;/code&gt; permission. In real world scenarios, the IT Admins or Security team will be responsible for creating (and rolling) keys in Key Vault.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#where-is-the-code"&gt;
  &lt;/a&gt;
  Where is the code?
&lt;/h2&gt;

&lt;p&gt;You can grab the code from [this GitHub repo] - notice how it jumps straight to the (&lt;a href="https://github.dev/425show/EncryptDecryptDataWithKeyVault"&gt;https://github.dev/425show/EncryptDecryptDataWithKeyVault&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Application security is hard but we shouldn't be intimated by it, especially since, as developers we are spoiled for choice these days! Many of the hard problems that we had to solve in the past are now a service or product that we can easily pull off the shelf and add it to our solution. Therefore, if you need to encrypt/decrypt data in your application, you can now do it with less than 20 lines of code using Azure Key Vault backed by Azure AD. Let me know in the comments if you have any Qs :)&lt;/p&gt;

</description>
      <category>security</category>
      <category>azure</category>
      <category>cloud</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>React SaaS Boilerplate with Next JS and Serverless</title>
      <author>Remi W.</author>
      <pubDate>Wed, 27 Oct 2021 18:31:17 +0000</pubDate>
      <link>https://dev.to/ixartz/react-saas-boilerplate-with-next-js-and-serverless-n3m</link>
      <guid>https://dev.to/ixartz/react-saas-boilerplate-with-next-js-and-serverless-n3m</guid>
      <description>&lt;p&gt;Building a SaaS application from scratch is a difficult task and it involves a lot of skills: Frontend, Backend, Cloud infrastructure and third-party integration like payment. It took me 5 months to build my first SaaS and make it available to the public.&lt;/p&gt;

&lt;p&gt;I built a &lt;a href="https://nextlessjs.com" rel="noopener noreferrer"&gt;React SaaS Boilerplate&lt;/a&gt; to reduce this time by 80%. The perfect solution to build your SaaS faster and better. My goal is to help you (developers) focus on your SaaS and your customers instead of losing time on boring configuration and integration.&lt;/p&gt;

&lt;p&gt;Get access to the most common SaaS building blocks and launch your SaaS in weeks, not in months.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter" width="720" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#landing-page-and-user-dashboard"&gt;
  &lt;/a&gt;
  Landing Page and User Dashboard
&lt;/h2&gt;

&lt;p&gt;Save time with a prebuilt landing page component written in React styled with Tailwind CSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigation bar&lt;/li&gt;
&lt;li&gt;Hero&lt;/li&gt;
&lt;li&gt;Features&lt;/li&gt;
&lt;li&gt;Vertical features&lt;/li&gt;
&lt;li&gt;Testimonial&lt;/li&gt;
&lt;li&gt;Pricing card&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;Call to action&lt;/li&gt;
&lt;li&gt;Footer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only thing left to you is the copywriting. Here is the example of the landing page:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dKUm8xr4PxI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For your authenticated users, you also need to have a user dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login&lt;/li&gt;
&lt;li&gt;Sidebar&lt;/li&gt;
&lt;li&gt;Table&lt;/li&gt;
&lt;li&gt;Form with label, input, textarea, radio button, checkbox, etc.&lt;/li&gt;
&lt;li&gt;Dialog (modal)&lt;/li&gt;
&lt;li&gt;Message state&lt;/li&gt;
&lt;li&gt;Settings page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yBAZxidjW34"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Like the landing page, every component is prebuilt. So, you don't need to implement and design yourself. It'll save you several days and weeks of development. Built in a modular way, the components are easy to customize and you can easily extend them for your use-cases.&lt;/p&gt;

&lt;p&gt;No need to be a designer or hire one to build your SaaS product. Focus on the things that matter to your customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h2&gt;

&lt;p&gt;All SaaS products need authentication for their users. A way for the users to have access to their user dashboard and use the products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pqf7D1oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cognito-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pqf7D1oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cognito-logo.png" alt="AWS Cognito authentication login" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com" rel="noopener noreferrer"&gt;React SaaS Template&lt;/a&gt; provides an authentication method out of the box with AWS Cognito, a secure and scalable identity provider. So, you don't need to implement or configure an authentication from scratch. It accepts several social sign-in methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also secures your cloud resources by denying unauthorized users and keeps your cost down.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#100-serverless"&gt;
  &lt;/a&gt;
  100% Serverless
&lt;/h2&gt;

&lt;p&gt;With recent development in Serverless, it's now totally possible to rely on Serverless to build a SaaS business. The pay-as-you-go pricing is perfect when you are launching your product.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" alt="AWS Lambda Serverless framework" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your products get some traction, Serverless removes the burden to handle the scaling. It automatically scales based on your traffic.&lt;/p&gt;

&lt;p&gt;And, the most important thing about Serverless, it reduces the infrastructure maintenance of your SaaS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No need to configure your server&lt;/li&gt;
&lt;li&gt;No need to update your server&lt;/li&gt;
&lt;li&gt;Make the security easier&lt;/li&gt;
&lt;li&gt;No need to scale your server&lt;/li&gt;
&lt;li&gt;Make your deployment faster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don't need to worry about server management and it frees your operation time. The perfect solution to help you focus on your products and make them grow faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-database"&gt;
  &lt;/a&gt;
  Serverless database
&lt;/h2&gt;

&lt;p&gt;After making the REST API serverless, the other step is to make the database serverless. Currently, the most viable solution is DynamoDB, a fully serverless NoSQL database:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highly scalable&lt;/li&gt;
&lt;li&gt;Scale to zero&lt;/li&gt;
&lt;li&gt;Pay-as-you-go pricing&lt;/li&gt;
&lt;li&gt;No cold start&lt;/li&gt;
&lt;li&gt;Managed service&lt;/li&gt;
&lt;li&gt;Production-ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3RDv2HD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-dynamodb-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3RDv2HD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-dynamodb-logo.png" alt="AWS DynamoDB serverless database" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For someone who has already worked with SQL, data migration is a nightmare to handle. On the opposite, Database schema in NoSQL is extremely flexible. It makes the deployment of the new version extremely easy without the need for data migration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe-integration"&gt;
  &lt;/a&gt;
  Stripe integration
&lt;/h2&gt;

&lt;p&gt;It's great to have a lot of users but it's even better to have paying customers for your SaaS. Accepting payment is hard and it's even harder for subscription payment used in SaaS.&lt;/p&gt;

&lt;p&gt;Setting up a recurring payment where you need to debit your customer every billing period (daily, weekly, monthly, yearly, or custom). You also need to generate and send an invoice for subscriptions. That is only the happy path, you also need to handle all the edge cases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Di7UTlQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Di7UTlQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-logo.png" alt="Stripe logo" width="880" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com" rel="noopener noreferrer"&gt;React SaaS&lt;/a&gt; has an integration with Stripe. All the integration has made for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stripe checkout page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVN9VDJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-hosted-checkout.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVN9VDJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-hosted-checkout.png" alt="Stripe hosted checkout page" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stripe customer portal where the customer can manage his subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--97tqtWyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-customer-portal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--97tqtWyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-customer-portal.png" alt="Stripe customer portal" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Invoice history with downloadable PDF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rJqz3hq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-downloadble-invoice-pdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJqz3hq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-downloadble-invoice-pdf.png" alt="Stripe downloadable invoice PDF" width="531" height="699"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receive event notification with Stripe webhook&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clean-code-and-architecture"&gt;
  &lt;/a&gt;
  Clean code and architecture
&lt;/h2&gt;

&lt;p&gt;A boilerplate code shouldn't lose your time and energy. You don't want to spend your time restructuring and fixing the project. It's extremely important for starter code to provide high-quality code. React SaaS Boilerplate was built by following industry standards and best practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consistent coding standards&lt;/li&gt;
&lt;li&gt;Bulletproof architecture&lt;/li&gt;
&lt;li&gt;Readable code&lt;/li&gt;
&lt;li&gt;Clean source code&lt;/li&gt;
&lt;li&gt;Highly modular&lt;/li&gt;
&lt;li&gt;Reusable code&lt;/li&gt;
&lt;li&gt;Well-architecture&lt;/li&gt;
&lt;li&gt;Layered architecture&lt;/li&gt;
&lt;li&gt;Scalable folder structure&lt;/li&gt;
&lt;li&gt;Easy to maintain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some code samples from Nextless JS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prebuilt landing page components in React (code sample):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VR_6nEO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/frontend-landing-page-component.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VR_6nEO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/frontend-landing-page-component.png" alt="Prebuilt landing page components" width="731" height="685"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An example of React landing page component, a testimonial component:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TsoOhkfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-page-index.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsoOhkfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-page-index.png" alt="Testimonial components" width="805" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frontend folder and architecture:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gAXSeqD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/frontend-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gAXSeqD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/frontend-architecture.png" alt="Next JS frontend architecture" width="269" height="953"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backend Express JS REST API router:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pf-TL8jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-router.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pf-TL8jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-router.png" alt="REST Api backend router" width="832" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backend Express JS controller code sample:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gb0gp_wE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-crontroller.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gb0gp_wE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-crontroller.png" alt="Backend controller" width="833" height="876"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backend folder and architecture:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GhJd9eD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GhJd9eD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-architecture.png" alt="Backend architecture" width="326" height="922"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#form-management"&gt;
  &lt;/a&gt;
  Form management
&lt;/h2&gt;

&lt;p&gt;Almost all applications need some user input. With some basic HTML, you can easily create a form like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WILdNfii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/form-add-todo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WILdNfii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/form-add-todo.png" alt="Form add todo" width="880" height="216"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the backend side, you need to implement a validation method to verify the user input. The validation method is configured with definition and schema. Then, when an error occurs, you need to display it in the frontend:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMgGVbq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/form-error-handling.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMgGVbq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/form-error-handling.png" alt="Form error handling" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good news! With React SaaS, everything has been set up for you. You only need to customize it for your needs. Saving you time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy to use forms&lt;/li&gt;
&lt;li&gt;accessible forms&lt;/li&gt;
&lt;li&gt;no need to design forms from scratch&lt;/li&gt;
&lt;li&gt;form submission&lt;/li&gt;
&lt;li&gt;implement the validation method&lt;/li&gt;
&lt;li&gt;connect the form with the backend, the two-ways communication&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bestinclass-developer-experience"&gt;
  &lt;/a&gt;
  Best-in-class Developer Experience
&lt;/h2&gt;

&lt;p&gt;Built by developers for developers with experience in mind. &lt;a href="https://nextlessjs.com" rel="noopener noreferrer"&gt;React SaaS Starter&lt;/a&gt; includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type checking, TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" alt="TypeScript programming language logo" width="300" height="74"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linter, ESLint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HuMQAyxe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eslint-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HuMQAyxe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eslint-logo.png" alt="ESLint JS linter logo" width="480" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code formatter, Prettier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xArC6TOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/prettier-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xArC6TOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/prettier-logo.png" alt="Code formatter Prettier logo" width="880" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git Hooks, Husky&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything has been perfectly configured for you to write high-quality code. You don't need to lose any seconds to make JS tooling work together. So, you can move fast on your SaaS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nzah4kh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/vscode-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nzah4kh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/vscode-logo.png" alt="VSCode logo" width="512" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The React SaaS goes beyond by providing configuration for the most used code editor VSCode: debug configuration, Settings, Task and suggested extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-as-code"&gt;
  &lt;/a&gt;
  Infrastructure as Code
&lt;/h2&gt;

&lt;p&gt;Infrastructure as Code allows developers to set up a cloud infrastructure without any manual configuration. As you know, the manual configuration has a lot of drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error-prone&lt;/li&gt;
&lt;li&gt;Not easy to replicate for each environment&lt;/li&gt;
&lt;li&gt;Have inconsistent between environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React SaaS Template helps you deploy all your cloud infrastructure in one command. No need to become a DevOps engineer or hire one to build your SaaS.&lt;/p&gt;

&lt;p&gt;Create and deploy DynamoDB on your own AWS account:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7eGAFWkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-infrastructure-as-code.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7eGAFWkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-infrastructure-as-code.png" alt="Next JS Infrastructure as Code" width="741" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-example-and-documentation"&gt;
  &lt;/a&gt;
  Code example and documentation
&lt;/h2&gt;

&lt;p&gt;It's always good to have code examples to start a project. React SaaS Boilerplate comes up with a Todo SaaS product as a code example. A Todo app where the user can create, read, update and delete a Todo (CRUD operation).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cS7eEKcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-todo-crud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cS7eEKcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-todo-crud.png" alt="Nextless Todo app CRUD code example" width="720" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Documentation is provided to run the boilerplate in 10 minutes on your local computer. In 10 minutes, you'll be able to set up and run the full-stack application. After that, you are ready to go and start on what makes your SaaS unique!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;If you want to make your own SaaS and to get all these features out of the box for a fast time to market, please check out &lt;a href="https://nextlessjs.com"&gt;React SaaS Boilerplate&lt;/a&gt; and focus on the core development of your SaaS.&lt;/p&gt;

&lt;p&gt;The perfect starter kit to launch your SaaS faster and better. Focus on your business, products and customers instead of losing your time to implement basic functionalities like authentication, Stripe subscription, prebuilt landing page, prebuilt dashboard page, form and error handling, CRUD operation, layered architecture, deployment, server maintenance, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter" width="720" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Get Started with MariaDB in 3 Steps</title>
      <author>Rob Hedgpeth</author>
      <pubDate>Wed, 27 Oct 2021 18:28:15 +0000</pubDate>
      <link>https://dev.to/probablyrealrob/get-started-with-mariadb-in-3-steps-jhd</link>
      <guid>https://dev.to/probablyrealrob/get-started-with-mariadb-in-3-steps-jhd</guid>
      <description>&lt;p&gt;OK, we all know that there are a ton of database options out there these days. &lt;a href="https://en.wikipedia.org/wiki/Relational_database"&gt;Relational (SQL)&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/NoSQL"&gt;NoSQL&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Distributed_SQL"&gt;Distributed SQL (NewSQL)&lt;/a&gt;. And that’s really just the tip of the iceberg. Choosing a new database is likely one of the most important architectural decisions that go into creating or integrating into a new solution or application. &lt;/p&gt;

&lt;p&gt;The reasons for choosing a database can be everything from extremely simple to pretty damn complex, but, ultimately, it all boils down to the type of data workload you’re looking to handle. But that’s not something I’m going to get into, because that’s the kind of research you can certainly go off and do on your own. &lt;/p&gt;

&lt;p&gt;Instead, in this article, I want to focus on the quickest way you can go from nothing to having a local instance of a &lt;a href="https://mariadb.com"&gt;MariaDB&lt;/a&gt; database up, running and ready to use so you can start checking things out, using a &lt;a href="https://www.docker.com/resources/what-container"&gt;Docker container&lt;/a&gt;, for yourself.&lt;/p&gt;

&lt;p&gt;OK, let’s get into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-install-docker"&gt;
  &lt;/a&gt;
  Step 1 - Install Docker
&lt;/h2&gt;

&lt;p&gt;Now, unless you’ve been living under a rock for the past several years I'm willing to bet you’ve at least heard of &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, or, at the very least, the concept of containerization. And, if not, no biggie check &lt;a href="https://www.docker.com/resources/what-container"&gt;this&lt;/a&gt; out if you’re curious. &lt;/p&gt;

&lt;p&gt;Either way, the good news is that using Docker on your local machine is incredibly easy. Just &lt;a href="https://www.docker.com/get-started"&gt;download and install Docker Desktop&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-start-a-mariadb-docker-container"&gt;
  &lt;/a&gt;
  Step 2 - Start a MariaDB Docker Container
&lt;/h2&gt;

&lt;p&gt;Once you’ve successfully installed Docker on your machine you’re ready to pull the MariaDB image and spin up a container (which will contain a MariaDB database instance). &lt;/p&gt;

&lt;p&gt;For this you’re going to use the &lt;a href="https://hub.docker.com/_/mariadb"&gt;Official MariaDB Docker Image&lt;/a&gt; hosted at &lt;a href="https://hub.docker.com"&gt;https://hub.docker.com&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Open up a new terminal window and execute the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 127.0.0.1:3306:3306  &lt;span class="nt"&gt;--name&lt;/span&gt; mdb &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;MARIADB_ROOT_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Password123! &lt;span class="nt"&gt;-d&lt;/span&gt; mariadb:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The previous statement will pull down the latest version of the Official MariaDB image and spin up a new container on localhost (&lt;code&gt;127.0.0.1&lt;/code&gt;), exposing port &lt;code&gt;3306&lt;/code&gt; and allow you to connect using the root &lt;code&gt;user&lt;/code&gt; with password &lt;code&gt;Password123!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; I guess this is something like Step 2-b, but you can confirm that the docker run command has successfully pulled the MariaDB Image and spun up a container by executing docker ps, which will show you all of the containers currently running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-connect-to-mariadb"&gt;
  &lt;/a&gt;
  Step 3 - Connect to MariaDB
&lt;/h2&gt;

&lt;p&gt;Lastly, you don’t need to install anything else to start using MariaDB. While you certainly can use &lt;em&gt;other&lt;/em&gt; types of clients or tools to connect to and communicate with a MariaDB database, for this brief walkthrough you don't have to worry about any of that. Everything you need you already have. Just use the &lt;code&gt;mariadb&lt;/code&gt; command-line client that’s included within the MariaDB Docker container. &lt;/p&gt;

&lt;p&gt;Execute the following to connect to MariaDB using the command-line client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; mdb mariadb &lt;span class="nt"&gt;--user&lt;/span&gt; root &lt;span class="nt"&gt;-pPassword123&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should result in something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Welcome to the MariaDB monitor.  Commands end with &lt;span class="p"&gt;;&lt;/span&gt; or &lt;span class="se"&gt;\g&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Your MariaDB connection &lt;span class="nb"&gt;id &lt;/span&gt;is 4
Server version: 10.6.3-MariaDB-1:10.6.3+maria~focal mariadb.org binary distribution

Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type &lt;span class="s1"&gt;'help;'&lt;/span&gt; or &lt;span class="s1"&gt;'\h'&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;help. Type &lt;span class="s1"&gt;'\c'&lt;/span&gt; to clear the current input statement.

MariaDB &lt;span class="o"&gt;[(&lt;/span&gt;none&lt;span class="o"&gt;)]&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that’s it! That’s all you need to connect to and start using (querying) MariaDB.&lt;/p&gt;

&lt;p&gt;Happy coding, friends!&lt;/p&gt;

</description>
      <category>mariadb</category>
      <category>docker</category>
      <category>beginners</category>
      <category>database</category>
    </item>
    <item>
      <title>Functions to be called only once in C++</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 27 Oct 2021 18:27:32 +0000</pubDate>
      <link>https://dev.to/sandordargo/functions-to-be-called-only-once-in-c-5al1</link>
      <guid>https://dev.to/sandordargo/functions-to-be-called-only-once-in-c-5al1</guid>
      <description>&lt;p&gt;In this article, we are going to discuss how we can make sure member functions are called no more than once while their enclosing object is alive.&lt;/p&gt;

&lt;p&gt;There can be different motivations for having such functions. Certain operations might be very costly, so we don't want to recompute the results several times, or maybe logically it doesn't make sense to call a function twice.&lt;/p&gt;

&lt;p&gt;As we're going to see, the different motivations can lead to different solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#very-costly-operations"&gt;
  &lt;/a&gt;
  Very costly operations
&lt;/h2&gt;

&lt;p&gt;Imagine that a function has something very costly to perform. Maybe it has to retrieve something from the database, or from the network, maybe simply it's just very CPU intensive and we want to avoid doing that work twice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cache-the-data"&gt;
  &lt;/a&gt;
  Cache the data
&lt;/h3&gt;

&lt;p&gt;A simple and clean solution can be that when you call the costly function the first time, it saves the data in a private member. For later calls, the result is simply retrieved from that member instead of repeating the computation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;computeCostlyResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
  &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="n"&gt;m_result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this simple example, we default initialize &lt;code&gt;m_result&lt;/code&gt; of type &lt;code&gt;CostlyResult&lt;/code&gt; which has the means to check whether it already stores the outcome of the costly operations. For practical reasons, it's called &lt;code&gt;CostlyResult::empty&lt;/code&gt; but there can be other ways to make such checks. You might even use a helper member to track if the function has been already called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
  &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;m_result_initialized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;computeCostlyResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;m_result_initialized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m_result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
  &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="n"&gt;m_result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;m_result_initialized&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The goal is clearly to avoid the computation being done twice. If the object lives long and the result might change, you might want to provide means to trigger a refresh of the data. As long as it doesn't happen automatically but the user of the class had to pass in a special flag or call a function, it's okay. The computation won't be triggered accidentally.&lt;/p&gt;

&lt;p&gt;But what if you really want to restrict the number of calls and not just the computations?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-a-counter"&gt;
  &lt;/a&gt;
  Have a counter
&lt;/h3&gt;

&lt;p&gt;Instead of checking whether the &lt;code&gt;m_result&lt;/code&gt; member was initialized, we can have a counter that counts how many times &lt;code&gt;getCostly&lt;/code&gt; was called.&lt;/p&gt;

&lt;p&gt;We can set a threshold and if there are more calls than that, we can raise an error like in the below example. Note that if the threshold is only one, meaning that the function can be called only once, instead of using a counter, we can fall back to a &lt;code&gt;bool&lt;/code&gt; that is set after the first call - like in the previous example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdexcept&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CostlyResult&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number_of_costly_calls&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;runtime_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyClass::getCostly() can be called only once"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;number_of_costly_calls&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;computeCostlyResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
  &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="n"&gt;computeCostlyResult&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number_of_costly_calls&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// ERROR THROWN&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, you can also see that we called &lt;code&gt;getCostly()&lt;/code&gt;, yet we didn't store the result. That's probably a mistake and a waste of resources. Since C++17 we shall use &lt;code&gt;[[nodiscard]]&lt;/code&gt; to have a compile-time warning in such situations and change &lt;code&gt;getCostly&lt;/code&gt; as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;nodiscard&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="nf"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's jump to our other main motivation to avoid multiple calls to the same functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-calls-are-illogical"&gt;
  &lt;/a&gt;
  Multiple calls are illogical
&lt;/h2&gt;

&lt;p&gt;What can we do if it logically doesn't make sense to call a function more than once?&lt;/p&gt;

&lt;p&gt;For sure, caching is not needed, we want to completely avoid multiple calls.&lt;/p&gt;

&lt;p&gt;Then we have to ask ourselves a question. Will the call to the constrained function be the very last call on the object?&lt;/p&gt;

&lt;p&gt;If no...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implement-a-flag"&gt;
  &lt;/a&gt;
  Implement a flag
&lt;/h3&gt;

&lt;p&gt;If the given function call is not the last one on the object, we can take the idea of the counter from the previous sections and implement it strictly with a flag, and of course with the &lt;code&gt;[[nodiscard]]&lt;/code&gt; attribute in case it returns something.&lt;/p&gt;

&lt;p&gt;Let's also have a runtime error in case we go against the rule we set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdexcept&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CostlyResult&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;nodiscard&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getCostly_already_called&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;runtime_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MyClass::getCostly() can be called only once"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;getCostly_already_called&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;computeCostlyResult&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
  &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="n"&gt;computeCostlyResult&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;getCostly_already_called&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;//r = mc.getCostly();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#destructive-separation-move-away-and-call"&gt;
  &lt;/a&gt;
  Destructive separation: move away and call
&lt;/h3&gt;

&lt;p&gt;This solution is borrowed by &lt;a href="https://youtu.be/nLSm3Haxz0I?t=2523"&gt;Matt Godbolt and his talk at C++ On Sea 2020&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can go this way if the function call should be the last one on the object. After this call, our object won't - necessarily - be in a usable shape.&lt;/p&gt;

&lt;p&gt;The first thing to do is to add a &lt;code&gt;[[nodiscard]]&lt;/code&gt; attribute if it has any return type so that people don't accidentally forget to save the results in a variable.&lt;/p&gt;

&lt;p&gt;The other step is something more interesting and at the first sight even esoteric.&lt;/p&gt;

&lt;p&gt;We have to add the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; qualifier to the function declaration - something I wrote about &lt;a href="https://www.sandordargo.com/blog/2018/11/25/override-r-and-l0-values#use--or--for-function-overloading"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means that the function can only be called if the object:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;is temporary&lt;/li&gt;
&lt;li&gt;is about to fall out of scope&lt;/li&gt;
&lt;li&gt;has been moved from&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, the object is gone after the call.&lt;/p&gt;

&lt;p&gt;Let's have a look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CostlyResult&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;nodiscard&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The compiler says now that we are ignoring the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; qualifier. We even got a compile-time check so that it should be called only once!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main.cpp: In function 'int main()':
main.cpp:16:24: error: passing 'MyClass' as 'this' argument discards qualifiers [-fpermissive]
   16 |   auto r = mc.getCostly();
      |            ~~~~~~~~~~~~^~
main.cpp:8:30: note:   in call to 'CostlyResult MyClass::getCostly() &amp;amp;&amp;amp;'
    8 |   [[nodiscard]] CostlyResult getCostly() &amp;amp;&amp;amp; {
      |                              ^~~~~~~~~

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not so fast. The easiest way to get rid of the error message is to move away from &lt;code&gt;mc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do the same thing again!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you should not do this, but it's possible and the compiler will not shout. At least, when you see the first line, the &lt;code&gt;std::move&lt;/code&gt; should ring a bell that you shouldn't use that object anymore. But nothing prevents you.&lt;/p&gt;

&lt;p&gt;A better way would be to wrap the call in a function and have the call at the last statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;CostlyResult&lt;/span&gt; &lt;span class="nf"&gt;getThatCostly&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;getCostly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that in the video, std::move is not used in this case, (but with the compiler I use,) it doesn't work without the &lt;code&gt;move&lt;/code&gt;. Anyway, it's the last line, so for sure, you're not going to reuse the object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we've seen different solutions to prevent functions to be called more than once, or at least to trigger their computations more than once.&lt;/p&gt;

&lt;p&gt;Depending on the motivations, there are different solutions, such as caching, throwing exceptions or using function overloads.&lt;/p&gt;

&lt;p&gt;Do you have other solutions in mind?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>functions</category>
      <category>oop</category>
    </item>
    <item>
      <title>What is Swift? Features, advantages, and syntax basics</title>
      <author>Erin Schaffer</author>
      <pubDate>Wed, 27 Oct 2021 18:27:27 +0000</pubDate>
      <link>https://dev.to/educative/what-is-swift-features-advantages-and-syntax-basics-46gj</link>
      <guid>https://dev.to/educative/what-is-swift-features-advantages-and-syntax-basics-46gj</guid>
      <description>&lt;p&gt;We’re only a couple of months away from the new year, which means it’s time to start looking ahead to the tech trends that will dominate the software industry in 2022. As the new year approaches, we want to help you get familiar with upcoming trends so you can be prepared and start taking your skills to the next level. Today, we’ll discuss &lt;strong&gt;&lt;em&gt;Swift&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Swift programming language is a general-purpose, open-source programming language designed by Apple. The language is influenced by Python, making it fast and intuitive. Swift is mainly used for native iOS and macOS development. Many popular apps including LinkedIn, Lyft, and WordPress are written in Swift. If you’re interested in iOS development, Swift is a great language to learn. Let’s learn more about this popular language!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll cover&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#whatisswift"&gt;What is Swift?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#whylearnswift"&gt;Why should I learn Swift?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swiftvsobjectivec"&gt;Swift vs Objective-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swiftsyntax"&gt;Introduction to Swift syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nextsteps"&gt;Wrapping up and next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-swift"&gt;
  &lt;/a&gt;
  What is Swift?
&lt;/h2&gt;

&lt;p&gt;Swift is a multi-paradigm, general-purpose, open-source programming language for iPadOS, macOS, tvOS, watchOS, and &lt;strong&gt;iOS development&lt;/strong&gt;. It was created by Apple in 2014 to give developers a powerful language to develop iOS apps. According to swift.org, the language was designed to be &lt;strong&gt;safe, fast, and expressive&lt;/strong&gt;. It’s intended to be a replacement for C-based languages. The Swift language is constantly evolving, and the community continues to grow. Swift source code can be found on GitHub, making it easy for anyone to access the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swift-features"&gt;
  &lt;/a&gt;
  Swift features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Powerful generics&lt;/strong&gt;: Generics allow you to write flexible, reusable functions and types that can work with any type. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Native error handling&lt;/strong&gt;: Swift provides support for throwing, catching, propagating, and manipulating errors at runtime.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Structs and classes&lt;/strong&gt;: Swift allows you to define a structure or class in a single file, and the external interface is made available for other code to use.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Protocol extensions&lt;/strong&gt;: Swift allows you to define behavior on protocols themselves, rather than in global functions or individual conformances.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memory safety&lt;/strong&gt;: Swift automatically manages memory and prevents unsafe behavior from happening in your code. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memory management&lt;/strong&gt;: With Automatic Reference Counting (ARC), Swift tracks and manages our app’s memory usage. This means we don’t need to worry about memory management ourselves.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flexible enumerations&lt;/strong&gt;: Swift enums support pattern matching and can have payloads.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Package manager&lt;/strong&gt;: The Swift package manager is a cross-platform tool we can use to build, run, test, and package Swift libraries and executables.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Debugging&lt;/strong&gt;: Swift uses the LLDB debugger, which provides you with a REPL and debugger to enable integrated debugging, consistent formatting, failure recovery, and expression evaluation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Source and binary compatibility&lt;/strong&gt;: The latest version of Swift has binary compatibility for apps. Swift libraries are included in every operating system release, so your apps will use the latest version of the library in the OS, and your code can run without recompiling.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tuples&lt;/strong&gt;: Tuples allow us to create and share value groupings. We can use tuples to return multiple values as a single value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Closure syntax&lt;/strong&gt;: Swift has a lightweight closure syntax, which has optimizations to enable a clutter-free syntax and clear style.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-i-learn-swift"&gt;
  &lt;/a&gt;
  Why should I learn Swift?
&lt;/h2&gt;

&lt;p&gt;Swift was designed to be &lt;strong&gt;easy to learn&lt;/strong&gt; and easy to use. Apple created the language with new coders in mind. Whether you’re still in school, exploring a new career path, or wanting to learn how to code, Swift was created to be a simple and &lt;strong&gt;intuitive&lt;/strong&gt; first language to learn. If you’re new to coding, Swift Playgrounds is an iPad app that makes it easy to get started with Swift coding.&lt;/p&gt;

&lt;p&gt;Once you learn Swift, you’ll be an appealing candidate for potential employers. Swift developers are in &lt;strong&gt;high demand&lt;/strong&gt;. According to Apple, the company has created around &lt;strong&gt;two million jobs&lt;/strong&gt; in the United States. According to Indeed, the average salary for an iOS developer in the U.S. is &lt;strong&gt;$116,804&lt;/strong&gt;. If you want to get into app development, Swift is a smart language to learn.&lt;/p&gt;

&lt;p&gt;Let’s take a look at some of the pros and cons of the Swift programming language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swift-pros"&gt;
  &lt;/a&gt;
  Swift pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fast and powerful&lt;/strong&gt;: Swift uses LLVM compiler technology and its standard library makes writing code intuitive and efficient.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modern&lt;/strong&gt;: Swift APIs are easy to read and maintain. Inferred types make your code cleaner and less error-prone. Modules eliminate headers and provide namespaces.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy to learn&lt;/strong&gt;: Swift was designed with beginner programmers in mind. You can use Swift Playgrounds for iPad to get started with Swift code, and you can access courses to learn how to build Xcode apps.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Safe&lt;/strong&gt;: Swift has a variety of safety features, such as automatic memory management, value types, and variable initialization. In Swift, objects can never be &lt;code&gt;nil&lt;/code&gt;, and the Swift compiler will stop you if you try to use a &lt;code&gt;nil&lt;/code&gt; object. These features help prevent runtime crashes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cross-platform&lt;/strong&gt;: Swift supports all Apple platforms, Linux, Windows, and Ubuntu.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dynamic libraries&lt;/strong&gt;: Dynamic libraries exist outside of your code and are uploaded when needed. Libraries are integrated into every device release.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Large community&lt;/strong&gt;: Swift has one of the most active and rich open-source communities. Also, there are a lot of resources to help you learn the language.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#swift-cons"&gt;
  &lt;/a&gt;
  Swift cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Relatively new language&lt;/strong&gt;: Swift is still a young language. This means that some of its capabilities and resources aren’t as robust as other programming languages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Weak cross-platform support&lt;/strong&gt;: While Swift does support all Apple platforms, Linux, and Windows, it works best for native iOS development.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Frequent updates&lt;/strong&gt;: Swift is a newer language and has frequent updates. This can make it hard to find the right tools to help with certain tasks. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IDE support&lt;/strong&gt;: Xcode, the official Apple IDE, falls short in certain support areas, including syntax highlighting, autocomplete, refactoring, and compiling.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swift-vs-objectivec"&gt;
  &lt;/a&gt;
  Swift vs Objective-C
&lt;/h2&gt;

&lt;p&gt;Objective-C is a general-purpose, object-oriented programming language. It was the primary programming language used for OS X and iOS development before Swift came along in 2014. It combines &lt;strong&gt;features of C and Smalltalk&lt;/strong&gt;. After the creation of Swift, Objective-C began to decline in use and popularity, although existing apps written in Objective-C will still need to be maintained.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, what makes Swift the better choice?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First, it’s important to note that Swift is not the direct successor to Objective-C. Both languages have different capabilities and can be used together for mobile app development. Let’s look at a comparison of the two languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swift"&gt;
  &lt;/a&gt;
  Swift
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;With Swift, you can develop in Xcode, Swift Playgrounds, Cocoa Touch, and more.&lt;/li&gt;
&lt;li&gt;As of now, Swift requires at least iOS 7. This means that iPhones and iPads developed before 2014 won’t be compatible with your apps. &lt;/li&gt;
&lt;li&gt;Swift is a modern, human-friendly language with a simple syntax, which means that the speed of coding is faster.&lt;/li&gt;
&lt;li&gt;According to Apple, Swift is 2.6 times faster than Objective-C.&lt;/li&gt;
&lt;li&gt;Swift has rich documentation that is constantly updated.&lt;/li&gt;
&lt;li&gt;The demand for Swift developers is increasing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#objectivec"&gt;
  &lt;/a&gt;
  Objective-C
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;With Objective-C, you mainly develop in Xcode.&lt;/li&gt;
&lt;li&gt;Your apps will run on any available version of iOS.&lt;/li&gt;
&lt;li&gt;Using Objective-C typically results in a decreased speed of coding because the language isn’t as intuitive and human-friendly.&lt;/li&gt;
&lt;li&gt;Objective-C is 2.6 times slower than Swift, and it takes longer to write because of its more complex syntax.&lt;/li&gt;
&lt;li&gt;Objective-C has rich documentation that isn’t updated frequently.&lt;/li&gt;
&lt;li&gt;The demand for Objective-C developers is decreasing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, Swift is a more desirable language to choose because it’s safer, faster, more intuitive, and interactive. Swift has &lt;strong&gt;Objective-C interoperability&lt;/strong&gt;, which means that Swift code can live alongside existing Objective-C files. With Swift, you’ll also have complete access to Objective-C APIs.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction-to-swift-syntax"&gt;
  &lt;/a&gt;
  Introduction to Swift syntax
&lt;/h2&gt;

&lt;p&gt;Swift is known for its simple and intuitive syntax. Let’s take a look at some of the Swift syntax basics:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h3&gt;

&lt;p&gt;In Swift, a &lt;code&gt;Hello World!&lt;/code&gt; program is simple. It can be done in one line, and you don’t need to import any libraries or additional functionalities. Swift also doesn’t require semicolons at the end of statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print("Hello World!)

=&amp;gt; Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#variables-and-constants"&gt;
  &lt;/a&gt;
  Variables and constants
&lt;/h3&gt;

&lt;p&gt;In Swift, you use &lt;code&gt;var&lt;/code&gt; to make a variable and &lt;code&gt;let&lt;/code&gt; to make a constant. Variables and constants need to have the same type as the value you want to assign to them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var myVariable = 10

let myConstant = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don’t have to explicitly write the type. If you provide a value when creating a variable or a constant, the compiler can infer what type it is. For example, the compiler will infer that &lt;code&gt;ourVariable&lt;/code&gt; is an integer because its value is set to an integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ourVariable = 25
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to convert a value to a different type, make an explicit instance of the desired type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let age = 3

let myCatIs = "My cat is " + String(age)

print(myCatIs)

=&amp;gt; My cat is 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There’s an easier way to include an integer in a string. You put the value in parentheses, and then put a backslash before the parentheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let cats = 5

let dogs = 10

let catsAmount = "I have \(cats) cats."

let dogsAmount = "I have \(dogs) dogs."

let petsAmount = "I have \(cats + dogs) pets."

print(petsAmount)

=&amp;gt; I have 15 pets.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrays-and-dictionaries"&gt;
  &lt;/a&gt;
  Arrays and dictionaries
&lt;/h3&gt;

&lt;p&gt;You can create arrays and dictionaries using brackets. You access elements by putting the index or key in the brackets. Your array will grow automatically as you add new elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var groceryList = ["eggs", "yogurt", "cheese"]

groceryList[1] = "bread"

groceryList.append("coffee")

print(groceryList)

=&amp;gt; ["eggs", "bread", "cheese", "coffee"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-and-next-steps"&gt;
  &lt;/a&gt;
  Wrapping up and next steps
&lt;/h2&gt;

&lt;p&gt;Congrats on taking your first step with Swift! Swift is a general-purpose, open-source programming language mainly used for native iOS and macOS development. Many of the apps on the app store are written in Swift. Swift is growing in popularity, so it’s a good time to learn the language. We covered some of the basics today, but there’s still so much more to learn about Swift programming, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Property wrappers&lt;/li&gt;
&lt;li&gt;Constants&lt;/li&gt;
&lt;li&gt;SwiftUI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started learning these concepts and more, check out Educative’s course &lt;a href="https://www.educative.io/courses/swift-programming-mobile-app"&gt;&lt;strong&gt;Swift Programming for Mobile App Development&lt;/strong&gt;&lt;/a&gt;. In this hands-on course, you’ll cover topics ranging from arrays, dictionaries, integers, object-oriented programming, error handling, and more. By the end, you’ll have the foundational knowledge you need to begin diving deeper into Apple-based app development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continue-learning-about-app-development"&gt;
  &lt;/a&gt;
  Continue learning about app development
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/android-development-app-kotlin"&gt;How to develop your first Android app with Kotlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/java-vs-javascript"&gt;Java vs JavaScript: What’s the difference?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/build-modern-apps-progressive-web-apps"&gt;Build modern, offline apps with Progressive Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>ios</category>
      <category>development</category>
      <category>swift</category>
    </item>
    <item>
      <title>Check Out My Hubpages Profile</title>
      <author>Saleh-Mubashar</author>
      <pubDate>Wed, 27 Oct 2021 18:26:57 +0000</pubDate>
      <link>https://dev.to/salehmubashar/check-out-my-hubpages-profile-klp</link>
      <guid>https://dev.to/salehmubashar/check-out-my-hubpages-profile-klp</guid>
      <description>&lt;p&gt;Hi guys&lt;br&gt;
Along with publishing here, I also write articles at [Hubpages](&lt;a href="http://hubpages.com/_dev/user/new"&gt;http://hubpages.com/_dev/user/new&lt;/a&gt;.&lt;br&gt;
I would really appreciate if you follow me there.&lt;br&gt;
I will continue to post here too, but many useful articles will be posted over there too.&lt;br&gt;
This is my &lt;a href="https://hubpages.com/@salehmubashar"&gt;profile&lt;/a&gt;&lt;br&gt;
You can signup using the below link:&lt;br&gt;
&lt;a href="http://hubpages.com/_dev/user/new"&gt;SignUp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks you soooo much !&lt;br&gt;
Bye for now :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Java Notes #3</title>
      <author>DH Kim</author>
      <pubDate>Wed, 27 Oct 2021 18:19:33 +0000</pubDate>
      <link>https://dev.to/icncsx/java-notes-3-7ah</link>
      <guid>https://dev.to/icncsx/java-notes-3-7ah</guid>
      <description>&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java is a strongly typed language. You must declare the type of a variable, and variables must hold data of the correct type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To declare a variable is to declare the type of the variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To assign is to assign a value to a variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initialization is the assignment of a value to a variable at the time of declaration.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Reusable Parallax Effect With CSS Variables</title>
      <author>Sarmun Bustillo</author>
      <pubDate>Wed, 27 Oct 2021 18:07:42 +0000</pubDate>
      <link>https://dev.to/sarmunbustillo/reusable-parallax-effect-with-css-variables-79d</link>
      <guid>https://dev.to/sarmunbustillo/reusable-parallax-effect-with-css-variables-79d</guid>
      <description>&lt;p&gt;CSS variables offers us a very neat way to share information between CSS and JavaScript. The perk of connecting these two with CSS variables is that we can access them and modify them in CSS and in JS at any time.&lt;/p&gt;

&lt;p&gt;I am using the parallax effect as an example, but there are so many things this could be used for. The parallax effect in a nutshell is where the background of a website scrolls at a slower pace than the whatever is on foreground. Let's build a one, but one that can be easily extended. &lt;/p&gt;

&lt;p&gt;We will use this cards for our example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CT-yhnHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqrxx88gta16lk9tcang.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CT-yhnHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqrxx88gta16lk9tcang.png" alt="cards" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's first take care of the CSS part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.card {
    --translate-y: 0px;
    --translate-x: 0px;
    transform: translate(var(--translate-x), var(--translate-y));

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, we created two CSS variables for horizontal and vertical movement and we set them to our desired element. Let's move on to JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-function"&gt;
  &lt;/a&gt;
  Creating the function
&lt;/h3&gt;

&lt;p&gt;For our function we will need some parameters: &lt;strong&gt;the element&lt;/strong&gt;, &lt;strong&gt;the direction&lt;/strong&gt; to be translated, either horizontal or vertical, &lt;strong&gt;the speed&lt;/strong&gt;, and if the value to be translated is a &lt;strong&gt;negative number&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;parallax = (element, direction, speed, negative) =&amp;gt; {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The amount to be translated depends on how much the page has been scrolled. We can access this amount in the &lt;strong&gt;window's pageYOffset&lt;/strong&gt;, but to make it look smoother and slower we need to reduce this amount a bit and here is where our speed comes into play. It is also a good place to use our &lt;strong&gt;negative&lt;/strong&gt; parameter and decide whether it is a negative number or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let translate = window.pageYOffset * speed * (negative ? -1 : 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we only need to update our CSS variable to our desired direction and our computed amount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element.style.setProperty(`--translate-${direction}`, `${translate}px`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if we also want to use this function on more than one element at the same time?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;parallax = (element, direction , speed , negative) =&amp;gt; {
    let translate = window.pageYOffset * speed * (negative ? -1 : 1);

    if (element.length &amp;gt; 1) {
        element.forEach((el) =&amp;gt; {
            el.style.setProperty(`--translate-${direction}`, `${translate}px`);
        });
    } else {
        element.style.setProperty(`--translate-${direction}`, `${translate}px`);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly we only need to listen when the page gets scrolled and call our function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const firstCard = document.querySelector('.cards-parallax .card');
const lastCard = document.querySelector('.cards-parallax .card:last-of-type');
const cards = document.querySelectorAll('.cards-parallax .card');
window.addEventListener('scroll', () =&amp;gt; {
    parallax(firstCard,'y', 0.4, true);
    parallax(lastCard,'x', 0.5, false);
    parallax(cards,'x', 0.2, false);

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cool thing is that you could follow the same technique for many other properties like scale, rotate, opacity even colors and may more.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href="https://codepen.io/sarmunbustillo/pen/bGrRbRZ"&gt;Demo&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
