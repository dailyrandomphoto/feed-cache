<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Replacing Jira on-premises for QA testing purposes</title>
      <author>taniazhydkova</author>
      <pubDate>Thu, 25 Nov 2021 17:41:22 +0000</pubDate>
      <link>https://dev.to/taniazhydkova/replacing-jira-on-premises-for-qa-testing-purposes-4on5</link>
      <guid>https://dev.to/taniazhydkova/replacing-jira-on-premises-for-qa-testing-purposes-4on5</guid>
      <description>&lt;p&gt;&lt;strong&gt;Jira&lt;/strong&gt; is probably one of the most popular proprietary issue tracking systems. However, the news that Jira decided to &lt;strong&gt;withdraw their on-premise product&lt;/strong&gt; from the market, and discontinue product maintenance by 2024, has caused many businesses to look for different options with the same range of QA testing services on-premise functionality. &lt;/p&gt;

&lt;p&gt;Atlassian is determined to &lt;strong&gt;transfer all of its customers to the Cloud&lt;/strong&gt; in the near future. But if you are still considering migration from Atlassian server product to &lt;strong&gt;Data Center&lt;/strong&gt;, you might also want to consider the following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cost of the Data Center is much higher than the server product.&lt;/li&gt;
&lt;li&gt;Maintenance of the Data Center requires more effort – there are nodes behind a load balancer, not a single server instance.&lt;/li&gt;
&lt;li&gt;Atlassian will turn off new important functionalities as Jira’s Next-Gen Projects.&lt;/li&gt;
&lt;li&gt;Now minimum user tier for Data Center is 500 users (when for the Cloud version it is only 1-10 users), which is not cost-effective because of the number of plugins we will need to use for this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is why switching to a different software could be a more beneficial and cost-saving decision for QA teams. For some organizations, it might turn out to be advantageous.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-made-jira-essential-for-qa-testers"&gt;
  &lt;/a&gt;
  What made Jira essential for QA testers?
&lt;/h2&gt;

&lt;p&gt;Jira became a legend among agile QA testers because agile teams found its features perfect for work. Atlassian created Jira as a bug tracking and agile project management tool based on three essential concepts that also met QA testers’ needs – issue tracking, project progress, and workflow. Also, Jira allowed QA professionals to use the following attributes – summary, priority, due date, components, affected versions, fixed versions, and assignees, which made this software outstanding among other competitors.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#before-writing-this-article-we-decided-to-find-out-why-users-love-jira-so-much-and-compare-whether-aqua-alm-meets-the-same-needs-lets-see-%E2%80%8B%E2%80%8Bif-aqua-alm-can-compete-with-jira"&gt;
  &lt;/a&gt;
  Before writing this article, we decided to find out why users love Jira so much and compare whether aqua ALM meets the same needs. Let’s see ​​if aqua ALM can compete with Jira.
&lt;/h4&gt;

&lt;p&gt;We questioned the opinion of six QA testers from &lt;a href="https://qawerk.com/"&gt;QAwerk&lt;/a&gt; software testing agency on what they enjoy in Jira.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Alexandra Bondarenko, QA engineer:&lt;/strong&gt;&lt;br&gt;
“I appreciate Jira for the clear interface, easy management and switching between different projects and boards, very convenient searching. Also, in my opinion, one more advantage is that Jira is very flexible and user able to customize a lot of things.“&lt;/p&gt;

&lt;p&gt;aqua ALM also provides the possibility of better customization. It supports individual test planning, management, and automation with customized features.&lt;/p&gt;

&lt;p&gt;**2. Aliaksei Kalennikau, QA Automation Engineer: &lt;br&gt;
“A large number of settings and additional plugins allow you to customize Jira as you need it for your specific needs. Moreover, plugins such as Zephyr allow you to use this tool for bug tracking and test management. One more important pro is that Jira can be easily integrated with the most popular Code Management Tools and team messengers, which makes QA and all teams aware of the recent events and current statuses of the tasks.“&lt;/p&gt;

&lt;p&gt;QA testers love aqua ALM because it has bug tracking and test management by default. This saves your time on looking for plugins. aqua ALM also has several “built-in” existing integrations with external systems. Even if your system is not on the list you can hop on and connect it with the open REST API provided by aqua ALM. Another advantage of aqua ALM is a discussion thread feature that correlates with each item. This allows users the chance to collaborate and talk about potential updated features in this area.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Anonymously by a QAwerk Cyber Security Specialist:&lt;/strong&gt;&lt;br&gt;
“It’s mature and proven. It’s extremely customizable. Extensibility, including time tracking JIRA tool.”&lt;/p&gt;

&lt;p&gt;aqua ALM tracks every change, and their effects, which makes the process 86% more efficient. How does aqua ALM do it? aqua ALM uses “burning points” instead of a regular time tracking system. Use these points as a requirement. For example, you planned 8 points where one point is an hour and users can “burn” them to accomplish their goal and finish a task.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Polina Honcharko, QA Engineer:&lt;/strong&gt;&lt;br&gt;
“Jira provides linking, so you can check what issues are caused by or relate to yours; by that, you can get more details for investigation or generally what was developed/tested for certain projects. With the “Projects” tab, you can always check the board of your project and see what tickets are currently in progress or have “Done” status, etc. As there is an option to log time in tickets, each one of your team can check how long it takes to investigate.“&lt;/p&gt;

&lt;p&gt;Every step and change in aqua ALM is documented in each item’s history.  Additionally, you can configure a workflow for the process, and this will ensure that the defined steps will be completed. aqua ALM provides its users with integration to OTRS and also to other ticket systems over the REST API. You can create dependencies between different items and see how items are correlated. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.Anna Lukashenko, QA Engineer:&lt;/strong&gt;&lt;br&gt;
“For five years of work as a QA engineer, I had experience in building processes “with” and “without” Jira. And this experience made me definitely a fan of Jira. The main advantage of Jira is the visibility of the team’s employment as a whole, which allows you to plan the workload for the day and draw up an approximate work plan for the next day to provide updates to the manager. Planning is especially important when there are several projects at the same time. Also, important reasons why I chose Jira  are ease of use, user-friendly interface, logging of the time after completing each task, which allows you to control the time spent on performing every task.”&lt;/p&gt;

&lt;p&gt;aqua ALM is a master of structured, clear, and audit-proof test cases. Use UML diagrams for better management and execution of tests. Based on your requirements aqua ALM can automatically generate test cases. With aqua ALM you can start manual or automated test runs that combine multiple test tools and manage all results centrally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Valentin Havryliuk, QA Engineer:&lt;/strong&gt;&lt;br&gt;
“The essential advantage of Jira is an ability to provide concise and structured management tools for agile workflow such as planning, reporting, assigning and tracking.”&lt;/p&gt;

&lt;p&gt;With aqua ALM you can also create workflows and dependencies that are tied to your specific role and track the progress and status of your assignments. aqua ALM can also visualize the most complex connections in your data with very detailed reporting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#will-anything-be-better-than-jira-and-why"&gt;
  &lt;/a&gt;
  Will anything be better than Jira, and why?
&lt;/h2&gt;

&lt;p&gt;Despite all the advantages of Jira and being in favor of many QA testers, there are still some significant details we wish Jira had. Let’s start from the part where we understand that Jira’s software is not perfect. Here are some features that Jira on-premises misses, and you are most likely to profit from having them in your QA testing processes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weak-customization-and-bitter-interface"&gt;
  &lt;/a&gt;
  Weak customization and bitter interface
&lt;/h3&gt;

&lt;p&gt;Have you ever heard this joke, “if I were Dumbledore, I would’ve hidden the philosopher’s stone in Jira’s UI”? Jira may be way more complicated than it should be for QA teams with fast-changing environments. If you have ever dealt with the Jira dashboard, you probably know how overwhelming it can be to customize it for better issues and task tracking needs. Extra work and time on perfect customization can also cause you to waste money and, as a result, more expenses for the QA team. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-gantt-charts"&gt;
  &lt;/a&gt;
  No Gantt charts
&lt;/h3&gt;

&lt;p&gt;A Gantt chart is significant for your team workflow, which can also be an excellent timeline viewing tool throughout the entire QA testing process. But unfortunately for Jira, this tool is not included in the core version of Jira. Instead, you can find several add-ons providing this functionality for additional costs, available in the Atlassian Marketplace. Pricing for a reliable add-on like “Ganttpro” is about $8.90 per user and $15 if you are an individual. You will need to search and analyze many different add-ons, which can be very challenging, and still might result in wasted money.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-collaboration-tools"&gt;
  &lt;/a&gt;
  No collaboration tools
&lt;/h3&gt;

&lt;p&gt;Jira was created for project management and QA testing needs, but it still lacks collaboration tools. You may face some difficulties while working on a project as discussing current tasks and the entire workflow with coworkers. It is not a big problem when there are 3-5 test cases, but imagine if there are 150 of them and no way to see the logs of other testers under these cases. So eventually, you will need another add-on from the marketplace to communicate with other QA team members.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-to-jira-and-why-do-i-need-to-look-for-different-products"&gt;
  &lt;/a&gt;
  What happens to Jira, and why do I need to look for different products?
&lt;/h2&gt;

&lt;p&gt;Atlassian scheduled the changes of its products that will be made with a few steps. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first step already took place on February 2, 2021, which brought us to the fact that we cannot buy extra Server products now. Additionally, the price of installations for the Server and Data Center went up almost 15% from the previous quote.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A year later, only critical bug fixes will be delivered with Server releases, and upgrades or downgrades will be restricted. However, Server customers will still be able to purchase new app licenses until February 2023 and get maintenance until February 2024.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The most depressing part of these changes is scheduled for February 2, 2024 – the support will stop serving, and releasing bug fixes. Even though Atlassian, including the end-of-life days, will run on-premise Jira toolsets, those changes can cause security threats for businesses and other security-related issues.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jira’s on-premise toolset will offer Cloud migration to all its customers whether Atlassian offers a Data Center service that can be deployed on-premise.  Unfortunately, cloud versions do not suit such industries as finances, security, banking, government, etc. This means that all these companies have to find tools that are compatible with their current software. If you happen to work for one of such companies that can’t move to the Cloud, you should consider using other services and products.&lt;/p&gt;

&lt;p&gt;Another obstacle that we can possibly overcome on the way to our dream product, is overpricing. The companies with almost the same range of tools, on-premises versions, and similar user rates, also have a massive price gap. Here are three companies that provide all the features that Jira misses, and their rating is pretty high among users and experienced QA testers. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aqua ALM&lt;/strong&gt; has all the features that Jira misses. There is exact and well-detailed reporting, a comprehensive list of integration with different softwares, collaboration features, and many other distinguishing options for QA teams including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Administrator Level Control&lt;/li&gt;
&lt;li&gt;Change Management&lt;/li&gt;
&lt;li&gt;Collaboration Tools&lt;/li&gt;
&lt;li&gt;Defect Tracking&lt;/li&gt;
&lt;li&gt;Iteration Management&lt;/li&gt;
&lt;li&gt;Prioritization&lt;/li&gt;
&lt;li&gt;Project Management&lt;/li&gt;
&lt;li&gt;Release Management&lt;/li&gt;
&lt;li&gt;Reporting/Analytics&lt;/li&gt;
&lt;li&gt;Requirements Review&lt;/li&gt;
&lt;li&gt;Stakeholder Defined Attributes&lt;/li&gt;
&lt;li&gt;Status Tracking&lt;/li&gt;
&lt;li&gt;Task Management&lt;/li&gt;
&lt;li&gt;Test Case Tracking&lt;/li&gt;
&lt;li&gt;User Level Management&lt;/li&gt;
&lt;li&gt;Gantt charts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pricing is represented with three different plans of €29, €69 and €99 per month in a Cloud version, and €690, €1390, and €1990 in an on-premise version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aqua’s rating is 4.7&lt;/strong&gt; based on Capterra. Here’s what people are saying about it: &lt;/p&gt;

&lt;p&gt;&lt;em&gt;“We looked for a test management tool without excessive infrastructure set up but with all features which are needed for every day’s testing. Crowd testing is also an option since aqua ALM can be made accessible for externals as well. Selenium integration is also possible within the web client, windows must be underlaying for this, because PowerShell scripts control the interface to it.” by Roland B.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Xqual&lt;/strong&gt; is already well-known among QA testers, but it seems, based on their website overview, they don’t provide any collaboration features. They have integrations with third-party softwares, and they are available in an on-premise version.  However, not all users are satisfied with its organizing systems, and this software is not affordable for mid-size companies. Here are some of the main features of Xqual:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Administrator Level Control&lt;/li&gt;
&lt;li&gt;Project Management&lt;/li&gt;
&lt;li&gt;Task Management&lt;/li&gt;
&lt;li&gt;User Level Management&lt;/li&gt;
&lt;li&gt;Version Control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is also represented with prices from $200/yr per user to $400\yr per user. The annual on-premise version will cost you $400/user/year and up to $12.5K/year per 100 users. Or you can also choose the plan “Universal” for $17K.&lt;/p&gt;

&lt;p&gt;Xqual is not rated by users on Capterra. Though, we found a couple of features that users dislike on another reviews website G2:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“…There were some good features of IBM Rational test manager and the way we organized our tests that we got too used to. It took a slight tuning for Xstudio to fit into our specific scenario. While not bad at all, XStudio can continue to try to adapt to a very lightweight easy to use and change method of organizing test cases in folders, and associating them with builds or sprints. The specifications of what is optimal are difficult to gather as every team has its own needs. So coming up with a solution that can fit all is extremely difficult but still because you asked for what can be improved I am telling this” by Anonymous.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“ There were some acceptable highlights of IBM Rational test director and the manner in which we composed our tests that we got excessively used to. It took a slight tuning for X studio to fit into our particular situation. While not awful by any means, X Studio can keep on attempting to adjust to an exceptionally light weight simple to utilize and change strategy for sorting out experiments in organizers, and partner them with constructs or runs. The details of what is ideal are troublesome o assemble as each group has its own needs. So thinking of an answer that can fit everything is incredibly troublesome yet at the same time since you requested what can be improved I am telling this” by Rebecca’sée M.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Graphics on program are a little old school compared to other programs we’ve used.” by Anonymous.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TestRail&lt;/strong&gt; is considered one of the most popular QA testing softwares.  Even though some users prefer to switch from TestRail to other softwares, as soon as they find something more efficient,  it is a very comprehensive software with collaboration features and a controlling permission system. But they still lack such significant QA tester features as built-in requirements and a bug tracker. As it claims, their main features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Access Controls/Permissions&lt;/li&gt;
&lt;li&gt;Collaboration Tools&lt;/li&gt;
&lt;li&gt;Historical Reporting&lt;/li&gt;
&lt;li&gt;Move &amp;amp; Copy&lt;/li&gt;
&lt;li&gt;Parameterized Testing&lt;/li&gt;
&lt;li&gt;Reporting/Analytics&lt;/li&gt;
&lt;li&gt;Requirements-Based Testing&lt;/li&gt;
&lt;li&gt;Software Development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pricing is represented on their website with two numbers – $36/mo per user of Cloud version and $370/year per user on-premise, and &lt;strong&gt;TestRail’s rating, according to Capterra reviews, is 4.4:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“We believe that TestRail is basic like any other test case management system, features are fairly generic, workflows are fairly dated. However, UI is good, probably due to the app being basic. We use it because teams have already comfortable with it, but by no means is this a tool that can solve new development methodologies such as continuous integration test management. If you understand the tools limitations, then it may work for you, but we find it to be lacking and at this stage have stopped integrating our CI test runs into the tool.” by Tony W.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some of them don’t provide a broad spectrum of essential tools such as collaboration features or detailed reporting. Just remember that the cheapest ones don’t usually meet the user’s basic requirements. &lt;/p&gt;

&lt;p&gt;Switching from Jira on-premises is pretty easy today. Most companies can ensure that there is no risk of data loss while moving your data from other projects. This is because Jira can be easily integrated with other software solutions including the companies we mentioned above, and therefore migration will be smooth. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-steps-do-we-need-to-take-in-order-to-make-it-happen-and-profit-from-replacing-jira"&gt;
  &lt;/a&gt;
  So what steps do we need to take in order to make it happen and profit from replacing Jira?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Explore which Atlassian changes will be significant and what they mean for your team. &lt;/li&gt;
&lt;li&gt;Determine if the Data Center service is suitable for your business or not. Identify if there is an actual need to switch to other on-premise products. Go through your QA team’s requirements to determine a product to switch to.&lt;/li&gt;
&lt;li&gt;Explore the equivalencies and advantages of several softwares (for example, aqua ALM to Jira – price VS extra features).&lt;/li&gt;
&lt;li&gt;Discuss with your team all possible migration paths to other products.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Replacing Jira with other QA testing software solutions can take quite a long period of time, especially if it is an on-premise version. We all know what to expect from Atlassian in the future. At least we have almost two and half years to get ready for saying Bye-bye to old Jira. Switching to a new solution is hard, but the good thing about this is that it can significantly improve the quality of your QA testing, and it will allow teams to concentrate on better processes while keeping the bigger picture in mind.&lt;/p&gt;

</description>
      <category>jira</category>
      <category>testing</category>
      <category>qa</category>
      <category>testdev</category>
    </item>
    <item>
      <title>Blob Generator using JavaScript</title>
      <author>Rohit Sharma</author>
      <pubDate>Thu, 25 Nov 2021 16:37:32 +0000</pubDate>
      <link>https://dev.to/devrohit0/blob-generator-using-javascript-177h</link>
      <guid>https://dev.to/devrohit0/blob-generator-using-javascript-177h</guid>
      <description>&lt;p&gt;I created Blob Generator using HTML,CSS and JavaScript. So, let's see the code part.&lt;/p&gt;

&lt;p&gt;HTML:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class="wrapper"&amp;gt;
        &amp;lt;div class="output"&amp;gt;
            &amp;lt;div id="blob"&amp;gt;

            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id="hgt"&amp;gt;
            &amp;lt;label for="blob-height"&amp;gt;
                Height
            &amp;lt;/label&amp;gt;
            &amp;lt;input type="number" id="blob-height" value="200"&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div id="wdth"&amp;gt;
            &amp;lt;label for="blob-width"&amp;gt;
                Width
            &amp;lt;/label&amp;gt;
            &amp;lt;input type="number" id="blob-width" value="200"&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="sliders"&amp;gt;
            &amp;lt;input type="range" value="30"&amp;gt;
            &amp;lt;input type="range" value="80"&amp;gt;
            &amp;lt;input type="range" value="60"&amp;gt;
            &amp;lt;input type="range" value="40"&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;input type="text" id="css-code" readonly&amp;gt;
        &amp;lt;button id="copy"&amp;gt;Copy&amp;lt;/button&amp;gt;

    &amp;lt;/div&amp;gt;
    &amp;lt;script src="main.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS:-&lt;br&gt;
CSS part is so simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}
body{
    background-color: #008dff;
}
.wrapper{
    border: 1px solid black;
    background-color: #ffffff;
    width: 45%;
    min-width: 550px;
    padding: 30px;
    position: absolute;
    transform: translate(-50%,-50%);
    top: 50%;
    left: 50%;
    border-radius: 8px;

}
.output{
    background-color: #eef3f8;
    width: 100%;
    min-height: 250px;
    padding: 20px 0;
    overflow: hidden;
    border-radius: 5px;
    position: relative;
    display: grid;
    place-items: center;
}
#blob{
    height: 300px;
    width: 300px;
    background: linear-gradient(
        #44a2f0,
        #025eaa
    );
    box-shadow: 15px 20px 30px rgba(0, 0, 0, 0.15);

}
label{
    font-weight: 500;

}

input[type=number]{
    height: 40px;
    width: 80px;
    padding: 10px;
    margin-top: 5px;
    border: 1px solid #a0a0b0;
    border-radius: 3px;
}
input[type=number]:focus{
    background-color: #f1f5fa;
    border-color: #025eaa;
    color: #025eaa;
}
#hgt,#wdth{
    display: flex;
    justify-content: space-around;
}
.sliders{
    width: 100%;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-gap: 20px;
}
input[type=text]{
    width: 82%;
    margin-top: 50px;
    padding: 10px;
    font-size: 12px;
    border: none;
    background-color: #f1eff9;
    border-radius: 3px;
}
#button{
    width: 12%;
    margin-left: 4%;
    padding: 10px 0;
    background-color: #0075ff;
    border: none;
    cursor: pointer;
    color: #ffffff;
    border-radius: 3px;
    font-size: 12px;

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript:-&lt;br&gt;
This is the most important part.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---yU71CDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33ci0bg5wxefv6dw2aiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---yU71CDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33ci0bg5wxefv6dw2aiw.png" alt="JavaScript" width="880" height="1118"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you loved it ♥ . &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Make your website stand out with a custom scrollbar 🌟</title>
      <author>Estee Tey</author>
      <pubDate>Thu, 25 Nov 2021 16:36:56 +0000</pubDate>
      <link>https://dev.to/lyqht/make-your-website-stand-out-with-a-custom-scrollbar-76m</link>
      <guid>https://dev.to/lyqht/make-your-website-stand-out-with-a-custom-scrollbar-76m</guid>
      <description>&lt;p&gt;The scrollbar is easily one of the most neglected UI components out there that are not leveraged by many websites to enhance their users' experience. By default, on all HTML, when the content of the website exceeds the viewport height, a scrollbar will automatically appear on the right, just like the one you're seeing as you read this article now.&lt;/p&gt;

&lt;p&gt;The default scrollbar looks decent, but &lt;strong&gt;it can be better&lt;/strong&gt;. Let's take a reference from the experts. Here's an example of a unique scrollbar found on &lt;a href="https://css-tricks.com/"&gt;CSSTricks.com&lt;/a&gt;. Put your eyes to the right of the GIF! 👀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIGme7wv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637475913512/FUgV5lQu_.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIGme7wv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637475913512/FUgV5lQu_.gif" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1637475913512/FUgV5lQu_.gif" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This scrollbar fits in with the dark theme of the website much more than the default scrollbar. It also has a little bevel feel to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-recreate-the-css-tricks-scrollbar"&gt;
  &lt;/a&gt;
  How to re-create the CSS Tricks Scrollbar
&lt;/h2&gt;

&lt;p&gt;As I've taught my previous readers before, you can &lt;a href="https://esteetey.dev/navigate-the-frontend-easily-with-the-inspector"&gt;navigate the frontend simply by using the Browser Inspector&lt;/a&gt;. So let's do that!&lt;/p&gt;

&lt;p&gt;Here are the steps for inspecting the scrollbar:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inspect the &lt;code&gt;&amp;lt;html /&amp;gt;&lt;/code&gt; element directly. This is because there's no &lt;code&gt;&amp;lt;scrollbar /&amp;gt;&lt;/code&gt; tag. The scrollbar is not a specific HTML element.&lt;/li&gt;
&lt;li&gt;To find how the scrollbar is styled, filter for 'scrollbar' in the styles tab.&lt;/li&gt;
&lt;li&gt;You will see a few pseudo-elements that are used to style the scrollbar.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's a preview of how your inspector will look like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mBFTso0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637476690450/IqzCgdqwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mBFTso0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637476690450/IqzCgdqwz.png" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1637476690450/IqzCgdqwz.png" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the style tab, these are the relevant rules that you can find for styling the scrollbar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#434343&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="n"&gt;hsla&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-2px&lt;/span&gt; &lt;span class="m"&gt;-2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar-track&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#434343&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#434343&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#111&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I simply copy these styles over and use it for a very long HTML page, the scrollbar will look as it is in CSSTricks!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lyqht/embed/abyxNmL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now that we know the  &lt;a href="https://esteetey.dev/primer-css-pseudo-elements-and-pseudo-classes"&gt;pseudo-elements&lt;/a&gt; do work, let's understand &lt;strong&gt;how they work&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-style-a-scrollbar"&gt;
  &lt;/a&gt;
  How to style a scrollbar
&lt;/h2&gt;

&lt;p&gt;For the CSS Tricks Scrollbar, there were &lt;strong&gt;3 pseudo-elements&lt;/strong&gt; used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;::-webkit-scrollbar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::-webkit-scrollbar-thumb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::-webkit-scrollbar-track&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's a simple diagram to depict those 3 parts of the scrollbar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X45mVgkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637505909053/PBfovy_H9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X45mVgkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637505909053/PBfovy_H9.jpeg" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1637505909053/PBfovy_H9.jpeg" width="411" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to these 3 pseudo-elements, there are 4 other parts of the scrollbar that you can consider styling. According to  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar"&gt;MDN Web Docs&lt;/a&gt; , these are the &lt;strong&gt;7 pseudo-elements&lt;/strong&gt; that you can utilize to style your scrollbar.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;::-webkit-scrollbar&lt;/code&gt; — the entire scrollbar.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;::-webkit-scrollbar-thumb&lt;/code&gt; — the draggable scrolling handle.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;::-webkit-scrollbar-track&lt;/code&gt; — the track (progress bar) of the scrollbar, where there is a gray bar on top of a white bar.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;::-webkit-scrollbar-button&lt;/code&gt; — the buttons on the scrollbar (arrows pointing upwards and downwards that scroll one line at a time).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;::-webkit-scrollbar-track-piece&lt;/code&gt; — the part of the track (progress bar) not covered by the handle.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;::-webkit-scrollbar-corner&lt;/code&gt; — the bottom corner of the scrollbar, where both horizontal and vertical scrollbars meet This is often the bottom-right corner of the browser window.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;::-webkit-resizer&lt;/code&gt; — the draggable resizing handle that appears at the bottom corner of some elements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of these descriptions may be a little hard to visualize. So here's a diagram to help you with that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FuQnkNwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637841466109/-R2xLNyGy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FuQnkNwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637841466109/-R2xLNyGy.jpeg" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1637841466109/-R2xLNyGy.jpeg" width="880" height="776"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a gentle introduction to how some of these pseudo-elements can be used, I have created a scrollbar playground for you to create a simple custom scrollbar and export its CSS. Take some time to play around with the settings to deduce how the pseudo-elements work✨&lt;/p&gt;

&lt;p&gt;👉 Visit the playground in full page view &lt;a href="https://lyqht.github.io/scrollbar-playground"&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Important Tip in using Scrollbar Playground&lt;/p&gt;

&lt;p&gt;Clicking the export to CSS button will copy the element's styles to your clipboard. Afterwards, you can open up an empty codepen and just paste the styles directly to the CSS tab to see the magic. &lt;strong&gt;Remember to set the height of the body element to a very big value&lt;/strong&gt; like &lt;code&gt;height: 3000px;&lt;/code&gt; so that there is content overflow for a scrollbar to appear.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#observations"&gt;
  &lt;/a&gt;
  Observations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-width-of-the-scrollbar"&gt;
  &lt;/a&gt;
  1. Width of the scrollbar
&lt;/h3&gt;

&lt;p&gt;When you change...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scrollbar Height -&amp;gt; the width of the &lt;strong&gt;vertical&lt;/strong&gt; scrollbar changes.&lt;/li&gt;
&lt;li&gt;Scrollbar Width -&amp;gt; the width of the &lt;strong&gt;horizontal&lt;/strong&gt; scrollbar changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6FJHLNSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637842383087/OFe4cX3BS.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6FJHLNSd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637842383087/OFe4cX3BS.gif" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1637842383087/OFe4cX3BS.gif" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The style is applied at the following pseudo-element selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#fake-window&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-scrollbar-buttons"&gt;
  &lt;/a&gt;
  2. Scrollbar Buttons
&lt;/h3&gt;

&lt;p&gt;In the playground, you can choose to hide or show them. If you show them, you can choose to show 1 or 2 buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdEgIL5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637843269929/fYG5Qjvfz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdEgIL5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637843269929/fYG5Qjvfz.gif" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1637843269929/fYG5Qjvfz.gif" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although it is much more common to see scrollbar with just the single arrow buttons on both ends of the scrollbar since that's the native behavior, if you apply styles to just the &lt;code&gt;::--webkit-scrollbar-button&lt;/code&gt; element itself, you will see 2 buttons on each side.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This behavior may differ depending on the Chromium version of your browser, and also the element you apply the style to. For example, if you apply the same style on codepen, you don't see the double button, but if you apply it to a simple html page and open it up on your local machine, you will see the double button, like what you see on the playground when you choose the 2 button option.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To enforce that the scrollbar only shows one button on each side, the following style needs to be applied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;::-webkit-scrollbar-button:vertical:start:increment&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nd"&gt;::-webkit-scrollbar-button:vertical:end:decrement&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nd"&gt;::-webkit-scrollbar-button:horizontal:start:increment&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nd"&gt;::-webkit-scrollbar-button:horizontal:end:decrement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-coloring-parts-of-the-scrollbar"&gt;
  &lt;/a&gt;
  3. Coloring parts of the scrollbar
&lt;/h3&gt;

&lt;p&gt;Most of the scrollbar parts can be colored individually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xlXV3PX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637843698246/lw6_sPHrM.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xlXV3PX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637843698246/lw6_sPHrM.gif" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1637843698246/lw6_sPHrM.gif" width="880" height="437"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#fake-window&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--scrollbar-thumb-color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#3B82F6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#fake-window&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar-track&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--scrollbar-track-color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#A1A1AA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#fake-window&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--scrollbar-button-color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#3F3F46&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#fake-window&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar-corner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--scrollbar-corner-color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#FFFFFF&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#exploring-further"&gt;
  &lt;/a&gt;
  Exploring further
&lt;/h2&gt;

&lt;p&gt;Now that you have some basics of setting css properties in terms of sizes and colors for the scrollbar pseudo-elements, consider special scrollbars like this too! ✨&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;Here's a very simple example that I made which only has a horizontal scrollbar, but the thumb is an animating cat! 😸 The icon is taken from &lt;a href="https://github.com/Gowee/nyancat-svg"&gt;Gowee's nyan cat SVG on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lyqht/embed/JjygYjr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Another note-worthy scrollbar to be mentioned is the scrollbar on &lt;a href="https://www.swyx.io/react-sfcs-here/"&gt;Shawn's portfolio&lt;/a&gt;. Eyes to the right 👀 It is a candy stick moving on a heart palette track and it feels super delightful to look at it! Literal eye candy😋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSTptdB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637310977859/xUqav5j6g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSTptdB8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637310977859/xUqav5j6g.gif" alt="https://cdn.hashnode.com/res/hashnode/image/upload/v1637310977859/xUqav5j6g.gif" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://webkit.org/blog/363/styling-scrollbars/"&gt;The original Webkit's article on styling scrollbars&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;This article talks about even more selectors that you can utilize to style your scrollbar, although they are rarely used&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://css-tricks.com/the-current-state-of-styling-scrollbars/"&gt;CSS Tricks' article on styling scrollbars&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Great tons of modern looking examples here!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#libraries-for-adding-a-custom-scrollbar"&gt;
  &lt;/a&gt;
  Libraries for adding a Custom Scrollbar
&lt;/h2&gt;

&lt;p&gt;Of course, if you're lazy and prefer a fast and pre-made solution, here are 3 public packages that I've found which you can choose to add into your project. The way they implemented them is different, so do check out their docs to see which you prefer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/idiotWu/smooth-scrollbar"&gt;Smooth Scrollbar&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A simple customizable, performant Javascript plugin solution&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/KingSora/OverlayScrollbars"&gt;Overlay Scrollbars&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;comes with themes and framework wrappers for Angular, React and Vue&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mdbootstrap/perfect-scrollbar"&gt;Perfect Scrollbar&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;made by the Material Bootstrap team&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#bonus-hiding-the-scrollbar-ui"&gt;
  &lt;/a&gt;
  Bonus: Hiding the scrollbar UI
&lt;/h2&gt;

&lt;p&gt;Although this article is about making your website stand out with a custom scrollbar, if for any reason you hate having to see a scrollbar UI take up visual space on your website,  or you want your website to be look alike on both desktop and mobile (websites do not show scrollbars by default on mobile browsers), you can simply set the &lt;code&gt;display: none&lt;/code&gt; to the pseudo-element&lt;code&gt;::-webkit-scrollbar&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;html::-webkit-scrollbar {
  display: none;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will still be able to scroll on a webpage, just that you can't see the scrollbar UI. For most use cases, I do not recommend you to disable the scrolling entirely 😆&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-a-wrap-folks"&gt;
  &lt;/a&gt;
  That's a wrap folks! 🎉
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qeev9EmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/eoM1uCVuXtkAAAAM/yay-excited.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeev9EmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/eoM1uCVuXtkAAAAM/yay-excited.gif" alt="https://c.tenor.com/eoM1uCVuXtkAAAAM/yay-excited.gif" width="220" height="124"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading, hope you enjoyed the article! If you have tried out the Scrollbar Playground and created a scrollbar that you like, do share a screenshot below! 😊&lt;/p&gt;

&lt;p&gt;If you find the article awesome, hit the &lt;em&gt;reactions&lt;/em&gt; 🧡 and &lt;em&gt;share&lt;/em&gt; it 🐦~&lt;/p&gt;

&lt;p&gt;To stay updated whenever I post new stuff, follow me on &lt;a href="https://twitter.com/estee_tey"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
      <category>codepen</category>
    </item>
    <item>
      <title>QRCode with JavaScript</title>
      <author>Walter Nascimento</author>
      <pubDate>Thu, 25 Nov 2021 16:33:25 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/qrcode-with-javascript-3eon</link>
      <guid>https://dev.to/walternascimentobarroso/qrcode-with-javascript-3eon</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/qrcode-com-javascript-9ff435f8879c"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, we use QRCode for everything, and it makes it very easy for us to share small information, so we are now going to use a js lib, to show how simple and easy it is to create a QRCode with javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;First let’s create the interface, we’ll do something simple, using just HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Gerar QRcode&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"width"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"256"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"height"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"256"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"dark"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"light"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"#ffffff"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"generate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Gerar&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"download"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display: none;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"qrcode"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/davidshimjs-qrcodejs@0.0.2/qrcode.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this first part, we have data entries such as height, width and colors, we also have a button to download our QRCode a div that will display the qrcode and finally we have the script tag that loads the davidshimjs library today there are already several libraries, but this is the one that I found the simplest to demonstrate the use, but you can use the library that you like best.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qrcodeEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#qrcode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;generateEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#generate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;widthEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#width&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heightEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#height&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;darkEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;downloadEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#download&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;generateEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;qrcodeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QRCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qrcodeEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;textEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;widthEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;heightEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;colorDark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;darkEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;colorLight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lightEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;download&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;download&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvasEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrcodeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvasEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;downloadEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;href&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;downloadEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qrcode.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;downloadEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inline-block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our javascript code. first we take all screen elements (height, width, colors, etc) and then we add the &lt;strong&gt;click&lt;/strong&gt; event to our &lt;strong&gt;Gerar&lt;/strong&gt; button and call the &lt;strong&gt;generate&lt;/strong&gt; function&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;generate&lt;/strong&gt; function we first take the element where the qrcode is and we make &lt;code&gt;qrcodeEl.innerHTML = ` `;&lt;/code&gt; that way whenever we generate a new qrcode the old one will be removed from the screen. then we instantiate the &lt;strong&gt;QRCode&lt;/strong&gt; passing all the necessary parameters (height, width, colors, etc.) and finally we call the &lt;strong&gt;download&lt;/strong&gt; function&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;download&lt;/strong&gt; function we look for the canvas element that is generated by the &lt;strong&gt;QRCode&lt;/strong&gt; library and inside it we get the data (image). with that we add the value captured in the download link and define the &lt;strong&gt;download&lt;/strong&gt; attribute and change the style so that it is displayed on the screen.&lt;/p&gt;

&lt;p&gt;Now whenever a new &lt;strong&gt;QRCode&lt;/strong&gt; is generated the download link will be displayed so that you can download the qrcode as an image&lt;/p&gt;

&lt;p&gt;ready simple like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;See below for the complete working project.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/WalterNascimento/embed/zYNPNLe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;if you can't see it &lt;a href="https://codepen.io/WalterNascimento/pen/zYNPNLe"&gt;click here&lt;/a&gt; and see the final result&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch it, see the development on youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-1Q_VBkZa6w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you later! 😊😊&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support Me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCXm0xRtDRrdnvkW24WmkBqA"&gt;Youtube - WalterNascimentoBarroso&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/walternascimentobarroso"&gt;Github - WalterNascimentoBarroso&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codepen.io"&gt;Codepen - WalterNascimentoBarroso&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>qrcode</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How To Create a Simple Bot on Discord</title>
      <author>Jodie E</author>
      <pubDate>Thu, 25 Nov 2021 16:16:53 +0000</pubDate>
      <link>https://dev.to/jodiee/how-to-create-a-simple-bot-on-discord-4l11</link>
      <guid>https://dev.to/jodiee/how-to-create-a-simple-bot-on-discord-4l11</guid>
      <description>&lt;p&gt;This tutorial will show you how to set up a simple bot using webhooks on a Discord channel. The bot will post a message to a channel. I recommend setting up your own personal server for testing purposes, before you unleash it on the world.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-bot-on-discord"&gt;
  &lt;/a&gt;
  CREATE A BOT ON DISCORD
&lt;/h2&gt;

&lt;p&gt;Follow this &lt;a href="https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks"&gt;how-to and intro to webhooks&lt;/a&gt;, to the point where you get the webhook URL. You can give it a fun name and avatar. Have the webhook URL handy, so you can use it later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do not do &lt;em&gt;Quick Example: GitHub Webhook Integration&lt;/em&gt;, it is not part of this tutorial&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HxVteoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dndhxw7ei/image/upload/v1637698051/blog/discordbot/Untitled_d0rsmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HxVteoW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dndhxw7ei/image/upload/v1637698051/blog/discordbot/Untitled_d0rsmw.png" alt='Discord "Copy webhook URL" button' width="576" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your bot is ready and waiting for input!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-bot"&gt;
  &lt;/a&gt;
  SET UP THE BOT
&lt;/h2&gt;

&lt;p&gt;Make sure you have Node.js installed on your computer so you can run your script in the terminal. You can check if it's installed by checking the version number in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't have node, you can get it &lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;sendmessage.js&lt;/code&gt; file with a console.log function for testing in the terminal. We'll build on this function as we go forward.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sendmessage.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run file by executing &lt;code&gt;node sendmessage.js&lt;/code&gt; in the terminal. This should print "Hello" on the next line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node sendmessage.js
Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Your code is working and node is properly installed. Now you'll want to get the project started.&lt;/p&gt;

&lt;p&gt;Initialize your project using &lt;strong&gt;yarn&lt;/strong&gt; or &lt;strong&gt;npm&lt;/strong&gt;. They work similarly, but we'll be using &lt;strong&gt;npm&lt;/strong&gt; for this tutorial, because it comes bundled with node. Start it up by keying the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a package.json file. That's the library 'ingredient list' for your program. It keeps track of rules and dependencies that people will use to run your pgoram.&lt;/p&gt;

&lt;p&gt;You will be prompted to fill in various fields at this point. Unless you want to link it to github or customize with your information, you can accept the defaults (i.e. press 'Enter/return' for each). This basic tutorial doesn't cover any of this, so we are accepting the defaults.&lt;/p&gt;

&lt;p&gt;Now you'll want to get &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt;, so you can simplify sending HTTP requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! Now you have your ingredient list and ingredients. We are ready to put things together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-your-bot-talk"&gt;
  &lt;/a&gt;
  MAKE YOUR BOT TALK
&lt;/h2&gt;

&lt;p&gt;We will be making an HTTP POST to our webhook URL. First, import axios at the top of your .js file. This links the axios library to your program, so you can use all of the perks you installed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure this is the first line of your code.&lt;/p&gt;

&lt;p&gt;Next, create a couple of variables to hold the data you are sending. Discord requires an object with a content key, which is why we've got the text written in &lt;code&gt;{key:value}&lt;/code&gt; format. If you tried to send it as a &lt;code&gt;string&lt;/code&gt;, it would be interpreted as an empty message. When your program runs, you wouldn't get an error, but your bot also would not post a message.&lt;/p&gt;

&lt;p&gt;To make this code resuable, we will add the text in a command line argument, using &lt;a href="https://nodejs.org/en/knowledge/command-line/how-to-parse-command-line-arguments/"&gt;Command Line Interface&lt;/a&gt; (CLI). It allows you to send a string when you run the program, instead of hardcoding it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This will pull the entry in the 3rd place on your array.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commandLineText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// This object is needed because that is how Discord receives the information to post.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;commandLineText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to your &lt;code&gt;sendMessage&lt;/code&gt; function. Remove the console.log you had previously and replace it with this axios call. The comments will explain what each section does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;
    &lt;span class="c1"&gt;// This takes care of your HTTP POST. It needs two arguments.&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// The webhook URL as a string&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Paste Your Discord Webhook URL Here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// The variable that contains the object you are sending&lt;/span&gt;
    &lt;span class="nx"&gt;messageData&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// axios is a promised-based .js library, so it has .then and .catch&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// This has been added so you can see all arguments being sent. It's not required&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Save your file and get ready. Your code should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;commandLineText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;commandLineText&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://just-a-placeholder-for-your-webhook-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;messageData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-your-bot"&gt;
  &lt;/a&gt;
  RUN YOUR BOT!
&lt;/h2&gt;

&lt;p&gt;Open the Discord channel where your bot lives.&lt;/p&gt;

&lt;p&gt;Go to your terminal and make sure you are in the folder that holds your code.&lt;br&gt;
Type &lt;code&gt;node sendmessage.js "Hello!"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Peek over at your Discord channel. If all is well, you should see your bot pop up and say hi!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node sendmessage.js &lt;span class="s2"&gt;"Hello!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZus4SF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dndhxw7ei/image/upload/v1637638023/blog/discordbot/captain_hook_hello_k3tyqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZus4SF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dndhxw7ei/image/upload/v1637638023/blog/discordbot/captain_hook_hello_k3tyqv.png" alt="Your Bot in Discord gives a friendly Hello!" width="374" height="67"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the code also interprets the bash command as an array, it will print the string in the 3rd position, regardless of its size. You can sent it whatever text you'd like, as long as it is all part of the same string. Give it a try!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node sendmessage.js &lt;span class="s2"&gt;"What Lovely Weather We Be Havin'!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ECSGuSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dndhxw7ei/image/upload/v1637638023/blog/discordbot/captain_hook_weather_oezrir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ECSGuSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dndhxw7ei/image/upload/v1637638023/blog/discordbot/captain_hook_weather_oezrir.png" alt="Discord Bot comments on the weather" width="354" height="65"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Way to go! Now you can set up a bot on another channel and share have some fun with friends, as long as you have the right permissions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;**Note:&lt;/em&gt;* If you'd like, you can add more to the array, but you'll have to adjust &lt;code&gt;process.argv[2]&lt;/code&gt; in &lt;code&gt;commandLineText&lt;/code&gt; to modify your argument display*&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  SUMMARY
&lt;/h2&gt;

&lt;p&gt;Today we learned how to set up a basic bot using webhooks on Discord. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for checking out my tutorial!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>32" Curved Monitor Recommendations?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Thu, 25 Nov 2021 16:08:40 +0000</pubDate>
      <link>https://dev.to/nickytonline/32-curved-monitor-recommendations-1ahp</link>
      <guid>https://dev.to/nickytonline/32-curved-monitor-recommendations-1ahp</guid>
      <description>&lt;p&gt;I'm looking to buy a 32" curved monitor for Black Friday/Cyber Monday. I dropped the question on Twitter as well, but maybe folks will chime in here as well.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--P11PQVAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1152392593042485249/M7M0YZ4j_normal.jpg" alt="Nick Taylor (he/him) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nick Taylor (he/him)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm looking to buy a 32" curved monitor for Black Friday/Cyber Monday. I've found some, but I'm curious if folks have recommendations?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:44 PM - 25 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1463896482013188103" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1463896482013188103" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1463896482013188103" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I've found some, but I'm curious if folks have recommendations?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0NwPdduX7IL1rS1i/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0NwPdduX7IL1rS1i/giphy.gif" alt="A Commodore 64 with a sphere rotating on the screen" width="500" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>hardware</category>
      <category>monitors</category>
    </item>
    <item>
      <title>next-export-i18n v1.2.1: i18n with Next.js and Mustache</title>
      <author>martin krause</author>
      <pubDate>Thu, 25 Nov 2021 15:58:23 +0000</pubDate>
      <link>https://dev.to/martinkr/next-export-i18n-v121-i18n-with-nextjs-and-mustache-4fac</link>
      <guid>https://dev.to/martinkr/next-export-i18n-v121-i18n-with-nextjs-and-mustache-4fac</guid>
      <description>&lt;p&gt;Today I released &lt;code&gt;version 1.2.1&lt;/code&gt; of &lt;code&gt;next-export-i18n&lt;/code&gt;, the i18n module for Next.js which is fully compatible with &lt;code&gt;next export&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Install &lt;code&gt;next-export-i18n&lt;/code&gt; with &lt;code&gt;$ npm i next-export-i18n&lt;/code&gt; or visit &lt;a href="https://www.npmjs.com/package/next-export-i18n"&gt;&lt;code&gt;next-export-i18n&lt;/code&gt; v1.2.1&lt;/a&gt; from npm.js.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#new-feature-dynamic-translations-mustache"&gt;
  &lt;/a&gt;
  New feature: Dynamic translations + Mustache
&lt;/h2&gt;

&lt;p&gt;Starting with Version 1.2.1, you can now define &lt;a href="https://mustache.github.io/"&gt;mustache&lt;/a&gt; templates in your &lt;code&gt;translation.json&lt;/code&gt; and populate your translated string with dynamic content on the fly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#translationjson"&gt;
  &lt;/a&gt;
  translation.json
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"myTemplate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{{count}} times"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modulejs"&gt;
  &lt;/a&gt;
  Module.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-export-i18n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTranslation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myTemplate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="c1"&gt;// string will be "2 times"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#about-raw-nextexporti18n-endraw-"&gt;
  &lt;/a&gt;
  About &lt;code&gt;next-export-i18n&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This npm module provides a simple solution for Internationalization (i18n) of projects using &lt;code&gt;next export&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next.js already has support for internationalized (i18n) routing out-of-the-box. You can provide a list of locales, a default as well as  domain-specific locales and Next.js  automatically handles the routing. It streamlines the touring and locale parsing for nearly all existing l18n library solutions available for Next.js such as &lt;code&gt;react-intl&lt;/code&gt;, &lt;code&gt;react-i18next&lt;/code&gt;, &lt;code&gt;lingui&lt;/code&gt;, &lt;code&gt;rosetta&lt;/code&gt;, &lt;code&gt;next-intl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, &lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;&lt;code&gt;Next.js&lt;/code&gt; i18n-routing&lt;/a&gt; does not supports &lt;code&gt;next export&lt;/code&gt;.&lt;br&gt;
This means that &lt;em&gt;none&lt;/em&gt; of the i18n-libraries (which are utilizing the build in i18n-routing) is able to support fully static sites which are generated with &lt;code&gt;next export&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;next-export-i18n&lt;/code&gt; provides a simple solution for Internationalization (i18n) when you want to generate a truly static website with &lt;code&gt;next export&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Read the &lt;a href="//next.js:%20i18n%20with%20static%20sites"&gt;Introduction to &lt;code&gt;next-export-i18n&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sample-implementation"&gt;
  &lt;/a&gt;
  Sample implementation
&lt;/h3&gt;

&lt;p&gt;You can also take a look at the example implementation &lt;a href="https://next-export-i18n-example.vercel.app"&gt;next-export-i18n-example.vercel.app&lt;/a&gt; and its source code at &lt;a href="https://github.com/martinkr/next-export-i18n-example"&gt;github: &lt;code&gt;https://github.com/martinkr/next-export-i18n-example&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/next-export-i18n"&gt;&lt;code&gt;next-export-i18n&lt;/code&gt; npm module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/martinkr/next-js-i18n-with-static-sites-2644"&gt;next.js: i18n with static sites (Introduction)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example implementation: &lt;a href="https://next-export-i18n-example.vercel.app"&gt;https://next-export-i18n-example.vercel.app&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github for the npm-module: &lt;a href="https://github.com/martinkr/next-export-i18n"&gt;https://github.com/martinkr/next-export-i18n&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github for the example: &lt;a href="https://github.com/martinkr/next-export-i18n-example"&gt;https://github.com/martinkr/next-export-i18n-example&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@z734923105?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jerry Zhang&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Removing people using UTF-8 👩‍👩‍👦‍👦</title>
      <author>Jan Cizmar</author>
      <pubDate>Thu, 25 Nov 2021 15:37:32 +0000</pubDate>
      <link>https://dev.to/jancizmar/removing-people-using-utf-8-3d2f</link>
      <guid>https://dev.to/jancizmar/removing-people-using-utf-8-3d2f</guid>
      <description>&lt;p&gt;While I was writing my new article I found out about really cool thing I am going to share with you.&lt;/p&gt;

&lt;p&gt;Check out this emoji containing 4 people 👩‍👩‍👦‍👦.&lt;/p&gt;

&lt;p&gt;While I was trying to delete 👩‍👩‍👦‍👦 in VSCode using backspace it &lt;br&gt;
didn't disappear, but it just changed to this 👩‍👩‍👦. After hitting another backspace it changed to 👩‍👩 then to 👩 and then it finally disappeared. So it goes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;👩‍👩‍👦‍👦 ⌫ 👩‍👩‍👦 ⌫ 👩‍👩 ⌫ 👩 ⌫
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-this-happens"&gt;
  &lt;/a&gt;
  Why this happens?
&lt;/h2&gt;

&lt;p&gt;When we look on the decoded symbols, we can see that the symbols are equal to this in hex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;👩‍👩‍👦‍👦:  0x1f469 0x200d 0x1f469 0x200d 0x1f466 0x200d 0x1f466
👩‍👩‍👦‍👦:  0x1f469 0x200d 0x1f469 0x200d 0x1f466
👩‍👩:    0x1f469 0x200d 0x1f469
👩:   0x1f469
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While 0x200d character is a "ZERO WIDTH JOINER" which tells the renderer, that the preceding and following characters should join each other. 🎉&lt;/p&gt;

&lt;p&gt;So it is like 👩 + 👩 + 👦 + 👦.&lt;/p&gt;

&lt;p&gt;Cool isn't it?&lt;/p&gt;

&lt;p&gt;PS:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Removing of single woman works as well, so this 👩‍👦‍👦 can transformed to the hex code like this: 0x1f469 0x200d 0x1f466 0x200d 0x1f466&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>programming</category>
    </item>
    <item>
      <title>I made a working Gameboy CSS art: try it out 🕹</title>
      <author>Mustapha Aouas</author>
      <pubDate>Thu, 25 Nov 2021 15:19:55 +0000</pubDate>
      <link>https://dev.to/mustapha/i-made-a-working-gameboy-css-art-try-it-out-4m1j</link>
      <guid>https://dev.to/mustapha/i-made-a-working-gameboy-css-art-try-it-out-4m1j</guid>
      <description>&lt;p&gt;Here is the story. Last year, I went to an interview (for an Angular position) and the interviewer asked me about a maze-solving algorithm. So I completed the algorithm and just for fun I went ahead and did an Angular project where you had to solve a maze (generating a maze is also a good exercise).&lt;/p&gt;

&lt;p&gt;So, I had a fully working maze game on my laptop, and I also had a CSS art of a Gameboy 👉 I figured it would be fun to merge these two together.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try it out &lt;a href="https://theangularguy.github.io/playable-gameboy"&gt;here&lt;/a&gt; (if you're on laptop you can use your keyboard)&lt;/li&gt;
&lt;li&gt;Contribute &lt;a href="https://github.com/TheAngularGuy/playable-gameboy"&gt;here&lt;/a&gt; (or if you'd like to give a ⭐️)&lt;/li&gt;
&lt;li&gt;Demo here 👇&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHTNZkhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1463889718962237456/pu/img/2YZCPE2GGbFiAPdR.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HVJIksBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1456240428014096389/IcJJ9Ot6_normal.jpg" alt="Mustapha Aouas profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Mustapha Aouas
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @theangularguy
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Check out this CSS art of a Gameboy I made with a small peculiarity, it's actually playable 🕹&lt;br&gt;Link 👉  &lt;a href="https://t.co/NhuY6SguLv"&gt;theangularguy.github.io/playable-gameb…&lt;/a&gt;&lt;br&gt;&lt;br&gt;What's your highest score? Mine is 90...almost 💯&lt;br&gt;&lt;br&gt;Use your keyboard if you're on a laptop&lt;br&gt;Made with the &lt;a href="https://twitter.com/hashtag/angular"&gt;#angular&lt;/a&gt; game engine &amp;amp; &lt;a href="https://twitter.com/hashtag/javascript"&gt;#javascript&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/html"&gt;#html&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:18 PM - 25 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1463889796158398466" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1463889796158398466" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1463889796158398466" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Follow me on Twitter at &lt;a href="https://twitter.com/TheAngularGuy"&gt;twitter.com/theAngularGuy&lt;/a&gt; as I tweet (almost) every day about the things I learned in my 6+ years journey in web development ✅&lt;/p&gt;




&lt;p&gt;In this post, we will talk about a couple of things that went into this project. First, we will talk about the maze generation algorithm, and the maze solving algorithm. Then we will talk about some CSS art key concepts.&lt;/p&gt;

&lt;p&gt;&lt;br&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maze-generation-algorithm"&gt;
  &lt;/a&gt;
  Maze generation algorithm
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPtHxema--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb2oma02wvi8fw8mcpcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPtHxema--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb2oma02wvi8fw8mcpcb.png" alt="Steps" width="880" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a lot of algorithms for this. The one I went with is the recursive generation, for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Because I love solving problems with recursion (&lt;a href="https://tinyurl.com/3dv9rvwc"&gt;Scheme&lt;/a&gt; changed me)&lt;/li&gt;
&lt;li&gt;Because the generated maze is prettier to look at (with long alleys)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are four steps in this algorithm:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delimit the maze area&lt;/li&gt;
&lt;li&gt;Divide the area vertically in the middle (or at a random point) and make an opening in the division&lt;/li&gt;
&lt;li&gt;Take the two halves and divide them horizontally in the middle, and make an opening in each division&lt;/li&gt;
&lt;li&gt;Take each new portion and go to step. 2 &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will go on and on until there's not enough room to make a division.&lt;br&gt;
Here is a gif with the full process of generation 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwyLfcnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul9y79rszzvh2oxywcm2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwyLfcnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul9y79rszzvh2oxywcm2.gif" alt="Generation gif" width="220" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can visualize the maze as a binary tree, each node represents a part / division of the maze.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#maze-solving-algorithm"&gt;
  &lt;/a&gt;
  Maze solving algorithm
&lt;/h2&gt;

&lt;p&gt;For solving the maze I used the depth-first search algorithm. It's not the most performant algorithm for solving a maze but it gets the job done and it's fairly easy to implement. Also, I use it to go through the maze and find the longest path possible, then I use that as the exit point (goal location some might call it) of the maze. Here is a gif illustrating this algorithm:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RAuIRVsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiuflcqg891k6glszmf2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RAuIRVsj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tiuflcqg891k6glszmf2.gif" alt="maze solving algorithm" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won't go too many details here, but tell me in the comments if you would be interested in a maze solving article.&lt;/p&gt;

&lt;p&gt;&lt;br&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#css-art-key-concepts"&gt;
  &lt;/a&gt;
  CSS art: key concepts
&lt;/h2&gt;

&lt;p&gt;We are gonna talk about some CSS properties I wanted to highlight. We can divide these properties into two categories. Shape and Lightening (impression of light and shadows).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#shape"&gt;
  &lt;/a&gt;
  Shape
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#-raw-borderradius-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;border-radius&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The first one is the good old &lt;code&gt;border-radius&lt;/code&gt;. You might use it to make circles or ellipses. But this property can achieve more. You can specify the horizontal and vertical radius of each border. Have a look at this snippet below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.plate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt; &lt;span class="m"&gt;49%&lt;/span&gt; &lt;span class="m"&gt;49%&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2%&lt;/span&gt; &lt;span class="m"&gt;2%&lt;/span&gt; &lt;span class="m"&gt;6.5%&lt;/span&gt; &lt;span class="m"&gt;6.5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I used this to shape the gameboy plate and the black screen.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-aspectratio-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;aspect-ratio&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;This property is very useful, it sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes.&lt;br&gt;
For example I can set the &lt;code&gt;width&lt;/code&gt; and an aspect ratio, and the height will be calculated automatically. Have a look:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.plate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* The height will be 1000px */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I used this on almost every element. Yeah I know I love this property!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-transform-skew-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;transform: skew&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;You might use &lt;code&gt;transform&lt;/code&gt; for rotations, scaling (resizing), or translation (moving), but you can also use it for distortion (skewing).&lt;br&gt;
The &lt;code&gt;skew&lt;/code&gt; CSS property defines a transformation that skews an element on the 2D plane.&lt;/p&gt;

&lt;p&gt;I use this for the sound holes grid. Have a look at the image below with skewing (right) and without (left):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BkC8GBqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26wlceitm5a6owfy5o0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BkC8GBqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26wlceitm5a6owfy5o0s.png" alt="comparison skew or not" width="880" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's also a rotation that is applied on the grid in both pictures. &lt;br&gt;
Also, for the sound grid, I used a grid layout. If you want to learn more about CSS grid I wrote an article where I explain every concept of it 👇&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rogKjLRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tXIALQ8l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/cb831252-9db8-4f7a-a600-0bf8db47b92f.png" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/css-grid-illustrated-introduction-52l5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS Grid: illustrated introduction&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Sep 12 '19 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#light-and-shadow"&gt;
  &lt;/a&gt;
  Light and shadow
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-raw-boxshadow-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;box-shadow&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;To give an impression of volume, lighting is essential. Look at the two examples below, left is without shadow and right is using shadows (&lt;code&gt;text-shadow&lt;/code&gt; &amp;amp; &lt;code&gt;box-shadow&lt;/code&gt;):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ov7k9uaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoq7ip0z6d8ikb1xghmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ov7k9uaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoq7ip0z6d8ikb1xghmb.png" alt="box-shadow comparison" width="880" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To achieve this effect of lighting we have to understand where to put light and where to put some shadow, and that depends on if something is in relief or depression. Have a look at the image below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hcjI6k2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqs7pfy5v9umdtzbkonm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hcjI6k2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqs7pfy5v9umdtzbkonm.png" alt="light effect" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we apply this to the buttons, we would have something like this (assuming the light is at the top left of the screen):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LKAEy-tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekf8ikt9s19dn6bula85.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKAEy-tO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekf8ikt9s19dn6bula85.gif" alt="lighting and shadow for buttons" width="470" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That translates to this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;-3px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;99%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="m"&gt;2.5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The inset keyword changes the shadow to one inside the frame.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#-raw-textshadow-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;text-shadow&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Fo the texts we use the same principle either the text is in relief or depression. Here is an example of a text that is in relief:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;1.2px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;7%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;br&gt;
That's it for this post. I hope you liked it. If you did, please share it with your friends &amp;amp; colleagues and follow me on Twitter at &lt;a href="https://twitter.com/TheAngularGuy"&gt;@theAngularGuy&lt;/a&gt; where I tweet about web development and computer science.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-to-read-next"&gt;
  &lt;/a&gt;
  What to read next?
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rogKjLRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tXIALQ8l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/cb831252-9db8-4f7a-a600-0bf8db47b92f.png" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/7-amazing-css-properties-you-may-not-know-yet-eej" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 amazing CSS properties you may not know  (yet)&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Apr 20 '20 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>css</category>
      <category>javascript</category>
      <category>algorithms</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Getting started with Web Sockets in NodeJS</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 25 Nov 2021 15:18:49 +0000</pubDate>
      <link>https://dev.to/codesphere/getting-started-with-web-sockets-in-nodejs-49n0</link>
      <guid>https://dev.to/codesphere/getting-started-with-web-sockets-in-nodejs-49n0</guid>
      <description>&lt;p&gt;In the day and age of live streaming, video conferencing, and remote work, one of the primary concerns of any user is latency. A seamless experience is the name of the game.&lt;/p&gt;

&lt;p&gt;Traditional HTTP, being dependent on client requests, is simply not capable of fulfilling this need. They're simply too slow. It needs to be upgraded, literally.&lt;/p&gt;

&lt;p&gt;Let me introduce you to Websockets - An event-driven, web-friendly alternative to HTTP. Websockets don't require a client request to fetch data from the server every time, fulfilling the need for real-time updates. Wondering how? Let's find it out.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-are-websockets"&gt;
  &lt;/a&gt;
  What are Websockets?
&lt;/h3&gt;

&lt;p&gt;In simple terms, websockets are an upgrade to traditional HTTP.&lt;/p&gt;

&lt;p&gt;Whenever a websocket request is made to regular HTTP, it is actually upgraded to a websocket connection. However, this happens only at the protocol level, meaning that your underlying TCP connection will remain the same as it was when working on HTTP protocol.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In order to use a websocket, a client first sends a request to upgrade the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the server supports websockets, which these days it usually does, it will accept the request and switch the protocols from HTTP to websocket.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the protocol switching is successful, the http server becomes a websocket server and a persistent connection is created between the client and the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, the websocket server waits for an event to happen and once it does it performs the function attached to the event. For example, in a chat application you don't have to place a request for the next message every time. Being a websocket connection (event-driven), the server simply pushes every new message (the event) it receives directly to the client.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Websockets are mostly used at places where real time updates are necessary. For example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Chat applications.&lt;/li&gt;
&lt;li&gt;Location based apps.&lt;/li&gt;
&lt;li&gt;Social feeds.&lt;/li&gt;
&lt;li&gt;Collaborative work.&lt;/li&gt;
&lt;li&gt;Multi player gaming.&lt;/li&gt;
&lt;li&gt;Live streaming.&lt;/li&gt;
&lt;li&gt;Financial and sports updates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each of the above renders an enhanced user experience thanks to WebSockets. Websockets always maintain their state (unlike HTTP, which is stateless) and utilize a full-duplex connection. Furthermore, headers in WebSockets are sent only once while sending the upgrade request. This is why WebSockets have speeds 5–7 times better than traditional HTTP.&lt;/p&gt;

&lt;p&gt;Sounds exciting? It does but this is all well and good in theory. Nothing like the feeling than to see it in action and better yet implementing it yourself. So let's get right to it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-the-development-environment"&gt;
  &lt;/a&gt;
  Setting up the development environment
&lt;/h3&gt;

&lt;p&gt;First things first, we need to set up our development environment by installing the required files and packages and creating our workspace. We will be using the ws library to create a simple chat application using websockets in NodeJS.&lt;br&gt;
First, in our project folder create two folders named client and server.&lt;/p&gt;

&lt;p&gt;Now fire up the node terminal and go to the server directory and run the following commands one by one&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;br&gt;
//initializes node and creates a package.json file&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install websocket&lt;/code&gt;&lt;br&gt;
//installs websocket library&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install ws&lt;/code&gt;&lt;br&gt;
//installs ws library - a websocket implementation&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install express&lt;/code&gt;&lt;br&gt;
//installs express for creating a simple http server&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install nodemon&lt;/code&gt;&lt;br&gt;
//installs nodemon package to track changes in our code and restart server&lt;/p&gt;

&lt;p&gt;After this is done, create a file named &lt;code&gt;index.js&lt;/code&gt; inside your server folder. This &lt;code&gt;index.js&lt;/code&gt; will be our server-side javascript file.&lt;/p&gt;

&lt;p&gt;Now we move on to the client folder. In the client folder create a file called &lt;code&gt;index.html&lt;/code&gt; and another file called &lt;code&gt;script.js&lt;/code&gt;. The HTML file will be the frontend for the application and &lt;code&gt;script.js&lt;/code&gt; will be the client-side javascript file.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#implementing-the%C2%A0server"&gt;
  &lt;/a&gt;
  Implementing the server
&lt;/h3&gt;

&lt;p&gt;Now let's code the server-side javascript. Add the following code to &lt;code&gt;index.js&lt;/code&gt; in the server folder.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Implementing the client&lt;br&gt;
As we are done with the server-side, time to implement the client. We start with &lt;code&gt;index.html&lt;/code&gt;. Add the following code to it.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Moving to the script.js file. Add the following code to it.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#websockets-in%C2%A0action"&gt;
  &lt;/a&gt;
  Websockets in Action
&lt;/h3&gt;

&lt;p&gt;And there you have it!&lt;/p&gt;

&lt;p&gt;When you deploy your app (make sure to run both the server and client sides), your HTML page will open up. If you type anything in the input box and click "Send Message" the server will echo it back to you. But where's the fun in that? We want to see two clients chatting.&lt;/p&gt;

&lt;p&gt;Open another browser or another instance of the same browser. Now go to the same URL as above.&lt;/p&gt;

&lt;p&gt;Place both browsers side by side on your screen. Now when you send a message from one it will reflect in the other while echoing in the same as well. You can try the same with both browsers and it will work just the same. You can notice that the echo and the message in the other browser appear at practically the same time. That's your WebSocket at work.&lt;/p&gt;

&lt;p&gt;There you go! I hope you found this simple implementation of a chat application using WebSockets in NodeJS fun to work with. Get creative with it!&lt;/p&gt;




&lt;p&gt;When you're ready to show off your project, deploy it on &lt;a href="https://link.codesphere.com/GI"&gt;Codesphere&lt;/a&gt;, the only cloud platform that takes the headache out of configuring your cloud services.&lt;/p&gt;

&lt;p&gt;It only takes minutes to deploy!&lt;/p&gt;

&lt;p&gt;That was it from our side. Let us know what amazing real-time application you're going to build down below!&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Let's create a Pixel Art maker with JavaScript</title>
      <author>Shuvo</author>
      <pubDate>Thu, 25 Nov 2021 14:41:52 +0000</pubDate>
      <link>https://dev.to/0shuvo0/lets-create-a-pixel-art-maker-with-javascript-4016</link>
      <guid>https://dev.to/0shuvo0/lets-create-a-pixel-art-maker-with-javascript-4016</guid>
      <description>&lt;p&gt;In one of my &lt;a href="https://dev.to/0shuvo0/lets-create-a-drawing-app-with-js-4ej3"&gt;previous article&lt;/a&gt; I have showed you how to create a paint app using JavaScript. And in this article we will learn how to create a pixel art generator using HTML, CSS and vanilla JS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pixel art app is also a drawing/paint app but you have big pixels so they are less in number so your drawing won't be that detailed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARf6Z5c5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vsmz3p34e0fr3xrk2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARf6Z5c5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vsmz3p34e0fr3xrk2x.png" alt="JavaScript pixel art generator" width="880" height="815"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Video tutorial available &lt;a href="https://youtu.be/wZZyhrJxZRU"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#our-app-will-have"&gt;
  &lt;/a&gt;
  Our app will have:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Color picker/input to change the color of our brush&lt;/li&gt;
&lt;li&gt;A reset button to reset our grid&lt;/li&gt;
&lt;li&gt;A input through which we can set the size of our pixels/grid&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h2&gt;

&lt;p&gt;So lets create the &lt;strong&gt;index.html&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Reset&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"#00eeff"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"30"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"size"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Here we will add divs representing our pixels --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and now lets style them in our &lt;strong&gt;style.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blueviolet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.navbar&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.navbar&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.color&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;.25em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.pixel&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;61&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;61&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#notice-that-we-are-using-raw-size-endraw-variable-we-will-be-updating-that-in-our-javascript"&gt;
  &lt;/a&gt;
  Notice that we are using &lt;code&gt;--size&lt;/code&gt; variable. We will be updating that in our JavaScript
&lt;/h3&gt;

&lt;p&gt;Anyways now if we open it up in our browser we should see something like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJGQ9S3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kimqfktrzefjhec325hv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJGQ9S3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kimqfktrzefjhec325hv.png" alt="HTML5 Project" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in our JavaScript lets populate the &lt;strong&gt;container&lt;/strong&gt; with divs which will be our pixels.&lt;br&gt;
We will create a helper function called &lt;code&gt;populate&lt;/code&gt; for that&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Getting the value of the size input&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sizeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Updating the --size CSS variable&lt;/span&gt;
  &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now you should see a grid displayed&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EmIA7AI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fr7loarsywve1julcsh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmIA7AI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fr7loarsywve1julcsh.png" alt="Pixel art grid with css" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Okay so now when we press down our mouse and move it, we want to color the div that is under our cursor.&lt;br&gt;
So lets add &lt;code&gt;mouseover&lt;/code&gt; and &lt;code&gt;mousdown&lt;/code&gt; event on our pixels&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sizeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

&lt;span class="c1"&gt;// We will only color our pixels if draw is set to true&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// We don't need to check if draw is true here&lt;/span&gt;
        &lt;span class="c1"&gt;// because if we click on a pixel that means we want to draw that pixel&lt;/span&gt;
        &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Set draw to true when the user press down the mouse&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mousedown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// Set draw to false when the user release the mouse&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouseup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BUNqpe5c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71hbslm6sila6h0fthzg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUNqpe5c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71hbslm6sila6h0fthzg.png" alt="js Pixel art demo" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Now lets make the reset button work. When the reset button is clicked we simply have to empty out the inner html of our container and call the &lt;code&gt;populate&lt;/code&gt; function again.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sizeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mousedown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouseup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resetBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And finally when we change the value of our input we want to create a new grid with the entered size.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sizeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mousedown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouseup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;draw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;resetBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;sizeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sizeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBT_AM2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5f4guejbvowi4vdc0hxf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBT_AM2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5f4guejbvowi4vdc0hxf.png" alt="Finished project demo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And just like that we have successfully created a Pixel Art creator using vanilla JavaScript.&lt;br&gt;
You can find the finished codes &lt;a href="https://github.com/0shuvo0/pilex-art"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Make sure you checkout my other articles and YouTube channel&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__728097"&gt;
  
    .ltag__user__id__728097 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/0shuvo0" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/0shuvo0"&gt;Shuvo&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/0shuvo0"&gt;Frontend Developer and YouTuber.
Channel link: https://www.youtube.com/c/AngleBrace&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;iframe&gt;
  width="710"&lt;br&gt;
  height="399"&lt;br&gt;
  src="https://www.youtube.com/embed/uWAn5TFZY_E"&lt;br&gt;
  allowfullscreen&lt;br&gt;
  loading="lazy"&amp;gt;&lt;br&gt;
&lt;/iframe&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#was-it-helpful-support-me-on-patreon"&gt;
  &lt;/a&gt;
  Was it helpful? Support me on Patreon
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/0shuvo0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vln7kszB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vnw8g7vs5pok3jwgtgv.png" alt="Patreon Logo" width="225" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>AWS Step Function vs. AWS Lambda - Part 2</title>
      <author>Christian Bonzelet</author>
      <pubDate>Thu, 25 Nov 2021 13:49:46 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-step-function-vs-aws-lambda-part-2-1dgk</link>
      <guid>https://dev.to/aws-builders/aws-step-function-vs-aws-lambda-part-2-1dgk</guid>
      <description>&lt;p&gt;Do you also feel the tension of the cover image? It is time for a battle again. 🥊 After I published &lt;a href="https://dev.to/aws-builders/aws-step-function-vs-aws-lambda-benchmark-54hj"&gt;the first part&lt;/a&gt; of my comparison, I was overwhelmed about the amount of feedback I received. May it be comments on my post, discussions on twitter or LinkedIn.&lt;/p&gt;

&lt;p&gt;The fact that the initial post triggered a lot of inspiring discussions is very valuable. While reading through your feedback it was kind of obvious that there is a need for a second part. &lt;/p&gt;

&lt;p&gt;I received a lot of feedback about optimizations for AWS Lambda and that people are curious how this affects the performance in comparison to our state machine. We will also take a closer look on the perspective of costs to get a more complete view how the services differ.&lt;/p&gt;

&lt;p&gt;Here we are. &lt;/p&gt;

&lt;p&gt;Like in our first part, again all experiments are triggered using &lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html"&gt;Apache Bench&lt;/a&gt; with the following parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ab -n 15000 -c 1 https://hash.execute-api.eu-central-1.amazonaws.com/.../&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-n&lt;/code&gt; configures the total amount of requests that are triggered - in our case 15.000&lt;br&gt;
&lt;code&gt;-c&lt;/code&gt; is the number of concurrent requests - in our setup 1&lt;/p&gt;

&lt;p&gt;⚠️ &lt;strong&gt;IMPORTANT:&lt;/strong&gt; it is important to consider, that the results from apache-bench are not 100% accurate. The measured throughput depends on the hardware and network capabilities of my local workstation. For upcoming benchmarks, I consider to use something like CloudShell. &lt;br&gt;
But apache-bench gives some very early feedback and potential indications. Hence we use these results in combination with the Lambda duration and Step-Function execution duration.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#optimizing-our-lambda-function"&gt;
  &lt;/a&gt;
  🔋 Optimizing our Lambda function
&lt;/h2&gt;

&lt;p&gt;So what is the goal of our upcoming experiments? We want to &lt;br&gt;
apply some optimizations on our Lambda function with a clear focus to decrease latencies. Based on the feedback I got, there were two main approaches for optimization:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reusing downstream http connections by activating keep-alive settings.&lt;/li&gt;
&lt;li&gt;Improving overall execution performance by increasing the allocated memory.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#reusing-connections-with-keepalive-in-nodejs"&gt;
  &lt;/a&gt;
  Reusing Connections with Keep-Alive in Node.js
&lt;/h3&gt;

&lt;p&gt;For short-lived operations, such as in our case writing and reading to and from S3, the latency overhead of setting up a TCP connection might be greater than the operation itself. To activate http keep-alive you simply have to set an environment variable in your Lambda function configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Environment:
  Variables:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you already use v3 of the AWS JS SDK, this setting is &lt;a href="https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/node-reusing-connections.html"&gt;enabled by default&lt;/a&gt;. For v2 you have to &lt;a href="https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-reusing-connections.html"&gt;explicitly activate it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let us deploy the change and start our first test. Let us first start with analyzing the Apache Bench reports. The complete reporting is available on &lt;a href="https://github.com/cremich/aws-sf-lambda-benchmark/tree/main/benchmark"&gt;GitHub&lt;/a&gt;. Here some highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Lambda function was able to process all requests 43 seconds faster compared to the state machine.&lt;/li&gt;
&lt;li&gt;Both the state machine and the Lambda function were able to process round about 7 requests per second&lt;/li&gt;
&lt;li&gt;The mean time per request for the Lambda function was 131ms and 134ms for state machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking at these results, this little tweak of activating TCP keep-alive helped a lot to speed up the Lambda function. In terms of end-2-end performance and latency, both solutions are now very close to each other.&lt;/p&gt;

&lt;p&gt;Let us take a closer look into CloudWatch and X-Ray to confirm the observations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr_Qs9Hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aysa1t8hlox1s73vb6gd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tr_Qs9Hx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aysa1t8hlox1s73vb6gd.png" alt="latencies with keep-alive" width="880" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The average execution time of the state-machine is 46.4ms and Lambda performs with 49ms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d-AKaqJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt9uhcwylc7ujpjnr8ow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d-AKaqJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt9uhcwylc7ujpjnr8ow.png" alt="x-ray service map with keep alive" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here things are still looking interesting. The Lambda function duration on average still has some up and downs during the execution of the test while the duration of the state-machine is stable. Both solutions show some cold-start behavior while it seems that the state-machine needs less time to become "warm".&lt;/p&gt;

&lt;p&gt;But in total the impact on the Lambda function performance is very impressive compared to the results in the first part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#give-the-lambda-function-some-ram"&gt;
  &lt;/a&gt;
  Give the Lambda function some RAM
&lt;/h3&gt;

&lt;p&gt;But the question is: how much memory does my Lambda function need? The range is quite large from 128 MB to 10.240 MB. &lt;br&gt;
There is an awesome open source tool called "&lt;a href="https://github.com/alexcasalboni/aws-lambda-power-tuning"&gt;Lambda Power Tuner&lt;/a&gt;" that helps you to determine your memory settings based on different strategies like speed, cost or balanced.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you use "cost" the state machine will suggest the cheapest option (disregarding its performance), while if you use "speed" the state machine will suggest the fastest option (disregarding its cost). When using "balanced" the state machine will choose a compromise between "cost" and "speed"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source: &lt;a href="https://serverlessrepo.aws.amazon.com/applications/arn:aws:serverlessrepo:us-east-1:451282441545:applications~aws-lambda-power-tuning"&gt;Lambda Power Tuner @ AWS Serverless Application Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case the "Lambda Power Tuner" suggested 256 MB as "Best cost" and 2048 MB as "Best Time". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9rmfFIp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0v4xxyzdlvi7x79gfvc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9rmfFIp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0v4xxyzdlvi7x79gfvc.png" alt="lambda-power-tuner-output" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome, now we have a good start for the final tests.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#best-time-setting"&gt;
  &lt;/a&gt;
  Best time setting
&lt;/h4&gt;

&lt;p&gt;As we aim to reduce latency, let us first start with the proposed "Best Time" setting of 2048 MB memory and let us have a look at the apache-bench metrics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Lambda function was able to process all requests 81 seconds faster compared to the state machine.&lt;/li&gt;
&lt;li&gt;Both the state machine and the Lambda function were able to process round about 8 requests per second&lt;/li&gt;
&lt;li&gt;The mean time per request for the Lambda function was 121ms and 127ms for state machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compared to our first test, there are some improvement but they seem to be marginally on average. Let us try to get some more insights using CloudWatch and X-Ray.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DRajtx_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mf2qilnwy8s087eeldh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRajtx_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mf2qilnwy8s087eeldh.png" alt="cloudwatch-latencies-2048" width="880" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the most parts, the duration of the Lambda function is just below the execution time of the state-machine. &lt;br&gt;
The average execution time of the state-machine is 45.1ms and Lambda shines with 41.8ms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n6OyN18m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma1m8l4tv1x4m9emw9q4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6OyN18m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma1m8l4tv1x4m9emw9q4.png" alt="xray-service-map-2048" width="880" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What would happen, if we set our memory configuration to the setting considered as "Best cost"? Let us review the results in the next chapter.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#best-cost-setting"&gt;
  &lt;/a&gt;
  Best cost setting
&lt;/h4&gt;

&lt;p&gt;In short again our apache-bench metrics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Lambda function was able to process all requests 155 seconds faster compared to the state machine.&lt;/li&gt;
&lt;li&gt;The state machine was able to process 7.5 requests per second while the Lambda function processes 8 requests per second&lt;/li&gt;
&lt;li&gt;The mean time per request for the Lambda function was 122ms and 132ms for state machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CloudWatch and X-Ray results also confirm very close results. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4EA8a4FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlbnp90x0645ljlc2jjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4EA8a4FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlbnp90x0645ljlc2jjq.png" alt="cloudwatch-256" width="880" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The average execution time of the state-machine is 54.8ms and Lambda is just in the lead with 50.5ms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mD8-lGuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjifyz7mgjxujcivhhse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mD8-lGuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjifyz7mgjxujcivhhse.png" alt="xray-256" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#cost-comparison"&gt;
  &lt;/a&gt;
  💰 Cost comparison
&lt;/h2&gt;

&lt;p&gt;Based on the scale of my test, the AWS Cost Explorer was not really helpful as the load I generated was too low. The AWS calculator is a helpful tool to better compare the costs of both services. &lt;/p&gt;

&lt;p&gt;The estimate is &lt;a href="https://calculator.aws/#/estimate?id=16d3b9fd0f064aac0f7d743fb47ad2b2044ad91e"&gt;publicly available&lt;/a&gt; if you want to have a detailed look. &lt;/p&gt;

&lt;p&gt;I calculated with 5 million invocations per month per service. Based on our test results, I was able to determine very precise values for the parameter that influence pricing like Lambda invocation duration/state-machine execution or consumed memory. The monthly costs are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8 USD for AWS Lambda with 2048MB memory (Best time)&lt;/li&gt;
&lt;li&gt;1.83 USD for AWS Lambda with 265MB memory (Best cost)&lt;/li&gt;
&lt;li&gt;5.52 USD for the AWS Step Function express workflow&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  💡 Conclusion
&lt;/h2&gt;

&lt;p&gt;In this part we covered some important aspects like options to improve the performance of a Lambda function. I think it is again very important to mention, that this benchmark should not be interpreted as "use Step Functions whenever you can". &lt;/p&gt;

&lt;p&gt;My goal was more to raise discussions about the importance to not build you decision based on hypothesis or rumors. Make your decision based on data to make the best of all kind of  decisions you can make.&lt;/p&gt;

&lt;p&gt;I would again like to point out a quote from &lt;a href="https://twitter.com/edjgeek"&gt;Eric Johnson&lt;/a&gt; at the &lt;a href="https://www.youtube.com/watch?v=zdmCYPvOHoo"&gt;serverless office hours&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use Lambda to transform not to transport&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or in my words: the best code is the code that is never written.&lt;/p&gt;

&lt;p&gt;☝️ And here come the thing and this is very important to keep in mind:&lt;/p&gt;

&lt;p&gt;BOTH SERVICES ARE AWESOME.&lt;/p&gt;

&lt;p&gt;If you have the need to write a Lambda function, you will be able to solve a lot of problems. But depending on what you want to achieve, Step Functions give you a lot of power to get the same results without writing ANY line of code, while making up your mind about things like TCP keep-alive or how to figure out what the best memory setting is. In all tests, AWS Lambda showed the well-known cold-start behavior that is something you should keep in mind. AWS Step Function also needs some warm-up time but it is not really comparable to AWS Lambda cold-starts. There was an interesting discussion around this on twitter:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--o_VIlTi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/487409001047420928/lwn7_0Pp_normal.jpeg" alt="Diego Santiviago profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Diego Santiviago
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @diegosantiviago
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/marekq"&gt;@marekq&lt;/a&gt; &lt;a href="https://twitter.com/Cremich"&gt;@Cremich&lt;/a&gt; &lt;a href="https://twitter.com/__steele"&gt;@__steele&lt;/a&gt; &lt;a href="https://twitter.com/chrismunns"&gt;@chrismunns&lt;/a&gt; &lt;a href="https://twitter.com/IamStan"&gt;@IamStan&lt;/a&gt; &lt;a href="https://twitter.com/ben11kehoe"&gt;@ben11kehoe&lt;/a&gt; &lt;a href="https://twitter.com/alexbdebrie"&gt;@alexbdebrie&lt;/a&gt; &lt;a href="https://twitter.com/richdevelops"&gt;@richdevelops&lt;/a&gt; not a runtime/platform cold-start, but Step Functions needs the state machine definition.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:39 PM - 28 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453733187666857985" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453733187666857985" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453733187666857985" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It only remains to say: happy coding AND happy orchestrating! 🥳 I really hope that my analysis and the approach to decision-making helps you in deciding towards or against one of these services for your individual use cases.&lt;/p&gt;




&lt;p&gt;About the author: &lt;/p&gt;

&lt;p&gt;👋 Hi my name is Christian. I am working as an AWS Solution Architect at &lt;a href="https://www.dfl.de/en/about/subsidiaries/about-dfl-digital-sports-gmbh/"&gt;DFL Digital Sports GmbH&lt;/a&gt;. Based in cologne with my beloved wife and two kids. I am interested in all things around ☁️ (cloud), 👨‍💻 (tech) and 🧠 (AI/ML).&lt;/p&gt;

&lt;p&gt;With 10+ years of experience in several roles, I have a lot to talk about and love to share my experiences. I worked as a software developer in several companies in the media and entertainment business, as well as a solution engineer in a consulting company. &lt;/p&gt;

&lt;p&gt;I love those challenges to provide high scalable systems for millions of users. And I love to collaborate with lots of people to design systems in front of a whiteboard.&lt;/p&gt;

&lt;p&gt;You can find me on &lt;a href="https://www.linkedin.com/in/christian-bonzelet/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://www.twitter.com/cremich"&gt;Twitter&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Cover Image by &lt;a href="https://tenor.com/users/miguelangelvenegasgordillo"&gt;miguelangelvenegasgordillo&lt;/a&gt; on &lt;a href="https://tenor.com/view/civilwar-captainamerica-gif-14387051"&gt;Tenor&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>lambda</category>
      <category>stepfunction</category>
    </item>
  </channel>
</rss>
