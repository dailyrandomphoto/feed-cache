<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Javascript的加法問題?</title>
      <author>HY-SHEN</author>
      <pubDate>Fri, 25 Jun 2021 03:03:59 +0000</pubDate>
      <link>https://dev.to/hyshen/javascript-48g6</link>
      <guid>https://dev.to/hyshen/javascript-48g6</guid>
      <description>&lt;p&gt;各位大大大神安安:&lt;br&gt;
最近在學Javascript,一般來說,要讓數字1加到9可以用&lt;br&gt;
let result = 0;&lt;br&gt;
for(n=1;n&amp;lt;=10;n++){&lt;br&gt;
result += n;&lt;br&gt;
}&lt;br&gt;
console.log(result);&lt;/p&gt;

&lt;p&gt;或者是&lt;/p&gt;

&lt;p&gt;let i = 0;&lt;br&gt;
let result = 0;&lt;br&gt;
while(i&amp;lt;10){&lt;br&gt;
i++;&lt;br&gt;
result += i;&lt;br&gt;
}&lt;br&gt;
console.log(result);&lt;/p&gt;

&lt;p&gt;都可以是55&lt;/p&gt;

&lt;p&gt;那如果是要用min和max的話,也就是要從min加到max的話要怎麼使用?&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Generating Sharable Content Images with Open Graph and NextJS</title>
      <author>Kacey Cleveland</author>
      <pubDate>Fri, 25 Jun 2021 02:36:11 +0000</pubDate>
      <link>https://dev.to/kleveland/generating-sharable-content-images-with-open-graph-and-nextjs-4e34</link>
      <guid>https://dev.to/kleveland/generating-sharable-content-images-with-open-graph-and-nextjs-4e34</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The Open Graph Protocol (&lt;a href="https://ogp.me/"&gt;https://ogp.me/&lt;/a&gt;) allows for parsing of specific metadata that many social networks utilize to create dynamic sharable content. An example of this could be when you share a post on Facebook with a link but when you actually share it, the link is joined with a description, an author, an even a cover photo/picture. We can take it a step further and generate the photo/picture and also populate the other metadata fields. This article will focus on creating dynamic images based on your dynamic pages. I utilize this method deploying to Vercel for this blog on my website (&lt;a href="https://kleveland.dev"&gt;https://kleveland.dev&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-used"&gt;
  &lt;/a&gt;
  Tech used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;NextJS&lt;/li&gt;
&lt;li&gt;Serverless functions (via Vercel/AWS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.kleveland.dev/posts/create-notion-blog"&gt;https://www.kleveland.dev/posts/create-notion-blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mU_sLOAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vol4zsd2m6gkfzfyfvjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mU_sLOAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vol4zsd2m6gkfzfyfvjo.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;When I try and share one of my blog posts on Linkedin, you can see it gets populated with a preview image and text. We will go over how that image is generated and how we can customize it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How It Works
&lt;/h2&gt;

&lt;p&gt;As a starting point, I am going to assume you have some dynamic content/pages in a NextJS application. In my case, I utilize the following files for this blog:&lt;/p&gt;

&lt;p&gt;Pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/pages/posts/[slug].tsx&lt;/li&gt;
&lt;li&gt;/pages/posts/open-graph/[slug].tsx&lt;/li&gt;
&lt;li&gt;/pages/api/open-graph-image.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Utils:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/utils/use-open-graph-image.ts&lt;/li&gt;
&lt;li&gt;/utils/utils.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code is actually borrowed heavily from here with a set of adjustments to make it more customizable:&lt;br&gt;
&lt;a href="https://playwright.tech/blog/generate-opengraph-images-using-playwright"&gt;https://playwright.tech/blog/generate-opengraph-images-using-playwright&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#apiopengraphimage"&gt;
  &lt;/a&gt;
  api/open-graph-image
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// path: /pages/api/open-graph-image.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chrome-aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;playwrightChromium&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;playwright-core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// getAbsoluteURL is in a snippet further down&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utils/utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextApiResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Start the browser with the AWS Lambda wrapper (chrome-aws-lambda)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;playwrightChromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;executablePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executablePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chromium&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="c1"&gt;// Create a page with the Open Graph image size best practise&lt;/span&gt;
  &lt;span class="c1"&gt;// 1200x630 is a good size for most social media sites&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;630&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="c1"&gt;// Generate the full URL out of the given path (GET parameter)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;relativeUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;relativeUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// waitUntil option will make sure everything is loaded on the page&lt;/span&gt;
    &lt;span class="na"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;networkidle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;screenshot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;// Set the s-maxage property which caches the images then on the Vercel edge&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cache-Control&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;s-maxage=31536000, stale-while-revalidate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// write the image to the response with the specified Content-Type&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#getabsoluteurl"&gt;
  &lt;/a&gt;
  getAbsoluteURL
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Gets the URL for the current environment&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VERCEL_URL&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`https://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VERCEL_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;baseURL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#useopengraphimage"&gt;
  &lt;/a&gt;
  use-open-graph-image
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOpenGraphImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// The [slug] from /posts/[slug] and /posts/open-graph/[slug]&lt;/span&gt;
  &lt;span class="c1"&gt;// should be identical.&lt;/span&gt;
  &lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/open-graph/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Open Graph &amp;amp; Twitter images need a full URL including domain&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullImageURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/open-graph-image?&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;imageURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fullImageURL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#pagespostsslug"&gt;
  &lt;/a&gt;
  pages/posts/[slug]
&lt;/h3&gt;

&lt;p&gt;Both of these files should generate the same slugs; the open-graph route slug will correspond to the image for the corresponding article from /pages/posts/[slug].tsx. For example, this article on my website has this route:&lt;br&gt;
&lt;a href="https://www.kleveland.dev/posts/create-notion-blog"&gt;https://www.kleveland.dev/posts/create-notion-blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and if I want the open graph image for that route, I can go to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.kleveland.dev/posts/open-graph/create-notion-blog"&gt;https://www.kleveland.dev/posts/open-graph/create-notion-blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The part that matters is the usage of the custom hook in /pages/posts/[slug].tsx that will get us the imageURL to pass to the meta tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;imageURL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useOpenGraphImage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- This custom hook here!&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Kacey Cleveland - &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:title"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:type"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"og:image"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageURL&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        // Content here
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#utilsuseopengraphimagets"&gt;
  &lt;/a&gt;
  /utils/use-open-graph-image.ts
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./utils&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useOpenGraphImage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asPath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/open-graph/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// This will take the current URL of the post and give us the open-graph one. Modify as needed for how you have your routing setup&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullImageURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getAbsoluteURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/open-graph-image?&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// This will then pass along the route for the open-graph image to our api request which will run the serverless function which runs headless chrome and goes to the /posts-open-graph/[slug].tsx route and takes a screenshot to serve as the 'fullImageURL' return.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;imageURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fullImageURL&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  Fin
&lt;/h2&gt;

&lt;p&gt;TLDR the order of operations are the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A user shares a link to your article/dynamic content&lt;/li&gt;
&lt;li&gt;The site that the article is shared on finds reads the meta tags and finds there is an open graph image tag&lt;/li&gt;
&lt;li&gt;The image URL is a GET request to a serverless function that will take a screenshot of the passed route (/posts/open-graph/[slug].tsx) and return the image to be served on the social media site the link was shared on.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ogp.me/"&gt;https://ogp.me/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>seo</category>
      <category>opengraph</category>
    </item>
    <item>
      <title>Ruby Hash Method 101</title>
      <author>Amirul Asyraf</author>
      <pubDate>Fri, 25 Jun 2021 01:56:16 +0000</pubDate>
      <link>https://dev.to/asyraf/ruby-hash-method-101-2mn8</link>
      <guid>https://dev.to/asyraf/ruby-hash-method-101-2mn8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-the-heck-is-ruby-hash-"&gt;
  &lt;/a&gt;
  What the heck is &lt;strong&gt;Ruby Hash&lt;/strong&gt; ??
&lt;/h2&gt;

&lt;p&gt;You can think of Ruby Hash is kind of an &lt;strong&gt;Array without the numerical indexes&lt;/strong&gt;. You &lt;strong&gt;access the Hash values with &lt;code&gt;Keys&lt;/code&gt;&lt;/strong&gt;. A Hash is a data structure used to store data in the form of &lt;strong&gt;UNIQUE key-value pairs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A Hash has certain similarities to an Array, but:&lt;/p&gt;

&lt;p&gt;✅ An Array index is &lt;strong&gt;always an Integer&lt;/strong&gt;&lt;br&gt;
✅ A Hash key &lt;strong&gt;can be (almost) any object&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are gonna dive 🤿 into the Hash world in Ruby. But not too deep, just at the level where most people dive in :p. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; I encourage you to open &lt;code&gt;irb&lt;/code&gt; in your favourite terminal app. Make sure you get your hands 🙌 dirty.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id="top"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#hash-data-syntax"&gt;1️⃣ Hash Data Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#common-use-case-of-using-hash"&gt;2️⃣ Common use case of using Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-create-a-hash"&gt;3️⃣ How to Create a Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-create-or-update-a-hash-value"&gt;4️⃣ How to create or update a Hash value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#values-in-a-ruby-hash"&gt;5️⃣ Values in a Ruby Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hash-entry-order"&gt;6️⃣ Hash Entry Order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-delete-a-hash-entry"&gt;7️⃣ How to delete a Hash entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-access-values-from-a-hash"&gt;8️⃣ How to Access Values From a Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extract-a-nested-hash-value"&gt;9️⃣ Extract a nested Hash value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hash-keys-101"&gt;🔟 Hash Keys 101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#default-values"&gt;1️⃣1️⃣ Default Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-merge-two-ruby-hashes"&gt;1️⃣2️⃣ How to Merge Two Ruby Hashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiple-hash-values-for-one-key"&gt;1️⃣3️⃣ Multiple Hash values for one key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#get-all-keys-and-values-from-a-hash"&gt;1️⃣4️⃣ Get All Keys and Values From a Hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#check-if-key-exists-in-hash"&gt;1️⃣5️⃣ Check if key exists in hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-change-a-hash-to-array"&gt;1️⃣6️⃣ How to change a Hash to Array&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#hash-data-syntax"&gt;
  &lt;/a&gt;
  ✅ Hash Data Syntax
&lt;/h2&gt;

&lt;p&gt;Hash has three Syntax style as &lt;em&gt;Ruby 3.0&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;1) &lt;code&gt;hash rocket =&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;hashy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:baz&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;hashy&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) &lt;code&gt;JSON-style syntax&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;hashy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;baz: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;hashy&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;2} &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; The Hash key become a &lt;code&gt;Symbol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; You will get an &lt;strong&gt;error&lt;/strong&gt; if you use the key that's not a bareword or a String&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Raises SyntaxError (syntax error, unexpected ':', expecting =&amp;gt;):
hashy = {0: 'zero'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) &lt;code&gt;String&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;hashy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'baz'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;hashy&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;2} &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; same like number 2. But the key is change to the &lt;code&gt;String&lt;/code&gt;, instead of symbol.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And you can &lt;strong&gt;mix the styles&lt;/strong&gt;;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;hashy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'baz'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;hashy&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-use-case-of-using-hash"&gt;
  &lt;/a&gt;
  ✅ Common use case of using Hash
&lt;/h2&gt;

&lt;p&gt;1) Give names to objects&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;author: &lt;/span&gt;&lt;span class="s2"&gt;"Daniel J. Levitin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"This is Your Brain on Music}"&lt;/span&gt;
&lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:author=&amp;gt;"Daniel J. Levitin", :title=&amp;gt;"This is Your Brain on Music"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Give names to method arguments&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;baz: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) initialize an object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;
  &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:author&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;book1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;author: &lt;/span&gt;&lt;span class="s1"&gt;'Daniel J. Levitin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"'This is Your Brain on Music')"&lt;/span&gt;
&lt;span class="n"&gt;book1&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; #&amp;lt;Book: @author="Daniel J. Levitin", @title="This is Your Brain on Music"&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4) Get the frequency from a list of numbers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;freq_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_with_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;freq_hash&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;# {1=&amp;gt;3, 2=&amp;gt;1, 4=&amp;gt;1, 65=&amp;gt;1, 55=&amp;gt;2, 54=&amp;gt;1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another tricks is using &lt;code&gt;tally&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tally&lt;/span&gt;
&lt;span class="c1"&gt;# output&lt;/span&gt;
&lt;span class="c1"&gt;# {1=&amp;gt;3, 2=&amp;gt;1, 4=&amp;gt;1, 65=&amp;gt;1, 55=&amp;gt;2, 54=&amp;gt;1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; This is for &lt;strong&gt;Ruby 2.7+&lt;/strong&gt; only. :P&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;5) Specify &lt;code&gt;routes&lt;/code&gt; in Ruby on Rails&lt;/p&gt;

&lt;p&gt;This is a line from the &lt;code&gt;config/routes.rb&lt;/code&gt; file, the Router in a Rails application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# defines a GET route mapped to the new action in the PostsController&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/posts/new'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'posts#new'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example of the above could be rewritten as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/new'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'posts#new'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Hash is the second parameter passed to the &lt;code&gt;get(...)&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-hash"&gt;
  &lt;/a&gt;
  ✅ How to Create a Hash
&lt;/h2&gt;

&lt;p&gt;Here are three ways to create a Hash:&lt;/p&gt;

&lt;p&gt;1) Method &lt;code&gt;Hash.new&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can create a Hash by calling method &lt;code&gt;Hash.new&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="c1"&gt;#Define empty hash&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {}&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Hash&lt;/span&gt;

&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:first&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:second&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:third&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:first=&amp;gt;10, :second=&amp;gt;20, :third=&amp;gt;30}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Method &lt;code&gt;Hash[]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can create a Hash by calling method &lt;code&gt;Hash[]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create an empty Hash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a Hash with initial entries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;baz: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Literal form &lt;code&gt;{}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can create a Hash by using its literal form (curly braces).&lt;/p&gt;

&lt;p&gt;Create an empty Hash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a Hash with initial entries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;baz: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-or-update-a-hash-value"&gt;
  &lt;/a&gt;
  ✅ How to create or update a Hash value
&lt;/h2&gt;

&lt;p&gt;We can use instance method &lt;code&gt;[]=&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;baz: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:bat&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 3&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;2, :bat=&amp;gt;3}&lt;/span&gt;

&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 4&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;4, :bar=&amp;gt;1, :baz=&amp;gt;2, :bat=&amp;gt;3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#values-in-a-ruby-hash"&gt;
  &lt;/a&gt;
  ✅ Values in a Ruby Hash
&lt;/h2&gt;

&lt;p&gt;Values can be any Ruby &lt;code&gt;Object&lt;/code&gt;. Including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Strings&lt;/li&gt;
&lt;li&gt;Integers &amp;amp; Floats&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note&lt;/strong&gt; Keys are unique, you can only have one &lt;code&gt;:foo&lt;/code&gt; key, or one &lt;code&gt;:bar&lt;/code&gt; key. When you add the same key twice, the latter will &lt;strong&gt;override&lt;/strong&gt; the former value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hash-entry-order"&gt;
  &lt;/a&gt;
  ✅ Hash Entry Order
&lt;/h2&gt;

&lt;p&gt;A Hash object presents its entries in the &lt;strong&gt;order of their creation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A new Hash has its &lt;strong&gt;initial ordering&lt;/strong&gt; per the given entries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;New entries are added at the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:baz&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Updating a value does not affect the order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:baz&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :bar=&amp;gt;1, :baz=&amp;gt;3}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But re-creating a deleted entry can affect the order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:bar=&amp;gt;1, :baz=&amp;gt;3, :foo=&amp;gt;5}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-delete-a-hash-entry"&gt;
  &lt;/a&gt;
  ✅ How to delete a Hash entry
&lt;/h2&gt;

&lt;p&gt;The simplest way is using instance method &lt;code&gt;delete&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;baz: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 1&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {:foo=&amp;gt;0, :baz=&amp;gt;2}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-access-values-from-a-hash"&gt;
  &lt;/a&gt;
  ✅ How to Access Values From a Hash
&lt;/h2&gt;

&lt;p&gt;Hash value/element are &lt;strong&gt;access by particular key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The simplest way to retrieve a Hash value is using instance method &lt;code&gt;[]&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;baz: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also can use &lt;code&gt;fetch&lt;/code&gt; method. It does same as the square bracket lookup &lt;code&gt;[]&lt;/code&gt;, but it will raise an &lt;code&gt;error&lt;/code&gt; &lt;strong&gt;if the key is not defined&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;irb&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"one"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"satu"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;#Malay language 🇲🇾&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"satu"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="ss"&gt;found: &lt;/span&gt;&lt;span class="s2"&gt;"two"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can prevent this error using the &lt;a href="#default-values"&gt;default value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extract-a-nested-hash-value"&gt;
  &lt;/a&gt;
  ✅ Extract a nested Hash value
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;dig&lt;/code&gt; is handy for nested &lt;code&gt;Hash&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;baz: &lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;}}}&lt;/span&gt;

&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:baz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# =&amp;gt; 11&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:zot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:xyz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;

&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;            &lt;span class="c1"&gt;# =&amp;gt; 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; This is only for &lt;strong&gt;Ruby 2.3+&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hash-keys-101"&gt;
  &lt;/a&gt;
  ✅ Hash Keys 101
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#hash-key-equivalence"&gt;
  &lt;/a&gt;
  Hash Key Equivalence
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;From Documentation&lt;/strong&gt;: Two objects are treated as the same &lt;code&gt;hash&lt;/code&gt; key when their hash value is identical and the two objects are &lt;code&gt;eql?&lt;/code&gt; to each other.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eql?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modifying-an-active-hash-key"&gt;
  &lt;/a&gt;
  Modifying an Active Hash Key
&lt;/h3&gt;

&lt;p&gt;Modifying a Hash key while it is in use &lt;strong&gt;damages the hash index&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This Hash has keys that are Arrays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;a0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bar&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:baz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:bat&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hash&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 110002110&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Modifying array element &lt;code&gt;a0[0]&lt;/code&gt; changes its hash value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:bam&lt;/span&gt;
&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hash&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 1069447059&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And damages the Hash index:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can repair the hash index using method &lt;code&gt;rehash&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rehash&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; {[:bam, :bar]=&amp;gt;0, [:baz, :bat]=&amp;gt;1}&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;code&gt;String&lt;/code&gt; key is always safe. That's because an unfrozen &lt;code&gt;String&lt;/code&gt; passed as a key will be replaced by a duplicated and frozen String:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;frozen?&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;first_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
&lt;span class="n"&gt;first_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;frozen?&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#default-values"&gt;
  &lt;/a&gt;
  ✅ Default values
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;By default&lt;/strong&gt;, accessing a key which has not been added to the hash returns &lt;code&gt;nil&lt;/code&gt;, meaning it is &lt;em&gt;always safe to attempt to look up a key's value&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;my_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;my_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hashes can also contain keys in &lt;code&gt;strings&lt;/code&gt;. If you try to access them normally it will just return a &lt;code&gt;nil&lt;/code&gt;, instead you access them by their &lt;strong&gt;string keys&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;my_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"asyraf"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;my_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;span class="n"&gt;my_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;# =&amp;gt; asyraf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can retrieve the default value with method &lt;code&gt;default&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can set the default value by passing an argument to method &lt;code&gt;Hash.new&lt;/code&gt; or with method &lt;code&gt;default=&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 100&lt;/span&gt;

&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 99&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-merge-two-ruby-hashes"&gt;
  &lt;/a&gt;
  ✅ How to Merge Two Ruby Hashes
&lt;/h2&gt;

&lt;p&gt;I think you can guess the method name :p. Tadaaaa, we will use &lt;code&gt;merge&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;a: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;b: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;c: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;preferences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;c: &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;merge!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preferences&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# {:a=&amp;gt;1, :b=&amp;gt;2, :c=&amp;gt;4}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that because &lt;strong&gt;keys are unique&lt;/strong&gt;, &lt;em&gt;newer values overwrite older values&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-hash-values-for-one-key"&gt;
  &lt;/a&gt;
  ✅ Multiple Hash values for one key
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Malaysia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;food: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"Nasi Lemak"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Roti Canai"&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="ss"&gt;city: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"Kuala Lumpur"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"Malacca City"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"George Town"&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="no"&gt;Malaysia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:city&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;Malaysia[:city]&lt;/code&gt; gives you an array &amp;amp; &lt;code&gt;[1]&lt;/code&gt; gives you the 2nd element from that array.&lt;/p&gt;

&lt;p&gt;The key is a symbol &amp;amp; the values are arrays. When you access the hash, you get an array back which you access normally, like any other array.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-all-keys-and-values-from-a-hash"&gt;
  &lt;/a&gt;
  ✅ Get All Keys and Values From a Hash
&lt;/h2&gt;

&lt;p&gt;If you want a list of all the keys, good news, there is a method for that!&lt;/p&gt;

&lt;p&gt;Here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;
&lt;span class="c1"&gt;# [:foo, :bar]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There’s also a method for values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;foo: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;bar: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;
&lt;span class="c1"&gt;# [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-if-key-exists-in-hash"&gt;
  &lt;/a&gt;
  ✅ Check if key exists in hash
&lt;/h2&gt;

&lt;p&gt;If you want to know if a key exists in a hash, use the &lt;code&gt;key?&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;hash_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'Country'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"Malaysia"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'Food'&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"Nasi Lemak"&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;hash_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;key?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Country"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#true&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;hash_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;key?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Code"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-change-a-hash-to-array"&gt;
  &lt;/a&gt;
  ✅ How to change a Hash to Array
&lt;/h2&gt;

&lt;p&gt;We can do &lt;code&gt;Hash&lt;/code&gt; 🔁 &lt;code&gt;Array&lt;/code&gt;. Converting a hash of key/value pairs into an array will produce an array containing &lt;strong&gt;nested arrays for pair&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:b&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;to_a&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [[:a, 1], [:b, 2]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the opposite direction a &lt;code&gt;Hash&lt;/code&gt; can be created from an &lt;code&gt;array&lt;/code&gt; of the same format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="ss"&gt;:x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;&lt;span class="nf"&gt;to_h&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; { :x =&amp;gt; 3, :y =&amp;gt; 4 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, Hashes can be initialized using &lt;code&gt;Hash[]&lt;/code&gt; and a list of alternating keys and values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; { :a =&amp;gt; 1, :b =&amp;gt; 2 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or from an array of arrays with two values each:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="ss"&gt;:x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; { :x =&amp;gt; 3, :y =&amp;gt; 4 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hashes can be converted back to an &lt;code&gt;Array&lt;/code&gt; of alternating keys and values using &lt;code&gt;flatten()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:b&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [:a, 1, :b, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="#top"&gt;Back to the top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Super cool&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pretty cool, hah... 😎&lt;/p&gt;

&lt;p&gt;There are other cool stuff on Ruby Hash. But as i said, this is just a level of most of people dive in. &lt;/p&gt;

&lt;p&gt;Maybe for specific tricks like Hash iteration, sorting and other methods for future articles :P.&lt;/p&gt;

&lt;p&gt;And probably this is my notes about Ruby Hash, I will add new stuff as I get new knowledge or experience with it.&lt;/p&gt;

&lt;p&gt;Thank you for traveling with me 🚀, I hope you enjoyed the journey 🔥.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The End&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.rubyguides.com/2020/05/ruby-hash-methods/"&gt;1&lt;/a&gt;, &lt;a href="https://rubyapi.org/3.0/o/hash"&gt;2&lt;/a&gt;, &lt;a href="https://kalkicode.com/ruby/ruby-hash"&gt;3&lt;/a&gt;, &lt;a href="http://ruby-for-beginners.rubymonstas.org/built_in_classes/hashes.html"&gt;4&lt;/a&gt;, &lt;a href="https://riptutorial.com/ruby/topic/288/hashes"&gt;5&lt;/a&gt;, &lt;a href="https://outline.com/jTTW9U"&gt;6&lt;/a&gt;, &lt;a href="https://medium.com/epfl-extension-school/introduction-to-hashes-in-ruby-and-in-rails-be8ac5d4f58a"&gt;7&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>datastructure</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top UI frameworks for React</title>
      <author>Anjan Shomodder</author>
      <pubDate>Fri, 25 Jun 2021 01:47:38 +0000</pubDate>
      <link>https://dev.to/thatanjan/top-ui-frameworks-for-react-2gfb</link>
      <guid>https://dev.to/thatanjan/top-ui-frameworks-for-react-2gfb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#top-ui-frameworks-for-react"&gt;
  &lt;/a&gt;
  Top UI frameworks for react
&lt;/h3&gt;

&lt;p&gt;UI libaries are very popular for creating beautiful looking web applications&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#materialui"&gt;
  &lt;/a&gt;
  &lt;a href="http://material-ui.com/"&gt;Material-UI&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;React components for faster and easier web development. Build your own design system, or start with Material Design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t7c0TdLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyh7dbdqyzm729cop57j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7c0TdLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fyh7dbdqyzm729cop57j.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lSz4NUvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5i8e81owqabmoldun2os.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lSz4NUvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5i8e81owqabmoldun2os.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more from &lt;a href="http://material-ui.com/"&gt; Material-UI docs &lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#charkraui"&gt;
  &lt;/a&gt;
  &lt;a href="https://chakra-ui.com/"&gt; Charkra-UI &lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Chakra UI is a simple, modular and accessible component library that gives you the building blocks you need to build your React applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UthU0csq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7azwnl1co89irdd6n3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UthU0csq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7azwnl1co89irdd6n3k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more from &lt;a href="https://chakra-ui.com/"&gt; Charkra-UI docs &lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#react-bootstarp"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-bootstrap.github.io/"&gt; React Bootstarp &lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;React-Bootstrap replaces the Bootstrap JavaScript. Each component has been built from scratch as a true React component, without unneeded dependencies like jQuery.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XkfBsPlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3dcidl8exrxelyv4mf3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XkfBsPlH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3dcidl8exrxelyv4mf3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more from &lt;a href="https://react-bootstrap.github.io/"&gt; React docs &lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#ant-design"&gt;
  &lt;/a&gt;
  &lt;a href="https://ant.design/"&gt;Ant Design&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A design system for enterprise-level products. Create an efficient and enjoyable work experience.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-mnWNaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0elnzwn677e0wbbzrgx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-mnWNaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0elnzwn677e0wbbzrgx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more from &lt;a href="https://ant.design/"&gt; Ant Design &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a lot more libaries available for react. But my favorite one is material-ui. Comment down your favorite ui framework.&lt;/p&gt;

&lt;p&gt;And I am creating a video series on my youtube about how to build a static blogging site using JAMstack.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KYLBb1W1ZBA"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/01q6hHwTuP0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-you-going-to-learn-from-this-video-series"&gt;
  &lt;/a&gt;
  What are you going to learn from this video series?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ReactJS, NextJs&lt;/li&gt;
&lt;li&gt;Static Site Generation&lt;/li&gt;
&lt;li&gt;Dynamic Routing&lt;/li&gt;
&lt;li&gt;Material-ui&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;how to build a real time view counter&lt;/li&gt;
&lt;li&gt;a small search engine with mongodb and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-demo"&gt;
  &lt;/a&gt;
  Project Demo
&lt;/h2&gt;

&lt;p&gt;You can demo the project from &lt;a href="https://jamstack-blog-demo.vercel.app/"&gt; here &lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig-vao6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owol9cfa63vw4n5t2zsr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ig-vao6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/owol9cfa63vw4n5t2zsr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thatanjan/cules-blog-yt"&gt; View the Project code. &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So like, share and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It takes a lot of effort to build those videos.&lt;/p&gt;

&lt;p&gt;If you have any question, put them on the comment section. And also you can connect to me on any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.  I post content there. So stay safe and good bye.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#who-am-i"&gt;
  &lt;/a&gt;
  Who am I?
&lt;/h4&gt;

&lt;p&gt;My name is Anjan. I am a full stack web developer from Dhaka, Bangladesh.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-problems-do-i-solve"&gt;
  &lt;/a&gt;
  What problems do I solve?
&lt;/h4&gt;

&lt;p&gt;I can create complex full stack web applications like social media application, blogging, e-commerce website and many more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;I love to solve problems and develop new ideas. I also enjoy sharing my knowledge to other people who are wiling to learn. That's why I write blog posts and run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#think-we-should-work-together"&gt;
  &lt;/a&gt;
  Think we should work together?
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#feel-free-to-contact-me"&gt;
  &lt;/a&gt;
  Feel free to contact me
&lt;/h5&gt;

&lt;p&gt;Email: &lt;a href="mailto:anjancules@gmail.com"&gt;anjancules@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;portofolio: &lt;a href="https://anjan.vercel.app/"&gt;anjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-my-channel"&gt;
  &lt;/a&gt;
  About My channel:
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#why-would-you-subscribe-to-cules-coding"&gt;
  &lt;/a&gt;
  Why would you subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt; Cules Coding &lt;/a&gt; will teach you full stack development. I will teach you not only the basic concepts but also the advanced concepts that other youtube channels don't cover. I will also teach you Data Structures and Algorithms with abstraction and without Math. You will also find many tutorials about developer tools and technologies. I also explain advanced concepts and technologies with simplicity.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-what-are-you-waiting-for"&gt;
  &lt;/a&gt;
  So what are you waiting for?
&lt;/h4&gt;

&lt;p&gt;Subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;&lt;br&gt;
so that my friend you don't miss any of these cool stuffs.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>Create Horrible Console Messages with CSS</title>
      <author>Bear Evans</author>
      <pubDate>Fri, 25 Jun 2021 01:44:19 +0000</pubDate>
      <link>https://dev.to/bearevans/create-horrible-console-messages-with-css-4ob1</link>
      <guid>https://dev.to/bearevans/create-horrible-console-messages-with-css-4ob1</guid>
      <description>&lt;p&gt;Are you tired of reading debug messages featuring the same Courier New 10px font over and over again? Do you want to color code your error messages or console logs by code block? Do you want to remind people inspecting your web app of the lawless days of Myspace?&lt;/p&gt;

&lt;p&gt;Well now you can.&lt;/p&gt;

&lt;p&gt;Most modern browsers support styling console messages with CSS. All you have to do is prefix your message with %c and pass whatever styling you want as a second argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("This is a normal message.");
console.log(
  "%cThis message is big and scary!",
  "color: red; background-color: black; font-size: 16px"
);
console.log("This message is not.");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, the above code results in the following output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWfieXbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phqo2ypisp94cqyeqgz8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWfieXbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phqo2ypisp94cqyeqgz8.png" alt="Big Scary Console Message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even define styling in variables and use template literals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const style = `
    color:white;
    background: linear-gradient(312deg, rgba(255,0,0,1) 0%, rgba(241,255,0,1) 15%, rgba(0,255,12,1) 30%, rgba(0,254,255,1) 43%, rgba(0,1,255,1) 59%, rgba(250,0,253,1) 88%, rgba(255,0,0,1) 100%);
    border: 1px solid white;
    padding: 5px;
    font-family: "Comic Sans MS";
    font-size: 16px;
`;

console.error(
  `%c🌈💖 An error has occurred. Everything is ruined forever. 💖🌈`,
  `${style}`
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fqazJAF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fc38d5dfbsm5i26l8tr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fqazJAF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fc38d5dfbsm5i26l8tr.png" alt="Rainbow Colored Error Message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It really helps soften the blow, don’t you think?&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>🎬Neumorphism Login Form | HTML &amp; CSS✨</title>
      <author>Robson Muniz</author>
      <pubDate>Fri, 25 Jun 2021 01:19:15 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/neumorphism-login-form-html-css-hef</link>
      <guid>https://dev.to/robsonmuniz16/neumorphism-login-form-html-css-hef</guid>
      <description>&lt;p&gt;We will explore the new neumorphism trend and create a "Neumorphism Login Form" using that trend.&lt;br&gt;
So, in this video, you will learn how to use this trend and create a “Neumorphism Login Form | HTML &amp;amp; CSS ”(No JavaScript).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#well-walk-you-through-stepbystep-on-how-to-create-it-and-how-to-add-it-to-your-websites"&gt;
  &lt;/a&gt;
    We'll walk you through step-by-step on how to create it and how to add it to your websites.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/QWh0S-3D7uY"&gt;https://youtu.be/QWh0S-3D7uY&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
      <category>neumorphism</category>
    </item>
    <item>
      <title>Las 15 mejores extensiones para VSCode (2021)</title>
      <author>Gastón Danielsen</author>
      <pubDate>Thu, 24 Jun 2021 23:33:15 +0000</pubDate>
      <link>https://dev.to/gdcodev/las-15-mejores-extensiones-para-vscode-2021-430n</link>
      <guid>https://dev.to/gdcodev/las-15-mejores-extensiones-para-vscode-2021-430n</guid>
      <description>&lt;p&gt;En esta ocasión te mostraré las 15 extensiones que debes instalar en Visual Studio Code para sacarle el máximo  provecho y así facilitar tu trabajo día a día como desarrollador.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aqu%C3%AD-est%C3%A1n-las-extensiones-de-vscode-que-cubriremos"&gt;
  &lt;/a&gt;
  Aquí están las extensiones de VSCode que cubriremos:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;PRETTIER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Auto Close Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Auto Rename Tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4"&gt;Material Icon Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5"&gt;Bracket Pair Colorizer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6"&gt;Better Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7"&gt;LIVE SERVER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8"&gt;LIVE SHARE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9"&gt;GITLENS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10"&gt;SNAPCODE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#11"&gt;Settings Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12"&gt;Code Spell Checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13"&gt;Import Cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#14"&gt;Markdown All in One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#15"&gt;Path Intellisense&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;PRETTIER&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Formatea tu código de manera automática.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uk76RTFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrj79eby083lkhs95ouc.png" alt="prettier"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auto Close Tag&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Tiene soporte de etiqueta cerrada para archivos.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w813M8JA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1gn7g00dahciou56f9le.png" alt="auto close tag"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auto Rename Tag&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Cambia automáticamente el nombre de una etiqueta. Ahorra tiempo al renombrar una etiqueta.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCmV58T7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dtk9347wl9eab3z5hrj.png" alt="auto rename tag"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Material Icon Theme&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Con este tema tendrás un entorno limpio, minimalista y atractivo.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gw9MH6FK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvjsxf422hme9h2m8iga.png" alt="material icon theme"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bracket Pair Colorizer&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Permite identificar los corchetes correspondientes con colores.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hp36eyiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e17f3tfgcibr9j1r8kx7.png" alt="bracket pair colorize"&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Better Comments&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt; Podrás darle color a tus comentarios.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suLtQGv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6fs2x2pgzc2ovf0fze1.png" alt="better comments"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;LIVE SERVER&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Server local en tiempo real de nuestra pagina.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RCQN-zk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk6qvu52v6l6c042jeoe.png" alt="live server"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;LIVE SHARE&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Trabaja en tiempo real en el mismo código.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9y20ojH6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r80dm836cmodtj3gb7a8.png" alt="live share"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GITLENS&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Historial de quien ha editado un fragmento de código en GIT.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pf0oNz8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjya8m94q1ls0demzifm.png" alt="gitlens"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SNAPCODE&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Capturas de pantalla profesional.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubnK1-ix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bd4mdxf9w14jhqk4ak8z.png" alt="snapcode"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Settings Sync&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Permite sincronizar el estado de su VSCode entre varias instancias.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mjM6TTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/90ttm86as5kz6gtfjobf.png" alt="setting sync"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code Spell Checker&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Nos ayuda a detectar errores ortográficos.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfUBCEMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xef7oo534aq9d6wktxz3.png" alt="code spell checker"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Import Cost&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Ayuda con la productividad al mostrar el tamaño estimado de un paquete de importación.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2FifSBgj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwq5q9wpoxu9lwe9i0zi.png" alt="import cost"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Markdown All in One&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Es una extensión muy útil para todo lo relacionado con Markdown.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ui32FQey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwq8jrtnt21h3siu6e9z.png" alt="markdown all in one"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Path Intellisense&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Esta extensión le ayuda a completar automáticamente la ruta de las importaciones.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--834Ylulp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7nwpy6chaltw7v2ehny.png" alt="path intellisense"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Repositorio de Git: &lt;a href="https://github.com/gdcodev/extensiones-vscode"&gt;https://github.com/gdcodev/extensiones-vscode&lt;/a&gt;&lt;br&gt;
📌 Mis Redes: &lt;a href="https://www.facebook.com/gdcode7"&gt;Facebook&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/gastondanielsen/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/gdcodev"&gt;GitHub&lt;/a&gt; &lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🧑‍💻 How I developed my portfolio for a month 🗓 + Demo 🍿</title>
      <author>Roden</author>
      <pubDate>Thu, 24 Jun 2021 23:30:41 +0000</pubDate>
      <link>https://dev.to/kerthin/how-i-developed-my-portfolio-for-a-month-demo-3ee7</link>
      <guid>https://dev.to/kerthin/how-i-developed-my-portfolio-for-a-month-demo-3ee7</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Link to the DEMO at the end&lt;/strong&gt;&lt;br&gt;
Today I would like to share with you my experience in developing a personal portfolio. I understand that many of you immediately wondered after reading the title. &lt;code&gt;And why spend so much time developing a portfolio at all?&lt;/code&gt;      &lt;code&gt;After all, you just need to create a small one-page website and add all the information about yourself and your works there.&lt;/code&gt; And here I definitely agree with you that if you are developing a business card website, then this is quite a working option. You don't even have to spend a few days developing such a site. Such a site can be developed in 4-6 hours.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;But I set myself a different task&lt;/code&gt;. I wanted to create a portfolio that would show with its appearance what kind of developer I am and what I am capable of. I wanted to use animations, build complex objects using HTML and CSS, make smooth transitions between pages, choose bright colors for the site.  But at the same time, of course, I did not want to make a site from the nineties, which usually caused users to have epilepsy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fJKG1UTK7k64w/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fJKG1UTK7k64w/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I wanted my portfolio to be something like a picture that I painted like an artist.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn't want to fill my site with boring and monotonous text content. Let's be honest. No one cares what you like to eat in the morning and for dinner, no one cares what TV shows and movies are your favorite, what games you play and how you spend your time. &lt;code&gt;The employer is not even interested in whether you watch anime?&lt;/code&gt; &lt;strong&gt;This is assumed by default.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ayMW3eqvuP00o/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ayMW3eqvuP00o/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I decided to focus on the appearance of the site. &lt;strong&gt;Therefore, the first thing we will discuss with you is the design.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;Design&lt;/h1&gt;

&lt;h3&gt;1. Colors&lt;/h3&gt;

&lt;p&gt;The first step is to discuss the colors that I decided to use in my project.&lt;br&gt;
This is:&lt;br&gt;
&lt;strong&gt;Vinous&lt;/strong&gt;: &lt;code&gt;#9b2d30&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNbetAzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9wppnl0euagvjqnf5jq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNbetAzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9wppnl0euagvjqnf5jq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and &lt;strong&gt;Beige&lt;/strong&gt;: &lt;code&gt;#f7e0b5&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---HzcFhLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la37v184g4vwas0qv2l2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---HzcFhLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la37v184g4vwas0qv2l2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have long dreamed of using these colors together, but unfortunately I could not do it at work and so finally I decided to use them in my personal portfolio.&lt;/p&gt;

&lt;p&gt;I think that these colors are very well in &lt;code&gt;harmony with each other&lt;/code&gt;. And in the future we will have to use many more colors, but more on this later in the following chapters.&lt;/p&gt;

&lt;h3&gt;2. Pages&lt;/h3&gt;

&lt;p&gt;As for the pages, I decided to make them only 2. This is the &lt;code&gt;home page&lt;/code&gt; where my photo, brief information about me and links to my social networks will be placed so that people can contact me. On the second page, I decided to arrange my &lt;code&gt;works&lt;/code&gt;, which can be viewed with the help of a &lt;code&gt;special presentation&lt;/code&gt; (more on this later).&lt;/p&gt;

&lt;h3&gt;3. Style&lt;/h3&gt;

&lt;p&gt;I decided to design the appearance of the site in a minimalistic style. I didn't want a large number of unnecessary photos and the like to be present on the site. I wanted the site to look seasoned and concise. Therefore, I decided to use &lt;code&gt;Flat design&lt;/code&gt; as the design of the portfolio elements.&lt;/p&gt;

&lt;h3&gt;4. Animation&lt;/h3&gt;

&lt;p&gt;As for animations, here is the same approach as with the style of elements. Animations should look appropriate, and be combined with all their surrounding elements. Animations and static elements on the site should &lt;code&gt;look like a single whole&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/10jYR6HT60em2s/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/10jYR6HT60em2s/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Perfect!&lt;/strong&gt; 👌&lt;/p&gt;

&lt;h1&gt;Technologies&lt;/h1&gt;

&lt;p&gt;Before we go any further, I should tell you what tools I used for development.&lt;/p&gt;

&lt;h3&gt;1. HTML&lt;/h3&gt;

&lt;p&gt;To create a &lt;code&gt;DOM&lt;/code&gt; structure, I decided to use the &lt;code&gt;PUG&lt;/code&gt; preprocessor. It significantly helped me reduce the amount of code due to the ability to use &lt;code&gt;loops&lt;/code&gt; and &lt;code&gt;mixins&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;2. CSS&lt;/h3&gt;

&lt;p&gt;To create styles for elements, I preferred to use the &lt;code&gt;SASS&lt;/code&gt; preprocessor with &lt;code&gt;SCSS&lt;/code&gt; syntax. I did this for the same reason as with the &lt;code&gt;PUG&lt;/code&gt; preprocessor.&lt;/p&gt;

&lt;h3&gt;3. JavaScript&lt;/h3&gt;

&lt;p&gt;To create animations, I needed to use three &lt;code&gt;JS libraries&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TweenMax.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Anime.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Revealer.js&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Home Page&lt;/h1&gt;

&lt;p&gt;Finally, we can start analyzing the pages of the portfolio itself directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/CkqpoOOS0BCQU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/CkqpoOOS0BCQU/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I started working through the DOM structure and it came to the section where my photo should have been, I thought for a while and asked myself this question. &lt;code&gt;Why would I just insert my photo?&lt;/code&gt; I thought it was too easy for me. &lt;code&gt;Is it really impossible to use this place more effectively, instead of just occupying this place with a photo?&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Moreover, I do not like to be photographed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/KCdXOVBvvEqeWzFNf8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/KCdXOVBvvEqeWzFNf8/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here I would like to return to my recent quote.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I wanted my portfolio to be something like a picture that I painted like an artist.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I thought that I would be able to apply my own knowledge of HTML and CSS in order to simply &lt;code&gt;draw myself&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And I started a difficult job. 🥷&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT39D7GQo1m3LatZyU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT39D7GQo1m3LatZyU/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;1. Step One&lt;/h3&gt;

&lt;p&gt;At first it was not easy, but the most important thing is to find an avatar layout on the Internet that you could be inspired by when creating your own &lt;code&gt;CSS portrait&lt;/code&gt;. (CSS portrait - sounds strange)&lt;/p&gt;

&lt;p&gt;And here's what happened:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CodePen:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/rNjabrd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It took me about 6 - 7 hours to create it. This is taking into account the fact that I had to spend a lot of time searching for good examples of avatars on the Internet.&lt;/p&gt;

&lt;h3&gt;2. Step Two&lt;/h3&gt;

&lt;p&gt;In general, I was satisfied with the result, but the avatar itself, as you can see, is &lt;code&gt;small&lt;/code&gt; in size, and the image that the avatar was intended to replace was &lt;code&gt;large&lt;/code&gt; in size.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Moreover, the avatar merged colors with the background.&lt;/strong&gt; 😂&lt;br&gt;
&lt;a href="https://i.giphy.com/media/RJ8ZAMdif76RF0YRMu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/RJ8ZAMdif76RF0YRMu/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, I decided to create a &lt;code&gt;special environment&lt;/code&gt; around the avatar to fill the &lt;code&gt;empty space&lt;/code&gt; in the place of which the &lt;code&gt;photo&lt;/code&gt; should have been.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And later I decided to animate this very environment to make the picture look more lively.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And here's what happened:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CodePen:&lt;/strong&gt; (See in the format &lt;code&gt;0.5x&lt;/code&gt;)&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/yLgvGYp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rELE07XG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21go21d2k1n2aqa0kawf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rELE07XG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21go21d2k1n2aqa0kawf.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have already posted this work on my very first post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/codepen-css-illustration-animation-8lo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CodePen - CSS Illustration (Animation)&lt;/h2&gt;
      &lt;h3&gt;Roden ・ May 19 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;3. Step Three&lt;/h3&gt;

&lt;p&gt;Next, I needed to create a text with brief information about myself (who I am and where I live). Here I decided to use a &lt;code&gt;straight font&lt;/code&gt;, because it fit very well into the overall style.&lt;/p&gt;

&lt;p&gt;Something like that:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QnOxmUQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qvxl859syhorrbm2osc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QnOxmUQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qvxl859syhorrbm2osc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's already coming out well and it pleases.&lt;/p&gt;

&lt;h3&gt;4. Step Four&lt;/h3&gt;

&lt;p&gt;Next, I needed to implement navigation, with which I could switch between the pages of the site. I decided to make it minimalistic and unfixed so that it doesn't follow the window when scrolling. It wasn't necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XGX-aaaC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yqw7k97qrm0730sqhnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XGX-aaaC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yqw7k97qrm0730sqhnn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But do not forget about &lt;code&gt;adaptability&lt;/code&gt;, because what looks good on the &lt;code&gt;desktop&lt;/code&gt; will not look good on the &lt;code&gt;phone&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, I decided to make text links to pages disappear on screens less than &lt;code&gt;900px&lt;/code&gt; and a &lt;code&gt;burger menu&lt;/code&gt; appears.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1FO5CyzMeNVeShtxDF/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1FO5CyzMeNVeShtxDF/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And when you click on the &lt;code&gt;burger menu button&lt;/code&gt;, a &lt;code&gt;Popup menu&lt;/code&gt; appears in which the necessary links to pages and social networks are located.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VlgA2z7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdh8fu79v3vfo0cinetf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlgA2z7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdh8fu79v3vfo0cinetf.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a separate article about this burger menu.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/burger-popup-menu-anime-js-38lo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Burger Popup Menu (anime.js) 🍔&lt;/h2&gt;
      &lt;h3&gt;Roden ・ May 23 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CodePen:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/QWpKwmb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;5. Step Five&lt;/h3&gt;

&lt;p&gt;I decided to attach links to my social networks and email to the lower edges of the screen. I also added &lt;code&gt;position: fixed;&lt;/code&gt; to them so that they follow the screen when scrolling.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZsDxdSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amz7jghgx67l0lmhnnu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZsDxdSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amz7jghgx67l0lmhnnu2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;6. Step Six&lt;/h3&gt;

&lt;p&gt;And the last thing I decided to do on the home page is to describe my personal qualities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/LTyOTsYnsgidO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/LTyOTsYnsgidO/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, I decided to use icons. Quite a logical action. Describing your personal qualities, visualizing it all with icons.&lt;/p&gt;

&lt;p&gt;But here, too, I later wondered. I told myself. So stop, stop, stop, stop, wait a minute? Can't you draw such icons yourself? Yes, it will not be easy, but it is possible, right? Aren't you tired of these static images that you can find on a million other sites? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After thinking about all this a little more, I still decided to get down to business.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And I started drawing again, but this time icons.&lt;/strong&gt; 🥷&lt;br&gt;
&lt;a href="https://i.giphy.com/media/xT39D7GQo1m3LatZyU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT39D7GQo1m3LatZyU/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here's what I got. Oh, I forgot to add that I also wanted to animate them. I love doing this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGZg6lhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r0qj1s3qibei8gjrwpz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGZg6lhp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9r0qj1s3qibei8gjrwpz.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also did a separate article about them.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/codepen-css-icons-animation-3c1e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CodePen - CSS Icons (Animation)&lt;/h2&gt;
      &lt;h3&gt;Roden ・ May 21 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CodePen:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/QWddOgw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It remained only to add the text to them and that was all. The home page will be finished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/SnyN7e9cgyLW7u6si3/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SnyN7e9cgyLW7u6si3/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;7. Step Seven&lt;/h3&gt;

&lt;p&gt;Well, the end of creating a home page has come. It took me a little less than three weeks to create it. Yes, yes, do not be surprised, because it is not so easy to create everything that has been described from the first time. And before we go to the second page, I suggest you take a look at the result.&lt;/p&gt;

&lt;h1&gt;Home Page CodePen Demo:&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Astap/embed/vYxwBWj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;Oh my God&lt;/h1&gt;, `6500` lines of `SCSS` code, and this is taking into account `loops` and `mixins` that shorten the code. Without them, there would probably be `7500` or `8000` lines of code. But there is still a portfolio page ahead.

&lt;h1&gt;Portfolio Page&lt;/h1&gt;

&lt;p&gt;With the portfolio page, everything was simpler, it was no longer necessary to come up with a style for the pages. But there was another problem. You see, when demonstrating my works, I planned that each work would have its own page separately. But I quickly realized that I don't want to produce a &lt;code&gt;large number of identical html files&lt;/code&gt;. And what will happen in a couple of years when the number of works will become significantly more?&lt;/p&gt;

&lt;p&gt;And I decided to create a section for the presentation of my works right on the page with my exhibited projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZC0ATzzJnKqn2SNDHR/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZC0ATzzJnKqn2SNDHR/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This section of the presentation was supposed to work according to the following principle:&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;1.&lt;/strong&gt; You click on a special card for any project;&lt;br&gt;
&lt;strong&gt;2.&lt;/strong&gt; The presentation opens according to the principle of the &lt;code&gt;Popup menu&lt;/code&gt;, only in the case of a presentation it opens on the &lt;code&gt;right&lt;/code&gt;, not on &lt;code&gt;top&lt;/code&gt;;&lt;br&gt;
&lt;strong&gt;3.&lt;/strong&gt; The content of the presentation itself is filled in depending on the project that you selected by clicking on the card, and all data about the project is stored in an array&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's how it works:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/sYMq2uwh8ODKp0B7AU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/sYMq2uwh8ODKp0B7AU/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To &lt;code&gt;close the presentation&lt;/code&gt;, click on the &lt;code&gt;round button&lt;/code&gt; in the upper-left corner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Close Button&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/lprXQkFH0AfpK3CoZd/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lprXQkFH0AfpK3CoZd/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have already created a separate article about this presentation.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/awesome-developer-portfolio-page-for-your-projects-responsive-2npp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔥Awesome Developer Portfolio Page for your Projects 📱 (responsive)&lt;/h2&gt;
      &lt;h3&gt;Roden ・ Jun 6 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Mini CodePen Demo:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Astap/embed/JjWvVWj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;Finishing touches&lt;/h1&gt;

&lt;p&gt;Well, that's it, the portfolio is ready. It remains only to add small details. Namely, the &lt;code&gt;preloader&lt;/code&gt;. You see, what's the matter, there are a &lt;code&gt;huge number of elements&lt;/code&gt; on the site that need a &lt;code&gt;little time to load&lt;/code&gt;, and in order not to observe the loading of elements, a &lt;code&gt;small preloader&lt;/code&gt; is needed.&lt;/p&gt;

&lt;p&gt;And also add a small animation of the elements surfacing to give the site a light &lt;code&gt;elegance&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/jQ8ZaBz7M2drhJ4Fvr/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/jQ8ZaBz7M2drhJ4Fvr/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially, I made a preloader on which the word "Welcome" appears using SVG, but I quickly realized that this may look good, but it certainly won't work as a preloader for my site. &lt;code&gt;Because it's a very long time.&lt;/code&gt; &lt;strong&gt;10 seconds!!!&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/21uMqkDXYe0N8w73qO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/21uMqkDXYe0N8w73qO/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, I decided to abandon the word animation, and reduce the preloader animation to &lt;code&gt;one second&lt;/code&gt; on &lt;code&gt;both pages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gtcZqfizRVOg0ErPWO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gtcZqfizRVOg0ErPWO/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well that's it.&lt;/p&gt;

&lt;h1&gt;Responsive&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Home Page:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/eNzzfYMnxKAWYAQZsi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/eNzzfYMnxKAWYAQZsi/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Portfolio Page:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/aLKsf0CtF0L61MPquY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/aLKsf0CtF0L61MPquY/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The site is adapted for screen resolutions such as:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;@media 1728px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1600px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1440px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1300px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1180px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 1080px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 960px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 890px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 830px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 720px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 642px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 576px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 414px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 375px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media 320px&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 1025px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 910px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 834px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 768px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 685px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 595px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media iPad (min-width: 415px) and (max-width: 490px) (portrait)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1601px) and (max-width: 5000px) and (max-height: 940px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1441px) and (max-width: 1600px) and (max-height: 700px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1301px) and (max-width: 1440px) and (max-height: 670px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1181px) and (max-width: 1300px) and (max-height: 615px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 1081px) and (max-width: 1180px) and (max-height: 540px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 961px) and (max-width: 1080px) and (max-height: 515px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 891px) and (max-width: 960px) and (max-height: 470px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 720px) and (max-width: 890px) and (max-height: 425px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 376px) and (max-width: 414px) and (max-height: 730px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (min-width: 321px) and (max-width: 375px) and (max-height: 660px)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;@media (max-width: 320px) and (max-height: 560px)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, there were too many &lt;code&gt;@media queries&lt;/code&gt;, this is due to the fact that I used the value &lt;code&gt;vh&lt;/code&gt; for height, these are &lt;code&gt;viewports&lt;/code&gt; for height. Because of this, some elements had to be trimmed sometimes, but don't be too scared.&lt;/p&gt;

&lt;h1&gt;Summing up the results&lt;/h1&gt;

&lt;p&gt;Friends, now it's time to take stock, and calculate how much time it took me to create each individual element and why it ends up being about a month.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Design:&lt;/strong&gt; It took me about &lt;code&gt;3-4 days&lt;/code&gt; of long wanderings on such sites as &lt;code&gt;Behance&lt;/code&gt; and &lt;code&gt;Dribbble&lt;/code&gt; to think about how I want to see my portfolio&lt;br&gt;
&lt;strong&gt;2. CSS Illustration:&lt;/strong&gt; It took me about a &lt;code&gt;week&lt;/code&gt; to create CSS Illustration, well, maybe a little more&lt;br&gt;
&lt;strong&gt;3. Navigation:&lt;/strong&gt; I spent &lt;code&gt;2 days&lt;/code&gt; creating the navigation&lt;br&gt;
&lt;strong&gt;4. Icons:&lt;/strong&gt; I spent a &lt;code&gt;week and a half&lt;/code&gt; creating animated icons, it was not easy&lt;br&gt;
&lt;strong&gt;5. Portfolio Presentation:&lt;/strong&gt; And I spent a &lt;code&gt;week&lt;/code&gt; creating a portfolio and presentations for projects&lt;br&gt;
&lt;strong&gt;6. Preloader:&lt;/strong&gt; I also spent &lt;code&gt;2 days&lt;/code&gt; creating preloaders&lt;/p&gt;

&lt;p&gt;This results in approximately &lt;code&gt;33 days&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;During all this time, &lt;code&gt;900 lines&lt;/code&gt; of code were written on the &lt;code&gt;PUG preprocessor&lt;/code&gt;, &lt;code&gt;9000 lines&lt;/code&gt; of code on &lt;code&gt;SCSS&lt;/code&gt; and &lt;code&gt;565 lines&lt;/code&gt; of code on &lt;code&gt;JS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Comrades&lt;/code&gt;, don't think about it, I'm not bragging. There's nothing to brag about here. I just decided to summarize it in terms of the amount of code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But remember, quantity does not mean quality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/h92pVH9aYqgoA6DJ5v/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/h92pVH9aYqgoA6DJ5v/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Friends, it's time to say goodbye. Thank you for paying attention to my post. My God, I wrote it for about five hours!!! And it feels like no more than two hours have passed. Well, okay, it's not scary. Below is the promised link to the full demo portfolio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kerthin.github.io/portfolio-templateSait/"&gt;&lt;h1&gt;Full Portfolio Demo&lt;/h1&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also download it from my repository&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Kerthin"&gt;
        Kerthin
      &lt;/a&gt; / &lt;a href="https://github.com/Kerthin/portfolio-templateSait"&gt;
        portfolio-templateSait
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;I can advise you to subscribe to my &lt;a href="https://twitter.com/BelichenkoRoden"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;, I also post my work there.&lt;/p&gt;

&lt;p&gt;And finally, I want to say, friends, make such portfolios as you like. If you want to make a business card website without any extraneous elements, animations and other things, then please do it. Or on the contrary, you want to make some highly animated portfolio, or even make a 3d website on three.js then it is completely your right. There are no serious rules that you must follow here. The most important thing is that you like it first of all. And your employer should like your resume.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UD0_p0qY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q31tugoxqe5ci81y238c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UD0_p0qY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q31tugoxqe5ci81y238c.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check out my recent article on the topic of a portfolio for developers.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/kerthin" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEDW7r1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N_Cn4rKT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/634154/b6864fc7-4410-46ca-a11d-bc605dc6d2b1.jpeg" alt="kerthin"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kerthin/10-examples-of-a-good-developer-portfolio-for-your-inspiration-2f88" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Examples of a Good 👩‍💻🧑‍💻 Developer Portfolio 💼 for Your Inspiration 🦄&lt;/h2&gt;
      &lt;h3&gt;Roden ・ Jun 18 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;See you all later.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/fxe8v45NNXFd4jdaNI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fxe8v45NNXFd4jdaNI/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>codepen</category>
    </item>
    <item>
      <title>What Do I Need To Know About React Native Coming From React JS?</title>
      <author>cole-flournoy</author>
      <pubDate>Thu, 24 Jun 2021 22:57:18 +0000</pubDate>
      <link>https://dev.to/coleflournoy/what-do-i-need-to-know-about-react-native-coming-from-react-js-2kp0</link>
      <guid>https://dev.to/coleflournoy/what-do-i-need-to-know-about-react-native-coming-from-react-js-2kp0</guid>
      <description>&lt;p&gt;This post is for the people who are interested in React Native because they have experience with React JS. People who know that being able to develop for mobile and web helps their job prospects &lt;em&gt;but&lt;/em&gt; who also want to know how easy it's going to be before they sink in too much time wading through the &lt;a href="https://reactnative.dev/docs/getting-started"&gt;documentation&lt;/a&gt; (which is actually really good, you should check it out).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Getting React Native set up is incredibly easy, so definitely don't let that stop you. In less than five minutes you can be building out an app that you can see displayed on your own phone. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxYgAMRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceh21mwfbkklv4vj43th.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxYgAMRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceh21mwfbkklv4vj43th.png" alt="Getting started with Expo CLI vs React Native CLI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll be using Expo CLI to get rolling quickly (more on the differences between the two &lt;a href="https://reactnative.dev/docs/environment-setup"&gt;here&lt;/a&gt; and the limitations of using Expo &lt;a href="https://docs.expo.io/introduction/why-not-expo/"&gt;here&lt;/a&gt;). As long as you're on Node 12+, you can install using npm, and create a new project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-g&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;expo-cli&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;expo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MyFirstProject&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;MyFirstProject&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For your most basic setup, that's really it. You're ready at this point to start developing your app (after you read the rest of this post so you know the basic differences between React JS and React Native).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#display-options"&gt;
  &lt;/a&gt;
  Display Options
&lt;/h2&gt;

&lt;p&gt;Running &lt;code&gt;npm start&lt;/code&gt; (or &lt;code&gt;expo start&lt;/code&gt;) works just like with React JS, except the browser window that opens gives you some options for how to render your project. &lt;/p&gt;

&lt;p&gt;You'll see these menu options&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ntDA0bFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3uqpa706gwuy8f7wlib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ntDA0bFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3uqpa706gwuy8f7wlib.png" alt="React Native menu options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As well as a QR code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iasIk0MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsql9ll1mdfp2pqyklo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iasIk0MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzsql9ll1mdfp2pqyklo.png" alt="Link to Avatar the Last Airbender on Netflix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Quickest but least fun option: &lt;strong&gt;Run in web browser&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;This is exactly the same as React JS. A new tab will open and display the welcome message from App.js or whatever you choose to render. Saving automatically updates the code in the browser.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Still pretty quick, definitely really fun option: &lt;strong&gt;QR code&lt;/strong&gt; &lt;br&gt;
&lt;em&gt;If you download the Expo Go app on your mobile device, you can use the QR code scanner in the app (as long as the two devices are on the same network) to display your project on your phone. Once you've scanned it, the app will remember that project so you can go back to it in the future. Honestly, this is my favorite option&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slower setup but probably most practical option: &lt;strong&gt;iOS/Android Simulator&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;The novelty of having it on your own phone is really cool, but for long-term development, looking down at your phone just isn't as efficient as having a simulator/emulator up on the screen right next to your code. To make that happen though you'll need Xcode and Android Studio, which can take a significant amount of time to install and configure for the first time.&lt;/em&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pick the option that's right for your goals, and let's get to the important bit: &lt;strong&gt;Is this just React JS with a couple new twists, or do I have to learn a whole new syntax?&lt;/strong&gt; &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#whats-different-in-react-native"&gt;
  &lt;/a&gt;
  What's Different In React Native?
&lt;/h2&gt;

&lt;p&gt;This is by no means a complete list, but the following are four big differences from React JS that we need to address to get comfortable quickly in React Native. Once you're starting to branch out from the basics, if you need something, there's probably a component for it &lt;a href="https://reactnative.dev/docs/components-and-apis"&gt;here&lt;/a&gt;.   &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#no-html-syntax"&gt;
  &lt;/a&gt;
  No HTML syntax
&lt;/h3&gt;

&lt;p&gt;This is how a basic Welcome component might look in React JS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, I know that everything here that looks like HTML is actually JSX, but the point is that this JSX is trying really hard to match the syntax of HTML. React Native still uses JSX, but none of the HTML-like components are permitted. &lt;/p&gt;

&lt;p&gt;This makes sense since we're no longer developing for the web, but it can still be a bit of an adjustment. To recreate the above function in React Native, we'll have to use some of its &lt;a href="https://reactnative.dev/docs/components-and-apis"&gt;core components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;All of the following components need to be imported by name in order to be used. Don't forget your imports!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#div-becomes-view-scrollview"&gt;
  &lt;/a&gt;
  Div Becomes View / ScrollView
&lt;/h3&gt;

&lt;p&gt;The simple React Native equivalent for a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tag is a &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; component. They behave almost exactly the same (in terms of nesting, styling, etc.), and for our example, switching out the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is pretty quick and painless.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One distinction here is that Views are not scrollable, so if we wanted all, or part, of this Welcome component to be scrollable, we would have to wrap that part of the component in a &lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt; or replace the &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; altogether. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;ScrollViews must have a bounded height to function properly. More on that &lt;a href="https://reactnative.dev/docs/scrollview"&gt;here&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-text-component"&gt;
  &lt;/a&gt;
  The Text Component
&lt;/h3&gt;

&lt;p&gt;We've fixed our &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; error, now what do we do about these &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; tags? Enter &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;: the simple solution to basically everything text in React Native. The closest straight comparison for &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; would be a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No more errors! At least, no errors assuming I have a &lt;code&gt;UserLoginForm&lt;/code&gt; component written elsewhere and properly imported/exported. But you've probably noticed a small problem. In our original Welcome, we had two different header sizes, but now we just have two identical text components. That's because there is no separate header text component in React Native. We have to add one little extra step and style them ourselves. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-stylesheet-component"&gt;
  &lt;/a&gt;
  The StyleSheet Component
&lt;/h3&gt;

&lt;p&gt;Just like there's no HTML in React Native, there's also no CSS. But don't worry, the StyleSheet component is so similar you'll hardly even notice the difference. Inline styles are still an option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But the most common way you'll see styling is by creating an object under the constant &lt;code&gt;styles&lt;/code&gt; with keys for the appropriate elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// NEW IMPORT&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;subTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to my React App!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subTitle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log in below&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserLoginForm&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So there we go, we've fixed all of our errors and matched the same code we started with in React JS (although the font size numbers may not precisely match an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; and an &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;). The &lt;a href="https://reactnative.dev/docs/stylesheet"&gt;docs&lt;/a&gt; do a great job with explaining more about styling, so I won't go deeper into that here. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;One easy-to-overlook difference in React Native is that there are no units (such as 'px') on the stylesheet numbers.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-the-same-in-react-native"&gt;
  &lt;/a&gt;
  What's The Same In React Native?
&lt;/h2&gt;

&lt;p&gt;The short answer: a lot! Obviously there are different challenges that arise and need to be addressed building native applications, especially as the projects get more complex, but the good news is that the fundamentals are the same. &lt;/p&gt;

&lt;p&gt;I won't go through and list every single thing that's the same (the differences tend to be a lot more significant anyways), but there are a couple fundamental things I think React JS developers will be relieved to discover they already know how to do in React Native without even trying. &lt;/p&gt;

&lt;p&gt;Building out components has to be the biggest, because components are the heart of React and significant changes to how they're structured or used in React Native would be a big pain. Not that anyone was expecting a major difference here (they're obviously made by the same people and made to work together), but that's the kind of thing that makes deciding to learn a lot less intimidating. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can I still build class components? Yes. &lt;/li&gt;
&lt;li&gt;Functional components? Yes. &lt;/li&gt;
&lt;li&gt;Local state and props? Exactly the same.&lt;/li&gt;
&lt;li&gt;Hooks? Of course.&lt;/li&gt;
&lt;li&gt;Event handling? Slightly different syntax but works the same.&lt;/li&gt;
&lt;li&gt;Fetch requests? The same.&lt;/li&gt;
&lt;li&gt;What if I want to use Async/Await? Feel free! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You get the point. You already know way more React Native than you thought you did!&lt;/p&gt;




&lt;p&gt;There are a ton of great tutorials out there if you don't have a specific idea for a project to try things out, so if you're coming from a React JS background and thinking about React Native, there's no reason not to give it a shot. The setup is super easy, and it's a lot of fun even just to play around with. &lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Accelerate Your Career During Uncertain Times</title>
      <author>Krowser Web Services </author>
      <pubDate>Thu, 24 Jun 2021 22:50:16 +0000</pubDate>
      <link>https://dev.to/krowser/how-to-accelerate-your-career-during-uncertain-times-50dn</link>
      <guid>https://dev.to/krowser/how-to-accelerate-your-career-during-uncertain-times-50dn</guid>
      <description>&lt;p&gt;Does the current situation have you wondering whether your career has come grinding to a halt? According to experts, growing professionally during a pandemic can be challenging but not impossible. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;View career paths as fluid&lt;/strong&gt;&lt;br&gt;
The steady climb isn’t the only way to accelerate your career. Think also in terms of the sidestep, backstep, and all-important slingshot. Suppose you find your career plateauing. Consider moving sideways into a position of equal rank and pay, in an organization or division that promises more advancement opportunities. Or you could take a backstep, working for less pay or a less prestigious title, at a more innovative startup that offers new hands-on learning opportunities. A slingshot entails doing both a sidestep and a backstep at the same time—making fewer instantly-gratifying moves, and more choices that help you advance towards your career goals. When you apply the knowledge, experience and skills gained through these moves, you increase your chances of leaping far ahead of where you started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus on stretching yourself&lt;/strong&gt;&lt;br&gt;
Think you’re short on job security? Researchers at Boston University found that the most successful contract IT and filmmaking professionals—among those careers most lacking in stability—pursued "stretch work,” roles that emphasized learning new skills over increasing their income. Over time, they came out ahead of their peers. It pays not only to push yourself to learn new things but also to emphasize long-term personal growth over immediate financial returns. If a volunteer position helps you expand your work portfolio or make important contacts, don't be afraid to contribute. None of this time is wasted. You're building resilience and elastic skills that can be applied in any context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Leverage your network&lt;/strong&gt;&lt;br&gt;
Successful people understand that if they want to overcome significant challenges and accelerate their careers, they need to surround themselves with a strong network of diverse individuals. And they are continually working to build those relationships. If you are one of the many people searching for a new job in the wake of Covid-19, don't be afraid to ask for help. The more you make others aware that you're looking for work, the better off you'll be. If you're shy about connecting with peers, find an excuse to be in their inbox, even if it's just to share an interesting article. You can also proactively network and make introductions between your connections, especially if they have similar interests or complementary skill sets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep pushing forward&lt;/strong&gt;&lt;br&gt;
Continuous change is the new norm. To thrive in these fast-changing times, change with them. To future-proof yourself, become more flexible. Today, winning isn't about having more resources, but rather being more resourceful. Getting ahead isn’t about being a genius, but more ingenious. To succeed in unpredictable environments, find the courage to take chances. In unexpected times, everyone wants to be risk-free. Instead, create a competitive advantage by being risk-averse. Recognize that change is coming and make calculated bets that can help you gain the insights or talents today that will be in-demand tomorrow. Whatever your goal, pick a portfolio of promising growth activities to try—attend night school or take online computer programming courses. Just don't sit still while trends and competitors are evolving. Staying ahead of the curve is easier than it sounds, as long as you're staying in constant motion.&lt;/p&gt;

&lt;p&gt;Self-isolation and social distancing can make professional advancement more difficult. Yet, despite these challenges, you can still accelerate your career. All it takes is a bit of creativity, initiative and the willingness to believe it’s possible. Focus on these strategies now, and you'll be ahead of the curve when things inevitably take a turn for the better.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Introducing Laravel Observers.</title>
      <author>Abdallah Samy</author>
      <pubDate>Thu, 24 Jun 2021 22:02:04 +0000</pubDate>
      <link>https://dev.to/abdallhsamy/introducing-laravel-observers-4a45</link>
      <guid>https://dev.to/abdallhsamy/introducing-laravel-observers-4a45</guid>
      <description>&lt;p&gt;Laravel framework comes with lots of awesome features, the outstanding one for me is the model  &lt;strong&gt;observers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;According to the Laravel framework’s documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are listening for many events on a given model, you may use observers to group all of your listeners into a single class. Observers classes have method names which reflect the Eloquent events you wish to listen for. Each of these methods receives the model as their only argument. The  &lt;code&gt;make:observer&lt;/code&gt;  Artisan command is the easiest way to create a new observer class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The observers helps me to declutter my controller of clean-up codes that I might have to run before or after making a model event, and also gives me a way to plug into the model’s event’s lifecycle and run any logic I might see fit.&lt;/p&gt;

&lt;p&gt;The model events that can be observed are spread across the model’s CRUD and includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Retrieved&lt;/li&gt;
&lt;li&gt;  Creating&lt;/li&gt;
&lt;li&gt;  Created&lt;/li&gt;
&lt;li&gt;  Updating&lt;/li&gt;
&lt;li&gt;  Updated&lt;/li&gt;
&lt;li&gt;  Saving&lt;/li&gt;
&lt;li&gt;  Saved&lt;/li&gt;
&lt;li&gt;  Deleting&lt;/li&gt;
&lt;li&gt;  Deleted&lt;/li&gt;
&lt;li&gt;  Restoring&lt;/li&gt;
&lt;li&gt;  Restored&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above events can be observed for every model in the Laravel Framework and business logic attached to it, you can also dispatch custom events from the observer and listen to it from other parts of your application.&lt;/p&gt;

&lt;p&gt;You might not see yourself using the observer class just yet and that is fine, having fair knowledge about it too, is okay.&lt;/p&gt;

&lt;p&gt;Before that, to create an observer class, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan make:observer &amp;lt;observerName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;(replace observerName with the name of the model you are observing).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will create a folder in your application’s app directory called  &lt;strong&gt;Observers&lt;/strong&gt; and store the observer class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;  

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Observers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BankObserver&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="c1"&gt;// an empty observer class  &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here you can populate the classes with methods that match events I listed earlier, it is worthy to note that you can attach a model to an observer when creating the observer, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan make:observer &amp;lt;observerName&amp;gt; &lt;span class="nt"&gt;-m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;ModelName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the class with some method filled in by default, see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;  

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Observers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="cd"&gt;/**  
     * Handle the task "created" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="cd"&gt;/**  
     * Handle the task "updated" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="cd"&gt;/**  
     * Handle the task "deleted" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="cd"&gt;/**  
     * Handle the task "restored" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
      &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;restored&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="cd"&gt;/**  
     * Handle the task "force deleted" event.  
     *  
     * **@param** \App\Task  $task  
     * **@return** void  
     */&lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;forceDeleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Task&lt;/span&gt; &lt;span class="nv"&gt;$task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="c1"&gt;//  &lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might be wondering what model action triggers what observer action, I’ll briefly explain the different methods and what triggers them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Retrieved — This observer method is called when a model record is retrieved from the database.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//this triggers the retrieved method in the observer class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Creating — This observer method is called when a model record is in the process of creation, and not yet stored into the database, this is before the id, and default timestamps are generated for the model, at this point you can dynamically check for and assign a default value to a missing column.&lt;/li&gt;
&lt;li&gt;  Created — This observer method is called after a model record is created successfully. If there is an error in the process of creation, say a missing column data, this method doesn’t get called.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt; &lt;span class="c1"&gt;//this triggers the creating method first, then created method in the observer class.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Updating — This observer method is called when a model record is in the updating process, at this point, the updates has not yet been persisted to the database.&lt;/li&gt;
&lt;li&gt;  Updated — This observer method is called after a model record is updated successfully. If there is an error in the process of updating, this method doesn’t get called.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt; &lt;span class="c1"&gt;//this triggers the creating method first, then created method in the observer class.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Saving and Saved — These model observer methods might seem a bit like a swiss army knife, it gets called before and after any event that requires persistence of data to the database, so if you’re creating a new model record, the saving method runs first, then the creating method, then the created method and finally the saved method, the same routine applies when updating a model, saving, updating, updated, saved.&lt;/li&gt;
&lt;li&gt;  Deleting — This observer method is called when a model record is in the deletion process, at this point, the record has not yet been deleted from the database, and using its id to retrieve it from the database will return appropriate data.&lt;/li&gt;
&lt;li&gt;  Deleted — This observer method is called after a model record is successfully deleted, at this point, the record has been deleted from the database.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Restoring and Restored — These observer methods are called when a deleted model record is restored (using soft deletes implementation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Important things to note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The updating and updated methods only run when the update changes a column of the model in the database, as such, if the update request does not effect a change, the updating and updated observers don’t trigger, only the saving and saved methods get triggered.&lt;/li&gt;
&lt;li&gt;  When restoring a deleted record, series of methods gets triggered one after the other, retrieved, restoring, saving, updating, updated, saved, then restored.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In any case where you want to make a model event without triggering any observer method, you can save it without observer events. An example of a method to use when creating a model without triggering any of the events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;saveQuietly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;withoutEvents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;});&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: This method should be added in the respective model.&lt;/p&gt;

&lt;p&gt;You can refactor it to suit other model events, as necessary.&lt;/p&gt;

&lt;p&gt;Finally, the last part, binding the observer to a particular model.&lt;/p&gt;

&lt;p&gt;This can be done in the boot method of the &lt;code&gt;AppServiceProvider’s class:&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cd"&gt;/**  
 * Bootstrap any application services.  
 *  
 * **@return** void  
 */&lt;/span&gt;  
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Model is the model to be observed and observer is the observer class&lt;/p&gt;

&lt;p&gt;This ends the introduction to Laravel observers, and I hope it was enlightening to you.&lt;/p&gt;

&lt;p&gt;Originally Posted &lt;a href="https://blog.devgenius.io/introducing-laravel-observers-8f0198c6c9c?gi=714aae7b32be"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>model</category>
      <category>observer</category>
      <category>event</category>
    </item>
    <item>
      <title>Building a Blog with React, Strapi &amp; GraphQL - Create Post &amp; Display it in Frontend</title>
      <author>Semir Teskeredzic</author>
      <pubDate>Thu, 24 Jun 2021 21:51:10 +0000</pubDate>
      <link>https://dev.to/semirteskeredzic/building-a-blog-with-react-strapi-graphql-create-post-display-it-in-frontend-3e19</link>
      <guid>https://dev.to/semirteskeredzic/building-a-blog-with-react-strapi-graphql-create-post-display-it-in-frontend-3e19</guid>
      <description>&lt;p&gt;Hey there, this is the second part of the mini series in Building an app with React, Strapi, and GraphQL. In the first part that you can find &lt;a href="https://dev.to/semirteskeredzic/first-steps-in-building-app-with-react-strapi-apollo-graphql-1g64"&gt;here&lt;/a&gt;, we went through first steps in prepping the backend and frontend for our app.&lt;br&gt;
In this part we will go through creating a blog post and displaying it in the list.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#add-blog-post-to-the-strapi"&gt;
  &lt;/a&gt;
  Add Blog Post to the Strapi
&lt;/h1&gt;

&lt;p&gt;First of all, spin up your Strapi environment with the command in the terminal from the directory that houses Strapi:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ yarn develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will start the Strapi server so you can now navigate to &lt;code&gt;http://localhost:1337/admin/&lt;/code&gt;, once you are there enter the login data for the admin user. &lt;br&gt;
Now in the left sidebar, chose &lt;code&gt;Content-Types Builder&lt;/code&gt; and this will bring you to the list of your content type so click &lt;code&gt;Create Content Type&lt;/code&gt;.&lt;br&gt;
As a name enter &lt;code&gt;BlogPost&lt;/code&gt; and press Continue, next you will be prompted to select a field for our content type:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wGlNmnf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkc6yhmtyawgv33tb2a7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wGlNmnf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkc6yhmtyawgv33tb2a7.png" alt="Strapi content type fields"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a proper Blog post we need following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title (Text - Short text)&lt;/li&gt;
&lt;li&gt;Body (Text - Long text)&lt;/li&gt;
&lt;li&gt;Tags (Text- Short text)&lt;/li&gt;
&lt;li&gt;CreatedAt (Date - datetime)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go on and create those fields by selecting the type from the parentheses. Don't forget to click save after you have added them.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#add-a-blog-post"&gt;
  &lt;/a&gt;
  Add a Blog post
&lt;/h1&gt;

&lt;p&gt;In this case we will also use our Strapi backend. Make sure that the Strapi server is running and navigate to &lt;code&gt;http://localhost:1337&lt;/code&gt;.&lt;br&gt;
In the collection type section of the left sidebar under Collection Types click on BlogPosts. This will open a list of current BlogPosts with the button to add a new Blog post, press that button to add a new Blog post.&lt;br&gt;
Fill out all the fields as you like and click Save and after that click Publish.&lt;br&gt;
Now when you click on Collection Types BlogPosts you will see our new post in the list.&lt;br&gt;
Next we will show the list of blog posts in the frontend of our application.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#show-the-list-of-blog-posts-in-frontend"&gt;
  &lt;/a&gt;
  Show the list of blog posts in frontend
&lt;/h1&gt;

&lt;p&gt;If you followed steps from the first part in frontend folder we have everything ready to fetch the data from the Strapi backend.&lt;br&gt;
In the &lt;code&gt;frontend&lt;/code&gt; folder create a new directory under &lt;code&gt;src&lt;/code&gt; named &lt;code&gt;queries&lt;/code&gt; there create a new file named &lt;code&gt;blogPosts.js&lt;/code&gt;.&lt;br&gt;
In this file we will write a GraphQL query that will fetch us needed data from Strapi.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;frontend/src/queries/blogPosts.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { gql } from '@apollo/client'

export const GET_BLOGPOSTS = gql`
  query {
  blogPosts {
    id
    Title
    Body
    Tags
    CreatedAt
  }
}`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You can test queries by navigating to &lt;a href="http://localhost:1337/graphql"&gt;http://localhost:1337/graphql&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we need to write a component that will call this query and populate our table with the data, so let's create a &lt;code&gt;ListBlogPosts.js&lt;/code&gt; inside &lt;code&gt;frontend/src/components&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;frontend/src/components/ListBlogPosts.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { GET_BLOGPOSTS } from "../queries/blogPosts"
import {useQuery} from "@apollo/client";

function ListBlogPosts() {

    const {data, error, loading} = useQuery(GET_BLOGPOSTS)

    if(loading) return 'Loading...'
    if(error) return `Oops there has been an error: ${error}`
    if(data) return console.log(data)
}

export default ListBlogPosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use this to test whether our query actually works!&lt;br&gt;
If you save this, run the server with &lt;code&gt;yarn start&lt;/code&gt; and navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt; you will see ..this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Oops there has been an error: Error: Forbidden
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is OK! It shows that our connection with Strapi works, that our basic error handler works because we are forbidden to read this data so this is Strapi issue.&lt;br&gt;
Let's go back to Strapi backend and fix this, open Strapi backend and go to &lt;code&gt;Settings&lt;/code&gt; and under &lt;code&gt;Users &amp;amp; Permissions Plugin&lt;/code&gt; section select &lt;code&gt;Roles&lt;/code&gt;. There you will see our &lt;code&gt;BLOG-POSTS&lt;/code&gt; with all checkboxes deactivated, use &lt;code&gt;select all&lt;/code&gt; to check all boxes and save it.&lt;br&gt;
Now when you refresh &lt;code&gt;http://localhost:3000&lt;/code&gt; you will see nothing but when you open console you will see we get the object. Success! Now let's show that in a way we humans understand it. Remove the line with &lt;code&gt;if(data)...&lt;/code&gt; and create this return instead:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;frontend/src/components/ListBlogPosts.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
if(error) return `Oops there has been an error: ${error}`

return(
        &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;List of Blog Posts&amp;lt;/h1&amp;gt;
            &amp;lt;table&amp;gt;
                &amp;lt;thead&amp;gt;
                    &amp;lt;tr&amp;gt;
                        &amp;lt;th&amp;gt;ID&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Title&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Body&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Tags&amp;lt;/th&amp;gt;
                        &amp;lt;th&amp;gt;Created&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                &amp;lt;/thead&amp;gt;
                {data?.blogPosts &amp;amp;&amp;amp; data?.blogPosts.length !== 0 ?
                    &amp;lt;tbody&amp;gt;
                    {data?.blogPosts.map(({id, Title, Body, Tags, CreatedAt}) =&amp;gt; (
                        &amp;lt;tr key={id}&amp;gt;
                            &amp;lt;td&amp;gt;{id}&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;{Title}&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;{Body}&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;{Tags}&amp;lt;/td&amp;gt;
                            &amp;lt;td&amp;gt;{CreatedAt}&amp;lt;/td&amp;gt;
                        &amp;lt;/tr&amp;gt;
                    ))}
                    &amp;lt;/tbody&amp;gt; : &amp;lt;tbody&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;No Blog Posts to show!&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;}
            &amp;lt;/table&amp;gt;
        &amp;lt;/div&amp;gt;
)

export default ListBlogPosts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we do here? We created a simple table and we filled it with the data from Strapi. As you can notice we are using &lt;code&gt;data?.&lt;/code&gt; with question mark, that is &lt;strong&gt;optional chaining&lt;/strong&gt; because we don't want our code to throw exception if the data is somehow not ok. First we are checking whether blogPosts are there and whether we have blogPosts, we use &lt;code&gt;.length&lt;/code&gt; here because we get an array of blogPosts so if there are blogPosts the &lt;code&gt;.length&lt;/code&gt; won't be 0. If there are no blogPosts we show short info that there is no blog posts to show while if there are blogPosts we show them in the table through the map function. &lt;/p&gt;

&lt;p&gt;Now we see a simple table with all the data we entered in the Strapi backend. In the next steps we will add editing and removing options to this table so we can handle it directly from the frontend client.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>react</category>
      <category>graphql</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
