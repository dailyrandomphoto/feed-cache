<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is the GRANDstack?</title>
      <author>Tomek Poniatowicz</author>
      <pubDate>Wed, 28 Jul 2021 10:20:07 +0000</pubDate>
      <link>https://dev.to/tomekponiat/what-is-the-grandstack-3afn</link>
      <guid>https://dev.to/tomekponiat/what-is-the-grandstack-3afn</guid>
      <description>&lt;p&gt;Last time we looked a bit at neo4j and the benefits of using it together with GraphQL and I briefly mentioned a little thing called the GRAND stack and promised to get more into its details later. So this time let's go deeper and check out what using not two but four technologies together can do for us. The GRAND stack is a full-stack framework for making GraphQL apps, a combination of four technologies which make up the acronym:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;G&lt;/strong&gt;raphQL, &lt;strong&gt;R&lt;/strong&gt;eact, &lt;strong&gt;A&lt;/strong&gt;pollo and &lt;strong&gt;N&lt;/strong&gt;eo4j &lt;strong&gt;D&lt;/strong&gt;atabase. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For those curious, yes you can substitute React for another framework like Vue or Angular if that’s your preference, but that would make it a GVAND or GAAND stack which isn't nearly as catchy so bear that in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#g-for-graphql"&gt;
  &lt;/a&gt;
  G for GraphQL
&lt;/h2&gt;

&lt;p&gt;If you’re here you probably know a bit about GraphQL already so let’s get to why GraphQL is used here. Its Schema Definition Language is language agnostic which makes it perspect for interacting with other technologies (like the ones in the stack) and more importantly its namesake graph aspect plays really well into the fact neo4j is a graph database and that means its graphs all the way down from start to finish. To summarize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data layer agnostic, GraphQL can be used with any data source&lt;/li&gt;
&lt;li&gt;no under or overfetching, querying with GraphQL gets you exactly and only the data you asked for&lt;/li&gt;
&lt;li&gt;graphs all the way down, all data is handled as a graph and since its data source agnostic you can use this to integrate data from different sources in a transparent and organized way&lt;/li&gt;
&lt;li&gt; introspection, you can ask a GraphQL API for the queries it supports which makes creating documentation a lot easier if not automatic with certain tools like SpectaQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6fICLcht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh9naglfszz1e2fq1he4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fICLcht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh9naglfszz1e2fq1he4.png" alt="GraphQL vs REST"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#r-for-react"&gt;
  &lt;/a&gt;
  R for React
&lt;/h2&gt;

&lt;p&gt;React is a component based JavaScript library used for creating User Interfaces. Here it is used for the frontend and handles requests and responses via the Apollo Client React integration, sending them to and receiving them from the GraphQL server. Since React uses components for data handling and UI purposes you can use some component library to get a bunch of popular and ready to use components instead of creating them yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nOFODMZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2rff72pwxqnnpy4b166.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nOFODMZl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2rff72pwxqnnpy4b166.png" alt="ReactJS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#source-reactjsorg"&gt;
  &lt;/a&gt;
  Source: &lt;a href="https://reactjs.org/"&gt;reactjs.org&lt;/a&gt;
&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#a-for-apollo"&gt;
  &lt;/a&gt;
  A for Apollo
&lt;/h2&gt;

&lt;p&gt;Apollo is a powerful tool which basically focuses on making using GraphQL easier on the side of the client and the server. Apollo Client is a client-side JavaScript library for querying the GraphQL API from the app, it handles interactions with the React frontend. Apollo Server provides a GraphQL Server and is used for the backend handling HTTP requests and responses, the GraphQL operation and schema and all the data. Despite its many shortcomings, Apollo still seems to be the most popular GraphQL client.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_NHVdO9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rli9ercqwm7uraa6hhfd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_NHVdO9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rli9ercqwm7uraa6hhfd.png" alt="Apollo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#source-apollographqlcom"&gt;
  &lt;/a&gt;
  Source: &lt;a href="https://www.apollographql.com/blog/announcement/introducing-the-apollo-graphql-platform-8ef34bb269e5/"&gt;apollographql.com&lt;/a&gt;
&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#nd-for-neo4j-database"&gt;
  &lt;/a&gt;
  ND for Neo4j Database
&lt;/h2&gt;

&lt;p&gt;Neo4j is the key fit here because it's a graph database so it's made specifically for handling graph data and complex graph traversals which is exactly what we have with GraphQL and its queries. This also means we’re able to maintain the same data model throughout the entire stack. Now if you’ve read my last piece about Neo4j you’re probably thinking about having to learn Cypher. The good news is you don't have to do it straight away thanks to the neo4j-graphql.js package. It handles building basic mutations for you and it also solves the n+1 query problem as well by translating GraphQL queries to a single Cypher query.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QoNn_Ze5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jycrfoulbtiwrr4u2ocm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QoNn_Ze5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jycrfoulbtiwrr4u2ocm.png" alt="Neo4j Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#source-neo4jcom"&gt;
  &lt;/a&gt;
  Source: &lt;a href="https://neo4j.com/product/neo4j-graph-database/"&gt;neo4j.com/&lt;/a&gt;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#not-all-roses"&gt;
  &lt;/a&gt;
  Not all roses
&lt;/h2&gt;

&lt;p&gt;You could say it's called grand for a reason as you will have to learn Cypher to fully grasp the GRAND stack and that can take a while, especially if you haven't dealt with it before. It is a lot of work and that can be a turnoff, but if you do it's probably worth it just for the neo4j graph database, never mind the whole stack so if you’re already working with GraphQL that could be a nice goal to set for yourself. If not, even without it, it does offer you quite a bit and is probably worth checking out to see if you want to invest your time and work into learning it. If you want to learn more about it make sure to check &lt;a href="https://grandstack.io/docs/getting-started-neo4j-graphql"&gt;the GRANDstack official documentation&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;A guest blog post for &lt;a href="https://blog.graphqleditor.com/"&gt;GraphQL Editor blog&lt;/a&gt; by Michał Tyszkiewicz&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#speed-up-your-graphql-api-development"&gt;
  &lt;/a&gt;
  Speed up your GraphQL API development
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GraphQL Editor&lt;/strong&gt; is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp;amp; deploy your GraphQL API much faster. &lt;strong&gt;&lt;a href="https://graphqleditor.com"&gt;Try GraphQL Editor for free!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif" alt="New features of GraphQL Editor gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Roadmap Collection For Beginners Developer</title>
      <author>Tousif</author>
      <pubDate>Wed, 28 Jul 2021 10:19:01 +0000</pubDate>
      <link>https://dev.to/project_beginner/roadmap-collection-for-beginners-developer-4n01</link>
      <guid>https://dev.to/project_beginner/roadmap-collection-for-beginners-developer-4n01</guid>
      <description>&lt;h2&gt;1. &lt;a href="https://www.codelivly.com/artificial-intelligence-roadmap/"&gt;Artificial Intelligence Roadmap: How to Prepare for the Future of AI&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;h2&gt;2. &lt;a href="https://www.codelivly.com/machine-learning-roadmap-2021/"&gt;Machine Learning Roadmap 2021&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;h2&gt;3. &lt;b&gt;&lt;a href="https://www.codelivly.com/unity-developer-roadmap-2021/"&gt;Unity Developer Roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;h2&gt;4. &lt;a href="https://www.codelivly.com/game-development-roadmap-2021/"&gt;Best Game Development Roadmap-2021&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;h2&gt;5. &lt;b&gt;&lt;a href="https://www.codelivly.com/a-complete-data-science-roadmap-in-2021/"&gt;Data Science Complete Roadmap in 2021&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;h2&gt;6. &lt;b&gt;&lt;a href="https://www.codelivly.com/web-developer-roadmap-2021/"&gt;Web Developer Roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;h2&gt;7. &lt;b&gt;&lt;a href="https://www.codelivly.com/data-analyst-roadmap/"&gt;Data Analyst Roadmap 2021&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;&lt;h2&gt;8. &lt;a href="https://www.codelivly.com/backend-web-developer-roadmap/"&gt;&lt;b&gt;Backend Web Developer Roadmap 2021&lt;/b&gt;&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;h2&gt;9. &lt;a href="https://www.codelivly.com/frontend-web-developer-roadmap/"&gt;Front End Web Developer Roadmap 2021&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;h2&gt;10. &lt;a href="https://www.codelivly.com/app-developer-roadmap/"&gt;App Developer Roadmap 2021&lt;/a&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;

</description>
    </item>
    <item>
      <title>Getting the Transcription of a Video From Youtube using google cloud platform.</title>
      <author>computer_geek77</author>
      <pubDate>Wed, 28 Jul 2021 10:02:06 +0000</pubDate>
      <link>https://dev.to/computergeek/getting-the-transcription-of-a-video-from-youtube-using-google-cloud-platform-19ed</link>
      <guid>https://dev.to/computergeek/getting-the-transcription-of-a-video-from-youtube-using-google-cloud-platform-19ed</guid>
      <description>&lt;p&gt;So, the other day I was searching for python code that gives me a transcript of any video, I did what all we do I searched everywhere on Internet but was unfortunate. But we are programmers best thing we do is search more on the internet. finally, I got the code I wanted, all thanks to &lt;br&gt;
Pragnakalp Techlabs&lt;br&gt;
. Although the code was a little different from my expectations I did some filters on it and made it to view the transcripts of the youtube video.&lt;br&gt;
Be patient there are going to be few steps involved in our process !!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# pip install google-api-python-client
# pip install youtube_transcript_api

from apiclient.discovery import build
from youtube_transcript_api import YouTubeTranscriptApi

api_key = "Secret Key"  # replace it with your API key
video_id = str(input("Enter the video id: "))  # replace it with your channel id
youtube = build('youtube', 'v3',developerKey=api_key)

try:
        responses = YouTubeTranscriptApi.get_transcript(
            video_id, languages=['en'])
        print('\n'+"Video: "+"https://www.youtube.com/watch?v=" +
              str(video_id)+'\n'+'\n'+"Captions:")
        for response in responses:
            text = response['text']
            print(text)
except Exception as e:
        print(e)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For full tutorial how to get the API key and all that thing you can check out my medium article on this 👇👇👇&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#httpsmediumcomcomputergeekgettingthetranscriptionofavideofromyoutubeusinggooglecloudplatform3c862d1276a5"&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/@computer_geek/getting-the-transcription-of-a-video-from-youtube-using-google-cloud-platform-3c862d1276a5"&gt;https://medium.com/@computer_geek/getting-the-transcription-of-a-video-from-youtube-using-google-cloud-platform-3c862d1276a5&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;To be honest, I am finding it little difficult to write code and syntax highlighting and inserting images on dev platform, but the code may not look very attractive but that works fine for any video on youtube.&lt;/p&gt;

&lt;p&gt;And also you can follow me on my twitter &lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/computer_geek77/"&gt;https://twitter.com/computer_geek77/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>tutorial</category>
      <category>github</category>
    </item>
    <item>
      <title>Should you build a Slack bot? Building one saved our future sprints</title>
      <author>Nejra</author>
      <pubDate>Wed, 28 Jul 2021 10:01:47 +0000</pubDate>
      <link>https://dev.to/infobipdev/should-you-build-a-slack-bot-building-one-saved-our-future-sprints-4l80</link>
      <guid>https://dev.to/infobipdev/should-you-build-a-slack-bot-building-one-saved-our-future-sprints-4l80</guid>
      <description>&lt;p&gt;Have you ever tried to improve or automate a process in your team or organization? Slack bots could be an easy and quick way to do it.&lt;br&gt;
Let me tell you how my team at Infobip built an internal Slack bot, how to build your own using Node.js, PostgreSQL, and Slack bolt, how to integrate it into your workspace, as well as how to deploy it on Azure Cloud.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#from-bottleneck-to%C2%A0bot"&gt;
  &lt;/a&gt;
  From Bottleneck to Bot
&lt;/h2&gt;

&lt;p&gt;My team uses 2-week sprints, and each task gets code reviewed by at least one person from our team. The code review process turned out to be a bottleneck. We didn't have an explicit way of determining the code reviewer for our tasks.&lt;/p&gt;

&lt;p&gt;Our original idea was that anyone who has free time will check out the Jira code review column and review some tasks. When that approach didn't work, we agreed among ourselves on who will review which task. However, we chose the person we were closest to, leading to inequality in the workload.&lt;/p&gt;

&lt;p&gt;We wanted to find - and needed - a solution that included making the code review Jira column no longer a bottleneck for us while focusing on making the number of code reviewers equal per sprint.&lt;/p&gt;

&lt;p&gt;How about building a Slack bot?&lt;/p&gt;

&lt;p&gt;We can build it to display the name of the person who will code review the task. The bot would select a person using the round-robin arrangement. Another idea was to create a special application for that, but this was a simpler approach because we already use Slack for our internal communication and meetings.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#our-code-review-picker%C2%A0bot"&gt;
  &lt;/a&gt;
  Our Code Review Picker Bot
&lt;/h2&gt;

&lt;p&gt;To use it, we would send a slack message in our private channel to the bot. It would respond with the name of your code reviewer.&lt;/p&gt;

&lt;p&gt;All it takes to add the app to your private Slack channel is to use the „Add apps to this channel" command.&lt;/p&gt;

&lt;p&gt;I've used Node.js along with Slack bolt framework and PostgreSQL for data storage. I picked Azure for deployment because at Infobip, each of us has a personal monthly budget for the platform. Azure Cloud was overwhelming at first because of the many options it offers. But it soon became one of my favorite deployment platforms because it's easy to understand and use.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-a-slack-app-easy-and%C2%A0fun"&gt;
  &lt;/a&gt;
  Create a Slack App? Easy and Fun
&lt;/h2&gt;

&lt;p&gt;Learning how to create the Slack app was easy and fun because of detailed Slack documentation. Slack has many tutorials on how to get your bot up and running, which you can check out here: &lt;a href="https://api.slack.com/start/building/bolt-js"&gt;https://api.slack.com/start/building/bolt-js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create an app, visit the apps page on Slack: &lt;a href="https://api.slack.com/apps"&gt;https://api.slack.com/apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWldYVIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tmpriwv1wds8d8pezew.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWldYVIj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tmpriwv1wds8d8pezew.png" alt="Create a Slack app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to Settings &amp;gt; Basic Information tab and save the Singing secret from your App Credentials. Install the app to your workspace to get the OAuth token. After that, go to OAuth &amp;amp; Permissions screen and save the Bot User OAuth Token. On the Bot Token Scopes page, select the scopes you need. I've selected the chat:write and users:read scopes to start.&lt;/p&gt;

&lt;p&gt;After creating the Slack app, go to portal.azure.com and create a new App Service. I've picked Node as the Runtime stack and Windows OS. After you create the service, save the Slack token and Slack bot token as environment variables in the Configuration tab on the Settings slots of your app.&lt;/p&gt;

&lt;p&gt;Go to the Deployment Center on the Azure Portal and pick the deployment option that best suits you. I went with the Local Git option. Clone the repository and initialize your project using the npm init command. &lt;/p&gt;

&lt;p&gt;Install the @slack/bolt package: npm i @slack/bolt. Push the code to deploy the changes:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Go back to the Slack API bot setup and visit the Event Subscriptions page to enable events. I've subscribed my bot to the message.groups event to receive an event payload whenever a new message is posted in a private channel to which the bot is added. After turning on the toggle switch to enable events, enter your Request URL which is available on the Overview page on the Azure portal. It should look like &lt;a href="https://azure-app-url/slack/events"&gt;https://azure-app-url/slack/events&lt;/a&gt;. If you see a green check mark after entering the URL you are all set and you can subscribe your bot to the events.&lt;/p&gt;

&lt;p&gt;After subscribing to events, I've used the message function to attach a listener to messages that contain the word review.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;I stored the information about the code reviewers and registered channels in a PostgreSQL database hosted on Azure using Sequelize as an ORM.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For debugging the application, visit the Monitoring slot on the Azure portal, and on the App Service logs tab turn on Application Logging to connect to the Log stream.&lt;/p&gt;

&lt;p&gt;It's best to first create a test private channel to test the bot and try out all options that the Slack bolt framework offers.&lt;/p&gt;

&lt;p&gt;That's it. Have fun building your bot. Once we started using the Slack bot in our Infobip team, the code review was no longer a bottleneck inside the sprint and after a while, we completely forgot that it used to be a problem for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#another-example-metrics-for-human%C2%A0emotions"&gt;
  &lt;/a&gt;
  Another Example: Metrics For Human Emotions
&lt;/h2&gt;

&lt;p&gt;Another use case for which we used a Slack bot is to collect mood data within the team. Working from home made it challenging for us to check up on each other. We heard of the Niko-Niko agile method, which is a simple calendar where everyone states their mood daily.&lt;/p&gt;

&lt;p&gt;Everyone can express their mood as good, bad or neutral. The Slack bot sends a message each day to our private channel and saves our mood to the calendar.&lt;/p&gt;

&lt;p&gt;It can also make a useful checkup on 1 on 1 meetings with your manager on things that can improve. Everyone should feel safe to express their mood honestly and be aware that their manager is there to help.&lt;/p&gt;

&lt;p&gt;The data is represented for each team per month. You can track the mood board calendar showing each person's mood for the day and charts per team or an individual showing the trend and the summary. I developed it using .Net with Blazor and Chart.js extension for Blazor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ilIxipU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkchwkt2tfj2y61ks8ed.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ilIxipU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkchwkt2tfj2y61ks8ed.jpg" alt="Mood metrics"&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@takeshi2?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;wu yi&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/keyboard-emoji?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
     &lt;/p&gt;

&lt;p&gt;Have you tried using a Slack bot to improve some of your team or organization processes? I would love to hear your ideas and thoughts about Slack bot implementation.&lt;/p&gt;

</description>
      <category>slackbot</category>
      <category>agile</category>
    </item>
    <item>
      <title>Updated: The Best Way to Learn Python. Fact.</title>
      <author>Matthew Tam</author>
      <pubDate>Wed, 28 Jul 2021 09:49:12 +0000</pubDate>
      <link>https://dev.to/matthewtamyt/updated-the-best-way-to-learn-python-fact-ia0</link>
      <guid>https://dev.to/matthewtamyt/updated-the-best-way-to-learn-python-fact-ia0</guid>
      <description>&lt;p&gt;There has recently been an update to the best way to learn Python. Now, it is better than ever. With detailed tutorials that walk you through how you do it, with practicals and hands-on projects. This is the best way to learn python. The best thing is that: it's completely free. No sign-in or whatsoever, you could view it anywhere, anytime. Way better than SkillShare or so. Check it out now!&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/MatthewTamYT"&gt;
        MatthewTamYT
      &lt;/a&gt; / &lt;a href="https://github.com/MatthewTamYT/LearnPython"&gt;
        LearnPython
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Everything you need to know about learning Python is here. This is a catalog that teaches you how to code in Python. In fact, everything you need to know from beginner to intermediate is here. Even experts could learn from this!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
😎 Learn Python 😎
&lt;/h1&gt;
&lt;p&gt;This is a great place to start learning Python. Full credit goes to Eric Matthes.&lt;/p&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1 Getting Started&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
1 GETTING STARTED&lt;/h2&gt;
&lt;p&gt;In this chapter, you’ll run your first Python program, hello_world.py. First, you’ll need to check whether a recent version of Python is installed on your computer; if it isn’t, you’ll install it. You’ll also install a text editor to work with your Python programs. Text editors recognize Python code and highlight sections as you write, making it easy to understand your code’s structure.&lt;/p&gt;
&lt;h3&gt;
Setting Up Your Programming Environment&lt;/h3&gt;
&lt;p&gt;Python differs slightly on different operating systems, so you’ll need to keep a few considerations in mind. In the following sections, we’ll make sure Python is set up correctly on your system.&lt;/p&gt;
&lt;h4&gt;
Python Versions&lt;/h4&gt;
&lt;p&gt;Every programming language evolves as new ideas and technologies emerge, and the developers of Python have continually made the language…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/MatthewTamYT/LearnPython"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>tutorial</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Tips to consider when styling with CSS</title>
      <author>Posandu Mapa</author>
      <pubDate>Wed, 28 Jul 2021 09:49:00 +0000</pubDate>
      <link>https://dev.to/posandu/tips-to-consider-when-styling-with-css-45kf</link>
      <guid>https://dev.to/posandu/tips-to-consider-when-styling-with-css-45kf</guid>
      <description>&lt;p&gt;In this post, I will tell you some tips to consider when styling with CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reset-the-css-layout-before-styling"&gt;
  &lt;/a&gt;
  Reset the CSS layout before styling
&lt;/h2&gt;

&lt;p&gt;You must reset the whole layout of the page using this four lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;alternatively, you can use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#visit-dribbble-to-get-some-inspiration"&gt;
  &lt;/a&gt;
  Visit Dribbble to get some inspiration
&lt;/h2&gt;

&lt;p&gt;There is a site called Dribbble where you can find lots of inspiration to style a page or an HTML element. visit this site by clicking the below link &lt;a href="https://dribbble.com/"&gt;dribbble.com/&lt;/a&gt;&lt;br&gt;
Below is an example where you can get inspiration to style a button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TzbZnq3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w4rgod3hvp525fjeabj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TzbZnq3j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w4rgod3hvp525fjeabj.png" alt="Add to cart by Aaron Iker"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dribbble.com/shots/8553598-Add-to-cart"&gt;Add to cart by Aaron Iker&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#use-css-variables-for-colors"&gt;
  &lt;/a&gt;
  Use CSS variables for colors
&lt;/h2&gt;

&lt;p&gt;Another great thing is you can use CSS variables. By Using them you can change the colors of the whole by changing one line of CSS code. See the example below where CSS variables are used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="py"&gt;--blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="py"&gt;--red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.blue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--red&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the example below. (code)&lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/async-frost-vwe27"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#think-about-accessibility"&gt;
  &lt;/a&gt;
  Think about accessibility
&lt;/h2&gt;

&lt;p&gt;We must design UIs accessibility friendly. See the sandbox below and try to navigate using the keyboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#without-any-accessibility"&gt;
  &lt;/a&gt;
  Without any accessibility
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/quirky-lovelace-qzkc2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#with-accessibility"&gt;
  &lt;/a&gt;
  With accessibility
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/happy-faraday-k9c9y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now you can see why accessibility is important for the web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-a-good-font"&gt;
  &lt;/a&gt;
  Use a good font
&lt;/h2&gt;

&lt;p&gt;The font also shows your brand. Messing up the font is messing up your brand. There are lots of fonts available. Here are the most popular fonts to use in your UI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roboto"&gt;
  &lt;/a&gt;
  Roboto
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wx_ORdR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/toow5bzsfgoqqjzh8h4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wx_ORdR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/toow5bzsfgoqqjzh8h4d.png" alt="Roboto font"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#noto-sans-jp"&gt;
  &lt;/a&gt;
  Noto Sans JP
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OjZD32Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9ksgmhrcy58r5s90wvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OjZD32Pu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9ksgmhrcy58r5s90wvt.png" alt="Noto Sans JP"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lato"&gt;
  &lt;/a&gt;
  Lato
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fHYzL8SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ftsmjxll4sb6o0f4g0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fHYzL8SJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ftsmjxll4sb6o0f4g0j.png" alt="SLato"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inter"&gt;
  &lt;/a&gt;
  Inter
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMpuEKzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmqiz1f9wn8dicadeccl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMpuEKzX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmqiz1f9wn8dicadeccl.png" alt="Inter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#segoe-ui"&gt;
  &lt;/a&gt;
  Segoe UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6X-tDdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9fmaq27czmg5l1hlrrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6X-tDdz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9fmaq27czmg5l1hlrrc.png" alt="Segoe UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for now. Please put a comment b̷͙̕é̴̯l̷͈̏ŏ̶͜w̶̩̾ if you have any suggestions for the list.&lt;/p&gt;

&lt;p&gt;And if you need a good framework to use, here it is: &lt;a href="https://material.pages.dev/"&gt;https://material.pages.dev/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>tips</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Fast Connect - Make a fast video call without registration</title>
      <author>Elman Huseynov</author>
      <pubDate>Wed, 28 Jul 2021 09:33:31 +0000</pubDate>
      <link>https://dev.to/huseyn0w/fast-connect-make-a-fast-video-call-without-registration-3059</link>
      <guid>https://dev.to/huseyn0w/fast-connect-make-a-fast-video-call-without-registration-3059</guid>
      <description>&lt;h2&gt;
  &lt;a href="#covid19-changed-the-world"&gt;
  &lt;/a&gt;
  COVID-19 Changed the world...
&lt;/h2&gt;

&lt;p&gt;Since the year 2020 world is different. The majority of people change the way of workflow from Office to Remote mode.&lt;br&gt;
We are required to use different enterprise applications to create communication between each other.&lt;br&gt;
Each of them has its own advantages, but in most cases, you have to register or download the application to use it.&lt;br&gt;
Besides, you have to pay for "Premium" accounts sometimes if you want to have extra options.&lt;br&gt;
Moreover, in some countries, you can not use that popular software, because they have been blocked.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-this-is-the-time-when-fast-connect-comes-around"&gt;
  &lt;/a&gt;
  So this is the time when Fast Connect comes around...
&lt;/h3&gt;

&lt;p&gt;By using our application you &lt;strong&gt;DO NOT NEED&lt;/strong&gt; to download anything to your device or pay for anything.&lt;br&gt;
You can create a new conference and use all features for &lt;strong&gt;ABSOLUTELY FREE&lt;/strong&gt; and without registration ;)&lt;/p&gt;

&lt;p&gt;All you have to do is to take 2 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a unique ID for the conference, send it to all your colleagues.&lt;/li&gt;
&lt;li&gt;Enter that ID on the homepage and start your conference. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://github.com/huseyn0w/Fast-Connect"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://serene-refuge-81999.herokuapp.com"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/huseyn0w/"&gt;My Linkedin profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Application features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No registration and NO "PREMIUM" accounts&lt;/li&gt;
&lt;li&gt;Realtime video/audio conference with unlimited number of users&lt;/li&gt;
&lt;li&gt;Different rooms creating an option for conversations&lt;/li&gt;
&lt;li&gt;Chat for sending messages&lt;/li&gt;
&lt;li&gt;Screen Sharing option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Technologies that used in the creation of this app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React JS&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;Material UI&lt;/li&gt;
&lt;li&gt;Node / Express js&lt;/li&gt;
&lt;li&gt;Socket IO&lt;/li&gt;
&lt;li&gt;Peer JS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like it ? Please star the project and share in return ;)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>react</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Migrating to Cypress, a journey</title>
      <author>Laís Tomaz</author>
      <pubDate>Wed, 28 Jul 2021 09:28:30 +0000</pubDate>
      <link>https://dev.to/coolblue/migrating-to-cypress-a-journey-52j9</link>
      <guid>https://dev.to/coolblue/migrating-to-cypress-a-journey-52j9</guid>
      <description>&lt;p&gt;One year ago, we finished a one-year-long journey of moving away from Codeception and adopting &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; as our tool to develop acceptance tests for Coolblue’s webshop.&lt;/p&gt;

&lt;p&gt;Looking back as the person that led this process, I thought of this whole effort as &lt;em&gt;“I only did my job”&lt;/em&gt;, but a deeper look and a conversation with colleagues reminded me that it was actually quite the challenge, and it motivated me to share what I learned during this process.&lt;/p&gt;

&lt;p&gt;If you’re investigating adopting Cypress, I hope this blog helps you figure out the best way for your migration process. Enough introductions, let’s get into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-things-first"&gt;
  &lt;/a&gt;
  First things first
&lt;/h2&gt;

&lt;p&gt;Don’t get me wrong, Cypress is a great tool, I’ve been using it since its Test Runner got released as an open source tool, mainly for smaller projects and with great results, but that does not mean it’s the right fit for your project. &lt;/p&gt;

&lt;p&gt;I was frustrated with how difficult it was to test our scenarios with Codeception, every time writing acceptance tests were mentioned during refinements a lot of extra points were added to a story and that just sat wrong with me, writing tests shouldn’t feel like a burden. That’s why I spent my learning blocks trying out how to make Cypress work for our webshop and first find solutions to fit how we handle different environments, countries and languages.&lt;/p&gt;

&lt;p&gt;This first step was very important, I was able to find out how different it would be from my previous experiences using Cypress and gave me the space to find answers for our specific needs. Still, it wasn’t a 100% fit and half into the migration we had to deal with not yet supported features like SSO integration in different ports.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;My advice is to check and make sure Cypress fits your needs first, or that you can find a workaround for these cases.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#get-everyone-on-board"&gt;
  &lt;/a&gt;
  Get everyone on board
&lt;/h2&gt;

&lt;p&gt;Here’s where I made my first mistake. Without previous discussions outside my team, I opened a big PR implementing Cypress to test a new feature and fairly, I received some very worried comments. This was never a one-person job and having everyone agree with the adoption of the tool first should have been my second step, so there I went: I collected data, arguments and went to our back-end and front-end meetings to get people on board.&lt;/p&gt;

&lt;p&gt;At this moment you’ll hear some very reasonable questions, so listen carefully. Take your time to research and answer them. Getting input from my colleagues was absolutely important for the success of this endeavor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;They will be the ones creating new tests and maintaining existing ones, and getting people excited by the possibilities the new tool brings is as important as a perfect PR.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#measure-measure-and-measure"&gt;
  &lt;/a&gt;
  Measure, measure and measure
&lt;/h2&gt;

&lt;p&gt;It’s only a webshop, right? Catalog, product page, cart and checkout. How hard could it be?&lt;br&gt;
Well, we actually have multiple teams taking care of every page of the user experience in our webshop, which at that time meant more than 400 scenarios being tested and different people being responsible for writing and maintaining these tests.&lt;/p&gt;

&lt;p&gt;Having a detailed list of scenarios was fundamental, it gave us a rough estimation of the size of the challenge, and it helped us to keep track of the progress of our migration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The takeaway here is: make sure you have an overview of what lies ahead.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#let-it-go"&gt;
  &lt;/a&gt;
  Let it go ❄️
&lt;/h2&gt;

&lt;p&gt;Some development principles are beyond frameworks and languages, some are not. The limitations of previous testing tools had led us to create some patterns, like only having one assertion per test.&lt;/p&gt;

&lt;p&gt;This example could have been valid previously, but how is this applicable for a test that is supposed to mimic a user behavior? Your user won’t load the page, click a button and reload again to interact with another feature, they also won’t wait 10 full seconds after a click for a modal to be open, so neither should your test, especially when having tools like Cypress with great error handling that will tell you exactly where the error lies.&lt;/p&gt;

&lt;p&gt;In an effort to increase the adoption of the tool and the speed of the migration I added an extension to our Cypress implementation to allow for the usage of Gherkin to write the tests and at some point it only got in our way to make the best of Cypress performance and what the tool could provide, so we had to rewrite a good part of the scenarios for a second time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-the-compass-in-hand"&gt;
  &lt;/a&gt;
  Keep the compass in hand
&lt;/h2&gt;

&lt;p&gt;Take this moment to not blindly convert every scenario to a Cypress acceptance test. Acceptance tests are costly and intrinsically flaky, therefore &lt;strong&gt;challenge people into asking if that scenario could have been covered by a unit or an integration test&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cypress can easily be bloated with different types of testing, but in our case it was important to keep our goal in mind: making testing easier, decreasing the flakiness, and improving our day-to-day speed of delivery. Having that as our north guided lots of conversations into a common understanding and solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#draw-a-map"&gt;
  &lt;/a&gt;
  Draw a map
&lt;/h2&gt;

&lt;p&gt;Cypress documentation is one of those easy to read and follow. Fairly enough, some developers will only be interested in updating existing scenarios, and they will bring assumptions on how to write tests from previous experiences with different tools that in some cases won’t fit your new way of handling them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Strive for making the adoption easier by developing custom commands if needed and writing a straight to the point documentation of what matters for your application.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#keep-swimming"&gt;
  &lt;/a&gt;
  Keep swimming
&lt;/h2&gt;

&lt;p&gt;As mentioned before, it took us a year to complete the entire migration, and this is not to point fingers. We have stakeholders with new ideas to be implemented and so much time for task forces and contributing with the adoption of a new tool.&lt;/p&gt;

&lt;p&gt;Bringing in some shiny new technology into a company doesn’t stop when the PR is merged, a good part of the job is to make time to give support to people that might be struggling with adopting it and to keep pushing people to make time for it, reminding them of the benefits of when we cross the line. Trust me, the trouble is worth it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy"&gt;
  &lt;/a&gt;
  Enjoy 💃
&lt;/h2&gt;

&lt;p&gt;And finally, when it’s all done, celebrate! This is web development, it won’t be too long until the next journey starts again ;)&lt;/p&gt;

</description>
      <category>cypress</category>
      <category>testing</category>
      <category>e2e</category>
    </item>
    <item>
      <title>Fixing analyzer problems in multi-targeted Umbraco packages</title>
      <author>Matt Brailsford</author>
      <pubDate>Wed, 28 Jul 2021 08:45:02 +0000</pubDate>
      <link>https://dev.to/mattbrailsford/fixing-analyzer-problems-in-multi-targeted-umbraco-packages-3ijk</link>
      <guid>https://dev.to/mattbrailsford/fixing-analyzer-problems-in-multi-targeted-umbraco-packages-3ijk</guid>
      <description>&lt;p&gt;As many of you may know, I've recently been working on getting &lt;a href="https://vendr.net"&gt;Vendr&lt;/a&gt; ready for Umbraco v9 which is based on .NET Core. As we &lt;a href="https://vendr.net/blog/getting-vendr-net-core-ready/"&gt;blogged about&lt;/a&gt;, because we need to continue to support v8 users of Umbraco we took the decision to do a &lt;a href="https://docs.microsoft.com/en-us/nuget/create-packages/multiple-target-frameworks-project-file"&gt;multi-targeted approach&lt;/a&gt; whereby we would have a single package that contains DLL's compiled for both .NET Framework (v8) and .NET Core (v9) and have the correct ones be used depending on the project it is installed into.&lt;/p&gt;

&lt;p&gt;Whilst most of the setup for multi-targeting worked as expected, there was one weird bug that we couldn't quite figure out. We managed to find a hacky way around it, and just moved on, but as more Umbraco package devs are starting to make the move to .NET Core, and some of those are also looking at multi targeted approaches, I'm seeing those devs hit the exact same problem too, so I thought I'd look into more and see if there is proper fix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;The problem I was witnessing was that my projects that had an Umbraco dependency would also inherit a dependency on Lucene.NET. For the .NET Framework target this would be Lucene.NET v3 and for the .NET Core target this would be Lucene.NET v4.&lt;/p&gt;

&lt;p&gt;The issue was, that the v4 build of Lucene.NET contained some code analyzers which the v3 build didn't have, however the SDK project implementation, which automatically includes analyzers into your project, would assume that if one build had the analyzers, then both builds must have them, and so analyzers would appear in both analyzers collections for both targets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xqBs_NSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg2p2gk2i3kt38y8pvq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xqBs_NSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg2p2gk2i3kt38y8pvq5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately though, because the v3 build didn't actually have any of them, when you'd come to build the project, you would get build errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxYnxEKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tifnnot6r34iaql6flv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxYnxEKV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tifnnot6r34iaql6flv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#original-hacky-workaround"&gt;
  &lt;/a&gt;
  Original Hacky Workaround
&lt;/h2&gt;

&lt;p&gt;I did some investigation and tried a number of things to try and make this work initially, but nothing I did seemed to work.&lt;/p&gt;

&lt;p&gt;The only thing I could get to work, and what many of the other Umrbaco package devs started doing was to copy the analyzers DLLs from the v4 nuget package folder to the v3 folder.&lt;/p&gt;

&lt;p&gt;This worked, and prevented the build errors, but it wasn't ideal. Especially if you have a build server build your packages as I ended up having to put some code in my build script to auto copy the analyzers after nuget package restore which was really pretty ugly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reporting-the-issue"&gt;
  &lt;/a&gt;
  Reporting The Issue
&lt;/h2&gt;

&lt;p&gt;I was originally reluctant to report this issue as I couldn't really narrow down what was at fault. Was it Visual Studio? or was it .NET?&lt;/p&gt;

&lt;p&gt;After some discussions with others, we came to the conclusion it must be .NET at fault so I went and &lt;a href="https://github.com/dotnet/core/issues/6500"&gt;reported the issue on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dotnet/core/issues/6500"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5R2PuVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8l23dhchzug079893qu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thankfully we were correct that it was .NET Core, or more specifically, the SDK project implementation that was at fault, and there was already a fix coming in .NET 6&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-better-workaround"&gt;
  &lt;/a&gt;
  A Better Workaround
&lt;/h2&gt;

&lt;p&gt;A great thing from the issue tracker though was a suggested interim workaround which was much less hacky than the approach I had previously been doing and was a simple case of updating your proj file with the following snippet to remove the offending analyzer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Workaround for this bug (replace the analyzer name with the one you need to exclude (filename only, no extension) --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Target&lt;/span&gt; &lt;span class="na"&gt;Name=&lt;/span&gt;&lt;span class="s"&gt;"RemoveLuceneAnalyzer"&lt;/span&gt; &lt;span class="na"&gt;BeforeTargets=&lt;/span&gt;&lt;span class="s"&gt;"CoreCompile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Analyzer&lt;/span&gt; &lt;span class="na"&gt;Remove=&lt;/span&gt;&lt;span class="s"&gt;"@(Analyzer)"&lt;/span&gt; &lt;span class="na"&gt;Condition=&lt;/span&gt;&lt;span class="s"&gt;"%(FileName) == 'Lucene.Net.CodeAnalysis.CSharp'"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, this worked great and is now the approach I'm using in all my affected projects.&lt;/p&gt;

&lt;p&gt;Hopefully this won't be needed when .NET 6 gets released, but we at least have a decent workaround in the meantime.&lt;/p&gt;

&lt;p&gt;I hope this helps other Umbraco package devs who also hit the same problem whilst multi-targeting.&lt;/p&gt;

&lt;p&gt;Matt&lt;/p&gt;

</description>
      <category>umbraco</category>
      <category>packages</category>
      <category>multitargeting</category>
      <category>csharp</category>
    </item>
    <item>
      <title>The Most POWERFUL [JavaScript] Function </title>
      <author>Clean Code Studio</author>
      <pubDate>Wed, 28 Jul 2021 08:35:17 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/the-most-powerful-function-javascript-hej</link>
      <guid>https://dev.to/cleancodestudio/the-most-powerful-function-javascript-hej</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;Today we are going to learn about the most powerful function, I believe, that exists within the entirety of JavaScript. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Let's dive in to THE MOST POWERFUL [JavaScript] function&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#arrayreduce"&gt;
  &lt;/a&gt;
  Array.reduce
&lt;/h2&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What does reduce do? Why is it so powerful?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, here's the technical definition of reduce...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not very helpful if you ask me, so LET'S LEARN BY DOING&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#using-reduce-the-most-powerful-function-in-all-of-js"&gt;
  &lt;/a&gt;
  Using Reduce - The most powerful function in all of JS
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#0-a-few-pretutorial-notes"&gt;
  &lt;/a&gt;
  0. A few pre-tutorial notes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I created a YouTube screencast covering all of the coding examples. This article dives into a bit more detail than parts of the screencast - but some of the more advanced coding examples themselves may be easier to follow via screencast. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The examples we start with are super easy. The advanced examples are towards the bottom of the article. Feel free to skip ahead based on your comfort level. The intermediate to advanced examples are where you'll find powerful real world use cases. Scroll down to find those once you're comfortable with the beginner examples. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WGleM3FeZmU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-find-total-of-all-numbers-summed"&gt;
  &lt;/a&gt;
  1. Find total of all numbers summed
&lt;/h3&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// loop 1: 0 + 3&lt;/span&gt;
&lt;span class="c1"&gt;// loop 2: 3 + 2.1&lt;/span&gt;
&lt;span class="c1"&gt;// loop 3: 5.1 + 5&lt;/span&gt;
&lt;span class="c1"&gt;// loop 4: 10.1 + 8&lt;/span&gt;
&lt;span class="c1"&gt;// returns 18.1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-find-total-of-all-numbers-multiplied"&gt;
  &lt;/a&gt;
  2. Find total of all numbers multiplied
&lt;/h3&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;As shown, it's pretty easy to add or multiply all of the numbers in an array. But, c'mon - I said reduce is THE MOST POWERFUL FUNCTION IN ALL OF JS.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Obviously, there has to be more to reduce - right?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's say we have &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, &lt;code&gt;10&lt;/code&gt;, and &lt;code&gt;60&lt;/code&gt;. Let's say we want to get &lt;em&gt;some&lt;/em&gt; of the values. &lt;/p&gt;

&lt;p&gt;Or, more specifically, we want to &lt;code&gt;filter&lt;/code&gt; the values and only return the values if they are less than 10. &lt;/p&gt;

&lt;p&gt;Normally, we can simply use the &lt;code&gt;filter&lt;/code&gt; function and only return the numbers if they are less than 10.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#3-arrayfilter-using-reduce"&gt;
  &lt;/a&gt;
  3. Array.Filter using reduce
&lt;/h3&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Well, with reduce - we can do the exact same thing.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
   &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;And lala, we replaced filter with reduce - pretty cool but let's be honest. This STILL DOESN'T justify &lt;code&gt;reduce&lt;/code&gt; as being &lt;strong&gt;THE MOST POWERFUL FUNCTION IN ALL OF JavaScript&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What if I told you, we could continue down this path and replace just about every array function in JavaScript using reduce?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#3-recreating-raw-arraysome-endraw-using-raw-arrayreduce-endraw-"&gt;
  &lt;/a&gt;
  3. Re-creating &lt;code&gt;Array.some&lt;/code&gt; using &lt;code&gt;Array.reduce&lt;/code&gt;
&lt;/h3&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// returns true (We have some numbers in the array are less than 50)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Using reduce, we simply set the initial value to false. If the condition is already true then we return the condition. If the condition is not already true then we check if the current number meets our condition.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
   &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;  
       &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;
       &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Notice, this time we start with a bool (false) as our initial value instead of using a number or an array.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We have now summed, multiplied, filtered, and re-created some (aka conditionally checking something on our array using reduce).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We could go on to also replace the &lt;code&gt;Array.every&lt;/code&gt; function using &lt;code&gt;Array.reduce&lt;/code&gt;, but since that is similar to replacing &lt;code&gt;Array.some&lt;/code&gt; using &lt;code&gt;Array.reduce&lt;/code&gt; we'll just note that we can easily do that as well.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#4-what-about-raw-arrayjoin-endraw-using-raw-arrayreduce-endraw-"&gt;
  &lt;/a&gt;
  4. What about &lt;code&gt;Array.join&lt;/code&gt; using &lt;code&gt;Array.reduce&lt;/code&gt;?
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Replacing &lt;code&gt;Array.join&lt;/code&gt; with &lt;code&gt;Array.reduce&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;car&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;people&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// "truck-car-people"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Using &lt;code&gt;Array.reduce&lt;/code&gt; we can code the following&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;car&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;people&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// "-truck-car-people"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Notice the output has a preceding dash at the front.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The callback function accepted as the first argument for the &lt;code&gt;Array.reduce&lt;/code&gt; function accepts more parameters. We can use the third accepted parameters to track our &lt;code&gt;index&lt;/code&gt; for our reduce function&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;truck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;car&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;people&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
       &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; 
       &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// "truck-car-people"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;With that 3rd parameter set up, this reduce function will now act exactly how the original &lt;code&gt;Array.join&lt;/code&gt; acts&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;With that, so far we have used reduce to replace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array.map&lt;/li&gt;
&lt;li&gt;Array.filter&lt;/li&gt;
&lt;li&gt;Array.every, Array.some&lt;/li&gt;
&lt;li&gt;Array.join&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#5-arrayconcat-using-reduce"&gt;
  &lt;/a&gt;
  5. Array.concat using Reduce
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What about concat? Where you can concat an array of "1", "2", and "3" with another array?&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;// [1, 2, 3, 'hey', 'world', 'mars']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How would you concat or combine arrays reduce?&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="c1"&gt;// [1, 2, 3, 'hey, 'world', 'mars']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What's cool about combining arrays using &lt;code&gt;Array.reduce&lt;/code&gt; is that we can "concat" as many arrays as we want to.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Simply, by passing in more arrays we will automatically combine aka concatenate them using reduce.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With that, we have replicated &lt;code&gt;Array.concat&lt;/code&gt; using &lt;code&gt;Array.reduce&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Let's get into a few more examples.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;First, let's create a few people.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sarah&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tim@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;len&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;len@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-grouping-people-by-names-using-raw-arrayreduce-endraw-"&gt;
  &lt;/a&gt;
  6. Grouping People By Names using &lt;code&gt;Array.reduce&lt;/code&gt;
&lt;/h3&gt;



&lt;p&gt;&lt;strong&gt;Example of what we want when we group people by names&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;

&lt;span class="c1"&gt;// Gets Len&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'len', email: 'len@gmail.com', id: 3 }&lt;/span&gt;


&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sarah&lt;/span&gt;

&lt;span class="c1"&gt;// Gets sarah&lt;/span&gt;
&lt;span class="c1"&gt;// { name: 'sarah', email: 'sarah@gmail.com', id: 1}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Grouping people by their names using reduce&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the initial value for our reduce function an object&lt;/li&gt;
&lt;li&gt;Build an object where 

&lt;ul&gt;
&lt;li&gt;The key is the person's name ([person.name]) &lt;/li&gt;
&lt;li&gt;The value is the person object ([person.name]: person)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Example (That won't work)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In the example above we'll get an error&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Uncaught SyntaxError: Unexpected token ':'&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Whenever we use a short hand function to return an object we need to wrap it in parentheses&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wrap the returned object's brackets in parentheses to fix the error
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;people&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;And lala, we now have a people object where the people are grouped by their name&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we go &lt;code&gt;people.len&lt;/code&gt; we get len&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'len', email: 'len@gmail.com', id: 3 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we go &lt;code&gt;people.sarah&lt;/code&gt; we get sarah&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sarah&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'sarah', email: 'sarah@gmail.com', id: 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we go &lt;code&gt;people.tim&lt;/code&gt; we get tim&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;people&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tim&lt;/span&gt; &lt;span class="c1"&gt;// { name: 'tim', email: 'tim@gmail.com', id: 2 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we want all of our &lt;code&gt;people&lt;/code&gt;?&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// people &lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nx"&gt;tim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tim@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;len&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;len@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-plucking-an-array-of-values-by-a-given-key-using-reduce"&gt;
  &lt;/a&gt;
  7. Plucking an array of values by a given key using Reduce
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;More than that, what if we wanted to get &lt;strong&gt;just&lt;/strong&gt; the names of the people?&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="c1"&gt;// ['sarah', 'tim', 'len']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What if we wanted to get &lt;strong&gt;just&lt;/strong&gt; the emails of the people?&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;emails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="c1"&gt;// ['sarah@gmail.com', 'tim@gmail.com', 'len@gmail.com']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-flattening-multiple-levels-of-nested-arrays-using-reduce"&gt;
  &lt;/a&gt;
  8. Flattening multiple levels of nested Arrays using Reduce
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;More than that, what if we had an array of nested arrays?&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;list_of_arrays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub_one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub_two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub_three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nested_sub_one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nested_sub_two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nested_sub_three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nested_sub_four&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Let's take our list of arrays, and lets of course use reduce&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;list_of_arrays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;flattened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;flattened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
         &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;flattened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="p"&gt;....&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduced&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nested_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;nested_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
       &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;flattened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;And lala, we've flattened our list of multiple level nested arrays.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sub_one&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sub_two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sub_three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nested_sub_one&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nested_sub_two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nested_sub_three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nested_sub_four&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;one&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;three&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We only handled nested sub arrays up to 3 levels deep, but you could of course spend some more time on the function and use recursion to pretty simply flatten an array infinite nested levels deep using reduce.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#more-powerful-use-cases-for-reduce"&gt;
  &lt;/a&gt;
  More POWERFUL use cases for Reduce
&lt;/h2&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Alright, so now let's dive into some of the more Powerful, not as oftenly used - use cases for &lt;code&gt;Array.reduce&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#9-apply-formatters-on-strings"&gt;
  &lt;/a&gt;
  9. Apply Formatters on Strings
&lt;/h3&gt;



&lt;p&gt;I'm going to start off with an array of strings.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cool-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world of javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye, its been swell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next let's create an array of &lt;code&gt;formatters&lt;/code&gt;. Normally, I'd call these filters - but they're not really filters. They're just formatting the string.&lt;/p&gt;

&lt;p&gt;These formatters are actually going to be callback functions.&lt;/p&gt;

&lt;p&gt;First, we'll create a dashes to spaces formatter (replace dashes with spaces). Will use regex to implement this formatter.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dashesToSpaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/-/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we'll create a capitalize string formatter.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}${&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, we'll create a string limiter formatter. &lt;/p&gt;

&lt;p&gt;If the string is greater than a given length, replace the characters after that length limit with three dots.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;...`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we'll create a &lt;code&gt;formatters&lt;/code&gt; array with all of our string formatters.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;formatters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dashesToSpaces&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Remember we have our array of strings.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cool-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world of javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye, its been swell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Our Goal:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Our goal is to apply every single formatter from our formatters array onto every single string from our strings array.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using reduce, we can simply do this like so!&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="nx"&gt;formatters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;
   &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;_And just like that, we used reduce to apply an array of formatters on an array of strings. _&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Original Strings Array&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cool-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world of javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;goodbye, its been swell&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Output (After using reduce to apply string formatters)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Goodbye, i...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello worl...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cool link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-group-students-by-rooms-using-reduce"&gt;
  &lt;/a&gt;
  10. Group students by rooms (using reduce)
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;First let's create some students&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sally&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We want to group the students by their room&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So what we're going to do is use &lt;code&gt;students.reduce&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;class_rooms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice we use the parentheses around the object we're implicitly returning again. When we use a short hand function to return an object we have to use &lt;code&gt;({})&lt;/code&gt; syntax - if we attempt to directly return an object without the wrapping &lt;code&gt;()&lt;/code&gt; we'll get an error. &lt;/p&gt;

&lt;p&gt;Next, we want to use the student room as the key:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;class_rooms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rooms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;rooms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;rooms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;room&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;student&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we have our students grouped by their rooms/classes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sally&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
   &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
   &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;room&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We have successfully grouped our students by their rooms - so that is how we group by reduce. &lt;/p&gt;



&lt;p&gt;So guys, that's about all I've got with reduce. I guess the biggest takeaway is that reduce is a super method - it really is!&lt;/p&gt;

&lt;p&gt;You can do just about anything you can do with &lt;em&gt;any&lt;/em&gt; other Array method using reduce. &lt;/p&gt;

&lt;p&gt;Instead of going &lt;code&gt;Array.filter.map.filter.forEach&lt;/code&gt;, you could use a single reduce function to accomplish the same goal. &lt;/p&gt;

&lt;p&gt;If you need to group a whole bunch of object by their keys, use reduce.&lt;/p&gt;

&lt;p&gt;If you need to pluck the values related to a given key? Use reduce. &lt;/p&gt;

&lt;p&gt;If you need to apply multiple filters but don't want to raise the time complexity by iterating multiple times over through the same array - use reduce.&lt;/p&gt;

&lt;p&gt;If you want to flatten an array of nested arrays where each nested array may have more nested array while each nested array also may not have any nested arrays? Use reduce.&lt;/p&gt;

&lt;p&gt;If you need to sum some number, multiply some numbers, subtract sum numbers, or do some arithmetic of any sort - reduce works again.&lt;/p&gt;

&lt;p&gt;What if you need to combine some arrays? Use reduce.&lt;/p&gt;

&lt;p&gt;What if you need to combine some objects? Use reduce.&lt;/p&gt;

&lt;p&gt;What if you want to have a method in your back pocket that you know can do it all and just makes you feel more powerful and efficient as a software engineer? &lt;/p&gt;

&lt;p&gt;Use reduce!&lt;/p&gt;

&lt;p&gt;In my opinion, forEach is the most over rated method in the JavaScript eco-system and reduce is the &lt;strong&gt;most&lt;/strong&gt; under rated method in the JS eco-system.&lt;/p&gt;



&lt;p&gt;As a final example of how cool reduce is let's take this final example.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clean Code Studio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;belief&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Simplify!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;should_follow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Si, senor!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;last_example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; 
   &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;last_example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;partial&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;What does this return? It merges all of the objects.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clean Code Studio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;belief&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Simplify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;should_follow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Si, senor!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using reduce you can filter, you can apply, you can apply a list of callbacks, you can flatten, merge, combine...&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;highly&lt;/em&gt; recommend that you become familiar, competent, and over all familiar when it comes to using reduce. &lt;/p&gt;

&lt;p&gt;So again, using reduce you have two parameters. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;accumulator - callback function&lt;/li&gt;
&lt;li&gt;initial value - used during the first iteration by the accumulator callback function
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulatorCallbackFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Accumulator callback function has four parameters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;accumulator - the value returned from the callback function after each iteration&lt;/li&gt;
&lt;li&gt;item - element from the array &lt;/li&gt;
&lt;li&gt;index - the index for the current element being passed into the accumulator callback&lt;/li&gt;
&lt;li&gt;source - the original array reduce is being called on
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, the last bonus tip - what if you want to break out of reduce before you're done iterating through all of the items?&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By slicing the source array at the given index, you'll break out of the reduce functions loop - thus if you have a big data set, you can stop using computational resources once a condition is met.&lt;/p&gt;



&lt;p&gt;With that, I'll close out by saying I highly recommend practicing reduce. It is the JavaScript function that I have found the absolute most use out of. So many times, reduce has been the solution to solving complex coding challenges in a concise and to the point way.&lt;/p&gt;

&lt;p&gt;For demo's on every single &lt;code&gt;Array.reduce&lt;/code&gt; concept we covered here. Checkout the screencast I created - we dive deep into reduce. We start from simple and build up to eventually cover all of the examples shared in this post. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WGleM3FeZmU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for tuning in, and if you have any comments - questions - or concerns, the comment section is right below :) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt; Clean Life&lt;br&gt;
&lt;a href="https://youtube.com/c/cleancodestudio"&gt;Simplify&lt;/a&gt;&lt;/p&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Did you know I have a newsletter? 📬&lt;/p&gt;

&lt;p&gt;If you want to get notified when I publish new blog posts or make major project announcements, head over to &lt;a href="https://cleancodestudio.paperform.co/"&gt;https://cleancodestudio.paperform.co/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>code</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to get 100 stars every day on GitHub?</title>
      <author>Matthew Tam</author>
      <pubDate>Wed, 28 Jul 2021 08:34:28 +0000</pubDate>
      <link>https://dev.to/matthewtamyt/how-to-get-100-stars-every-day-on-github-3ee5</link>
      <guid>https://dev.to/matthewtamyt/how-to-get-100-stars-every-day-on-github-3ee5</guid>
      <description>&lt;p&gt;So let's start off with proof that this actually works. This is a screenshot of my repo &amp;gt; Insights &amp;gt; Traffic, where I see all the views of my repo, which has just started to blow up with views. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uzcEEv6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c6b0iezwaztt2lag9ix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uzcEEv6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c6b0iezwaztt2lag9ix.png" alt="Screenshot (100)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is my repo, by the way, if you want to check it out:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/MatthewTamYT"&gt;
        MatthewTamYT
      &lt;/a&gt; / &lt;a href="https://github.com/MatthewTamYT/LearnPython"&gt;
        LearnPython
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Everything you need to know about learning Python is here. This is a catalog that teaches you how to code in Python. In fact, everything you need to know from beginner to intermediate is here. Even experts could learn from this!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5-steps-to-getting-stars"&gt;
  &lt;/a&gt;
  5 Steps to Getting Stars
&lt;/h2&gt;

&lt;p&gt;So here are 5 of the most important steps to getting more views on GitHub. Feel free to go through them step by step while modifying your own repo. So let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-repo-content"&gt;
  &lt;/a&gt;
  1 Repo Content
&lt;/h2&gt;

&lt;p&gt;You might be surprised, but different repo types get very different kind of views. After thorough experimentation, I have found that tutorials on how to code a certain language racks up a lot of views. In fact, mine got 70 stars on the first day it launched without advertising. The second most popular type of repo is one that is not just a game or somewhat, but something that actually makes something better, like IDE plugins, etc. Of course, you could do more experiments on popular repos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-readme"&gt;
  &lt;/a&gt;
  2 README
&lt;/h2&gt;

&lt;p&gt;If you are reading this article, I am assuming that you really want more views and stars on your repo and that you have already gone through other articles about a pretty README. I hate to break it to you, but it's true. Spend time on your README! Make sure you get a good logo in black and white for your README. Then maybe add a GIF right below it, followed by some Shields.io. If you need a tutorial on Shields, I recommend &lt;a href="https://www.youtube.com/watch?v=Dl-ekLb4quE"&gt;this video&lt;/a&gt;. The best example for this is my repo on &lt;a href="https://github.com/MatthewTamYT/Breakout"&gt;Breakout&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-social-card"&gt;
  &lt;/a&gt;
  3 Social Card
&lt;/h2&gt;

&lt;p&gt;The Social Card is the first image people see when clicking into a sharable link of your repo. People could see that it looks good and star it anyways. The truth is, many people star because it looks nice and appealing, not because it is useful. Spend some time on appearance and you may get crazy results. If you want to know more about how you should create a logo, watch this YouTube video I made, and please subscribe if you like it.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/eI3Tf0Exb2c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-advertisement"&gt;
  &lt;/a&gt;
  4 Advertisement
&lt;/h2&gt;

&lt;p&gt;I have found out that Reddit, contrary to public belief, does not actually work a charm. However, posting to Dev.to (this website) actually got me thousands of views a day. Hacker news does not work too good either. Of course, this varies project to project, I am just trying to tell you what happened to my repo. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QfRCMzMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg44jpyrpht2xiuspmn5.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QfRCMzMY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dg44jpyrpht2xiuspmn5.JPG" alt="Capture1"&gt;&lt;/a&gt;&lt;br&gt;
Here is what I posted to Dev.to:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/matthewtamyt" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZDeh-t7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bJU_i2iZ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/666565/cf479e27-aae4-4b1b-8b5a-aa74f29061f2.jpeg" alt="matthewtamyt"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matthewtamyt/the-best-way-to-learn-python-beginners-friendly-1akn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Best Way to Learn Python (Beginners-Friendly)!&lt;/h2&gt;
      &lt;h3&gt;Matthew Tam ・ Jul 25 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5-community-bits-and-bobs"&gt;
  &lt;/a&gt;
  5 Community Bits and Bobs
&lt;/h2&gt;

&lt;p&gt;Go to the Insights tab, click Community, and finish all the tasks there. GitHub is more likely to promote your project if you meet community guidelines. This is a very quick step, but very effective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-1-stargazers"&gt;
  &lt;/a&gt;
  Bonus 1: Stargazers
&lt;/h2&gt;

&lt;p&gt;This is a project where you can display the names of your stars in a beautiful yet informative way. Huge thanks to NastyOx for this project: &lt;a href="https://github.com/nastyox/Repo-Roster"&gt;https://github.com/nastyox/Repo-Roster&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-2-unlicense"&gt;
  &lt;/a&gt;
  Bonus 2: Unlicense
&lt;/h2&gt;

&lt;p&gt;People don't like it when you tell them what they can and can't do. That's why you should choose the Unlicense License, so people are free to copy or reproduce your product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-3-comment"&gt;
  &lt;/a&gt;
  Bonus 3: Comment
&lt;/h2&gt;

&lt;p&gt;You can comment down below and give your repo name, and what it does, I will check it out, I promise.&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>programming</category>
    </item>
    <item>
      <title>Difference Between React And Angular. A Comparison Guide For 2021</title>
      <author>Nastassia Ovchinnikova</author>
      <pubDate>Wed, 28 Jul 2021 08:31:12 +0000</pubDate>
      <link>https://dev.to/flatlogic/difference-between-react-and-angular-a-comparison-guide-for-2021-4kdo</link>
      <guid>https://dev.to/flatlogic/difference-between-react-and-angular-a-comparison-guide-for-2021-4kdo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello again, dear friends and accidental bypassers! Today we would like to discuss the factual difference between two web-developing mainstays – React and Angular. Bear in mind, we don’t want to put the two up against each other. Our goal is to explore the difference between them to highlight the stronger and weaker sides of both. The reasoning behind such an outlook on our topic is quite simple – both Angular and React are, undoubtedly, exceptionally good and functional. That’s why it would be a disservice to the cause to try to categorically decide which one is better than the other.&lt;/p&gt;

&lt;p&gt;That being said, such a topic would be unable to exist without any comparisons at all. We would collate and find a sort of champion in some categories. And now, let’s get down to business&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-react"&gt;
  &lt;/a&gt;
  Overview of React
&lt;/h2&gt;

&lt;p&gt;When discussing a topic like ours, it is quite mandatory to do it justice. And to do that, we need to discuss our compared participants separately first. So, now would be a perfect time to give you a little overview of what React is and how it functions.&lt;/p&gt;

&lt;p&gt;So, by official documentation, React is “a library for building composable user interfaces. It encourages the creation of reusable UI components, which present data that changes over time”. Quite a definition, although quite easy to understand. But let’s try to explain it even easier. React is a useful tool that one can use to create all kinds of websites and webapps. It was created by Facebook and Jordan Walke in 2013 and since then has been an irreplaceable part of many JavaScript front-end developers’ lives, gathering a huge following of contributors. It is flexible, fast, scalable, and powerful, which, no doubt about it, plays a crucial part in being one of the best tools for creating dynamic and interactive web apps with ease.&lt;/p&gt;

&lt;p&gt;Furthermore, React’s developing and ever-growing user base allows for quick and efficient issue solving, as there is always a ton of people, able to contribute their knowledge and advice in the time of need. It is also pretty simple to work with, making it a good choice for those, who only start their work with JavaScript frameworks. But wait, even that’s not all. Since 2015 there is also been a little useful addition to the whole matter called React Native, which is used for the creation of native mobile apps. But we are not getting in its depth today, leaving this topic for another time.&lt;/p&gt;

&lt;p&gt;Now, let’s take a little peak at what features does React possess:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSX. Not necessary to use, but quite convenient nonetheless, JSX is JavaScript’s legacy in React. Put simply, it is a syntax tool that helps React to understand how the UI should look. In a way, JSX creates React’s elements. Rather than artificially separating technologies by putting markup and logic in separate files, React separates responsibility through loosely coupled units called “components” that contain both markup and logic with JSX’s help.&lt;/li&gt;
&lt;li&gt;Components. As we’ve already mentioned, components are the loosely coupled units, containing both markup and logic. Or, to paraphrase, components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation. And, frankly speaking, React is based on these things. And they are quite helpful to say the least, as they allow for easier code maintenance and higher readability while working on large-scale projects.&lt;/li&gt;
&lt;li&gt;Unidirectional data flow and Flux. Flux is a pattern, implemented in React, that helps to keep your whole data flow one-directional. That, in turn, complement’s React’s composable view components.&lt;/li&gt;
&lt;li&gt;Virtual Document Object Model Usage. Being a JavaScript library, React utilizes virtual Document Object Model, which, when compared to regular DOM, provides higher app performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also some pros and cons worth mentioning when talking about React:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactjs-pros"&gt;
  &lt;/a&gt;
  React.js Pros:
&lt;/h2&gt;

&lt;p&gt;1.React is, as we’ve already mentioned, is pretty easy to learn, making it a good choice for novice front-end developers;&lt;br&gt;
2.React’s syntax is HTML-like, which allows for highly detailed documentation and templating;&lt;br&gt;
3.React support such a useful feature, as server-side rendering;&lt;br&gt;
4.Also, there are a number of versions of React, the transition between them is seamless;&lt;br&gt;
5.There is no frame-specific code when it comes to React, which allows the convenient usage of Javascript.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reactjs-cons"&gt;
  &lt;/a&gt;
  React.js Cons:
&lt;/h2&gt;

&lt;p&gt;1.React’s documentation might appear lacking and poor, when compared to other frameworks and libraries;&lt;br&gt;
2.The full view of Model-View-Controller is unavailable, supporting only part-of-MVC view;&lt;br&gt;
3.Also, easy to learn the React itself, JSC might be a concerning barrier for new developers.&lt;/p&gt;

&lt;p&gt;All that being said, React also has other limitations, such as being a front-end library, which means covering only the view layer of the app, thus creating a need to use other technologies to complete the full developer tooling set and a slight increase in the learning curve for new developers due to the usage of inline templating and JSX. But, nonetheless, when it comes to creating multiple events apps, as well as creating sharable components for the app, React has few competitors. And that’s not taking into consideration the exceptional convenience in the situations when your app needs personalized solutions.&lt;/p&gt;

&lt;p&gt;And now we would like to debunk a couple of misconceptions about React, the first being the mistaken belief that React is, in fact, a framework. It is simply not, as React, as we have already mentioned, is a library. And because of that React mostly focuses on the view layer of the app, helping to make handling it gradually easier, as well as easing its integration into a project much smoother.&lt;/p&gt;

&lt;p&gt;Misbelief number two can be summarized as “JSX is mandatory when using React”. It is most certainly not. It is not even a hard requirement but simply put, there is an ability to use JSX when using React. And we see few reasons not to use it.&lt;/p&gt;

&lt;p&gt;The final misconception about React we want to mention is the belief that React needs Redux for its ecosystem. We won’t try to argue with the fact that Redux is indeed commonly used with React. And it proves to be quite a useful tool, as modern developers quite frequently need to juggle many states between various components, and handling complex apps might become somewhat problematic. That’s where Redux comes into play because it is an open-source JavaScript library and it was created to help in solving such problems. And while being exceptionally handy when used in combination with React, Redux is not the only solution for this kind of problem. There are plenty of state management tools on the market today to help you manage your React’s state management.&lt;/p&gt;

&lt;p&gt;Summarizing, it is ought to be said that React is one of the best open-source front-end JavaScript libraries for user interface development on the market today and, presumably, would hold this position for many years to come.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview-of-angular"&gt;
  &lt;/a&gt;
  Overview of Angular
&lt;/h2&gt;

&lt;p&gt;Now, let’s have a closer look at the other today’s web-development mainstay – Angular. And, first and foremost, let’s get to know what it is and what it is used for. Angular is a TypeScript-based open-source web application framework. It was created in 2016 by Google and not so long ago, in May of 2021, Angular has got a stable release. This framework is mainly used for client applications creation and is widely used as one of the best tools for single-page applications front-end. It is also one of the oldest (but not worth from it) frameworks on the market today, and, due to terrific support and backing of a humongous number of contributors, Angular is extremely convenient for the knowledgeable, but has a pretty steep learning curve for the new users.&lt;/p&gt;

&lt;p&gt;Angular is perfect for any development team that looks ready-to-use full stack solutions, scalable feature-rich apps, or for creating performance-oriented web solutions.&lt;/p&gt;

&lt;p&gt;An important thing to keep in mind is that Angular and AngularJS are not the same. The key differences are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Angular uses hierarchy of components as its primary architectural characteristic. AngularJS, on the other hand, uses the concept of “scope” as such;&lt;/li&gt;
&lt;li&gt;Angular and AngularJS’ expression syntax are different, as &lt;/li&gt;
&lt;li&gt;Angular uses “ [ ] ” for property binding and “ ( ) ” for event binding;&lt;/li&gt;
&lt;li&gt;Angular possesses the ability of dynamic loading, while AngularJS lacks that;&lt;/li&gt;
&lt;li&gt;Angular also possesses the support for Angular Universal, giving it the ability to run apps on servers;&lt;/li&gt;
&lt;li&gt;Due to the recommended use of Microsoft’s TypeScript language, Angular has Static typing (Generics included) and Annotations;&lt;/li&gt;
&lt;li&gt;Much of Angular’s core functionality has moved to modules;&lt;/li&gt;
&lt;li&gt;Angular is able to support asynchronous template compilations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, just as well as with React, let’s take a look at Angular’s pros and cons:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#angular-pros"&gt;
  &lt;/a&gt;
  Angular Pros:
&lt;/h2&gt;

&lt;p&gt;1.Angular follows clean code development;&lt;br&gt;
2.It has an interface that reminisces material design;&lt;br&gt;
3.With the help of Angular CLI, the process of updating becomes seamless;&lt;br&gt;
4.Angular is, after all being said, just an exceptional high performing full-stack framework.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#angular-cons"&gt;
  &lt;/a&gt;
  Angular Cons:
&lt;/h2&gt;

&lt;p&gt;1.Learning curve might be steep;&lt;br&gt;
2.There is a need of knowing TypeScript and other components that are specific to Angular;&lt;br&gt;
3.Angular’s documentation is not all-inclusive;&lt;br&gt;
4.Despite being a full-stack solution, there still can be situations that will require third party integrations. And these integrations might be complicated;&lt;br&gt;
5.Switching between versions can be challenging.&lt;/p&gt;

&lt;p&gt;Overall, Angular uses TypeScript and HTML to build apps, as well as being written on TypeScript itself. It also comes with such features as Directives, Forms, Pipes, HTTP Services, Dependency Injection and many-many more, making it a terrific framework for building sophisticated complex web and mobile applications, adapted for every device imaginable.&lt;/p&gt;

&lt;p&gt;There are also some misconceptions concerning Agular that we would like to touch upon for some clarification. First of them is the belief that Angular is exclusively a JavaScript Library. This one is not true, as Angular is a framework, rather than a library and it has quite a lot of design patterns, application-like modules and templates. It also has very responsive support and many more single-page web app designing oriented elements.&lt;/p&gt;

&lt;p&gt;The second misconception about Angular is the belief that apps created with Angular are slower than the ones made on different frameworks. This misconception is mostly perpetrated due to poor execution of the apps, created on Angular, as well as some bad design elements in the core framework. But don’t think that Angular itself has no sins in that regard, as previous versions used to be requested from the server, and modules used to be compiled using JIT, resulting in slower app response times. Now it should also be mentioned that the latest version of Angular has a feature, called AOT (Ahead of Time compilation), which improves app performance in a significant way.&lt;/p&gt;

&lt;p&gt;Now let’s get to the third misconception – “Using TypeScript is mandatory with Angular”. This is one of the biggest Angular misconceptions, as TypeScript is not a necessity, but one of Angular’s biggest advantages. And it can be easily replaced with ES5 – JavaScript for app development.&lt;/p&gt;

&lt;p&gt;The fourth and last misconception about Angular we would like to discuss here is the belief that Angular lacks State Management and, thus, is not compatible with Redux and Flux. Let us put it this way: as web apps become more and more complicated each and everyday state management becomes more and more vital accordingly. And while AngularJS wasn’t very fitting in that regard, the latest Angular framework is, as it is designed to provide devs with options on how to use their libraries more efficiently. And that includes state management libraries, such as Redux and Flux, which are based on unidirectional data flow.&lt;/p&gt;

&lt;p&gt;So, all that being said, we hope you are now persuaded that rivalry-based comparison is not possible in this particular pairing, as, also mostly serving the same purpose, both React and Angular are unique in their own ways and are both useful in different situations. Thus, in the following parts of the article, we are going to describe the particular differences between the two and suggest the situations in which each is more fitting.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reacts-unique-features-that-angular-lacks"&gt;
  &lt;/a&gt;
  React’s Unique Features That Angular Lacks
&lt;/h2&gt;

&lt;p&gt;Now we are going to discuss the most interesting part of this whole article – the actual comparison of the two titans.&lt;/p&gt;

&lt;p&gt;And first of all, let’s do a quick run through some things React and Angular do have in common:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One-Way Data Binding. As you might know, data binding is the effort of synchronizing data between UI and logic. One-way data binding in this case refers to the process of binding data from the components to DOM or the other way around, meaning that it is strictly unidirectional. And both Angular and React use one-way data binding (but carry with us, there is going to be a little twist later);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Component-Based Architecture. Both React and Angular approach building their architectures based on replaceable, independent, substitutable and modular components in order to increase the code’s reusability and simplify the whole process. But there is a difference in the libraries they choose to use, as React is, after all, not a framework, but a library, and, thus, uses such supporting tools as Redux, WebPack, Babel, etc. Angular, on the other hand, is a framework and a full-stack one at that. This means that it has many out-of-the-box possibilities, such as RxJS, Angular CLI, Angular Universal, etc.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Summing this point up, it should be said that while both React and Angular have unique ecosystems, React’s one is easier to understand and much more flexible, but depends on external integrations much more than Angular. The latter, on the other hand, can provide a decent comprehensive solution without the need for any external integrations, but due to its independence from them, it is much less flexible.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Community Support. Both React and Angular have huge numbers of people using them, creating and sharing templates on them. This can make the actual process of working on your own project much easier, because in case of running into a dead end it is always possible to turn to the community for their help and advice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s talk about features that are unique to React and are not possessed by Angular. First of them is the upper-mentioned extreme flexibility. In actuality, the thing that could have been React’s greatest weakness – dependency on third-party extensions – proves to be one of its biggest strengths. By using all sorts of tools with various libraries and architecture for developers to choose from, React can provide you with the possibility to create an impressively customizable app. Angular is lacking in that regard, as it only allows its components to be used with other frameworks. And that’s not mentioning the fact that the code needs to be embedded with an HTML application, making delivering real-time updates harder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dybLGfFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Frame-2472wef-1536x1152.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dybLGfFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Frame-2472wef-1536x1152.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second feature that React has is a very open and welcoming app structure. Angular’s app structure is complicated and fixed, which can be good for experienced devs in its own right. But React’s app structure welcomes all and any, as it gives developers the freedom of choice by following a component-based architecture.&lt;/p&gt;

&lt;p&gt;Expanding UI toolset is the third unique feature of React. This feature is the outcome of React’s flexibility, but it should be mentioned nonetheless. Thanks to the community it has, React’s UI toolset expands exponentially, as new tools are developed and tested. Angular’s set of tools for material design components is, on the other hand, fixed and built-in. And as it may make the user interface configuration much faster and easier, it might also restrict the creative flow as you can only work with what you have from the very beginning.&lt;/p&gt;

&lt;p&gt;And the fourth React’s unique feature is its superior state management. Don’t get us wrong, we don’t say that Angular’s state management is bad in any way. But thanks to external state management libraries, such as Redux or MobX, for example, React, which is built in a way that every component has its state, allows for swift and convenient state management of every single component, as well as groups of components.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#angulars-unique-features-that-react-lacks"&gt;
  &lt;/a&gt;
  Angular’s Unique Features That React Lacks
&lt;/h2&gt;

&lt;p&gt;Now let’s talk about the features that Angular possesses and React lacks. First of all, as was promised, we take a look at a little twist we were talking about when discussing data binding. Both React and Angular, as we’ve already said, are implementing one-way data binding, but Angular is also capable of two-way data binding. It means that Angular is able to share data between a component class and its template and if data is changed in one place, it will automatically reflate at the other end. For example, if the value of the input box is changed, then it will also update the value of the attached property in a component class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKLZ7rGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Frame-2473esgf-1536x1152.png%3Flossy%3D1%26strip%3D1%26webp%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKLZ7rGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://833250.smushcdn.com/1694534/wp-content/uploads/2021/06/Frame-2473esgf-1536x1152.png%3Flossy%3D1%26strip%3D1%26webp%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Second feature that Angular has is the ease and simplicity of updating. As Angular is independent from any third-party components, the updating process is seamless and, in fact, fully automated from the developer’s end of the ordeal. React, on the other hand, has a harder process in that regard, as the third-party components need to be checked upon for updates.&lt;/p&gt;

&lt;p&gt;And the third and final feature can be somewhat controversial, as we suggest that Angular’s higher learning curve can be somewhat of a positive feature in itself. Yes, it is harder to understand for an up-and-coming developer, but once mastered it allows for terrific and ever-reliable results.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusions-to-have"&gt;
  &lt;/a&gt;
  Conclusions to have
&lt;/h2&gt;

&lt;p&gt;As we’ve already established in the opening, both React and Angular are true mastodons of the front-end open-source development and, most certainly, will hold on to their high rankings for years to come. But, as with everything in life, they are not ideal and both have a plenty of unique features, drawbacks, mixed bags and blessings in disguise. And it’s up to you to decide whether the higher creative freedom that React provides are your cup of tea more or if it is strict and reliable ways that Angular provides. Or, maybe, it is the combination of two that you are able to master. And, as always, have a nice day and feel free to read up on more of our articles.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#about-flatlogic"&gt;
  &lt;/a&gt;
  About Flatlogic
&lt;/h1&gt;

&lt;p&gt;At Flatlogic, we help businesses to speed up web development with our beautifully designed web &amp;amp; mobile application templates built with &lt;a href="https://flatlogic.com/templates/react"&gt;React&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/vue"&gt;Vue&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/angular"&gt;Angular&lt;/a&gt;, &lt;a href="https://flatlogic.com/templates/react-native"&gt;React Native&lt;/a&gt;, and &lt;a href="https://flatlogic.com/templates/bootstrap"&gt;Bootstrap&lt;/a&gt;. During the last several years we have successfully delivered more than 100 custom dashboards and data management solutions to various clients starting from innovative startups to established and respected enterprises.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WpVQsS-Bb3U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;You might also like these articles:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/javascript-tabs-save-space-examples-of-tabbed-widgets-3d1i"&gt;Javascript Tabs: Save Space! Examples Of Tabbed Widgets&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/top-30-open-source-and-paid-react-charts-examples-3ikg"&gt;Top 30 Open Source And Paid React Charts + Examples&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/flatlogic/7-open-source-react-navbars-some-pitfalls-and-things-to-consider-2ceg"&gt;7 Open Source React Navbars + Some Pitfalls And Things To Consider&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>angular</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
  </channel>
</rss>
