<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My first Hacktoberfest experience 2021 !!!</title>
      <author>Archana Gandhi</author>
      <pubDate>Sat, 13 Nov 2021 07:16:55 +0000</pubDate>
      <link>https://dev.to/archanagandhi/my-first-hacktoberfest-experience-2021--39po</link>
      <guid>https://dev.to/archanagandhi/my-first-hacktoberfest-experience-2021--39po</guid>
      <description>&lt;p&gt;It was 2020 and everyone is posting their hacktoberfest swags on Linkedin, That's how I came to know about hacktoberfest and open source contribution. I started learning Git &amp;amp; Github and participated in some open-source programs. But I always wanted to participate in hacktoberfest and it comes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-first-pullrequest"&gt;
  &lt;/a&gt;
  The First Pull-Request
&lt;/h3&gt;

&lt;p&gt;The one thing I hate about hacktoberfest is there is a lot of excluded spam repositories. I never knew that. I was so excited that my first pr is merged but in the end, it's an excluded project üòÇ. So finding the right repository is challenging too.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OedQHaNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br2cs0m6k8snzjtdgwii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OedQHaNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br2cs0m6k8snzjtdgwii.png" alt="PR's" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learnings"&gt;
  &lt;/a&gt;
  Learnings
&lt;/h3&gt;

&lt;p&gt;Finally, I was able to complete 4+2 Pull requests in 15 days and it took 15 days to get accepted by hacktoberfest. &lt;/p&gt;

&lt;p&gt;I spent most of my extra time contributing and finding good projects. I learnt many things not only coding but also how to write good commit messages üòÇ&lt;/p&gt;

&lt;p&gt;The best and fun part is working in the command prompt as I feel like a hacker üòÅ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;It was a very good start and was fun contributing to open source. Coming to the swags, It is going to be my first swag in my tech life and hactoberfest introduce me to DEV community and I am posting my experience here because of hactoberfest. &lt;/p&gt;

&lt;p&gt;Grateful üåª&lt;/p&gt;

&lt;p&gt;I never wrote a blog before, This is my first blog too. (Please ignore my mistakesü•∫ü§û) Feedbacks are always welcomed üòä&lt;/p&gt;

&lt;p&gt;Bubye!! See you in the next post. Happy November ‚ù§‚ù§&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>beginners</category>
      <category>opensource</category>
      <category>git</category>
    </item>
    <item>
      <title>OS themed profile</title>
      <author>Yash Datir</author>
      <pubDate>Sat, 13 Nov 2021 05:53:38 +0000</pubDate>
      <link>https://dev.to/yashdatir/os-themed-profile-4bf1</link>
      <guid>https://dev.to/yashdatir/os-themed-profile-4bf1</guid>
      <description>&lt;p&gt;Hey there, m up with one of my other mini project, making an OS clone for my profile. It has its own UI, CLI, formats etc. I feel this may have endless possibilities for its usage, also may come up with something creative. I would also like if any one can collaborate for the same. Currently it has all the data static, but arrangements have been made to make it dynamic using a backend. So, lets get in touch...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://yashdatir.github.io/profile-os/"&gt;https://yashdatir.github.io/profile-os/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>linux</category>
      <category>mac</category>
      <category>windows</category>
    </item>
    <item>
      <title>What I've Been Working On: Flask, REST APIs, Testing, and Projects.</title>
      <author>Zachary Niehoff</author>
      <pubDate>Sat, 13 Nov 2021 04:22:47 +0000</pubDate>
      <link>https://dev.to/bixxith/what-ive-been-working-on-flask-rest-apis-testing-and-projects-4de6</link>
      <guid>https://dev.to/bixxith/what-ive-been-working-on-flask-rest-apis-testing-and-projects-4de6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-ive-been-up-to"&gt;
  &lt;/a&gt;
  What I've Been Up To
&lt;/h1&gt;

&lt;p&gt;I have been trying to grow and solidify my knowledge by watching videos/completing tutorials and then making my own projects using the knowledge I gained as practice. I have a list of skills I want to learn so I started working with a few of them simultaneously.  &lt;/p&gt;

&lt;p&gt;I watched a video on LinkedIn Learning about creating a college course website using Flask, REST APIs, and MongoDB.  I started coding along with the instructor but soon realized that I already knew or understood the concepts he was teaching.&lt;/p&gt;

&lt;p&gt;After all the work I've put into my portfolio website I have become quite accustomed with Django's syntax and how it works.  When it came to learning Flask it was a breeze.  I was able to translate the concepts I'd learned with Django and create a working app way quicker than before.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-project"&gt;
  &lt;/a&gt;
  My Project
&lt;/h2&gt;

&lt;p&gt;I finally found an interesting small project to work on.  I am creating a Python/Flask web application that makes small, unimportant decisions for you.  Like where to eat tonight? or What movie should I watch?  It isn't anything even remotely revolutionary but it's getting me valuable experience in Flask, Python, and using APIs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First Steps
&lt;/h4&gt;

&lt;p&gt;It started off being an app to choose where to eat, but I decided I wanted more depth.  Right now, I only have the restaurant chooser app completed.  I plan to implement more soon.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#apis-used"&gt;
  &lt;/a&gt;
  APIs Used
&lt;/h4&gt;

&lt;p&gt;Creating this app I got a lot of experience using Google APIs.  Mainly geocoding, places, and Google map embed.  I also learned that some companies charge to use APIs and that is why I am not hosting my web app.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#html-and-css"&gt;
  &lt;/a&gt;
  HTML and CSS
&lt;/h4&gt;

&lt;p&gt;I love the concept of having templates being extended to generate pages.  It makes setting up new HTML pages for your project fast and simple.  This time around I decided not to go with Bootstrap and try my hand at CSS myself.  I don't think it went badly I just don't know how to make my website's pretty yet.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#virtual-environments"&gt;
  &lt;/a&gt;
  Virtual Environments
&lt;/h4&gt;

&lt;p&gt;One thing the video did teach me was how to setup and use a virtual environment in Visual Code.  I had never used a virtual environment before despite having heard quite a bit about them.  It was surprisingly easy and non-painful.  I can't believe I was using the command prompt so much before.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#unit-testing"&gt;
  &lt;/a&gt;
  Unit Testing
&lt;/h4&gt;

&lt;p&gt;Another concept I've been wanting to get into.  It wasn't covered in the video and my current project isn't a great one to implement tests into.  I currently have one test in my app and it is to make sure the restaurant chooser class functions properly.  I can't make the test 100% accurate because the API sometimes returns Subway and other silly things when you are searching for pizza.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading.
&lt;/h2&gt;

&lt;p&gt;I have been working hard on learning and building up to a career in Software Development.  This is my third project I feel will be worthy of showcasing and I'll hopefully have more to show off before the year is over. Also, in about a month I'll have my Associates Degree in Software Development and officially be halfway done with school! Maybe then I can finally get an Internship.&lt;/p&gt;

&lt;p&gt;The project can be found &lt;a href="https://github.com/Bixxith/Random-Chooser-App"&gt;here&lt;/a&gt; if you are interested in viewing it.&lt;/p&gt;

</description>
      <category>python</category>
      <category>flask</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn CSS Grid in 5 minutes</title>
      <author>Sagar Barapatre</author>
      <pubDate>Sat, 13 Nov 2021 02:59:49 +0000</pubDate>
      <link>https://dev.to/sagarbarapatre/learn-css-grid-in-5-minutes-1j0n</link>
      <guid>https://dev.to/sagarbarapatre/learn-css-grid-in-5-minutes-1j0n</guid>
      <description>&lt;h3&gt;
  &lt;a href="#a-quick-tutorial-on-the-future-of-website-layouts"&gt;
  &lt;/a&gt;
  A quick tutorial on the future of website layouts.
&lt;/h3&gt;

&lt;p&gt;Grid layouts are fundamental to the design of websites, and the CSS Grid module is the most powerful and easiest tool for creating it. I personally think it‚Äôs a lot better than for example Bootstrap (read why &lt;a href="https://hackernoon.com/how-css-grid-beats-bootstrap-85d5881cf163"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The module has also gotten native support by the &lt;a href="https://caniuse.com/#feat=css-grid"&gt;major browsers&lt;/a&gt; (Safari, Chrome, Firefox, Edge) this year, so I believe that all front-end developer will have to learn this technology in the &lt;em&gt;not too distant&lt;/em&gt; future.&lt;/p&gt;

&lt;p&gt;In this article, I‚Äôll take you through the very basics of CSS Grid as quickly as possible. I‚Äôll be leaving out everything you shouldn‚Äôt care about until you‚Äôve understood the basics.&lt;/p&gt;

&lt;p&gt;Now let‚Äôs jump into it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-grid-layout"&gt;
  &lt;/a&gt;
  Your first grid layout
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The two core ingredients of a CSS Grid are the wrapper&lt;/strong&gt; &lt;strong&gt;(parent) and the items (children). The wrapper is the actual&lt;/strong&gt; &lt;strong&gt;grid and the items are the content inside the grid.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here‚Äôs the markup for a wrapper with six items in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To turn our wrapper &lt;code&gt;div&lt;/code&gt; into a &lt;strong&gt;grid&lt;/strong&gt;, we simply give it a display of &lt;code&gt;grid&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, this doesn‚Äôt do anything yet, as we haven‚Äôt defined how we want our grid to look like. It‚Äôll simply stacks 6 &lt;code&gt;div's&lt;/code&gt; on top of each other.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiTBF34p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6xxe3ootqt2gjg0abf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiTBF34p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6xxe3ootqt2gjg0abf5.png" alt="I‚Äôve added a bit of styling, but that hasn‚Äôt got anything to do with CSS grid." width="700" height="206"&gt;&lt;/a&gt;&lt;br&gt;
I‚Äôve added a bit of styling, but that hasn‚Äôt got anything to do with CSS grid.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#columns-and-rows"&gt;
  &lt;/a&gt;
  Columns and rows
&lt;/h3&gt;

&lt;p&gt;To make it two-dimensional, we‚Äôll need to define the columns and rows. Let‚Äôs create three columns and two rows. We‚Äôll use the &lt;code&gt;grid-template-row&lt;/code&gt; and &lt;code&gt;grid-template-column&lt;/code&gt; properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we‚Äôve written three values for &lt;code&gt;grid-template-columns&lt;/code&gt;, we‚Äôll get three columns. We‚Äôll get two rows, as we‚Äôve specified two values for the &lt;code&gt;grid-template-rows&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The values dictate how wide we want our columns to be (100px) and how tall we‚Äôd want our rows to be (50px). Here‚Äôs the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AVBYyF0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdbote8w1p98bk943oji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AVBYyF0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdbote8w1p98bk943oji.png" alt="Imagenckjnaj" width="700" height="159"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make sure you properly understand the relation between the values and how the grid looks, take a look at this example as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to grasp the connection between the code and the layout.&lt;/p&gt;

&lt;p&gt;Here‚Äôs how it plays out:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m65cezaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cibtwix71o8dp5zq4l15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m65cezaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cibtwix71o8dp5zq4l15.png" alt="Imagekmkmlams" width="700" height="176"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#placing-the-items"&gt;
  &lt;/a&gt;
  Placing the items
&lt;/h3&gt;

&lt;p&gt;The next thing you‚Äôll need to learn is how to place items on the grid. This is where you get superpowers, as it makes it dead simple to create layouts.&lt;/p&gt;

&lt;p&gt;Let‚Äôs create a 3x3 grid, using the same markup as before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will result in the following layout:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RpWArMim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb14oi4m6ftfl5bdbjpy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RpWArMim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb14oi4m6ftfl5bdbjpy.png" alt="Imagemalslkm" width="700" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Notice, we only see a 3x2 grid on the page, while we defined&lt;/code&gt; &lt;code&gt;it as a 3x3 grid. That‚Äôs because we only have six items to&lt;/code&gt; &lt;code&gt;fill the grid with. If we had three more, then the lowest row would be filled as well.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To position and resize the items we‚Äôll target them and use the &lt;code&gt;grid-column&lt;/code&gt; and &lt;code&gt;grid-row&lt;/code&gt; properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we‚Äôre saying here is that we want item1 to start on the first grid line and end on the fourth column line. In other words, it‚Äôll take up the entire row. Here‚Äôs how that‚Äôll play out on the screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXabrSlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wk52uh7hnmnu69d33xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXabrSlX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wk52uh7hnmnu69d33xv.png" alt="Imagoopido" width="700" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you confused why we have 4 column lines when we only have 3 columns. Take a look at this image, where I‚Äôve drawn the column lines in black:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGTl6TQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgetu40i925spdja61bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCGTl6TQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgetu40i925spdja61bu.png" alt="Imagelmak" width="700" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that we‚Äôre now using all the rows in the grid. When we made the first item take up the entire first row, it pushed the rest of the items down.&lt;/p&gt;

&lt;p&gt;Finally, I‚Äôd like to show a simpler way of writing the syntax above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make sure you‚Äôve understood this concept properly, let‚Äôs rearrange the items a little bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.item4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here‚Äôs how that looks on the page. Try to wrap you head around why it looks like it does. It shouldn‚Äôt be too hard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4WchxUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20l5in2ja63nxb81210s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4WchxUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20l5in2ja63nxb81210s.png" alt="Imagsbajaks" width="700" height="295"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that was it!&lt;br&gt;
Thanks for reading! My name is Sagar Barapatre, and I often write about learning new stuff. Follow me on &lt;a href="https://twitter.com/sagar_sb_"&gt;Twitter&lt;/a&gt; if you want to keep in touch.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>codepen</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Here are the Dockerfile tips you can use to get your builds faster and safer</title>
      <author>Mateusz Cholewka</author>
      <pubDate>Sat, 13 Nov 2021 02:58:15 +0000</pubDate>
      <link>https://dev.to/mtk3d/here-are-the-dockerfile-tips-you-can-use-to-get-your-builds-faster-and-safer-4o1a</link>
      <guid>https://dev.to/mtk3d/here-are-the-dockerfile-tips-you-can-use-to-get-your-builds-faster-and-safer-4o1a</guid>
      <description>&lt;p&gt;Nowadays we are using docker a lot in web development. It's easy to use, great in scaling, and gives us an immutable environment for running your application from local development to deploy on production.&lt;br&gt;
To get the best experience with docker you should apply some practices to get fast and light builds of your docker images.&lt;/p&gt;

&lt;p&gt;In this article, I want to show you some of those practices based on this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7-fpm&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; https://deb.nodesource.com/setup_12.x .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bash setup_12.x

&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://getcomposer.org/installer | php &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--install-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/ &lt;span class="nt"&gt;--filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;composer

&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    curl &lt;span class="se"&gt;\
&lt;/span&gt;    git &lt;span class="se"&gt;\
&lt;/span&gt;    htop &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev &lt;span class="se"&gt;\
&lt;/span&gt;    mariadb-client &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev &lt;span class="se"&gt;\
&lt;/span&gt;    vim &lt;span class="se"&gt;\
&lt;/span&gt;    unzip &lt;span class="se"&gt;\
&lt;/span&gt;    nodejs

&lt;span class="k"&gt;RUN &lt;/span&gt;apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; yarn

&lt;span class="k"&gt;RUN &lt;/span&gt;docker-php-ext-install &lt;span class="se"&gt;\
&lt;/span&gt;    exif &lt;span class="se"&gt;\
&lt;/span&gt;    gd &lt;span class="se"&gt;\
&lt;/span&gt;    intl &lt;span class="se"&gt;\
&lt;/span&gt;    mbstring &lt;span class="se"&gt;\
&lt;/span&gt;    mysqli &lt;span class="se"&gt;\
&lt;/span&gt;    opcache &lt;span class="se"&gt;\
&lt;/span&gt;    pdo_mysql &lt;span class="se"&gt;\
&lt;/span&gt;    sockets

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; COMPOSER_ALLOW_SUPERUSER 1&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#base-your-builds-on-specific-image-version"&gt;
  &lt;/a&gt;
  Base your builds on specific image version
&lt;/h2&gt;

&lt;p&gt;The first thing to change is the base image tag. As you can see in this Dockerfile the PHP7 is used, but the tag name is not precise enough. Here is the first improvement that we can make.&lt;/p&gt;

&lt;p&gt;When you are using dependencies managers like yarn / composer, you probably use the lock files. Using them will keep exactly the same version of dependencies on every install. So why don't do it with all dependencies?&lt;/p&gt;

&lt;p&gt;So the first dependency is the image tag we base our image on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7-fpm&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can change it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4.25-fpm&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should save you for situations where your image doesn't work after a few months because of differences in newer PHP versions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copy-your-code-last"&gt;
  &lt;/a&gt;
  COPY your code last
&lt;/h2&gt;

&lt;p&gt;Docker images are built from layers. Every layer can be cached, and this cache can be reused for the next builds if nothing has been changed. Docker can use cache only if all of the previous layers are loaded from cache too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;...
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /app/&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should order your build steps by frequency of changes. Your application code is probably the thing that is changing most often, so you should put it as late as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4.25-fpm&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;
&lt;span class="c"&gt;## remove COPY from here&lt;/span&gt;
...
## rest of commands
...
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="c"&gt;## final commands&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#do-not-use-add-for-remote-dependencies"&gt;
  &lt;/a&gt;
  Do not use ADD for remote dependencies
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ADD&lt;/code&gt; instruction in Dockerfile allows you to copy files from remote locations by URLs. This feature also can unpack the zip archives which is great, but it has one problem. It doesn't cache your files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; https://deb.nodesource.com/setup_12.x ./node_setup.bash&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;bash node_setup.bash &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;rm &lt;/span&gt;node_setup.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, that's better.&lt;br&gt;&lt;br&gt;
The setup script file is undesirable, so it can be removed after the installation. But the problem is that the layers in Dockerfiles works like commits in git. When you put something to the repository using commit you can delete it with the next one, but because git works incrementally, both versions are kept in history, and the repository size increases.&lt;br&gt;
To avoid this in docker images, you should create and remove undesirable files in the same instruction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://deb.nodesource.com/setup_12.x ./node_setup.bash &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    bash node_setup.bash &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;rm &lt;/span&gt;node_setup.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Better, but still not the best.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://deb.nodesource.com/setup_12.x ./node_setup.bash | bash -
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can do all that things in one-line command using a pipe. In this example, the file content will be fetched and pushed directly to the bash that will execute it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-composer-in-dockerfile"&gt;
  &lt;/a&gt;
  Using composer in Dockerfile
&lt;/h2&gt;

&lt;p&gt;Here we have the composer installed in our container. It will be kept for all environments. It's not the best idea to keep it in final image, because it's not necessery and may add some vulnerabilities. There is a better option to use composer with multistage build that I want to describe in the next article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;...
&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://getcomposer.org/installer | php &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;--install-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/ &lt;span class="nt"&gt;--filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;composer
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This line is ok it will be cached, and do not leave any garbage.&lt;br&gt;
Maybe we should use the hash checking script that you can find in the official install script.&lt;br&gt;
You can also use this trick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;...
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=composer:2.1.11 /usr/bin/composer /usr/bin/composer&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will copy the composer bin from the external official composer image.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-apt-packages"&gt;
  &lt;/a&gt;
  Installing apt packages
&lt;/h2&gt;

&lt;p&gt;Next, we have some packages installed using apt manager. Let's check if all of them are needed.&lt;br&gt;&lt;br&gt;
The git may be required for pulling packages or building some binaries from source. I can't see any reason to keep it. Let's remove it for now.&lt;br&gt;&lt;br&gt;
The htop may be useful for debugging, but not for the final image, we can install it when we really need it. Vim is useless too because you shouldn't make any changes in the working container. It's stateless, so your changes will disappear on a restart. Also mariadb-client is probably required only for development.&lt;/p&gt;

&lt;p&gt;The rest of the packages may be required, but there is one more problem. The docker is using layers for caching. Every layer is built from dingle instruction. The cache is invalidated if the instruction or previous instruction had changed. So in this case if you do not change this instruction, the newer packages could be never installed, and they may vary depends on build environment.&lt;br&gt;&lt;br&gt;
If you add a specific version of every package, you will be sure that every image built from this Dockerfile has the same versions of packages, and the cache will be invalidated correctly.&lt;br&gt;&lt;br&gt;
You can do this by specifying the version after the &lt;code&gt;=&lt;/code&gt; sign. To check which version you need to install, go to your current working container, or to the container that you build your image from, and check it with a list command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt list libonig-dev
Listing... Done
libonig-dev/stable,now 6.9.6-1.1 amd64 &lt;span class="o"&gt;[&lt;/span&gt;installed]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example the currently working version is &lt;code&gt;5.5.9999+default&lt;/code&gt;, so let's check the rest and specify them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev&lt;span class="o"&gt;=&lt;/span&gt;67.1-7 &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev&lt;span class="o"&gt;=&lt;/span&gt;2.3.0-2 &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev&lt;span class="o"&gt;=&lt;/span&gt;6.9.6-1.1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;unzip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.0-26 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;nodejs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;12.22.7-deb-1nodesource1

&lt;span class="k"&gt;RUN &lt;/span&gt;apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, you need to keep them up to date manually. It's good to check them frequently.&lt;/p&gt;

&lt;p&gt;There is one more thing to do. After the install command, there is a commend that's cleaning your system after installing instruction. It's very good that that is here, but this is done in the separated instruction. As we remember, if we remove something on another layer, that will still exist in the previous layers of our final image. So let's do the cleaning in the same command. That should decrease your final image size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev&lt;span class="o"&gt;=&lt;/span&gt;67.1-7 &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev&lt;span class="o"&gt;=&lt;/span&gt;2.3.0-2 &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev&lt;span class="o"&gt;=&lt;/span&gt;6.9.6-1.1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;unzip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.0-26 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;nodejs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;12.22.7-deb-1nodesource1 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#composer-dependencies"&gt;
  &lt;/a&gt;
  Composer dependencies
&lt;/h2&gt;

&lt;p&gt;Let's get to the next lines. There is another one &lt;code&gt;RUN&lt;/code&gt; instruction, that will install all of our composer dependencies. The first thing that is missed here is that we install all dependencies also with dev dependencies, that's are not necessary for the running environment. So let's put some flags here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--optimize-autoloader&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those flags will install all dependencies exclude dev, with autoloader optimization.&lt;/p&gt;

&lt;p&gt;As you remember, we have to move the &lt;code&gt;COPY&lt;/code&gt; instruction of our code from the beginning of this file as much as possible at the end. Here is the line where we need our project files. But do we need our entire codebase? How often do you change the dependencies in your project? For sure less often than your application code. So do we need to pull our dependencies every time when we change something in our code? Probably no üòÉ&lt;br&gt;&lt;br&gt;
So the only files that we need are the composer files there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.json .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.lock .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt; &lt;span class="nt"&gt;--no-scripts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the cache will work for our composer depenencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;Ok, it's time when we need our code because there are the build steps. Let's paste our &lt;code&gt;COPY&lt;/code&gt; instruction from the beginning here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, we need to generate the autoloader file with all our project files&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;composer dumpautoload &lt;span class="nt"&gt;--optimize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#node-dependencies"&gt;
  &lt;/a&gt;
  Node dependencies
&lt;/h2&gt;

&lt;p&gt;For a node there is the same situation as in composer. So first copy packages files and next install all dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do we need all dependencies or only non-dev dependencies? Maybe we don't need any node dependencies in the container because we use it only to build our frontend. So why not install everything and remove it after the build?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    yarn run build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; node_modules &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    yarn cache clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And right now, we have no node dependencies that are not necessary. The problem here is that we cannot cache those dependencies. There are two ways to resolve this problem. The first one is the multistage build, but it's the topic for another article, which will be available soon. The second option will be to move entire frontend building to the nginx Dockerfile.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#values-for-now"&gt;
  &lt;/a&gt;
  Values for now
&lt;/h2&gt;

&lt;p&gt;Applying all those changes, let's check how much build process time we get.&lt;br&gt;&lt;br&gt;
Old image build 4m28s* 901MB&lt;br&gt;&lt;br&gt;
New image build 3m57s* 711MB&lt;br&gt;&lt;br&gt;
So we safe almost 200MB for final image. Our build time is not much better than before, but let's check how our cache is working now:&lt;br&gt;&lt;br&gt;
Old image with cache 4m35s*&lt;br&gt;&lt;br&gt;
New image with cache 25.1s*&lt;br&gt;&lt;br&gt;
So yea, the cache is working better for our new image.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#do-you-really-need-node-for-running-php-application"&gt;
  &lt;/a&gt;
  Do you really need node for running PHP application?
&lt;/h2&gt;

&lt;p&gt;In our example Dockerfile we are building our frontend app in the backend container, and then copy it to our frontend container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:latest&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=backend /app/public /app/public&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; docker/nginx/default.conf /etc/nginx/default.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why to not build our app directly in the frontend image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; nginx:1.21.4&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; docker/nginx/default.conf /etc/nginx/default.conf&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;curl &lt;span class="nt"&gt;-sS&lt;/span&gt; https://deb.nodesource.com/setup_12.x ./node_setup.bash | bash -

&lt;span class="k"&gt;RUN &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;&lt;span class="nv"&gt;nodejs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;12.22.7-deb-1nodesource1 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; yarn

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    yarn run build &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; node_modules &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    yarn cache clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our backend Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4.25-fpm&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=composer:2.1.11 /usr/bin/composer /usr/bin/composer&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    libicu-dev&lt;span class="o"&gt;=&lt;/span&gt;67.1-7 &lt;span class="se"&gt;\
&lt;/span&gt;    libgd-dev&lt;span class="o"&gt;=&lt;/span&gt;2.3.0-2 &lt;span class="se"&gt;\
&lt;/span&gt;    libonig-dev&lt;span class="o"&gt;=&lt;/span&gt;6.9.6-1.1 &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="nv"&gt;unzip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.0-26 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    apt purge &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nt"&gt;--auto-remove&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;docker-php-ext-install &lt;span class="se"&gt;\
&lt;/span&gt;    exif &lt;span class="se"&gt;\
&lt;/span&gt;    gd &lt;span class="se"&gt;\
&lt;/span&gt;    intl &lt;span class="se"&gt;\
&lt;/span&gt;    mbstring &lt;span class="se"&gt;\
&lt;/span&gt;    mysqli &lt;span class="se"&gt;\
&lt;/span&gt;    opcache &lt;span class="se"&gt;\
&lt;/span&gt;    pdo_mysql &lt;span class="se"&gt;\
&lt;/span&gt;    sockets

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; COMPOSER_ALLOW_SUPERUSER 1&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.json .&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; composer.lock .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-dev&lt;/span&gt; &lt;span class="nt"&gt;--no-scripts&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;composer dumpautoload &lt;span class="nt"&gt;--optimize&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So right now our backend image without cache is building in 3m8s* and with cache in 6s*, and it weight is 597MB.&lt;br&gt;&lt;br&gt;
The frontend image is building 57s* and it weight is 310MB.&lt;br&gt;&lt;br&gt;
You can build them in parallel, so the final time could be the maximum time for one of the images.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multistage-builds"&gt;
  &lt;/a&gt;
  Multistage builds
&lt;/h2&gt;

&lt;p&gt;All of those changes may be even better with using feature called multistage builds.&lt;br&gt;
This topic should be available soon in the next article on my blog üòÉ&lt;/p&gt;




&lt;p&gt;*All the times that appear in this article, I got on my Mac with intel i5 and 16GB RAM environment.&lt;/p&gt;

&lt;p&gt;Please remember about using non root user in your docker images.&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://mateuszcholewka.com/post/dockerfile-refactoring/"&gt;mateuszcholewka.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>docker</category>
      <category>php</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Easy Conversion Tracking with PropelAuth</title>
      <author>propelauthblog</author>
      <pubDate>Sat, 13 Nov 2021 02:44:41 +0000</pubDate>
      <link>https://dev.to/propelauth/easy-conversion-tracking-with-propelauth-1e83</link>
      <guid>https://dev.to/propelauth/easy-conversion-tracking-with-propelauth-1e83</guid>
      <description>&lt;p&gt;Almost every advertising platform has a concept of "conversion tracking." When someone clicks on your ad, conversion tracking is a way to determine how valuable that click was. Did the user leave after 5 seconds? Did they sign up? Did they buy something?&lt;/p&gt;

&lt;p&gt;By providing answers to those questions to your advertiser, they can tune the ads to get the outcomes you want. Usually this is done by copying some javascript onto your site and triggering events on the actions you want to encourage.&lt;/p&gt;

&lt;p&gt;At &lt;a href="https://www.propelauth.com"&gt;PropelAuth&lt;/a&gt;, we strongly believe that your auth tool should take on as much as possible in order to get you back to building your product. PropelAuth does this by providing a fully configurable, hosted authentication service - complete with a UI, straightforward documentation, and easy to use libraries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9RIW3rwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro5l12p678xioahy1bge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9RIW3rwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ro5l12p678xioahy1bge.png" alt="Screenshot of setting up conversion" width="880" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To further our mission of taking on as much of the work surrounding auth as possible, we're releasing support for signup conversion tracking. If you want your ads to optimize for user signups, just enter the ID supplied by your advertiser, and we handle the rest. From email/password to social signups, we'll automatically trigger the correct event for your advertiser.&lt;/p&gt;

&lt;p&gt;We currently support Google, Reddit, Facebook, and Twitter. Looking for a different advertiser? Let us know at &lt;a href="//mailto:support@propelauth.com"&gt;support@propelauth.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>marketing</category>
      <category>tooling</category>
      <category>startup</category>
      <category>advertising</category>
    </item>
    <item>
      <title>Data Access in F#</title>
      <author>Angel D. Munoz</author>
      <pubDate>Sat, 13 Nov 2021 02:27:40 +0000</pubDate>
      <link>https://dev.to/tunaxor/data-access-in-fsharp-3o6n</link>
      <guid>https://dev.to/tunaxor/data-access-in-fsharp-3o6n</guid>
      <description>&lt;p&gt;Hello there, this is the next entry in Simple Things F#.&lt;/p&gt;

&lt;p&gt;Today we'll talk about Database access. Databases are something we have to use very often after all it is where we store our data most common databases we use are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Databases&lt;/li&gt;
&lt;li&gt;NoSQL Databases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won't dive deep into the differences between them, rather than that I will focus on how you can access these databases from F# code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As in previous entries I'll be using F# scripts which can be executed with the .NET CLI that comes in the .NET SDK which you can get from here: &lt;a href="https://get.dot.net"&gt;https://get.dot.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's review our options for today&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt; - Dapper Wrapper (i.e. anything that MSSQL, PostgreSQL, MySQL supports)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt; - ADO.NET wapper (i.e MSSQL, PostgreSQL, SQLite, MySQL, and others)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AngelMunoz/Mondocks"&gt;Mondocks&lt;/a&gt; - MongoDB DSL for the MongoDB .NET Driver&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will not complicate things and work with simple DB Schemas, and we will be using PostgreSQL since it's a pretty common database used around the world, but please keep in mind these solutions (and others that I will share at the end) work with MSSQL and MySQL as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have docker installed, spin up a postgresql instance&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d \
 --name my-instance-name \
 -e POSTGRES_PASSWORD=Admin123 \
 -e POSTGRES_USER=admin
 -p 5432:5432 \
 postgres:alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;This will be our little schema, nothing fancy something just to get started with some F# code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;140&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;references&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can create the PostgreSQL database using any DB manager you already know. In case you don't have anything available you can use &lt;a href="https://dbeaver.io/"&gt;dbeaver&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you have your database cretated and have the schema in place let's begin with the cool stuff&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dapperfsharp"&gt;
  &lt;/a&gt;
  Dapper.FSharp
&lt;/h2&gt;

&lt;p&gt;If you like ORMs this is going to be a library for you, given that you can map records to tables so using them is seamless, also Dapper.FSharp adds a couple of F# types to make your life easier.&lt;/p&gt;

&lt;p&gt;Let's check what are our F# records going to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we just did a 1-1 record translation, more complex schemas may differ from what your application is using you can use DTO's or anonymous records to work with these differences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// From F# 5.0 + you can "require" NuGet packages in F# scripts&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// register our tables&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// we can use this function to match tables&lt;/span&gt;
    &lt;span class="c1"&gt;// with different names to our record definitions&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;
&lt;span class="c1"&gt;/// In normal circunstances you would write&lt;/span&gt;
&lt;span class="c1"&gt;/// `use! conn = new NpgsqlConnection(connString)`&lt;/span&gt;
&lt;span class="c1"&gt;/// but inside F# scripts we're not allowed for top declarations like this,&lt;/span&gt;
&lt;span class="c1"&gt;/// so we use let instead&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Generate two different authors&lt;/span&gt;
&lt;span class="c1"&gt;// one with an optional handle to see how we can deal with null values&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Angel D. Munoz"&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"some@email.com"&lt;/span&gt;
        &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"angel_d_munoz"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Misterious Person"&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mistery@email.com"&lt;/span&gt;
        &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// If you were to use ASP.NET core&lt;/span&gt;
&lt;span class="c1"&gt;// you would be running on a task or async method&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;/// the `!` here indicates that we will wait&lt;/span&gt;
    &lt;span class="c1"&gt;/// for the `InsertAsync` operation to finish&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// here's the Dapper.FSharp magical DSL&lt;/span&gt;
        &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt;
            &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;InsertAsync&lt;/span&gt;

    &lt;span class="c1"&gt;/// If all goes well you shoul'd see&lt;/span&gt;
    &lt;span class="c1"&gt;/// `Rows Affected: 2` in tour console&lt;/span&gt;
    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Rows Affected: %i{result}"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you get a message like "warning FS3511: This state machine is not statically compilable." don't worry it is being tracked in &lt;a href="https://github.com/dotnet/fsharp/issues/12038"&gt;https://github.com/dotnet/fsharp/issues/12038&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cool! so far we have inserted two authors to our database from our mapping, now let's bring those folks back&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;allUsers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;selectAll&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Names: "&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;allUsers&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;%s{user.name}"&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;usersWithTwitterHandle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Twitter Handles:"&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;usersWithTwitterHandle&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;// we use .Value because filter users whose handle is None&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s2"&gt;%s{user.twitter_handle.Value}"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;you should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Names:
  Angel D. Munoz
  Misterious Person
Twitter Handles:
  angel_d_munoz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check the update code, which to be honest is pretty similar, what do we update though? Our Mysterious user doesn't have a twitter handle, so let's add one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Dapper.FSharp"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Dapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;FSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="c1"&gt;// register our optional F# types&lt;/span&gt;
&lt;span class="nn"&gt;OptionTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// register our tables&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;table'&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inSchema&lt;/span&gt; &lt;span class="s2"&gt;"public"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;noHandleUsers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SelectAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// let's try to get the first result from the result set&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;noHandleUsers&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="c1"&gt;// if there is one, let's update it&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="c1"&gt;// partially update the record of the user with&lt;/span&gt;
            &lt;span class="c1"&gt;// the F# record update syntax&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"mysterious_fsharper"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authorTable&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
                    &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;UpdateAsync&lt;/span&gt;

        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Users updated: %i{result}"&lt;/span&gt;
    &lt;span class="c1"&gt;// if we have run this script, our result set will be empty&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"No Users Without handle were Found"&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// we're inside a script hence why we need run it synchronously&lt;/span&gt;
&lt;span class="c1"&gt;// most of the time you don't need this&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AwaitTask&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunSynchronously&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the script is run, we should see&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Users updated: 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if we run it for a second time we'll see&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No Users Without handle were Found&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And if we run the "select" script we'll should see the &lt;code&gt;mysterious_fsharper&lt;/code&gt; handle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Twitter Handles:
  angel_d_munoz
  mysterious_fsharper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far, things have been quite straight forward, but what if you don't like the ORM style? If you like to write SQL like a real programmer (&lt;em&gt;&lt;strong&gt;Which of course, it's sarcasm&lt;/strong&gt;&lt;/em&gt;.) or you simply like to write your SQL queries, let's then take a look at &lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#donald"&gt;
  &lt;/a&gt;
  Donald
&lt;/h2&gt;

&lt;p&gt;Donald can help us to have a 1-1 mapping with our models just like &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt; but it needs help from our side, it is quite flexible in some aspects and tedious in others let's see how can we add these helpers.&lt;/p&gt;

&lt;p&gt;For the Donald scripts we will modify our &lt;code&gt;Author&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; records a little bit, we will add a static function called &lt;code&gt;DataReader&lt;/code&gt; which will take an &lt;code&gt;IDataReader&lt;/code&gt; and return the corresponding record&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Donald"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Data&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Donald&lt;/span&gt;

&lt;span class="c1"&gt;// Same Author model from before&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Add the DataReader&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="c1"&gt;// the reader has some functions that help us map&lt;/span&gt;
        &lt;span class="c1"&gt;// existing columns from the database and their&lt;/span&gt;
        &lt;span class="c1"&gt;// data type to our record, this can be really great&lt;/span&gt;
        &lt;span class="c1"&gt;// when you need to work on a schema you don't own&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;
          &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt;
          &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadStringOption&lt;/span&gt; &lt;span class="s2"&gt;"twitter_handle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We do the same with the Post record&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;
          &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"content"&lt;/span&gt;
          &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"authorId"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more patterns you can follow rather than attaching the static function directly to the Record, you could have a &lt;code&gt;module Author = ...&lt;/code&gt; which contains helper functions (like the data reader) but for simplicity we will attach it right there in the record.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt; offers two syntax styles when it comes to creating and manipulating queries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fluent Style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fluent style is an approach based on piping functions (i.e. using &lt;code&gt;|&amp;gt;&lt;/code&gt;), this is similar to other fluent APIs in other languages like &lt;code&gt;db.newCommand(cmd).setParams(params).execute()&lt;/code&gt; these are common in C#, in the case of F# we do something like that but using individual functions and partial application in some cases&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsFluent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;conn&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newCommand&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors WHERE twitter_handle &amp;lt;&amp;gt; @handle"&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setParams&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"handle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Null&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Expression Style&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Expression style, uses what in F# we call &lt;code&gt;Computation Expressions&lt;/code&gt; which you already used with &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt;! Here's the same previous query with the expression style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsExpression&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors WHERE twitter_handle &amp;lt;&amp;gt; @handle"&lt;/span&gt;
          &lt;span class="n"&gt;cmdParam&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"handle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Null&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They are slightly different and depending on your background one might feel more comfortable than the other Feel free to choose the one you like the best, in my case I will continue the rest of the post with the Expression based one given that we already have some expression based code from &lt;a href="https://github.com/Dzoukr/Dapper.FSharp"&gt;Dapper.FSharp&lt;/a&gt;. Previously we added some authors, let's try to add Posts to those authors with &lt;a href="https://github.com/pimbrouwers/Donald"&gt;Donald&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Npgsql"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Donald"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Npgsql&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;Donald&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Data&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;
          &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"email"&lt;/span&gt;
          &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadStringOption&lt;/span&gt; &lt;span class="s2"&gt;"twitter_handle"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IDataReader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;
          &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"title"&lt;/span&gt;
          &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadString&lt;/span&gt; &lt;span class="s2"&gt;"content"&lt;/span&gt;
          &lt;span class="n"&gt;authorId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ReadGuid&lt;/span&gt; &lt;span class="s2"&gt;"authorId"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;connstring&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="s2"&gt;"Host=192.168.100.5;Username=admin;Password=Admin123;Database=simple_fsharp"&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;NpgsqlConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connstring&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authorsResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// let's query all of the authors&lt;/span&gt;
    &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="s2"&gt;"SELECT * FROM authors"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="nn"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DataReader&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// authorsResult is a DbResult&amp;lt;Author list&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// that is a helper type&lt;/span&gt;
    &lt;span class="c1"&gt;// which help us successful and failed database operations&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;authorsResult&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="c1"&gt;// if the operation was successful return the authors&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;
    &lt;span class="c1"&gt;// otherwise print to the console what failed&lt;/span&gt;
    &lt;span class="c1"&gt;// and return an empty list&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"%O"&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
        &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;insertCommand&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="s2"&gt;"""INSERT INTO posts(id, title, content, authorId)
     VALUES(@id, @title, @content, @authorId)"""&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;postId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;dbCommand&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cmdText&lt;/span&gt; &lt;span class="n"&gt;insertCommand&lt;/span&gt;

            &lt;span class="n"&gt;cmdParam&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;postId&lt;/span&gt;
                       &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"RandomPost: {postId}"&lt;/span&gt;
                       &lt;span class="s2"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="s2"&gt;"This is an extremely Long Post!..."&lt;/span&gt;
                       &lt;span class="s2"&gt;"authorId"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;SqlType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Inserted post with id: {postId}"&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Failed to insert post with id: {postId}... {err}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point we should have one post for each user in our database you can run it a couple times more to insert other posts if you wish, but I think these scripts show how you can do Database operations with these libraries&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-libraries"&gt;
  &lt;/a&gt;
  Other Libraries
&lt;/h2&gt;

&lt;p&gt;The F# ecosystem has several options that can appeal to developers of all kinds here are a few more that are worth looking at if you're looking for more alternatives&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RepoDB - &lt;a href="https://github.com/mikependon/RepoDB"&gt;https://github.com/mikependon/RepoDB&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RepoDB is a .NET micro ORM Database library that focuses on performance and has compatibility with many adapters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dusty Tables - &lt;a href="https://github.com/Zaid-Ajaj/DustyTables"&gt;https://github.com/Zaid-Ajaj/DustyTables&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zaid is an F# OSS Beast, Dusty tables is a simple functional wrapper on top of the SqlClient ADO.NET adapter&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Npgsql.FSharp - &lt;a href="https://github.com/Zaid-Ajaj/Npgsql.FSharp"&gt;https://github.com/Zaid-Ajaj/Npgsql.FSharp&lt;/a&gt; , &lt;a href="https://github.com/Zaid-Ajaj/Npgsql.FSharp.Analyzer"&gt;https://github.com/Zaid-Ajaj/Npgsql.FSharp.Analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zaid once again showing us the F# OSS spirit, this time with Npgsql.FSharp which is a PostgreSQL focused wrapper which has a SQL analyzer that can type verify your queries against your database at compile time!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLHydra - &lt;a href="https://github.com/JordanMarr/SqlHydra"&gt;https://github.com/JordanMarr/SqlHydra&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SQLHydra provides a CLI experience for record generation from an existing database Schema plus a SQL query builder similar to Dapper.FSharp, this is a more complete solution that works for Postgres, MSSQL and SQLite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-elephant-in-the-room"&gt;
  &lt;/a&gt;
  The elephant in the Room...
&lt;/h3&gt;

&lt;p&gt;EntityFramework has always been unfriendly to F# given how it relies on inheritance and mutability which isn't bad, it is the most used ORM in C# after all but it provides some heavy friction with F#, recently C# added records to the language and even if they are not like F# ones, they can be immutable just like F# ones, so with these Records it might be on a better place but I haven't been able to try it nor have the excitement to test it to be honest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-mondocks"&gt;
  &lt;/a&gt;
  Bonus! Mondocks
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Time for some shameless plug (with some shame)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I know, I Know... .NET is not the most friendly towards mongodb databases given how schemaless it is, and with F# it is even worse! there's a lot of cases where you can have missing properties (which is the same as having a null or even worse some times) but if you control the Database or for some reason you need to interact with Mongo Databases (perhaps because you're migrating from Node.js or similar) I took some time to work out on a DSL that is quite similar to Node's MongoDB query language.&lt;/p&gt;

&lt;p&gt;The approach with Mondocks is somewhat different, with Mondocks ideally you want to work with anonymous records to shape your data and then once you have the information do the mapping to the corresponding Record or DTO&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Mondocks.Net"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: MongoDB.Driver"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;MongoDB&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Driver&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Queries&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Types&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;insertCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;documents&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                      &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Angel D. Munoz"&lt;/span&gt;
                      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"some@email.com"&lt;/span&gt;
                      &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="s2"&gt;"angel_d_munoz"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Guid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;NewGuid&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
                      &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Misterious Person"&lt;/span&gt;
                      &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mistery@email.com"&lt;/span&gt;
                      &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mongodb://192.168.100.5/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"simple_fsharp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InsertResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;insertCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Inserted: %i{result.n}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;To do an update it's a similar case, we will fetch the author first then we will update it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Mondocks.Net"&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: MongoDB.Driver"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Bson&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Driver&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Queries&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Mondocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Types&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Guid&lt;/span&gt;
      &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="n"&gt;twitter_handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MongoClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mongodb://192.168.100.5/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"simple_fsharp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;findCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt;
        &lt;span class="n"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FindResult&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;findCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// check on the database result set if we have an author&lt;/span&gt;
&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firstBatch&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tryHead&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;updateCmd&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="s2"&gt;"authors"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// query by author _id&lt;/span&gt;
            &lt;span class="n"&gt;updates&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;._&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt;
                        &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
                          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
                              &lt;span class="c1"&gt;// set the updated handle&lt;/span&gt;
                              &lt;span class="n"&gt;twitter_handle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mysterious_fsharper"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="n"&gt;multi&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;
                        &lt;span class="n"&gt;upsert&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;false&lt;/span&gt;
                        &lt;span class="n"&gt;collation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
                        &lt;span class="n"&gt;arrayFilters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
                        &lt;span class="n"&gt;hint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;RunCommand&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UpdateResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonCommand&lt;/span&gt; &lt;span class="n"&gt;updateCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Updated: %i{result.n}"&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"No Author was found"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To Run this, copy this content into a file named &lt;code&gt;script.fsx&lt;/code&gt; (or whatever name you prefer) and type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet fsi script.fsx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will also see that you lost a lot of safety doing these kinds of queries, given the nature of MongoDB it's hard to keep safety around it overall, however if you come from a dynamic runtime this DSL might feel a little bit more to what you're used to, there are some rough corners but I invite you to try it and log issues, if you're looking for an F# OSS project to dip your toes, it might be a great one :)&lt;/p&gt;

&lt;p&gt;Also, you can use the usual MongoDB Driver as well you can use both side by side to be honest I made it in a way that doesn't require you to jump out from a standard .NET Driver experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts...
&lt;/h2&gt;

&lt;p&gt;When it comes to SQL F# is a safe bet be it on the server, scripts and other environments F# can help you keep type safety between your database and your application, there are plenty of alternatives for you to try and I'm pretty sure you'll find what fits best for you.&lt;/p&gt;

&lt;p&gt;We'll catch ourselves on the next time!&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>sql</category>
      <category>mongodb</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Web-push Notification using React and Node js</title>
      <author>ronyfr3</author>
      <pubDate>Sat, 13 Nov 2021 01:39:03 +0000</pubDate>
      <link>https://dev.to/ronyfr3/web-push-notification-using-react-and-node-js-oc9</link>
      <guid>https://dev.to/ronyfr3/web-push-notification-using-react-and-node-js-oc9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#i-will-share-my-code-here-for-better-understanding-the-core-concept"&gt;
  &lt;/a&gt;
  I will share my code here for better understanding the core concept.
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;public/custom-sw.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("Service Worker Loaded...");
self.addEventListener('push', event =&amp;gt; {
  const data = event.data.json()
  console.log('New notification', data)
  event.waitUntil(
    self.registration.showNotification(data.title, {
      body:data.description,
      icon:data.icon
    })
  );
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/serviceWorker.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://bit.ly/CRA-PWA

const isLocalhost = Boolean(
    window.location.hostname === 'localhost' ||
      // [::1] is the IPv6 localhost address.
      window.location.hostname === '[::1]' ||
      // 127.0.0.1/8 is considered localhost for IPv4.
      window.location.hostname.match(
        /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
      )
  );

  export function register(config) {
    if ('serviceWorker' in navigator) {
      // The URL constructor is available in all browsers that support SW.
      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
      if (publicUrl.origin !== window.location.origin) {
        // Our service worker won't work if PUBLIC_URL is on a different origin
        // from what our page is served on. This might happen if a CDN is used to
        // serve assets; see https://github.com/facebook/create-react-app/issues/2374
        return;
      }

      window.addEventListener('load', () =&amp;gt; {
        const swFileName = process.env.NODE_ENV === 'production' ? 'service-worker.js' : 'custom-sw.js'
        const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;

        if (isLocalhost) {
          // This is running on localhost. Let's check if a service worker still exists or not.
          checkValidServiceWorker(swUrl, config);

          // Add some additional logging to localhost, pointing developers to the
          // service worker/PWA documentation.
          navigator.serviceWorker.ready.then(() =&amp;gt; {
            console.log(
              'This web app is being served cache-first by a service ' +
                'worker. To learn more, visit https://bit.ly/CRA-PWA'
            );
          });
        } else {
          // Is not localhost. Just register service worker
          registerValidSW(swUrl, config);
        }
      });
    }
  }

  function registerValidSW(swUrl, config) {
    navigator.serviceWorker
      .register(swUrl)
      .then(registration =&amp;gt; {
        registration.onupdatefound = () =&amp;gt; {
          const installingWorker = registration.installing;
          if (installingWorker == null) {
            return;
          }
          installingWorker.onstatechange = () =&amp;gt; {
            if (installingWorker.state === 'installed') {
              if (navigator.serviceWorker.controller) {
                // At this point, the updated precached content has been fetched,
                // but the previous service worker will still serve the older
                // content until all client tabs are closed.
                console.log(
                  'New content is available and will be used when all ' +
                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'
                );

                // Execute callback
                if (config &amp;amp;&amp;amp; config.onUpdate) {
                  config.onUpdate(registration);
                }
              } else {
                // At this point, everything has been precached.
                // It's the perfect time to display a
                // "Content is cached for offline use." message.
                console.log('Content is cached for offline use.');

                // Execute callback
                if (config &amp;amp;&amp;amp; config.onSuccess) {
                  config.onSuccess(registration);
                }
              }
            }
          };
        };
      })
      .catch(error =&amp;gt; {
        console.error('Error during service worker registration:', error);
      });
  }

  function checkValidServiceWorker(swUrl, config) {
    // Check if the service worker can be found. If it can't reload the page.
    fetch(swUrl)
      .then(response =&amp;gt; {
        // Ensure service worker exists, and that we really are getting a JS file.
        const contentType = response.headers.get('content-type');
        if (
          response.status === 404 ||
          (contentType != null &amp;amp;&amp;amp; contentType.indexOf('javascript') === -1)
        ) {
          // No service worker found. Probably a different app. Reload the page.
          navigator.serviceWorker.ready.then(registration =&amp;gt; {
            registration.unregister().then(() =&amp;gt; {
              window.location.reload();
            });
          });
        } else {
          // Service worker found. Proceed as normal.
          registerValidSW(swUrl, config);
        }
      })
      .catch(() =&amp;gt; {
        console.log(
          'No internet connection found. App is running in offline mode.'
        );
      });
  }

  export function unregister() {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.ready.then(registration =&amp;gt; {
        registration.unregister();
      });
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/subscription.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const convertedVapidKey = urlBase64ToUint8Array("BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo")

function urlBase64ToUint8Array(base64String) {
  const padding = "=".repeat((4 - base64String.length % 4) % 4)
  // eslint-disable-next-line
  const base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/")

  const rawData = window.atob(base64)
  const outputArray = new Uint8Array(rawData.length)

  for (let i = 0; i &amp;lt; rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

function sendSubscription(subscription) {
  return fetch(`/notifications/subscribe`, {
    method: 'POST',
    body: JSON.stringify({
      subscription:subscription,
      title:"Notified by Precision Ordance",
      description:"someone buy a product",
      icon:"https://ichef.bbci.co.uk/news/976/cpsprodpb/9A50/production/_118740593_gettyimages-1231144196.jpg"
    }),
    headers: {
      'Content-Type': 'application/json'
    }
  })
}
//conditional render
let clicked = true

export function subscribeUser() {
  if(clicked) {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready.then(function(registration) {
      if (!registration.pushManager) {
        console.log('Push manager unavailable.')
        return
      }

      registration.pushManager.getSubscription().then(function(existedSubscription) {
        if (existedSubscription === null) {
          console.log('No subscription detected, make a request.')
          registration.pushManager.subscribe({
            applicationServerKey: convertedVapidKey,
            userVisibleOnly: true,
          }).then(function(newSubscription) {
            console.log('New subscription added.',newSubscription)
            sendSubscription(newSubscription)
          }).catch(function(e) {
            if (Notification.permission !== 'granted') {
              console.log('Permission was not granted.')
            } else {
              console.error('An error ocurred during the subscription process.', e)
            }
          })
        } else {
          console.log('Existed subscription detected.')
          sendSubscription(existedSubscription)
        }
      })
    })
      .catch(function(e) {
        console.error('An error ocurred during Service Worker registration.', e)
      })
  }
}else{
console.log('Can not reachable to the service worker');
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;src/App.JS&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
import { subscribeUser } from './subscription';
function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;header className="App-header"&amp;gt;
        &amp;lt;button onClick={subscribeUser}&amp;gt;Click Here&amp;lt;/button&amp;gt;
        &amp;lt;p&amp;gt;
          Edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
        &amp;lt;/p&amp;gt;
        &amp;lt;a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        &amp;gt;
          Learn React
        &amp;lt;/a&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#backend-code"&gt;
  &lt;/a&gt;
  Backend Code
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;index.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const dotenv = require('dotenv')
const bodyParser = require('body-parser')
const cors = require('cors')
const webpush = require('web-push')

const app = express()

dotenv.config()

app.use(cors())
app.use(bodyParser.json())
###You can generate VAPID keys using the command:
**./node_modules/.bin/web-push generate-vapid-keys**
webpush.setVapidDetails("mailto: `YOUR EMAIL OR WEBSITE ADDRESS`", "YOUR-PUBLIC-VAPID-KEY", "YOUR-PRIVATE-VAPID-KEY")

app.get('/', (req, res) =&amp;gt; {
  res.send('Hello world!')
})

app.post('/notifications/subscribe', (req, res) =&amp;gt; {
  console.log(req.body);
  const payload = JSON.stringify({
    title:req.body.title,
    description:req.body.description,
    icon:req.body.icon
  })
// console.log(req.body.subscription);
  webpush.sendNotification(req.body.subscription, payload)
    .then(result =&amp;gt; console.log())
    .catch(e =&amp;gt; console.log(e.stack))

  res.status(200).json({'success': true})
});

app.listen(8000, () =&amp;gt; console.log('The server has been started on the port 8000'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Using the affix plugin in bootstrap 4.</title>
      <author>Gemini392</author>
      <pubDate>Sat, 13 Nov 2021 01:26:10 +0000</pubDate>
      <link>https://dev.to/gemini392/using-the-affix-plugin-in-bootstrap-4-15o1</link>
      <guid>https://dev.to/gemini392/using-the-affix-plugin-in-bootstrap-4-15o1</guid>
      <description>&lt;p&gt;Have you ever been on a site and there is this really cool feature you can't get enough of? And what's more, as you scroll on further, the feature stays in place, as if it has been glued to that portion of the screen. Awesome, right? Yes! &lt;/p&gt;

&lt;p&gt;All you have to say is 'cool'. But in this article, we will transform your awe to practicality, using bootstrap 4 of course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Say we made a pretty vertical side navigation bar, and we know that people who visit our site are going to love it.It doesn't necessarily need to beautify the page. Sometimes, web pages come like books with sections or chapters.If a user needed to see only a particular chapter of that book he/she would need to scroll forever. The affix plugin reduces all that time wasted by a lot. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;: Bootstrap will be our working tool. But what exactly do we need, you might ask? We want to use the affix plugin. This feature will help us 'stick' blocks of code (from horizontal navigation bars, to vertical side navigation bars) on our web page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;: I will be taking you gradually through the coding steps, and you'll see how easy it is to solve our little problem. &lt;/p&gt;

&lt;p&gt;But first of, I'll assume that you started off your html page by linking all related bootstrap CDNs. If you have your files installed locally on your machine, then you're still awesomely prepared.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; &lt;br&gt;
Our side nav isn't just going to start from anywhere.That might not look as okay as we want it to be. So, let's create some content at the beginning of the page instead. Say, a few paragraphs to introduce our user to our page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3nrXheh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzaxcctptlpnms08baol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3nrXheh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzaxcctptlpnms08baol.png" alt="Paragraphs" width="880" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
Now that the page intro is out the way,we can start on our side nav. We are going to create a list, it could be ordered or unordered depending on you.&lt;/p&gt;

&lt;p&gt;Let's drop the code, and then explain it, shall we?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-tlu4yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s07uu8lrnli8a9oo2eg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-tlu4yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s07uu8lrnli8a9oo2eg9.png" alt="Image description" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want you to notice quite a few things here. First of all, I want you to take note of how we enclose everything in a container from this point. We've also made use of the bootstrap grid system, and we've assigned 3 columns to our navigation menu. You can already picture the menu occupying a  portion of the left side of your screen, and your content falling on the other side.&lt;/p&gt;

&lt;p&gt;Another pretty amazing thing to remark, is what is enclosed by our &lt;code&gt;ul&lt;/code&gt; tag. What I want you to see is &lt;code&gt;data-spy&lt;/code&gt; and &lt;code&gt;data-offset-top&lt;/code&gt;. So, basically, we add &lt;code&gt;data-spy&lt;/code&gt; to the element we want to affix. Well, obviously, because its value is &lt;code&gt;affix&lt;/code&gt;. The &lt;code&gt;data-offset-top&lt;/code&gt; tells us how many pixels we should scroll, before the sticking effect kicks in. In our case, we chose 205px. Feel free to try this with different values, of course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;br&gt;
Our side nav bar is out there. Is that it? Hell,no it isn't. What will your users scroll through? Where is the actual page? You made a great table of content, where are the book pages? &lt;/p&gt;

&lt;p&gt;This is the part where we make that. It'll just be random content to illustrate the 'scroll and see sticky' effect. Let's write a few more paragraphs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auyYdSgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxv87p7yz3dzkcyg98mi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auyYdSgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxv87p7yz3dzkcyg98mi.png" alt="Image description" width="880" height="874"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see now, we added our new content over 9 columns. This is what will appear on the other portion of the screen. In other words, it is what you will be scrolling through.&lt;/p&gt;

&lt;p&gt;But it does not really end there. In order to make this function perfectly we need a teeny bit of css.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AT-GQKvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwvem7dxuz3q8erd33un.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AT-GQKvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwvem7dxuz3q8erd33un.png" alt="Image description" width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;top&lt;/code&gt; to make sure that our menu bar sticks to the top as we scroll. We have given it a value of 20px in this case, so that as soon as the sticky effect takes place, our vertical menu bar stays 20px from the top of the page.&lt;/p&gt;

&lt;p&gt;And voila! Too technical? Too hard? Easier than you thought? You're smart, I know you'll get it. &lt;/p&gt;

&lt;p&gt;After going through this article, I hope you've learned something. &lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Most Popular Web Application Frameworks</title>
      <author>matthewekeller</author>
      <pubDate>Sat, 13 Nov 2021 00:49:09 +0000</pubDate>
      <link>https://dev.to/matthewekeller/most-popular-web-application-frameworks-135p</link>
      <guid>https://dev.to/matthewekeller/most-popular-web-application-frameworks-135p</guid>
      <description>&lt;p&gt;Many companies large and small fret over which web application framework to use to create a new application.  Listed below are the main categories of choices, products within those choices, and the pros and cons of each choice.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-solutions-architects-first-choice-is-to-decide-if-they-want-to-use-server-side-or-client-side-html-rendering"&gt;
  &lt;/a&gt;
  The solutions architects first choice is to decide if they want to use &lt;u&gt;server side&lt;/u&gt; or &lt;u&gt;client side&lt;/u&gt; HTML rendering.
&lt;/h1&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-server-side-rendering"&gt;
  &lt;/a&gt;
  1) Server side rendering
&lt;/h2&gt;

&lt;p&gt;Originally all web application frameworks had the UI rendered server side.  This is because the world wide web started out as static content, consisting of HTML pages.  If you wanted to update your static website you would upload a newer version of your HTML file to your web server.  Very quickly the need to make the web page dynamic, for example to render your bank account contents, became obvious so frameworks and entire programming languages were written to make this possible.&lt;/p&gt;

&lt;p&gt;‚ÄÇPros&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Highly intuitive - Code the static html and indicate places in it where dynamic content will be inserted.&lt;/p&gt;

&lt;p&gt;2) Complete artistic design freedom - The look and feel of your web page is only limited by your ability to layout html and css.  Many frameworks sell themselves as being component based, when the truth is that HTML already consists of components.  They are called HTML input tags.  The only drawback is that a good web designer can be hard to find, and they are usually a different breed than a web developer, usually experts in photoshop rather than javascript. So, if you want a truly beautiful and interactive web application you will often need both a web designer and a web developer.&lt;/p&gt;

&lt;p&gt;3) Rendering is physically close to resources - When HTML is rendered server side, it is usually done on a server that is physically close to the database and/or service calls.  In the modern world of cloud computing, this means it is done within the same virtual private cloud.  The speed of light is fast but it is still much faster when servers are 20 feet apart instead of being located on different parts of the planet.&lt;/p&gt;

&lt;p&gt;4) Inherently secure - Authenticated users have their authorization (aka access rights) stored server side where they cannot manipulate them.  Furthermore, resources such as service endpoints and databases are beyond the reach of any bad actors.  Vulnerable servers are behind the application server, out of site.&lt;/p&gt;

&lt;p&gt;5) Strongly typed languages - Server side code is mostly written in strongly typed compiled programming languages, which minimizes programmer errors and provides a rich selection of interactive IDE choices.  Client side languages will be used to interact with the user browser side, to provide a richer experience, but client side script is a much smaller percentage of the code.&lt;/p&gt;

&lt;p&gt;6) Mature technology - Being over 20 years old, server side rendering and the libraries that support it are very complete and highly tested.&lt;/p&gt;

&lt;p&gt;7) Large community - The majority of enterprise web applications are still built on server side UI rendering.  Many companies are shifting to client side UI rendering for use cases that better fit that pardigm, but server side rendering is still the norm and the labor force that can work on these systems is the most abundant.  Furthermore, extensive libraries of client side components and styling are available that are designed to work with this architecture.&lt;/p&gt;

&lt;p&gt;8) Asynchronous communication - Early server side application architecture forced developers to refresh the entire page every time new information was needed.  This is no longer the case. New information can be brought into the page using ajax calls, allowing any combination of data and layout to be refreshed without ever leaving the page.  Single page applications can be easily written even when the layout is dynamically combined with the data server side.&lt;/p&gt;

&lt;p&gt;9) Efficient Internationalization - Server side rendering is usually coupled with an in memory language Resource Bundle.  Large web applications can have 1000's of translated phrases.  By rendering the html server side the layout can be infused with these translations in thousandths of a second.  On the other hand, client side rendering would require downloading of all of these translations client side and sewing the translations into the layout as another type of server side data, which best case can cause noticeable delays in rendering and worst case causes the user to believe the application is hung.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚ÄÇCons&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) More bandwith - Since HTML has to be returned with every request, server side rendering sends more data.  However, good HTML design that excludes inline styling and defines all styles instead in style sheets, and furthermore caches all of the static content browser side, greatly reduces the amount of layout that is transmitted, making the HTML very thin.  Combine this good design with the stratospheric speed of modern networks and this con becomes more academic than a real world concern.&lt;/p&gt;

&lt;p&gt;2) More memory usage on server - Server side rendering relies on user sessions to keep track of who a user is and to potentially cache other useful data.  This means that the minimum footprint of a logged in user is their authentication and authorization state.  It is up to developers to decide just how large a user session can become.  Careless handling of session state can cause resource problems on the server, but good management can also keep the session size insignificantly small, especially if each server is not expected to handle more than 500,000 users at a time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-client-side-rendering"&gt;
  &lt;/a&gt;
  2) Client side rendering
&lt;/h2&gt;

&lt;p&gt;Server side rendering has come a long way since 2000, but there are still use cases where it falls short.  In particular, applications like Facebook are a collage of components that need to update independently from each other, yet all are displayed to the user at the same time.  Even more demanding is the requirement that some subsets of these components aren't fully independent but need to work together.  This kind of website is a very different animal from an airlines site or a bank site where the user generally does one thing at time, and therefore requires a different solution.&lt;/p&gt;

&lt;p&gt;‚ÄÇPros&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Full logical isolation of components - Components in client side frameworks aren't just parts of the page, they are more like independent web pages.  They have their own independent layout, state, css, and transactions with the server.&lt;/p&gt;

&lt;p&gt;2) Libaries of standard components - Just like server side rendering communities, the client side community has also created libraries of standard components with the vision of making web development become a plug and play development experience.  The fuller logical isolation of components makes these widgets more portable especially since they carry their css along with them.  Interestingly this does create the inverse challenge of having to figure out how to make components work with each other.  The boundary that makes them more isolated also makes them harder to integrate.&lt;/p&gt;

&lt;p&gt;3) Backing of some major technology companies - Angular is backed by Google and React is backed by Facebook.  This means that these companies are throwing a lot of money at their frameworks as well as cultivating a fan base.  While Facebook uses React in its major public facing applications, Google does not use Angular in any of its major public facing applications.&lt;/p&gt;

&lt;p&gt;4) Integration with Node.js - Client side javascript frameworks appear to go hand in hand with the Node.js community.  In fact, they have been so tightly integrated that it is actually hard to imagine developing a React application outside of Node.js.  Many libraries and command line interface commands have been cobbled together to make development faster and more intuitive.  It is interesting that Node.js has become the foundation of a lot of this development while it by itself remains the best server solution for only a subset of use cases.  Node.js works best with web applications that have very short transaction times because it is single threaded.&lt;/p&gt;

&lt;p&gt;5) Less memory usage on the Server - Since ideal client side javascript frameworks require very little to no server side memory state, this memory footprint is reduced on the servers, which makes client side applications potentially better scaling.  However, some sort of authorization state still needs to be kept on the server side to verify who a request is coming from and what the user is allowed to do.  So, the most accurate statement is to say that the server side memory footprint of a user is very small but it still exists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‚ÄÇCons&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1) Difficult to secure - The user's authentication and authorization has to be kept on the client since the server is ideally stateless, consisting of nothing more than service calls.  Browser clients are inherently insecure because they are under the control of the user, and running on the user's machine.  Therefore, complex encryption schemes need to be implemented to keep the credentials on the user's machine but not open to manipulation by the user.  Furthermore, since all layout is cached on the browser, regardless of the user's role, pages that a user should not see are cached there.  So, a sophisticated bad actor will have the entire attack surface of all other roles laid out for them.  &lt;/p&gt;

&lt;p&gt;Some companies solve the authentication issue by authenticating the user through a web server (not application server) and then using the web server as a reverse proxy to all the services.  However, this is in affect maintaining a server side session on the web server instead of on an application server and defeats one of the "benefits" of a client rendering framework.&lt;/p&gt;

&lt;p&gt;2) Complexity - Client side rendering requires much more javascript on the client than server side rendering.  While server side rendering delivers the layout using HTML and the role of javascript is only to power some client side widgets and validation, client side rendering requires an entire ecosystem of javascript including a model, a view, and a controller.  Angular out of the box, for example, delivers 30,000 lines of javascript code to the browser.  The raw size of this stack is just the beginning of the complexity because these frameworks completely abstract the developer away from direct browser DOM operations.  All layout, data, and flow control is done through a custom API.  Developers no longer learn how to code javascript in a browser.  They instead learn to code to the client side framework API.  The learning curve for all of these API's is rather steep and therefore an entire industry of online and in person classes has sprung up to support these tools.&lt;/p&gt;

&lt;p&gt;3) Difficult to debug - The debugging of client side javascript frameworks is generally difficult.  The loose typing of javascript and the sheer size of the libraries leads to cryptic error messages that tell little of what the real problem is.  The code running on the browser is often transpiled into a different form than what the developer wrote to begin with.  For example, the developer wrote typescript and the compiler transpiled this to javascript and delivered it to the browser.  There have been browser plugins specifically written to help with the debugging, but the complexity of the entire paradigm still often leaves the developer in a trial and error loop, wondering why things don't work.&lt;/p&gt;

&lt;p&gt;4) Proprietary - Large client side javascript frameworks are very specific solutions that are almost impossible to port to another framework.  While, server side rendering is far more standards based.  To contrast, going from Struts to Spring MVC is fairly trivial whereas going from Angular to React would be a complete rewrite.  In fact, Angular recently went from Angular 1 to Angular 2, and it was not backward compatible.  Many compaines are spending millions of dollars making the Angular upgrade.  HTML, CSS, and raw javascript are universally available and portable, whereas specific opinionated client side API's are not.&lt;/p&gt;

&lt;p&gt;5) Integration with Node.js - While this can be a pro, it can also be a con.  Some javascript frameworks are so integrated with Node.js that using them in the absence of Node.js is difficult.&lt;/p&gt;

&lt;p&gt;6) Difficult to internationalize - Resource bundles have to be downloaded to the client and treated as data instead of being seamlessly included in the HTML at the server.  Therefore, pulling down labels will need to be done as service calls, greatly slowing the performance of the application and making UI development more complex.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#list-of-frameworks-and-associated-tools-for-2022"&gt;
  &lt;/a&gt;
  List of Frameworks and associated tools for 2022
&lt;/h1&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-side-rendering-frameworks"&gt;
  &lt;/a&gt;
  Server side rendering frameworks
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;a href="https://https://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt; - Backed by a very enthusiastic and vibrant community and designed for web application development.&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/mvc.html"&gt;Spring MVC&lt;/a&gt; - The most popular choice for a java based serverside rendering framework, and supported by an enthusiastic and extensive java community.&lt;/p&gt;

&lt;p&gt;3) &lt;a href="https://struts.apache.org/"&gt;Struts 2&lt;/a&gt; - Also a popular java based framework.  Backed by the Apache Foundation and built to easily integrate with Spring.  This is the easiest choice when converting from a Struts 1 framework to a more modern and secure framework.&lt;/p&gt;

&lt;p&gt;4) &lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt; - The most popular PHP based server side framework.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#server-side-rendering-associated-client-side-tools"&gt;
  &lt;/a&gt;
  Server side rendering, associated client side tools
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;a href="https://jquery.com/"&gt;Jquery&lt;/a&gt; - Provides a single api interface for DOM manipulation in all major browsers&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://jqueryui.com/"&gt;Jquery UI&lt;/a&gt; - Provides library of widgets backed by Jquery, such as drag and drop, dialogs, autocomplete, datepicker, progress bar, and more.&lt;/p&gt;

&lt;p&gt;3) &lt;a href="https://webrocketx.com"&gt;WebRocketX&lt;/a&gt; - A javascript based client side API that facilitates Single Page Architecture including navigation, partial page rendering, and structured error handling.&lt;/p&gt;

&lt;p&gt;4) &lt;a href="https://animejs.com/"&gt;Animejs&lt;/a&gt; - Add animations to your javascript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#client-side-rendering-frameworks"&gt;
  &lt;/a&gt;
  Client side rendering frameworks
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;1) &lt;a href="https://vuejs.org/"&gt;View.js&lt;/a&gt; - The fastest rising star in the client side world.  Provides a fairly intuitive paradigm compared to the other client side frameworks.&lt;/p&gt;

&lt;p&gt;2) &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; - Created by Facebook to meet their needs for a scalable collage type user interface.&lt;/p&gt;

&lt;p&gt;3) &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt; - Created by Google to create a client based UI that talks to stateless services.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>laravel</category>
      <category>react</category>
    </item>
    <item>
      <title>Know this thing in Cypress</title>
      <author>Phan C√¥ng Th·∫Øng</author>
      <pubDate>Sat, 13 Nov 2021 00:43:55 +0000</pubDate>
      <link>https://dev.to/thangphan37/know-this-thing-in-cypress-5dl3</link>
      <guid>https://dev.to/thangphan37/know-this-thing-in-cypress-5dl3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#why-cypress"&gt;
  &lt;/a&gt;
  Why Cypress!
&lt;/h3&gt;

&lt;p&gt;We are working on a project that uses the Next.js framework. And in order to do unit tests for the project. We use Jest.&lt;/p&gt;

&lt;p&gt;Jest is so great!&lt;/p&gt;

&lt;p&gt;But when we want to test the unit page of Next.js, Jest feels a little bit harder to implement. Instead of using Jest, Cypress is an amazing selection for our goal.&lt;/p&gt;

&lt;p&gt;In this article, we're going to figure some core concepts of Cypress.&lt;/p&gt;

&lt;p&gt;Let's grab a drink and go forward!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beforeafter"&gt;
  &lt;/a&gt;
  before-after
&lt;/h3&gt;

&lt;p&gt;When we run our test in Cypress environment, we are able to run debug or do some stuff in the browser.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;I want to check the input whether it's typed or not, I need to do this flow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Type some inputs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm the inputed value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this flow, the great thing in Cypress is I am able to travel forward or backward the action.&lt;/p&gt;

&lt;p&gt;I can go backward to the input when it isn't typed. Or just go forward to the input when it is typed.&lt;/p&gt;

&lt;p&gt;In order to better of understanding, I'm going to demo the &lt;code&gt;before-after&lt;/code&gt; in Cypress.&lt;/p&gt;

&lt;p&gt;This is the flow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Having an input that isn't typed any words.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type some words in the input.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Observe the &lt;code&gt;after&lt;/code&gt; state in Cypress.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step1: Create a page in Next.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are an input element and a label element in our page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BeforeAfter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;describedby&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"userName"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Username:
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;describedby&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"userName"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step2: Write Cypress Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, create a new file &lt;code&gt;cypress.ts&lt;/code&gt; under the &lt;code&gt;cypress&lt;/code&gt; folder in order to connect with &lt;code&gt;Cypress&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;by default, the number of cars is shown on the screen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/before-after&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/username/i&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Henry Ford&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we go to the &lt;code&gt;BeforeAfter&lt;/code&gt; page, find the label &lt;code&gt;username&lt;/code&gt;(input element), and type &lt;code&gt;Henry Ford&lt;/code&gt; for it.&lt;/p&gt;

&lt;p&gt;Now, on the left side, you are able to click the &lt;code&gt;type&lt;/code&gt; state and pin it. The &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; state immediately appears. Press &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; button on the screen, we can see the content of the input is changed before&lt;br&gt;
typing and after typing.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#query-dom"&gt;
  &lt;/a&gt;
  Query DOM
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#asynchronous"&gt;
  &lt;/a&gt;
  Asynchronous
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Did you be familiar with Jquery?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Did you do some query like $(.className)?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using Jquery, we are able to query the element in a synchronous way, and if we don't find the element, Jquery will return null for us.&lt;/p&gt;

&lt;p&gt;But in Cypress, we don't do it synchronously, we find the element in the asynchronous way.&lt;/p&gt;

&lt;p&gt;If the element isn't found the first time, Cypress will retry to find the element in the fixed time(4000ms).&lt;/p&gt;

&lt;p&gt;After this fixed time, if Cypress still don't figure out the element, we will receive an error.&lt;/p&gt;

&lt;p&gt;For ease of understanding, let's describe through the example below!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p.username&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the way &lt;code&gt;Cypress&lt;/code&gt; does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Find the &lt;code&gt;p&lt;/code&gt; element with class &lt;code&gt;username&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the element is found just yield it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the element isn't found, find the element again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In 4000ms if &lt;code&gt;Cypress&lt;/code&gt; still doesn't see the element, throw error for us.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  Content
&lt;/h4&gt;

&lt;p&gt;We also can query the element from the content of the element using &lt;code&gt;contains&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;awesome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We tell &lt;code&gt;Cypress&lt;/code&gt; to find the element that has the word &lt;code&gt;awesome&lt;/code&gt; on the screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-running"&gt;
  &lt;/a&gt;
  Command Running
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#command-asynchronous"&gt;
  &lt;/a&gt;
  Command Asynchronous
&lt;/h4&gt;

&lt;p&gt;All commands in Cypress are asynchronous. Let's discover it through the example below!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;

&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p.name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do some thing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do some thing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a look at the code above, the &lt;code&gt;userName&lt;/code&gt; value always is &lt;code&gt;undefined&lt;/code&gt; because the command &lt;code&gt;cy.get('p.name')&lt;/code&gt; is asynchronous, it still doesn't finish!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How to resolve the problem above?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We just move the &lt;code&gt;if else&lt;/code&gt; condition to &lt;code&gt;.then&lt;/code&gt; that the element is found.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;

&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p.name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do some thing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do some thing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#command-asynchronous-step-by-step"&gt;
  &lt;/a&gt;
  Command Asynchronous Step By Step
&lt;/h3&gt;

&lt;p&gt;Imagine that we have the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/user-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;

&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input.name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Henry Ford&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 2,3&lt;/span&gt;

&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button#submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 4,5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How &lt;code&gt;Cypress&lt;/code&gt; command is run, can you guess it?&lt;/p&gt;

&lt;p&gt;This is the way &lt;code&gt;Cypress&lt;/code&gt; does for us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Visit the link and wait, retry until the successful state is achieved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get the input with class &lt;code&gt;name&lt;/code&gt;, wait, retry until the element is figured out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Type the content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get the button with id &lt;code&gt;submit&lt;/code&gt;, wait, retry until the element is figured out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trigger the &lt;code&gt;click&lt;/code&gt; event.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the flow above, if &lt;code&gt;Cypress&lt;/code&gt; doesn't find the element in the retry process, it throws the error for us.&lt;/p&gt;

&lt;p&gt;In the code above, we don't stop visiting the &lt;code&gt;about&lt;/code&gt; route, we also wait for the load event finishes, we have DOM, and we can do some stuff after that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assertions"&gt;
  &lt;/a&gt;
  Assertions
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#default-assertions"&gt;
  &lt;/a&gt;
  default assertions
&lt;/h4&gt;

&lt;p&gt;The great thing in cypress is default assertions, what's default assertions?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div.container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p.name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a look at the code above, we have one chain with 2 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;find the &lt;code&gt;div&lt;/code&gt; element with the class &lt;code&gt;container&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;find the &lt;code&gt;p&lt;/code&gt; element with the class &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With this chain, by default Cypress auto add assertion, assert the class &lt;code&gt;container&lt;/code&gt; exists, and the class &lt;code&gt;name&lt;/code&gt; exists.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-or-expect"&gt;
  &lt;/a&gt;
  should or expect
&lt;/h3&gt;

&lt;p&gt;In Cypress, we have two ways in order to assert the behavior that we expect.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;should&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expect&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using &lt;code&gt;should&lt;/code&gt; is preferred to use, because it's short, easy of watching the behavior happened before we have this goal.&lt;/p&gt;

&lt;p&gt;There are a ton of &lt;code&gt;property&lt;/code&gt; that &lt;code&gt;should&lt;/code&gt; is supporting, take a look at the &lt;code&gt;Cypress&lt;/code&gt; doc to see in detail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h3&gt;

&lt;p&gt;We just learned about the core concept in Cypress, Let's recap some key points!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can debug and travel all of the states in Cypress.&lt;/li&gt;
&lt;li&gt;Query the element in Cypress is asynchronous.&lt;/li&gt;
&lt;li&gt;Commands in Cypress is run asynchronously.&lt;/li&gt;
&lt;li&gt;By default, Cypress automatically has default assertions.&lt;/li&gt;
&lt;li&gt;Prefer to use &lt;code&gt;should&lt;/code&gt; instead of &lt;code&gt;expect&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>100 d√≠as de c√≥digo: 10, repasando HTML, creando mas repositorios y comenzando con la hoja de estilos de mi pagina personal.</title>
      <author>Daro</author>
      <pubDate>Sat, 13 Nov 2021 00:43:07 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-10-repasando-html-creando-mas-repositorios-y-comenzando-con-la-hoja-de-estilos-de-mi-pagina-personal-4ij9</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-10-repasando-html-creando-mas-repositorios-y-comenzando-con-la-hoja-de-estilos-de-mi-pagina-personal-4ij9</guid>
      <description>&lt;p&gt;¬°Hey, hey, hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a este nuevo d√≠a del reto, hoy es el d√≠a en el que comienzo a mejorar mis habilidades de escritura probando touch typing que, de forma muy resumida, consiste en escribir en el teclado lo mas r√°pido posible.&lt;/p&gt;

&lt;p&gt;Lo hice con ayuda de esta &lt;a href="https://www.typingstudy.com"&gt;guia&lt;/a&gt; y se los recomiendo ya que te permite codificar mas r√°pido. &lt;br&gt;
Te recomiendo intentarlo aunque tengas una velocidad muy buena.&lt;/p&gt;

&lt;p&gt;Tambi√©n he avanzado en algunas otras cosas que me gustar√≠a contarles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la secci√≥n de Fundamentos de HTML en &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Aprend√≠ a agregar una clave ssh a mi cuenta de github.&lt;/li&gt;
&lt;li&gt;Realice una instalaci√≥n y configuracion de git en linux.&lt;/li&gt;
&lt;li&gt;Cree un proyecto de ejemplo en github y realice cambios.&lt;/li&gt;
&lt;li&gt;Aprend√≠ que la mejor forma de hacer una explicaci√≥n de los cambios en una confirmaci√≥n (commit) es escribirlo de forma imperativa.&lt;/li&gt;
&lt;li&gt;Volv√≠ a aprender los comandos basicos de linux como &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt; entre otros.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la secci√≥n &lt;code&gt;Project recipes&lt;/code&gt; del capitulo &lt;strong&gt;HTML foundations&lt;/strong&gt; de la guia &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt; con lo cual ya realice mi objetivo de spring semanal.&lt;/li&gt;
&lt;li&gt;Cree unos cuantos repositorios para los proyectos que voy realizando en la guia.&lt;/li&gt;
&lt;li&gt;Comenc√© a codificar los estilos principales de mi pagina web.&lt;/li&gt;
&lt;li&gt;Repase las etiquetas de html. (se los recomiendo porque yo ya no recordaba algunas)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ademas encontr√© &lt;a href="https://www.befunky.com/es/crear/editor-de-fotos/"&gt;este&lt;/a&gt; editor de fotos online que es bastante interesante y &lt;a href="https://comprimir-video.convertir-pdf.com/"&gt;este&lt;/a&gt; compresor de v√≠deo. &lt;/p&gt;

&lt;p&gt;¬øDeber√≠a de hacer una guia de todas las herramientas que utilizo en el d√≠a a d√≠a? Quiz√°s...&lt;/p&gt;

&lt;p&gt;¬°Y eso es todo por hoy! Espero que les vaya super bien con sus proyectos y animo.&lt;br&gt;
Adi√≥s mundo!&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>html</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
